(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3901480,      94563]
NotebookOptionsPosition[   3727944,      92314]
NotebookOutlinePosition[   3728758,      92344]
CellTagsIndexPosition[   3728681,      92339]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Geometric Algebra & Calculus", "Title",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"9afea453-cc25-4c79-a71c-e5dfbdd1d324"],

Cell[TextData[StyleBox["Initialization, products, orthogonal basis, main \
operations (involutions, grade manipulation,...), matrix representations, \
functions of MV",
 FontSize->16]], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"615112f4-db50-4aab-b1c6-f617fbb0d2d1"],

Cell[TextData[StyleBox["Version: (2023-06-14)",
 FontSize->16]], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"4e44f443-be07-4aab-b2e3-346b3c4e2be1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".Copyright,  License, credit, references and notes"
}], "Section",ExpressionUUID->"d8cfecff-afda-4dd1-b50c-05b0a8572010"],

Cell["\<\
GeometricAlgebra&Calculus:  Software for calculation with Clifford \
multivectors.
Copyright, 2022  A. Acus (arturas.acus@tfai.vu.lt) ,  A. Dargys \
(adolfas.dargys@ftmc.lt)

This file is part of Geometric Algebra&Calculus package.\
\>", "Text",ExpressionUUID->"c5ddf8d2-d89f-4a90-8cbb-9616b54633e9"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". License and credit"
}], "Subsection",ExpressionUUID->"5ab1a0e8-d419-4628-8b9e-2ebe95d67c7b"],

Cell["\<\
GeometricAlgebra&Calculus is free software:  you can redistribute it and/or \
modify it under the terms of the GNU Affero General Public License as \
published by the Free Software Foundation, either version 3 of the License, \
or (at your option) any later version.

GeometricAlgebra is distributed in the hope that it will be useful, but \
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or \
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License \
for more details.

You should have received a copy of the GNU Affero General Public License \
along with GeometricAlgebra.  If not, see <http://www.gnu.org/licenses/>.\
\>", "Text",ExpressionUUID->"97123780-4ced-4e59-a65d-76df0236e407"],

Cell["\<\
Ideas of efficient implementation of geometric algebra multiplication of  \
orthogonal basis vectors were borrowed form G. Stacey Staples articles and \
programming packages CliffMath11, CliffOC11, CliffSymNil11. ( \
http://www.siue.edu/~sstaple/index_files/research.htm).

A number of important functions were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). We \
also much like it general structure, test and  development solutions. 

Improved product precedence was implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

A lot of other sources was used to implement Clifford algebra and calculus \
algorithms (see references for more details).\
\>", "Text",ExpressionUUID->"7c683e00-8827-40be-8e7d-038ae45de9ca"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Main References"
}], "Subsection",ExpressionUUID->"df23ec16-d2a7-4dbe-82f7-821dafb79d59"],

Cell[TextData[{
 "[DH-STAx.y ]\t   Hastenes, David \"Space-time algebra\", 1966 (third \
printing 1992), D. Reidel Publishing Company, Dordrecht Holland,  \n\
[DH-CA2GCx.y]    Hastenes, David \"Clifford algebra to geometric calculus\", \
1987, D. Reidel Publishing Company, Dordrecht Holland,  \n[CHAL-GA4Px.y]  \
Chris Doran, Anthony Lasenby \"Geometric Algebra for physicists\" Cambridge \
University, 2003\n[AB-I2GA&C]\t   Bromborsky, Alan \"An Introduction to \
Geometric Algebra and Calculus\", version of December 11, 2011 \n\
[KG-HFinP&Sp]   Klaus Gurlebeck, Klaus Habetha, Wolfgang Sprossib, \
\"Holomorphics functions in the plane and n-dimensional space\", Springer, \
2008\n[EH-VDC]\t  Eckhard MS Hitzer, \"Vector differential calculus\" Mem. \
Fac. Eng. Fukui., Vol 50 No1, 2002\n[EH-MDC] \t  Eckhard MS Hitzer, \
\"Multivector differential calculus\", Advances in Applied Clifford Algebras \
12(2) pp. 135-182, 2002\n[ECh-GA]\t  Eric Chisolm \"Geometric Algebra\" , \
arXiv 1205.5935v1\n[SS-OCICAS]\tRene Schott, G Stacey Staples \"Operator \
calculus and invertible Clifford Appel systems: theory and applications to \
n-particle fermion algebra\" and other same authors articles\n[WCS-TAGA]     \
William C. Schulz  \[OpenCurlyDoubleQuote]Theory and application of Grassmann \
Algebra\[CloseCurlyDoubleQuote], 2011, Vienna\n[RA-CoNCGBinG&CA]     Rafal \
Ablamowicz, Computation of non-commutative Grobner bases in Grassmann and \
Clifford algebras, Adv. appl. Clifford alg. 20 (2010),  447\[Dash]476\n\
[TB-GBA4GAinMP ]     Troy Brachey, Grobner Bases Algorithms for Grassmann \
Algebras in Maple package, 2008\n[NDNO-CoMISoMvCA] Nedim Degirmenci, Bulifer \
Ozdemir \[OpenCurlyDoubleQuote]The Construction of Maximum Independent Set of \
Matrices via Clifford Algebras\[CloseCurlyDoubleQuote] Turk J. Math. 31, \
(2007) 193-205\n[NDSK-EIoRCA] Nedim Degirmenci, S. Karapazar \
\[OpenCurlyDoubleQuote] Explicit Isomorphisms of Real Clifford Algebras\
\[CloseCurlyDoubleQuote], Int. Journal of Mathematics and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "l Sciences, (2006), 1-13, ID 78613\n[MRdT] Michael Rausch de Traubennerg \
\[OpenCurlyDoubleQuote]Clifford Algebras in Physics\[CloseCurlyDoubleQuote] \
Adv. appl. Clifford alg. 19 (2009), 869-908\n[PL-GPW] Perti Lounesto, G.P. \
Wene \[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173\n[RA-LoCGAaA]     (ed. Rafal Ablamowicz, Garret \
Sobczyk) Lectures on Clifford (Geometric) algebras and applications, \
Springer, 2004\n[GSSDW-CADoCOGE]G.S. Staples, D. Wylie. Clifford algebra \
decompositions of conformal orthogonal group elements, Clifford Analysis, \
Clifford Algebras and Their Applications, 4 (2015), 223-240\n[DF-EAfFaJoB] D. \
Fontijne \[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and \
Join of Blades\[CloseCurlyDoubleQuote]. \n[MarchukShirokov2008] Marchuk, \
N.G., Shirokov D.S. \[OpenCurlyDoubleQuote]Unitary spaces on Clifford \
algebras\[CloseCurlyDoubleQuote], arXiv:0705.1641v1 (2008)\n[Bouma2001a] \
T.A.Bouma \[OpenCurlyDoubleQuote]Invertible Homogeneus Versors are Blades\
\[CloseCurlyDoubleQuote]\n[Bouma2001b] T.A.Bouma \
\[OpenCurlyDoubleQuote]Generalized Projection Operators in Geometric Algebra\
\[CloseCurlyDoubleQuote]\n[Shirokov2020] arxiv:2005.04015v1 \
\[OpenCurlyDoubleQuote]On determinant, other characteristic polynomial \
coefficients, and inverses in Clifford algebras of arbitrary dimension\
\[CloseCurlyDoubleQuote]\n[Shirokov2020b] D. Shirokov \
\[OpenCurlyDoubleQuote]Basis-free Solution to Sylvester Equation in Clifford \
Algebra of Arbitrary Dimension\[CloseCurlyDoubleQuote], \nAdvances in Applied \
Clifford Algebras 31(5)  DOI: 10.1007/s00006-021-01173-0\n[Schindler 2019] \
Joseph C. Schindler \[OpenCurlyDoubleQuote]Geometric calculus on \
pseudo-Riemannian manifolds\[CloseCurlyDoubleQuote], arXiv:1911.07145 \
[math.DG]"
}], "Text",
 CellTags->
  "references",ExpressionUUID->"fdcddf3a-5c67-4f6c-942b-58d193f3ebb3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Setup & configuration"
}], "Section",ExpressionUUID->"246089b4-9667-4177-8ba9-b641a2c1b982"],

Cell["\<\
In order to setup the package follow three steps below. Note, that evaluation \
property was removed from all input cells in this section (copy their content \
and evaluate in your system).\
\>", "Text",ExpressionUUID->"e45fff8b-d694-4e96-824b-c0d2bc44d02d"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Add interpretation to geometric algebra operation symbols"
}], "Subsection",ExpressionUUID->"2610ed77-853f-41eb-98ea-89584ea30de3"],

Cell[TextData[{
 "It is assumed that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version is 8 or above. You need to have writing permissions to \nto system \
file pointed by system variable (evaluate it in your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " system !!!)"
}], "Text",ExpressionUUID->"69f6482c-edd1-4cb9-a59b-819ce1daf925"],

Cell[CellGroupData[{

Cell[BoxData["System`Dump`unicodeCharactersTR"], "Input",
 Evaluatable->False,ExpressionUUID->"c03170e6-d233-4851-9c4d-82d02f5c2293"],

Cell[BoxData["\<\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/FrontEnd/\
TextResources/UnicodeCharacters.tr\"\>"], "Output",ExpressionUUID->"583bcd21-\
ee4f-4cab-b611-6e1486539603"]
}, Open  ]],

Cell["\<\
in order to append contents of the file UnicodeCharactersAdd.tr  (windows \
users should use file UnicodeCharactersAddWin10.tr)\
\>", "Text",ExpressionUUID->"0468086a-a29a-4898-8577-261219699f2b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"appendFile", "=", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", 
     RowBox[{"EvaluationNotebook", "[", "]"}], "]"}], "<>", 
    "\"\<UnicodeCharactersAdd.tr\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", "appendFile", "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"1d8df92f-1bbd-4d47-bcbd-2c20a1c3a58b"],

Cell["\<\
0x26AC      \[GeometricProduct] ($gp$)      Infix       440 None    5   5
0x22CE      \[OuterProduct]     ($op$)      Infix       450 None    5   5
0x26ab      \[DorstProduct]     ($id$)      Infix       459 None    5   5
0x2219      \[InnerProduct]     ($ip$)      Infix       460 None    5   5
0x23A6      \[LeftContract]     ($il$)      Infix       461 None    5   5
0x23A3      \[RightContract]    ($ir$)      Infix       462 None    5   5\
\>", "Print",ExpressionUUID->"9384fc44-5ea3-4a7f-89cc-998ee6fa7169"]
}, Open  ]],

Cell["\<\
 This is needed in order to ensure correct precedences and  infix notations \
for inner, outer and geometric products. Do not forget to make copy of the \
system file before modification!\
\>", "Text",ExpressionUUID->"f5afd523-ac2a-47b2-810f-166ed32d6a48"],

Cell[BoxData[
 RowBox[{"CopyFile", "[", 
  RowBox[{"System`Dump`unicodeCharactersTR", ",", 
   RowBox[{"System`Dump`unicodeCharactersTR", "<>", "\"\<.old\>\""}]}], 
  "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"f36a0a7f-b7a3-4027-95e8-bf37fd6ede29"],

Cell[TextData[{
 "For Linux and Mac users this is all what needed. Restart ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and go to example files. Windows users need next step."
}], "Text",ExpressionUUID->"9b29f7bf-0560-475a-b323-3f7b8af8d744"],

Cell[CellGroupData[{

Cell["Notes and details on the change", "Subsubsection",ExpressionUUID->"904f0503-da29-4f1a-b4a0-869b5316e2c9"],

Cell[TextData[{
 "Note that 0x22CF char was replaced by 0x22CE.There seems to be some \
inconsistency about these two chars, because in text cells it prints \
differently than in input cells (different fonts?). However, if after typing \
\[EscapeKey]op\[EscapeKey] instead wedge symbol you see a symbol  \
\[OpenCurlyDoubleQuote]vee\[CloseCurlyDoubleQuote], replace 0x22CE by 0x22CF. \
\n Also \\[EmptySmallCircle ]  (\[EmptySmallCircle], which already has \
definition in UnicodeSymbols.tr file) was replaced by Unicode 0x26AC for \
geometric product notation in order to avoid symbol clash. Precedence order \
is tricky, geometric product will not work correctly if 440 is replaced by \
430. Also 540 ... precedences was tested and should be avoided.  \
UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, as was noted above, input \
cells are ok.), GeometricProduct(\[GeometricProduct]), Plus (lowest). We use  \
:il: (inner left) for left contraction and :ir: (inner right) for right \
contraction, because :lc: and :rc: already have meaning in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  "
}], "Text",ExpressionUUID->"316209da-babf-4b86-9d9b-13ce12580169"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Private style sheet creation (may be required for Windows users only)"
}], "Subsection",ExpressionUUID->"8d974aa8-a064-47d5-ae02-89ce99d96779"],

Cell[TextData[{
 "This step only concerns users which run ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " on Windows. The Mac and Linux users can skip this step unless they want to \
change ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " default font (not recommended)."
}], "Text",ExpressionUUID->"d38dbf2a-4a2a-4d6f-8be4-b9934d77054e"],

Cell[TextData[{
 "The problem is OS specific, because on Windows default font used for input \
and output has very limited set of Unicode characters. Below is a command \
from  ",
 ButtonBox["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/113478/is-there-a-global-\
setting-for-mathematicas-base-fonts"],
 ", which install private user style sheet with modified input and output \
fonts. As far as we know this is only needed for Windows users. If in the \
cell below you see list of symbols, which are  {empty small circle, wedge, \
center dot, left contract, right contract, fat dot}, i.e.",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAEiLcDMYi99f+WUTSKRhFd0IYlR5rqt3XM+7qZCqb9W7fwcGP99q4F36lh
2igaJOjvkipLLgYuhbR7G6hg2u+FRSYcDDwq+Y82DrzXRhG10GgiGUUE0Wgi
oTP6t2n9n6FWFw+XRLLqiJmUvIJpXcPSX9gU/JxfmqkpLiBgcGDlwAb4pqcN
cWcH2A0ko6GUSDYs2ZXg7KQsr6dpWVw07TNKftzyZfbEHSk6YuIe59Zg6l17
1k1cXD/nyIxFuFvUm991xPvLCgiJKEek9n+gUWbfvHSNoUJy/xp6RjHlaMgk
ks2rjvhJczAyQAEzv2fBArRC432biaSE74W1mNrXXfSVlDLpeI/H/NV9STLK
1W2LP82vz5OTL526nhah/WdRubOwuJpb70eaxObmL4uXfNlEfZOHSiL5t7zZ
jReeRECAUy7u5npkNRtuxcuLqZU9wxJKm5+Xq4uhq0eLvhIbBf+LoAS25oSd
rHPLShpE4sZ7aboOybV56jZblm2huuEPsnUFmZgEdbIfUCMqkdFQSSR/F5eb
cyKnEQY2CUicwtGmJ8UGorzqSclolcWW973xsSq8YoalT/G4av3sLg0Jt4iS
9QVBthIGc+ZvpHYkbv23qidLzW7LsvX3MnRt4md+p7L5m1/WuRkLChq7172k
dmEyVBLJ/w3zpmpyM8GTCCOLgmfvR5TEsPlVna0Up6iTT+trlFDa8qbV302c
S8au4TXelsbv5b3TAxzD3cIXTFz1F69jfi1p7I2KaC2Y/ZUEL2y4laxrFTMD
mDb+rmhPUrZctXgzta0gjMgzlmAiIclY4hMJGa79ubAqV52PlZGBkZFD1Tr1
3Gq0Env9tXAZUfXKF1hSwpbnFRpisjE3cFc3pCBgraHIzSwQ1LAcf1pCRt9n
pDop+x1dBXHzpmfllvoOVS9whhI5VtDI5f8JJxLSjCU6kZAbCJs3vp03++7i
ddh0bXldrysuGXR5HabU+stBUhIGLW+p0mfZMG+CIgeHdDg2i3A5e9lme/2q
ntX/4CIbl6510SmbuJZqVtDI5WBEIJGQaCyxiYQWgbB547N6CylRp1NYusBr
TjqISlk2UaWy/jU3TZ+Dx7F40W/SnLf5H0ERCq2gkcsJJRJSjSUykdAgEFYd
NOBlYhMLSJmObaZyy5cpCa5CLEy8RoeG2kDWAKI/S+pjtVWMVVSMFSV5mKjc
cGXmENdTARlubVf2hE5Dr1t+LF32YR3efuXm9R+WLvsx1IbEBxBBYhMOqJtI
qG7sKBoYtHnTtzVrPsPQl3UbcdWPg8LYUTSKRtEoGjAEADJov1g=
     "], {{0, 20}, {183, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{183, 20},
   PlotRange->{{0, 183}, {0, 20}}]], "Input",
  Evaluatable->False,
  ImageSize->{187, 19},
  ImageMargins->{{0, 0}, {0, 0}},
  ImageRegion->{{0, 1}, {0, 1}},ExpressionUUID->
  "64861c77-fbb3-4270-8dec-0916bd2e78be"],
 " then there is no need for private style sheet. If you see instead some \
empty squares you need to find font which has the mentioned characters"
}], "Text",ExpressionUUID->"2ff29d69-c109-424c-b7d0-796fe49bccc2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[GeometricProduct]", 
   RowBox[{",", 
    RowBox[{"\[OuterProduct]", 
     RowBox[{",", 
      RowBox[{"\[InnerProduct]", 
       RowBox[{",", 
        RowBox[{"\[LeftContract]", 
         RowBox[{",", 
          RowBox[{"\[RightContract]", 
           RowBox[{",", "\[DorstProduct]"}]}]}]}]}]}]}]}]}]}], "}"}]], "Input",\

 Evaluatable->False,ExpressionUUID->"8351f0c5-2162-4e7c-b33d-57f9728b1c5f"],

Cell["\<\
The simplest way to test font is to select the cell above and change font \
with front end Format/Font menu command. When you will find a font where all \
chars are represented correctly, you can set it as default for Standard form \
using the command below.  In particular  we noticed that \
\[OpenCurlyDoubleQuote]Microsoft Sans Serif\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]OpenSymbols\[CloseCurlyDoubleQuote] are ok for Windows \
10.  In order to generate and install private style sheet do the following.\
\>", "Text",ExpressionUUID->"ad1c4e6c-0e36-4471-8d1c-a7c7b20fcd6f"],

Cell["\<\
Make both cells below Evaluatable and execute. Once style sheet  \
\"GA_Style.nb\" is installed in you private Mathematica folder use it with \
all notebooks were you load this package. After that do this don\
\[CloseCurlyQuote]t forget to make both cells below non executable again, \
i.e.  remove front end command Cell/Cell Properties/Evaluatable mark from them\
\>", "Text",ExpressionUUID->"3de50969-e4e5-49c7-bc8b-0712109c3114"],

Cell[BoxData[
 RowBox[{
  RowBox[{"setFont", "[", 
   RowBox[{"fontFamily_", ",", "fontSize_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"styleNB", "=", 
       RowBox[{"Notebook", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cell", "[", 
           RowBox[{"StyleData", "[", 
            RowBox[{"StyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}], 
            "]"}], "]"}], ",", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"StyleData", "[", "\"\<StandardForm\>\"", "]"}], ",", 
            RowBox[{"FontFamily", "\[Rule]", 
             RowBox[{"ToString", "[", "fontFamily", "]"}]}], ",", 
            RowBox[{"FontSize", "\[Rule]", 
             RowBox[{"ToExpression", "[", "fontSize", "]"}]}]}], "]"}]}], 
         "}"}], "]"}]}], ",", 
      RowBox[{"styleSheetName", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
         "$UserBaseDirectory", ",", "\"\<SystemFiles\>\"", ",", 
          "\"\<FrontEnd\>\"", ",", "\"\<StyleSheets\>\"", ",", 
          "\"\<GA_Style.nb\>\""}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FileExistsQ", "[", "styleSheetName", "]"}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"$FrontEnd", ",", 
         RowBox[{
         "DefaultStyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}]}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"styleSheetName", ",", "styleNB"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SetOptions", "[", 
      RowBox[{"$FrontEnd", ",", 
       RowBox[{"DefaultStyleDefinitions", "\[Rule]", "styleSheetName"}]}], 
      "]"}]}]}], "]"}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"45a0b0a1-0b54-4bab-aeb2-e3c97f729186"],

Cell[BoxData[
 RowBox[{"setFont", "[", 
  RowBox[{"\"\<Microsoft Sans Serif\>\"", " ", ",", "14"}], "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"05ff0ea3-e078-42bf-9da6-2875b3b1b48d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Adjust compilation target (optional optimization step)"
}], "Subsection",ExpressionUUID->"a0a93512-3275-4b9a-99e6-70411fd0e935"],

Cell[TextData[{
 "\nGo to next section ",
 StyleBox["Initialization",
  FontWeight->"Bold"],
 " (below) and find variable ",
 StyleBox["$",
  FontWeight->"Bold"],
 "gaPackageOptions.  It contains a number of settings, the most important of \
which is  ",
 StyleBox["CompilationTarget",
  FontWeight->"Bold"],
 ". It defines the way some package functions are compiled. The safe choice \
is to set it to  ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ", which is slightly slower that ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " (compilation to \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] binary \
code). The drawback of compilation to C is that compilation itself takes more \
time, therefore, the package initialization takes more time. If you have C \
compiler installed, read below how to test if it works properly. "
}], "Text",ExpressionUUID->"719e9c23-5f02-41fd-9a19-8cbbf7325690"],

Cell[CellGroupData[{

Cell["How to test whether compilation to C works properly", "Subsubsection",ExpressionUUID->"f596c1eb-5661-4b9f-93dc-9f17f2b7924f"],

Cell["\<\
The speed of base elements products slightly depends on compilation type.  In \
order to make decision make cells below evaluatable. First, test what C \
compilers are available in your system. By default on Windows external \
compilers are absent.\
\>", "Text",ExpressionUUID->"077012fb-06af-4966-824e-7c5c8f3a4365"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"450d29ef-22b3-4209-a631-e5451cefccd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"f59ea091-020a-4f64-887f-5ecb9ce435c0"]
}, Open  ]],

Cell["\<\
If you get nonempty list,  then try to compile trivial function. The output \
should be CompiledFunction[ ].\
\>", "Text",ExpressionUUID->"ba762656-3b4a-4adc-a874-2da7fe0b9836"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], "//", 
  "FullForm"}]], "Input",
 Evaluatable->False,ExpressionUUID->"64e2981c-ef8f-4568-8f83-65bbf03cf794"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CompiledFunction", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"10", ",", "10.3`", ",", "5468"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"Blank", "[", "Real", "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"List", "[", "1", "]"}], "]"}], ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"List", "[", "x", "]"}], ",", "x"}], "]"}], ",", "Evaluate", 
     ",", 
     RowBox[{"LibraryFunction", "[", 
      RowBox[{
      "\"\</home/acus/.Mathematica/ApplicationData/CCompilerDriver/\
BuildFolder/acus-7694/compiledFunction26.so\>\"", ",", 
       "\"\<compiledFunction26\>\"", ",", 
       RowBox[{"List", "[", 
        RowBox[{"List", "[", 
         RowBox[{"Real", ",", "0", ",", "\"\<Constant\>\""}], "]"}], "]"}], 
       ",", "Real"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",ExpressionUUID->"3d65e147-31c2-4018-aa40-99e6cfb48e51"]
}, Open  ]],

Cell["\<\
If compilation was successful, then in subsection \[OpenCurlyDoubleQuote]Help \
functions, installations options\[CloseCurlyDoubleQuote] below (see \
subsection 3.2.1) one of $gaPackageOptions options can be changed be \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]. If \
compilation to C is not possible, then this option should to set to CompileTo\
\[Rule]\[CloseCurlyDoubleQuote]WVM\[CloseCurlyDoubleQuote] . After adjusting, \
make these cells unevaluatable again.\
\>", "Text",ExpressionUUID->"da9b4a89-255e-4b88-85ab-899b50aa0aac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CompilePrint", "[", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
     RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}]}], "]"}], "]"}], 
  "//", "FullForm"}]], "Input",
 Evaluatable->False,ExpressionUUID->"a0537915-cf9e-43f9-a4fb-b42cce4b9205"],

Cell[BoxData[
 TagBox[
  StyleBox[
   "\"\<\\n\\t\\t1 argument\\n\\t\\t1 Real register\\n\\t\\tUnderflow \
checking off\\n\\t\\tOverflow checking off\\n\\t\\tInteger overflow checking \
on\\n\\t\\tRuntimeAttributes -> {}\\n\\n\\t\\tR0 = A1\\n\\t\\tResult = \
R0\\n\\n1\\tReturn\\n\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",ExpressionUUID->"2f6a2498-cb86-4b10-82e4-1fa3ea6bc3b1"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Tested versions and known problems"
}], "Subsection",ExpressionUUID->"50f8bc01-2789-4fac-82fa-e8778037a4cc"],

Cell["\<\
Tested with versions: 10.2 for windows 10,  10.3, 11.3, 12.0, 12.1  for Linux \
Ubuntu 14.04, 16.04, and 18.04 and 10.3 for Mac.\
\>", "Text",ExpressionUUID->"0e5b73d3-1786-42c2-bd01-d8f7bb285509"],

Cell[TextData[{
 " Known problems: \n1) Version 10.0 complains about shadowed symbol z. It is \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " bug, avoid this version. \n2) You have to wait until evaluation of this \
notebook is finished and only then evaluate other cells in your notebook. If \
you press shift + enter on next evaluation cell while package load has not \
been finished for some unknown reasons the evaluation of marked cell can be \
ignored, i.e. simply not sent to kernel (you have to reevaluate it after \
package was loaded). The reason remains unclear (front end and OS related \
bug? some internal evaluation delay time limit exceeded?). "
}], "Text",ExpressionUUID->"635b9c7c-44f1-462d-8dac-28a8f0c190db"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Initialization"
}], "Section",ExpressionUUID->"2153a712-150f-4eab-9c82-4673c6899f50"],

Cell[TextData[{
 StyleBox["Step 1 ",
  FontWeight->"Bold"],
 "we define general context manipulation commands "
}], "Text",ExpressionUUID->"4ed2df02-7f07-4f85-b67a-c2615b4ed048"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Package Context"
}], "Subsection",ExpressionUUID->"8d836bc1-612a-4ef7-bf7d-d3cc6865c1f5"],

Cell["\<\
Context manipulation commands were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). \
Context code has several goals, primarily: 1. \[OpenCurlyDoubleQuote]Private \
context sharing across discontinuous sections.\[CloseCurlyDoubleQuote] 2.  \
\[OpenCurlyDoubleQuote]Easy manual reentry of any one section for developing \
work. \[OpenCurlyDoubleQuote]

DeclareIntoContext creates and/or clears symbols in package context.  \
\>", "Text",ExpressionUUID->"3e980c74-baf4-4688-b2c4-a6e143f018d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"GeometricAlgebra`$gaPackageHasBeenLoaded", ",", 
    RowBox[{"CompoundExpression", "[", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<The package has already been loaded.\>\"", "]"}], 
      ",", " ", 
      RowBox[{"FrontEndTokenExecute", "[", "\"\<EvaluatorAbort\>\"", "]"}], 
      ",", 
      RowBox[{"Abort", "[", "]"}]}], "]"}], ",", 
    RowBox[{
    "GeometricAlgebra`$gaPackageHasBeenLoaded", " ", "=", " ", "False"}]}], 
   "]"}], ";"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"2ea5594d-cdde-4f43-b954-38dce8511373"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<GeometricAlgebra`\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"c7472096-2977-471b-a66b-7007ac37d9d0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$GAUnprotectionList", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageInputAliases", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$GAPackageContext", " ", "=", " ", 
   RowBox[{"Context", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageOnlyContextPath", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"System`$ContextPath", ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"$GAPackagePrivateContext", " ", "=", " ", 
   RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<p`\>\""}]}], 
  ";"}]}], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"efdd2539-df2c-4265-9c81-b8c06d5390ad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "DeclareIntoContext", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"HoldAll", ",", "Listable"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DeclareIntoContext", "]"}], " ", "=", "  ", 
   RowBox[{"{", 
    RowBox[{"Context", "->", "$GAPackageContext"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "normal", " ", "package", " ", 
    RowBox[{"load", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x__", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Quiet", "[", 
      RowBox[{
       RowBox[{"Unprotect", "[", "x", "]"}], ";", " ", 
       RowBox[{"Clear", "[", "x", "]"}], ";"}], " ", "]"}], " ", "/;", " ", 
     RowBox[{"SameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "Global`", " ", "scratchpad", " ", 
    "dev", " ", "work"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "symbolName", " ", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"symbolName", " ", "=", "  ", 
         RowBox[{"SymbolName", "[", 
          RowBox[{"Unevaluated", "[", "x", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Unprotect", "[", "x", "]"}], " ", ";", " ", 
          RowBox[{"Remove", "[", "x", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"BeginPackage", "[", 
         RowBox[{"OptionValue", "[", "Context", "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Symbol", "[", "symbolName", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"EndPackage", "[", "]"}]}]}], "]"}], " ", "/;", " ", 
     RowBox[{"UnsameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"same", " ", "flavor"}], ",", " ", 
    RowBox[{"multiple", " ", "arguments", " ", "pattern"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeclareIntoContext", "[", 
    RowBox[{"x__", ",", " ", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"{", "x", "}"}], "]"}], " ", "/;", " ", 
    RowBox[{"UnsameQ", "[", 
     RowBox[{
      RowBox[{"Context", "[", "]"}], ",", 
      RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";", 
  RowBox[{"End", "[", "]"}], ";"}]}], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"6490e68b-4e3b-4310-85a0-8dff46ae47dc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPrivate", "[", "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"$GAPackageOnlyContextPath", ",", 
         RowBox[{"{", "$GAPackagePrivateContext", "}"}]}], "]"}]}], "]"}], 
     ";", " ", 
     RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";", " ", 
     RowBox[{"If", "[", 
      RowBox[{"$gaPackageHasBeenLoaded", ",", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Unprotect", "[", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<*\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], ";"}], " ", ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EndPrivate", "[", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", "$GAPackageOnlyContextPath"}], 
      "]"}], ";", " ", 
     RowBox[{"End", "[", "]"}], ";"}], " ", ")"}]}], ";"}]}], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"3de305cf-bdc9-436e-96dd-36d4ca81524d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions, installation options"
}], "Subsection",ExpressionUUID->"886b8993-5e4a-450e-8746-a36a2ff6b3b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", 
   RowBox[{
   "$gaPackageOptions", ",", "TheContextSymbolList", ",", 
    "StringListPrintableString", ",", "MissingForwardDeclarations", ",", 
    "gaOptionCheck", ",", "gaSetNamedOptionValue", ",", "gaVerify"}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"9bde0319-c8e3-4153-adfc-0a0bcc9765ea"],

Cell["Usage messages", "Text",ExpressionUUID->"209148b3-5465-4f8e-9b16-31b478270ba0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionCheck", "::", "usage"}], "=", 
   "\"\<gaOptionCheck[testFunction_] tests if option provided to a function \
has correct values. The correctness is tested by user provided testFunction[ \
]. Usage example. First define function test[ ] outside the function which \
calls the option optionA, i.e. test[\\\"optionA\\\",val_]:=IntegerQ[val];  \
Then inside function, which has possible option optionA perform test as \n\
gaOptionCheck[test][Module[{optionAValue},optionAValue=OptionValue[\\\"\
optionA\\\"];  in the case when option is provided with OptionPattern[]. \
\>\""}], ";"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"689131d9-e6ae-4d7f-93c1-8251ee7378ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNamedOptionValue", "::", "usage"}], "=", 
   "\"\<gaSetNamedOptionValue[{commandName_,optionName_,containerName_},\
optionValue_, Quiet->True|False] set option (and all of its suboptions at \
level 1) values to a named container containerName[optionName].  For example, \
 Method -> {\\\"MethodName\\\", MethodSuboption->\\\"SubOptValue\\\"} will \
set containerName[Method]=\\\"MethodName\\\",  and \
containerName[MethodSuboption]=\\\"SubOptValue\\\". containerName is provided \
when calling gaSetNamedOptionValue[ ] inside command\>\""}], ";"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"969608d4-b7a2-4f47-b859-ea4c3faafe00"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$gaPackageOptions", "::", "usage"}], "=", 
   "\"\<Contains global notation, behaviour and performance options. They \
modify implementation of some package functions.\>\""}], ";"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"ff8edc3e-cbe9-4e2e-b189-db2ceb438dac"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVerify", "::", "usage"}], "=", 
   "\"\<gaVerify is option for general verification of computed result. In \
particular it is used in gaHermitianConjugate[], \
gaNormReverseAbs[],gaNormCliffordConjugateAbs[].\>\""}], ";"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"d940baa7-7825-4b2a-8348-8edf4674876b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"e905e4d5-32c9-47a1-856d-3be2a433605a"],

Cell[BoxData[
 RowBox[{"ClearAll", "@@", 
  RowBox[{"{", 
   RowBox[{
   "gaOptionCheck", ",", "gaSetNamedOptionValue", ",", "$gaPackageOptions"}], 
   "}"}]}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"b08516fc-b2c7-439f-9d29-4458bfd5217d"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ".Installation options,  restrictions and default settings"
}], "Subsubsection",ExpressionUUID->"00842a3b-eb89-4e00-95a1-b8b3c52ae039"],

Cell["\<\
Input of geometric, inner and outer products and realization of proper \
precedences requires modern Mathematica front end. Version 8 seems to be \
minimal, where  input/output formatting can work properly. \
\>", "Text",ExpressionUUID->"f06c4c80-376a-4c26-8dbb-338391a84f4d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"ValueQ", "[", 
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "]"}], 
     "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "=", 
      "\"\<We use Associations, so at least version 10.1 is required for most \
of functionality.  $VersionNumber says your version is `1`. Package load is \
aborted.\>\""}], ";"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "<=", " ", "10.1"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], ",", 
       RowBox[{"NumberForm", "[", 
        RowBox[{"System`$VersionNumber", ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Quit", "[", "]"}]}]}], "]"}], ";"}]}], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"98f71124-f634-4b49-9a2e-191c82343783"],

Cell["\<\
Here is the list of options that can be used to modify global package \
function definitions.  Most of them are highly experimental and properly \
untested. Short descriptions and status are given below

Setting CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\[CloseCurlyDoubleQuote] \
(or any other string) will compile essential functions to Wolfram virtual \
machine code (bytecode). An alternative is  CompileTo\[Rule] \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] (rather well tested, \
however, takes package takes longer to load, the gain is only important for \
really huge computations).\
\>", "Text",ExpressionUUID->"c802f3d0-0110-4e58-bff7-7d0112d2846d"],

Cell["\<\
Option gaAlwaysTestInputIndexOrdering seeks for unordered index sets of \
indices (in mvDownUp[down_List, up_List]. Unordered index sets should never \
appear in calculations. Appearance of unordered index list will definitely \
mean that that user input or program code contains error. This option \
modifies $Pre and $Post behaviour. Can disable testing by setting the option \
to False.  No problems were encountered, thought large output is rendered \
more slowly. \
\>", "Text",ExpressionUUID->"234b8e39-659c-446d-8ce7-2b5a83ec26dc"],

Cell["\<\
Option gaMemorizeBaseElementProduct\[Rule]False don't try to memorize base \
element product. Memorization currently is implemented for geometric product \
expansion in the Association form and yields significant speed gain (about \
30%). From the other side when uses it takes more memory and makes \
development much more difficult, therefore we do not use it by default. \
Anyway, together with CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote] it ensures fastest way to expand geometric product \
in Association representation. \
\>", "Text",ExpressionUUID->"fc5dae69-f1a1-4b2d-859f-69175461b3b4"],

Cell["\<\
Option gaOrthonormalBasisSymbolName\[Rule]\[CloseCurlyDoubleQuote]\
\[DoubleStruckE]\[CloseCurlyDoubleQuote] allows user to use different symbol \
for orthonormal base elements. Other settings were untested, so user can \
encounter problems (please report).\
\>", "Text",ExpressionUUID->"21671e90-11ac-43fa-b7f3-43d4fab8c985"],

Cell["\<\
Option gaOrthonormalBasisSymbolInputAlias\[Rule]\[CloseCurlyDoubleQuote]e\
\[CloseCurlyDoubleQuote] assumes, that input e[1] will be converted into base \
element.  Other settings were untested, so user can encounter problems \
(please report).\
\>", "Text",ExpressionUUID->"59d3ff1a-9d5a-483f-9024-0532d2d57226"],

Cell["\<\
Option gaInternalMultivectorRepresentation\[Rule]\[CloseCurlyDoubleQuote]\
PlainRepresentation\[CloseCurlyDoubleQuote]  was removed, because Association \
representation is not convenient for input and for many other operations. \
From the other hand Association representation makes expansion of MV product \
significantly faster (especially with symbolic coefficients) and it is very \
useful for sorting and ordering of MV.   \
\>", "Text",ExpressionUUID->"462f1179-ebf5-4160-94f9-2a4b0671d595"],

Cell["\<\
Options gaDirectionalDerivativeSymbolName\[Rule]\[CloseCurlyDoubleQuote]\
\[DoubleStruckCapitalD]\[CloseCurlyDoubleQuote] and \
gaDirectionalDerivativeInputAlias\[Rule]\[CloseCurlyDoubleQuote]gaDD\
\[CloseCurlyDoubleQuote], sets input method for multivector directional \
derivative (see J. C. Schindler, arxiv 1911.07145).  We will define vector \
argument, (with respect to which derivative is computed)  as vector with down \
indices (that means we have coordinates with up indices). \
\>", "Text",ExpressionUUID->"2da9675f-c36c-4843-bc6f-fc8dd434b7b9"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
Package global option setting
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontColor->RGBColor[
  1, 0, 0],ExpressionUUID->"321e54c4-b843-4749-b258-7582a9b3e8a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaPackageOptions", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CompileTo", "\[Rule]", "\"\<WVM\>\""}], ",", 
     RowBox[{
     "gaOrthonormalBasisSymbolName", "\[Rule]", "\"\<\[DoubleStruckE]\>\""}], 
     ",", 
     RowBox[{"gaOrthonormalBasisSymbolInputAlias", "\[Rule]", "\"\<e\>\""}], 
     ",", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "\[Rule]", "True"}], ",", 
     RowBox[{"gaMemoizeBasisElementProduct", "\[Rule]", "True"}], ",", 
     RowBox[{
     "gaDirectionalDerivativeSymbolName", "\[Rule]", 
      "\"\<\[DoubleStruckCapitalD]\>\""}], ",", 
     RowBox[{
     "gaDirectionalDerivativeInputAlias", "\[Rule]", "\"\<gaDD\>\""}]}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"362f1c82-2248-4ec9-894e-99f37161f8e8"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
No editable data or configuration information below this line for ordinary user
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontColor->RGBColor[
  1, 0, 0],ExpressionUUID->"e0635e1e-ecb9-45a4-856e-914ccc3eee12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"orthonormalBasisSymbolName", "=", 
   RowBox[{"gaOrthonormalBasisSymbolName", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"theInternalMVRepresentation", "=", 
   RowBox[{
   "gaInternalMultivectorRepresentation", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"memoizeProducts", "=", 
   RowBox[{"gaMemoizeBasisElementProduct", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"directionalDerivativeSymbolName", "=", 
    RowBox[{
    "gaDirectionalDerivativeSymbolName", "/.", "$gaPackageOptions"}]}], ";"}],
   "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"input", " ", "aliases"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orthonormalBasisSymbolInputAlias", "=", 
   RowBox[{
   "gaOrthonormalBasisSymbolInputAlias", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"directionalDerivativeInputAlias", "=", 
   RowBox[{"gaDirectionalDerivativeInputAlias", "/.", "$gaPackageOptions"}]}],
   ";"}]}], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"0d7fe44c-ecd9-4d11-bffa-9cc051abc80a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ".Notes of general character:"
}], "Subsubsection",ExpressionUUID->"f6a096a7-1425-4c6f-8d23-dbbea21e4ac5"],

Cell["\<\
1. If some particular function needs to be used before its actual definition \
is given we include its name in declarations of Forwards section.
2. Usage and error messages are defined along with the definitions. Except \
some universal names: Message[gaVerify::obsolete,1,2], etc.
3. Context switch commands are used in Sections
4. All command names are in singular form (i.e. gaIndexList[ ]).  
5. When possible for options we use symbols already used by Mathematica, i.e \
Quiet, Method,Down,...\
\>", "Text",ExpressionUUID->"ba37dffc-0dc2-404e-ac1e-fc8db397ae3b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Useful functions for developing and control"
}], "Subsubsection",ExpressionUUID->"5096be12-ace0-44fa-b8a3-9de2ef62f20e"],

Cell["\<\
Functions StringListPrintableString,MissingForwardDeclarations  are taken \
from DesignerUnits` package (copyright 2009 to present Mark Evans, \
http://designerunits.com/overview). \
\>", "Text",ExpressionUUID->"96238029-9e09-4af6-82f1-9ee6c686782a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "StringListPrintableString", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"ls", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"#1", ",", "\"\<, \>\"", ",", "#2"}], "]"}], "&"}], ",", 
     RowBox[{"First", "[", "ls", "]"}], ",", 
     RowBox[{"Rest", "[", "ls", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"{", "}"}], "]"}], " ", "=", " ", "\"\<\>\""}], ";"}]}], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"e16f7d9f-daa4-4d48-b697-87f357b8e236"],

Cell["Empty list means everything is ok.", "Text",ExpressionUUID->"a0ca8ad7-47ac-45ff-bbb0-1210c8f8d74b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "MissingForwardDeclarations", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"outerCtx_String", ",", "privateCtx_String"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"synm", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}]}], 
      "}"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{
       RowBox[{"synm", " ", "/@", "  ", 
        RowBox[{"Names", "[", 
         RowBox[{"outerCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}], ",", 
       RowBox[{"synm", " ", "/@", " ", 
        RowBox[{"Names", "[", 
         RowBox[{"privateCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", "]"}], " ", ":=", " ", 
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"$GAPackageContext", ",", "$GAPackagePrivateContext"}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"ae356dac-09c2-43e0-8723-ff5e6a3afd97"],

Cell["\<\
gaValidVersionQ[] is used to test if the feature can be implemented in the \
detected Mathematica version. If not, the definition is skipped or package \
load is aborted.\
\>", "Text",ExpressionUUID->"fab87387-fbd1-4864-bccf-1e217a792418"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaValidVersionQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "True"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaValidVersionQ", "::", "MathematicaVersion"}], "=", 
    "\"\<Mathematica version `1` detected. The implementation of feature `2` \
requires at least version `3`.\>\""}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gaValidVersionQ", "[", 
   RowBox[{
    RowBox[{"requiredVersion_", "?", "NumberQ"}], ",", "feature_String", ",", 
    "opts___"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"requiredVersion", "<=", "System`$VersionNumber"}], ",", "True", 
    ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaValidVersionQ", "]"}]}], ")"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaValidVersionQ", "::", "MathematicaVersion"}], ",", 
         "System`$VersionNumber", ",", "feature", ",", "requiredVersion"}], 
        "]"}]}], "]"}], ";", "False"}]}], "]"}]}]}], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"b377dce3-2b6c-497c-8ef5-3d897d908b7c"],

Cell["\<\
Taken from: \
https://mathematica.stackexchange.com/questions/116623/how-to-check-the-\
validity-of-an-option-value (Leonid Shifrin). \
\>", "Text",ExpressionUUID->"ee6e59a7-2576-4efc-b346-e0f22834402a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOptionCheck", "::", "invldopt"}], "=", 
    "\"\<Option `1` for function `2` received invalid value `3`. Valid \
pattern is `1` -> `4`.\>\""}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionCheck", "[", "testFunction_", "]"}], ":=", 
   RowBox[{"Function", "[", 
    RowBox[{"code", ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tag", ",", "msg", ",", "catch", ",", "suggest"}], "}"}], ",", 
       RowBox[{
        RowBox[{"msg", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", "t"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionCheck", "::", "invldopt"}], ",", 
              RowBox[{"Sequence", "@@", "t"}]}], "]"}], ";", "v"}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"catch", "=", 
         RowBox[{"Function", "[", 
          RowBox[{"c", ",", 
           RowBox[{"Catch", "[", 
            RowBox[{"c", ",", "_tag", ",", "msg"}], "]"}], ",", "HoldAll"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Taken", " ", 
           RowBox[{"from", ":", "https", ":"}]}], "//", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
              "questions"}], "/", "116623"}], "/", "how"}], "-", "to", "-", 
           "check", "-", "the", "-", "validity", "-", "of", "-", "an", "-", 
           "option", "-", 
           RowBox[{"value", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Leonid", " ", "Shifrin"}], ")"}], "."}]}]}]}], "*)"}], 
        
        RowBox[{"catch", "@", 
         RowBox[{"ReplaceAll", "[", 
          RowBox[{
           RowBox[{"Unevaluated", "@", "code"}], ",", 
           RowBox[{
            RowBox[{"o", ":", 
             RowBox[{"HoldPattern", "[", 
              RowBox[{"OptionValue", "[", 
               RowBox[{"f_", ",", "_", ",", "name_"}], "]"}], "]"}]}], 
            "\[RuleDelayed]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"val", "=", "o"}], "}"}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"testFunction", "[", 
                  RowBox[{
                   RowBox[{"ToString", "[", "name", "]"}], ",", "val"}], 
                  "]"}]}], ",", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Head", "[", 
                    RowBox[{"suggest", "[", 
                    RowBox[{"ToString", "[", "name", "]"}], "]"}], "]"}], "===",
                     "suggest"}], ",", 
                   RowBox[{"Sow", "[", 
                    RowBox[{
                    RowBox[{"suggest", "[", 
                    RowBox[{"ToString", "[", "name", "]"}], "]"}], "=", 
                    RowBox[{"testFunction", "[", 
                    RowBox[{"ToString", "[", "name", "]"}], "]"}]}], "]"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"Throw", "[", 
                  RowBox[{"$Failed", ",", 
                   RowBox[{"tag", "[", 
                    RowBox[{"name", ",", "f", ",", "val", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Reap", "[", 
                    RowBox[{"suggest", "[", 
                    RowBox[{"ToString", "[", "name", "]"}], "]"}], "]"}], 
                    "]"}]}]}], "]"}]}], "]"}]}], ",", 
                RowBox[{"(*", "else", "*)"}], "val"}], "]"}]}], "]"}]}]}], 
          "]"}]}]}]}], "]"}], ",", "HoldAll"}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"ea50a7fc-e727-42c7-ae57-a2ae490e087a"],

Cell[TextData[{
 "In the case if testFunction returns False, we call the same function with \
single argument to provide valid pattern. In addition to option checking \
function we add named option setting function gaSetNamedOptionValue[ ]. If \
option value was valid, then this function simply sets the option named by \
\[OpenCurlyDoubleQuote]optionName\[CloseCurlyDoubleQuote] value to the \
variable (container) containerName[optionName]=optionValue, which simplifies \
its testing and usage. If option has suboption, then named options are \
created by all its one level suboptions. For example,  Method -> {\
\[OpenCurlyDoubleQuote]MethodName\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]MethodSuboption\[CloseCurlyDoubleQuote]->\
\[CloseCurlyDoubleQuote]SubOptValue\[CloseCurlyDoubleQuote]} will set \
containerName[Method]=\[OpenCurlyDoubleQuote]MethodName\
\[CloseCurlyDoubleQuote],  and \
containerName[\[OpenCurlyDoubleQuote]MethodSuboption\[CloseCurlyDoubleQuote]]=\
\[CloseCurlyDoubleQuote]SubOptValue\[CloseCurlyDoubleQuote]. containerName is \
provided when calling gaSetNamedOptionValue[ ] inside command.\n",
 StyleBox["IMPORATNT: ",
  FontColor->RGBColor[1, 0, 0]],
 "Due to implementation limitation ",
 StyleBox["\[OpenCurlyDoubleQuote]MethodSuboption\[CloseCurlyDoubleQuote] \
should be a STRING,",
  FontColor->RGBColor[1, 0.5, 0]],
 " i.e. Method->{\[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]myExpand\[CloseCurlyDoubleQuote]->\
\[CloseCurlyDoubleQuote]All\[CloseCurlyDoubleQuote]}."
}], "Text",ExpressionUUID->"417ba510-da07-4e45-87a1-7f6f904789a4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSetNamedOptionValue", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "True"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionForsetNamedOptionValue", "[", "\"\<Quiet\>\"", "]"}], 
   "=", "\"\<True|False\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionForsetNamedOptionValue", "[", 
     RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"True", "|", "False"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNamedOptionValue", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"commandName_", ",", "optionName_", ",", "containerName_"}], 
      "}"}], ",", "optionValue_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"optionValue", ",", "$Failed"}], "]"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "if", " ", "option", " ", "value", " ", "is", " ", "not", " ", 
        "valid"}], ",", 
       RowBox[{"do", " ", "nothing"}]}], "*)"}], "Null", ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"case", " ", "of", " ", "complex", " ", 
        RowBox[{"option", ":", 
         RowBox[{
         "if", " ", "some", " ", "of", " ", "suboptions", " ", "were", " ", 
          "set"}]}]}], ",", 
       RowBox[{
       "set", " ", "them", " ", "together", " ", "with", " ", "rest", " ", 
        "of", " ", "suboptions"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"determinableSubOptions", ",", 
          RowBox[{"complexSubOptionList", "=", 
           RowBox[{"DeleteDuplicatesBy", "[", 
            RowBox[{
             RowBox[{"List", "@@@", 
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"optionValue", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"_Rule", "|", "_RuleDelayed"}], "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{"optionName", "/.", 
                    RowBox[{"Options", "[", "commandName", "]"}]}], ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"_Rule", "|", "_RuleDelayed"}], "]"}]}], "]"}]}], 
                 "}"}], ",", "1"}], "]"}]}], ",", "First"}], "]"}]}]}], "}"}],
         ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"complexSubOptionList", "=!=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"determinableSubOptions", "=", 
            RowBox[{"MapAt", "[", 
             RowBox[{"ToString", ",", "complexSubOptionList", ",", 
              RowBox[{"{", 
               RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], ",", 
           RowBox[{"determinableSubOptions", "=", 
            RowBox[{"{", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"optionValue", ",", "\[IndentingNewLine]", 
           RowBox[{"HoldPattern", "[", 
            RowBox[{"{", 
             RowBox[{"_String", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Set", "@@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"containerName", "[", 
                RowBox[{"ToString", "[", "optionName", "]"}], "]"}], ",", 
               RowBox[{"optionValue", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"complexSubOptionList", "=!=", 
               RowBox[{"{", "}"}]}], ",", 
              RowBox[{"Set", "@@@", 
               RowBox[{"MapAt", "[", 
                RowBox[{"containerName", ",", "determinableSubOptions", ",", 
                 RowBox[{"{", 
                  RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}]}], "]"}]}], ",", 
           RowBox[{"(*", 
            RowBox[{
            "case", " ", "when", " ", "option", " ", "is", " ", "simple", " ",
              "or", " ", "complex", " ", "option", " ", "when", " ", "none", 
             " ", "of", " ", "suboptions", " ", "were", " ", "set"}], "*)"}], 
           "_", ",", 
           RowBox[{
            RowBox[{"Set", "@@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"containerName", "[", 
                RowBox[{"ToString", "[", "optionName", "]"}], "]"}], ",", 
               "optionValue"}], "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "for", " ", "option", " ", "with", " ", "suboption", " ", "in", 
              " ", "addition", " ", "we", " ", "set", " ", "all", " ", 
              "suboptions"}], "*)"}], 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"optionName", "/.", 
                 RowBox[{"Options", "[", "commandName", "]"}]}], ",", 
                RowBox[{"HoldPattern", "[", 
                 RowBox[{"{", 
                  RowBox[{"_String", ",", 
                   RowBox[{"__", "?", "OptionQ"}]}], "}"}], "]"}]}], "]"}], 
              ",", 
              RowBox[{"Set", "@@@", 
               RowBox[{"MapAt", "[", 
                RowBox[{"containerName", ",", 
                 RowBox[{"MapAt", "[", 
                  RowBox[{"ToString", ",", 
                   RowBox[{"List", "@@@", 
                    RowBox[{"Rest", "[", 
                    RowBox[{"optionName", "/.", 
                    RowBox[{"Options", "[", "commandName", "]"}]}], "]"}]}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"All", ",", "1"}], "}"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "gaOptionCheck", "[", "testOptionForsetNamedOptionValue", "]"}], 
          "[", 
          RowBox[{"OptionValue", "[", "\"\<Quiet\>\"", "]"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<Quiet\>\"", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<Options which are accessable to gaSetNamedOptionValue[ ] \
are\>\"", ",", "determinableSubOptions"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Their values are set to\>\"", ",", 
               RowBox[{"Definition", "[", "containerName", "]"}]}], "}"}]}], 
            "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"ab9fc598-2b64-4d63-bca3-4e9df4d4155b"],

Cell[BoxData[""], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"8ca3371e-a1b9-4bfd-8029-b24ddccc344c"],

Cell["\<\
Usage: of gaOptionCheck requires definition of test function. Complete \
prototype (inactivated) is provided below. Attention: Option names are not \
strings in general. Option which has suboptions must evaluate to string, for \
example Method->{\[OpenCurlyDoubleQuote]Method1\[CloseCurlyDoubleQuote], \
subOpt1->val}.
However, inside option name container, i.e. \
theOption[\[OpenCurlyDoubleQuote]subOpt1\[CloseCurlyDoubleQuote]] always use \
string. In testOptionPrototype[ ] we have always to use strings, for example, \
testOptionPrototype[\[OpenCurlyDoubleQuote]Method\[CloseCurlyDoubleQuote] ], \
despite that the option itself is a symbol Method!\
\>", "Text",ExpressionUUID->"3df23eac-ddb3-4df8-823a-18ff99fad35a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaFunctionWithOptionPrototype", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"optionWithSuboption1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<Method1\>\"", ",", 
         RowBox[{"subOpt1", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"subOpt2", "\[Rule]", "InnerProduct"}]}], "}"}]}], ",", 
      RowBox[{"simpleOption1", "\[Rule]", "\"\<val2\>\""}]}], "}"}]}], ";"}], 
  " "}]], "Input",
 Evaluatable->False,ExpressionUUID->"8eef5456-5c8f-4b15-8a01-d74290a5c1be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "testOptionPrototype", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"simple", " ", "option", " ", "case"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionPrototype", "[", "\"\<simpleOption1\>\"", "]"}], "=", 
    RowBox[{"\"\<val1\>\"", "|", "\"\<val2\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionPrototype", "[", 
     RowBox[{"\"\<simpleOption1\>\"", ",", "val_String"}], "]"}], ":=", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"\"\<val1\>\"", "|", "\"\<val2\>\""}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "case", " ", "of", " ", "option", " ", "which", " ", "may", " ", "have", 
    " ", "suboptions"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionPrototype", "[", "\"\<optionWithSuboption1\>\"", "]"}], 
   "=", 
   RowBox[{"\"\<Method1\>\"", "|", "\"\<Method2\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionPrototype", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Method1\>\"", ",", "\"\<subOpt1\>\""}], "}"}], "]"}], "=", 
    
    RowBox[{"HoldForm", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Method1\>\"", ",", 
       RowBox[{"subOpt2", "->", 
        RowBox[{"Alternatives", "[", 
         RowBox[{
         "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
          "GeometricProduct"}], "]"}]}]}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{"(*", " ", 
   RowBox[{"important", ":", " ", 
    RowBox[{
    "for", " ", "option", " ", "with", " ", "suboptions", " ", "one", " ", 
     "always", " ", "have", " ", "use", " ", "test", " ", "pattern", "  ", 
     "as", " ", 
     RowBox[{"val_String", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "syntax", " ", "when", " ", "suboptionn", " ", "is", " ", "omited"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionPrototype", "[", 
     RowBox[{"\"\<optionWithSuboption1\>\"", ",", "val_String"}], "]"}], ":=", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"\"\<Method1\>\"", "|", "\"\<Method2\>\""}]}], "]"}]}], ";"}], 
  " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "when", " ", "suboption", " ", "is", " ", "also", " ", "present", " ", 
    "we", " ", "should", " ", "check", " ", "if", " ", "suboption", " ", 
    "NAMES", " ", "are", " ", "correct"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionPrototype", "[", 
     RowBox[{"\"\<optionWithSuboption1\>\"", ",", "val_List"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"MatchQ", "[", 
       RowBox[{"val", ",", 
        RowBox[{"Alternatives", "[", 
         RowBox[{"All", ",", "Automatic", ",", 
          RowBox[{"{", 
           RowBox[{"__Integer", "?", "Positive"}], "}"}]}], "]"}]}], "]"}], "&&", 
      RowBox[{"AllTrue", "[", 
       RowBox[{
        RowBox[{"Rest", "[", "val", "]"}], ",", 
        RowBox[{
         RowBox[{"testOptionPrototype", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"val", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"ToString", "[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
     ")"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Lastly", " ", "check", " ", "if", " ", "suboption", " ", "VALUES", " ", 
    "are", " ", "valid"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionPrototype", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<Method1\>\"", ",", "\"\<subOpt1\>\""}], "}"}], ",", 
      "val_"}], "]"}], ":=", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"Alternatives", "[", 
       RowBox[{
       "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
        "GeometricProduct"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "for", " ", "absent", " ", "suboption", " ", "names", " ", "return", " ", 
    RowBox[{"False", ".", " ", "this"}], " ", "should", " ", "be", " ", 
    "last", " ", "rule"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionPrototype", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Method1\>\"", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", 
   "False"}], ";"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"1f352330-e1b0-4e2d-9663-2b2ca3edf519"],

Cell["The typical prototype of function with options:", "Text",ExpressionUUID->"f8f9d239-e452-4002-856e-98589d10fdf2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFunctionWithOptionPrototype", "[", 
    RowBox[{"args_", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "theOption", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "gaFunctionWithOptionPrototype", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionPrototype", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "False"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], ")"}]}], "}"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"cca45989-e797-4375-b5ce-b4868ab2502a"],

Cell["\<\
Important note. When dealing with suboptions always check if all suboptions \
(for all complex options) has value set. For example, use the construction \
\>", "Text",ExpressionUUID->"e8d60444-43a0-4619-b21f-309ec1cce6c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"theOption", "[", "\"\<subOpt1\>\"", "]"}], "]"}], "===", 
     "theOption"}], ",", 
    RowBox[{
     RowBox[{"theOption", "[", "\"\<subOpt1\>\"", "]"}], "=", 
     "theOptionDefaultValue"}]}], "]"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"62479c4e-6300-4734-abf3-c75c2ad30ad8"],

Cell["\<\
Print calculation details for algorithm internal intermediate values.\
\>", "Text",ExpressionUUID->"61f866fe-d482-457b-899f-32b26a02df12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"printDetails", "[", 
    RowBox[{"True", ",", "_"}], "]"}], ":=", "Null"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printDetails", "[", 
    RowBox[{"False", ",", 
     RowBox[{"stringValuepair", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"_String", "|", "_Style"}], ",", "_"}], "}"}], ".."}], 
       "}"}]}]}], "]"}], ":=", 
   RowBox[{"Echo", "@@@", 
    RowBox[{"(", 
     RowBox[{"Reverse", "/@", "stringValuepair"}], ")"}]}]}], ";"}]}], "Input",\

 CellLabel->"In[48]:=",ExpressionUUID->"176d2bfa-2718-434f-b6cc-a57882833bfc"],

Cell["Universal messages are attributed to gaVerify symbol.", "Text",ExpressionUUID->"c59f6e9b-fbfa-422c-85ad-17695fa60deb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaVerify", "::", "obsolete"}], "=", 
   "\"\<Name or command `1` is now obsolete and to be removed. Please use `2` \
instead.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaVerify", "::", "missing"}], "=", 
   "\"\<The functionality/feature `1` in function `2` is not \
implemented.\>\""}], ";"}]}], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"0b1a7995-cc1c-438a-8d56-2c046b10dcd9"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Forwards"
}], "Subsection",ExpressionUUID->"ca56193e-0ba3-4dce-b13c-b55cbbada6f2"],

Cell["\<\
This subsection does not have private context!
If some particular function needs to used before its actual definition is \
given we include its name in declarations of THIS Forwards section.  Ideal \
design should give empty forward declaration list.\
\>", "Text",ExpressionUUID->"9ce94b90-a686-4389-845f-903099a323aa"],

Cell[TextData[{
 "General multivectors will have head ",
 StyleBox["MV",
  FontWeight->"Bold"],
 ".  With numerical indices they will denote multivectors in general (non \
orthonormal) base as well.  Can also use ",
 StyleBox["MV[s_String] ",
  FontWeight->"Bold"],
 "(syntax ",
 StyleBox["MV[s_Symbol]",
  FontWeight->"Bold"],
 " is not recommended: we can add functionality for coordinate free \
manipulations  later).  ",
 StyleBox["gaCoordinateChart[]",
  FontWeight->"Bold"],
 " is used inTooltip option of  ",
 StyleBox["mvPoint[]",
  FontWeight->"Bold"],
 " notation which shows coordinate system the listed variables belongs to.  \
Can change in future. At the moment we need forward gaDirectionalDerivative[ \
]  because we define nice notation for it. "
}], "Text",ExpressionUUID->"99ec54da-9587-461e-b217-9fc9885edc68"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"7a3e4512-ad6f-4c43-8978-a4236ff4b828"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", 
   RowBox[{"MV", ",", "gaCoordinateChart"}], "]"}], ";"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"f198b81e-89e0-458b-a801-f0606d52083a"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Objects: orthonormal base notation, definition and internal \
representations"
}], "Section",ExpressionUUID->"d373e055-74a0-4e3d-a30c-88ebbd8d41d2"],

Cell[TextData[{
 StyleBox["Step 2 ",
  FontWeight->"Bold"],
 " define main objects and their properties (index, grade, notation, internal \
representations) and their manipulation commands (index rising/lowering, \
index sorting, index taking), etc."
}], "Text",ExpressionUUID->"d80b2b4e-d28d-44ca-98cc-040c244ce09a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering", ",", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}], 
     ",", "Cl", ",", "mvDownUp", ",", "gaDefineInput", ",", "gaNotation", ",",
      "gaDefineNotation", ",", "gaDefineOrthonormalBasis", ",", 
     "gaOrthonormalBasis", ",", "gaHomogeneusSubspaceBasis", ",", "gaIndexUp",
      ",", "gaIndexDown", ",", "gaNonCommutativeMonomialOrder", ",", 
     "gaCommutativeMonomialOrder", ",", "gaDimensionOfVectorSpace", ",", 
     "gaVectorSpaceDimension", ",", "gaGradeList", ",", "gaVectorQ", ",", 
     "gaQuaternionGradeIsZero", ",", "gaGetSignature", ",", "gaGetMV", ",", 
     "gaIndexList", ",", "gaIndexList", ",", "gaIndexSort", ",", 
     "gaTestIndexOrdering", ",", "gaOrderedQ", ",", "gaGradesOnly", ",", 
     "gaNegativeSignatureIndexList", ",", "gaMakeAlias", ",", "mvPoint", ",", 
     
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`directionalDerivativeSymbolName", 
      "]"}], ",", "gaDefineAssociationRepresentationKeyOrder", ",", 
     "gaVariables", ",", "gaGetAlgebra", ",", "gaI", ",", 
     "gaRunningCoordinateChart", ",", "gaDimensionOfRepresentation", ",", 
     "gaDimensionOfMatrixRepresentation"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"00dbf0b9-27f4-4d3d-8a2f-67d8c132381b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], ";"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"046ba6a5-0d69-44bf-a93d-407098ab79f6"],

Cell["Usage messages", "Text",ExpressionUUID->"d0948ae5-2b71-4371-8bb1-6e52adbba70e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningAlgebra", "::", "usage"}], "=", 
   "\"\<gaRunningAlgebra returns an algebra Cl[p,q,r] for which input aliases \
take place at given moment. The p,q,r denotes the number of positive (p), \
negative (q) and zero (r) norm base vectors, respectively. For example, \
Cl[3,0,0] is geometric algebra for Euclidian space.\>\""}], " ", 
  ";"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"d08ad10e-f0be-4189-b482-588b253e92d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningOrdering", "::", "usage"}], "=", 
   "\"\<gaRunningOrdering returns basis ordering string of the algebra, which \
to be used for MV in the Compact representation. It is automatically set by \
gaDefineOrthonormalBasis[] and can take values provided by the command option \
gaNonCommutativeMonomialOrder.\>\""}], ";"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"9acbf8b2-cf52-4115-afce-ad1aa345db21"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningCoordinateChart", "::", "usage"}], "=", 
   "\"\<gaRunningCoordinateChart returns coordinate system which is used at \
that moment when computing on manifolds. It is defined by \
gaDefineCoordinateChart[ ].\>\""}], ";"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"fa9d863d-a079-48d9-9b18-7fa6b71394c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}], 
     "]"}], "::", "usage"}], "=", 
   "\"\<Notation of predefined global orthonormal basis multivector. \
Orthogonal basis symbol name can be changed by global option \
gaOrthonormalBasisSymbolName.\>\""}], ";"}]], "Input",
 CodeAssistOptions->{
 "CodeToolsOptions"-><|
  "CodeInspect" -> <|
    "Tags" -> <|"MessageNameSymbol" -> <|Enabled -> False|>|>|>|>},
 CellLabel->"In[59]:=",ExpressionUUID->"f64c5108-a8b9-40db-819a-ba603303f8a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "::", "usage"}], "=", 
   "\"\<Cl[p_Integer?NonNegative,q_Integer?NonNegative,r_Integer?NonNegative] \
denotes Clifford algebra with signature of corresponding positive (p), \
negative (q) and zero (r) squared vectors.\>\""}], " ", ";"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"4f3e3998-2990-430a-9853-2f45a85fd723"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUp", "::", "usage"}], "=", 
   "\"\<mvDownUp[{s_Integer?Positive}, {same for upper symbols}] is a \
container for down (the first list) and up (the second list) indices. Both \
list should be strictly ordered (no same indices anywhere). When both type of \
indices are present we automatically sort indices of both types into common \
ordered index list. For convenience of input, however, separate ordered up \
and down index lists are used.\>\""}], ";"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"d99ece2b-d78f-4194-a6a5-3768a0d86550"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "usage"}], "=", 
   "\"\<gaDefineInput[Cl[p_Integer,q_Integer,r_Integer:0],opts___] sets input \
aliases for given algebra. You need to define it before manually entering \
orthonormal base elements, for example e[1], e[{},{1,2}], etc...\n\
gaDefineInput->True also is default option for gaDefineOrthonormalBasis[ ].\>\
\""}], ";"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"d58bce33-3cc2-48af-bddd-e6d7e5406aa0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNotation", "::", "usage"}], "=", 
   "\"\<Style options container. Values are set by \
gaDefineOrthonormalBasis[], which, in turn, uses private gaDefineNotation[]\>\
\""}], ";"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"76ebcf02-c23b-48d2-bc48-439f67e686f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "::", "usage"}], "=", 
   "\"\<gaDefineNotation[alg.,FontColor->Automatic|Color] sets color of basis \
elements which represents the algebra alg.\>\""}], ";"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"1bb27943-b18c-48ef-8958-15354bf96edb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBasis", "::", "usage"}], "=", 
   "\"\<gaDefineOrthonormalBasis[Cl[p_Integer,q_Integer,r_Integer:0], \
opts___] defines orthonormal (plain space) base of geometric algebra of \
signature {p,q,r}, where p,q,r is denotes number of base vectors with \
positive square, negative and zero squares, respectivelly. Only direct (down \
indices) base is defined. Reciprocal base can be obtained with \
gaReciprocalBasis[base]. Base vectors are ordered with respect to \
gaNonCommutativeMonomialOrder option value. Base vector color is selected \
automatically, unless you predefine it manually with option FontColor->color. \
The gaDefineOrthonormalBasis[] command also set values for \
gaVectorSpaceDimension[algebra], gaOrthonormalBasis[algebra], \
mvGrade[baseElements]. gaDefineOrthonormalBasis[gaTensorProduct[algebras__]] \
defines orthonormal base for tensor product of algebras. Option \
gaGradesOnly->{{},{},...} can be used to construct only specific grade base \
elements {{0},{1},{2},... (used to speedup calculation of tensor product \
base). Default options: gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\
\", Quiet\[Rule]Automatic, gaGradesOnly\[Rule]All. gaDefineInput->True is \
default option, which force input alias definition after basis is \
defined.\>\""}], ";"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"19ef61f1-a9ea-4553-b9ca-c21746df2272"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDimensionOfVectorSpace", "::", "usage"}], "=", 
   "\"\<gaVectorSpaceDimension[algebra] returns number of vector space \
dimension of the algebra. The value is defined by gaDefineOrthonormalBasis[].\
\>\""}], ";"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"45b93db7-3f74-42b0-9eb1-2b294050391b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDimensionOfRepresentation", "::", "usage"}], "=", 
   "\"\<gaDimensionOfRepresentation[algebra] returns dimension of some matrix \
representation of the algebra. This dimension DO NOT match the algebra \
dimension given in the Bott table! Use gaDimensionOfMatrixRepresentation[alg] \
if your want that. The dimension computed by this function is twice the \
dimension for algebras which have Bott table entries in \
\[DoubleStruckCapitalC] and \[DoubleStruckCapitalH] and only coincide with \
the Bott dimension for \[DoubleStruckCapitalR]. The dimension is useful for \
computation of characteristic polynomials and related functions (determinant, \
minimal polynomial, etc). The function is computed once.\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"9d6e1a9f-5a54-4665-8a7e-b08d21740e87"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDimensionOfMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaDimensionOfMatrixRepresentation[algebra, opts] returns dimension of \
matrix representation of real Clifford algebra which matches the dimension \
given in Bott periodicity table with matrix entries \[DoubleStruckCapitalC], \
\[DoubleStruckCapitalR] or \[DoubleStruckCapitalH].  The function is computed \
once. The option OutputForm->\\\"Full\\\"|\\\"DimensionOnly\\\" can be given \
to print full information or just numerical value. \>\""}], ";"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"aec74edf-7862-4675-80f0-a71125a7912a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaI", "::", "usage"}], "=", 
   "\"\<gaI[algebra] returns the pseudoscalar of the algebra\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"f74e8daa-730b-4ad3-b780-3f9fed38d3d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNegativeSignatureIndexList", "::", "usage"}], "=", 
   "\"\<gaNegativeSignatureIndexList[algebra] returns list of negative \
signature indices. The value is defined by gaDefineOrthonormalBasis[]\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"d90cd20d-f281-477a-97e2-7d4c8b1375f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "::", "usage"}], "=", 
   "\"\<Container gaOrthonormalBasis[algebra_,ordering] stores computed base \
vectors with down indices. The base is computed by \
gaDefineOrthonormalBasis[].\>\""}], ";"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"7bb06143-1a49-4c36-b4f6-a18cbd10dcb9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusSubspaceBasis", "::", "usage"}], "=", 
   "\"\<Container which contains homogeneus subspace base. It is only \
calculated after calling \
gaOrthonormalBasis[alg,ordering,All,GroupBy->\\\"Grade\\\"].\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"f4e33292-dfce-4ce8-8c67-fba4131bc8a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexUp", "::", "usage"}], "=", 
   "\"\<gaIndexUp[exprWithDownBaseElements] rewrites expr with down base \
elements replaced by up indices (signature is taken into account). For \
reciprocal base see gaReciprocalBasis[ ].\>\""}], ";"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"4263cef4-73b4-4158-aded-a9ee4a2a1f8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexDown", "::", "usage"}], "=", 
   "\"\<gaIndexDown[exprWithUpBaseElements] rewrites expr with up base \
elements replaced by down base elements (signature is taken into \
account).\>\""}], ";"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"0990dc1f-a39b-41de-bc74-8378983549f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaDefineOrthonormalBasis[] and ..., which allows to set \
base element monomial order. Possible orderings are \\\"Lex\\\", \\\"InvLex\\\
\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure orderings can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 \
possible orderings. Orders \\\"RevLex\\\", \\\"InvRevLex\\\" and the default \
order \\\"InvDeg[Lex]\\\" are not addmissible as Grobner base monomial order.\
\>\""}], ";"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"2dd93f57-82ea-412c-bf27-adc1246f5ffa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMakeAlias", "::", "usage"}], "=", "\"\<Option\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"76637aad-cf78-4bbe-96fa-01430e35fe5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaNonCommutativeMonomialOrder, which defines commutative \
coefficient (field) order for same noncommutative base elements. Uses \
MonomialOrders implemented by Mathematica, i.e. \\\"Lexicographic\\\", \
\\\"DegreeLexicographic\\\", \\\"DegreeReverseLexicographic\\\", \
\\\"NegativeLexicographic\\\", \\\"NegativeDegreeLexicographic\\\", \
\\\"NegativeDegreeReverseLexicographic\\\" and \n\\\"Reverse[Lexicographic]\\\
\", \\\"Reverse[DegreeLexicographic]\\\", \
\\\"Reverse[DegreeReverseLexicographic]\\\", \
\\\"Reverse[NegativeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeReverseLexicographic]\\\".\>\""}], ";"}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"444e41b8-8a9c-47fb-8999-ee70ab13bc93"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexList", "::", "usage"}], "=", 
   "\"\<gaIndexList[multivector] returns list of indices of \
multivector.\>\""}], ";"}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"aea22571-b444-4683-9209-781394b7b30d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeList", "::", "usage"}], "=", 
   "\"\<gaGradeList[expr] returns grade of multivector.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaQuaternionGradeIsZero", "::", "usage"}], "=", 
   "\"\<Option for gaGradeList, which forces to treate quaternionic \
coefficients as grade 0 elements Default is True.\>\""}], ";"}]}], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"c6492878-05ab-4836-9178-3d3b8c83534f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorQ", "::", "usage"}], "=", 
   "\"\<gaVectorQ[expr] return True if expression is GA vector (routinely \
used when computing gaDirectionalDerivative[expr, vec_?VectorQ]).\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"a3466567-27dd-4318-8ec2-d5c7fed5e695"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "usage"}], "=", 
   "\"\<gaGetAlgebra[expr] returns names of algebras encountered in expr. By \
default option Method->\\\"OneClNoQuaternions\\\" ignores quaternion \
coefficients. Other possible values are \\\"OneClAndQuaternions\\\", which \
append the string \\\"Quaternion\\\" if present in the expression and \\\"All\
\\\", which return all found different entries cl[p,q] in the \
expression.\>\""}], ";"}]], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"144790d8-c40a-412a-a1e8-f0c1369d8173"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVariables", "::", "usage"}], "=", 
   "\"\<gaVariables[expr] returns names of symbolic variables inside \
expr.\>\""}], ";"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"1d253ce2-0b3f-4399-b487-c24478f63206"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetSignature", "::", "usage"}], "=", 
   "\"\<gaGetSignature[expr] returns signature of multivector.\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"cd5ec600-4fe6-4392-94f7-1a1d8229041b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "::", "usage"}], "=", 
   "\"\<gaGetMV[expr, {n__Integer?Positive}] returns multivector of grades \
{n}. gaGetMV[expr,{__mvDownUp}] returns multivectors with given pattern of \
indices,... other criteria can be implemented (to do) as well.\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[85]:=",ExpressionUUID->"97c8bcce-6b8f-48ed-b8ee-79e4fea19e0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "usage"}], "=", 
   "\"\<gaOrderedQ[ordering_String][#1,#2] gives True if pair of base \
elements is ordered according to one of defined orderings \n \\\"Lex\\\", \
\\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\", which can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers.\>\""}], ";"}]], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"1ecb4567-8071-4285-93b8-cf2e01c34dd4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "::", "usage"}], "=", 
   "\"\<gaIndexSort[ind:{{__Integer?Positive}..}, order_String] sorts ind \
with respect to gaNonCommutativeMonomialOrder. Sorts monomials acording to \
given order.... other possibilities.\>\""}], ";"}]], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"72eab6d7-a2ee-4ed2-9274-9a2db3d6c9ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "usage"}], "=", 
   "\"\<gaTestIndexOrdering[expr] tests if indices inside \
mvDownUp[{__Integer},{__interger}] are sorted. This test is set to $Pre by \
default and can be removed by setting package global option \
gaAlwaysTestInputIndexOrdering\[Rule]False.\>\""}], ";"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"b231e4ab-2317-4e77-bae3-d0a56f812e37"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineAssociationRepresentationKeyOrder", "::", "usage"}], "=", 
   "\"\<gaDefineAssociationRepresentationKeyOrder[al_,order:(\\\"Lex\\\"|\\\"\
InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\
\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[\
InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] defines \
sorting order for algebra if it was not yet defined. It is used by gaSort[ \
]\>\""}], ";"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"d5a35528-e299-46de-b45a-95f3881b11c9"],

Cell["\<\
The names below are used in Multivector derivatives section. We have to \
define them here to make notation work and because one may need to set some \
commutation properties later.\
\>", "Text",ExpressionUUID->"77917a17-4851-402a-b60b-2b5b66a4097b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvPoint", "::", "usage"}], "=", 
   "\"\<Denotes manifold point of manifold...\>\""}], ";"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"c64278f2-0725-4ed8-9173-115917a6f24e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"9b2388e2-395c-42f6-9c10-0fd1072d4e1e"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notation and help functions"
}], "Subsection",ExpressionUUID->"575a4778-1d41-4eb0-a884-bb2a8a6d44a6"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"9f5198d3-924b-4335-87c2-d9497bfbb414"],

Cell["\<\
Insert some output after evaluated cell (taken form \
http://mathematica.stackexchange.com/questions/15134/a-debug-utility-to-print-\
or-extract-intermediate-data-from-a-program)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"46576a84-e290-4998-b543-ca390eef2ea8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"insertBelowEvaluationCell", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SelectionMove", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "After", ",", 
       "EvaluationCell"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"BoxData", "@", 
          RowBox[{"ToBoxes", "[", "expr", "]"}]}], ",", "\"\<Print\>\""}], 
        "]"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"d150b294-1328-4def-a4e5-e1bcaf5ffe9d"],

Cell["One message per session", "Text",ExpressionUUID->"982d5351-e9bb-44e4-a815-d0776200de1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alreadyPrintedList", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"aa960293-0ff2-4507-a694-1a26181880b3"],

Cell[TextData[{
 "Alias modification in order to match ",
 StyleBox["gaRunningAlgebra ",
  FontWeight->"Bold"],
 "color. "
}], "Text",ExpressionUUID->"50699e74-a9e3-4262-95e3-a427a6b04eec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"updateInputAlias", ",", "HoldRest"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"updateInputAlias", "[", 
    RowBox[{"aliasName_String", ",", "aliasReplacementRul__Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"alposition", ",", 
       RowBox[{"inpOpt", "=", 
        RowBox[{"Options", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", "InputAliases"}], 
         "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"inpOpt", ",", "aliasName"}], "]"}]}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
         RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{"inpOpt", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"alposition", "=", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"inpOpt", ",", 
                 RowBox[{"aliasName", "->", "_"}]}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Extract", "[", 
               RowBox[{"inpOpt", ",", "alposition"}], "]"}], "/.", 
              RowBox[{"{", "aliasReplacementRul", "}"}]}], ")"}]}]}], "]"}]}],
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"24c4d90d-45ad-4fb0-82ec-75761d9b8c4e"],

Cell["Algebra elements coloring ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"97fbaf5d-6474-46f4-bf40-03598db3439b"],

Cell[TextData[{
 "Automated color picking for basis elements of Clifford algebras. Black and \
white colors are forbidden. Next, we predefine three main RGB colors. After \
they are used and while color number is less than ",
 StyleBox["smartColors",
  FontWeight->"Bold"],
 ", we pick next color by maximizing minimal distance between existing and \
next color. When the limit ",
 StyleBox["smartColors",
  FontWeight->"Bold"],
 " is reached we pick colors randomly. "
}], "Text",ExpressionUUID->"bfb4a716-d01c-46b6-a382-a3fdbb4d9f8f"],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions is less than 10.2 picking of color is random."
}], "Text",ExpressionUUID->"21937f38-b479-494e-947c-952383679990"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pickNextColor", "::", "maxColorLimit"}], "=", 
   "\"\<Smart color picking limit `1` was reached. Start picking colors \
randomly.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "pickNextColor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alreadyUsedColors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "1.", ",", "1."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "0."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"predefinedColorList", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "0.", ",", "0."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "1.", ",", "0."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "1."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"smartColors", "=", "15"}], ";", 
   RowBox[{"globalpickNextColorMessageCounter", "=", "0"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"colorDistanceFunction", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x_", "?", "NumericQ"}], ",", 
      RowBox[{"y_", "?", "NumericQ"}], ",", 
      RowBox[{"z_", "?", "NumericQ"}]}], "}"}], "]"}], ":=", 
   RowBox[{"Min", "[", 
    RowBox[{"ColorDistance", "[", 
     RowBox[{"alreadyUsedColors", ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pickNextRandomColor", "[", "]"}], ":=", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}], "/.", 
     RowBox[{"Last", "[", 
      RowBox[{"Quiet", "[", 
       RowBox[{"NMaximize", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"colorDistanceFunction", "[", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}], ",", 
           RowBox[{
            RowBox[{"1", "\[GreaterEqual]", "x", "\[GreaterEqual]", "0"}], "&&", 
            RowBox[{"1", "\[GreaterEqual]", "y", "\[GreaterEqual]", "0"}], "&&", 
            RowBox[{"1", "\[GreaterEqual]", "z", "\[GreaterEqual]", "0"}]}]}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
         RowBox[{"MaxIterations", "\[Rule]", "5"}], ",", 
         RowBox[{"PrecisionGoal", "\[Rule]", "3"}]}], "]"}], "]"}], "]"}]}], 
    "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "\[GreaterEqual]", "10.2"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"len", "=", 
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}], ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", "newColor"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"predefinedColorList", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"predefinedColorList", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{"predefinedColorList", ",", "alreadyUsedColors"}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "predefinedColorList", "]"}], ">", "0"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "use", " ", "colors", " ", "from", " ", "predefined", " ", 
            "list"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", 
             RowBox[{"newColor", "=", 
              RowBox[{"predefinedColorList", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";", "newColor"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "then", " ", "until", " ", "smart", " ", "color", " ", "limit", 
            " ", "not", " ", "reached", " ", "try", " ", "to", " ", "pick", 
            " ", "color", " ", "in", " ", "an", " ", "optimal", " ", "way"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"len", "<", "smartColors"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"alreadyUsedColors", ",", 
               RowBox[{"newColor", "=", 
                RowBox[{"pickNextRandomColor", "[", "]"}]}]}], "]"}], ";", 
             "newColor"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Not", "[", "quiet", "]"}], "&&", 
                RowBox[{"(", 
                 RowBox[{"globalpickNextColorMessageCounter", "<", "3"}], 
                 ")"}]}], ",", 
               RowBox[{
                RowBox[{"globalpickNextColorMessageCounter", "++"}], ";", 
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"pickNextColor", "::", "maxColorLimit"}], ",", 
                  "smartColors"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
             ";", 
             RowBox[{"globalpickNextColorMessageCounter", "=", "4"}], ";", 
             RowBox[{"RandomColor", "[", "]"}]}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", "___", "]"}], ":=", 
     RowBox[{"RGBColor", "[", 
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"60455b28-a2ec-4c1e-a7d8-30622a7fd8d4"],

Cell["Algebra detection function", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"50c373e7-fc5a-49fa-a936-c06fd2cafff0"],

Cell["\<\
Often we need to decide from given expression which algebra we are dealing \
with. Possible values for Method are \
\[OpenCurlyDoubleQuote]OneClNoQuaternions\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]OneClAndQuaternions\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]All\[CloseCurlyDoubleQuote], \
\>", "Text",ExpressionUUID->"c4830ec1-fd76-4d0d-9834-e97bfe72d90b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGetAlgebra", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}], ",", 
     RowBox[{"Quiet", "->", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], "=", 
   "\"\<The expression `1` contains multiple algebras `2`. Only one Clifford \
algebra was expected.\>\""}], ";", 
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "optionvalue"}], "=", 
   "\"\<Bad Method value `1`. possible values are \\\"OneClNoQuaternions\\\", \
\\\"OneClandQuaternions\\\", \\\"All\\\" \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "noRunningAlgebra"}], "=", 
   "\"\<Expression '1' don't contain any MV and gaRunningAlgebra is not \
defined. Will return empty list. Many functions can demonstrate unexpected \
behaviour. gaDefineOrthonormalBasis[ ] was not defined?\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "empty"}], "=", 
   "\"\<No MV found. Returned value is gaRunningAlgebra\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"0de20e67-fe79-4994-b468-cf99d0d4982a"],

Cell["\<\
If there are no quaternionic coefficients, the simply take firs of all Cl \
heads.\
\>", "Text",ExpressionUUID->"2393b299-a3ec-4801-9c5f-891709a4b530"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testOptionGetAlgebra", "[", "\"\<Method\>\"", "]"}], "=", 
   RowBox[{
   "\"\<OneClNoQuaternions\>\"", "|", "\"\<OneClandQuaternions\>\"", "|", 
    "\"\<All\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionGetAlgebra", "[", "\"\<Quiet\>\"", "]"}], ":=", 
    "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionGetAlgebra", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<OneClNoQuaternions\>\"", "|", "\"\<OneClandQuaternions\>\"", "|", 
      "\"\<All\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionGetAlgebra", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"a6cf4b69-de2f-45f4-afba-ca55c9be78b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theOption", ",", "foundAlgebras"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaSetNamedOptionValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"gaGetAlgebra", ",", "#", ",", "theOption"}], "}"}], ",", 
           
           RowBox[{
            RowBox[{"gaOptionCheck", "[", "testOptionGetAlgebra", "]"}], "[", 
            
            RowBox[{"(", 
             RowBox[{
              RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
               "}"}]}], ")"}], "]"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
          "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
          RowBox[{"Method", "/.", 
           RowBox[{"Options", "[", "gaGetAlgebra", "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<OneClNoQuaternions\>\"", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"Heads", "->", 
            RowBox[{
            "True", " ", "due", " ", "to", " ", "curvilinear", " ", 
             "basis"}]}], ",", " ", 
           RowBox[{
            RowBox[{"\[DoubleStruckE]", "[", "IndAlgvoordName", "]"}], "[", 
            "mvPoint", "]"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"foundAlgebras", "=", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{"expr", ",", "_Cl", ",", "Infinity", ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"FirstCase", "[", 
             RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}], 
            ",", " ", "did", ",", 
            RowBox[{
            "t", " ", "check", " ", "for", " ", "presennce", " ", "of", " ", 
             "other", " ", "algebras"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "foundAlgebras", "]"}], "===", "1"}], ",", 
            RowBox[{"foundAlgebras", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", 
               "expr", ",", "foundAlgebras"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", "\"\<OneClAndQuaternions\>\"", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"foundAlgebras", "=", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{"expr", ",", "_Cl", ",", "Infinity", ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "foundAlgebras", "]"}], "===", "1"}], ",",
             "foundAlgebras", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", 
               "expr", ",", "foundAlgebras"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", "\"\<All\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"expr", ",", "_Cl", ",", "Infinity", ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}], ",", 
         "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaGetAlgebra", "::", "optionvalue"}], ",", 
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}], ")"}], "&&", 
     RowBox[{"(", 
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "Cl", ",", 
         RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}], ")"}]}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"c51d0f53-2390-4054-857d-d4dd787b7f35"],

Cell["\<\
If there no head Cl or there are also \[OpenCurlyDoubleQuote]Quaternion\
\[CloseCurlyDoubleQuote] , then depending on the option output requires  \
additional work. \
\>", "Text",ExpressionUUID->"2d76b753-c54e-444b-8a93-8d28a00c6316"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetAlgebra", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], ",", 
         "gaRunningAlgebra", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaGetAlgebra", "::", "noRunningAlgebra"}], ",", "expr"}],
            "]"}], ";", 
          RowBox[{"{", "}"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "expr", "}"}], ",", "bs", ",", 
         RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetAlgebra", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"op", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"foundAlgebras", ",", "theOption"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaSetNamedOptionValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"gaGetAlgebra", ",", "#", ",", "theOption"}], "}"}], 
              ",", 
              RowBox[{
               RowBox[{"gaOptionCheck", "[", "testOptionGetAlgebra", "]"}], 
               "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                  "}"}]}], ")"}], "]"}], ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===",
              "theOption"}], ",", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
             RowBox[{"Method", "/.", 
              RowBox[{"Options", "[", "gaGetAlgebra", "]"}]}]}]}], "]"}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
             "theOption"}], ",", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
             RowBox[{"Quiet", "/.", 
              RowBox[{"Options", "[", "gaGetAlgebra", "]"}]}]}]}], "]"}], ";",
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
            "\[IndentingNewLine]", "\"\<OneClNoQuaternions\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"foundAlgebras", "=", 
              RowBox[{"DeleteDuplicates", "[", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"expr", ",", "_bs", ",", "Infinity", ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
                   RowBox[{"bs", "[", 
                    RowBox[{"__", ",", "\"\<Quaternion\>\"", ",", "___"}], 
                    "]"}]}], "]"}], ",", "_Cl", ",", "Infinity"}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{
               RowBox[{"Length", "[", "foundAlgebras", "]"}], ",", 
               "\[IndentingNewLine]", "0", ",", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"!", 
                   RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
                  RowBox[{"Message", "[", 
                   RowBox[{"gaGetAlgebra", "::", "empty"}], "]"}]}], "]"}], 
                ";", 
                RowBox[{"gaGetAlgebra", "[", 
                 RowBox[{"{", "}"}], "]"}]}], ",", "\[IndentingNewLine]", "1",
                ",", 
               RowBox[{"foundAlgebras", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
               "_", ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", 
                  "expr", ",", "foundAlgebras"}], "]"}], ";", 
                RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", 
              "]"}]}], ",", "\[IndentingNewLine]", 
            "\"\<OneClAndQuaternions\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"foundAlgebras", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"DeleteDuplicates", "[", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"expr", ",", "_bs", ",", "Infinity", ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"__", ",", "\"\<Quaternion\>\"", ",", "___"}], 
                    "]"}]}], "]"}], ",", "_Cl", ",", "Infinity"}], "]"}], 
                  "]"}], ",", "\"\<Quaternion\>\""}], "}"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{
               RowBox[{"Length", "[", "foundAlgebras", "]"}], ",", 
               "\[IndentingNewLine]", "0", ",", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"!", 
                   RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
                  RowBox[{"Message", "[", 
                   RowBox[{"gaGetAlgebra", "::", "empty"}], "]"}]}], "]"}], 
                ";", 
                RowBox[{"gaGetAlgebra", "[", 
                 RowBox[{"{", "}"}], "]"}]}], ",", "\[IndentingNewLine]", "1",
                ",", 
               RowBox[{"foundAlgebras", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
               "2", ",", "foundAlgebras", ",", "\[IndentingNewLine]", "_", 
               ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", 
                  "expr", ",", "foundAlgebras"}], "]"}], ";", 
                RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", 
              "]"}]}], ",", "\[IndentingNewLine]", "\"\<All\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"foundAlgebras", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"DeleteDuplicates", "[", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"expr", ",", "_bs", ",", "Infinity", ","}], "]"}],
                     ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"__", ",", "\"\<Quaternion\>\"", ",", "___"}], 
                    "]"}]}], "]"}], ",", "_Cl", ",", "Infinity"}], "]"}], 
                  "]"}], ",", "\"\<Quaternion\>\""}], "}"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{
               RowBox[{"Length", "[", "foundAlgebras", "]"}], ",", 
               "\[IndentingNewLine]", "0", ",", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"!", 
                   RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
                  RowBox[{"Message", "[", 
                   RowBox[{"gaGetAlgebra", "::", "empty"}], "]"}]}], "]"}], 
                ";", 
                RowBox[{"gaGetAlgebra", "[", 
                 RowBox[{"{", "}"}], "]"}]}], ",", "\[IndentingNewLine]", "_",
                ",", "foundAlgebras"}], "\[IndentingNewLine]", "]"}]}], ",", 
            "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaGetAlgebra", "::", "optionvalue"}], ",", 
               RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "]"}], 
             ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}], ")"}]}]}]}]}],
    "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"cf67761d-740a-4230-b849-812662090eee"],

Cell["\<\
Function to extract all symbolic variables of the expression (excludes basis \
elements and MV)\
\>", "Text",ExpressionUUID->"848cdddc-1819-4413-8827-9bd8a15aa6b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaVariables", "[", "expr_", "]"}], ":=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Variables", "[", "expr", "]"}], ",", "_bs"}], "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"fd8be902-4eeb-447b-997a-a40e584f8d94"],

Cell["\<\
Index ordering detection in the input and the result behaviour\
\>", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"4de7e83f-1926-44aa-9587-82222c3bcda5"],

Cell[TextData[{
 "If  global option ",
 StyleBox["gaTestIndexOrdering",
  FontWeight->"Bold"],
 " was set to True, then try to detect not strictly ordered index sets. \
Repeated indices inside ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " are also forbidden (the repeated index has the meaning of signature and \
can be replaced by basis element without repeating indices with proper sign, \
for example e[1,2,3,2]-> -e[1,3] for Cl(p,q) with p>=2) . The detection of \
such indices will require definition of down values for basis element symbols \
and this is what we want to avoid due to possible slowdown. Input of indices \
with larger values that number of base vectors are allowed, thought they are \
meaningless in computations."
}], "Text",ExpressionUUID->"cf55662e-7e87-45ba-b87e-85232764dd15"],

Cell[TextData[{
 "Instead of check with ",
 StyleBox["$Post",
  FontWeight->"Bold"],
 " one could implement the functionality indirectly as a ",
 StyleBox["MakeBoxes[]",
  FontWeight->"Bold"],
 " condition (for example, we could output/format  basis elements in some \
strange form when the ordering condition is not satisfied.)  That approach is \
implemented for differential forms (will see how it works)."
}], "Text",ExpressionUUID->"98b8bce6-162c-408c-a832-517713d52368"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], "=", 
   "\"\<Error. Not properly ordered index set `1` in expression input/output \
was detected. Only ordered sets can appear in calculations.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], "=", 
   "\"\<Error. Index set `1` contains repeated indices. All indices in base \
element should be different.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"66b24610-a2fc-4ad2-9487-c48051bd23f9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{"gaTestIndexOrdering", ",", " ", "HoldAll"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"Unevaluated", "[", "expr", "]"}], ",", "_mvDownUp"}], "]"}], 
     ",", "expr", ",", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"indexPairs", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Unevaluated", "[", "expr", "]"}], ",", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "___Integer", "}"}], ",", 
             RowBox[{"{", "___Integer", "}"}]}], "]"}], ",", "Infinity"}], 
          "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"And", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
               RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"indexCases", "=", 
             RowBox[{"indexPairs", "/.", 
              RowBox[{"mvDownUp", "\[Rule]", "Sequence"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"And", "@@", 
               RowBox[{"(", 
                RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}], " ", "]"}],
              ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], ",", 
                RowBox[{"Pick", "[", 
                 RowBox[{"indexCases", ",", 
                  RowBox[{"Not", "/@", 
                   RowBox[{"(", 
                    RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}]}], 
                 "]"}]}], "]"}], ";"}], ",", "expr"}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], ",", 
            RowBox[{"Pick", "[", 
             RowBox[{"indexPairs", ",", 
              RowBox[{"Not", "/@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}]}], 
             "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[116]:=",ExpressionUUID->"dd0fd207-8b82-46cc-b663-036cb8769c5b"],

Cell["\<\
If  $Post=gaTestIndexOrdering is also defined, then Pick[atom,none] instead \
of Sequence will return $Post function. Undesirable.\
\>", "Text",ExpressionUUID->"9aa7f018-416a-4d25-a81f-6c737aeb1ccb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "/.", "$gaPackageOptions"}], 
     ")"}], ",", 
    RowBox[{
     RowBox[{"$Pre", "=", "gaTestIndexOrdering"}], ";"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"2bc1a2f2-bce4-44e7-a36d-a47ec8f70844"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Algebra and Index notations"
}], "Subsubsection",ExpressionUUID->"e65b5705-e5f5-4a7f-af30-64b28ac054fc"],

Cell["Algebra notation", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"aafc3bc8-bc13-475d-89a1-3cbbaa6d0222"],

Cell["\<\
Algebras always use three signatures, positive (p), negative (q) and zero \
(r).  Zero signature is not implemented.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"ee6454dc-99ee-428d-951f-1b08348379c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_"}], "]"}], "=", 
   RowBox[{"Cl", "[", 
    RowBox[{"p", ",", "q", ",", "0"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[119]:=",
 CellID->1126827235,ExpressionUUID->"09eb6667-043c-4487-a35c-1cfac1fb086e"],

Cell["Nice output for Clifford algebra identifier", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"89d084f4-4ec1-48de-9f1b-3d08c7af00e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer", ":", "0"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alsty", "=", 
        RowBox[{"gaNotation", "[", 
         RowBox[{"Cl", "[", 
          RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"r", "===", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", "\"\<0\>\""}], "}"}], ",", 
          "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{
               RowBox[{"StyleBox", "[", 
                RowBox[{"\"\<Cl\>\"", ",", "alsty"}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"#1", ",", "\"\<,\>\"", ",", "#2"}], "}"}], "]"}]}], 
              "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"r", ",", "sf"}], "]"}]}], "}"}], ",", "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<Cl\>\"", ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                  "#3"}], "}"}], "]"}]}], "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaNotation", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "=!=", 
     "gaNotation"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"f0674546-8c57-4c57-8ef2-5f23bb0f9f76"],

Cell["Index notation", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"2fb28224-3a32-4c41-87e0-0934940fc98d"],

Cell[TextData[{
 "Nice representation of indices. Indices are independent (abstract) \
construction (similar to the concept of Mathematica iterator), which can \
enter any head.   ",
 StyleBox["System`",
  FontWeight->"Bold"],
 " context have protected ",
 StyleBox["Up",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Down",
  FontWeight->"Bold"],
 " symbols, therefore we introduce our own ",
 StyleBox[" mvDownUp[{down},{up}]",
  FontWeight->"Bold"],
 " instead of separate down and up indices. Single head will simplify pattern \
matcher. By default for base multivectors we use down indices, i.e. ",
 StyleBox["mvDownUp[{down},{}] ",
  FontWeight->"Bold"],
 " and dual base  is represented by upper indices  i.e.  ",
 StyleBox["mvDownUp[{},{up}]",
  FontWeight->"Bold"],
 ".  "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"cdaf6078-668a-40e6-83f2-2e6f9c259342"],

Cell["\<\
In order to allow editing we explicitly enumerated slots. Unfortunately, this \
imply, that at the moment it is impossible to change number of indices, so \
editing make sense only if number of up and down indices remain the same\
\>", "Text",ExpressionUUID->"08d2ba17-10dc-439e-9f4c-7b08a57d86b7"],

Cell[TextData[{
 StyleBox["mvDownUp[indown_List,inup_List]",
  FontWeight->"Bold"],
 " keeps down indices in the first list and up indices in the second. Both \
index list should be strictly ordered (no two same indices anywhere) for \
numeric indices. Note, however, that in calculations, when both type of \
indices are present we automatically sort indices of both types into common \
ordered index list. For convenience of  input, however  separate ordered up \
and down index lists are used (otherwise we should indicate type of index for \
each index, which would result into long input sequence). Also, when index is \
a symbol, then only single index (up or down) should be present in one ",
 StyleBox["mvDownUp[{indown___},{inup___}]",
  FontWeight->"Bold"],
 " container (this syntax will be used to represent ",
 StyleBox["gaTensor[], gaMetric[ ], gaConnectionCoefficients[]",
  FontWeight->"Bold"],
 " ). For more symbolic indices the notation is meaningless (should never be \
used), though we don\[CloseCurlyQuote]t explicitly check that."
}], "Text",ExpressionUUID->"904f9925-3fac-4e0b-8d39-48b210a2ce7d"],

Cell[CellGroupData[{

Cell["\<\
The complicated MakeBoxes can be improved by using StackExchange example from \
(https://mathematica.stackexchange.com/questions/187654/how-to-build-a-\
templatebox-with-dynamic-length-gridbox)  by Carl Woll. \
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"4a6e11a8-20c4-43b3-980f-903d53923693"],

Cell["\<\
His comment  about TemplateSlotSequence is very interesting:
\"I think since the pure functions used in DisplayFunction and \
InterpretationFunction do not evaluate in the Wolfram Language kernel, \
TemplateSlotSequence was introduced as a way to enhance the creation of box \
structures. When the front end constructs the box expression using the \
DisplayFunction/InterpretationFunction, TemplateSlotSequence objects are \
interpreted as:

TemplateSlotSequence[1] -> Sequence[#1, #2, ...]
TemplateSlotSequence[2, \",\"] -> Sequence[#2, \",\", #3, \",\", ...]
TemplateSlotSequence[{3, 5}, \" \"] -> Sequence[#3, \" \", #4, \" \", #5]
\".  He also provides rather complicated example: 
MakeBoxes[ActuarialSurvivalProbability[x_, t_], StandardForm] := TemplateBox[
    Prepend[MakeBoxes[t]] @ BoxForm`ListMakeBoxes[x, StandardForm],
    \"ActuarialSurvivalProbability\",
    InterpretationFunction -> (
        RowBox[{
            \"ActuarialSurvivalProbability\", 
            \"[\", 
            RowBox[{
                RowBox[{\"{\", RowBox[{TemplateSlotSequence[2, \",\"]}], \
\"}\"}],
                \",\",
                #1
            }],
            \"]\"
        }]&
    ),
    DisplayFunction -> (
        RowBox[{
            SubscriptBox[\"\", #1],
            SubscriptBox[
                \"p\",
                RowBox[{
                    \"\",
                    GridBox[
                        {{TemplateSlotSequence[2]}},
                        GridBoxDividers->{\"RowsIndexed\"->{1->Thickness[1]}}
                    ]
                }]
            ]
        }]&
    ),
    Tooltip->\"probability that at least one of live(s) aged \
\"<>ToString[x]<>
        \" survives for \"<>ToString[t]<>\" year(s)\"
]

\
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"b941d9ce-16da-4bbb-832f-1590bb457d0e"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"indown", ":", 
         RowBox[{"(", 
          RowBox[{"___Integer", "|", "___Symbol"}], ")"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"inup", ":", 
         RowBox[{"(", 
          RowBox[{"___Integer", "|", "___Symbol"}], ")"}]}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"argsa", "=", 
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Rest", "/@", 
           RowBox[{"Sort", "[", "\[IndentingNewLine]", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"indown", ",", "inup"}], "}"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", 
                    RowBox[{"-", "1"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"indown", ",", "inup"}], "}"}], "]"}]}], "}"}]}], 
                  "]"}]}], "]"}]}], "}"}], "]"}], "\[IndentingNewLine]", 
            "]"}]}], "]"}], ",", "\"\<,\>\""}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", "argsa", "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"indown", ",", "inup"}], "}"}], "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}],
            "&"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "indown", "}"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "inup", "}"}]}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "indown", "}"}], ",", 
             RowBox[{"{", "inup", "}"}]}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CodeAssistOptions->{
 "CodeToolsOptions"-><|
  "CodeInspect" -> <|
    "Tags" -> <|"UnscopedObjectError" -> <|Enabled -> False|>|>|>|>},
 CellLabel->
  "In[121]:=",ExpressionUUID->"26b68dd9-b24d-4adc-a1c6-32b1ebcfcba8"],

Cell["\<\
Add index notation for the gaCompactRepresentation[ ] .  Compact \
representation is possible only for all down or all up indices (no mixed \
indices!)\
\>", "Text",ExpressionUUID->"9aca7a27-9cca-431d-9195-df4d5219f35d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"indown_Integer", ",", "inup_Integer"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"argsa", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"indown", ",", "inup"}], "}"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"{", 
          RowBox[{"_", ",", "0"}], "}"}], ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{"indown", ",", 
           RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "_"}], "}"}], ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{"inup", ",", 
           RowBox[{"BoxBaselineShift", "\[Rule]", 
            RowBox[{"-", "1"}]}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", 
              RowBox[{"{", "argsa", "}"}], "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", "##", "}"}], ",", "sf"}], "]"}]}], "}"}], "]"}],
             "]"}], "&"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"indown", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"inup", ",", "sf"}], "]"}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{"indown", ",", "inup"}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"indown", "===", "0"}], "||", 
     RowBox[{"inup", "===", "0"}]}], ")"}]}]}]], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"1bf757b5-7416-42f6-afa4-f22ede33f7a1"],

Cell["\<\
When expressions are truncated (due to Mathematica length limitation) we just \
form nice boxes\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4c6bc7ca-c397-4508-81c5-393c84211952"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown_Skeleton", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"SubscriptBox", "[", 
    RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"indown", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "inup_Skeleton", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"SuperscriptBox", "[", 
    RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"inup", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown_Skeleton", "}"}], ",", 
       RowBox[{"{", "inup_Skeleton", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"SubscriptBox", "[", 
       RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"indown", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}], ",", 
      RowBox[{"SuperscriptBox", "[", 
       RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"inup", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], "}"}],
     "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"0260a9ad-0110-4768-bd70-055f3af9cb12"],

Cell["Point notation for objects on manifold", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"c5204a6a-0225-4cc8-91b5-74bddca7f436"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"mvPoint", "[", "x_List", "]"}], ",", " ", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"TemplateBox", "[", "\n", "    ", 
   RowBox[{
    RowBox[{"BoxForm`ListMakeBoxes", "[", 
     RowBox[{"x", ",", " ", "sf"}], "]"}], ",", "\n", "    ", 
    "\"\<mvPoint\>\"", ",", "\n", "    ", 
    RowBox[{"InterpretationFunction", "->", 
     RowBox[{"(", "\n", "        ", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", "\n", "            ", 
         RowBox[{
         "\"\<mvPoint\>\"", ",", " ", "\n", "            ", "\"\<[\>\"", ",", 
          "\n", "                ", 
          RowBox[{"RowBox", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<{\>\"", ",", " ", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{"TemplateSlotSequence", "[", 
                RowBox[{"1", ",", " ", "\"\<,\>\""}], "]"}], "}"}], "]"}], 
             ",", " ", "\"\<}\>\""}], "}"}], "]"}], ",", "        ", "\n", 
          "            ", "\"\<]\>\""}], "\n", "        ", "}"}], "]"}], 
       "&"}], ")"}]}], ",", "\n", "    ", 
    RowBox[{"DisplayFunction", "->", 
     RowBox[{"(", "\n", "                    ", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"TemplateSlotSequence", "[", 
          RowBox[{"1", ",", "\"\<,\>\""}], "]"}], "}"}], "]"}], "\n", 
       "                   ", "&"}], ")"}]}], ",", "\n", "    ", 
    RowBox[{"Tooltip", "->", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "gaRunningCoordinateChart", "]"}], 
         "[", "\"\<StandardCoordinateNames\>\"", "]"}], "===", "x"}], ",", 
       "\[IndentingNewLine]", "gaRunningCoordinateChart", ",", 
       "\[IndentingNewLine]", "\"\<Unknown coordinate system\>\""}], 
      "]"}]}]}], "\n", "]"}]}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"1f53ee80-41f3-4df8-a4e8-bab5fcaf9829"],

Cell["\<\
When coordinate chart is not defined, output a bit  shorter output (anyway, \
it will not be useful)\
\>", "Text",ExpressionUUID->"141420c7-b8ea-457a-ba63-68425c5159c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvPoint", "[", "x_Symbol", "]"}], ",", " ", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], " ", ":=", 
   RowBox[{"\"\<UndefCoordSys\[ThinSpace] \>\"", "/;", 
    RowBox[{
     RowBox[{"ToString", "[", "x", "]"}], "===", 
     "\"\<gaRunningCoordinateChartVars\>\""}]}]}], ";"}]], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"c7a7198d-9844-4d88-8629-fe276363fb8c"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notation for orthogonal basis symbols (except derivative related, which \
are moved along with derivative commands)"
}], "Subsubsection",ExpressionUUID->"3c75efe5-cff0-400d-855c-5e1ea4f8d304"],

Cell[TextData[{
 "Orthogonal  base multivectors  are represented by letter  \[DoubleStruckE] \
(can be changed by the package global option ",
 StyleBox["gaOrthonormalBasisSymbolName",
  FontWeight->"Bold"],
 ") with subscripts or superscripts (or mixed). It is assumed that up and \
down indices commute (can be permuted). This is true at least in orthonormal \
frame.  Notation will not work if the algebra is not defined with ",
 StyleBox["gaDefineOrthonormalBasis[ ]",
  FontWeight->"Bold"],
 " or ",
 StyleBox["gaDefineInput[]",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"8f0b1dba-e885-4c6f-adc0-24d3d599fda7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                  "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], 
           "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[128]:=",ExpressionUUID->"c2cf8625-8c29-4a4b-b689-9ec5714f4ee1"],

Cell["Notation for basis elements in curvilinear basis", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"9bbbebc6-f998-478e-9139-2a3a355e9966"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"in_mvDownUp", ",", "ra_", ",", "coordSys_String"}], "]"}], 
        "[", "po_mvPoint", "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"poEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"po", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"coordSysEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"coordSys", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                    "}"}], "]"}], ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<[\>\"", ",", "#4", ",", "\"\<]\>\""}], "}"}],
                     "]"}]}], "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\"", 
                 ",", "\"\<[\>\"", ",", "#4", ",", "\"\<]\>\""}], "}"}], 
               "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx", ",", "coordSysEx", ",", "poEx"}], 
             "}"}], ",", "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"7a1342dd-4a69-4a8d-8430-b38e8494db85"],

Cell["Special bold notation for quaternion", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"06c8788e-fede-42bc-be23-fb77d06d8300"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{
        "in_mvDownUp", ",", "ra_", ",", "\"\<Quaternion\>\"", ",", "___"}], 
        "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sty", "=", 
          RowBox[{"(", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"inEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"raEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"ra", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"markEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"\"\<Quaternion\>\"", ",", "sf"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"StyleBox", "[", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                  "#1"}], "}"}], "]"}], ",", 
               RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
               RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
             "]"}]}], ",", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
               "}"}], "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"inEx", ",", "raEx", ",", "markEx"}], "}"}], ",", 
           "baseSymbolN", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "markEx"}]}], "]"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"8cd5315f-5b76-49b7-b876-281431f52969"],

Cell["Notation for MV in Association form", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"f299dd7c-0e27-4ac0-b1ef-28e7c1325a88"],

Cell[TextData[{
 "Same notations, when multivector is presented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s  (much more optimized)  Association form."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"982f37f6-d845-4f00-8abb-0f9df2a05ae1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"in_Association", ",", "ra_"}], "]"}], ",", 
          RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"sty", "=", 
              RowBox[{"(", 
               RowBox[{"FontColor", "->", 
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
             ",", 
             RowBox[{"inEx", "=", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
             RowBox[{"raEx", "=", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pfd", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{"StyleBox", "[", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", 
                    "\"\<[\>\"", ",", "#1", ",", "\"\<]\>\""}], "}"}], "]"}], 
                   ",", 
                   RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                   RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], 
                  "]"}], "]"}]}], ",", 
               RowBox[{"pfi", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", 
                    "\"\<,\>\"", ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], 
                 "]"}]}]}], "}"}], ",", 
             RowBox[{"TemplateBox", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
               RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
               RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
               RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
               RowBox[{"Tooltip", "\[Rule]", 
                RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
          "]"}], "/;", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
          "gaNotation"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", "\n", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"in_Association", ",", "ra_", ",", "mark_String"}], "]"}], 
          ",", 
          RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sty", "=", 
             RowBox[{"(", 
              RowBox[{"FontColor", "\[Rule]", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"inEx", "=", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
            RowBox[{"raEx", "=", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"pfd", "=", 
               RowBox[{"Function", "[", 
                RowBox[{"StyleBox", "[", 
                 RowBox[{
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                    "\"\<[\>\"", ",", "#1", ",", "\"\<]\>\""}], "}"}], "]"}], 
                  ",", 
                  RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                  RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], 
                 "]"}], "]"}]}], ",", 
              RowBox[{"pfi", "=", 
               RowBox[{"Function", "[", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", 
                   "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", 
                   "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"TemplateBox", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
              "baseSymbolN", ",", 
              RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
              RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
              RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
              RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
         "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"3733995d-f379-477d-8bc0-b765819a346d"],

Cell["Explicit rules for algebra scalar basis element", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"9d2bbeca-200f-40fa-8ef2-a31bb63a2bcb"],

Cell[TextData[{
 "For speed reasons we do not want rules for basis vectors of the form  ",
 StyleBox["e[_[],_]:=xxx",
  FontWeight->"Bold"],
 ";  Unfortunately it is very useful to make exception for unit element. \
Setting it to 1 will solve many ordering problems, however will result in \
complications when generating tensor products. Therefore in these functions \
we need to ",
 StyleBox["Block[ ] bs",
  FontWeight->"Bold"],
 ". For quaternions we always want this replacement to happen"
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"952e2f0c-5092-44cd-b803-146352e13bcd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"bs", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_", ",", "\"\<Quaternion\>\"", 
         ",", "___"}], "]"}], "]"}], "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "_", ",", "_"}], "]"}], "[", 
        RowBox[{"mvPoint", "[", "_", "]"}], "]"}], "]"}], "=", "1"}], ";", 
     " ", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"addition", " ", "to", " ", "curvilinear", " ", "coords"}], 
       ",", " ", 
       RowBox[{"comment", " ", "for", " ", "investigation"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"bs", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "=", "1"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"18803abb-da1d-417e-9db0-45e5560c28fc"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Setting input (",
 StyleBox["$PreRead!!!",
  FontColor->RGBColor[1, 0, 0]],
 ") notation for algebra and its elements"
}], "Subsubsection",ExpressionUUID->"d4882fb5-f621-4b24-8f62-ead97d7ff155"],

Cell["\<\
This subsection is still very far from ideal shape. The main problem is \
non-compatibility and possible interaction of other parts of Mathematica \
system. \
\>", "Text",ExpressionUUID->"53338077-23cc-42b6-8f35-1213cf10944a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefineNotation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"FontColor", "->", "Automatic"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineNotation", "::", "newcolor"}], "=", 
    "\"\<Generating new color for `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", 
        RowBox[{"gaDefineNotation", ",", "StyleBox", ",", "pickNextColor"}], 
        "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", "gaNotation"}],
        ")"}], "||", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], ",", 
        RowBox[{"{", "__Rule", "}"}]}], "]"}]}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gaNotation", "[", "al", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"FontColor", "->", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "value", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"value", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}]}], 
                 ")"}], "/.", 
                RowBox[{"Options", "[", "gaDefineNotation", "]"}]}], ")"}]}], 
             ",", "\[IndentingNewLine]", "_RGBColor", ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"alreadyUsedColors", ",", 
                RowBox[{"ColorConvert", "[", 
                 RowBox[{"value", ",", "\"\<RGB\>\""}], "]"}]}], "]"}], ";", 
              "value"}], ",", "\[IndentingNewLine]", "Automatic", ",", 
             RowBox[{"pickNextColor", "[", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "pickNextColor", "]"}]}], "]"}], 
              "]"}], ",", "\[IndentingNewLine]", "_", ",", 
             RowBox[{"ColorConvert", "[", 
              RowBox[{"Black", ",", "\"\<RGB\>\""}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "]"}]}], "}"}]}], ")"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[133]:=",ExpressionUUID->"ecab1246-33bf-42fd-9efd-adfa732c965e"],

Cell[TextData[{
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " modifies ",
 StyleBox["$PreRead",
  FontWeight->"Bold"],
 ". "
}], "Text",ExpressionUUID->"4f14947a-5c8d-403e-9859-c7ad7fd6c7b8"],

Cell[TextData[{
 "The rule ",
 StyleBox["e[_]:>e[__]",
  FontWeight->"Bold"],
 " in ",
 StyleBox["$PreRead ",
  FontWeight->"Bold"],
 "ensures that forbidden pattern (because of mandatory ",
 StyleBox["e[index,algebra] ",
  FontWeight->"Bold"],
 "syntax)  with single blank is automatically replaced by blank sequence.  ",
 StyleBox["$PreRead ",
  FontWeight->"Bold"],
 "is made dynamic with := in order to prevent input aliases when ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " is set to be ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " of algebras. This function also includes definitions for ",
 StyleBox["MV[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " is far from finished. "
}], "Text",ExpressionUUID->"dc9b7870-2767-421a-80a3-eeed2d488801"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], "=", 
   "\"\<gaRunningAlgebra was set to tensor product `1`. Input alias of basis \
element was disabled, it only works with Cl[p,q] algebras.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"a5625491-4e89-4c8a-b49a-6e6b01f26fd7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"preReadMessage", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineInput", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer", ":", "0"}]}], "]"}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaRunningAlgebra", "=", 
      RowBox[{"Cl", "[", 
       RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "for", " ", "nested", " ", "inputs", " ", "ReplaceAll", " ", "in", " ", 
       "future", " ", "can", " ", "be", " ", "replaced", " ", "by", " ", 
       "more", " ", "dangerous", " ", "ReplaceRepeated"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "=", "orthonormalBasisSymbolName"}], ",", 
         RowBox[{
         "orthonormalBaseSymbolInputA", "=", 
          "orthonormalBasisSymbolInputAlias"}], ",", 
         RowBox[{"derivativeSymbol", "=", "directionalDerivativeSymbolName"}],
          ",", 
         RowBox[{
         "derivativeSymbolInputA", "=", "directionalDerivativeInputAlias"}]}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"$PreRead", ":=", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], 
            ",", 
            RowBox[{
             RowBox[{"preReadMessage", "=", "False"}], ";", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"gaRA", "=", 
                  RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}]}], ",", 
                 RowBox[{"gaRCS", "=", 
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<\\\"\>\"", ",", 
                    RowBox[{
                    "ToString", "[", "gaRunningCoordinateChart", "]"}], ",", 
                    "\"\<\\\"\>\""}], "]"}]}]}], "}"}], ",", 
               RowBox[{"ReplaceAll", "[", 
                RowBox[{"#", ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "general", " ", "basis", " ", "symbol", " ", "replacement", 
                   " ", "for", " ", "manifold", " ", "is", " ", "defined", 
                   " ", "after", " ", "setting", " ", "of", " ", "coordinate",
                    " ", "system"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"(*", 
                   RowBox[{
                   "general", " ", "basis", " ", "symbol", " ", 
                    "replacements", " ", "for", " ", "manifold"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}], "]"}],
                     ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<,\>\"", ",", "gaRCS", 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}], "]"}],
                     ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "gaRA", ",", "\"\<,\>\"", 
                    ",", "gaRCS", ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    "\"\<gaRunningCoordinateChartVars\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<Association\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\""}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "orthogonal", " ", "basis", " ", "symbol", " ", 
                    "replacements", " ", "for", " ", "plane", " ", "space"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "\"\<_\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "\"\<__\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "gaRA", ",", "\"\<]\>\""}], 
                    "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<Association\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\""}]}], 
                    "]"}]}]}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", "preReadMessage"}], ",", 
               RowBox[{
                RowBox[{"preReadMessage", "=", "True"}], ";", 
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], 
                  ",", "gaRunningAlgebra"}], "]"}]}]}], "]"}], ";", "#"}]}], 
           "]"}], "&"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "clear", " ", "and", " ", "set", " ", "autoreplacements", " ", "for",
           " ", "orthogonal", " ", "basis", " ", "vector", " ", "symbol"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"SetOptions", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
          RowBox[{"InputAutoReplacements", " ", "\[Rule]", " ", 
           RowBox[{"Fold", "[", 
            RowBox[{"DeleteCases", ",", 
             RowBox[{"CurrentValue", "[", 
              RowBox[{
               RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
               "InputAutoReplacements"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"Blank", "[", "]"}], ",", 
               RowBox[{"Blank", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"we", " ", "added", " ", "generalBasisSymbolInputA"}], "->", 
           RowBox[{"fs", " ", "here"}]}], ",", " ", 
          RowBox[{
          "because", " ", "adding", " ", "it", " ", "in", " ", 
           "gaDefineCoordinate", " ", "Chart", " ", "results", " ", "in", " ",
            "additional", " ", "GeometricAlgebra`\[DoubleStruckF]"}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "will", " ", "try", " ", "to", " ", "remove", " ", "from", " ", 
          "here", " ", "when", " ", "derivative", " ", "part", " ", "will", 
          " ", "be", " ", "merged", " ", "with", " ", "package", " ", 
          "context"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"SetOptions", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
          RowBox[{"InputAutoReplacements", "->", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"CurrentValue", "[", 
              RowBox[{
               RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
               "InputAutoReplacements"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "derivativeSymbolInputA", "\[Rule]", "derivativeSymbol"}], ",", 
               RowBox[{"orthonormalBaseSymbolInputA", "\[Rule]", "bs"}]}], 
              "}"}]}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "Quiet", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Running algebra is: gaRunningAlgebra=\>\"", ",", 
          "gaRunningAlgebra"}], "}"}], "}"}]}], "]"}], ";"}], 
    "\[IndentingNewLine]", ")"}]}], ";"}]}], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"bf02247b-d677-4f12-9775-0548653185ff"],

Cell[TextData[{
 "New alternative to replace expression during evaluation of cell is moved to \
",
 StyleBox["RemovedPieces.nb",
  FontWeight->"Bold"],
 ". Interesting for investigation. Not yet properly working. Test them in new \
notebook, because autoreplacements are difficult to remove. Save the original \
file before experimenting!!!"
}], "Text",ExpressionUUID->"a215171a-d865-40bb-9058-9f62d26c451b"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Orthogonal basis definition, index sorting functions"
}], "Subsection",ExpressionUUID->"8ebdc9e3-b1e6-49fc-a3b6-be8285d6f741"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index ordering and sorting"
}], "Subsubsection",ExpressionUUID->"a45c58c1-8a12-438d-8f9c-8ef477ef3f8e"],

Cell["\<\
Help functions, which convert index set to binary like representations by \
inserting zeroes in proper places. Uncompiled versions are inactive. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"f44a03f6-60f2-46e1-8d73-126fdb53c0f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvIndexToBinaryLikeRepresentation", "[", 
    RowBox[{"a_List", ",", 
     RowBox[{"al_", ":", "gaRunningAlgebra"}]}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Rule", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"4f9d55b1-3ba1-40f9-be18-c0a05c8894b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", 
    RowBox[{
     RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
        ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", 
    RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
       ",", 
       RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
       RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[140]:=",ExpressionUUID->"32d0b600-1f15-474d-ad3b-f0523618fb95"],

Cell[CellGroupData[{

Cell["Pure orderings", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"355b6c00-ac2e-4250-932a-92aa4739dafe"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  Lex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "lex"], TraditionalForm]],ExpressionUUID->
  "e65572b7-c10d-4f23-93d0-ab27465a8eca"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero entry is \
positive.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"c0732ef1-c401-426b-aa1f-bcc5268842cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"79394e91-c038-45f9-a338-56c57ae3bbc6"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}",
  FontWeight->"Bold"],
 ", spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ] ",
  FontWeight->"Bold"],
 "appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"3d2ffe28-8ccb-4398-8c76-af639ed61f4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[141]:=",ExpressionUUID->"addeb727-b8e6-4b77-ba2c-a9a92ca0e760"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  InvLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Invlex"], TraditionalForm]],ExpressionUUID->
  "af2332c3-4906-4600-9b21-57b3e512c200"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero entry \
is positive.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"458fccd4-1973-4a13-b7b1-95fb2250fa1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"a6829ea1-b2d9-49fc-9701-89c3c692948d"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}",
  FontWeight->"Bold"],
 ", spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ] ",
  FontWeight->"Bold"],
 "appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " (see https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"240b7621-241f-4814-a3f6-024c7ad7648b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
               "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
             "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[142]:=",ExpressionUUID->"81684214-4201-4ff5-883a-2c81dade93e1"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  RevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Revlex"], TraditionalForm]],ExpressionUUID->
  "dab5c3fb-3a48-445b-a1fe-bb878db9dc79"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero entry \
is negative.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"2ff79d8d-5be9-458d-a385-8dc54813b925"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"6c9081ba-f5d8-4994-8ed8-7b67bf972ac6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeRevLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}],
               "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeRevLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
             "]"}]}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[143]:=",ExpressionUUID->"e7faed67-141f-4926-bb46-f89604974415"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " InvRevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "InvRevlex"], TraditionalForm]],ExpressionUUID->
  "ef6acad7-6c9a-4813-bd32-3d912ddabcc1"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero entry is \
negative.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"f39303db-d1db-410f-b754-44684e92d74b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"75441b51-d6c5-44bb-9e51-a6cea373e038"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}",
  FontWeight->"Bold"],
 ", spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ]",
  FontWeight->"Bold"],
 " appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " (see https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"017a87be-074f-4bb0-8b4d-2e0933902804"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvRevLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", 
               "True"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvRevLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[144]:=",ExpressionUUID->"66fe8a24-2571-40f4-876c-7dd369d90036"]
}, Closed]],

Cell[CellGroupData[{

Cell["Degree modified orders", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"00768868-8bf6-4399-bd6b-90126ec3154f"],

Cell["Uncompiled version is inactive.", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"9626474e-f5da-41a1-82ea-4fec3498faa4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Length", "[", "a1", "]"}], "-", 
       RowBox[{"Length", "[", "a2", "]"}]}], ")"}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"9912a0d6-e726-4395-9d85-8c930c75443d"],

Cell[TextData[{
 "Compiled versions.  Here inlining using ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " (see https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  do not work, therefore we inline in the recommended way with  ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}.",
  FontWeight->"Bold"]
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"442d8e11-1ab9-4cc4-bbda-f911327bd915"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[145]:=",ExpressionUUID->"bebf2a99-d950-4ae3-a828-9ce4bd97e569"]
}, Closed]],

Cell[CellGroupData[{

Cell["Inverse degree modified orders", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"8b4ba894-5f95-496a-a32a-2214c0214e4d"],

Cell["Uncompiled version is inactive.", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"359c28d6-a497-4b9a-8034-76c605ca0f4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeInvDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "a2", "]"}], "-", 
      RowBox[{"Length", "[", "a1", "]"}]}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"03793bac-a42e-424e-b255-789a7264e5f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[146]:=",ExpressionUUID->"1d65b70e-be39-47ca-8a60-0195eb77e1b2"],

Cell[TextData[{
 "Commutative coefficients are ordered using ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s MonomialList orders, which are \[OpenCurlyDoubleQuote]Lexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeReverseLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeDegreeLexicographic\
\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NegativeDegreeReverseLexicographic\
\[CloseCurlyDoubleQuote]. These orders are expanded to include  \
\[OpenCurlyDoubleQuote]Reverse[Lexicographic]\[CloseCurlyDoubleQuote],... \
etc., which reverses monomial list order."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"3301732d-7446-466c-bc73-99b95d191cc5"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Ordering  of orthonormal basis elements and index sets in plain \
representation. \
\>", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"5a5f425b-3309-483f-aad1-c6edac30e3b3"],

Cell["\<\
Ordering is defined only for same set (empty or not) of up or down  indices. \
\
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"307e8066-5055-457b-ab05-69b06ce856e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQNoncommutative", "[", 
    RowBox[{"ord_String", ",", "ind1_", ",", "ind2_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "last", " ", "position"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "last", " ", "position"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeInvLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "first", " ", "position"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeRevLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
     
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "first", " ", "position"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeInvRevLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{"for", " ", "all", " ", 
       RowBox[{"Deg", "[", "]"}], " ", "True", " ", "if", " ", "scalar", " ", 
       "is", " ", "in", " ", "the", " ", "last", " ", "position"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"",
      ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
        
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", 
     ",", 
     RowBox[{"(*", " ", 
      RowBox[{"for", " ", "all", " ", 
       RowBox[{"InvDeg", "[", "]"}], " ", "True", " ", "if", " ", "scalar", 
       " ", "is", " ", "in", " ", "the", " ", "first", " ", "position"}], " ",
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
        
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
        
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvRevLex]\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
        "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "_", ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBasis", "::", "UndefinedOrdering"}], ",", 
        "ord"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[147]:=",ExpressionUUID->"64d5f5c5-2aaa-4d95-9595-238133080adb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQCommutative", "[", 
    RowBox[{"comOrd_String", ",", "anyCoef1_", ",", "anyCoef2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vars", "=", 
        RowBox[{"Variables", "[", 
         RowBox[{"anyCoef1", "+", "anyCoef2"}], "]"}]}], ",", "comOrdMod"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"vars", "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"OrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{"comOrd", ",", "\[IndentingNewLine]", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Lexicographic\>\"", ",", "\"\<DegreeLexicographic\>\"", ",", 
            "\"\<DegreeReverseLexicographic\>\"", ",", 
            "\"\<NegativeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeReverseLexicographic\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MonomialList", "[", 
           RowBox[{
            RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
            "comOrd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Reverse[Lexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeReverseLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeReverseLexicographic]\>\""}], "}"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"comOrdMod", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"comOrd", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<Reverse[\>\"", "\[Rule]", "\"\<\>\""}], ",", 
               RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"MonomialList", "[", 
             RowBox[{
              RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
              "comOrdMod"}], "]"}], "]"}], "===", 
           RowBox[{"{", 
            RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", 
            "comOrd"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[148]:=",ExpressionUUID->"8eef9ec3-b209-4dce-8a8f-bc488687b41a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaOrderedQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaCommutativeMonomialOrder", "\[Rule]", "\"\<Lexicographic\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], "=", 
    "\"\<The order `1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"anyCoef2_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], "=!=", 
            RowBox[{"{", "ind2", "}"}]}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQNoncommutative", "[", 
           RowBox[{"ord", ",", 
            RowBox[{"{", "ind1", "}"}], ",", 
            RowBox[{"{", "ind2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anyCoef1", ",", "anyCoef2"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[149]:=",ExpressionUUID->"d4a4408c-3db7-4304-abd4-3e662989cbce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anyCoef1", ",", 
       RowBox[{"anyCoef2", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind2", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[152]:=",ExpressionUUID->"424892f9-44de-4517-8210-b7556db67f9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "anyCoef2", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[153]:=",ExpressionUUID->"7d499801-7707-470a-b17b-62f52a80733b"],

Cell[TextData[{
 "Scalar and base element ordering. For   \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[RevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvRevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]RevLex\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvRevLex\
\[CloseCurlyDoubleQuote] scalars are lowest elements. Note, that rules are \
complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["bs[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"fdaf5c03-1347-47a4-ba28-af9098c137ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any_", ",", 
        RowBox[{"anycoef_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{"any", ",", "anycoef", ",", "opts"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[154]:=",ExpressionUUID->"447a6565-d17f-4815-a1ac-db6008a2e5b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
            "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
            "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", "ord"}],
          "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[155]:=",ExpressionUUID->"42e4153a-ae53-4955-96a9-90c9a59c29e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "any", ",", "anycoef"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"1324cd74-5edb-497d-9883-a75e299b6560"],

Cell[TextData[{
 "Scalars and base element ordering. For   \[OpenCurlyDoubleQuote]Deg[Lex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[RevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvRevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Lex\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]InvLex\[CloseCurlyDoubleQuote]  scalars are highest \
elements.  Note, that rules are complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["bs[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"439390e9-0bfb-4562-89bc-7e7e04d18f0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anycoef_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", "any_", 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{"anycoef", ",", "any", ",", "opts"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[156]:=",ExpressionUUID->"522bf9aa-61cc-4df3-8e76-02d86f2c1771"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
            "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
            "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
         "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[157]:=",ExpressionUUID->"a5bfbbba-7abc-4705-b018-de5b373bd5d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
                "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
                "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
             "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anycoef", ",", "any"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"0e12fbb5-4861-43c6-a3a0-1692f5aeb132"],

Cell[TextData[{
 "Scalar ordering uses ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " standard GroebnerBase orderings defined in ",
 StyleBox["MonomialList[ ]",
  FontWeight->"Bold"],
 ". If MV are more general (not basis elements) then we first convert to \
AssociationRepresentation, where the comparison is much easier."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"bffa6eab-6128-47e3-a941-21a4d5d221f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any1_", ",", "any2_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"orderedQCommutative", "[", 
         RowBox[{"comOrd", ",", "any1", ",", "any2"}], "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any1", ",", "any2"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[158]:=",ExpressionUUID->"7d7ee2cc-7599-49d1-b8f0-4d296dbe707e"],

Cell["\<\
The same rules for dual basis. When basis elements have up and down indices \
the sorting is undefined (no rules). \
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"fb84627e-5356-4d4b-ad85-fc761581c067"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind1_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind2_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind1", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        RowBox[{"anyCoef2", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind2", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        "opts"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
         RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"SameQ", "[", 
         RowBox[{"ind", ",", "ind1", ",", "ind2"}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[159]:=",ExpressionUUID->"3e4b9f1c-899b-4dc6-95e1-c1f98a6c80af"],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]IncreasingPermutatons\[CloseCurlyDoubleQuote] \
ordering {{1},{2},{3},{1,2}{1,3},{2,3},....} is the same as InvDeg[Lex] \
ordering. There is possibility to define IncreasingPermutatonsWithSignature \
where {1,3}->-{3,1} (due to Odd permutation of 1,2,3). Not implemented. See \
note in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 58."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"7101ff3f-c272-497f-8b43-0c126c1f8c2d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Subsets", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "]"}], ",", 
     RowBox[{"{", "len", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", "len__Integer", "}"}]}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mvInvDegLexSortedIndexList", "[", 
          RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "len", "}"}]}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr_", ":", "All"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[160]:=",ExpressionUUID->"eeafc362-b1a2-4501-a3f5-1405692a6781"],

Cell[TextData[{
 "Signature of increasing i.e.  InvDeg[Lex], permutations are easier to \
determine, see formulas in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 59."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"00f31b6e-df08-4082-940c-fd0bba862c8a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"triangularNumber", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"n", "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}], "/", "2"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mvSignatureOfIncreasingPermutation", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", "x"}], ")"}], "-", 
       RowBox[{"triangularNumber", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"OrderedQ", "[", "x", "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{"And", "@@", 
       RowBox[{"Positive", "[", "x", "]"}]}], ")"}]}]}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[163]:=",ExpressionUUID->"fb57f780-cc6a-4a45-ad46-56323795d1e2"],

Cell["Sorting index list with given order", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"d6b30169-d098-4738-9689-0bf2d9efa5cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "[", 
    RowBox[{
     RowBox[{"ind", ":", 
      RowBox[{"{", "__List", "}"}]}], ",", 
     RowBox[{"ord_String", ":", "\"\<InvDeg[Lex]\>\""}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeInvLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeRevLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeInvRevLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[InvRevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "_", ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", "ord"}], 
        "]"}], ";", "ind"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"AllTrue", "[", 
     RowBox[{
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Flatten", "[", "ind", "]"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Positive", "[", "#", "]"}], "&&", 
         RowBox[{"IntegerQ", "[", "#", "]"}]}], "&"}], ")"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[165]:=",ExpressionUUID->"9017cb67-e252-44f4-8043-67b55ea001ff"],

Cell[TextData[{
 "Problem  in version 11.3:  The pattern matcher ",
 Cell[BoxData[
  RowBox[{"ind", ":", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"__Integer", "?", "Positive"}], "}"}], ".."}], "}"}]}]], "Input",
  CellChangeTimes->{{3.7727723624993143`*^9, 3.77277236395726*^9}},
  ExpressionUUID->"37ce8f73-0589-4f2f-84c2-d68cd2d9fb0e"],
 ".  ",
 Cell[BoxData["\<\"Recursion limit exceeded; positive match might be \
miss\"\>"], "Message",
  GeneratedCell->False,
  CellAutoOverwrite->False,ExpressionUUID->
  "8fbbc500-a4a5-4081-8cf0-9fde266f6026"],
 ".  The pattern matcher worked well for 10.3 and 11.0. Wolfram says it is a \
new restriction to prevent crash from deep recursive stack nesting for \
dynamic patterns: \
https://mathematica.stackexchange.com/questions/202533/pattern-matcher-\
behavior-change-in-11-3?noredirect=1#comment524761_202533"
}], "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"58e1d979-4c15-4e97-a74d-ef60bc1a1a6d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Ordering  of orthonormal basis elements and index sets in Association \
representation. Since at the moment AssociationRepresentation is not yet \
defined,  actual sorting/ordering in that form is defined in section 6 \
(devoted for Groebner basis).\
\>", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10002.},ExpressionUUID->"0be1fbab-1dec-4f1a-b929-25d65090157b"],

Cell[TextData[{
 "keyReplace taken from ",
 Cell[BoxData[""], "Input",
  CellChangeTimes->{{3.736649818411449*^9, 3.73664981883968*^9}},
  ExpressionUUID->"53c74859-e1ba-4985-a2bb-e969d971242b"],
 "https://mathematica.stackexchange.com/questions/166471/rename-keys-in-\
nested-association, answered by ",
 "Sjoerd Smit."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10002.},ExpressionUUID->"bfad9668-b459-4757-aab2-88f5969b0d50"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"keyReplaceAndSort", "[", 
    RowBox[{"assoc_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"Composition", "[", 
       RowBox[{"KeySort", ",", 
        RowBox[{"KeyMap", "[", 
         RowBox[{"Replace", "[", "rules", "]"}], "]"}]}], "]"}], ",", "assoc",
       ",", 
      RowBox[{"Position", "[", 
       RowBox[{"assoc", ",", 
        RowBox[{"_", "?", "AssociationQ"}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"assoc", ",", "_Association"}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"keyReplace", "[", 
    RowBox[{"assoc_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{"Replace", "[", "rules", "]"}], "]"}], ",", "assoc", ",", 
      RowBox[{"Position", "[", 
       RowBox[{"assoc", ",", 
        RowBox[{"_", "?", "AssociationQ"}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"assoc", ",", "_Association"}], "]"}]}]}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellLabel->
  "In[166]:=",ExpressionUUID->"8bb530dc-95aa-4b6a-8019-f4ee2256ac74"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
     RowBox[{"al", ",", "order"}], "]"}], "=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "indexList", "}"}], ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
             "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
             "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", 
           "order"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"indexList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"gaIndexSort", "[", 
              RowBox[{
               RowBox[{"mvInvDegLexSortedIndexList", "[", "al", "]"}], ",", 
               "order"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"indexList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"gaIndexSort", "[", 
              RowBox[{
               RowBox[{"mvInvDegLexSortedIndexList", "[", "al", "]"}], ",", 
               "order"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"indexList", ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"MapAt", "[", 
              RowBox[{"First", ",", "#", ",", "1"}], "]"}], "&"}], ",", 
            RowBox[{"Reverse", "/@", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{"List", ",", "indexList"}], "]"}]}]}], "]"}]}], "]"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellLabel->
  "In[168]:=",ExpressionUUID->"cb1a5e06-d6dd-45fe-ba9e-be34aa0cf8a8"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric algebra orthonormal basis  construction"
}], "Subsubsection",ExpressionUUID->"e2a96baa-47f0-4f92-bf63-74067dd81ef8"],

Cell[TextData[{
 "This slightly modified approach of base construction is due to G. Stacey \
Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  Reciprocal base is constructed in section 8 since they need higher \
functions like inverse, etc."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"92a19aa5-4a51-410d-ad5c-aa36f3a43068"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
      "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
      ",", 
      RowBox[{"Quiet", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"gaGradesOnly", "\[Rule]", "All"}], ",", 
      RowBox[{"gaDefineInput", "\[Rule]", "True"}], ",", 
      RowBox[{"gaMakeAlias", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineOrthonormalBasis", "::", "UndefinedOrdering"}], "=", 
    "\"\<The order `1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionDefineOrthonormalBasis", "[", 
    "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=", 
   "\"\<Should be one of possible GA orderings: \
(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\
\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\
\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\") \
or \\\"None\\\". \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionDefineOrthonormalBasis", "[", "\"\<gaGradesOnly\>\"", "]"}], 
   "=", "\"\<All,Automatic or list of nonnegative integers\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDefineOrthonormalBasis", "[", "\"\<Quiet\>\"", "]"}], 
   "=", "\"\<Automatic|True|False\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionDefineOrthonormalBasis", "[", "\"\<gaDefineInput\>\"", "]"}], 
   "=", "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionDefineOrthonormalBasis", "[", "\"\<gaMakeAlias\>\"", "]"}], 
    "=", "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDefineOrthonormalBasis", "[", 
    RowBox[{"\"\<gaNonCommutativeMonomialOrder\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<None\>\"", "|", "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", 
      "\"\<RevLex\>\"", "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", 
      "|", "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
      "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
      "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
      "\"\<InvDeg[InvRevLex]\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDefineOrthonormalBasis", "[", 
    RowBox[{"\"\<gaGradesOnly\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{"All", ",", "Automatic", ",", 
       RowBox[{"{", 
        RowBox[{"__Integer", "?", "NonNegative"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDefineOrthonormalBasis", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"BooleanQ", "[", "val", "]"}], "||", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"Automatic", "|", "\"\<Automatic\>\""}]}], "]"}]}]}], ";", 
  RowBox[{
   RowBox[{"testOptionDefineOrthonormalBasis", "[", 
    RowBox[{"\"\<gaDefineInput\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDefineOrthonormalBasis", "[", 
     RowBox[{"\"\<gaMakeAlias\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetAttributes", "[", 
      RowBox[{"bs", ",", "NHoldAll"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDefineOrthonormalBasis", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"p_Integer", ",", "q_Integer", ",", 
          RowBox[{"r", ":", 
           RowBox[{"(", 
            RowBox[{"_", "?", "IntegerQ"}], ")"}], ":", "0"}]}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", 
           RowBox[{
           "gaDefineOrthonormalBasis", ",", "gaDefineNotation", ",", 
            "gaDefineInput"}], "}"}], "]"}]}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "theOption", ",", "invdeglexIndexList", ",", "indSet", ",", "keysB", 
          ",", 
          RowBox[{"quiet", "=", "False"}], ",", 
          RowBox[{"al", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"p", ",", "q", ",", "r"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "gaDefineOrthonormalBasis", ",", "#", ",", "theOption"}], "}"}],
              ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionDefineOrthonormalBasis", "]"}],
               "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"First", "/@", 
            RowBox[{"{", "opts", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"gaGradesOnly", "/.", 
              RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{
             "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}],
              "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            "=", 
            RowBox[{"(", 
             RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
              RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Quiet", "/.", 
               RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Quiet", "->", "Automatic"}], "}"}]}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaDefineInput\>\"", "]"}], "]"}], 
            "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaDefineInput\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"gaDefineInput", "/.", 
              RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaMakeAlias\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaMakeAlias\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"gaMakeAlias", "/.", 
              RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "color", " ", "of", " ", "basis", " ", "element"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", 
              "gaNotation"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
              RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaDefineNotation", "[", 
             RowBox[{"al", ",", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "gaDefineNotation", "]"}]}], "]"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "calculate", " ", "and", " ", "store", " ", "some", " ", "data", 
           " ", "which", " ", "will", " ", "be", " ", "often", " ", "used", 
           " ", "by", " ", "other", " ", "functions"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "=", 
          RowBox[{"p", "+", "q", "+", "r"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"p", "+", "1"}], ",", 
            RowBox[{"p", "+", "q"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaZeroSignatureIndexList", "[", "al", "]"}], "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"p", "+", "q", "+", "1"}], ",", 
            RowBox[{"p", "+", "q", "+", "r"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaI", "[", "al", "]"}], "=", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"p", "+", "q", "+", "r"}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaReverseGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}], ",", 
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", "4"}], "]"}]}], "]"}], ",", "i", ",", 
              "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}]}], "}"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaGradeInverseGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OddQ", "[", "i", "]"}], ",", "i", ",", "Nothing"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}]}], "}"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}], ",", 
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", "4"}], "]"}]}], "]"}], ",", "i", ",", 
              "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}]}], "}"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"main", " ", "stuff"}], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"unitElement", "[", "al", "]"}], "=", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"invdeglexIndexList", "=", 
          RowBox[{"mvInvDegLexSortedIndexList", "[", 
           RowBox[{"al", ",", 
            RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            "===", "\"\<InvDeg[Lex]\>\""}], ",", 
           RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
           RowBox[{"indSet", "=", 
            RowBox[{"gaIndexSort", "[", 
             RowBox[{"invdeglexIndexList", ",", 
              RowBox[{
              "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
               "]"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}], "/@",
             "indSet"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "put", " ", "scalar", " ", "element", " ", "in", " ", "the", " ", 
           "beginning", " ", "or", " ", "end", " ", "of", " ", "list"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "===", 
              "All"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
               "0"}], "]"}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                 "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                 ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
               ",", 
               RowBox[{
               "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                "]"}]}], "]"}], ",", 
             RowBox[{
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", 
                RowBox[{
                "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                 "]"}], ",", 
                RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
               "]"}], "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"al", ",", 
                 RowBox[{
                 "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                  "]"}], ",", 
                 RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
                "]"}], "=", 
               RowBox[{"Append", "[", 
                RowBox[{"keysB", ",", 
                 RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{
              "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
               "]"}], ",", 
              RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
             "]"}], "=", "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
           "\[IndentingNewLine]", "Automatic", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"alreadyPrintedList", ",", "al"}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"alreadyPrintedList", ",", "al"}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"quiet", "=", "False"}]}], ",", 
             RowBox[{"quiet", "=", "True"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "True", ",", 
           RowBox[{"quiet", "=", "True"}], ",", "False", ",", 
           RowBox[{"quiet", "=", "False"}], ",", "_", ",", 
           RowBox[{"quiet", "=", "False"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Basis vectors are stored in \>\"", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "=!=",
                   "All"}], ")"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"HoldForm", "@@", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalN]", "[", 
                    RowBox[{"al", ",", 
                    RowBox[{
                    "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"",
                     "]"}], ",", 
                    RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}],
                     "]"}], "}"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[FormalN]", "->", "gaOrthonormalBasis"}], 
                   "}"}]}], ")"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"HoldForm", "@@", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalN]", "[", 
                    RowBox[{"al", ",", 
                    RowBox[{
                    "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"",
                     "]"}]}], "]"}], "}"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"\[FormalN]", "->", "gaOrthonormalBasis"}], 
                   "}"}]}], ")"}]}], "\[IndentingNewLine]", "]"}]}], "}"}], 
            "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"If", " ", 
            RowBox[{"theOption", "[", "\"\<gaMakeAlias\>\"", "]"}], " ", "is",
             " ", "false"}], ",", " ", 
           RowBox[{
           "then", " ", "no", " ", "user", " ", "input", " ", "and", " ", 
            "only", " ", "explicit", " ", "reference", " ", 
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{
              "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
               "]"}], ",", 
              RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
             "]"}], " ", "to", " ", "basis", " ", "is", " ", "defined"}]}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaMakeAlias\>\"", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "set", " ", "and", " ", "update", " ", "input", " ", "aliases", 
             " ", "only", " ", "is", " ", "useful", " ", "with", " ", 
             "defined", " ", "basis", " ", "shortcuts", " ", "since", " ", 
             "gaRunningOredering", " ", "is", " ", "set", " ", "at", " ", 
             "this", " ", "step"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<gaDefineInput\>\"", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"gaDefineInput", "[", 
                RowBox[{"al", ",", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "gaDefineInput", "]"}]}], 
                   "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "save", " ", "the", " ", "basis", " ", "ordering", " ", "in", 
              " ", "the", " ", "global", " ", "variable"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"gaRunningOrdering", "=", 
             RowBox[{
             "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "make", " ", "shorter", " ", "references", " ", "to", " ", 
              "generated", " ", "basis"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", 
               RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
              "]"}], "=", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", 
               RowBox[{
               "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                "]"}], ",", 
               RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "===",
                 "All"}], ")"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", 
                  RowBox[{
                  "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                   "]"}]}], "]"}], "=", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", 
                  RowBox[{
                  "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                   "]"}], ",", 
                  RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "=", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", 
                  RowBox[{
                  "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                   "]"}], ",", 
                  RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
                 "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", 
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
           ",", 
           RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"special", " ", "data", " ", "for", " ", "quaternions"}], ",", 
       " ", 
       RowBox[{
       "since", " ", "they", " ", "can", " ", "be", " ", "used", " ", "with", 
        " ", "any", " ", "algebra"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDimensionOfVectorSpace", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "2"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNegativeSignatureIndexList", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaReverseGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", "2", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeInverseGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaCliffordConjugateGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], ";"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"18bb5eec-fbd6-4a59-bf3e-88fd4576ad9d"],

Cell["\<\
We renamed gaVectorSpaceDimension[ ] to gaDimensionOfVectorSpace[ ]. Warn if \
user still used old name and replace by new\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"22f3e9c8-f094-4909-9d84-8f7b93d0633f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorSpaceDimension", "[", "alg_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaVerify", "::", "obsolete"}], ",", 
       RowBox[{"gaVectorSpaceDimension", "[", "]"}], ",", 
       RowBox[{"gaDimensionOfVectorSpace", "[", "]"}]}], "]"}], ";", 
     RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"963855c4-541e-4962-a13e-6cd0fd3db19c"],

Cell[TextData[{
 "Sometimes it is useful to group base elements by grade, this is simply to \
implement using undocumented ",
 StyleBox["Internal`PartitionRagged[ ]",
  FontWeight->"Bold"],
 " function. Warning, code below will not work if ",
 StyleBox["Module[ ] ",
  FontWeight->"Bold"],
 "is replaced by ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"3bf21853-2a3c-425b-975a-66491ac3c9cb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaOrthonormalBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"GroupBy", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"algebra_", ",", 
     RowBox[{"ord", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"gr_", ":", "All"}], ",", 
     RowBox[{"opts__", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grouping", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"GroupBy", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaOrthonormalBasis", ",", "GroupBy"}], "]"}]}], ")"}]}], 
       ",", 
       RowBox[{"theAlgBasis", "=", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{"algebra", ",", "ord", ",", "gr"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "theAlgBasis", "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "grouping", ",", "\"\<None\>\"", ",", "theAlgBasis", ",", 
         "\"\<Grade\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Clear", "[", "gaHomogeneusSubspaceBasis", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Set", "@@", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaHomogeneusSubspaceBasis", "[", 
                 RowBox[{"algebra", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"gaDimensionOfVectorSpace", "[", "algebra", "]"}]}], 
                "]"}]}], ")"}], ",", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{"Internal`PartitionRagged", "[", 
               RowBox[{"theAlgBasis", ",", 
                RowBox[{"Length", "/@", 
                 RowBox[{"Split", "[", 
                  RowBox[{"theAlgBasis", ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaGradeList", "[", "#1", "]"}], "===", 
                    RowBox[{"gaGradeList", "[", "#2", "]"}]}], "&"}], ")"}]}],
                   "]"}]}]}], "]"}], ")"}]}], "\[IndentingNewLine]", 
            "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"2e867d9e-b84d-44df-b321-752805289dec"],

Cell["\<\
If all base was already calculated an now we need only some part of it, then \
simply take requested grades\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d0f46017-df4c-4e74-adfc-24cc842507cf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra_", ",", 
      RowBox[{"ord", ":", 
       RowBox[{"(", 
        RowBox[{
        "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
         "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
         "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
         "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
         "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
         "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", "gr_List"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"algebra", ",", "ord", ",", "All"}], "]"}], ",", 
       RowBox[{"_", "?", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaGradeList", "[", "#", "]"}], ",", "gr"}], "]"}], 
            "]"}], ">", "0"}], "&"}], ")"}]}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"algebra", ",", "ord", ",", "All"}], "]"}], "]"}], "=!=", 
      "gaOrthonormalBasis"}]}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "no", " ", "ordering", " ", "given"}], ",", " ", 
    RowBox[{"use", " ", "gaRunningOrdering"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"algebra_", ",", "gr_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra", ",", "gaRunningOrdering", ",", "gr"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaOrthonormalBasis", "[", 
       RowBox[{"algebra", ",", "gaRunninOrdering", ",", "All"}], "]"}], "]"}],
      "=!=", "gaOrthonormalBasis"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[184]:=",ExpressionUUID->"891e92eb-0e8f-4778-b80e-0726d2bdd370"],

Cell["\<\
We often need dimension of complex/real matrix representation of algebra. Add \
function to avoid repetitions. This dimension is used when computing \
characteristic polynomials, determinant norm. It is not suitable when \
converting matrices to MV.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"de712913-f2e9-46aa-a0d6-3935ff236d1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDimensionOfRepresentation", "[", "alg_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaDimensionOfRepresentation", "[", "alg", "]"}], "=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"vectorSpaceDim", "=", 
         RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"EvenQ", "[", "vectorSpaceDim", "]"}], ",", 
         RowBox[{"(", 
          RowBox[{"2", "^", 
           RowBox[{"(", 
            RowBox[{"vectorSpaceDim", "/", "2"}], ")"}]}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{"2", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"vectorSpaceDim", "+", "1"}], ")"}], "/", "2"}], 
            ")"}]}], ")"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"0cbdb0de-81c5-4f15-a297-5aba9bf92b1f"],

Cell["\<\
Dimension of  matrix representation of real Clifford algebras are given by \
different formula. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"f16f3342-1ae9-422b-86ef-3db5eea94953"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionDimensionOfMatrixRepresentation", "[", "\"\<OutputForm\>\"", 
     "]"}], "=", 
    RowBox[{"\"\<Full\>\"", "|", "\"\<DimensionOnly\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDimensionOfMatrixRepresentation", "[", 
    RowBox[{"\"\<OutputForm\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"\"\<Full\>\"", "|", "\"\<DimensionOnly\>\""}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"4cc8fd4a-8df5-41ec-bab6-77b2a0f8c40b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDimensionOfMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"OutputForm", "\[Rule]", "\"\<DimensionOnly\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"8961b14f-de07-4c5b-863a-23681ba40b32"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDimensionOfMatrixRepresentation", "[", 
     RowBox[{"alg_", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"gaDimensionOfMatrixRepresentation", "[", "alg", "]"}], "=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"vectorSpaceDim", "=", 
           RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], ",", 
          RowBox[{"pMinusQMod8", "=", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"alg", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "-", 
              RowBox[{"alg", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", "8"}], "]"}]}], ",", 
          "answer"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "gaDimensionOfMatrixRepresentation", ",", "#", ",", 
               "theOption"}], "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", 
               "testOptionDimensionOfMatrixRepresentation", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"OutputForm", "/.", 
              RowBox[{
              "Options", "[", "gaDimensionOfMatrixRepresentation", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{"pMinusQMod8", ",", "\[IndentingNewLine]", 
            RowBox[{"0", "|", "2"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<\[DoubleStruckCapitalR]\>\"", ",", 
              RowBox[{"2", "^", 
               RowBox[{"(", 
                RowBox[{"vectorSpaceDim", "/", "2"}], ")"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", "1", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<\[DoubleStruckCapitalR]\>\"", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"vectorSpaceDim", "-", "1"}], ")"}], "/", "2"}], 
                 ")"}]}], "\[CirclePlus]", 
               RowBox[{"2", "^", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"vectorSpaceDim", "-", "1"}], ")"}], "/", "2"}], 
                 ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"3", "|", "7"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<\[DoubleStruckCapitalC]\>\"", ",", 
              RowBox[{"2", "^", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"vectorSpaceDim", "-", "1"}], ")"}], "/", "2"}], 
                ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"4", "|", "6"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<\[DoubleStruckCapitalH]\>\"", ",", 
              RowBox[{"2", "^", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"vectorSpaceDim", "-", "2"}], ")"}], "/", "2"}], 
                ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", "5", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<\[DoubleStruckCapitalH]\>\"", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"vectorSpaceDim", "-", "3"}], ")"}], "/", "2"}], 
                 ")"}]}], "\[CirclePlus]", 
               RowBox[{"2", "^", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"vectorSpaceDim", "-", "3"}], ")"}], "/", "2"}], 
                 ")"}]}]}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "often", " ", "only", " ", "dimension", " ", "is", " ", "needed"}],
            ",", " ", 
           RowBox[{"not", " ", "full", " ", "information"}], ",", " ", 
           RowBox[{"so", " ", "this", " ", "is", " ", "default"}]}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "===", 
            "\"\<DimensionOnly\>\""}], ",", 
           RowBox[{"Plus", "@@", 
            RowBox[{"(", 
             RowBox[{"answer", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ")"}]}], ",", 
           RowBox[{"Construct", "@@", "answer"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[190]:=",ExpressionUUID->"d171401d-1cc5-451a-b673-d54f8189f23b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index rising and lowering"
}], "Subsubsection",ExpressionUUID->"b7167849-e29f-4adb-b633-7d62b9f2acf5"],

Cell["\<\
When orthonormal base is calculated, we can raise and lower indices. Raising \
and lowering indices do not make base dual or reciprocal, because we include \
signature factors. The signature of simple algebra is simply a number of \
basis vectors of negative signatures \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"52d4e086-26ba-4e5c-b802-26ca6d77afe7"],

Cell["\<\
The commands allows to rewrite expression with upper or down indices only. \
Because multiplication of up/down indices is realised as independent \
operations, the commands might be useful for a correctness test.\
\>", "Text",ExpressionUUID->"77a4d372-f3de-4fb6-a8ac-3b0360093a29"],

Cell[TextData[{
 "Note, that despite that we have up and down indices we always assume, that \
their ordering is common (i.e. not down indices first, then up indices, but \
order is according index values) If that was not true, then we should apply \
",
 Cell[BoxData["mvAltProductSignatureMap"], "Input",
  Evaluatable->False,
  CellGroupingRules->{GroupTogetherGrouping, 10002.},ExpressionUUID->
  "fbaa7a64-9bda-4e83-ac87-d944c6ff3302"],
 " function from the package and move this function below in the file). "
}], "Text",ExpressionUUID->"930e2f45-aa74-492c-bddb-51ea41f22bb0"],

Cell["Yet needs to implement for Associations.", "Text",ExpressionUUID->"615e2e5e-1158-44d3-ae93-14baac1f2249"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{"expr_", ",", "_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "_bs"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do_List", ",", "up_List"}], "]"}], ",", "al_Cl", ",", 
          "any___"}], "]"}], ",", "\"\<FromDown\>\""}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do", ",", "up"}], "]"}], ",", "al", ",", "any"}], "]"}], "->", 
        RowBox[{
         RowBox[{"Power", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], ",", 
              "do"}], "]"}], "]"}]}], "]"}], "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"Union", "[", 
              RowBox[{"do", ",", "up"}], "]"}]}], "]"}], ",", "al", ",", 
           "any"}], "]"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do_List", ",", "up_List"}], "]"}], ",", "al_Cl", ",", 
          "any___"}], "]"}], ",", "\"\<FromUp\>\""}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do", ",", "up"}], "]"}], ",", "al", ",", "any"}], "]"}], "->", 
        RowBox[{
         RowBox[{"Power", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], ",", 
              "up"}], "]"}], "]"}]}], "]"}], "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"do", ",", "up"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "al", ",", "any"}], "]"}]}]}], 
       "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "if", " ", "there", " ", "are", " ", "no", " ", "down", " ", 
        "indices"}], ",", " ", 
       RowBox[{"then", " ", "nothing", " ", "to", " ", "rise"}]}], " ", 
      "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexUp", "[", 
       RowBox[{"expr_", ",", "opts___"}], "]"}], ":=", 
      RowBox[{"expr", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "__", "}"}], ",", "_"}], "]"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "do", " ", "not", " ", "apply", " ", "to", " ", "manifold", " ", 
        "basis", " ", 
        RowBox[{"elements", ":", " ", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"_bs", "[", "_", "]"}]}], "]"}]}]}], ",", " ", 
       RowBox[{
       "see", " ", "additional", " ", "definition", " ", "in", " ", "section",
         " ", "devoted", " ", "to", " ", "manifolds"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexUp", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"orthogonalBasisElements", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
              "]"}], "]"}]}], ",", "replRules"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replRules", "=", 
           RowBox[{"Dispatch", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"makeRule", "[", 
                RowBox[{"#", ",", "\"\<FromDown\>\""}], "]"}], "&"}], "/@", 
              "orthogonalBasisElements"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
        "]"}], "/;", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "_bs"}], "]"}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"_bs", "[", "_", "]"}]}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "if", " ", "there", " ", "are", " ", "no", " ", "up", " ", "indices"}],
        ",", " ", 
       RowBox[{"then", " ", "nothing", " ", "to", " ", "lower"}]}], " ", 
      "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexDown", "[", 
       RowBox[{"expr_", ",", "opts___"}], "]"}], ":=", 
      RowBox[{"expr", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{"_", ",", 
           RowBox[{"{", "__", "}"}]}], "]"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "do", " ", "not", " ", "apply", " ", "to", " ", "manifold", " ", 
        "basis", " ", 
        RowBox[{"elements", ":", " ", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"_bs", "[", "_", "]"}]}], "]"}]}]}], ",", " ", 
       RowBox[{
       "see", " ", "additional", " ", "definition", " ", "in", " ", "section",
         " ", "devoted", " ", "to", " ", "manifolds"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexDown", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"orthogonalBasisElements", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
              "]"}], "]"}]}], ",", "replRules"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replRules", "=", 
           RowBox[{"Dispatch", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"makeRule", "[", 
                RowBox[{"#", ",", "\"\<FromUp\>\""}], "]"}], "&"}], "/@", 
              "orthogonalBasisElements"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
        "]"}], "/;", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "_bs"}], "]"}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"_bs", "[", "_", "]"}]}], "]"}]}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[191]:=",ExpressionUUID->"f17c5dca-4d8f-464d-9fb8-dee3be310239"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Taking grades, indices and parts of the basis elements"
}], "Subsubsection",ExpressionUUID->"678624ab-5cd1-4468-a812-34f05aac1122"],

Cell[TextData[{
 "Grade of empty base element is zero, grade of base element multiplied by \
factor is grade of base element. Warning. Replacement of c in expression \
c_*bs_basisSymbol by c_. would result in infinite loop. ",
 StyleBox["getGradeHelp[ ]",
  FontWeight->"Bold"],
 " is used for algebra independent memoization. "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"5647c695-e310-4afc-b287-bedd7e8cb38c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getGradeHelp", "[", "i1_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"getGradeHelp", "[", "i1", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Length", "[", "i1", "]"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGradeList", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"gaQuaternionGradeIsZero", "->", "True"}], "}"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[192]:=",ExpressionUUID->"37eee292-7004-4ffd-a5f0-59a1bd2bb2a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "manifold", " ", "MVs", " ", "have", " ", "the", " ", "same", " ", 
      "grades", " ", "as", " ", "plain", " ", "MV"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGradeList", "[", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{
          RowBox[{"basisSymbol", "[", "args__", "]"}], "[", "coord_mvPoint", 
          "]"}], "]"}], ",", "opts___"}], "]"}], ":=", 
      RowBox[{"gaGradeList", "[", 
       RowBox[{
        RowBox[{"basisSymbol", "[", "args", "]"}], ",", "opts"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"gaGradeList", "[", 
          RowBox[{"basisSymbol", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}], "]"}], "]"}], ":=", 
        RowBox[{"{", "0", "}"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "the", " ", "next", " ", "definition", " ", "is", " ", "harmless", " ",
         "for", " ", "MMA", " ", "version"}], ",", " ", 
       RowBox[{
       "which", " ", "do", " ", "not", " ", "have", " ", "Association", " ", 
        "implemented"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{"mv_Association", ",", "__"}], "]"}], "]"}], "]"}], ":=", 
      RowBox[{"Union", "[", 
       RowBox[{"Length", "/@", 
        RowBox[{"Flatten", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Keys", "[", "mv", "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"mvDownUp", "\[Rule]", "List"}], "}"}]}], ")"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Exception", " ", "are", " ", "quaternions"}], ",", " ", 
       RowBox[{
       "since", " ", "they", " ", "can", " ", "enter", " ", "as", " ", 
        "coefficients"}], ",", " ", 
       RowBox[{
       "the", " ", "behaviour", " ", "will", " ", "depend", " ", "on", " ", 
        "option"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"gaGradeList", "[", 
          RowBox[{"basisSymbol", "[", 
           RowBox[{"any__", ",", "\"\<Quaternion\>\""}], "]"}], "]"}], "]"}], 
        ":=", 
        RowBox[{
         RowBox[{"{", "0", "}"}], "/;", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "nonQuaternions", "}"}], ",", "\"\<Quaternion\>\""}], 
          "]"}]}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeList", "[", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"basisSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i1___Integer", "}"}], ",", 
             RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
           "nonQuaternions__"}], "]"}], "]"}], ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "nonQuaternions", "}"}], ",", "\"\<Quaternion\>\""}], 
         "]"}], ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"getGradeHelp", "[", 
         RowBox[{"Union", "[", 
          RowBox[{"{", 
           RowBox[{"i1", ",", "j1"}], "}"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", "False", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", 
           RowBox[{"OptionValue", "[", "gaQuaternionGradeIsZero", "]"}], 
           "]"}], ",", 
          RowBox[{"{", "0", "}"}], ",", 
          RowBox[{"getGradeHelp", "[", 
           RowBox[{"Union", "[", 
            RowBox[{"{", 
             RowBox[{"i1", ",", "j1"}], "}"}], "]"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"i1_", ",", "0"}], "]"}], ",", "any__"}], "]"}], "]"}], 
       "]"}], ":=", 
      RowBox[{"getGradeHelp", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"0", ",", "i1_"}], "]"}], ",", "any__"}], "]"}], "]"}], 
       "]"}], ":=", 
      RowBox[{"getGradeHelp", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"c_", "*", 
         RowBox[{"basisSymbol", "[", "ar__", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaGradeList", "[", 
        RowBox[{"basisSymbol", "[", "ar", "]"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "basisSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[194]:=",ExpressionUUID->"a9324bd4-cf17-4377-8267-91d6b66ce402"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGetGrade", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaVerify", "::", "obsolete"}], ",", "\"\<gaGetGrade[]\>\"", 
       ",", "\"\<gaGradeList[]\>\""}], "]"}], ";", "gaGradeList"}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[195]:=",ExpressionUUID->"29322bb0-1061-49be-a19d-3f168a8beac0"],

Cell["\<\
When computing directional derivatives we have to test if the second argument \
is vector. For convenience we define shortcut to test this\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4c898f74-0efd-484d-a8f0-4d0bb03ac6bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorQ", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGradeList", "[", "expr", "]"}], "===", 
    RowBox[{"{", "1", "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.852276477340486*^9, 3.852276573051301*^9}, {
   3.8522768472045*^9, 3.852276874010069*^9}, 3.8749865870376177`*^9},
 CellLabel->
  "In[196]:=",ExpressionUUID->"dfb27d82-fd59-4521-b786-57075af8ae74"],

Cell["Extract indices of multivectors", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"083c9b66-babf-4219-946d-3dd5d8a7a275"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaIndexList", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"basisSymbol", "[", 
          RowBox[{"in_mvDownUp", ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"in", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "basisSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexList", "[", "c_", "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "basisSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[197]:=",ExpressionUUID->"12a78ab1-a7c7-4c33-b26c-5f6c2b7f6881"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGetIndex", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaVerify", "::", "obsolete"}], ",", "\"\<gaGetIndex[]\>\"", 
       ",", "\"\<gaIndexList[]\>\""}], "]"}], ";", "gaIndexList"}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"a664e352-b281-4ecd-9b0f-507a41fe2fe3"],

Cell["\<\
Rules for operations (summation, multiplications, etc.) will be given after \
definition of  these operations. Here we only define how to extract  \
,,primitive\[CloseCurlyDoubleQuote] monomials.\
\>", "Text",ExpressionUUID->"a597b444-f8d8-46f3-9342-16293deb9f93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[199]:=",ExpressionUUID->"84181645-666d-4bbb-a3da-362a3bd0e096"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Products and expansions"
}], "Section",ExpressionUUID->"94c9fa84-bdb6-442c-a5ee-d807e475d8b6"],

Cell[TextData[{
 StyleBox["Step 3 ",
  FontWeight->"Bold"],
 " Once we know how to  manipulate index and other properties we can go up \
and define products, expansions and sorting of general multivectors. Also \
here is a place to define conversion between different internal \
representations since all needed commands are available at this point."
}], "Text",ExpressionUUID->"2689dbbd-e650-448b-9602-cff530178fa6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"(*", 
     RowBox[{"help", " ", "functions"}], "*)"}], 
    RowBox[{
    "gaCommutativeQ", ",", "gaCommutativeAllQ", ",", "gaSetNonCommutative", 
     ",", "gaSetCommutative", ",", "mvZeroGradeQ", ",", 
     "gaGeneralMultivector", ",", 
     RowBox[{"(*", "operations", "*)"}], "GeometricProduct", ",", "GP", ",", 
     "OuterProduct", ",", "OP", ",", "LeftContract", ",", "LC", ",", 
     "RightContract", ",", "RC", ",", "InnerProduct", ",", "IP", ",", 
     RowBox[{"(*", 
      RowBox[{"product", " ", "expansion"}], "*)"}], "gaProductExpand", ",", 
     "CoefficientFunction", ",", "gaPE", ",", "gaExpand", ",", "gaExpandedQ", 
     ",", "CollectCoefficients", ",", "gaProductPairExpand", ",", 
     "OmitGrades", ",", "gaGPPower", ",", "gaGPMatrixPower", ",", "gaOPPower",
      ",", "gaOPMatrixPower", ",", "gaGeometricMatrixProduct", ",", 
     "gaOuterMatrixProduct", ",", "gaInnerMatrixProduct", ",", "DorstProduct",
      ",", "DP", ",", 
     RowBox[{"(*", 
      RowBox[{
      "convert", " ", "between", " ", "internal", " ", "representations"}], 
      "*)"}], "gaAssociationRepresentation", ",", "gaPlainRepresentation", 
     ",", "gaAssociationTogether", ",", "gaComponentCoefficientAndBasisList", 
     ",", "gaComponentList", ",", "gaComponentCoefficientList", ",", 
     "gaGetMVComponents", ",", "gaCompactPlainRepresentation", ",", 
     "gaCompactAssociationRepresentation", ",", "gaRandomMultivector"}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"9a2c2391-ceee-499a-b866-8da8b79af742"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[201]:=",ExpressionUUID->"4fb5f8c7-76ef-42b6-a8e7-1218b29d146c"],

Cell["Usage messages", "Text",ExpressionUUID->"7c389cbc-04be-44b6-b532-be981c4a0f38"],

Cell[TextData[{
 "Do not use ** (",
 StyleBox["NonCommutativeMultiply[ ]",
  FontWeight->"Bold"],
 ") for geometric product!"
}], "Text",ExpressionUUID->"079f0941-ea2f-40ea-84ea-5d0e245b88d7"],

Cell[TextData[{
 "There is one more product, called the \[OpenCurlyDoubleQuote]Shuffle \
product\[CloseCurlyDoubleQuote], defined by Perti Lounesto in \
\[OpenCurlyDoubleQuote]Lectures on Clifford algebra\[CloseCurlyDoubleQuote] \
",
 ButtonBox["[RA-LoCGAaA] ",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 26, which has geometrical meaning for \[OpenCurlyDoubleQuote]meet\
\[CloseCurlyDoubleQuote], and denoted as \[Wedge].  It is not defined at the \
moment. "
}], "Text",ExpressionUUID->"fa4f22a7-e1ec-460a-be5c-68894c0fef32"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeQ[f] returns True if argument f is commutative (default \
for new symbol).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[203]:=",ExpressionUUID->"382ceea2-835b-4689-846a-4d7f7a06c67a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeAllQ[expr] returns True if all subparts of expr is \
commutative.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[204]:=",ExpressionUUID->"276b40a7-5ee4-41c3-9cc9-1efff3b5e528"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "::", "usage"}], "=", 
   "\"\<gaSetNonCommutative[heads] sets listed heads to be noncommuting \
quantities.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[205]:=",ExpressionUUID->"b0f86863-a141-42cb-af65-ee645befd0b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "::", "usage"}], "=", 
   "\"\<gaSetCommutative[head] sets listed heads to be commuting \
quantities.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"619bd5f9-aeca-4a9c-b6eb-358ff2cd95a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "::", "usage"}], "=", 
   "\"\<mvZeroGradeQ[expr] returns True if it can  detect that multivector is \
scalar. Important note. The answer \\\"False\\\" can indicate detection \
failure, therefore the command intended only for positive decision purposes, \
i.e. on return of True. An alternative is to use gaGradeList[ ].\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"c8662328-e4ed-4e92-9f3d-f0206af5add6"],

Cell[TextData[{
 " If we set {",
 StyleBox["Flat",
  FontWeight->"Bold"],
 "} Attribute to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 ", we get infinite recursion limit in ",
 StyleBox["MakeBoxes",
  FontWeight->"Bold"],
 ". Therefore we implement that property without the attribute."
}], "Text",ExpressionUUID->"11439d0f-cdff-4fba-ae18-3ac42b8fb419"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricProduct", "::", "usage"}], "=", 
   "\"\<GeometricProduct[a,b,...] denotes associative geometric product of \
multivectors a,b,... . Alias is GP[]. The StandardForm notation is \
\[GeometricProduct](unicode char \\ :0x26AC, in order to avoid clash with \
Mathematica EmptySmallCircle). For input use keyboard alias \[EscapeKey]gp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[208]:=",ExpressionUUID->"54aa302b-5363-4520-a4c2-8e02b738e841"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GP", "::", "usage"}], "=", "\"\<Alias for GeometricProduct\>\""}],
   ";"}]], "Input",
 CellLabel->
  "In[209]:=",ExpressionUUID->"cde335d4-f84d-4f98-af43-3dda2d30a506"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OuterProduct", "::", "usage"}], "=", 
   "\"\<OuterProduct[a,b,...] denotes outer (wedge) product of multivectors \
a,b,... . Alias is OP[]. The StandardForm notation is \[OuterProduct] \
\!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{RowBox[{\"unicode\", \" \", \
\"char\"}], \" \", \
\"\\\\:22CE\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->True,\
NumberMarks->True],FullForm]\)). For input use keyboard alias \[EscapeKey]op\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[210]:=",ExpressionUUID->"cacefd1b-9c65-4bea-ad17-1894d26f74da"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OP", "::", "usage"}], "=", "\"\<Alias for OuterProduct\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[211]:=",ExpressionUUID->"bf26f563-ee7a-4ca2-9c2b-e7cd9eb80618"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InnerProduct", "::", "usage"}], "=", 
   "\"\<InnerProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, inner product turns into scalar product. \
Alias is IP[]. The StandardForm notation is \[InnerProduct] \
\!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{\"unicode\", \" \", \"char\", \" \
\", \"\\\\[InnerProduct]\"}]}],ShowSpecialCharacters->False,\
ShowStringCharacters->True,NumberMarks->True],FullForm]\)).\[IndentingNewLine]\
For input use keyboard alias  \[EscapeKey]ip\[EscapeKey]. UnicodeSymbols.tr \
defines the following operation precedences: NonCommutativeMultiply (**, \
highest), Times (*, Space), RightContract (\[RightContract]), LeftContract (\
\[LeftContract]), InnerProduct (\[InnerProduct]), DorstProduct (\
\[DorstProduct]), OuterProduct (\[OuterProduct], bad representation in text \
cells, input cells are ok.), GeometricProduct(\[GeometricProduct]), Plus \
(lowest).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[212]:=",ExpressionUUID->"f632f8ba-8df1-45aa-9fcb-087a04a665ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IP", "::", "usage"}], "=", "\"\<Alias for InnerProduct\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[213]:=",ExpressionUUID->"b2e9e164-7893-4ec7-93df-9639fdb7f30a"],

Cell[TextData[{
 "Unfortunately keyboard aliases  \[EscapeKey]lc\[EscapeKey] and   \
\[EscapeKey]rc\[EscapeKey] are already in use by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"5cfd98e0-5b33-4cba-91ed-f6a7eef4b381"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LeftContract", "::", "usage"}], "=", 
   "\"\<LeftContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[a]>=mvGrade[b] result is multivector of grade mvGrade[a]-mvGrade[b] \
and zero otherwise. Alias is LC[]. The StandardForm notation is \
\[LeftContract] \!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{\"unicode\", \" \
\", \"char\", \" \", \
\"\\\\[LeftContract]\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->\
True,NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use \
keyboard alias \[EscapeKey]il\[EscapeKey]. UnicodeSymbols.tr defines the \
following operation precedences: NonCommutativeMultiply (**, highest), Times \
(*, Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[214]:=",ExpressionUUID->"25d12f0b-193b-4dda-9018-55f5b5c5350b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LC", "::", "usage"}], "=", "\"\<Alias for LeftContract\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[215]:=",ExpressionUUID->"78bddc09-a55d-42b7-bd0a-93e412724c92"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RightContract", "::", "usage"}], "=", 
   "\"\<RightContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[b]>=mvGrade[a] result is multivector of grade mvGrade[b]-mvGrade[a] \
and zero otherwise. Alias is RC[]. The StandardForm notation is \
\[RightContract] \!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{\"unicode\", \" \
\", \"char\", \" \", \
\"\\\\[RightContract]\"}]}],ShowSpecialCharacters->False,ShowStringCharacters-\
>True,NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use \
keyboard alias  \[EscapeKey]ir\[EscapeKey]. UnicodeSymbols.tr defines the \
following operation precedences: NonCommutativeMultiply (**, highest), Times \
(*, Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[216]:=",ExpressionUUID->"19610402-6577-4a88-a56e-6a14d59fbaab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RC", "::", "usage"}], "=", "\"\<Alias for RightContract\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[217]:=",ExpressionUUID->"4c9368d7-9c75-41db-b42d-dfe2a262006e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DorstProduct", "::", "usage"}], "=", 
   "\"\<DorstProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, Dorst product turns into scalar product. \
Alias is DP[]. The StandardForm notation is \[DorstProduct] \
\!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{RowBox[{\"unicode\", \" \", \
\"char\"}], \" \", \
\"\\\\[DorstProduct]\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->\
True,NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use \
keyboard alias  \[EscapeKey]dp\[EscapeKey]. UnicodeSymbols.tr defines the \
following operation precedences: NonCommutativeMultiply (**, highest), Times \
(*, Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[218]:=",ExpressionUUID->"8ba322de-68c1-4533-9dee-5bebada78e8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DP", "::", "usage"}], "=", "\"\<Alias for DorstProduct\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[219]:=",ExpressionUUID->"4ca1862a-2051-42e8-a19d-aba51db598be"],

Cell["\<\
Geometric product implementation. Keep these functions in private context, \
because they are only used internally.\
\>", "Text",ExpressionUUID->"8de6acdf-886e-4d48-89a5-8e1f949a83ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMu", "::", "usage"}], "=", 
   "\"\<mvMu[i_Integer?NonNegativeQ,J_List] counts elements of subset J that \
are greater than nonnegative integer i. J is subset of natural numbers. \
\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"6244ddc6-32c0-4c53-8d69-e3f15d48baaa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMuS", "::", "usage"}], "=", 
   "\"\<mvMuS[I_List,J_List] for each i in I counts elements of subset J that \
are greater of i and then adds all these numbers. Uses function mvMu to count \
elements for each i.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"d4efee08-5c33-490f-aa4b-e3676f2ec224"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "::", "usage"}], "=", 
   "\"\<productSignatureMap[I_List,J_List,GeometricProduct|OuterProduct,\
algebra___] provides correct sign for geometric product or outer product (it \
is indicated by third argument) of two multivectors. Assumes that indices of \
base vectors are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"e576a8f3-5f9a-4bf5-a487-90530cc1c5bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAltProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAltProductSignatureMap[I_List,J_List] provides correct sign for \
alternating product of two multivectors. Assumes that indices of base vectors \
are properly ordered. Currently is not used by any other function.\>\""}], 
  ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"2c7588cd-daa2-4ae4-b955-398e750eb8b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "::", "usage"}], "=", 
   "\"\<For developers. mvSetSymmetricDifference[I_List,J_List] gives \
set-symmetric difference of sets I and J.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"818295e0-afaa-4c16-a920-a5b8c34faed1"],

Cell["Geometric product expansion", "Text",ExpressionUUID->"fe6d1f4e-70ad-48d9-a714-01f426bdacb8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "usage"}], "=", 
   "\"\<gaProductExpand[expr_,opts___] expands geometric algebra products. \
Option Except->{InnerProduct,OuterProduct,LeftContract,RightContract} forbids \
expansion of listed products. Option CoefficientFunction->Expand expands each \
coefficient before collecting. The CoefficientFunction option might \
significantly speedup or slowdown calculations depending on input how \
(symbolic) coefficients behaves on applying the provided CoefficientFunction \
function. The LeafCount of obtained result might also differ evry \
significantly. Instead of Expand any pure function can be applied here. \
Working with numerical coefficients choice CoefficientFunction->Identity is \
usefull. The main command gaProductExpand actually did't expand the given \
expression. It only splits expression in pairs of products, and then calls \
low level command gaProductPairExpand[], which do implements the expansion. \
The default option Method->Automatic select the actual expansion method  \
(\\\"RealTimePairProduct\\\" or \\\"PrecomputedPairProduct\\\") which will be \
used in gaProductPairExpand[].  gaProductPairExpand[] has more expansion \
options which can be directly refered in order to get full expansion control \
over pair of product. To convert expression into GeometricProduct use \
gaToGeometricProduct[ ].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CoefficientFunction", "::", "usage"}], "=", 
   "\"\<Option for gaProductExpand and gaComponentList, which performs given \
pure function on collected coefficients of multiplied terms. \
CoefficientFunction->Identity or CoefficientFunction->Expand are typical, \
Thought other choices like CoefficientFunction->(Simplify[Togeter[#]]&) are \
valid.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "::", "usage"}], "=", 
   "\"\<gaExpand[expr] repeatidly applies Expand and gaProductExpand commands \
until result stop changing. Single Expand[gaProductExpand[ ]] should be \
enought and is recommended. If you are forced to use gaExpand[], it means \
that gaProductExpand[ ] implementation is still not perfect.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[220]:=",ExpressionUUID->"bd8baedf-512f-4065-a614-d91ddeef8e2a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "usage"}], "=", 
   "\"\<gaProductPairExpand[h[mv1_,mv2_],opts___] is a low level expansion \
command, which implements true expansion of product h of single pair (!) of \
arguments mv1 and mv2. It should not be used directy, instead use higher \
level command gaProductExpand[]. The gaProductPairExpand[ ] has three \
expansion methods implemented. The method \\\"ConvolutionPairProduct\\\" is \
fastest in the traditional Plus representation (default). If your need more \
speed, then first convert expression into gaAssociationRepresentation \
internal representation. The method \\\"RealTimePairProduct\\\"  works fast \
for small number of terms. When computation of some grades needs to be \
avoided, then method \\\"PrecomputedPairProduct\\\" can be used, unless \
algebra is large (vector spacedimension 9 or more). It first precomputes the \
product of two general formal multivectors symbolically (using the previous \
method) and then replaces coefficients of particular input inside \
symbolically precomputed expansion.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OmitGrades", "::", "usage"}], "=", 
   "\"\<OmitGrades->grade or OmitGrades->{grade1, grade2,...} is an option \
for gaProductExpand with the \\\"PrecomputedPairProduct\\\" Method, which \
allows to avoid computation of specified grades in the productof single pair \
of multivectors. Default is Method->{\\\"PrecomputedPairProduct\\\", \
OmitGrades->{}}.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"43efd9c9-8ba3-4ca5-a2cb-0a263cd8103f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPE", "::", "usage"}], "=", 
   "\"\<Alias for gaProductExpand[ ].\>\""}], ";"}]], "Input",
 CellLabel->
  "In[225]:=",ExpressionUUID->"60ddf78d-0917-4f73-aa31-734071e535cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpandedQ", "::", "usage"}], "=", 
   "\"\<Predicate that checks if expression is in expanded form.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[226]:=",ExpressionUUID->"8051c5e2-dbe7-4c14-9ed4-10c564d00d4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "::", "usage"}], "=", 
   "\"\<gaGPPower[x,n_Integer] computes geometric product of n elements  x \
\[GeometricProduct] x \[GeometricProduct] ... \[GeometricProduct] x.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[227]:=",ExpressionUUID->"7fb7b715-f418-4107-8bce-b2959ec56081"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaGPMatrixPower[X,n_Integer] computes product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[228]:=",ExpressionUUID->"ab5f453b-c100-42e7-a900-d2e252603db3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "::", "usage"}], "=", 
   "\"\<gaOPPower[x,n_Integer] computes outer product of n elements  x  \
\[OuterProduct] x  \[OuterProduct] ... \[OuterProduct] x.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[229]:=",ExpressionUUID->"bad5055a-8f4b-4cc2-bb63-9a9c63f63a31"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaOPMatrixPower[X,n_Integer] computes  product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[230]:=",ExpressionUUID->"d1ae9238-23a8-40a9-bfda-9fab45e9ab7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaGeometricMatrixProduct[A,B,...] computes  product of matrices A and \
B, elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[231]:=",ExpressionUUID->"262e5730-f1ac-4982-99b2-6421312f69c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaOuterMatrixProduct[A,B,...] computes  product of matrices A and B, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[232]:=",ExpressionUUID->"97da4b43-9336-4e74-89f4-6ca4de750221"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaInnerMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaInnerMatrixProduct[A,B,...] computes  product of matrices A and B, \
elements of which are multivectors. Matrix elements are multiplied using \
Inner product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[233]:=",ExpressionUUID->"67229e72-1ff1-4c5d-9a00-9ebaa5da759f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationRepresentation", "::", "usage"}], "=", 
   "\"\<\!\(\*StyleBox[\"gaAssociationRepresentation\",FontWeight->\"Bold\"]\)\
\!\(\*StyleBox[\"[\",FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"expr_\",\
FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"]\",FontWeight->\"Bold\"]\) converts \
multivectors in the expression expr to Mathematica's Associations. The \
association (associative array) representation, (denoted as e[<| keys -> \
values|>, algebra, ___]) is extremely convenient (and fast) in manipulating \
multivector structure. In future it will be a preferable internal format for \
multivector in orthonormal base. The other way convertion can be obtained \
with gaPlainRepresentation[ ].\>\""}], ";"}]], "Input",
 CellLabel->
  "In[234]:=",ExpressionUUID->"d13c1d7a-f43c-4b53-80b8-a8d5f11ece9c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPlainRepresentation", "::", "usage"}], "=", 
    "\"\<\!\(\*StyleBox[\"gaPlainRepresentation\",FontWeight->\"Bold\"]\)\!\(\
\*StyleBox[\"[\",FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"expr_\",FontWeight->\
\"Bold\"]\)\!\(\*StyleBox[\"]\",FontWeight->\"Bold\"]\) converts from \
internal Association format to simple additive format, which is much more \
convenient to read and input.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationTogether", "::", "usage"}], "=", 
   "\"\<gaAssociationTogether[expr] rewrites multiple base elements, which \
are in Association representations as a single Association.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[235]:=",ExpressionUUID->"f8c87548-a7e8-450e-8550-38af95f59cd4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeneralMultivector", "::", "usage"}], "=", 
   "\"\<gaGeneralMultivector[coef_,al_Cl,grade_:{}] generates multivector of \
the alggebra al with symbolic coefficients named as coef[_integer] of \
specified grade. If grade list is empty {} or All all grades are generated.\>\
\""}], ";"}]], "Input",
 CellLabel->
  "In[237]:=",ExpressionUUID->"ade821c9-0118-4c3f-b1b5-900b916ca986"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomMultivector", "::", "usage"}], "=", 
   "\"\<gaRandomMultivector[al_Cl,grade_:{},Range->{min,max}] generates \
random multivector of the algebra al with random integer coefficients in the \
range Specified by option Range->{-10,10} (default). If grade list is empty \
{} or All all grades of MV are generated.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[238]:=",ExpressionUUID->"641c5424-2cf6-4635-8177-76013c468bbe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "::", "usage"}], "=", 
   "\"\<gaComponentCoefficientAndBasisList[expandedExpr,OptionsPattern[{\
gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\",CoefficientFunction\
\[Rule]Expand}]] or gaComponentCoefficientAndBasisList[expandedExpr, \
basisElems_List]] output {components_List, basis_List}, where the list \
components are components of MV with respect to basis, which is listed in \
requested ordering (except in the case with explicit basis syntax, which then \
remain unchanged).\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentList", "::", "usage"}], "=", 
   "\"\<Returns Times product of both list given by \
gaComponentCoefficientAndBasisList[ ].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentCoefficientList", "::", "usage"}], "=", 
   "\"\<Returns first list given by gaComponentCoefficientAndBasisList[ \
]\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[239]:=",ExpressionUUID->"b27850dd-40d0-404c-b013-d330db6787df"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactPlainRepresentation", "::", "usage"}], "=", 
   "\"\<gaCompactPlainRepresentation[expr, opt:gaNonCommutativeMonomialOrder\
\[Rule]\\\"InvDeg[Lex]\\\"] rewrites expr using compact index representation. \
In particular it replaces mvDownUp[{do__Integer},{}]:> mvDownUp[integer,0], \
where integer enumerates basis element in the gaNonCommutativeMonomialOrder \
ordered orthonormal basis.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[242]:=",ExpressionUUID->"0e023f4d-15c7-4116-8afa-39d964b58fcd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactAssociationRepresentation", "::", "usage"}], "=", 
   "\"\<gaCompactAssociationRepresentation[expr, \
opt:gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\"] rewrites expr \
using compact index representation inside Association representations. In \
particular it replaces keys mvDownUp[{do__Integer},{}]:> mvDownUp[integer,0], \
where integer enumerates basis element in the gaNonCommutativeMonomialOrder \
ordered orthonormal basis.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[243]:=",ExpressionUUID->"cc7660da-f93a-4b11-98b7-294a8745ff3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[244]:=",ExpressionUUID->"ae83877f-7cbd-4270-93d0-66d35f040385"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation of non-commutativity and noncommutative element detection"
}], "Subsection",ExpressionUUID->"84a94e28-33d9-4608-9ab2-3fba6764580b"],

Cell[TextData[{
 "Common settings.  Explicitly declare all symbols i.e., ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ",",
 StyleBox["Power",
  FontWeight->"Bold"],
 ",etc... to be commutative by default. "
}], "Text",ExpressionUUID->"7f3389da-126f-43d9-9036-906ee06b1009"],

Cell[TextData[{
 "The gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " only tests commutativity of  the expressions head. The gaCommutativeAllQ",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "investigates entire expression looking at heads and arguments. If any part \
contains noncommutative head, result is \[OpenCurlyDoubleQuote]False\
\[CloseCurlyDoubleQuote]. So, gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " \[Subset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". We can define even more powerful operator ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 ", which will",
 StyleBox[" ",
  FontWeight->"Bold"],
 "look  if expression is a scalar (i.e. look for some specific inner products \
of multivectors).  Note that ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " might return",
 StyleBox[" True",
  FontWeight->"Bold"],
 " for expressions, which has ",
 StyleBox["noncommutative",
  FontWeight->"Bold"],
 " subexpressions! So  ",
 StyleBox["mvZeroGradeQ[ ] ",
  FontWeight->"Bold"],
 "\[NotSubset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"e77a1ef4-dc24-4e58-b49e-b1082062ee07"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeQ", "[", "_", "]"}], ":=", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{"_", "?", "NumericQ"}], "]"}], ":=", "True"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeAllQ", "[", "s_Symbol", "]"}], ":=", 
    RowBox[{"gaCommutativeQ", "[", "s", "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"gaCommutativeAllQ", "[", 
      RowBox[{"f_", "[", "x___", "]"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"gaCommutativeQ", "[", "f", "]"}], ",", 
       RowBox[{"Apply", "[", 
        RowBox[{"And", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"gaCommutativeAllQ", ",", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}]}],
     ";"}], "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"replace", " ", "by", " ", "AllTrueQ"}], ",", " ", 
    RowBox[{
    "which", " ", "can", " ", "automatically", " ", "exit", " ", "on", " ", 
     "detection", " ", "of", " ", "False"}], ",", " ", 
    RowBox[{"needs", " ", "Mma", " ", "10.1", " ", "version"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeAllQ", "[", 
     RowBox[{"f_", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaCommutativeQ", "[", "f", "]"}], ",", 
      RowBox[{"AllTrue", "[", 
       RowBox[{
        RowBox[{"{", "x", "}"}], ",", "gaCommutativeAllQ"}], "]"}], ",", 
      "False"}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Derivatives", " ", "of", " ", "MV", " ", "are", " ", "handled", " ", 
     "separatelly"}], ",", " ", 
    RowBox[{"because", " ", 
     RowBox[{"gaCommutativeAllQ", "[", " ", "]"}], " ", "do", " ", "not", " ",
      "check", " ", "for", " ", "more", " ", "complex", " ", "structures", 
     " ", "like", " ", 
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "[", "y", "]"}]}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Derivative", "[", "_", "]"}], "[", "x___", "]"}], "[", "y___", 
     "]"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "y", "}"}]}], "]"}]}], ",", "False"}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[245]:=",ExpressionUUID->"d231b95c-c852-4d7b-8515-f1ba20bcb4b6"],

Cell["Set commutative and noncommutative operators.", "Text",ExpressionUUID->"602a1fe4-1181-4333-983b-75d21ac46128"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "False"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "False"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "True"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "True"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{
    "NonCommutativeMultiply", ",", "GeometricProduct", ",", "OuterProduct", 
     ",", "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
     "GP", ",", "OP", ",", "IP", ",", "LC", ",", "RC"}], "}"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[250]:=",ExpressionUUID->"7c656424-e49d-41fb-b7c5-184c4a404fcb"],

Cell["Set commutative and non-commutative objects. ", "Text",ExpressionUUID->"c14d5ef7-579f-4e65-9966-850bc9bbd4b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "[", 
   RowBox[{
    RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}], ",", "MV"}], 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[253]:=",ExpressionUUID->"228e3b1f-9bf9-486b-83ac-3b8160bc593f"],

Cell[TextData[{
 "Generally  ",
 StyleBox["False",
  FontWeight->"Bold"],
 "  of ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " can mean detection failure, even when expression do is scalar (say in the \
case  complicated inner product of multivectors). As a result it cannot \
ensure that expression grade is zero, so only positive answers make sense and \
can be used as a test. Use gaGradeList",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 " if you really want to know expression grade."
}], "Text",ExpressionUUID->"c9725c37-2783-4ca1-a0ab-48ae74b865da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"additionalTestFunction", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"additionalTestFunction", "[", "expr_", "]"}], ":=", "False"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[254]:=",ExpressionUUID->"bc9e2474-ae35-44e6-b03e-12d73e0fe706"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"gaCommutativeAllQ", "[", "expr", "]"}], ",", "True", ",", 
     RowBox[{"additionalTestFunction", "[", "expr", "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[256]:=",ExpressionUUID->"fdc642c3-5ee6-4e9f-93f8-07493a8e4713"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Grade, index extraction from general expressions"
}], "Subsection",ExpressionUUID->"c4a8e051-e144-4158-b2de-282d927fc285"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for Times, Plus and non-elements"
}], "Subsubsection",ExpressionUUID->"8d2c1f00-591b-4b6d-bce1-3979b151deba"],

Cell["\<\
Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"33d1fd10-1528-43a7-a3cc-6765debe4dea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGradeList", "[", 
      RowBox[{"_", "?", "NumericQ"}], "]"}], "]"}], ":=", 
    RowBox[{"{", "0", "}"}]}], " ", ";"}], 
  RowBox[{"(*", 
   RowBox[{"first", " ", "for", " ", "speed"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGradeList", "[", "expr_", "]"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"{", "0", "}"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "only", " ", "multivectors", " ", "are", " ", "graded", " ", 
        "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGradeList", "[", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "d__"}], "]"}], "]"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"gaGradeList", "[", 
         RowBox[{"Times", "[", "d", "]"}], "]"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "bs"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", " ", "expression", " ", "is", " ", "expanded"}], ",", " ", 
    RowBox[{"then", " ", 
     RowBox[{"(", 
      RowBox[{
      "unless", " ", "expr", " ", "contains", " ", "GA", " ", "products"}], 
      ")"}], " ", "Plus", " ", "means", " ", "that", " ", "in", " ", 
     "general", " ", "we", " ", "have", " ", "a", " ", "non", " ", 
     "homogeneus", " ", "multivector"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGradeList", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaGradeList", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}], "]"}], "/;", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{"(", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract"}], ")"}], ",", 
       RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", " ", "expression", " ", "is", " ", "expanded"}], ",", " ", 
    RowBox[{
    "but", " ", "Plus", " ", "still", " ", "contains", " ", "GA", " ", 
     "product"}], ",", " ", 
    RowBox[{
    "we", " ", "need", " ", "gaPE", " ", "to", " ", "be", " ", "sure"}], ",", 
    " ", 
    RowBox[{
    "since", " ", "some", " ", "grades", " ", "after", " ", "expanion", " ", 
     "can", " ", "cancel"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGradeList", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "expandedExpr", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"expandedExpr", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"Plus", "[", "x", "]"}], "]"}], "]"}]}], ")"}], "===", 
         RowBox[{"Plus", "[", "x", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Union", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"gaGradeList", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "expandedExpr", "]"}], "===", "Plus"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"gaGradeList", "/@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "expandedExpr"}], ")"}]}], "]"}], "]"}], 
          ",", 
          RowBox[{"gaGradeList", "[", "expandedExpr", "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"sometimes", " ", "failed", " ", "si"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGradeList", "[", 
       RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"gaGradeList", "/@", 
         RowBox[{"{", "x", "}"}]}], "]"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "[", "x", "]"}], "]"}], "===", 
       RowBox[{"Plus", "[", "x", "]"}]}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGradeList", "[", 
       RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaGradeList", "[", 
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "[", "x", "]"}], "]"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "[", "x", "]"}], "]"}], "=!=", 
       RowBox[{"Plus", "[", "x", "]"}]}]}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeList", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGradeList", "[", 
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[257]:=",ExpressionUUID->"31099284-9089-4878-b327-9dc5d024f9b7"],

Cell["\<\
When computing GA expressions with quaternionic coefficients, don\
\[CloseCurlyQuote]t  pay attention to quaternions grade.\
\>", "Text",ExpressionUUID->"56696ba8-544a-453f-85ad-b4720fa5974a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGradeList", "[", 
       RowBox[{"prod_", "[", "args__", "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"prod", "@@", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "args", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"__", ",", "\"\<Quaternion\>\""}], "]"}]}], "]"}]}], 
        "]"}], ")"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"prod", ",", 
          RowBox[{"(", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}], ")"}]}], "]"}], "&&", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "args", "}"}], ",", "\"\<Quaternion\>\""}], "]"}]}]}],
        ")"}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[262]:=",ExpressionUUID->"c192329a-426f-4703-acf6-304e74fa50a5"],

Cell["Extracting all indices from all terms in a sum", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"5dd01ae6-8476-4293-8b60-30b6406fab22"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"gaIndexList", "[", 
    RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
  RowBox[{"Union", "@@@", 
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{"gaIndexList", "/@", 
      RowBox[{"{", "x", "}"}]}], ",", "mvDownUp"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[263]:=",ExpressionUUID->"40dede22-7242-4794-9a65-1e0b70e708b3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for OuterProduct"
}], "Subsubsection",ExpressionUUID->"c536075c-62a4-487c-8311-242064e6ecfb"],

Cell[TextData[{
 "Rules for ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ". It is assumed, that multivectors denoted by different letters are \
linearly independent. ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " itself ensures that there are no two identical vectors in ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " . All grades which are higher than vector space dimension are removed. "
}], "Text",ExpressionUUID->"b3cb14e0-eae7-4a61-92f5-005007cdf060"],

Cell[TextData[{
 "Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values. Note: gaGradeList",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " result depends on value of ",
 StyleBox["gaRunningAlgebra!",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"aa4d26bf-8478-4974-85df-1cb202f726d8"],

Cell["\<\
The general definition was suppressed, because it interfered with conversion \
into Association form. Hold it until gaAccociationForm will be improved.\
\>", "Text",ExpressionUUID->"73339649-8df3-4d46-8c39-6bdaab3888f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGradeList", "[", 
     RowBox[{"OuterProduct", "[", "x__", "]"}], "]"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Outer", "[", 
        RowBox[{"Plus", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"(", 
           RowBox[{"gaGradeList", "/@", 
            RowBox[{"{", "x", "}"}]}], ")"}]}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", ">", 
         RowBox[{"gaDimensionOfVectorSpace", "[", "gaRunningAlgebra", "]"}]}],
         "&"}], ")"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"1f8a9c8e-170e-490c-8138-411ae589c5b9"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for LeftContract, RightContract and InnerProduct"
}], "Subsubsection",ExpressionUUID->"9ca6c5e4-41b7-43e3-83c6-3953203d92f9"],

Cell["Not an easy task.", "Text",ExpressionUUID->"1f6c4d24-4f45-43a1-a7c6-50ed0a917256"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Taking parts of multivector "
}], "Subsection",ExpressionUUID->"a62900ed-b279-404b-81d8-85f9b651fb39"],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaGetMV",
 "[ ]",
 " extract from expression part of specified grade"
}], "Subsubsection",ExpressionUUID->"0a543b84-2e7f-434c-b124-a6be086d30ff"],

Cell[TextData[{
 StyleBox[" gaGetMV[ ]",
  FontWeight->"Bold"],
 " takes multivector of specified grade or index pattern (not the grade or \
index itself !) . First specific implementation for Association \
implementation. "
}], "Text",ExpressionUUID->"9094dc92-145d-45cd-aa4f-848ea85d5830"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"working", " ", "with", " ", "grades"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], 
          "]"}], ":=", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"res", "=", 
             RowBox[{"KeySelect", "[", 
              RowBox[{"arg", ",", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", "n", "}"}], ",", 
                  RowBox[{"(", 
                   RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ")"}]}], "]"}],
                 "&"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"res", "===", 
              RowBox[{"Association", "[", "]"}]}], ",", "0", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"res", ",", "other"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"res", "=", 
             RowBox[{"KeyTake", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"{", "ind", "}"}]}], "]"}]}], "}"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"res", "===", 
              RowBox[{"Association", "[", "]"}]}], ",", "0", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"res", ",", "other"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[264]:=",ExpressionUUID->"d85816dd-3d3a-4cf1-b21b-b92016e63bad"],

Cell["\<\
(the latest not yet implemented, may need to set Hold Rest attribute). 
If no multivector of requested grade is found return zero. Serve positive {} \
and negative Not[{}] requests.\
\>", "Text",ExpressionUUID->"e56b2386-5abf-432e-9968-b774c655fe62"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"working", " ", "with", " ", "grades"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGradeList", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "working", " ", "with", " ", "base", " ", "element", " ", "for", " ", 
       "convenience"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[265]:=",ExpressionUUID->"d082948a-1fd2-4ddf-92fe-e85f46d3e628"],

Cell["Take grades of multivector list", "Text",ExpressionUUID->"94a1a76b-c4d8-4d69-9b42-bcaae70300eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"{", "expr___", "}"}], ",", "what_"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"gaGetMV", "[", 
       RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", 
     RowBox[{"{", "expr", "}"}]}], "/;", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", "expr", "}"}], ",", "gaGetMV", ",", 
      RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"Plus", "[", "expr__", "]"}], ",", "what_"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"gaGetMV", "[", 
       RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", 
     RowBox[{"Plus", "[", "expr", "]"}]}], "/;", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", "expr", "}"}], ",", "gaGetMV", ",", 
      RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[266]:=",ExpressionUUID->"34801117-5e83-4a45-8694-4522fc882b5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{"expr_", ",", "what_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"gaPE", "[", "expr", "]"}], ",", "what"}], "]"}], ")"}], "/;", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
            "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|",
              "LeftContract", "|", "RightContract"}], ")"}], "[", 
           RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}], ")"}],
       "&&", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", "gaGetMV", ",", 
        RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]}]}], ";"}]}]], "Input",\

 CellLabel->
  "In[268]:=",ExpressionUUID->"98902828-a1f8-441c-b9ac-5d5efdd3a09c"],

Cell["Scalar part projection and expressions without indices", "Text",ExpressionUUID->"87e20aac-b4e0-4478-b9cd-428798323f78"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", "0"}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"2f999dd2-eaba-410a-900a-557f15bab918"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "ind", "}"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"Not", "[", 
       RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "ind", "}"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], "]"}], ",", "a", ",", "0"}], "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[270]:=",ExpressionUUID->"64a44bcd-e25a-47e7-a838-0d4b5bf79efc"],

Cell["\<\
Without blocking baseSymbol, the below cell do not work properly, because \
baseSymbol[mvDownUp[{},{}],__] is replaced by 1.!!!\
\>", "Text",ExpressionUUID->"f7d2ad1e-e704-4011-aded-ed43a0a04307"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"a_", ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "baseSymbol", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "be", "}"}], ",", 
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}]}], 
           ",", "a", ",", "0"}], "]"}]}], "]"}], "/;", 
       RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"a_", ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "baseSymbol", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "be", "}"}], ",", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}], 
           ",", "a", ",", "0"}], "]"}]}], "]"}], "/;", 
       RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[272]:=",ExpressionUUID->"72a59e0c-b446-4a14-b983-25b0993e5cf2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Implementation", " ", "of", " ", 
     RowBox[{"Not", "[", 
      RowBox[{"{", "grades", "}"}], "]"}]}], ":", " ", 
    RowBox[{
    "find", " ", "all", " ", "possible", " ", "grades", " ", "and", " ", 
     "then", " ", "use", " ", "complement"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}],
         "]"}], ":=", 
       RowBox[{"expr", "/;", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", 
            RowBox[{"MV", "|", "baseSymbol"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
          RowBox[{"Not", "[", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", "0"}], "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", "n__Integer", "}"}], "]"}]}], "]"}], "]"}], ":=", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"gaGradeList", "[", "expr", "]"}], ",", 
           RowBox[{"{", "n", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Return", " ", "0", " ", "if", " ", "no", " ", "grade", " ", 
        "listed"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", "0"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellLabel->
  "In[273]:=",ExpressionUUID->"26d193fc-3b02-4df0-b311-f19935f59b91"],

Cell["Commuting factors out, last remains", "Text",ExpressionUUID->"cf41bda3-7b88-4d6d-b5eb-d6a8f7d26924"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"a_", ",", "b__"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"Times", "[", "b", "]"}], ",", 
       RowBox[{"{", "n", "}"}]}], "]"}]}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[274]:=",ExpressionUUID->"6dd52d31-2b03-438a-af8b-7767510b45f8"],

Cell[TextData[{
 StyleBox["Quaternionic coefficients. Experimental approach.",
  FontColor->RGBColor[1, 0.5, 0]],
 " When we have MV with quaternionic coefficients (this is needed, for \
example,  to convert MV with quaternionic coefficients to matrix \
representation, i.e.  gaToMatrixRepresentation[ ]), we simply move \
quaternionic coefficients out. At the moment this is a last rule is \
associated with gaGetMV[ ]  (not with any of geometric products: can change \
in future). We simply separate quaternions from other basis elements and call \
gaGetMV[ ] on remaining elements. ",
 StyleBox["This rule is dangerous since can easily result into infinite \
recursion!!! ",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",ExpressionUUID->"9816a67c-1d44-4372-a9d7-a7aeb863ddf5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"prod_", "[", "args__", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"prod", "@@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"prod", "@@", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"{", "args", "}"}], ",", 
             RowBox[{
              RowBox[{"baseSymbol", "[", "any__", "]"}], "/;", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "any", "}"}], ",", "\"\<Quaternion\>\""}], 
               "]"}]}]}], "]"}]}], ",", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"prod", "@@", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"{", "args", "}"}], ",", 
               RowBox[{"baseSymbol", "[", 
                RowBox[{"__", ",", "\"\<Quaternion\>\""}], "]"}]}], "]"}]}], 
            ",", 
            RowBox[{"{", "n", "}"}]}], "]"}]}], "}"}]}], ")"}], "/;", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"prod", ",", 
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}]}], "]"}], "&&", 
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"prod", "[", "args", "]"}], ",", "\"\<Quaternion\>\""}], 
         "]"}]}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[275]:=",ExpressionUUID->"793d6210-451c-46d4-b23d-1995a2bf428f"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaComponentList[ ] splits expanded expression into list of components"
}], "Subsubsection",ExpressionUUID->"4cf3f2c0-5917-4164-bf4f-cdca7c184238"],

Cell["\<\
Help function, which does all the job. All other functions below supply data \
for this function\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"85a73e5b-737b-413b-a7a1-f34be40bed0c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"componentCoefficientAndBasisListHelp", "[", 
   RowBox[{"expr_", ",", "theBasis_List", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<CoefficientArrays\>\"", ",", "coeffFunc_", ",", "quiet_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"coeffs", ",", "scalarPos", ",", "unitPosition"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"PolynomialQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"theBasis", ",", "1"}], "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"We", " ", 
          RowBox[{"don", "'"}], "t", " ", "want", " ", "SparseArray"}], ",", 
         " ", 
         RowBox[{"therefore", " ", "Normal"}]}], "*)"}], " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"unitPosition", "=", 
            RowBox[{"Position", "[", 
             RowBox[{"theBasis", ",", "1", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}], "===", "1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"coeffs", "=", 
          RowBox[{"Normal", "[", 
           RowBox[{"CoefficientArrays", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"Delete", "[", 
              RowBox[{"theBasis", ",", 
               RowBox[{"unitPosition", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"unitPosition", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "unit", " ", "is", " ", "absent", " ", "in", " ", 
             "the", " ", "basis"}], ",", " ", 
            RowBox[{
            "we", " ", "want", " ", "to", " ", "output", " ", "zeroes", " ", 
             "at", " ", "all", " ", "basis", " ", "elements", " ", "and", " ",
              "return", " ", "the", " ", "initial", " ", "expression", " ", 
             "in", " ", "as", " ", "a", " ", "first", " ", "element", " ", 
             "of", " ", "list"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"Alternatives", "@@", "theBasis"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"coeffs", "=", 
              RowBox[{"{", 
               RowBox[{"expr", ",", 
                RowBox[{"Table", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"{", 
                   RowBox[{"Length", "[", "theBasis", "]"}], "}"}]}], "]"}]}],
                "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"coeffs", "=", 
              RowBox[{"Normal", "[", 
               RowBox[{"CoefficientArrays", "[", 
                RowBox[{"expr", ",", "theBasis"}], "]"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{
          "gaComponentCoefficientAndBasisList", "::", "notpolynomial"}], ",", 
          "expr", ",", "theBasis"}], "]"}], ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"GeometricAlgebra`p`printDetails", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Unit at basis position:\>\"", ",", "unitPosition"}], 
          "}"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "insert", " ", "scalar", " ", "at", " ", "unit", " ", "position"}], 
       ",", " ", 
       RowBox[{
       "if", " ", "no", " ", "scalar", " ", "coefficient", " ", "at", " ", 
        "basis"}], ",", " ", 
       RowBox[{"no", " ", "action"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"unitPosition", ",", 
       RowBox[{"{", "1", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"unit", " ", "at", " ", "first", " ", "position"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"coeffFunc", "/@", 
           RowBox[{"Flatten", "[", "coeffs", "]"}]}], ")"}], ",", 
         "theBasis"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"or", " ", "no", " ", "unit"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"coeffFunc", "/@", 
          RowBox[{"coeffs", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", "theBasis"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"unit", " ", "at", " ", "last", " ", "position"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"Length", "[", "theBasis", "]"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"coeffFunc", "/@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"RotateLeft", "[", "coeffs", "]"}], "]"}]}], ")"}], ",", 
         "theBasis"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"unit", " ", "at", " ", "other", " ", "position"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"{", "_", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"coeffFunc", "/@", 
          RowBox[{"Insert", "[", 
           RowBox[{
            RowBox[{"Rest", "[", 
             RowBox[{"Flatten", "[", "coeffs", "]"}], "]"}], ",", 
            RowBox[{"coeffs", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"unitPosition", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ",", "theBasis"}], 
        "}"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[276]:=",ExpressionUUID->"7ff7de9a-27be-4c16-9e79-58f552a61628"],

Cell[TextData[{
 "Rewrite expanded expression as component list.  Currently \
gaComponentList[",
 StyleBox["]",
  FontWeight->"Bold"],
 " do not work if coefficients of MV contains quaternions: "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"20558c36-3664-40ab-b33b-7d7965b3b445"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "::", "basis"}], "=", 
   "\"\<Orthonormal basis of the algebra `1` in the ordering `2` is not \
defined or explicit ordering option is explicitly set to non matching value. \
\>\""}], ";", 
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "::", "ordering"}], "=", 
   "\"\<Warning. gaComponentList ordering `1` differ from current \
gaRunningOrdering  `1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "::", "compactbasis"}], "=", 
   "\"\<gaRunningOrdering is `1` whereas the gaComponentList ordering option \
is `2`. They have to match if gaCompactPlainRepresentation or \
gaCompactAssociationRepresentation is used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "::", "quaternion"}], "=", 
   "\"\<MV `1` contains quaternionic coefficients. Not properly \
tested!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "::", "notpolynomial"}], 
   "=", "\"\<The expression `1` is not polynomial with respect to the listed \
basis `2`. Coefficients contains MVs?\>\""}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->
  "In[277]:=",ExpressionUUID->"38bdbeb0-6e29-4c00-97f1-2f29b190a8b0"],

Cell["\<\
Getting components in noncompact representation. Both functions needs \
improvement for Point[] dependent!!! basis\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"fc5dc490-4cc8-408a-bc8c-011993c08b60"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionComponentCoefficientAndBasisList", "[", "\"\<Quiet\>\"", "]"}], 
   "=", "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionComponentCoefficientAndBasisList", "[", 
    "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=", 
   "\"\<Should be one of possible GA orderings: \
(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\
\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\
\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\") \
or \\\"None\\\". \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionComponentCoefficientAndBasisList", "[", 
     "\"\<CoefficientFunction\>\"", "]"}], "=", 
    "\"\<One of Expand|Identity|_Function\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionComponentCoefficientAndBasisList", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionComponentCoefficientAndBasisList", "[", 
    RowBox[{"\"\<gaNonCommutativeMonomialOrder\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<None\>\"", "|", "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", 
      "\"\<RevLex\>\"", "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", 
      "|", "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
      "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
      "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
      "\"\<InvDeg[InvRevLex]\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionComponentCoefficientAndBasisList", "[", 
    RowBox[{"\"\<CoefficientFunction\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Expand", "|", "Identity", "|", "_Function"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[281]:=",ExpressionUUID->"ab23e240-4b87-43d1-84f6-3c3c8b4a0528"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaComponentCoefficientAndBasisList", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "gaRunningOrdering"}], ",", 
     RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
     RowBox[{"Quiet", "->", "False"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[287]:=",ExpressionUUID->"69967c07-ef71-4430-8a81-d8a21805200a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaComponentCoefficientAndBasisList", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", "coeffs", ",", 
       "theBasis", ",", "unitPosition", ",", "t", ",", 
       "componentsWithoutscalar", ",", "exprExpanded", ",", "scalarPart", ",",
        "answer"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"option", " ", "handling"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "gaComponentCoefficientAndBasisList", ",", "#", ",", "theOption"}],
            "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionComponentCoefficientAndBasisList",
             "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "set", " ", "method", " ", "value", " ", "if", " ", "it", " ", "was", 
        " ", "not", " ", "set"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{
           "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{
          "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{
         "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
             RowBox[{
             "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "->", "gaRunningOrdering"}], 
            "}"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], "=", 
         
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"CoefficientFunction", "/.", 
             RowBox[{
             "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"CoefficientFunction", "->", "Expand"}], "}"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Warn", " ", "if", " ", "requested", " ", "basis", " ", "has", " ", 
        "different", " ", "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=!=",
            "gaRunningOrdering"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaComponentCoefficientAndBasisList", "::", "ordering"}], 
            ",", 
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            ",", "gaRunningOrdering"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "if", " ", "ordering", " ", "differ", " ", "from", " ", 
        "gaRunningOrdering", " ", "define", " ", "full", " ", "basis", " ", 
        "with", " ", "corresponding", " ", "ordering"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"theAlgebra", ",", 
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            ",", "All"}], "]"}], "]"}], "===", "gaOrthonormalBasis"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"theBasis", "=", 
         RowBox[{"gaDefineOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", 
           RowBox[{"gaNonCommutativeMonomialOrder", "->", 
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
             "]"}]}], ",", 
           RowBox[{"gaGradesOnly", "\[Rule]", "All"}], ",", 
           RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
           RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"theBasis", "=", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", 
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
           ",", "All"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"if", " ", "expr", " ", "contains", " ", "quaternion"}], ",", 
        " ", 
        RowBox[{"we", " ", "simply", " ", "collect"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{"componentCoefficientAndBasisListHelp", "[", 
          RowBox[{"expr", ",", "theBasis", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<CoefficientArrays\>\"", ",", 
             RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
             ",", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "when", " ", "quaternions", " ", "present", " ", "in", " ", 
           "coefficients"}], ",", " ", 
          RowBox[{"we", " ", "trust", " ", "user"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaComponentCoefficientAndBasisList", "::", "quaternion"}], ",", 
             "expr"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"unitPosition", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"theBasis", ",", "1", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "old", " ", "solution", " ", "cannot", " ", "handle", " ", "case", 
           " ", "when", " ", "coefficient", " ", "is", " ", "geometric", " ", 
           "product", " ", "of", " ", "basis", " ", "element", " ", "and", 
           " ", "quaternion"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"List", "@@", 
             RowBox[{"Collect", "[", 
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{
                 RowBox[{"gaPE", "[", "expr", "]"}], "+", 
                 RowBox[{"gaGeneralMultivector", "[", 
                  RowBox[{"t", ",", "theAlgebra"}], "]"}]}], "]"}], ",", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", "ind__", "]"}], ",", "theAlgebra"}],
                 "]"}], ",", "comp"}], "]"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"t", "[", "_", "]"}], "\[RuleDelayed]", "0"}], ",", 
             RowBox[{"comp", "\[Rule]", "Identity"}]}], "}"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"bs", "=", 
             RowBox[{
             "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
              "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"exprExpanded", "=", 
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"componentsWithoutscalar", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Plus", "@@@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"exprExpanded", "+", 
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"t", ",", "theAlgebra"}], "]"}]}], ")"}]}], ",", 
                    "#"}], "]"}], "&"}], "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"x", ",", "#"}], "]"}]}]}], "]"}], "&"}], "/@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"theBasis", ",", "1"}], "]"}]}], ")"}]}], ")"}]}],
                   ")"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"t", "[", "_", "]"}], "\[RuleDelayed]", "0"}], 
                  "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"belem_bs", ":>", 
                 RowBox[{"1", "/;", 
                  RowBox[{"FreeQ", "[", 
                   RowBox[{"belem", ",", "\"\<Quaternion\>\""}], "]"}]}]}], 
                "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "select", " ", "scalar", " ", "part", " ", "separately"}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "unitPosition", "]"}], "===", "1"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"scalarPart", "=", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Plus", "@@", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"exprExpanded", "+", 
                    RowBox[{"t", "[", "0", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "bs"}], "]"}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}]}], ")"}], 
                    "&"}]}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"t", "[", "_", "]"}], "\[RuleDelayed]", "0"}], 
                    "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"belem_bs", ":>", 
                    RowBox[{"1", "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"belem", ",", "\"\<Quaternion\>\""}], "]"}]}]}], 
                   "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"answer", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Insert", "[", 
                   RowBox[{
                   "componentsWithoutscalar", ",", "scalarPart", ",", 
                    RowBox[{"unitPosition", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
                  "theBasis"}], "}"}]}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"answer", "=", 
               RowBox[{"{", 
                RowBox[{"componentsWithoutscalar", ",", "theBasis"}], 
                "}"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}],
    "/;", 
   RowBox[{"Or", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract", "|", "MV"}], ",", 
          RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}], ")"}], "&&", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{"_", ",", 
          RowBox[{"{", "__", "}"}]}], "]"}]}], "]"}]}], ",", 
     RowBox[{"!", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[288]:=",ExpressionUUID->"344452f5-3aa0-49ac-835f-edec00c70776"],

Cell["\<\
When quaternions are present in the expression, it will include geometric \
product. In this case we will not check if algorithm can handle the case and \
trust the user. We also provide syntax with provided basis.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d1150aa4-425e-465f-864e-dd167a73aedf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaComponentCoefficientAndBasisList", "[", 
   RowBox[{"expr_", ",", "basis_List", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"option", " ", "handling"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "gaComponentCoefficientAndBasisList", ",", "#", ",", "theOption"}],
            "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionComponentCoefficientAndBasisList",
             "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "set", " ", "method", " ", "value", " ", "if", " ", "it", " ", "was", 
        " ", "not", " ", "set"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{
           "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
          ")"}]}]}], "]"}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "explicit", " ", "option", " ", "of", " ", 
         "gaNonCommutativeMonomialOrder", " ", "is", " ", "given"}], ",", " ", 
        RowBox[{
        "we", " ", "can", " ", "sort", " ", "the", " ", "provided", " ", 
         "basis", " ", "accordingly"}], ",", " ", 
        RowBox[{
        "but", " ", "this", " ", "requires", " ", "forwarding", " ", 
         "gaSort"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            "]"}], "=!=", "theOption"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"theBasis", "=", 
            RowBox[{"gaSort", "[", 
             RowBox[{"basis", ",", 
              RowBox[{
              "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
               "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}],
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], "=", 
         
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"CoefficientFunction", "/.", 
             RowBox[{
             "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"CoefficientFunction", "->", "Expand"}], "}"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"componentCoefficientAndBasisListHelp", "[", 
       RowBox[{"expr", ",", "basis", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<CoefficientArrays\>\"", ",", 
          RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], ",", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "}"}]}], 
       "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "expr", "}"}], ",", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract", "|", "MV"}], ",", 
       RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], "&&", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "expr", "}"}], ",", 
       RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}], "&&", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "expr", "}"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{"_", ",", 
         RowBox[{"{", "__", "}"}]}], "]"}]}], "]"}], "&&", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "expr", "}"}], ",", "\"\<Quaternion\>\""}], "]"}]}], 
    ")"}]}]}]], "Input",
 CellLabel->
  "In[289]:=",ExpressionUUID->"ab14d7eb-a447-4c47-ae59-27b306ea11dc"],

Cell["\<\
Getting components in compact representation: we construct the base manually \
in a simple way\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"c8c3e373-71e7-4b43-b30e-0ac149b1bde3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaComponentCoefficientAndBasisList", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"theAlgebra", "=", 
           RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", "coeffs", ",", 
          "indices", ",", "theBasis", ",", "restBasisParameters"}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"option", " ", "handling"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "gaComponentCoefficientAndBasisList", ",", "#", ",", 
               "theOption"}], "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", 
               "testOptionComponentCoefficientAndBasisList", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"First", "/@", 
            RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "method", " ", "value", " ", "if", " ", "it", " ", 
           "was", " ", "not", " ", "set"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Quiet", "/.", 
              RowBox[{
              "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{
             "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}],
              "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
                RowBox[{
                "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}],
                ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
               "gaNonCommutativeMonomialOrder", "->", "gaRunningOrdering"}], 
               "}"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
             "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
            "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"CoefficientFunction", "/.", 
                RowBox[{
                "Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}],
                ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"CoefficientFunction", "->", "Expand"}], "}"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            "=!=", "gaRunningOrdering"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaComponentCoefficientAndBasisList", "::", "compactbasis"}], 
              ",", "gaRunningOrdering", ",", 
              RowBox[{
              "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
               "]"}]}], "]"}], ";", " ", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"restBasisParameters", "=", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"FirstCase", "[", 
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlgebra", ",", "gaRunningOrdering"}], "]"}], ",", 
               "_bs"}], "]"}], ",", "2"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"construct", " ", "the", " ", "compact", " ", "basis"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"indices", "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"2", "^", 
             RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
            "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{"0", ",", 
               RowBox[{"_Integer", "?", "Positive"}]}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"theBasis", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"#", ",", "0"}], "]"}], ",", "theAlgebra", ",", 
                "restBasisParameters"}], "]"}], "&"}], "/@", "indices"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"theBasis", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"0", ",", "#"}], "]"}], ",", "theAlgebra", ",", 
                "restBasisParameters"}], "]"}], "&"}], "/@", "indices"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"coeffs", "=", 
          RowBox[{"CoefficientArrays", "[", 
           RowBox[{"expr", ",", "theBasis"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "coeffs", "]"}], "===", "1"}], ",", 
           RowBox[{"coeffs", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"coeffs", ",", 
               RowBox[{"Table", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"{", 
                  RowBox[{"Length", "[", "theBasis", "]"}], "}"}]}], "]"}]}], 
              "}"}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], "/@", 
            RowBox[{"Flatten", "[", "coeffs", "]"}]}], ")"}], "*", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "theBasis"}], "}"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract", "|", "MV"}], ",", 
          RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{"_List", ",", "_List"}], "]"}]}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}], ")"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[290]:=",ExpressionUUID->"fe8e12e2-fee0-4c9b-9f8d-576c546c53e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGetMVComponents", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaVerify", "::", "obsolete"}], ",", 
       "\"\<gaGetMVComponents[]\>\"", ",", "\"\<gaComponentList[]\>\""}], 
      "]"}], ";", "gaComponentList"}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[291]:=",ExpressionUUID->"2c6574a6-2249-44a0-8b5d-d87aa01a6193"],

Cell["\<\
Often we need either full components or component coefficients only\
\>", "Text",ExpressionUUID->"14e022eb-419f-4509-9d8a-745b2bae8553"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaComponentList", "]"}], "=", 
    RowBox[{"Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
   ";"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"gaComponentList", "[", 
     RowBox[{"expr_", ",", "basis___", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", 
        RowBox[{"{", 
         RowBox[{
         "gaComponentCoefficientAndBasisList", ",", "gaComponentList"}], 
         "}"}], "]"}]}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Times", "@@", 
      RowBox[{"gaComponentCoefficientAndBasisList", "[", 
       RowBox[{"expr", ",", "basis", ",", "opts"}], "]"}]}], "/;", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaComponentList", "[", 
   RowBox[{"expr_", ",", "basis___", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaComponentCoefficientAndBasisList", ",", "gaComponentList"}],
        "}"}], "]"}]}]}], "]"}], ":=", 
  RowBox[{"Thread", "[", 
   RowBox[{"GeometricProduct", "@@", 
    RowBox[{"gaComponentCoefficientAndBasisList", "[", 
     RowBox[{"expr", ",", "basis", ",", "opts"}], "]"}]}], "]"}]}]}], "Input",\

 CellLabel->
  "In[292]:=",ExpressionUUID->"05ab888f-c9f5-4dc7-a95b-d1b35f444164"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaComponentCoefficientList", "]"}], "=", 
   RowBox[{"Options", "[", "gaComponentCoefficientAndBasisList", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"gaComponentCoefficientList", "[", 
   RowBox[{"expr_", ",", "basis___", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaComponentCoefficientAndBasisList", ",", "gaComponentList"}],
        "}"}], "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaComponentCoefficientAndBasisList", "[", 
    RowBox[{"expr", ",", "basis", ",", "opts"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]}], "Input",
 CellLabel->
  "In[294]:=",ExpressionUUID->"b135bbfa-a494-4dde-9870-ea077e9b4c84"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Products notations and precedence implementation (based on modification \
of UnicodeSymbols.tr file)"
}], "Subsection",ExpressionUUID->"c9df98d3-ca60-4eb2-b344-c657f5b39844"],

Cell["\<\
Based on product precedence implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstPruduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\
\>", "Text",ExpressionUUID->"5c4c0480-ee81-45db-bdc4-93b9d8e5eda1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GP", "=", "GeometricProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OP", "=", "OuterProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LC", "=", "LeftContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RC", "=", "RightContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IP", "=", "InnerProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DP", "=", "DorstProduct"}], ";"}]}], "Input",
 CellLabel->
  "In[296]:=",ExpressionUUID->"8bb1937b-98d2-48aa-baab-e617ca9245d1"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make expressions"
}], "Subsubsection",ExpressionUUID->"967dea32-c1d9-41f3-a1ae-c0ce942bab83"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[DorstProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<DorstProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[InnerProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<InnerProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[LeftContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<LeftContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[RightContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<RightContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[OuterProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<OuterProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"x", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"PatternSequence", "[", 
          RowBox[{"\"\<\[GeometricProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<GeometricProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
         "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], "]"}]}],
     ",", "sf"}], "]"}]}]}], "Input",
 CellLabel->
  "In[302]:=",ExpressionUUID->"8323b868-11c1-4316-bdce-c335d8396994"],

Cell[TextData[{
 StyleBox["Known issue.",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 " If output is converted to ",
 StyleBox["InputForm[ ] ",
  FontWeight->"Bold"],
 "and then edited then result, for example as, ",
 StyleBox["Cell[\[OpenCurlyDoubleQuote]3*Sin[x]*e[mvDownUp[{1, 2, 3}, {}], \
Cl[3, 1, 0]]\[GeometricProduct]a\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Input\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 ", will not be correctly converted to expression. At the moment it is \
unclear how cells which contains no Box structures  (i.e., when cell content \
is single string) are interpreted. "
}], "Text",ExpressionUUID->"c71efdac-cd74-4b33-9ce3-7fab5f8e64a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make boxes"
}], "Subsubsection",ExpressionUUID->"b0bfdbb7-d6c0-41b6-bb13-66b36655b036"],

Cell[TextData[{
 "Make output boxes: use explicit brackets for multiple arguments according \
to precedence rules (use brackets for any lower precedence operations). \
Precedences are:  NonCommutativeMultiply (**, highest), Times (*, Space), \
RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), OuterProduct (\[OuterProduct], bad \
representation in text cells, input cells are ok.), GeometricProduct(\
\[GeometricProduct]), Plus (lowest).\n\nNote that ",
 StyleBox["Times",
  FontWeight->"Bold"],
 " have higher precedence than any of geometric products. This is somehow \
unusual assumption, however convenient one. These precedences  (except that \
of ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ") are used in many of books on GA (look for partial  list above), thought \
in some books precedences of ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " are reversed (for example, see Geometric Algebra by Eric Chisolm arXiv \
1205.5935v1). We prefer inner product to have highest priority, because from \
programming point of view we are happy to recognize scalars as soon as \
possible."
}], "Text",ExpressionUUID->"9c3003ed-0b98-437c-aa4d-040c08e607f1"],

Cell["Formatting expressions with single argument.", "Text",ExpressionUUID->"242d8632-58b1-4351-83b9-99ae75242b04"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "=!=", 
    "Plus"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<(\>\"", ",", 
      RowBox[{"MakeBoxes", "[", 
       RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "===", "Plus"}]}]}]}], "Input",
 CellLabel->
  "In[308]:=",ExpressionUUID->"54a536bc-217a-4d36-81f3-c20796f2b279"],

Cell["Formatting expressions with two arguments.", "Text",ExpressionUUID->"f4d9b477-3367-4439-88d9-dce9708e5327"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[RightContract]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[RightContract]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], 
          ",", "\"\<\[RightContract]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[RightContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
       "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[320]:=",ExpressionUUID->"bb7771a4-d74f-488f-8c5a-6ae12f746956"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[LeftContract]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[LeftContract]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[324]:=",ExpressionUUID->"b62a3453-aabf-4042-b007-24514f30e4ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[InnerProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[InnerProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[328]:=",ExpressionUUID->"36192cb6-8adb-4232-9aa7-50a863e14e09"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[DorstProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[DorstProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[332]:=",ExpressionUUID->"37f7fd2c-a502-416a-b3a3-da396df64a9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[OuterProduct]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
          "\"\<\[OuterProduct]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
        "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
         "]"}]}], "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[336]:=",ExpressionUUID->"26b6263b-cfd6-429e-8f4b-918eeda80b37"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[GeometricProduct]\>\"",
          ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
      "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
         ",", "\"\<\[GeometricProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}]}], "Input",
 CellLabel->
  "In[340]:=",ExpressionUUID->"bd21d5f9-d937-47b5-a43c-f66bc7c77cc9"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricProduct,",
 " OuterProduct,  LeftContract and RightContract book keeping (general \
multivectors, no ordering rules)"
}], "Subsection",ExpressionUUID->"a8aceff9-a87b-42e5-8dfc-a90c786d9977"],

Cell[TextData[{
 " ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " book keeping . Unfortunately rules for differentiation operator ",
 StyleBox["mvD[ ]",
  FontWeight->"Bold"],
 " have to be given in a more complicated way."
}], "Text",ExpressionUUID->"5330e783-1866-4883-ae54-1ef2a1ca93d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "asociativity", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"GeometricProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", "*", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", "*", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", "*", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], ";"}],
    " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "singlet", " ", "rule", " ", "applies", " ", "after", " ", "moving", " ", 
     "scalar", " ", "from", " ", "GeometricProduct"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"GeometricProduct", "[", "]"}], ":=", "1"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"when", " ", "e_", "1", "*", "e_", "1"}], " ", "->", 
     RowBox[{"1", " ", "we", " ", "are", " ", "left", " ", "empty"}]}], " ", 
    "*)"}], "\[IndentingNewLine]"}]}]], "Input",
 CellLabel->
  "In[344]:=",ExpressionUUID->"83e5cb03-21f4-4caf-9e70-ca3ba5de882d"],

Cell[TextData[{
 "Even if argument is a scalar (i.e. satisfy gaGradeList",
 StyleBox["[b]={0})",
  FontWeight->"Bold"],
 ", we do not move it out of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " (it is opposite to the case with ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 "). GeometricProduct properties with respect to base of  ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " are defined in Base expansion section."
}], "Text",ExpressionUUID->"ccd3f2e7-9148-4ecd-8fb4-712e2e5e0c70"],

Cell[TextData[{
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " book keeping . Ordering of rules is important. Here two possibilities \
exist how to interpret outer product of scalars. 1) Outer product of scalars \
is simply Times. This possibility implemented below.  In particularly \
HoldPattern[OuterProduct[a_]]:=a ; should be checked before commuting out \
properties, otherwise we can end with empty outer product.\n2) Outer product \
of scalars is zero. For this we need to move HoldPattern[OuterProduct[a_]]:=a \
in the end (before OuterProduct[]:=) and replace OuterProduct[]:=$Failed to \
OuterProduct[]:=0. Both variants correspond to general definition that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A", "r"], "\[OuterProduct]", 
     SubscriptBox["B", "s"]}], "=", 
    SubscriptBox["C", 
     RowBox[{"r", "+", "s"}]]}], TraditionalForm]],ExpressionUUID->
  "db565704-b40a-42d4-ab5c-f6e6f18df1d6"],
 ". The question needs further investigation."
}], "Text",ExpressionUUID->"b0a42307-735a-4360-a53a-761934847ac2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "asociativity", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"OuterProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"OuterProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"[", 
       RowBox[{"DH", "-", 
        RowBox[{"CA2GC1", ".22", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
     RowBox[{"singlet", " ", "rule"}], ",", " ", 
     RowBox[{
     "outer", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
      "scalar", " ", "behaves", " ", "like", " ", "geometric", " ", 
      "product"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", "*", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", "*", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", "*", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OuterProduct", "[", "]"}], ":=", "$Failed"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "outer", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input",
 CellLabel->
  "In[349]:=",ExpressionUUID->"96f86582-6adb-4250-a80f-9bc25d05acf5"],

Cell[TextData[{
 StyleBox["Note.",
  FontColor->RGBColor[1, 0.5, 0]],
 " Rule OuterProduct[A,A]->0 is only valid if A is pure product. If A is a \
sum of different grades, then the product is NOT zero!"
}], "Text",ExpressionUUID->"252d3d30-e0a6-4528-880d-d5796471fdb1"],

Cell[TextData[{
 StyleBox["LeftContract",
  FontWeight->"Bold"],
 "  (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[LeftContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]],ExpressionUUID->
  "f4cd06f1-4552-451b-ac2b-b043de711a27"],
 ")and ",
 StyleBox["RightContract ",
  FontWeight->"Bold"],
 " (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[RightContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]],ExpressionUUID->
  "b75b712a-a2c9-4d06-89b5-0e6ba722b2a0"],
 ")book keeping .  Both products are not associative (a\[CenterDot]b\
\[CenterDot]c syntax is undefined, i.e. forbidden). Nevertheless the rules \
below are shorter when written for multiple arguments (programming trick)"
}], "Text",ExpressionUUID->"92e30106-00ff-47f0-99fd-a4df8bec1d5a"],

Cell[TextData[{
 "List of equal blades are scalars.  These scalars are detected by ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " condition."
}], "Text",ExpressionUUID->"81b9dc61-8531-4e06-960b-3c6cbf234918"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", "*", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"RightContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "d", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "RightContract", " ", "with", " ", "right", " ", "scalar", " ", "is", " ", 
    "simple", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGradeList", "[", "b", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGradeList", "[", "a", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "b_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "a_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], " ",
    ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input",
 CellLabel->
  "In[354]:=",ExpressionUUID->"358a07af-05de-4b55-9ffe-86a8abc9074c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", "*", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"LeftContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "c", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "LeftContract", " ", "with", " ", "left", " ", "scalar", " ", "is", " ", 
    "simply", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGradeList", "[", "a", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGradeList", "[", "b", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "a_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "b_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input",
 CellLabel->
  "In[358]:=",ExpressionUUID->"0b5b3de3-17d5-46a1-a471-da7eb1565938"],

Cell[TextData[{
 "The ",
 StyleBox[" InnerProduct[ ] ",
  FontWeight->"Bold"],
 "treats scalars differently! If singlet appears in ",
 StyleBox["InnerProduct[ ]",
  FontWeight->"Bold"],
 ", this means we had multiplication with scalar. Then result should be set \
to zero."
}], "Text",ExpressionUUID->"0f74d4ad-5b8d-498a-a244-85d3981dcd46"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", 
     RowBox[{"a___", ",", 
      RowBox[{"b_", "*", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"b", ",", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "]"}], "/;", 
    RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"InnerProduct", "[", 
      RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Times", "[", 
      RowBox[{"b", ",", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "c"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"CA2GC1", ".21", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
    RowBox[{"singlet", " ", "rule"}], ",", " ", 
    RowBox[{
    "inner", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
     "scalar", " ", "gives", " ", "0"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", "a_", "]"}], "]"}], ":=", "0"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[362]:=",ExpressionUUID->"5e89b10f-1684-48ab-81bc-fd567460ae6b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricMatrixProduct, OuterMatrixProduct,InnerMatrixProduct "
}], "Subsection",ExpressionUUID->"7695be57-3f3b-44a9-8a8b-5c23e4b265a4"],

Cell[TextData[{
 "Procedure to multiply matrices of multivectors. Implementation is taken \
from Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text",ExpressionUUID->"4a350b32-9138-4aa9-84a0-a5b38f27dec1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{"gaGeometricMatrixProduct", ",", "gaOuterMatrixProduct"}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[365]:=",ExpressionUUID->"9a64fc49-d22e-4a1c-a972-af4534f920c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{
     RowBox[{"a_", "?", "MatrixQ"}], ",", 
     RowBox[{"b_", "?", "MatrixQ"}]}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"GeometricProduct", ",", "a", ",", "b", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{
     RowBox[{"a_", "?", "MatrixQ"}], ",", 
     RowBox[{"b__", "?", "MatrixQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaGeometricMatrixProduct", ",", "a", ",", 
      RowBox[{"{", "b", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "b", "}"}], "]"}], ">", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricMatrixProduct", "[", "a_", "]"}], ":=", "a"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "When", " ", "converting", " ", "from", " ", "MV", " ", "with", " ", 
    "quaternionic", " ", "coefficients", " ", "to", " ", "matrix", " ", "we", 
    " ", "need", " ", "to", " ", "multiply", " ", "the", " ", "quaternion", 
    " ", "coefficient", " ", "with", " ", "matrix", " ", "with", " ", 
    "quaternion", " ", "entries"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{
     RowBox[{"a_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"MatrixQ", "[", "#", "]"}], "]"}], "&"}], ")"}]}], ",", 
     RowBox[{"b_", "?", "MatrixQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "theCoeff", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Outer", "[", 
         RowBox[{"GeometricProduct", ",", 
          RowBox[{"{", 
           RowBox[{"theCoeff", "[", "a", "]"}], "}"}], ",", "b"}], "]"}], ",",
         "1"}], "]"}], "/.", 
      RowBox[{"theCoeff", "->", "Identity"}]}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[366]:=",ExpressionUUID->"8a86b558-6cec-48be-bbf1-3bf037f613fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"OuterProduct", ",", "a", ",", "b", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"a_", ",", "b__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaOuterMatrixProduct", ",", "a", ",", 
      RowBox[{"{", "b", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "b", "}"}], "]"}], ">", "1"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[370]:=",ExpressionUUID->"48207d98-fe2d-4efd-b855-fe98cce579b0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaInnerMatrixProduct", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"InnerProduct", ",", "a", ",", "b", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaInnerMatrixProduct", "[", 
    RowBox[{"a_", ",", "b__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaInnerMatrixProduct", ",", "a", ",", 
      RowBox[{"{", "b", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "b", "}"}], "]"}], ">", "1"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[372]:=",ExpressionUUID->"da4c9882-8db7-4db2-b10b-e9267325ce2c"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation and book keeping for geometric, outer products in \
orthonormal base."
}], "Subsection",ExpressionUUID->"85654450-a970-4086-9d91-06c19b83cdcb"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Tools to analyse compilation to C problems (unevaluatable by default, \
useful in the case of compilation problems)"
}], "Subsubsection",ExpressionUUID->"e2f24493-7542-43db-b94b-2ea51686d25b"],

Cell["\<\
For example after upgrade to ubuntu 14.04 I had to make symbolic link of \
/lib/libgcc_s.so link to /lib/i386-linux-gnu.\
\>", "Text",ExpressionUUID->"6c119003-b38f-4dd8-af42-f61c17389d9c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"00654b36-7ee8-4f6d-a8a8-430e98085f71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"d2ca4bfe-e20f-4e6a-9da7-b4ff1e1b74a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellCommandFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{"Compile", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", "x", "}"}], "}"}], ",", 
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"8338534b-f278-44c8-9dd1-65b24649a503"],

Cell[BoxData["\<\"/usr/bin/gcc -shared -o \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.so\\\" -m32 -fPIC -O2 \
-D\\\"MINT_32\\\" \
-I\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/IncludeFiles/C\\\" -I\\\
\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/DeveloperKit/\
Linux/CompilerAdditions\\\" \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.c\\\"  \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/\
DeveloperKit/Linux/CompilerAdditions\\\" \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Libraries/Linux\\\"    \
2>&1\"\>"], "Print",ExpressionUUID->"7c9d16fb-0a14-4446-b80a-ad96e4c9da0b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               PaneBox[
                RowBox[{"{", "_Real", "}"}],
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               RowBox[{"{", "_Real", "}"}],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Variables: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", "x", "}"}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Expression: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               SuperscriptBox["x", "2"],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{10, 10.2, 5468}, {
    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
   0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {1}}, 
   Function[{$CellContext`x}, $CellContext`x^2], Evaluate, 
   LibraryFunction[
   "/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/compiledFunction0.so", "compiledFunction0", {{Real, 0, "Constant"}}, 
    Real]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",ExpressionUUID->"92fa9612-8704-42c7-85e4-\
4c1f8f86a731"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellOutputFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", "x", "}"}], "}"}], ",", 
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], 
  ";"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"d70f5406-c802-46fa-afee-be23e606e6f7"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Subset counting functions"
}], "Subsubsection",ExpressionUUID->"14de2333-5152-4197-8ae7-ee605722393c"],

Cell[TextData[{
 "Counts  elements of subset j that are greater than nonnegative integer i. j \
is subset of natural numbers. Replace  to byte compiled function (WVM) if \
user uses older Mma version, for which compilation to C is not possible. When \
using ",
 StyleBox["Compile`GetElement",
  FontWeight->"Bold"],
 " you need also to include ",
 StyleBox["\[OpenCurlyDoubleQuote]RuntimeOptions\[CloseCurlyDoubleQuote]\
\[Rule]\[CloseCurlyDoubleQuote]Speed\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " option."
}], "Text",ExpressionUUID->"3ea69762-6a84-442f-aa16-e4c99563a62c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMu", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Part", "=", "Compile`GetElement"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sum", "=", "0"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"j", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
                 RowBox[{"sum", "++"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
             "sum"}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvMu", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Part", "=", "Compile`GetElement"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sum", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"j", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
                RowBox[{"sum", "++"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
            "sum"}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[374]:=",ExpressionUUID->"056a8a0d-d52a-47d2-ad44-57e1bdc00726"],

Cell["\<\
Counts total number of  elements of subset j that are greater of  each of \
integers, listed in the list i.  \
\>", "Text",ExpressionUUID->"86b48b07-c41b-4d00-b0e6-a1b21633887e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMuS", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"Part", "=", "Compile`GetElement"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sum", "=", "0"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"sum", "=", 
                RowBox[{"sum", "+", 
                 RowBox[{"mvMu", "[", 
                  RowBox[{
                   RowBox[{"j", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
             "sum"}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvMuS", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"Part", "=", "Compile`GetElement"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sum", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"sum", "=", 
               RowBox[{"sum", "+", 
                RowBox[{"mvMu", "[", 
                 RowBox[{
                  RowBox[{"j", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
            "sum"}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[375]:=",ExpressionUUID->"6587a7b3-fa74-4469-aa5b-8d243aff74b0"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Various products signature maps, see ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " package implementation"
}], "Subsubsection",ExpressionUUID->"5d97638b-a6bc-47bf-9962-cc2d1685e6f6"],

Cell[CellGroupData[{

Cell["\<\
Geometric product signature map (used to compute GeometricProduct)\
\>", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"829aad39-3e08-4363-9dcf-ec9c2acbb933"],

Cell["\<\
Geometric product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"db996de3-b64e-401e-ab90-6069c72cc9da"],

Cell["\<\
When both  down and up indices present we need take into account index number \
difference between initial and contracted upper index sets (we calculate \
everything using down indices). Note that term \
(-1)^(mvMu[gap,Join[{j1},{j2}]] + mvMu[gap,Join[{j1},{j2}]]) was dropped, \
because it comes twice (once, because we indices down, and second when count \
repeated indices which are both up, i.e. in that case remove from \
intersecting up and down indices that with negative signature)  \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"854dba88-575b-4965-b734-24f13664aeea"],

Cell["\<\
We put all calls to different product signature maps into same command \
productSignatureMap[ ], because then we can pass the function in the same \
form for different products (in particularly this simplifies implementation \
of multiplications of MV in association form)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"212b8c4d-3c6d-431f-b34c-ee6befc4f4af"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True},",
  FontWeight->"Bold"],
 " spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ]",
  FontWeight->"Bold"],
 " appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"28a4ab7c-01b8-49ad-a117-886d302f6f89"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"memoizeProducts", ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"with", " ", "memorization"}], " ", "*)"}], 
     RowBox[{
      RowBox[{
       RowBox[{"productSignatureMap", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i1___Integer", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i2___Integer", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"gap_", ",", "gaq_", ",", 
           RowBox[{"gar_", ":", "0"}]}], "]"}]}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"productSignatureMap", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"gap", ",", "gaq", ",", "gar"}], "]"}]}], "]"}], "=", 
         RowBox[{"mvProductSignatureMapC", "[", 
          RowBox[{
           RowBox[{"{", "i1", "}"}], ",", 
           RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq", ",", "gar"}], 
          "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", ",", 
     RowBox[{"(*", " ", 
      RowBox[{"without", " ", "memorization"}], " ", "*)"}], 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"productSignatureMap", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i2___Integer", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"gap_", ",", "gaq_", ",", 
            RowBox[{"gar_", ":", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
       RowBox[{"mvProductSignatureMapC", "[", 
        RowBox[{
         RowBox[{"{", "i1", "}"}], ",", 
         RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq", ",", "gar"}], 
        "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Never", " ", "try", " ", "to", " ", "memoize", " ", "product", " ", 
    "with", " ", "up", " ", "and", " ", "mixed", " ", "indices", " ", "in", 
    " ", "order", " ", "to", " ", "save", " ", "memory"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "GeometricProduct",
        ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"gap_", ",", "gaq_", ",", 
         RowBox[{"gar_", ":", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}], ",", "gap", ",", "gaq", ",", "gar"}], "]"}]}],
    ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "both"}], ",", " ", 
    RowBox[{"down", " ", "and", " ", "up", " ", "indices", " ", "present"}], 
    ",", " ", 
    RowBox[{
    "signature", " ", "is", " ", "calculated", " ", "from", " ", "Union", " ",
      "of", " ", 
     RowBox[{"indices", "!"}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "GeometricProduct",
        ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"gap_", ",", "gaq_", ",", 
         RowBox[{"gar_", ":", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"mvProductSignatureMapC", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i1", "}"}], ",", 
          RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i2", "}"}], ",", 
          RowBox[{"{", "j2", "}"}]}], "]"}], ",", "gap", ",", "gaq", ",", 
        "gar"}], "]"}], "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "j1", "}"}]}], "]"}]}], "]"}], "+", 
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ")"}]}]}], ")"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvProductSignatureMapC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"qp", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"qr", ",", "_Integer"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"intesectionIJ", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mvMu", "[", 
                RowBox[{
                 RowBox[{"pp", "+", "qp", "+", "qr"}], ",", "intesectionIJ"}],
                 "]"}], "===", "0"}], ",", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Intersection", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"pp", "+", "qp", "+", "1"}], ",", 
                    RowBox[{"pp", "+", "qp", "+", "qr"}]}], "]"}], ",", 
                   "intesectionIJ"}], "]"}], "===", 
                 RowBox[{"{", "}"}]}], ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"mvMuS", "[", 
                    RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
                   RowBox[{"mvMu", "[", 
                    RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}], 
                ",", "0"}], "]"}], ",", "\[IndentingNewLine]", "0"}], "]"}]}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvProductSignatureMapC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"qp", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"qr", ",", "_Integer"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"intesectionIJ", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mvMu", "[", 
               RowBox[{
                RowBox[{"pp", "+", "qp", "+", "qr"}], ",", "intesectionIJ"}], 
               "]"}], "===", "0"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Intersection", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", 
                   RowBox[{
                    RowBox[{"pp", "+", "qp", "+", "1"}], ",", 
                    RowBox[{"pp", "+", "qp", "+", "qr"}]}], "]"}], ",", 
                  "intesectionIJ"}], "]"}], "===", 
                RowBox[{"{", "}"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"mvMuS", "[", 
                   RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
                  RowBox[{"mvMu", "[", 
                   RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}], 
               ",", "0"}], "]"}], ",", "\[IndentingNewLine]", "0"}], "]"}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[376]:=",ExpressionUUID->"2866123b-71e6-4500-b680-c8de0c7f06e8"],

Cell["\<\
If compact representation is used we recompute the mappings using plain \
Additive representation commands above\
\>", "Text",ExpressionUUID->"c4568d30-c21f-4b9f-b6aa-cc0a49d0cb45"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", "GeometricProduct", ",", 
     "alg_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "alg"}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[380]:=",ExpressionUUID->"06dc5628-111e-4101-beea-b872d1160f1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", "GeometricProduct", ",", 
     "alg_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", "GeometricProduct", ",", "alg"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[381]:=",ExpressionUUID->"0325b2ad-41d0-4a9e-ab18-2ddde716dc81"]
}, Closed]],

Cell[CellGroupData[{

Cell["Alternating product signature map (not used at the moment)", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"109455b9-911c-4e1f-b69c-d50257d10caf"],

Cell["\<\
Alternating product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. Alternating Product \
Signature map at the moment is not used (evaluation suppressed to save time). \
It could be potentially useful for determination if two basis elements \
commutes. e_i e_j  -e_j e_i then should yield 0 for this simplest product \
signature and the commutation result should not depend on GA signature. The \
signature map was not adopted for mixed up and down indices.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"a5a7ae99-b472-431b-b5fc-af5d2723292d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "i1", "}"}], ",", 
       RowBox[{"{", "i2", "}"}]}], "]"}], "*", 
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "j1", "}"}], ",", 
       RowBox[{"{", "j2", "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"sum", "=", "0"}], ",", 
               RowBox[{"intesectionIJ", "=", 
                RowBox[{"Intersection", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"OddQ", "[", 
                   RowBox[{"intesectionIJ", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"sum", "=", 
                   RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", 
                  RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
               "]"}], ";", "sum"}]}], "]"}]}], ")"}]}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAltProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"mvMuS", "[", 
           RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"sum", "=", "0"}], ",", 
              RowBox[{"intesectionIJ", "=", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", 
                  RowBox[{"intesectionIJ", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                 RowBox[{"sum", "=", 
                  RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
              "]"}], ";", "sum"}]}], "]"}]}], ")"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"6d028b5e-1c98-46aa-9585-1fa40f4fdde1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Antisymmetric product signature map (used to compute OuterProduct)\
\>", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"052cb297-b77a-40dd-b62c-5b90d4bc3c2e"],

Cell["\<\
Antisymmetric product signature map. Assumes natural index ordering. Down \
only and Up only cases are matched separately for speed.  \
AntisymmetricProductSignatureMap  in the presence of both up and down indices \
is calculated of the union of indices. Contrary to productSignatureMap no \
additional sign correction here.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"3a1e7fed-422f-4667-90a1-42b708a91152"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", "OuterProduct", ",", "___"}], 
      "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "OuterProduct", 
       ",", "___"}], "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "OuterProduct", 
       ",", "___"}], "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"mvMu", "[", 
              RowBox[{"0", ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
            "0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{"mvMuS", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mvMu", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Intersection", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
           "0", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{"mvMuS", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[382]:=",ExpressionUUID->"a4521bb2-27fb-4506-9791-910a06308c07"],

Cell["\<\
If compact representation is used we recompute the mappings using plain \
Additive representation commands above\
\>", "Text",ExpressionUUID->"bb635bfe-d382-4941-8012-b3395590a9cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", "OuterProduct", ",", 
     "___"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "OuterProduct"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[386]:=",ExpressionUUID->"8784d2a7-f062-422f-8810-d68d587f3ca1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", "OuterProduct", ",", 
     "___"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}]}], "]"}], ",", "OuterProduct"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[387]:=",ExpressionUUID->"5c35e9e1-2974-4e22-b01f-83077ce9558a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Inner products signature maps are replaced by Geometric product signature map\
\
\>", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10004.},ExpressionUUID->"0c5ad0b3-e3c8-446a-b8d2-79ee3aa2bac6"],

Cell["\<\
LeftContract and RightContract product signature map is replaced by \
GeometricProduct signature map \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10004.},ExpressionUUID->"ab5525bb-473a-453b-a6af-611a68d264e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i1___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i2___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "LeftContract", ",", "al_Cl"}], 
    "]"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"{", "i1", "}"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"{", "i1", "}"}], "]"}], "]"}]}], ",", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
     "]"}], ",", "0"}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.},
 CellLabel->
  "In[388]:=",ExpressionUUID->"4ff53f18-931f-4943-a2ee-2e61287e832b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i1___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i2___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "RightContract", ",", "al_Cl"}], 
    "]"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"{", "i1", "}"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"{", "i2", "}"}], "]"}], "]"}]}], ",", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
     "]"}], ",", "0"}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.},
 CellLabel->
  "In[389]:=",ExpressionUUID->"2bd666eb-a136-4743-b578-5f29dbea0975"],

Cell["\<\
Hestenes inner product signature map needs to be adjusted to ensure, that \
inner multiplication by scalar gives 0, unless we multiply two scalars. This \
is ensured by more complicated test inside If[ ] statement\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10004.},ExpressionUUID->"a3ccd934-a7a1-473f-9443-b28f5f2e1345"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "InnerProduct", ",", "al_Cl"}], 
     "]"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"{", "i1", "}"}], "]"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"len", "===", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"{", "i1", "}"}], "]"}], "]"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"len", "===", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"{", "i2", "}"}], "]"}], "]"}]}], ")"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i1", "}"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i2", "}"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i1", "}"}], "===", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i2", "}"}], "===", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"productSignatureMap", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i1", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i2", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
        "]"}], ",", "0"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.},
 CellLabel->
  "In[390]:=",ExpressionUUID->"d1bf0dc2-8754-4186-896a-dfc276665fc2"],

Cell["\<\
If compact representation is used we recompute the mappings using plain \
Additive representation commands above\
\>", "Text",ExpressionUUID->"c107d3a7-65aa-48be-8ff8-a5894333eaaf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{"LeftContract", "|", "RightContract", "|", "InnerProduct"}], 
       ")"}]}], ",", "al_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "h", ",", "al"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[391]:=",ExpressionUUID->"3322879b-e4a9-41a1-88dc-55a832950a43"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{"LeftContract", "|", "RightContract", "|", "InnerProduct"}], 
       ")"}]}], ",", "al_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", "h", ",", "al"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[392]:=",ExpressionUUID->"7c60e1fb-9cd9-4a98-8744-f9473ebb8a57"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Set symmetric difference function"
}], "Subsubsection",ExpressionUUID->"d81635c8-8de8-4f33-852f-7a9068b7c98e"],

Cell[TextData[{
 "Set symmetric difference function coincides with  Staples ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " implementation. Compilation of this function is not worthy (speedup is \
negligible). It is preferable to have one name for different products, \
therefore we renamed it as ",
 StyleBox["productIndex[i,j,GeometricProduct|OuterProduct]",
  FontWeight->"Bold"]
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"fa1e69b3-e8a8-4369-aef7-ad50a1b71c85"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"iI_List", ",", "jJ_List"}], "]"}], "]"}], ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[393]:=",ExpressionUUID->"ec2a8ef9-4a7f-4273-9768-a0fe524c1905"],

Cell[TextData[{
 "Cannot apply the symmetric difference, ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Intersection[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " directly, because indices are inside ",
 StyleBox["mvDownUp[ ] ",
  FontWeight->"Bold"],
 "container. Therefore we need intermediate layer. When only down or up \
indices present, we simply pass corresponding functions to lists of integers"
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"51c92034-3f12-496f-8730-5abe2aef0613"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct"}], "]"}], "=", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{
      RowBox[{"mvSetSymmetricDifference", "[", 
       RowBox[{"i1", ",", "i2"}], "]"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[394]:=",ExpressionUUID->"89e1f5cd-7dae-4686-a83b-10e0fc105b6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j2_List"}], "]"}], ",", "GeometricProduct"}],
     "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "j2"}], "]"}], ",", "GeometricProduct"}], 
     "]"}], "=", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"mvSetSymmetricDifference", "[", 
       RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[395]:=",ExpressionUUID->"672d679c-6efa-424d-97e9-db1031d0c155"],

Cell[TextData[{
 "When both type of indices present, then we have to find set symmetric \
difference of common index set. In addition we have to remember which indices \
are down and what are up. Note that ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " automatically sorts integers."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"c445d15b-00b3-41f5-8443-ca5c4567a6cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "GeometricProduct"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    "=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ssd", "=", 
        RowBox[{"mvSetSymmetricDifference", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"i1", ",", "j1"}], "]"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"Intersection", "[", 
         RowBox[{"ssd", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"i1", ",", "i2"}], "]"}]}], "]"}], ",", 
        RowBox[{"Intersection", "[", 
         RowBox[{"ssd", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[396]:=",ExpressionUUID->"45c72040-5346-4b64-b018-29c845039c75"],

Cell["For outer product the function is simple", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"53cc7b76-4d21-480c-afd5-0e02ebf6664a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "OuterProduct"}], 
    "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"Union", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[397]:=",ExpressionUUID->"aa89f28e-74a9-432a-a7d5-dac1c5802503"],

Cell["\<\
For LeftContract and RightContract product the productIndex is substituted by \
GeometricProduct\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"be1e035c-5046-4245-b654-b9ce10d4a12a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "LeftContract"}], "]"}],
   ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"i1", ",", "j1"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], "]"}]}], ",", 
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    ",", "0"}], "]"}]}]], "Input",
 CellLabel->
  "In[398]:=",ExpressionUUID->"4bc3a8f9-2ddd-40d6-a190-970e7b0e7be2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "RightContract"}], 
   "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"i1", ",", "j1"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], "]"}]}], ",", 
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    ",", "0"}], "]"}]}]], "Input",
 CellLabel->
  "In[399]:=",ExpressionUUID->"15f3191a-397d-41cc-bcdf-ee744a75761f"],

Cell["\<\
The index set for inner product is NOT the same as for geometric product.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"acd7f983-37e6-4cdc-9347-c16819a9548d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "InnerProduct"}], "]"}],
   ":=", 
  RowBox[{"mvDownUp", "[", 
   RowBox[{
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"i1", ",", "i2"}], "]"}], ",", 
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[400]:=",ExpressionUUID->"88397326-d5b5-43ee-98b4-024e9d1c3f02"],

Cell["\<\
For compact representation  we recompute the mappings using plain Additive \
representation commands above\
\>", "Text",ExpressionUUID->"c0b5bac7-3af4-4c8c-9b40-2c8e306b9105"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"compactRepresentationReplacementRules", "[", 
         RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
       "]"}], "&"}], "/@", "\[IndentingNewLine]", 
     RowBox[{"productIndex", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{"i1", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{"i2", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", "h"}], "]"}]}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[401]:=",ExpressionUUID->"d470ece5-6b9a-4a11-9b64-1aca2636c05b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"compactRepresentationReplacementRules", "[", 
         RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
       "]"}], "&"}], "/@", "\[IndentingNewLine]", 
     RowBox[{"productIndex", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Replace", "[", 
          RowBox[{"i1", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Replace", "[", 
          RowBox[{"i2", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}]}], "]"}], ",", "h"}], "]"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[402]:=",ExpressionUUID->"6ffb0be9-e434-4c53-8aeb-388557aa7851"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric product for basis multivectors"
}], "Subsubsection",ExpressionUUID->"602ab620-c63f-46ce-9af1-a8bfe920b639"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",ExpressionUUID->"5374b4dd-68e0-4c86-933e-9d5c2ef7c3f9"],

Cell["\<\
Fourth argument ignoreMe is needed when calculating gaTensorProduct of same \
Clifford algebras. It adds unique identifier which prevents mixing of \
different algebras base elements. Note, that in the result we keep the mark \
ignoreMe. This has an application in realization of multiplication of \
quaternions, which we want to be different from Cl[0,2] algebra base \
elements. Memorization of base element multiplication in additive \
representation was removed, since now we have much faster Association \
representation  for which we keep memorization option. \
\>", "Text",ExpressionUUID->"38a71231-42fd-4520-8561-f2d1697414a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ssd", "=", 
         RowBox[{"productIndex", "[", 
          RowBox[{"du1", ",", "du2", ",", "GeometricProduct"}], "]"}]}], 
        "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ssd", "===", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{"ssd", "===", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{"0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "GeometricProduct", ",", "al"}], 
            "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "GeometricProduct", ",", "al"}], 
            "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"ssd", ",", "al", ",", "ignoreMe"}], "]"}], ",", 
             "other2"}], "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[403]:=",ExpressionUUID->"2d82903a-0ba8-452a-b1b3-679e3df9d3e0"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Outer product for basis multivectors"
}], "Subsubsection",ExpressionUUID->"81c4db85-e744-436d-8d84-2fda9df44134"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples,",
 ButtonBox[" [SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4936ce43-ec1a-44ff-90c6-864dd3ea56f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", 
        "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"duu", "=", 
         RowBox[{"productIndex", "[", 
          RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"duu", "===", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"duu", ",", "al"}], "]"}], ",", "other2"}], "]"}]}], 
          "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[404]:=",ExpressionUUID->"5ed0c813-9ace-4b35-8b74-6f28c6db4842"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left and Right contract and InnerProduct for basis multivectors"
}], "Subsubsection",ExpressionUUID->"b29d3395-8734-48c6-9de1-f8d0b643401b"],

Cell["LeftContract for two base elements", "Text",ExpressionUUID->"ccfb5ffa-9966-4f3c-8517-6ffa8d38153d"],

Cell["\<\
The definition assumes that we are dealing with Hestenes \
\[OpenCurlyDoubleQuote]mother algebra\[CloseCurlyDoubleQuote] (see C. Doran, \
D. Hestenes, F. Sommen and N. Van Acker, \[OpenCurlyDoubleQuote]Lie groups as \
spin groups\[CloseCurlyDoubleQuote], J. Math. Phys. 34 (8), 1993, pp \
3642-3669.\
\>", "Text",ExpressionUUID->"c3aebbbd-4044-4685-a57d-c7979dba5547"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testIndexUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"du1_List", ",", "du2_List"}], "]"}], ",", "___"}], "]"}], ":=", 
   RowBox[{"Union", "[", 
    RowBox[{"du1", ",", "du2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testIndexUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"du1_Integer", ",", "0"}], "]"}], ",", "al_"}], "]"}], ":=", 
   RowBox[{"Replace", "[", 
    RowBox[{"du1", ",", 
     RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
      RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testIndexUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "du1_Integer"}], "]"}], ",", "al_"}], "]"}], ":=", 
   RowBox[{"Replace", "[", 
    RowBox[{"du1", ",", 
     RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
      RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[405]:=",ExpressionUUID->"6c42c073-88d0-4689-87db-1403aaabba28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"LeftContract", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"testIndexUnion", "[", 
             RowBox[{"du1", ",", "al"}], "]"}], ",", 
            RowBox[{"testIndexUnion", "[", 
             RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], "]"}], "===", 
         RowBox[{"Length", "[", 
          RowBox[{"testIndexUnion", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], "]"}]}], ",", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}], 
     " ", ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[408]:=",ExpressionUUID->"e2e5cce5-5a33-4928-85ee-0a6fa49aaabd"],

Cell["RightContract for two base elements", "Text",ExpressionUUID->"a7781fed-513f-40d4-82aa-1ec259a79744"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"RightContract", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"testIndexUnion", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], ",", 
           RowBox[{"testIndexUnion", "[", 
            RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], "]"}], "===", 
        RowBox[{"Length", "[", 
         RowBox[{"testIndexUnion", "[", 
          RowBox[{"du2", ",", "al"}], "]"}], "]"}]}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1", ",", "al"}], "]"}], ",", 
         RowBox[{"bs", "[", 
          RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}]}], 
   " ", "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[409]:=",ExpressionUUID->"dc0fd9f1-4764-4a15-89a3-97c72bc5181a"],

Cell["Hestenes inner product for base elements", "Text",ExpressionUUID->"b2efd4b9-771c-45a8-a5f5-f6a08af68345"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaGradeList", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<=", 
         RowBox[{
          RowBox[{"gaGradeList", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du2", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"LeftContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", 
        RowBox[{"RightContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[410]:=",ExpressionUUID->"af1d9480-3ea8-4624-b40d-bbe6bf7f46fa"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Expansions and conversions between different products"
}], "Subsection",ExpressionUUID->"9842db4f-7771-4a2c-a368-bdec5ed23ca8"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector (orthonormal basis) representation  in ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s Association form "
}], "Subsubsection",ExpressionUUID->"f6a2b87b-9402-467a-b60e-fe0f7dfa7061"],

Cell["\<\
This section adds new internal representation of multivector (in orthonormal \
base) as an Association object (associative array) <| keys ->values|>. This \
representation is  preferable when taking grades and manipulating structure \
of multivector (taking components, etc...). Association representation is \
extremely convenient in expanding multivector products with \
PrecomputedPairProduct method. \
\>", "Text",ExpressionUUID->"4e6b59c2-fcdc-4a5c-b25a-af456f2b083b"],

Cell[TextData[{
 "Commands ",
 StyleBox["gaAssociationRepresentation[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 " converts between additive and association representations (from \
mathematical point of view both of them are \[OpenCurlyDoubleQuote]additive\
\[CloseCurlyDoubleQuote] representations).  ",
 StyleBox["gaAssociationRepresentation",
  FontWeight->"Bold"],
 "[ ] still needs serious improvements both in speed and conversion quality \
(not an easy task)."
}], "Text",ExpressionUUID->"73149cf0-6e09-4b6d-bf54-aab072a074f4"],

Cell[TextData[{
 "Conversion from simple (natural) additive representation is more \
complicated (simpler solution get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " pattern matcher mad with more complex input).  ",
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 " is simple. Associations only implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version 10 or higher. Only then we define  additional functions \
gaAssociationTogether",
 StyleBox["[ ],",
  FontWeight->"Bold"],
 " ",
 StyleBox["gaAssociationRepresentatio[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",ExpressionUUID->"cbcd8db5-7c82-4d01-88aa-1b9b8ac5656a"],

Cell["\<\
Better strategy is to  make the replacement upside down, i.e. instead of \
ReplaceRepeated, which works from up level to down level (with increasing \
depth) to use Replace[exp,{All}], which goes from down to up.  \
\>", "Text",ExpressionUUID->"b5e59ea4-41e0-41a2-968b-32cb72b2341e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaAssociationRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PreprocessingRules", "\[Rule]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"arg_Plus", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"arg", "+", "Nothing"}], ",", "_bs"}], "]"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Nothing", "\[Rule]", "0"}], "}"}]}], ")"}], "/;", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"arg", ",", "_bs"}], "]"}]}]}]}], "}"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], ",", 
     RowBox[{"Check", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationRepresentation", "::", "notcompleted"}], "=", 
   "\"\<Warning! Unable to check if conversion to Association was \
successfull. Your can avoid the check using option Check->False. The last \
step was `1`.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[411]:=",ExpressionUUID->"0816fdb1-96f7-4f58-8044-ee9d607f3349"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"replaceRepeatedInDepthFirst", "[", 
      RowBox[{"expr_", ",", "rule_List"}], "]"}], ":=", 
     RowBox[{"FixedPoint", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Replace", "[", 
         RowBox[{"#", ",", "rule", ",", "All"}], "]"}], "&"}], ",", "expr"}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"First", " ", "define", " ", "rules"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"optional", " ", 
        RowBox[{"step", ":", " ", 
         RowBox[{
         "Collect", " ", "elements", " ", "in", " ", "front", " ", "of", " ", 
          "basis", " ", "elements", " ", "for", " ", "efficiency"}]}]}], ",", 
       " ", 
       RowBox[{"included", " ", "in", " ", "option", " ", "directly"}]}], " ",
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"rulesCollectCoefficientsOfBasisElements", "=", 
        RowBox[{"{", 
         RowBox[{"arg_Plus", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"arg", "+", "Nothing"}], ",", "_bs"}], "]"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Nothing", "\[Rule]", "0"}], "}"}]}], ")"}], "/;", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"arg", ",", "_bs"}], "]"}]}]}]}], "}"}]}], ";"}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Step", " ", "1"}], ":", " ", 
       RowBox[{
       "rewrite", " ", "basis", " ", "elements", " ", "to", " ", 
        "association", " ", "form"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvDownUpToAssociationRules", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"keyMV_mvDownUp", ",", "other__"}], "]"}], ":>", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"Association", "[", 
            RowBox[{"keyMV", "\[Rule]", "1"}], "]"}], ",", "other"}], "]"}]}],
         "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "2"}], ":", " ", 
        RowBox[{
        "move", " ", "scalar", " ", "multipliers", " ", "before", " ", 
         "basis", " ", "elements", " ", "into", " ", "associations"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"rulesScalarIntoAssociation", "=", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"mult_", ",", 
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}]}], "]"}], 
          "]"}], ":>", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"arg", "*", "mult"}], ",", "other"}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "mult", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "3"}], ":", " ", 
        RowBox[{
        "turn", " ", "the", " ", "scalar", " ", "terms", " ", "inside", " ", 
         "Plus", " ", "into", " ", "association"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rulesScalarInsidePlusIntoAssociation", "=", 
       RowBox[{"{", 
        RowBox[{"any1_Plus", "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"scalarTerms", "=", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"List", "@@", "any1"}], ",", "_bs"}], "]"}], "/.", 
                 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", "__", "]"}], 
                   "\[RuleDelayed]", "0"}], "}"}]}], ")"}]}], ",", 
              RowBox[{"theAlgebraMarks", "=", 
               RowBox[{"Rest", "[", 
                RowBox[{"FirstCase", "[", 
                 RowBox[{"any1", ",", "_bs", ",", "0", ",", "Infinity"}], 
                 "]"}], "]"}]}], ",", "theRest"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theRest", "=", 
              RowBox[{"Complement", "[", 
               RowBox[{
                RowBox[{"List", "@@", "any1"}], ",", "scalarTerms"}], "]"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"Plus", "@@", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], "\[Rule]", 
                    RowBox[{"Plus", "@@", "scalarTerms"}]}], "]"}], ",", 
                   RowBox[{"Sequence", "@@", "theAlgebraMarks"}]}], "]"}], 
                 ",", "theRest"}], "}"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], "/;", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "any1", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}], "&&", 
            RowBox[{"!", 
             RowBox[{"PossibleZeroQ", "[", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{"any1", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", "__", "]"}], 
                   "\[RuleDelayed]", "0"}], ",", 
                  RowBox[{"_bs", "\[RuleDelayed]", "0"}]}], "}"}]}], "]"}], 
              "]"}]}]}], ")"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "4"}], ":", " ", 
        RowBox[{
        "turn", " ", "the", " ", "sum", " ", "of", " ", "associations", " ", 
         "into", " ", "single", " ", "association"}], ":", " ", 
        RowBox[{
        "this", " ", "might", " ", "cause", " ", "problems", " ", "for", " ", 
         "large", " ", "expressions"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{"rulesPlusIntoAssociation", "=", 
       RowBox[{"{", 
        RowBox[{"any1_Plus", "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"toModify", "=", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"List", "@@", "any1"}], ",", "_bs"}], "]"}]}], ",", 
              RowBox[{"toKeep", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"List", "@@", "any1"}], ",", "_bs"}], "]"}]}], ",", 
              RowBox[{"theAlgebraMarks", "=", 
               RowBox[{"Rest", "[", 
                RowBox[{"FirstCase", "[", 
                 RowBox[{"any1", ",", "_bs", ",", "0", ",", "Infinity"}], 
                 "]"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Plus", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"Merge", "[", 
                   RowBox[{
                    RowBox[{"First", "/@", "toModify"}], ",", "Total"}], 
                   "]"}], ",", 
                  RowBox[{"Sequence", "@@", 
                   RowBox[{"Rest", "[", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    "toModify", ",", "_bs", ",", "0", ",", "Infinity"}], 
                    "]"}], "]"}]}]}], "]"}], ",", "toKeep"}], "}"}], 
              "]"}]}]}], "]"}], "/;", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"exprtotest", "=", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "any1"}], ")"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", "__", "]"}], 
                  "\[RuleDelayed]", "0"}], "}"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", "exprtotest", "]"}], ">", "1"}], ")"}],
               "&&", 
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{"exprtotest", ",", 
                 RowBox[{"MV", "|", "bs"}], ",", 
                 RowBox[{"Heads", "->", "True"}]}], "]"}]}], "&&", 
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{"exprtotest", ",", "_Association"}], "]"}]}]}], 
             ")"}]}], "\[IndentingNewLine]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "5"}], ":", "  ", 
        RowBox[{
        "we", " ", "can", " ", "still", " ", "be", " ", "left", " ", "with", 
         " ", "scalar", " ", "factor", " ", "before", " ", "partly", " ", 
         "converted", " ", 
         RowBox[{"Association", "."}]}]}], "  ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rulesPlusMultScalarAssociation", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"mult_", ",", "arg2_Plus"}], "]"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"mult", "*", "#"}], ")"}], "&"}], "/@", "arg2"}], ")"}],
           "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "mult", "}"}], ",", 
            RowBox[{"Plus", "|", "MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "6"}], ":", " ", 
        RowBox[{
        "move", " ", "factors", " ", "of", " ", "step", " ", "5", " ", 
         "inside", " ", "of", " ", "noncommutative", " ", "products"}]}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"rulesMultScalarAssociation", "=", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"mult_", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"h", ":", 
               RowBox[{"(", 
                RowBox[{
                "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", 
                 "|", "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], 
             "[", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
              "arg2__"}], "]"}]}], "]"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"h", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{
              RowBox[{"mult", "*", "arg"}], ",", "other"}], "]"}], ",", 
            "arg2"}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "mult", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "default", " ", "sort", " ", "index", " ", "order", " ", "in", " ", 
        "resulting", " ", "representation"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"associationKeySortRules", "[", "ord_String", "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"as_Association", ",", "al__"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"KeySort", "[", 
            RowBox[{"as", ",", 
             RowBox[{
              RowBox[{"orderedQNoncommutative", "[", 
               RowBox[{"ord", ",", 
                RowBox[{"#1", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}]}], "]"}], ",",
            "al"}], "]"}]}], "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[413]:=",ExpressionUUID->"02152d0f-2b6b-41f1-a651-59ee93ed1e6f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"check", " ", "if", " ", "conversion", " ", "was", " ", 
    RowBox[{"succesfull", ":", " ", 
     RowBox[{"not", " ", "relaeble"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"checkAssociationRepresentation", "[", "expr_bs", "]"}], ":=", 
       
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"First", "[", "expr", "]"}], "]"}], "===", "Association"}],
          ",", "\[IndentingNewLine]", "expr", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaAssociationRepresentation", "::", "notcompleted"}], 
            ",", "expr"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAssociationRepresentation", "[", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "_List", "|", "_GeometricProduct", "|", "_OuterProduct", "|", 
           "_InnerProduct", "|", "_LeftContract", "|", "_RightContract"}], 
          ")"}]}], "]"}], ":=", 
       RowBox[{"checkAssociationRepresentation", "/@", "h"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAssociationRepresentation", "[", "expr_", "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"bs", "===", 
          RowBox[{"Head", "[", "expr", "]"}]}], ",", "expr", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaAssociationRepresentation", "::", "notcompleted"}], 
            ",", "expr"}], "]"}], ";", "expr"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellLabel->
  "In[414]:=",ExpressionUUID->"67cdfe79-40b5-4e7c-bb22-03845676cf70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "main", " ", "function"}], "*)"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaValidVersionQ", "[", 
       RowBox[{
       "10.0", ",", 
        "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaAssociationRepresentation", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
            "LeftContract", ",", "RightContract", ",", 
            RowBox[{"theProprocessingRules", "=", 
             RowBox[{"OptionValue", "[", "PreprocessingRules", "]"}]}], ",", 
            RowBox[{"theOrdering", "=", 
             RowBox[{
             "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
            ",", 
            RowBox[{"tocheck", "=", 
             RowBox[{"OptionValue", "[", "Check", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Attempt", " ", "without", " ", "dangerous", " ", "loops"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"tocheck", ",", 
             RowBox[{"checkFunction", "=", "checkAssociationRepresentation"}],
              ",", 
             RowBox[{"checkFunction", "=", "Identity"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"checkFunction", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Fold", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Replace", "[", 
                 RowBox[{"#1", ",", "#2", ",", "All"}], "]"}], "&"}], ",", 
               "expr", ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                "theProprocessingRules", ",", "mvDownUpToAssociationRules", 
                 ",", "rulesScalarIntoAssociation", ",", 
                 "rulesScalarInsidePlusIntoAssociation", ",", 
                 "rulesPlusIntoAssociation", ",", 
                 "rulesPlusMultScalarAssociation", ",", 
                 "rulesMultScalarAssociation", ",", 
                 "rulesScalarIntoAssociation"}], "}"}]}], "]"}], "/.", 
             RowBox[{"associationKeySortRules", "[", "theOrdering", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Cl"}], "]"}]}], ")"}], "&&", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "MV", ",", 
           RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "when", " ", "there", " ", "are", " ", "no", " ", "basis", " ", "symbol", 
     " ", "inside", " ", "expression", " ", "we", " ", "make", " ", "it", " ",
      "a", " ", "scalar", " ", "of", "  ", "running", " ", "algebra"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaAssociationRepresentation", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"Association", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[Rule]", "expr"}], "]"}], ",", 
          "gaRunningAlgebra"}], "]"}], "/;", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_Cl"}], "]"}], "&&", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "MV", ",", 
           RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
     "\[IndentingNewLine]", "]"}], ";"}]}]}]], "Input",
 CellLabel->
  "In[415]:=",ExpressionUUID->"cbd76819-f105-4990-9107-7ab949c2d90f"],

Cell["Other functions for work with associations", "Text",ExpressionUUID->"0b8f8200-ccb8-4657-a4a8-fe4649c6320a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaAssociationTogether", ",", 
    RowBox[{"{", "Listable", "}"}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[417]:=",ExpressionUUID->"290fb7ad-9f0f-4027-9282-7a2a02646b29"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaAssociationTogether", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "_Association"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"also", " ", "clean", " ", "Association"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"ex_Association", ",", "any__"}], "]"}], "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"ex", "/.", 
            RowBox[{"{", 
             RowBox[{"as_Association", "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"Association", "@", 
                RowBox[{"(", 
                 RowBox[{"KeyValueMap", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#2", "===", "0"}], ",", "Nothing", ",", 
                    RowBox[{"#1", "\[Rule]", "#2"}]}], "]"}], "&"}], ",", 
                   "as"}], "]"}], ")"}]}], "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"Values", "[", "as", "]"}], ",", "0"}], "]"}]}]}], 
             "}"}]}], ",", "any"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"cheating", ",", " ", 
          RowBox[{"to", " ", "change"}], ",", " ", 
          RowBox[{
          "also", " ", "not", " ", "implemented", " ", "case", " ", "when", 
           " ", "Association", " ", "is", " ", "located", " ", "inside", " ", 
           "gaSeriesdata"}], ",", " ", 
          RowBox[{
          "Zassenhaus", " ", "and", " ", "BCh", " ", "series", " ", 
           "data"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationTogether", "[", 
          RowBox[{"expr", ":", 
           RowBox[{"(", 
            RowBox[{"_Plus", "|", "_Times"}], ")"}]}], "]"}], ":=", 
         RowBox[{
          RowBox[{"gaAssociationRepresentation", "[", 
           RowBox[{"gaPlainRepresentation", "[", "expr", "]"}], "]"}], "/;", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"unknown", " ", 
          RowBox[{"case", ":", " ", 
           RowBox[{"can", " ", "ignore"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationTogether", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "functions", " ", "to", " ", "clean", " ", "and", " ", "put", " ", 
          "MV", " ", "in", " ", "Association", " ", "form", " ", "together"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationRepresentationClean", "[", "expr_", "]"}], ":=", 
         RowBox[{"(", 
          RowBox[{"expr", "/.", 
           RowBox[{"{", 
            RowBox[{"as_Association", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"Association", "@", 
               RowBox[{"(", 
                RowBox[{"KeyValueMap", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#2", "===", "0"}], ",", "Nothing", ",", 
                    RowBox[{"#1", "\[Rule]", "#2"}]}], "]"}], "&"}], ",", 
                  "as"}], "]"}], ")"}]}], "/;", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"Values", "[", "as", "]"}], ",", "0"}], "]"}]}]}], 
            "}"}]}], ")"}]}], ";"}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[418]:=",ExpressionUUID->"db931ce1-4bd9-4d5d-83df-9f0ede84065f"],

Cell[TextData[{
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 " is simple"
}], "Text",ExpressionUUID->"b4115f39-a5b7-4d49-a710-78e12006cc0b"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"gaValidVersionQ", "[", 
    RowBox[{
    "10.0", ",", 
     "\"\<Multivector representation as Mathematica Association object\>\""}],
     "]"}], ",", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "convert", " ", "from", " ", "noncompact", " ", "Association", " ", 
        "representation", " ", "to", " ", "non", " ", "compact", " ", 
        "Additive"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaPlainRepresentation", "[", "expr_", "]"}], ":=", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "theAnswer", "}"}], ",", 
           RowBox[{
            RowBox[{"theAnswer", "=", 
             RowBox[{"expr", "/.", 
              RowBox[{
               RowBox[{"bs", "[", 
                RowBox[{"arg_Association", ",", "other__"}], "]"}], 
               "\[RuleDelayed]", 
               RowBox[{"Plus", "@@", 
                RowBox[{"(", 
                 RowBox[{"Times", "@@", 
                  RowBox[{"(", 
                   RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"x", ",", "other"}], "]"}]}], "]"}], "/@", "#"}], 
                    "&"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], "&"}], 
                    "[", 
                    RowBox[{"Normal", "[", "arg", "]"}], "]"}], ",", "1"}], 
                    "]"}], ")"}]}], ")"}]}]}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "if", " ", "the", " ", "expression", " ", "after", " ", 
               "converting", " ", "from", " ", "Association", " ", "is", " ", 
               "in", " ", "compact", " ", "form", " ", "do", " ", "nothing"}],
               ",", " ", 
              RowBox[{
              "else", " ", "call", " ", "the", " ", "procedure", " ", "once", 
               " ", "more"}]}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{"theAnswer", ",", 
                RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}], ",", 
              "theAnswer", ",", 
              RowBox[{"gaPlainRepresentation", "[", "theAnswer", "]"}]}], 
             "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
         RowBox[{"!", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "_Association"}], "]"}]}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "convert", " ", "from", " ", "Compact", " ", "Additive", " ", 
         "representation", " ", "to", " ", "nonCompact", " ", "Additive"}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPlainRepresentation", "[", "expr_", "]"}], ":=", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"theAlgebra", "=", 
              RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
             RowBox[{"theOrdering", "=", "gaRunningOrdering"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}], "]"}], "=!=",
               "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Replace", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"0", ",", "0"}], "]"}], "\[RuleDelayed]", 
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"do_Integer", ",", "0"}], "]"}], "\[RuleDelayed]", 
                  
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"do", ",", 
                    RowBox[{
                    "reverseCompactRepresentationReplacementRules", "[", 
                    RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"0", ",", "up_Integer"}], "]"}], "\[RuleDelayed]", 
                  
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"up", ",", 
                    RowBox[{
                    "reverseCompactRepresentationReplacementRules", "[", 
                    RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], 
                    "]"}]}], "]"}]}]}], "}"}], ",", "All"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], ",",
                "theAlgebra", ",", "theOrdering"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}], "&&", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}]}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPlainRepresentation", "[", "expr_", "]"}], ":=", 
        RowBox[{"expr", "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}], 
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[419]:=",ExpressionUUID->"574324eb-148e-418e-8ba1-487c9b513fb7"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector (orthonormal basis) representation  in Compact/nonCompact \
form "
}], "Subsubsection",ExpressionUUID->"17ae3335-b69b-4bb5-b4f1-e5d1687609de"],

Cell["\<\
Conversion is based on the below constructed rules. The compact form is \
almost untested. In fact  it is not used.\
\>", "Text",ExpressionUUID->"a947def1-2ad1-4bc4-b3a3-7fa50f24d621"],

Cell[BoxData[
 RowBox[{
  RowBox[{"compactRepresentationReplacementRules", "[", 
   RowBox[{"algebra_Cl", ",", "ordering_String"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"compactRepresentationReplacementRules", "[", 
     RowBox[{"algebra", ",", "ordering"}], "]"}], "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"First", ",", "#", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{"First", "/@", 
           RowBox[{"First", "/@", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"algebra", ",", "ordering"}], "]"}], ",", "1"}], 
             "]"}]}]}]}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"{", "}"}], "\[Rule]", "0"}]}], "}"}], "]"}]}], 
   ")"}]}]], "Input",
 CellLabel->
  "In[420]:=",ExpressionUUID->"14097973-5ad2-4ea7-b26c-c7da8aec6148"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
   RowBox[{"algebra_Cl", ",", "ordering_String"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
     RowBox[{"algebra", ",", "ordering"}], "]"}], "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Reverse", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"MapAt", "[", 
            RowBox[{"First", ",", "#", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"MapIndexed", "[", 
           RowBox[{"Rule", ",", 
            RowBox[{"First", "/@", 
             RowBox[{"First", "/@", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"algebra", ",", "ordering"}], "]"}], ",", "1"}], 
               "]"}]}]}]}], "]"}]}], ")"}]}], ",", 
       RowBox[{"0", "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "}"}], "]"}]}], ")"}]}]], "Input",
 CellLabel->
  "In[421]:=",ExpressionUUID->"e3268b0f-229b-4de3-9621-2c0ccb1b2016"],

Cell["\<\
Convert into compact representation:  mvDownUp[{do__Integer},{}]:> \
mvDownUp[integer,0] and mvDownUp[{},{do__Integer}]:> mvDownUp[0,integer]\
\>", "Text",ExpressionUUID->"1c127f23-d111-42ea-bb5e-6415f7355ac2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], "=", 
   "\"\<Orthonormal basis of `1` with the required ordering `2` is not \
defined. \>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactPlainRepresentation", "::", "downup"}], "=", 
   "\"\<Expression `1` contains both down and up indices. Compact \
representation not implemented.\>\""}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->
  "In[422]:=",ExpressionUUID->"cd3339ae-76e7-4b9d-931b-aee3b237170c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCompactPlainRepresentation", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
       RowBox[{"theOrdering", "=", "gaRunningOrdering"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}], "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Replace", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "do__Integer", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"Replace", "[", 
               RowBox[{
                RowBox[{"{", "do", "}"}], ",", 
                RowBox[{"compactRepresentationReplacementRules", "[", 
                 RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], "]"}], 
              ",", "0"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "up__Integer", "}"}]}], "]"}], "\[RuleDelayed]", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Replace", "[", 
               RowBox[{
                RowBox[{"{", "up", "}"}], ",", 
                RowBox[{"compactRepresentationReplacementRules", "[", 
                 RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], "]"}]}],
              "]"}]}]}], "}"}], ",", "All"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], 
         ",", "theAlgebra", ",", "theOrdering"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"FreeQ", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "do__", "}"}], ",", 
       RowBox[{"{", "up__", "}"}]}], "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[424]:=",ExpressionUUID->"19ce5d1d-44e8-45d2-9510-94b7333574ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCompactPlainRepresentation", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaCompactPlainRepresentation", "::", "downup"}], ",", 
       "expr"}], "]"}], ";", "expr"}], ")"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "do__", "}"}], ",", 
        RowBox[{"{", "up__", "}"}]}], "]"}]}], "]"}]}]}]}]], "Input",
 CellLabel->
  "In[425]:=",ExpressionUUID->"efdcc58f-59cd-47b1-9df9-3cc10e5eade8"],

Cell["\<\
Inside Association we have to use KeyMap. Possible problem: mvDownUp[{},{}] \
is not replaced by mvDownUp[ 0,0] when using gaAssociationRepresentation[ ]: \
may be separateCommands for gaCompactAssciationRepresentation and its inverse \
is needed?\
\>", "Text",ExpressionUUID->"db2bd680-bda6-472e-acc0-a77a1d86df47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCompactAssociationRepresentation", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
       RowBox[{"theOrdering", "=", "gaRunningOrdering"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}], "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"gaAssociationRepresentation", "[", "expr", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"data_Association", ",", "algebra_Cl"}], "]"}], 
           "\[RuleDelayed]", 
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"algebra", ",", "theOrdering"}], "]"}], "]"}], "=!=", 
              "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"KeyMap", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ReplaceAll", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"compactRepresentationReplacementRules", "[", 
                    RowBox[{"algebra", ",", "theOrdering"}], "]"}]}], "]"}], 
                  "&"}], ",", "data"}], "]"}], ",", "algebra"}], "]"}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], ",",
                "algebra", ",", "theOrdering"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "}"}], ",", "All"}], "]"}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], 
         ",", "theAlgebra", ",", "theOrdering"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "do__", "}"}], ",", 
         RowBox[{"{", "up__", "}"}]}], "]"}]}], "]"}], "&&", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", "_Association"}], "]"}]}], ")"}]}]}]], "Input",
 CellLabel->
  "In[426]:=",ExpressionUUID->"3ff442c9-bf3a-4d9c-b9cc-d184f5cacc3a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaProductPairExpand[ ]  in internal \
\[OpenCurlyDoubleQuote]AssociationRepresentation\[CloseCurlyDoubleQuote] \
form"
}], "Subsubsection",ExpressionUUID->"7de73374-6b0e-4e13-8ec8-67af26590139"],

Cell["\<\
The expansion of product (geometric and outer) of MV  given in Association \
form is the much faster that expansion of MV given in \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] form. The \
Method->\[CloseCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote]\
, which is optimized  for MV given in \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] form is \
about 50% slower and the usual \
Method->\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote] \
is about 20 times(!) slower (for symbolic input). This subsection deals only  \
with expansion of  \[OpenCurlyDoubleQuote]PlainRepresentation\
\[CloseCurlyDoubleQuote] form\
\>", "Text",ExpressionUUID->"eb022f9b-2a73-471a-9dce-3e348671d79a"],

Cell["\<\
Only GeometricProduct and OuterProduct currently are implemented in \
Association representation. There is a little room to speed up an expansion \
in association using memorization (not implemented). \
\>", "Text",ExpressionUUID->"59a7ab7d-5468-47f1-b4f0-aa2dd2f02609"],

Cell["\<\
Realization with ListConvolve is faster than with Outer, thanks to \
stackexchange!!!,  \
https://mathematica.stackexchange.com/questions/148230/speeding-the-\
calculation-of-a-complex-polynomial-from-its-roots/148240#148240 and Carl \
Woll in particular. \
\>", "Text",ExpressionUUID->"8b45b7fb-0dff-4562-b64e-ff16627455e0"],

Cell["\<\
The pair expansion must contain only two MV in Association form. Below we try \
to put expression in that form.  In the case of InnerProduct we have to \
remove the scalar keys of Associations ! , therefore we separate that \
function (since it is supposed to be rarely used)\
\>", "Text",ExpressionUUID->"1f21934a-fc66-47cf-8a5c-b051ab6e2a6c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"The", " ", "computing", " ", 
      RowBox[{"function", ":", " ", 
       RowBox[{
       "ignore", " ", "all", " ", "methods", " ", "and", " ", "their", " ", 
        "suboptions"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"only", " ", "one", " ", "bracket", " ", 
      RowBox[{"h", ":", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
          "RightContract", "|", "InnerProduct"}], ")"}], " ", "here", " ", 
        "is", " ", 
        RowBox[{"needed", ".", " ", "The"}], "  ", 
        RowBox[{"(", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
            "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], " ", 
        "will", " ", "not", " ", "work"}]}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", ":", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
            "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|",
              "RightContract"}], ")"}], "[", 
           RowBox[{
            RowBox[{"argg1", ":", 
             RowBox[{"(", 
              RowBox[{"bs", "[", 
               RowBox[{"as1_Association", ",", "al_", ",", "any___"}], "]"}], 
              ")"}]}], ",", 
            RowBox[{"argg2", ":", 
             RowBox[{"(", 
              RowBox[{"bs", "[", 
               RowBox[{"as2_Association", ",", "al_", ",", "any___"}], "]"}], 
              ")"}]}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"sf_", ",", "quiet_", ",", "__"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"hd", "=", 
          RowBox[{"Head", "[", "h", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<Expanding MV presented as an Association. Option Method \
will be ignored.\>\"", ",", "\"\<\>\""}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"\"\<The expanded pair is\>\"", ",", "h"}], "}"}]}], 
            "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Geometric", " ", "product", " ", "expansion", " ", "realization"}],
           " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"bs", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaAssociationRepresentationClean", "[", 
            RowBox[{"Association", "@", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{"Merge", "[", 
               RowBox[{
                RowBox[{"ListConvolve", "[", 
                 RowBox[{
                  RowBox[{"Keys", "[", "as1", "]"}], ",", 
                  RowBox[{"Keys", "[", "as2", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", 
                  RowBox[{
                   RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", "hd"}], "]"}], ",", 
                    RowBox[{"sf", "[", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", "hd", ",", "al"}], "]"}], 
                    ",", 
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}], "]"}]}], 
                    "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"List", "[", "##", "]"}], ",", "0"}], "]"}], 
                   "&"}]}], "]"}], ",", "Total"}], "]"}], ")"}]}], "]"}], ",",
            "al", ",", "any"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Only", " ", "option", " ", "procession", " ", "part"}], ",", 
       " ", 
       RowBox[{"when", " ", 
        RowBox[{"gaProductPairExpand", "[", " ", "]"}], " ", "is", " ", 
        "called", " ", "directly", " ", 
        RowBox[{"(", 
         RowBox[{
         "unintended", " ", "usage", " ", "for", " ", "compatibility"}], 
         ")"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", ":", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
            "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|",
              "RightContract"}], ")"}], "[", 
           RowBox[{
            RowBox[{"argg1", ":", 
             RowBox[{"(", 
              RowBox[{"bs", "[", 
               RowBox[{"as1_Association", ",", "al_", ",", "any___"}], "]"}], 
              ")"}]}], ",", 
            RowBox[{"argg2", ":", 
             RowBox[{"(", 
              RowBox[{"bs", "[", 
               RowBox[{"as2_Association", ",", "al_", ",", "any___"}], "]"}], 
              ")"}]}]}], "]"}]}], ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sf", "=", 
           RowBox[{"OptionValue", "[", 
            RowBox[{
            "gaProductPairExpand", ",", "\"\<CoefficientFunction\>\""}], 
            "]"}]}], ",", 
          RowBox[{"quiet", "=", 
           RowBox[{"OptionValue", "[", 
            RowBox[{"gaProductPairExpand", ",", "\"\<Quiet\>\""}], "]"}]}], 
          ",", 
          RowBox[{"hd", "=", 
           RowBox[{"Head", "[", "h", "]"}]}]}], "\[IndentingNewLine]", "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{
          RowBox[{"h", "[", 
           RowBox[{"argg1", ",", "argg2"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "sf", ",", "quiet", ",", "\"\<RealTimePairProduct\>\"", ",", 
            "Infinity", ",", 
            RowBox[{"{", "}"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[427]:=",ExpressionUUID->"2db5830f-d9e3-4506-af23-5d4b86900887"],

Cell["The same part for InnerProduct", "Text",ExpressionUUID->"659a8a8b-0ebe-4028-96f4-61e544744378"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", 
          RowBox[{
           RowBox[{"argg1", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"a1_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}], ",", 
           RowBox[{"argg2", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"a2_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"sf_", ",", "quiet_", ",", "__"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"as1", "=", 
           RowBox[{"KeyDrop", "[", 
            RowBox[{"a1", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", 
               RowBox[{"mvDownUp", "[", 
                RowBox[{"0", ",", "0"}], "]"}]}], "}"}]}], "]"}]}], ",", 
          RowBox[{"as2", "=", 
           RowBox[{"KeyDrop", "[", 
            RowBox[{"a2", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", 
               RowBox[{"mvDownUp", "[", 
                RowBox[{"0", ",", "0"}], "]"}]}], "}"}]}], "]"}]}]}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<Expanding MV presented as an Association. Option Method \
will be ignored.\>\"", ",", "\"\<\>\""}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"\"\<The expanded pair is\>\"", ",", 
               RowBox[{"InnerProduct", "[", 
                RowBox[{"argg1", ",", "argg2"}], "]"}]}], "}"}]}], 
            "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"InnerProduct", " ", "expansion", " ", "realization"}], " ",
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{"bs", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaAssociationRepresentationClean", "[", 
            RowBox[{"Association", "@", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{"Merge", "[", 
               RowBox[{
                RowBox[{"ListConvolve", "[", 
                 RowBox[{
                  RowBox[{"Keys", "[", "as1", "]"}], ",", 
                  RowBox[{"Keys", "[", "as2", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", 
                  RowBox[{
                   RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", "InnerProduct"}], "]"}], 
                    ",", 
                    RowBox[{"sf", "[", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", "InnerProduct", ",", "al"}],
                     "]"}], ",", 
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}], "]"}]}], 
                    "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"List", "[", "##", "]"}], ",", "0"}], "]"}], 
                   "&"}]}], "]"}], ",", "Total"}], "]"}], ")"}]}], "]"}], ",",
            "al", ",", "any"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"option", " ", "procession", " ", "part"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", 
          RowBox[{
           RowBox[{"argg1", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"a1_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}], ",", 
           RowBox[{"argg2", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"a2_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}]}], "]"}], ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sf", "=", 
           RowBox[{"OptionValue", "[", 
            RowBox[{
            "gaProductPairExpand", ",", "\"\<CoefficientFunction\>\""}], 
            "]"}]}], ",", 
          RowBox[{"quiet", "=", 
           RowBox[{"OptionValue", "[", 
            RowBox[{"gaProductPairExpand", ",", "\"\<Quiet\>\""}], "]"}]}]}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Process", " ", "options", " ", "and", " ", "call", " ", "the", " ", 
          "same", " ", "function", " ", "with", " ", "explicit", " ", 
          "option", " ", "list"}], "  ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{
          RowBox[{"InnerProduct", "[", 
           RowBox[{"argg1", ",", "argg2"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "sf", ",", "quiet", ",", "\"\<RealTimePairProduct\>\"", ",", 
            "Infinity", ",", 
            RowBox[{"{", "}"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "the", " ", "below", " ", "pattern", " ", "occur", " ", "in", " ", 
        "Horn", " ", "representation", " ", "1"}], "+", 
       RowBox[{
        RowBox[{"MV", "[", "a", "]"}], "\[GeometricProduct]", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"MV", "[", "a", "]"}]}], "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             FractionBox[
              RowBox[{"MV", "[", "a", "]"}], "3"]}], ")"}]}]}], ")"}]}]}], 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"as1_Association", ",", "other___"}], "]"}], ",", 
         "op_List"}], "]"}], "]"}], ":=", 
      RowBox[{"bs", "[", 
       RowBox[{"as1", ",", "other"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"as1_Association", ",", "other___"}], "]"}], ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"bs", "[", 
       RowBox[{"as1", ",", "other"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"both", " ", "brackets", " ", 
       RowBox[{"(", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
           "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], " ", "are",
        " ", "very", " ", "import"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", 
              "|", "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"argg1_bs", ",", "argg2_Plus"}], "]"}], ",", "op___"}], 
        "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", "[", 
          RowBox[{"argg1", ",", 
           RowBox[{"gaAssociationTogether", "[", "argg2", "]"}]}], "]"}], ",",
          "op"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "argg2", "}"}], ",", "_Association"}], "]"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", 
              "|", "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"argg1_Plus", ",", "argg2_bs"}], "]"}], ",", "op___"}], 
        "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", "[", 
          RowBox[{
           RowBox[{"gaAssociationTogether", "[", "argg1", "]"}], ",", 
           "argg2"}], "]"}], ",", "op"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "argg1", "}"}], ",", "_Association"}], "]"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", 
              "|", "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"argg1_Plus", ",", "argg2_Plus"}], "]"}], ",", "op___"}], 
        "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", "[", 
          RowBox[{
           RowBox[{"gaAssociationTogether", "[", "argg1", "]"}], ",", 
           RowBox[{"gaAssociationTogether", "[", "argg2", "]"}]}], "]"}], ",",
          "op"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"argg1", ",", "argg2"}], "}"}], ",", "_Association"}], 
          "]"}]}], ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[428]:=",ExpressionUUID->"8338cf14-14ad-4b34-b82b-2cb758692385"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaProductPairExpand[ ] expansions for MV given in standard \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] form"
}], "Subsubsection",ExpressionUUID->"0ab3eab8-1d3d-4100-ab71-593cb6967f53"],

Cell["Test and development functions (inactivated) ", "Text",ExpressionUUID->"c17f9827-9e68-4a89-81dc-945548272c56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"onlyPairsQ", "[", "h_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"{", "h", "}"}], ",", 
       RowBox[{
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{
          RowBox[{"arg", ":", 
           RowBox[{"(", 
            RowBox[{
            "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
             "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
          RowBox[{"___", "?", "OptionQ"}]}], "]"}], "/;", 
        RowBox[{
         RowBox[{"Length", "[", "arg", "]"}], ">", "2"}]}], ",", "Infinity"}],
       "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "True", ",", "False"}], "]"}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"d3f1a89d-1d67-4bd6-a36a-87d29a129c69"],

Cell["\<\
Help functions. collectQ[ ] check if we need collect terms before expansion. \
If so, collectOnDemand[ ] do this. Collected parts are wrapped by head \
singleton[ ]. If product is not yet fully expanded (i.e. still contains some \
product operations inside) then do not attempt to collect coefficients (this \
is ensured by \
/;FreeQ[{expr},GeometricProduct|OuterProduct|InnerProduct|LeftContract|\
RightContract,Heads->True]; condition). Pattern \[OpenCurlyDoubleQuote]_bs[_]\
\[CloseCurlyDoubleQuote] was added for computations on manifolds, since \
without it gaPE was unable completely expand expression. In general \
\[OpenCurlyDoubleQuote]_bs\[CloseCurlyDoubleQuote] and _bs[_] should not \
appear simultaneously. \
\>", "Text",ExpressionUUID->"d07db8b5-9a91-46b0-a681-f6458df91498"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"collectQ", "[", "expr_Plus", "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "all", "}"}], ",", 
         RowBox[{
          RowBox[{"all", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
            "]"}]}], ";", 
          RowBox[{"Catch", "[", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"all", "=!=", 
              RowBox[{"Union", "[", "all", "]"}]}], ",", 
             RowBox[{"Throw", "[", "False", "]"}], ",", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "if", " ", "basis", " ", "vectors", " ", "do", " ", "not", " ",
                 "repeat"}], ",", " ", 
               RowBox[{"then", " ", "test", " ", "scalar", " ", "form"}]}], 
              " ", "*)"}], " ", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"AtomQ", "[", 
                  RowBox[{
                   RowBox[{"(", "expr", ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"_bs", "[", "_", "]"}], "->", "1"}], ",", 
                    RowBox[{"_singleton", "\[Rule]", "1"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{"short", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#", "]"}], "<", "2"}], "&"}], 
                    ")"}]}]}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", 
                   RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "expr"}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"_bs", "[", "_", "]"}], "->", "1"}], ",", 
                    RowBox[{"singleton", "\[Rule]", "1"}]}], "}"}]}], ")"}]}],
                ";", 
               RowBox[{"(*", " ", 
                RowBox[{"long", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
               
               RowBox[{"Throw", "[", "True", "]"}], ";"}], ")"}]}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "expr", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"collectQ", "[", "expr_Times", "]"}], ":=", 
        RowBox[{
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", "all", "}"}], ",", 
           RowBox[{
            RowBox[{"all", "=", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Catch", "[", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"all", "=!=", 
                RowBox[{"Union", "[", "all", "]"}]}], ",", 
               RowBox[{"Throw", "[", "False", "]"}], ",", 
               RowBox[{"Throw", "[", "True", "]"}]}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], "/;", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"List", "@@", "expr"}], ",", "_Power"}], "]"}]}]}], ";"}], 
      "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"collectQ", "[", "expr_", "]"}], ":=", "True"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"collectOnDemand", "[", "expr_", "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"collectQ", "[", "expr", "]"}]}], ",", 
        RowBox[{"Collect", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", 
           RowBox[{"_bs", ",", 
            RowBox[{"_bs", "[", "_", "]"}]}], "}"}], ",", "singleton"}], 
         "]"}], ",", "expr"}], "]"}]}], ";"}]}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"if", " ", "collectQ", " ", "returs", " ", "True"}], ",", " ", 
     RowBox[{
     "no", " ", "need", " ", "for", " ", "collecting", " ", "terms"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[429]:=",ExpressionUUID->"cad7ea13-aa65-4b5c-90a0-8b0cb4061885"],

Cell["\<\
Head \[OpenCurlyDoubleQuote]singleton\[CloseCurlyDoubleQuote] serves for \
holding expressions in order to reduce the number of expansion operations. \
For example, assume, that you need to geometrically multiply a+b+e[1] by \
c+d+e[2]. If we would wrap scalars by single head, say, singleton[a+b]+e[1] \
and singleton[c+d]+e[2], then number of expensive geometric multiplications \
is significantly reduced. This is especially important when coefficients \
contains many terms.\
\>", "Text",ExpressionUUID->"64826dfe-4eb3-4d29-a918-2e2b4cd371cd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"singleton", ",", "HoldAll"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Integer", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Real", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Complex", "]"}], "=", "n"}], ";"}]}], "Input",\

 CellLabel->
  "In[430]:=",ExpressionUUID->"81655319-0de5-41aa-9142-7b1bc0f6c689"],

Cell["\<\
The actual expansion is performed by gaProductPairExpand[ ], which currently \
has two implemented methods, Method-> \
\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote], and \
Method->\[CloseCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote]\
. The second uses the first one to compute expanded symbolic expression and \
then just substitutes the particular coefficients  into it. This yields \
significant speedup for multivectors which has large number of base elements. \
The function gaDefineExpandedPairProduct[thealgebra, theproduct ] calculates \
the noted symbolic expansion for given algebra and operation. If multivector \
is given in internal Association form, then precalculated expanded product \
yield no performance increase when compared with true expansion. Therefore we \
use this approach only to MV in \[OpenCurlyDoubleQuote]PlainRepresentation\
\[CloseCurlyDoubleQuote] form.\
\>", "Text",ExpressionUUID->"eb1b614d-343d-4727-9e24-af8d8fe0fbfb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineExpandedPairProduct", "[", 
    RowBox[{"alg_Cl", ",", "\"\<PlainRepresentation\>\"", ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"c1Name", "=", "\[FormalA]"}], ",", 
        RowBox[{"c2Name", "=", "\[FormalB]"}], ",", "c1", ",", "c2", ",", 
        "c3", ",", 
        RowBox[{"vsdim", "=", 
         RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], ",", 
        "allGrades", ",", "indexRange", ",", "precomputedProductComponents"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"c1", "=", 
        RowBox[{"gaGeneralMultivector", "[", 
         RowBox[{"c1Name", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"c2", "=", 
        RowBox[{"c1", "/.", 
         RowBox[{"{", 
          RowBox[{"c1Name", "\[Rule]", "c2Name"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"c3", "=", 
        RowBox[{"c1", "/.", 
         RowBox[{"{", 
          RowBox[{"c1Name", "\[Rule]", "\[FormalC]"}], "}"}]}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
        "using", " ", "precomputed", " ", "c3", " ", "we", " ", "can", " ", 
         "speedup", " ", 
         RowBox[{"gaProductPairExpand", "[", "]"}], " ", "command"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"indexRange", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{"2", "^", "vsdim"}], "-", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"allGrades", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{"vsdim", ",", "#"}], "]"}], "&"}], "/@", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "vsdim"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"precomputedProductComponents", "=", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{"gaProductPairExpand", "[", 
           RowBox[{
            RowBox[{"h", "[", 
             RowBox[{"c1", ",", "c2"}], "]"}], ",", 
            RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
            RowBox[{"Method", "\[Rule]", "\"\<RealTimePairProduct\>\""}]}], 
           "]"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"InnerProduct", " ", "lacks", " ", "the", " ", "highest", " ", 
         RowBox[{"grade", ":", " ", 
          RowBox[{
          "this", " ", "is", " ", "the", " ", "consequece", " ", "of", " ", 
           "pecularity", " ", "of", " ", "multiplication", " ", "by", " ", 
           RowBox[{"scalar", "!"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"(*", " ", 
        RowBox[{
        "we", " ", "simply", " ", "append", " ", "0", " ", "as", " ", "a", 
         " ", "last", " ", "element", " ", "to", " ", "follow", " ", 
         "general", " ", "pattern"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPrecomputedPairProduct", "[", 
         RowBox[{"alg", ",", "\"\<PlainRepresentation\>\"", ",", "h"}], "]"}],
         "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"c1Name", "/@", "indexRange"}], ",", 
            RowBox[{"c2Name", "/@", "indexRange"}]}], "}"}], ",", "c3", ",", 
          RowBox[{"Internal`PartitionRagged", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"h", "===", "InnerProduct"}], ",", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"precomputedProductComponents", ",", "0"}], "}"}], 
               "]"}], ",", "precomputedProductComponents"}], "]"}], ",", 
            "allGrades"}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]", "]"}],
     "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaPrecomputedPairProduct", "[", 
       RowBox[{"alg", ",", "\"\<PlainRepresentation\>\"", ",", "h"}], "]"}], 
      "]"}], "===", "gaPrecomputedPairProduct"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[434]:=",ExpressionUUID->"7327d958-2540-4a40-b762-dcbceaf5ea55"],

Cell["\<\
We only need to do this once. The symbolic computation is performed using \
Method->\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote], \
defined below.\
\>", "Text",ExpressionUUID->"0902450e-f99e-4893-a317-b94c0d031684"],

Cell[TextData[{
 "After distribution over sum we perform collection of terms. Note, that when \
expanding pair we modify singleton behaviour with \
CoefficientFunction->pureFunction, depending on our needs. Two most useful \
choices are   CoefficientFunction->Identity, and  CoefficientFunction->Expand \
(the default). The CoefficientFunction->Identity choice do not perform any \
operation on collected coefficients. This is useful when dealing with \
numerical coefficients (except if numeric coefficients are expressions like \
Sqrt[2]+1/Sqrt[3], ... etc. When working with symbolic coefficients   \
CoefficientFunction->Expand is safe choice. Other possibilities like \
CoefficientFunction->Simplify[Together[#]]& are possible, though most \
probably will considerably slowdown computation. Option MaxIterations is only \
useful for testing purpose. It stops expansion after given number of \
operations. The default is MaxIteration -> Infinity, i.e. full expansion. May \
be it is worth to consider to use ",
 Cell[BoxData[
  RowBox[{"System`Private`SetNoEntry", "[", "]"}]], "Input",ExpressionUUID->
  "d4f0dcd4-0b1b-43d9-a03e-47587619bb2c"],
 " in order to make some functions Atomic-like (there is subtlety, however, \
that we have to apply this function to every instance of an created \
expression, which is probably is not what we want)."
}], "Text",ExpressionUUID->"138424f0-bd1d-4c98-9a21-b3b210d0eb48"],

Cell["\<\
General options: Quiet\[Rule]True,CoefficientFunction\[Rule]Expand,
Method options are: \
Method\[Rule]{\[OpenCurlyDoubleQuote]PrecomputedPairProduct\
\[CloseCurlyDoubleQuote],OmitGrades\[Rule]{}}; Method\[Rule]{\
\[OpenCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote],\
MaxIterations->infinity}; \
Method\[Rule]{\[OpenCurlyDoubleQuote]ConvolutionPairProduct\
\[CloseCurlyDoubleQuote]}.  The fastest method seems to be \
\[OpenCurlyDoubleQuote]ConvolutionPairProduct\[CloseCurlyDoubleQuote] however \
it requires to find all components of multivector (in the Running algebra). \
This is not convenient, for example, when we have Quaternionic coefficients. \
Therefore after some experimentation we decided to default to slightly \
slower, but a more universal method. \
\>", "Text",ExpressionUUID->"55b4e479-795d-41f7-be66-9d4f48376c44"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductPairExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<RealTimePairProduct\>\"", ",", 
        RowBox[{"MaxIterations", "->", "Infinity"}]}], "}"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "testOptionProductPairExpand", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"simple", " ", "option", " ", "case"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionProductPairExpand", "[", "\"\<CoefficientFunction\>\"", "]"}], 
   "=", 
   RowBox[{
   "Expand", "|", "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionProductPairExpand", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductPairExpand", "[", 
    RowBox[{"\"\<CoefficientFunction\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Expand", "|", "Identity", "|", "_Function"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionProductPairExpand", "[", 
     RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "case", " ", "of", " ", "option", " ", "which", " ", "may", " ", "have", 
    " ", "suboptions"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductPairExpand", "[", "\"\<Method\>\"", "]"}], "=", 
   RowBox[{
   "\"\<ConvolutionPairProduct ()\>\"", "|", 
    "\"\<RealTimePairProduct (MaxIterations)\>\"", "|", 
    "\"\<PrecomputedPairProduct (OmitGrades)\>\"", "|", 
    "\"\<Identity\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionProductPairExpand", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<RealTimePairProduct\>\"", ",", "\"\<MaxIterations\>\""}], 
      "}"}], "]"}], "=", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<RealTimePairProduct\>\"", ",", 
       RowBox[{"MaxIterations", "->", 
        RowBox[{"Alternatives", "[", 
         RowBox[{"Infinity", ",", "\"\<Non negative integer\>\""}], "]"}]}]}],
       "}"}], "]"}]}], ";", 
   RowBox[{
    RowBox[{"testOptionProductPairExpand", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<PrecomputedPairProduct\>\"", ",", "\"\<OmitGrades\>\""}], 
      "}"}], "]"}], "=", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<PrecomputedPairProduct\>\"", ",", 
       RowBox[{"OmitGrades", "->", 
        RowBox[{"Alternatives", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\"\<list of nonnegative integers\>\""}], 
         "]"}]}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductPairExpand", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<ConvolutionPairProduct\>\"", "|", "\"\<RealTimePairProduct\>\"", 
      "|", "\"\<PrecomputedPairProduct\>\"", "|", "\"\<Identity\>\""}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductPairExpand", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<ConvolutionPairProduct\>\"", "|", "\"\<RealTimePairProduct\>\"", 
        "|", "\"\<PrecomputedPairProduct\>\"", "|", "\"\<Identity\>\""}]}], 
      "]"}], "&&", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"Rest", "[", "val", "]"}], ",", 
       RowBox[{
        RowBox[{"testOptionProductPairExpand", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"val", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ")"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductPairExpand", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<RealTimePairProduct\>\"", ",", "\"\<MaxIterations\>\""}], 
      "}"}], ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{"Infinity", ",", 
       RowBox[{"_Integer", "?", "NonNegative"}]}], "]"}]}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"testOptionProductPairExpand", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<PrecomputedPairProduct\>\"", ",", "\"\<OmitGrades\>\""}], 
      "}"}], ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"{", 
      RowBox[{"___Integer", "?", "NonNegative"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "\"\<ConvolutionPairProduct\>\"", "|", "\"\<RealTimePairProduct\>\"", 
        "|", "\"\<PrecomputedPairProduct\>\"", "|", "\"\<Identity\>\""}], ",",
        "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], ";"}]}], "Input",
 CellLabel->
  "In[435]:=",ExpressionUUID->"f9085a54-4b3d-492b-881d-9890607272e1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "Method"}], "=", 
   "\"\<Product pair expand method `1` is unknown. Possible option values are \
Method -> \\\"PrecomputedPairProduct\\\" or Method->\\\"RealTimePairProduct\\\
\" or \\\"ConvolutionPairProduct\\\". Setting method to \
Method->\\\"RealTimePairProduct\\\"\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "MultipleAlgebras"}], "=", 
   "\"\<Product pair contains elements of different algebras `1`. The \
expansion Method->\\\"PrecomputedPairProduct\\\" will not work. Switching \
expansion method to \\\"RealTimePairProduct\\\". The option OmitGrades will \
be ignored.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[447]:=",ExpressionUUID->"98b41fa9-f08e-444c-aef4-f2c860d29212"],

Cell["\<\
The expansion of pair of product with complicated coefficients in front of \
base vectors.  explicitOptionList contains options set by higher order \
function gaProductExpand in the following order: \
{CoefficientFunction,Quiet,Method,MaxIterations,OmitGrades}. \
\>", "Text",ExpressionUUID->"b2e09b0e-55ec-4936-b10d-fbb2f1999dfc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair", 
    " ", "expansion", " ", "work", " ", "using", " ", "Method", " ", 
    "\"\<RealTimePairProduct\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "singleton", " ", "should", " ", "be", " ", "defined", " ", "inside", " ", 
    
    RowBox[{"gaProductPairExpand", "[", " ", "]"}], " ", 
    RowBox[{"body", " ", "!"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"the", " ", "single", " ", "Distribute"}], ",", " ", 
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", 
      RowBox[{"collectOnDemand", "[", 
       RowBox[{"Distribute", "[", "h", "]"}], "]"}]}], "\[IndentingNewLine]", 
     "fails", " ", "to", " ", "gaPE", " ", "the", " ", "Cl", 
     RowBox[{"(", 
      RowBox[{"6", ",", "0"}], ")"}], " ", "expression", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<(a[0] p[0,2,1]+p[4,2,1] (a[47] \!\(\*TemplateBox[{
TemplateBox[{\"1\", \"2\", \"5\", \"6\"}, \"mvDownUp\", DisplayFunction :> \
(StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 2, 5, 6}, {}]\"], 
TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)+a[49] \
\!\(\*TemplateBox[{
TemplateBox[{\"1\", \"3\", \"4\", \"6\"}, \"mvDownUp\", DisplayFunction :> \
(StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 3, 4, 6}, {}]\"], 
TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)))\
\[GeometricProduct](a[0] p[0,1,1]+p[4,1,1] (a[47] \!\(\*TemplateBox[{
TemplateBox[{\"1\", \"2\", \"5\", \"6\"}, \"mvDownUp\", DisplayFunction :> \
(StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 2, 5, 6}, {}]\"], 
TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)+a[49] \
\!\(\*TemplateBox[{
TemplateBox[{\"1\", \"3\", \"4\", \"6\"}, \"mvDownUp\", DisplayFunction :> \
(StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 3, 4, 6}, {}]\"], 
TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)))\>\"", ".", 
      "\[IndentingNewLine]", "It"}], " ", "will", " ", "result", " ", "into", 
     " ", "non", " ", "Expanded", " ", "inner", " ", "product", " ", "inside",
      " ", 
     RowBox[{"times", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "solutions", " ", "would", " ", "be", " ", "apply", " ", 
    "distribution", " ", "repeatedly"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"FixedPoint", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"argh_", "[", 
           RowBox[{"arg0___", ",", "arg1_Plus", ",", "arg2___"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"collectOnDemand", "[", 
            RowBox[{"Distribute", "[", 
             RowBox[{"argh", "[", 
              RowBox[{"arg0", ",", "arg1", ",", "arg2"}], "]"}], "]"}], "]"}],
            "/;", 
           RowBox[{"(", 
            RowBox[{"argh", "===", 
             RowBox[{"Head", "[", "h", "]"}]}], ")"}]}]}], "}"}]}], ")"}], 
      "&"}], ",", "h"}], "]"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"we", " ", "want", " ", "evaluate", " ", "replacement"}], ",", 
    " ", 
    RowBox[{
     RowBox[{
      RowBox[{
      "therefore", " ", "we", " ", "have", " ", "to", " ", "use", "  ", 
       "Trott"}], "-", 
      RowBox[{"Strzebonski", " ", "in"}], "-", 
      RowBox[{"place", " ", "evaluation", " ", 
       RowBox[{"technique", ":", " ", "n_Real"}]}]}], "\[RuleDelayed]", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"eval", "=", 
          RowBox[{"f", "[", "n", "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"g", "[", "eval", "]"}], "/;", "True"}]}], "]"}], " ", "or", 
      " ", "better", " ", "undocumented", " ", 
      RowBox[{"RuleCondition", "[", "]"}], " ", "command"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaProductPairExpand", "[", 
     RowBox[{
      RowBox[{"h", ":", 
       RowBox[{"(", 
        RowBox[{
        "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|", 
         "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{
       "sf_", ",", "quiet_", ",", "\"\<RealTimePairProduct\>\"", ",", 
        "maxIter_", ",", "_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Expansion method is\>\"", ",", 
            "\"\<RealTimePairProduct\>\""}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<The expanded pair is\>\"", ",", "h"}], "}"}]}], 
         "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"singleton", "[", "expr_", "]"}], ":=", 
       RowBox[{
        RowBox[{"singleton", "@@", 
         RowBox[{"{", 
          RowBox[{"sf", "[", 
           RowBox[{"(", 
            RowBox[{"expr", "/.", 
             RowBox[{"{", 
              RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], ")"}], 
           "]"}], "}"}]}], "/;", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "_singleton"}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"FixedPoint", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"argh_", "[", 
               RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], "\[RuleDelayed]", 
              RowBox[{"RuleCondition", "[", 
               RowBox[{
                RowBox[{"collectOnDemand", "[", 
                 RowBox[{"Distribute", "[", 
                  RowBox[{"argh", "[", 
                   RowBox[{"arg1", ",", "arg2"}], "]"}], "]"}], "]"}], ",", 
                RowBox[{"(", 
                 RowBox[{"argh", "===", 
                  RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"argh_", "[", 
               RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], "\[RuleDelayed]", 
              RowBox[{"RuleCondition", "[", 
               RowBox[{
                RowBox[{"collectOnDemand", "[", 
                 RowBox[{"Distribute", "[", 
                  RowBox[{"argh", "[", 
                   RowBox[{"arg0", ",", "arg1"}], "]"}], "]"}], "]"}], ",", 
                RowBox[{"(", 
                 RowBox[{"argh", "===", 
                  RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], 
            "}"}]}], ")"}], "&"}], ",", "h", ",", "maxIter"}], "]"}]}], 
     "\[IndentingNewLine]", ")"}]}], ";"}]}]], "Input",
 CellLabel->
  "In[449]:=",ExpressionUUID->"4d56f0d6-284d-40f5-be73-3639f37cd201"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair", 
    " ", "expansion", " ", "work", " ", "using", " ", "Method", " ", 
    "\"\<ConvolutionPairProduct\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaProductPairExpand", "[", 
     RowBox[{
      RowBox[{"h", ":", 
       RowBox[{"(", 
        RowBox[{
        "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|", 
         "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{
       "sf_", ",", "quiet_", ",", "\"\<ConvolutionPairProduct\>\"", ",", "_", 
        ",", "_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Expansion method is\>\"", ",", 
            "\"\<ConvolutionPairProduct\>\""}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<The expanded pair is\>\"", ",", "h"}], "}"}]}], 
         "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Replace", "[", 
       RowBox[{"h", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"argh_", "[", 
            RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"RuleCondition", "[", 
            RowBox[{
             RowBox[{"Total", "[", 
              RowBox[{"ListConvolve", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"gaComponentList", "[", 
                   RowBox[{"arg1", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                   "0"}], "]"}], ",", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"gaComponentList", "[", 
                   RowBox[{"arg2", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                   "0"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", "argh", ",", 
                "Plus"}], "]"}], "]"}], ",", 
             RowBox[{"(", 
              RowBox[{"argh", "===", 
               RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"argh_", "[", 
            RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"RuleCondition", "[", 
            RowBox[{
             RowBox[{"Total", "[", 
              RowBox[{"ListConvolve", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"gaComponentList", "[", 
                   RowBox[{"arg0", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                   "0"}], "]"}], ",", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"gaComponentList", "[", 
                   RowBox[{"arg1", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                   "0"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", "argh", ",", 
                "Plus"}], "]"}], "]"}], ",", 
             RowBox[{"(", 
              RowBox[{"argh", "===", 
               RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], "}"}], 
        ",", "All"}], "]"}]}], "\[IndentingNewLine]", ")"}]}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[450]:=",ExpressionUUID->"56c24d79-99ea-4a2a-92ba-6559d6ddc16b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair", 
    " ", "expansion", " ", "work", " ", "using", " ", "Method", " ", 
    "\"\<PrecomputedPairProduct\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "If", " ", "options", " ", "were", " ", "not", " ", "set", " ", "by", 
        " ", "gaProductExpand"}], ",", " ", 
       RowBox[{"we", " ", "call", " ", 
        RowBox[{"gaProductPairExpand", "[", " ", "]"}], " ", "with", " ", 
        "different", " ", "args"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
            "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{
          "sf_", ",", "quiet_", ",", "\"\<PrecomputedPairProduct\>\"", ",", 
           "maxIter_", ",", "omitGrades_"}], "}"}]}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"theAlgebraList", "=", 
            RowBox[{"gaGetAlgebra", "[", 
             RowBox[{"h", ",", 
              RowBox[{"Method", "\[Rule]", "\"\<All\>\""}]}], "]"}]}], ",", 
           "theAlgebra", ",", "coefficientReplacementRules", ",", 
           "theGradesToExtract", ",", "formalMV"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"singleton", "[", "expr_", "]"}], ":=", 
           RowBox[{
            RowBox[{"singleton", "@@", 
             RowBox[{"{", 
              RowBox[{"sf", "[", 
               RowBox[{"(", 
                RowBox[{"expr", "/.", 
                 RowBox[{"{", 
                  RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                ")"}], "]"}], "}"}]}], "/;", 
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{"expr", ",", "_singleton"}], "]"}]}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "theAlgebraList", "]"}], "===", "1"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theAlgebra", "=", 
              RowBox[{"theAlgebraList", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "realisation", " ", "of", " ", 
               "PrecomputedPairProductExpansion", " ", "method"}], " ", 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{"theGradesToExtract", "=", 
              RowBox[{"Complement", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{
                  "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
                 "]"}], ",", "omitGrades"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "[", 
                 RowBox[{"gaPrecomputedPairProduct", "[", 
                  RowBox[{
                  "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                   "h"}], "]"}], "]"}], "===", "gaPrecomputedPairProduct"}], 
               ",", 
               RowBox[{"gaDefineExpandedPairProduct", "[", 
                RowBox[{"theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                 RowBox[{"Head", "[", "h", "]"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"formalMV", "=", 
              RowBox[{
               RowBox[{"gaPrecomputedPairProduct", "[", 
                RowBox[{"theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                 RowBox[{"Head", "[", "h", "]"}]}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{"coefficientReplacementRules", "=", 
               RowBox[{"Dispatch", "[", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"Thread", "/@", 
                  RowBox[{"Rule", "@@@", 
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", 
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "singleton"}], "]"}]}], 
                    ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_\[FormalC]", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}], "&"}], "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "h"}], ")"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"formalMV", ",", "formalMV"}], "}"}]}], ")"}]}]}],
                     "}"}], "]"}]}]}], "]"}], "]"}]}], ")"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Total", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"Extract", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Last", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "]"}], "/.", 
                    "coefficientReplacementRules"}], ")"}], ",", 
                  RowBox[{"List", "/@", 
                   RowBox[{"(", 
                    RowBox[{"theGradesToExtract", "+", "1"}], ")"}]}]}], 
                 "]"}], "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "fall", " ", "back", " ", "to", " ", "RealTimePairProduct", " ", 
              "method", " ", "if", " ", "base", " ", "elements", " ", "of", 
              " ", "few", " ", "different", " ", "algebras", " ", "present"}],
              " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaProductPairExpand", "::", "MultipleAlgebras"}], ",",
                "theAlgebra"}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"{", 
               RowBox[{"h", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "sf", ",", "quiet", ",", "\"\<RealTimePairProduct\>\"", ",", 
                  "maxIter", ",", "omitGrades"}], "}"}]}], "}"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellLabel->
  "In[451]:=",ExpressionUUID->"c827b010-68f7-4325-94f6-e8f815412710"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "sometimes", " ", "we", " ", "just", " ", "want", " ", "to", " ", "see", 
    " ", "constructed", " ", "expressions", " ", "without", " ", 
    RowBox[{"expansion", "."}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaProductPairExpand", "[", 
     RowBox[{
      RowBox[{"h", ":", 
       RowBox[{"(", 
        RowBox[{
        "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|", 
         "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{
       "_", ",", "quiet_", ",", "\"\<Identity\>\"", ",", "_", ",", "_"}], 
       "}"}]}], "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Expansion method is\>\"", ",", "\"\<Identity\>\""}], 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<The expanded pair is\>\"", ",", "h"}], "}"}]}], 
         "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "h"}], "\[IndentingNewLine]", ")"}]}], ";"}]}]], "Input",
 CellLabel->
  "In[452]:=",ExpressionUUID->"748d627b-a57d-4bef-9782-47769cb58cdd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Syntax", " ", "of", " ", "gaProductExpand", " ", "which", " ", 
     "determines", " ", "its", " ", "options"}], ",", " ", 
    RowBox[{
    "then", " ", "calls", " ", "appropriate", " ", "expansion", " ", 
     "method"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaProductPairExpand", "[", 
      RowBox[{
       RowBox[{"h", ":", 
        RowBox[{"(", 
         RowBox[{
         "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|",
           "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
       RowBox[{"op", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "theOption", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Expansion", " ", "method", " ", "and", " ", "its", " ", "options", 
          " ", "determination"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaProductPairExpand", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionProductPairExpand", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "default", " ", "values", " ", "for", " ", "options", 
           " ", "if", " ", "they", " ", "were", " ", "not", " ", "set", " ", 
           "by", " ", "user", " ", "or", " ", "by", " ", "options"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
             "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
            "=", "Expand"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", "True"}]}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
            "\"\<RealTimePairProduct\>\""}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Geometric", " ", "product", " ", "expansion", " ", "realisation"}],
           " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
           "\[IndentingNewLine]", "\"\<ConvolutionPairProduct\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaProductPairExpand", "[", 
            RowBox[{"h", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}],
                ",", 
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               "\"\<ConvolutionPairProduct\>\"", ",", "Infinity", ",", 
               RowBox[{"{", "}"}]}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "\"\<RealTimePairProduct\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Head", "[", 
                RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], 
                "]"}], "===", "theOption"}], ",", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], "=", 
               "Infinity"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"gaProductPairExpand", "[", 
             RowBox[{"h", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], ",", 
                RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                "\"\<RealTimePairProduct\>\"", ",", 
                RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], ",", 
                RowBox[{"{", "}"}]}], "}"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<PrecomputedPairProduct\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Head", "[", 
                RowBox[{"theOption", "[", "\"\<OmitGrades\>\"", "]"}], "]"}], 
               "===", "theOption"}], ",", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<OmitGrades\>\"", "]"}], "=", 
               RowBox[{"{", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"h", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], ",", 
                 
                 RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                 "\"\<PrecomputedPairProduct\>\"", ",", "Infinity", ",", 
                 RowBox[{"theOption", "[", "\"\<OmitGrades\>\"", "]"}]}], 
                "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", "\"\<Identity\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaProductPairExpand", "[", 
            RowBox[{"h", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}],
                ",", 
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               "\"\<Identity\>\"", ",", "Infinity", ",", 
               RowBox[{"{", "}"}]}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "::", "Method"}], ",", 
              RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "]"}], ";",
             "\[IndentingNewLine]", "h"}]}], "\[IndentingNewLine]", "]"}]}]}],
        "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"h", ",", "_Association"}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"help", " ", "functions"}], ",", " ", 
     RowBox[{"which", " ", "are", " ", "inavoidable"}], ",", " ", 
     RowBox[{
     "because", " ", "these", " ", "patterns", " ", "occur", " ", "in", " ", 
      "evaluation", " ", "steps"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"these", " ", "rules", " ", "occur", " ", "less", " ", "often"}],
      ",", " ", 
     RowBox[{
     "therefore", " ", "speed", " ", "is", " ", "enhanced", " ", "when", " ", 
      "they", " ", "put", " ", "in", " ", "the", " ", "end"}]}], "*)"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaProductPairExpand", "[", 
      RowBox[{"c_", ",", "___"}], "]"}], ":=", 
     RowBox[{"c", "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaProductPairExpand", "[", 
      RowBox[{
       RowBox[{"c_", "*", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
           "|", "_LeftContract", "|", "_RightContract"}], ")"}]}]}], ",", 
       "opts___"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"c", "*", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{"h", ",", "opts"}], "]"}]}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[453]:=",ExpressionUUID->"61e46c38-c5fa-4a1c-9d6d-95a2b84aac44"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaProductExpand[ ] main part"
}], "Subsubsection",ExpressionUUID->"0448ac83-0765-4982-82c1-39f9ead2d5e1"],

Cell[TextData[{
 "The main command is gaProductExpand[ ]. It doesn\[CloseCurlyQuote]t expand \
anything. It only makes pairs of product for expansion and don\
\[CloseCurlyQuote]t touch pieces which should not be expanded. In the end it \
removes singleton from the end result. Spitting the expression into expansion \
pairs yields huge speedup factor. For example if we have to multiply 3 \
general MV of some algebra with 2^n basis elements, then multiplying them all \
with outer will result into (2^n)^3 operations. Whereas when doing pairwise \
we will have just (2^n)^2+(2^n)^2. For example for n=6 the difference is ",
 Cell[BoxData["262144"], "Output",
  CellChangeTimes->{3.7759637544088907`*^9},ExpressionUUID->
  "6150ac4d-e776-4c7e-ab99-5788076f4439"],
 " versus just ",
 Cell[BoxData["8192"], "Output",
  CellChangeTimes->{{3.7759637544088907`*^9, 3.775963778120125*^9}},
  ExpressionUUID->"00d8e020-fdbc-451e-a880-06fd3c58e817"],
 "! "
}], "Text",ExpressionUUID->"7c2ee06b-a5f5-419a-97dc-d7e8c1cd7a4e"],

Cell["\<\
 MaxIterations\[Rule]Infinity is a possible option for Method\[Rule]\
\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote] only ;   \
OmitGrades\[Rule]{} is a possible option for Method\[Rule]\
\[OpenCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote] only.  \
Option IncludeProductPairExpandOptionValues\[Rule]False means that we do not \
directly pass ProductPairExpand options to that command and, instead, it \
should check and apply the options itself. This will result in multiple \
evaluation of the same option, so is slower. We hide the option name from \
user.\
\>", "Text",ExpressionUUID->"eb9a7399-6043-4267-9511-a938f5857789"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "ExceptionHeads"}], "=", 
   "\"\<Nonexpandable product were specified. Selected Method -> \
\\\"ConvolutionPairProduct\\\" does not support this feature and will be \
replaced by Method->\\\"RealTimePairProduct\\\". \>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "MV"}], "=", 
   "\"\<General heads MV[] are present. Selected Method -> \
\\\"ConvolutionPairProduct\\\" does not support this feature and will be \
replaced by Method->\\\"RealTimePairProduct\\\". \>\""}], ";"}]}], "Input",
 CellLabel->
  "In[456]:=",ExpressionUUID->"aafc5dec-8485-4a90-9d7d-5eb97ef83702"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Except", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
     "\"\<IncludeProductPairExpandOptionValues\>\"", "\[Rule]", "True"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "testOptionProductExpand", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"simple", " ", "option", " ", "case"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductExpand", "[", "\"\<Except\>\"", "]"}], "=", 
   "\"\<{GeometricProduct,OuterProduct,InnerProduct,LeftContract,\
RightContract} in any combination\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionProductExpand", "[", 
     "\"\<IncludeProductPairExpandOptionValues\>\"", "]"}], "=", 
    "\"\<True | False\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductExpand", "[", 
    RowBox[{"\"\<Except\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"ContainsAll", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
       "LeftContract", ",", "RightContract"}], "}"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", "val", "}"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionProductExpand", "[", 
    RowBox[{"\"\<IncludeProductPairExpandOptionValues\>\"", ",", "val_"}], 
    "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaProductExpand", ",", 
    RowBox[{"{", "Listable", "}"}]}], "]"}], ";"}]}], "Input",
 CellLabel->
  "In[458]:=",ExpressionUUID->"021bc6fa-42d9-4670-9d1d-2362e05b6cda"],

Cell["Go inside plus immediately to save time", "Text",ExpressionUUID->"c76fc2cf-e657-4549-bffb-c4396730ae65"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"c_Plus", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "c"}], ")"}], "/.", 
     RowBox[{"{", 
      RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[465]:=",ExpressionUUID->"1fa16ea5-5c31-4d18-b975-749311e3e226"],

Cell["\<\
Limitation: partial evaluation of expansion (some replacements to \
gaProductPairExpand) occur in held expressions do to application of \
replacement rules. \
\>", "Text",ExpressionUUID->"cc58b865-aec2-4022-87dc-3185c8c3eacd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaProductExpand", ",", "gaProductPairExpand"}], "}"}], 
      "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"exceptHeads", "=", 
        RowBox[{
         RowBox[{"gaOptionCheck", "[", "testOptionProductExpand", "]"}], "[", 
         
         RowBox[{"OptionValue", "[", 
          RowBox[{"gaProductExpand", ",", "\"\<Except\>\""}], "]"}], "]"}]}], 
       ",", 
       RowBox[{"includeExplicitOptionValues", "=", 
        RowBox[{
         RowBox[{"gaOptionCheck", "[", "testOptionProductExpand", "]"}], "[", 
         
         RowBox[{"OptionValue", "[", 
          RowBox[{
          "gaProductExpand", ",", 
           "\"\<IncludeProductPairExpandOptionValues\>\""}], "]"}], "]"}]}], 
       ",", 
       RowBox[{"allProductPairExpandOptions", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "op", "}"}], ",", 
          RowBox[{"Options", "[", "gaProductPairExpand", "]"}]}], "]"}]}], 
       ",", "theOption", ",", "restOpts", ",", "trueHeads", ",", 
       "trueHeadsHeads", ",", "trueHeadsBlanks"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"set", " ", "values", " ", "of", " ", "all", " ", 
        RowBox[{"options", ":", " ", 
         RowBox[{"exeptional", " ", "usage"}]}]}], ",", " ", 
       RowBox[{
       "we", " ", "set", " ", "options", " ", "for", " ", 
        "gaProductPairExpand", " ", "not", " ", "gaProductExpand"}]}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"includeExplicitOptionValues", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaProductPairExpand", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionProductPairExpand", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"First", "/@", "allProductPairExpandOptions"}], ")"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
            "\"\<RealTimePairProduct\>\""}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], "]"}], 
            "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], "=", 
            "Infinity"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<OmitGrades\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<OmitGrades\>\"", "]"}], "=", 
            RowBox[{"{", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
             "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
            "=", "Expand"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", "True"}]}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"restOpts", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
            ",", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<OmitGrades\>\"", "]"}]}], 
           "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"old", " ", "behaviour"}], ",", " ", 
          RowBox[{
          "when", " ", "gaProductPairExpand", " ", "evaluates", " ", 
           "options", " ", "itself"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"restOpts", "=", 
         RowBox[{"Sequence", "@@", "allProductPairExpandOptions"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"trueHeads", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
           "LeftContract", ",", "RightContract"}], "}"}], ",", 
         RowBox[{"Alternatives", "@@", "exceptHeads"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"We", " ", "list", " ", "with", " ", 
        RowBox[{"Cases", "[", " ", "]"}], " ", "all", " ", "patterns", " ", 
        "matched", " ", "and", " ", "then", " ", "do", " ", "step", " ", "by",
         " ", "step", " ", "all", " ", "replacements"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "For", " ", "products", " ", "with", " ", "multiple", " ", "terms"}], 
        ",", " ", 
        RowBox[{"which", " ", "require", " ", "expansion"}], ",", " ", 
        RowBox[{
        "split", " ", "into", " ", "product", " ", "of", " ", "pairs", " ", 
         "for", " ", "speed"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"If", " ", "exceptHeads"}], "=!=", 
         RowBox[{
          RowBox[{"{", "}"}], " ", "we", " ", 
          RowBox[{"can", "'"}], "t", " ", "use", " ", "faster", " ", 
          "\"\<ConvolutionPairProduct\>\"", " ", "method"}]}], ",", " ", 
        RowBox[{
        "therefore", " ", "swich", " ", "to", " ", "slower", " ", 
         "\"\<RealTimePairProduct\>"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "gaTogehter", " ", "deals", " ", "with", " ", "multivectors", " ", 
        "in", " ", "Association", " ", "representation"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"exceptHeads", "===", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"No", " ", "exception", " ", "heads"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"expression", ",", "_MV"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"No", " ", "general", " ", "heads", " ", 
            RowBox[{"MV", "[", " ", "]"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"restOptsEval", "=", "restOpts"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"gaAssociationTogether", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ReleaseHold", "@@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"Fold", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ReplaceAll", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOptsEval"}], "]"}], ")"}]}], 
                    ")"}]}], ",", "Infinity"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], ",", "Infinity"}], "]"}], 
                    "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", 
                    RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], 
                    ",", "restOpts1___"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts1"}], 
                    "]"}], ",", "arg2"}], "]"}], ",", "restOpts1"}], "]"}]}], 
                   "}"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}],
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "when", " ", "general", " ", "MV", " ", "present", " ", "use", 
             " ", "Method"}], "->", "\"\<RealTimePairProduct\>\""}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "restOpts", "}"}], ",", 
                "\"\<ConvolutionPairProduct\>\""}], "]"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "if", " ", "the", " ", "user", " ", "specified", " ", "the", 
               " ", "expansion", " ", "method", " ", "we", " ", "warn", " ", 
               "and", " ", "replace", " ", "it", " ", "to", " ", 
               "\"\<RealTimePairProduct\>\""}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
              "includeExplicitOptionValues", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaProductExpand", "::", "MV"}], ",", 
                  RowBox[{"restOpts", "[", 
                   RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"restOpts", "=", 
                 RowBox[{"ReplacePart", "[", 
                  RowBox[{"restOpts", ",", 
                   RowBox[{"{", 
                    RowBox[{"3", "\[Rule]", "\"\<RealTimePairProduct\>\""}], 
                    "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaProductExpand", "::", "MV"}], ",", 
                  RowBox[{"Method", "/.", 
                   RowBox[{"{", "restOpts", "}"}]}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"restOpts", "=", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"{", "restOpts", "}"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<ConvolutionPairProduct\>\"", "\[Rule]", 
                    "\"\<RealTimePairProduct\>\""}], "}"}]}], ")"}]}]}]}]}], 
              "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"if", " ", "not"}], ",", " ", 
               RowBox[{
               "just", " ", "use", " ", "the", " ", "appropriate", " ", 
                "method"}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", "includeExplicitOptionValues"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"restOpts", "=", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "restOpts", "}"}], ",", 
                    RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}],
                     "}"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
              ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"restOptsEval", "=", "restOpts"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"gaAssociationTogether", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"ReleaseHold", "@@", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Fold", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ReplaceAll", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOptsEval"}], "]"}], ")"}]}], 
                    ")"}]}], ",", "Infinity"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], ",", "Infinity"}], "]"}], 
                    "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", 
                    RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], 
                    ",", "restOpts1___"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts1"}], 
                    "]"}], ",", "arg2"}], "]"}], ",", "restOpts1"}], "]"}]}], 
                    "}"}]}], "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
              "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], 
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "general", " ", "MV", " ", "test"}], " ", "*)"}],
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "when", " ", "exception", " ", "heads", " ", "are", " ", "present", 
          " ", "we", " ", "remove", " ", "them", " ", "from", " ", 
          "expansion", " ", "heads"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"trueHeadsHeads", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "trueHeads", "]"}], ",", "0", ",", 
            RowBox[{"{", "}"}], ",", "1", ",", 
            RowBox[{"trueHeads", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{"Alternatives", "@@", "trueHeads"}]}], "]"}]}], ";", 
         RowBox[{"trueHeadsBlanks", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "trueHeadsHeads", "]"}], ",", "0", ",", 
            RowBox[{"{", "}"}], ",", "1", ",", 
            RowBox[{"Blank", "[", "trueHeadsHeads", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{"Blank", "/@", "trueHeadsHeads"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "restOpts", "}"}], ",", 
              "\"\<ConvolutionPairProduct\>\""}], "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "if", " ", "the", " ", "user", " ", "specified", " ", "the", " ", 
             "expansion", " ", "method", " ", "we", " ", "warn", " ", "and", 
             " ", "replace", " ", "to", " ", "working", " ", "one"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"includeExplicitOptionValues", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "::", "ExceptionHeads"}], ",", 
                RowBox[{"restOpts", "[", 
                 RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"restOpts", "=", 
               RowBox[{"ReplacePart", "[", 
                RowBox[{"restOpts", ",", 
                 RowBox[{"{", 
                  RowBox[{"3", "\[Rule]", "\"\<RealTimePairProduct\>\""}], 
                  "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "::", "ExceptionHeads"}], ",", 
                RowBox[{"Method", "/.", 
                 RowBox[{"{", "restOpts", "}"}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"restOpts", "=", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", "restOpts", "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<ConvolutionPairProduct\>\"", "\[Rule]", 
                    "\"\<RealTimePairProduct\>\""}], "}"}]}], ")"}]}]}]}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"if", " ", "not"}], ",", " ", 
             RowBox[{
             "just", " ", "use", " ", "the", " ", "appropriate", " ", 
              "method"}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", "includeExplicitOptionValues"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"restOpts", "=", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", "restOpts", "}"}], ",", 
                   RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}], 
                  "}"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"restOptsEval", "=", "restOpts"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaAssociationTogether", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"ReleaseHold", "@@", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Fold", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"ReplaceAll", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", "trueHeadsBlanks"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOptsEval"}], "]"}], ")"}]}], 
                    ")"}]}], ",", "Infinity"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"p", ":", "trueHeadsBlanks"}], ",", "Infinity"}], 
                    "]"}], "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", "trueHeadsHeads"}], ")"}], "[", 
                    RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], 
                    ",", "restOpts1___"}], "]"}], "\[RuleDelayed]", 
                   RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts1"}], 
                    "]"}], ",", "arg2"}], "]"}], ",", "restOpts1"}], "]"}]}], 
                  "}"}]}], "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"FreeQ", "[", 
    RowBox[{
     RowBox[{"{", "expression", "}"}], ",", "_gaProductExpand"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaPE", "=", "gaProductExpand"}], ";"}]}], "Input",
 CellLabel->
  "In[466]:=",ExpressionUUID->"13c4ae59-d5a1-4a31-b988-77d9db68979c"],

Cell["\<\
In some rare cases we have to apply both Expand and gaProductExpand \
repeatedly until expression gets expanded. For this rare cases we can apply \
gaExpand[], which do full expansion of all products. Seems that now this \
never happens, so the command is inactivated\
\>", "Text",ExpressionUUID->"1b491b00-38e7-4122-9007-d010877959c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "[", 
    RowBox[{"expression_Plus", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaAssociationTogether", "[", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "]"}], "&"}], "/@", "expression"}],
     "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"55d8dedd-d467-4c3b-b177-c2c5317c633b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"FixedPoint", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Expand", "[", 
       RowBox[{"gaExpand", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "]"}], "&"}], ",", "expression"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "expression", "]"}], "=!=", "Plus"}]}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"20d29dc6-79a7-4ecf-bb08-55c5fdbfb895"],

Cell["\<\
Testing if expression is expanded becomes faster when we replace heads of \
functions (Sin, Exp, ... ) with unique noncommutative entity. Then search for \
Plus inside operator\[CloseCurlyQuote]s head. Not ideal solution, but much \
faster than expression expansion itself. \
\>", "Text",ExpressionUUID->"e32028d4-92b2-43e3-b8ec-81c78a10cc57"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"removeFunctionRules", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", ":", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Sqrt", ",", "Power", ",", "Exp", ",", "Sin", ",", "Cos", ",", 
               "Tan", ",", "Cot", ",", "Csc", ",", "Sec"}], "}"}], ",", "#"}],
             "]"}], "&"}], ")"}]}]}], ")"}], "[", "___", "]"}], 
     "\[RuleDelayed]", 
     RowBox[{"MV", "[", 
      RowBox[{"Unique", "[", "rem", "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExpandedQ", "[", "expr_", "]"}], ":=", 
  RowBox[{"If", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"expr", "/.", "removeFunctionRules"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "Times", "|", "GeometricProduct", "|", "OuterProduct", "|", 
         "InnerProduct", "|", "LeftContract", "|", "RightContract"}], ")"}], 
       "[", 
       RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "===", "expr"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->
  "In[468]:=",ExpressionUUID->"14405df8-7d0e-4e46-9d5f-35206c4b48ec"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple powers"
}], "Subsubsection",ExpressionUUID->"e9852e09-3768-4c6e-b64d-bf2bf6152f36"],

Cell[TextData[{
 "Powers of geometric product. Implementation closely follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text",ExpressionUUID->"ef793601-d00d-43c0-aa04-7e819fefb9c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaGPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", "expr", ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaGPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[470]:=",ExpressionUUID->"f28afc16-3269-4c4f-a2b9-80319a23d6f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaGPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaGeometricMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaGPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[471]:=",ExpressionUUID->"a1b1155a-56f9-4926-b7ae-dddaf5faf899"],

Cell[TextData[{
 "Powers of outer product, Implementation closely follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". It is posible to calculate expansion of outer products of vectors (ONLY) \
using determinants, i.e. without expanding sum of orthogonal vectors. So, \
this is applied to powers as well. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text",ExpressionUUID->"d11091e8-0c4d-4efc-9d9a-fb5df010a8ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaOPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"OuterProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", 
       RowBox[{"gaProductExpand", "[", "expr", "]"}], ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"OuterProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaOPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"OuterProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[472]:=",ExpressionUUID->"d8b591fb-d604-47ae-aea8-9889b4f309ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaOPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaOuterMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaOuterMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaOPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaOuterMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[473]:=",ExpressionUUID->"f89425b2-664c-4cb7-a8c9-7eec6569a3c5"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector construction, random multivector with integer \
coefficients"
}], "Subsubsection",ExpressionUUID->"8b7e22b4-3ee7-4a88-b0c3-6670cd5a9840"],

Cell["\<\
For experimentation we often need to generate general multivector with \
specified grades. Here it is function for this. The gaGeneralMultivector[] \
always uses Format which was used by last gaDefineOrthonormalBasis[ ] command.\
\>", "Text",ExpressionUUID->"15609a48-176c-4b5b-be51-8872e9ad0be6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeneralMultivector", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeneralMultivector", "::", "grade"}], "=", 
    "\"\<The third (optional) argument `1` can be All or {__Integer?Positive}\
\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "when", " ", "optional", " ", "and", " ", "options", " ", "both", " ", 
     "exist", " ", "the", " ", "solution", " ", "is", " ", 
     RowBox[{"here", ":", " ", "https", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
        "questions"}], "/", "1567"}], "/", "how"}], "-", "to", "-", "avoid", 
     "-", "collision", "-", "between", "-", "optional", "-", "arguments", "-",
      "and", "-", "options"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"notOption", "=", 
   RowBox[{"Except", "[", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{"Function", "[", 
       RowBox[{"elem", ",", 
        RowBox[{"OptionQ", "[", 
         RowBox[{"Unevaluated", "[", "elem", "]"}], "]"}], ",", "HoldAll"}], 
       "]"}], ")"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[474]:=",ExpressionUUID->"f4b307cc-d22c-47fe-bf48-a08eafb31869"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaGeneralMultivector", "[", 
     RowBox[{"coefName_", ",", "al_Cl", ",", 
      RowBox[{"gr", ":", "notOption", ":", "All"}], ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ord", "=", 
         RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}],
         ",", 
        RowBox[{"grade", "=", "gr"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "===", 
          "gaOrthonormalBasis"}], ",", 
         RowBox[{"gaDefineOrthonormalBasis", "[", 
          RowBox[{"al", ",", 
           RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}], ",", 
           RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MatchQ", "[", 
           RowBox[{"grade", ",", " ", 
            RowBox[{"(", 
             RowBox[{"All", "|", " ", 
              RowBox[{"{", 
               RowBox[{"__Integer", "?", "NonNegative"}], "}"}]}], ")"}]}], 
           "]"}]}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaGeneralMultivector", "::", "grade"}], ",", "grade"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "For", " ", "general", " ", "multivector", " ", "use", " ", 
         "internal", " ", "form", " ", "of", " ", "last", " ", "generated", 
         " ", "base"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"grade", "===", 
            RowBox[{"{", "}"}]}], ")"}], "||", 
          RowBox[{"grade", "===", "All"}]}], ",", " ", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"coefName", "[", "i", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "0", ",", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "-", 
               "1"}]}], "}"}]}], "]"}], ".", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"al", ",", "ord", ",", "All"}], "]"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"coefName", "[", "i", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"Sum", "[", 
                   RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], ",",
                     "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], ",",
                     "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], "+", 
                   RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], ",",
                     "#"}], "]"}], "-", "1"}]}], "}"}]}], "]"}], ".", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", 
                RowBox[{"{", "#", "}"}]}], "]"}]}], "&"}], "/@", "grade"}], 
           ")"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[477]:=",ExpressionUUID->"6968128c-9b02-4473-985d-f47f22ebb6ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionRandomMultivector", "[", "\"\<CoefficientFunction\>\"", "]"}], 
    "=", "\"\<any transformation (i.e with head Function[]), for example, \
(RandomInteger[{-10,10}]&) that produces the coefficient at basis \
element\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionRandomMultivector", "[", 
    RowBox[{"\"\<CoefficientFunction\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", "_Function"}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[478]:=",ExpressionUUID->"d67e1b25-f760-4e84-a226-740454f5b515"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaRandomMultivector", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"CoefficientFunction", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", "10"}], "}"}], "]"}], "&"}], ")"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomMultivector", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr", ":", "notOption", ":", "All"}], ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"name", ",", "theOption"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaRandomMultivector", ",", "#", ",", "theOption"}], "}"}],
           ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionRandomMultivector", "]"}],
            "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], "=", 
         
         RowBox[{"(", 
          RowBox[{"CoefficientFunction", "/.", 
           RowBox[{"Options", "[", "gaRandomMultivector", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"name", ",", "al", ",", "gr"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"name", "[", "_", "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], "[",
           "]"}]}], "}"}]}]}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[480]:=",ExpressionUUID->"2be4857a-b924-40e5-9a10-3fb636b00bef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[482]:=",ExpressionUUID->"bd5d123f-28d6-42e3-be00-8b3c31286653"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Groebner Basis (only sorting is implemented at the moment)"
}], "Section",ExpressionUUID->"4ab2a7de-c546-41d1-8323-9e22cf95d22f"],

Cell[" Just beginning", "Text",ExpressionUUID->"a19554e5-b070-4348-818f-75d5881618a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaSort", ",", "gaOrdering", ",", "gbLeadingTerm", ",", 
     "gbLeadingMonomial", ",", "gbLeadingCoefficient"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[483]:=",ExpressionUUID->"cac0dba3-af78-423c-9ff3-d8f5cbe1fc52"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[484]:=",ExpressionUUID->"5a53a32b-db79-4b6b-b474-2ebb16d38fa1"],

Cell["Usage messages", "Text",ExpressionUUID->"c6a88457-c242-4231-b9df-496a4d350c30"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSort", "::", "usage"}], "=", 
   "\"\<gaSort[theExprList_List,order:(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\
\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\
\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[\
RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] sorts list theExprList in given \
order. The sorting rules first are defined using \
gaDefineAssociationRepresentationKeyOrder[] inside gaSort[]. Do not yet work \
in full generality, because the order for commutative elements is not yet \
added. To do.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[486]:=",ExpressionUUID->"b284e6cc-34e9-4ef2-ac37-67e0ddadf05b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrdering", "::", "usage"}], "=", 
   "\"\<gaOrdering[theExprList_List,order:(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"\
RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\"|\\\"Deg[\
RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[InvLex]\\\"|\
\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] output the order according \
to the gaSort order. This implementation first gaSort the expression and then \
output positions of the elements of the sorted list. \>\""}], ";"}]], "Input",\

 CellLabel->
  "In[487]:=",ExpressionUUID->"498fbaa8-87d1-416b-bce1-12e135b724a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "::", "usage"}], "=", 
   "\"\<gbLeadingTerm[expr_,ordering_String] returns leading term of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[488]:=",ExpressionUUID->"9eb3812d-a392-414e-93b4-91d2f63db6cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "::", "usage"}], "=", 
   "\"\<gbLeadingMonomial[expr_,ordering_String] returns leading monomial of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[489]:=",ExpressionUUID->"c3eb2f0a-5849-4e15-93ab-16c52f163801"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "::", "usage"}], "=", 
   "\"\<gbLeadingCoefficient[expr_,ordering_String] returns leading \
coefficient of multivector polynomial written in orthonormal base. Defined \
orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". \
These pure orderings can be proceeded with \\\"Deg[]\\\", and \
\\\"InvDeg[]\\\" wrappers, i.e. \\\"Deg[InvLex]\\\", etc..., totally giving \
4*3 possible orderings.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[490]:=",ExpressionUUID->"32458326-dcd6-43a5-80e4-90a391ddb388"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[491]:=",ExpressionUUID->"b35f5199-a110-430f-b087-037131104cfa"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection",ExpressionUUID->"b6561516-a159-44f7-b06a-b5d67a310748"],

Cell[TextData[{
 "Check if MV is the scalar.  An alternative ",
 Cell[BoxData[
 "mvZeroGradeQ"], "Input",ExpressionUUID->
  "804f1546-d9f2-48e3-af36-8d295bf08e8f"],
 "[ ] is slower and can in principle contain basis elements (scalar product \
of them, for example) "
}], "Text",ExpressionUUID->"c3ea3536-4405-4b03-93be-17d807aa1710"],

Cell[BoxData[
 RowBox[{
  RowBox[{"zeroGradeQ", "[", "expr_", "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"gaGradeList", "[", "expr", "]"}], ",", 
    RowBox[{"{", "0", "}"}], ",", "True", ",", "_", ",", "False"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[492]:=",ExpressionUUID->"66234a28-0812-40f6-87a1-9562fb888996"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Ordering and Sorting"
}], "Subsection",ExpressionUUID->"b118506b-84ea-4b48-80f1-482afa798ea4"],

Cell["\<\
Most ordering functions are defined in the \[OpenCurlyDoubleQuote]Index \
ordering and sorting\[CloseCurlyDoubleQuote] section (4.2.1). For higher \
order sort function we need to/from gaAssociationRepresentation function \
(since general expressions can only be reliably sorted in the Association \
form). \
\>", "Text",ExpressionUUID->"50dd7adb-330e-428e-8822-72e1906a7f5f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSort", "[", 
       RowBox[{"expr_List", ",", "_"}], "]"}], ":=", 
      RowBox[{"expr", "/;", 
       RowBox[{
        RowBox[{"Length", "[", "expr", "]"}], "\[LessEqual]", "1"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSort", "[", 
       RowBox[{"expr_List", ",", 
        RowBox[{"order", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
           "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
           "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
           "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
           "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
           "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"al", "=", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"expr", ",", "_Cl", ",", 
              RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ",", 
           "theOrderingRules", ",", "associationForm", ",", "scalars", ",", 
           "nonScalars", ",", "nonScalarsFin", ",", "exprExpanded"}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "at", " ", "the", " ", "moment", " ", "gaSort", " ", "cannot", " ",
             "sort", " ", "commutative", " ", "variable"}], ",", " ", 
           RowBox[{
           "we", " ", "do", " ", "nothing", " ", "in", " ", "this", " ", 
            "case"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"al", "===", 
            RowBox[{"{", "}"}]}], ",", "expr", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theOrderingRules", "=", 
             RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
              RowBox[{"al", ",", "order"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AllTrue", "[", 
               RowBox[{"expr", ",", "gaExpandedQ"}], "]"}], ",", 
              RowBox[{"exprExpanded", "=", "expr"}], ",", 
              RowBox[{"exprExpanded", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
                "expr"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "sorting", " ", "in", " ", "PlainRepresentation", " ", "is", " ", 
              RowBox[{"difficult", ".", " ", "Convert"}], " ", "to", " ", 
              "AssociationRepresentation", " ", "and", " ", "release", " ", 
              "pure", " ", 
              RowBox[{"scalars", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
            
            RowBox[{"associationForm", "=", 
             RowBox[{"gaAssociationRepresentation", "[", 
              RowBox[{"exprExpanded", ",", 
               RowBox[{
               "gaNonCommutativeMonomialOrder", "\[Rule]", "order"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"scalars", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"associationForm", ",", 
               RowBox[{"zeroGradeQ", "/@", "associationForm"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"nonScalars", "=", 
             RowBox[{"keyReplace", "[", 
              RowBox[{
               RowBox[{"Sort", "[", 
                RowBox[{"keyReplaceAndSort", "[", 
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"associationForm", ",", "_bs"}], "]"}], ",", 
                  "theOrderingRules"}], "]"}], "]"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"PositionIndex", "[", "theOrderingRules", "]"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "convert", " ", "back", " ", "if", " ", "Associations", " ", 
              "were", " ", "absent", " ", "in", " ", "initial", " ", 
              "expression"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{"exprExpanded", ",", "Association", ",", 
                RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], ",", 
              RowBox[{"nonScalarsFin", "=", 
               RowBox[{"gaPlainRepresentation", "[", "nonScalars", "]"}]}], 
              ",", 
              RowBox[{"nonScalarsFin", "=", "nonScalars"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "put", " ", "scalars", " ", "in", " ", "the", " ", "end", " ", 
              "or", " ", "beginning", " ", "depending", " ", "on", " ", 
              "sorting", " ", "order"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                  "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                  ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
                ",", "order"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"scalars", ",", "nonScalarsFin"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"nonScalarsFin", ",", "scalars"}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
         "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "expr", "]"}], ">", "1"}], ")"}]}]}], ";"}]}],
    "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[493]:=",ExpressionUUID->"85c32c5d-3f91-482c-9ac3-4eeda7931393"],

Cell["\<\
If arguments are not basis elements, then in order to decide  about the \
ordering we convert them into Association representation, where comparison is \
easier to decide. \
\>", "Text",ExpressionUUID->"87e938b2-1eb8-49f8-b371-35dbcfb60051"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_Plus", ",", "any2_", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
    RowBox[{
     RowBox[{"gaAssociationRepresentation", "[", "any1", "]"}], ",", 
     RowBox[{"gaAssociationRepresentation", "[", "any2", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_", ",", "any2_Plus", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
    RowBox[{
     RowBox[{"gaAssociationRepresentation", "[", "any1", "]"}], ",", 
     RowBox[{"gaAssociationRepresentation", "[", "any2", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[494]:=",ExpressionUUID->"e7b16c75-933a-40cf-9092-e3b6c8fde391"],

Cell["Ordering of MV in the association form. ", "Text",ExpressionUUID->"c3555e1b-7746-432b-b852-1cf08df5994b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", 
        RowBox[{"ord", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
           "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
           "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
           "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
           "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
           "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], "]"}], "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"any1_Association", ",", "al_Cl", ",", "sa___"}], "]"}], ",", 
        RowBox[{"bs", "[", 
         RowBox[{"any2_Association", ",", "al_Cl", ",", "sa___"}], "]"}]}], 
       "]"}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theOrderingRules", ",", "scalars"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theOrderingRules", "=", 
         RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
          RowBox[{"al", ",", "ord"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"scalars", "=", 
         RowBox[{"Pick", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"any1", ",", "any2"}], "}"}], ",", 
           RowBox[{"zeroGradeQ", "/@", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{"any1", ",", "al", ",", "sa"}], "]"}], ",", 
              RowBox[{"bs", "[", 
               RowBox[{"any2", ",", "al", ",", "sa"}], "]"}]}], "}"}]}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"scalars", "===", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"OrderedQ", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"keyReplaceAndSort", "[", 
              RowBox[{"any1", ",", "theOrderingRules"}], "]"}], ",", 
             RowBox[{"keyReplaceAndSort", "[", 
              RowBox[{"any2", ",", "theOrderingRules"}], "]"}]}], "}"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "one", " ", "of", " ", "args", " ", "is", " ", "a", 
             " ", "scalar"}], ",", " ", 
            RowBox[{
            "then", " ", "return", " ", "true", " ", "or", " ", "false", " ", 
             "depending", " ", "on", " ", "which"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"zeroGradeQ", "[", 
               RowBox[{"bs", "[", 
                RowBox[{"any1", ",", "al", ",", "sa"}], "]"}], "]"}], ",", 
              "True", ",", "False"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"zeroGradeQ", "[", 
               RowBox[{"bs", "[", 
                RowBox[{"any2", ",", "al", ",", "sa"}], "]"}], "]"}], ",", 
              "True", ",", "False"}], "]"}]}], "\[IndentingNewLine]", "]"}]}],
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[496]:=",ExpressionUUID->"b694e195-62ce-4ce9-a848-7a47c89dde3d"],

Cell["\<\
Sometimes we need to obtain ordering. In this slow solution we just first \
sort list and then take their positions from the sorted list. \
\>", "Text",ExpressionUUID->"662d848b-727d-419d-b9e4-93c8a07a6e97"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOrdering", "[", 
    RowBox[{"expr_List", ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", "1", "}"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "expr", "]"}], "\[LessEqual]", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrdering", "[", 
    RowBox[{"expr_List", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"expr", ",", "#"}], "]"}], "&"}], "/@", 
      RowBox[{"gaSort", "[", 
       RowBox[{"expr", ",", "order"}], "]"}]}], "]"}], "/;", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Length", "[", "expr", "]"}], ">", "1"}], ")"}]}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[497]:=",ExpressionUUID->"b4274ece-80bb-4cf5-8fbd-6e9ba4e39573"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Leading term, leading monomial and leading coefficient"
}], "Subsection",ExpressionUUID->"c634a8cb-e675-4382-85b2-fadcea828263"],

Cell[TextData[{
 " Ordering functions (i.e. ",
 StyleBox["gaOrderedQ",
  FontWeight->"Bold"],
 "[ ], etc... )  are realised in section ",
 StyleBox["3. Objects: orthonormal base notation and definition.",
  FontSlant->"Italic"],
 " Defined noncommutative orderings are \\\[CloseCurlyDoubleQuote] Lex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote]. These pure orderings can be proceeded with \\\
\[CloseCurlyDoubleQuote] Deg[]\\\[CloseCurlyDoubleQuote], and \\\
\[CloseCurlyDoubleQuote] InvDeg[]\\\[CloseCurlyDoubleQuote] wrappers, totally \
giving 4*3 possible orderings. Orders \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote] and the default order \\\[CloseCurlyDoubleQuote] \
InvDeg[Lex]\\\[CloseCurlyDoubleQuote] are not admissible and cannot be used \
as Groebner base monomial orders.  Commutative coefficients use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s orderings i.e. \\\[CloseCurlyDoubleQuote]Lexicographic \
\\\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] DegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
DegreeReverseLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeDegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
NegativeDegreeReverseLexicographic \\\[CloseCurlyDoubleQuote] and \\\
\[CloseCurlyDoubleQuote] Reverse[Lexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[DegreeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[DegreeReverseLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[NegativeDegreeLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeDegreeReverseLexicographic]\\\
\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"70b1ba68-52a1-434d-962b-3bafdab513ed"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exprList", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"Plus", "[", 
          RowBox[{"expr", ",", "Nothing"}], "]"}]}], ")"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "exprList", "]"}], "===", "1"}], ",", "expr", 
       ",", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], ",", "#1", ",", "#2"}], "]"}], 
          "&"}], ",", "exprList"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[499]:=",ExpressionUUID->"9fa3df2c-46dd-403a-9a0b-2957debe925d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gbLeadingMonomial", "[", 
       RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "bs"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"mvZeroGradeQ", "[", "gblt", "]"}], ",", "1", " ", ",", 
       RowBox[{"gbLeadingMonomial", "[", "gblt", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[501]:=",ExpressionUUID->"fd3ae217-7046-419e-a796-2cf5864b5537"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", 
        RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "c"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", "c_", "]"}], ":=", 
       RowBox[{"c", "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "baseSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"gbLeadingCoefficient", "[", "gblt", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[504]:=",ExpressionUUID->"21235549-6f81-4d20-9857-024ea390f5fc"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". To continue"
}], "Subsection",ExpressionUUID->"6706b0e2-401f-4048-8445-0c1b6126600c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[506]:=",ExpressionUUID->"4fb56c53-a0e3-4f0c-96fd-9417e209296b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Involutions and mathematical functions of multivectors"
}], "Section",ExpressionUUID->"60614cca-24a6-49cb-92b4-25008c1bebb7"],

Cell["\<\
Definitions of mathematical functions for n>3 are given section 10 (they \
require definition of many other commands, which are defined in sec 8-9)\
\>", "Text",ExpressionUUID->"f2fd5974-1777-4119-8d78-63f518bd19a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GeometricAlgebra`p`functionShortcutList", "=", 
   RowBox[{"{", 
    RowBox[{
    "Exp", ",", "Log", ",", "Sin", ",", "Sinh", ",", "Cos", ",", "Cosh", ",", 
     "Tan", ",", "Tanh", ",", "Cot", ",", "Coth", ",", "ArcSin", ",", 
     "ArcSinh", ",", "ArcCos", ",", "ArcCosh", ",", "ArcTan", ",", "ArcTanh", 
     ",", "ArcCot", ",", "ArcCoth"}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[507]:=",ExpressionUUID->"aa7bd4fa-7417-4ad6-ac87-5ff03b84eac6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaLinearQ", ",", "gaSetLinear", ",", "gaHomogeneusGradeQ", ",", 
     "gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate", ",", 
     "gaPrincipalInvolution", ",", "gaGradeNegate", ",", 
     "gaBinomialConjugate", ",", "gaNonZeroGradeInverse", ",", 
     "gaComplexConjugate", ",", "gaComplexSymbols", ",", 
     "gaComplexCliffordConjugate", ",", "gaQuaternionicConjugate", ",", 
     "gaHermitianConjugate", ",", "gaHermitianQ", ",", "gaHodgeDual", ",", 
     "SignChangeGrades", ",", "Evaluation", ",", "OutputType", ",", 
     "InvolutionPosition", ",", "gaGeometricProductSeries", ",", 
     "gaCommutator", ",", "gaAntiCommutator", ",", "gaCommutatorExpand", ",", 
     "gaCE", ",", "gaZassenhausCoefficient", ",", " ", "gaZassenhausSeries", 
     ",", "gaZassenhausSeriesData", ",", "gaSeries", ",", "gaSeriesData", ",",
      "gaParameterSeries", ",", "gaBakerCampbellHausdorffSeries", ",", 
     "gaBCHSeries", ",", "gaBakerCampbellHausdorffTermLogarithm", ",", 
     "gaBakerCampbellHausdorffSeriesData", ",", "gaFormula", ",", 
     RowBox[{"Sequence", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", 
          RowBox[{"\"\<ga\>\"", "<>", 
           RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<OfMV\>\""}], "]"}],
          "&"}], "/@", "GeometricAlgebra`p`functionShortcutList"}], ")"}]}], 
     ",", "gaSqrt", ",", "gaSqrtOfMV", ",", "gaIncludeFreeMV"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[508]:=",ExpressionUUID->"b0301431-7e33-45f7-b611-76bf5cd3a1d8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[509]:=",ExpressionUUID->"585bae98-0c4c-4892-933a-80a72f2361d7"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "gaExpSeries", ",", "gaSinSeries", ",", "gaSinhSeries", ",", "gaCosSeries", 
   ",", "gaCoshSeries", ",", "gaTanSeries", ",", "gaTanhSeries", ","}], 
  "*)"}]], "Input",
 CellLabel->
  "In[511]:=",ExpressionUUID->"3fe60f9f-e6e4-4949-b077-b61a735bb2bf"],

Cell["\<\
Unary operations on multivectors are gaReverse, gaNormReverseAbs, gaInverse, \
gaGradeInverse, gaCliffordConjugate\
\>", "Text",ExpressionUUID->"d597e3be-ab15-4a42-a8e2-b20d6c8a9059"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearQ", "::", "usage"}], "=", 
   "\"\<gaLinearQ[a] returns True if function is linear in multivector \
space\>\""}], ";"}]], "Input",
 CellLabel->
  "In[512]:=",ExpressionUUID->"1c371f64-8a8d-4d31-bf4d-8fd5d661e1e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetLinear", "::", "usage"}], "=", 
   "\"\<gaSetLinear[a,b,...] sets functions a,b,...  to be linear functions \
of multivectors.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[513]:=",ExpressionUUID->"4feaa52d-8c0a-4ca0-aa42-f19630b7f5bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "::", "usage"}], "=", 
   "\"\<gaHomogeneusGradeQ[expr] returns True if multivector has homogeneus \
grade.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[514]:=",ExpressionUUID->"09daab01-931a-4deb-ac00-3c4d8321a640"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "::", "usage"}], "=", 
   "\"\<gaReverse[A_r], where A_r is single multivector (or geometric product \
of multivectors) realize reverse operation A_r -> (-1)^(r (r-1))/2 A_r (for \
homogeneus multivector of rank r) of geometric algebra (main \
antiauthomorphism, see [KG-HFinP&Sp], p.56). Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[515]:=",ExpressionUUID->"c129ccd2-d6b3-450d-8b91-509ace1ab821"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "::", "usage"}], "=", 
   "\"\<gaGradeInverse[m] calculates the conjugate of a multivector \
m_r->(-1)^r m_r, see [DH-STA, formula 4.12]. Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[516]:=",ExpressionUUID->"e6c7fa0a-3c9f-4ffb-a3c6-5da322637076"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaCliffordConjugate[m] is defined as a combination of gaReverse and \
gaGradeInverse operations, see [DH-STA, formula 6.10]. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPrincipalInvolution", "::", "usage"}], "=", 
   "\"\<Alias to gaCliffordConjugate[m].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[517]:=",ExpressionUUID->"fcd8fab9-6709-46fb-aba0-785db6374489"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeNegate", "::", "usage"}], "=", 
   "\"\<gaGradeNegate[m,grade_List] is a general involution, which only \
changes signs of grades listed in grade. If grade list is empty list, initial \
multivector is returned.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[519]:=",ExpressionUUID->"9e3d0343-866e-4310-9157-a84ae33507e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBinomialConjugate", "::", "usage"}], "=", 
   "\"\<gaBinomialConjugate[MV,r_Integer?NonNegative] (see below for \
gaBinomialConjugate[MV,{r__Integer?NonNegative}]),is a special conjugation \
computed as Sum[(-1)^Binomial[2^r,k] <U\!\(\*SubscriptBox[\(>\), \(k\)]\), \
{k,0,n}] (see D.S. Shirokov arxiv:2005.04015v1 \\\"On determinant, other \
characteristic polynomial coefficients, and inverses in Clifford algebras of \
arbitrary dimension\\\", 2020, May) which is defined for algebra of vector \
space dimension n\[GreaterEqual]2^r. gaBinomialConjugate[MV,1] is in fact \
gaGradeInverse[ ], gaBinomialConjugate[MV,2] is gaReverse[ ]. \
gaBinomialConjugate[MV,r_List] represents multiplication of involutions \
listed in list r.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[520]:=",ExpressionUUID->"adb2a710-8839-4238-b5a2-499d788c1bac"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonZeroGradeInverse", "::", "usage"}], "=", 
   "\"\<gaNonZeroGradeInverse[expr] inverses all grades except of the scalar \
grade.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[521]:=",ExpressionUUID->"9e78862b-52a4-4df8-b2d4-539cf5e8ef51"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexConjugate", "::", "usage"}], "=", 
   "\"\<gaComplexConjugate[expr] replaces all imaginary numbers by complex \
conjugate numbers. By default all symbols are assumed to represent real \
quantities. Use option gaComplexConjugate to make exeptions.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexSymbols", "::", "usage"}], "=", 
   "\"\<Is the option for gaComplexConjugate->None|List which simply \
instructs to wrap the listed symbols with Conjugate[].\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[522]:=",ExpressionUUID->"0c0a2ce7-0c6c-4efd-a115-f118831f7224"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaComplexCliffordConjugate[expr] is a shortcut for \
gaReverse[gaComplexConjugate[expr]]. Meaningful in  complex Clifford algebras \
only. Note, that in real algebras Clifford conjugation is a combination of \
grade inverse and reverse.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[524]:=",ExpressionUUID->"ad960b19-b171-4f7f-a026-4a690360db70"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaQuaternionicConjugate", "::", "usage"}], "=", 
   "\"\<gaQuaternionicConjugate[expr]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[525]:=",ExpressionUUID->"62758656-7ac9-4083-93f5-3e4633f743db"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianConjugate", "::", "usage"}], "=", 
   "\"\<gaHermitianConjugate[expr] realises the definition of Hermitian \
conjugate (aka principal involution) for complex Clifford algebras. Default \
Method\[Rule]\\\"DownUp\\\" change down indices to up indices (and vice \
versa) and then uses gaReverse followed by gaComplexExpand (no expressionn \
expansion). Other possible methods are \\\"P\\\",  \\\"Q\\\", which use only \
down indices and do not expand the expression. The Method \\\"Sign\\\" uses \
gaReverse and directly replaces signs of q indices (requires expr expansion). \
The Method->\\\"DownUpExpand\\\" performs similar procedure as for \\\"DownUp\
\\\" on expanded expression. The option gaComplexConjugate->Automatic|{}|List \
which instructs to wrap the listed symbols with Conjugate[].\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianQ", "::", "usage"}], "=", 
   "\"\<gaHermitianQ[expr] returs True for Hermitian expression, false \
otherwise\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[526]:=",ExpressionUUID->"ba3b4aa9-06eb-416c-92d0-3e0e216ab39a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHodgeDual", "::", "usage"}], "=", 
   "\"\<gaHodgeDual[expr] computes Hodge dual of expr. Method->\\\"MVInverseI\
\\\", \\\"MVReverseI\\\", \\\"MVI\\\" and \\\"ReverseMVI\\\"(Vaz book p. 70)  \
in fact uses different definitions which can be found in the \
literature.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[528]:=",ExpressionUUID->"1b896655-3298-4781-acf8-5103b3e486bc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "usage"}], "=", 
   "\"\<gaEliminateGrade[multivector_,eliminateGrade_List,opts___?OptionQ] is \
a command, which multiplies the given general multivector by the same \
multivector acted by involution from the right in attempt to remove from the \
product grades listed in eliminateGrade list. Empty output means that given \
grades cannot be eliminated by mentioned procedure.\>\""}], ";", 
  RowBox[{
   RowBox[{"OutputType", "::", "usage"}], "=", 
   "\"\<OutputType is an option for gaEliminateGrade[], which change output \
presentation. Possible values are SignChangeGrades and Evaluation \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InvolutionPosition", "::", "usage"}], "=", 
   "\"\<InvolutionPosition is an option for gaEliminateGrade[], which decides \
from which side invuluted multivector is multiplied. Possible values are \
Right (default) and Left.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[529]:=",ExpressionUUID->"861ce4db-13c5-4c7e-94a6-7b3f35ef7cae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "::", "usage"}], "=", 
   "\"\<gaGeometricProductSeries[f_functionHead,{m_multivector,{p_,n_Integer?\
Positive:10}}] calculates the series of the function f, of a multivector m at \
point p up to a power n. Option Expand->True can be used to expand series in \
time of generation. This is much faster than later expanding held \
series.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricProductSeries[ ]. Option Expand->True can be \
used to expand series in time of generation. This is much faster than later \
expansion of held series.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[531]:=",ExpressionUUID->"84ebfeb6-7030-4797-afa4-a79e6a54a0f2"],

Cell["\<\
Define same usage messages for all elementary functions listed in \
GeometricAlgebra`p`functionShortCutList above\
\>", "Text",ExpressionUUID->"dc829381-e197-4d16-aed5-88c3aa7ca1d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"Set", ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "[", 
          RowBox[{"\"\<ga\>\"", "<>", 
           RowBox[{"ToString", "[", "#", "]"}], "<>", 
           "\"\<Series::usage\>\""}], "]"}], ",", 
         RowBox[{"\"\<ga\>\"", "<>", 
          RowBox[{"ToString", "[", "#", "]"}], "<>", 
          "\"\<Series[m_multivector,{p_:0,n_Integer?Positive:10}] or shorter \
ga\>\"", "<>", 
          RowBox[{"ToString", "[", "#", "]"}], "<>", 
          "\"\<Series[m,n] calculates the series of the function \>\"", "<>", 
          
          RowBox[{"ToString", "[", "#", "]"}], "<>", 
          "\"\<, of a multivector m at point p up to a power n.\>\""}]}], 
        "}"}], "&"}], "/@", "GeometricAlgebra`p`functionShortcutList"}], 
     ")"}]}], ")"}], ";"}]], "Input",
 CellLabel->
  "In[533]:=",ExpressionUUID->"630f8183-c17a-40d7-a156-84f87c95fe91"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutator", "::", "usage"}], "=", 
   "\"\<gaCommutator[a,b] defines notation fo quantity ab-ba\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAntiCommutator", "::", "usage"}], "=", 
   "\"\<gaAnticommutator[a,b] defines notation for quantity ab+ba\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[534]:=",ExpressionUUID->"e384b261-2123-4b8d-88e9-c6cb6e5f2b75"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutatorExpand", "::", "usage"}], "=", 
   "\"\<gaCommutatorExpand[a,b] (alias gaCE[ ]) expands to quantity ab-ba, \
Option Except->{gaAntiCommutator} prevents expansion of \
gaAntiCommutator.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "::", "usage"}], "=", "\"\<Short alias for gaCE[ ].\>\""}],
   ";"}]}], "Input",
 CellLabel->
  "In[536]:=",ExpressionUUID->"692a523b-9d93-418f-9e67-bffdf19172a5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "::", "usage"}], "=", 
   "\"\<gaZassenhausCoefficient[a_,b_][p_Integer] or \
gaZassenhausCoefficient[p_Integer] gives coefficients of Zassenhaus series.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeries", "::", "usage"}], "=", 
   "\"\<gaZassenhausSeries[Exp[aa_+bb_],n_Integer?(#\[GreaterEqual]2&),opts___\
] gives expansion of Zassenhaus series to n-th order. The result is presented \
as gaBakerCampbellHausdorffSeriesData, where each term represents homogenic \
polynomial. Option Format values \\\"Right\\\" or \\\"Left\\\" gives \
left-oriented, i.e.  exp[x+y]=...exp[c3[x,y]]exp[c2[x,y]]exp[y]exp[x] or \
right-oriented, i.e. exp[x+y]=exp[x]exp[y]exp[c2[x,y]]exp[c3[x,y]]... series \
form. Commutator in output of gaZassenhausSeriesData is defined as AB-BA, \
i.e. without overal factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaZassenhausSeries[ ] result. \
gaSeriesData[gaZassenhausSeriesData[ ]] converts the result to gaSeriesData[ \
]. Commutator in output is defined as AB-BA, i.e. without overal \
factor.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[538]:=",ExpressionUUID->"aa99f970-4d97-4bc5-ab98-c0d524c38a57"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "::", "usage"}], "=", 
   "\"\<Represents transformation data of same infinitezimal size.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "::", "usage"}], "=", 
   "\"\<gaParameterSeries[a_gaSeriesData, var] Converts gaSeriesData like \
Normal, but adds infinitizimality parameter var.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[541]:=",ExpressionUUID->"db452ee5-75a9-48f9-99e9-4067d5988622"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffTermLogarithm[{exprs__String},n_Integer], \
gives n-th homogenic term of BCH series. Is used by \
gaBakerCampbellHausdorffSeries[ ] command.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries[GeometricProduct[expr__Exp],n_Integer?(\
#\[GreaterEqual]2&),opts___ ] gives expansion of BCH series to n-th order. \
The result is presented as gaBakerCampbellHausdorffSeriesData, where each \
term represents homogenic polynomial. Option Format values \
\\\"Commutators\\\", \\\"Expand\\\" or \\\"None\\\" rewrites the polynomials \
in required form.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBCHSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaBakerCampbellHausdorffSeries.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaBakerCampbellHausdorffSeries[ ] result. \
gaSeriesData[gaBakerCampbellHausdorffSeriesData[ ]] converts the result to \
gaSeriesData[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[543]:=",ExpressionUUID->"04758cf9-aabd-4db6-9456-fd14a71f8b01"],

Cell["\<\
Define same usage messages for all elementary functions listed in \
GeometricAlgebra`p`functionShortCutList above. Exception is gaSqrtOfMV[ ]\
\>", "Text",ExpressionUUID->"03fe94e2-656c-403d-be3d-24c0bbaa516d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrtOfMV", "::", "usage"}], "=", 
   "\"\<New implementation using Piecewise[ ]. Yields square root of general \
multivector in radicals. All roots are found for GAs of vector space \
dimension n\[LessEqual]3. When n>3 single root (connected to unity) is \
computed by different method.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrt", "::", "usage"}], "=", 
   "\"\<Old implementation. Yields square root of general multivector in \
radicals. Works for vector space dimension n\[LessEqual]3 only. Moved \
(2022-06-01) to obsolete.nb notebook!\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[547]:=",ExpressionUUID->"76d8a988-8e94-420a-a49c-b1af16deeda4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFormula", "::", "usage"}], "=", 
   "\"\<Option for gaExpOfMV, gaFunctionOfMV, gaLogOfMV, etc,  which can have \
values \\\"LowDimension\\\",\\\"ScalarPartInSum\\\",\\\"ScalarPartOutOfSum\\\"\
 and determines the way of how exponent or other functions are \
computed.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIncludeFreeMV", "::", "usage"}], "=", 
   "\"\<Option for gaLogOfMV, which attempts to include posible free terms.\>\
\""}], ";"}]}], "Input",
 CellLabel->
  "In[549]:=",ExpressionUUID->"d7979fb3-6c46-4916-a96f-7e193434b793"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"Set", ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ToExpression", "[", 
          RowBox[{"\"\<ga\>\"", "<>", 
           RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<OfMV::usage\>\""}],
           "]"}], ",", 
         RowBox[{"\"\<ga\>\"", "<>", 
          RowBox[{"ToString", "[", "#", "]"}], "<>", 
          "\"\<OfMV[m_multivector, opts___] calculates exact value of the \
function \>\"", "<>", 
          RowBox[{"ToString", "[", "#", "]"}], "<>", 
          "\"\< for the multivector m. For Clifford algebras n\[LessEqual]3 \
default specialized algorithm is used for many elementary functions, which \
should provide real answers when possible (for example, it is known that  \
trigonometric functions are real valued only when when I is commutative and \
I^2=-1). For n>3 in general answer by default is complex valued. Options \
Expand\[Rule]Automatic, Quiet\[Rule]True, \
Method->{\\\"CoordinateFree\\\",gaFormula->\\\"ScalarPartInSum\\\"}, \
Inactive->False, OutputForm->\\\"RootSum\\\". \>\""}]}], "}"}], "&"}], "/@", 
      "GeometricAlgebra`p`functionShortcutList"}], ")"}]}], ")"}], 
  ";"}]], "Input",
 CellLabel->
  "In[551]:=",ExpressionUUID->"54bd9b14-4b7b-42fc-987f-59585985064a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[552]:=",ExpressionUUID->"9bc1bbf6-00c7-4426-9b76-917704014ddb"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Unary operators"
}], "Subsection",ExpressionUUID->"c5c60def-87c3-4330-baa1-b293dc3443c3"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"1edec70e-eee8-4931-919e-8773f9ffca82"],

Cell[TextData[{
 StyleBox["gaSetLinear[ ]",
  FontWeight->"Bold"],
 " implements linearity property for multivectors"
}], "Text",ExpressionUUID->"fdf572c0-d401-4a53-950c-68c52f128df5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaLinearQ", "[", "___", "]"}], "=", "False"}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaSetLinear", "[", "heads__", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"expr", "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{
              "MV", "|", "bs", "|", "Pattern", "|", "Blank", "|", 
               "BlankSequence", "|", "BlankNullSequence"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}]}]}], "]"}], "/@", 
       RowBox[{"{", "heads", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", "]"}],
   ";"}]}], "Input",
 CellLabel->
  "In[553]:=",ExpressionUUID->"4e40f4f3-5c87-4696-8725-0f10d9147e6c"],

Cell[TextData[{
 StyleBox["gaHomogeneusGradeQ[ ] ",
  FontWeight->"Bold"],
 "checks if expression has homogeneous grade. The ",
 StyleBox["c_.*bs[__]",
  FontWeight->"Bold"],
 " pattern only makes sense for functions, which are not mvLinear. This is ",
 StyleBox["gaHomogeneusGradeQ[ ],  gaNormOfCoefficients[ ],  \
gaNormReverseAbs[ ],  gaInverse[ ]",
  FontWeight->"Bold"],
 ",... For gaLinear functions this pattern is optional."
}], "Text",ExpressionUUID->"9bb42de4-6b10-4feb-8031-ba4df2929e47"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHomogeneusGradeQ", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"bs", "[", "__", "]"}]}], "]"}], "=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "s_Symbol", "]"}], "=", "True"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaHomogeneusGradeQ", "[", 
     RowBox[{"c_", "?", "NumericQ"}], "]"}], "=", "True"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "fast", " ", "decision", " ", "is", " ", "impossible", " ", 
    "call", " ", 
    RowBox[{"gaGradeList", "[", " ", "]"}]}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "f_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{
     RowBox[{"gaGradeList", "[", "f", "]"}], ",", 
     RowBox[{"{", "_Integer", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[555]:=",ExpressionUUID->"c50dc0b5-0ee1-43c0-b42f-cf51fbabd09f"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Involutions, conjugations and Hodge dual"
}], "Subsubsection",ExpressionUUID->"cbda8825-46d2-4dbc-bf15-a559fedee625"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaGradeNegate[ ] ",
  FontWeight->"Bold"],
 "involution (most general one)"
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"3a4c7849-eff5-42dd-ae60-6e3be65eafac"],

Cell[TextData[{
 " At first we define ",
 StyleBox["gaGradeNegate[ ]",
  FontWeight->"Bold"],
 " involution, which changes signs of specified grades only. Then the \
standard Clifford algebra involutions are defined using the gaGradeNegate",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"9a33b4ac-7379-4e62-8a40-385bcdfde8eb"],

Cell["\<\
 Specific (fast) case, when multivector is represented as a single Association\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"03cdbebb-2295-4f14-bfc4-2ee415357226"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGradeNegate", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            "grade_List"}], "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"arg", ",", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"KeySelect", "[", 
                RowBox[{"arg", ",", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"grade", ",", 
                    RowBox[{"(", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ")"}]}], "]"}],
                   "&"}]}], "]"}]}], ")"}]}], "]"}], ",", "other"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[559]:=",ExpressionUUID->"ab2733b9-263f-486f-af2a-d9a0d85c61d9"],

Cell["\<\
 General case for PlainRepresentation (without restriction not to use with \
products inside, causes huge delay problems due to expansion)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"13175fdd-adbc-4931-bbe0-0a9afa5b1ef2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaGradeNegate", "[", 
      RowBox[{"expr_", ",", "grade_List"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"allGrades", ",", "restGrades"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"allGrades", "=", 
          RowBox[{"gaGradeList", "[", "expr", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"restGrades", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"allGrades", ",", "grade"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"restGrades", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"-", "1"}], "*", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"expr", ",", "grade"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "allGrades", ",", "expr", ",", 
           "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "1"}], "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"expr", ",", "grade"}], "]"}]}], "+", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"expr", ",", "restGrades"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"(", 
           RowBox[{
           "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
            "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}], "&&", 
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaGradeList", "[", "expr", "]"}], "]"}], "=!=", 
         "gaGradeList"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[560]:=",ExpressionUUID->"e73be8c6-9995-4b89-a428-2ea47cba4c0d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Involutions, which are special cases of ",
 StyleBox["gaGradeNegate[ ]",
  FontWeight->"Bold"],
 ": these include  ",
 StyleBox["gaReverse[ ], gaGradeInverse[ ]",
  FontWeight->"Bold"],
 ",  ",
 StyleBox[" gaCliffordConjugate[ ] ",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaBinomialConjugate[ ] ",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4d438efb-1de9-48d5-8d50-93f50cf53c5d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBinomialConjugate", "::", "NotDefined"}], "=", 
   "\"\<Required gaBinomialConjugate for binomial rank value `1` is defined \
only for algebra with vector space dimension greater or equal to `2`.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[561]:=",ExpressionUUID->"46cdf012-fc66-4328-a4a8-3e6de087afc1"],

Cell["\<\
 Specific (fast) case, when multivector is represented as a single Association\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"f7a609c8-8365-4b8a-b896-14ab4fd2011d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaReverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaReverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGradeInverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaGradeInverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaNonZeroGradeInverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"Join", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"-", 
                RowBox[{"KeySelect", "[", 
                 RowBox[{"arg", ",", 
                  RowBox[{
                   RowBox[{"MatchQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}]}]}], 
              "]"}], ")"}]}], ",", "al", ",", "other"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCliffordConjugate", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "al_Cl", ",", "other___"}], 
             "]"}], ",", 
            RowBox[{"r_Integer", "?", "Positive"}], ",", 
            RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], 
            "\[GreaterEqual]", 
            RowBox[{"2", "^", 
             RowBox[{"(", 
              RowBox[{"r", "-", "1"}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"(", 
                RowBox[{"-", 
                 RowBox[{"KeySelect", "[", 
                  RowBox[{"arg", ",", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"2", "^", "r"}]}], "]"}], "\[GreaterEqual]", 
                    RowBox[{"(", 
                    RowBox[{"2", "^", 
                    RowBox[{"(", 
                    RowBox[{"r", "-", "1"}], ")"}]}], ")"}]}], ")"}], "&"}]}],
                   "]"}]}], ")"}]}], "]"}], ",", "al", ",", "other"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaBinomialConjugate", "::", "NotDefined"}], ",", "r", 
             ",", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"r", "-", "1"}], ")"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[562]:=",ExpressionUUID->"af74f7b8-709e-475c-93c3-aa5551fbe212"],

Cell[TextData[{
 "Definitions. \nReverse of multivector is a multivector itself with \
additional phase. According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56 it is named as involution R. (antiauthomorphism, i.e. changes order \
of multipliers).\n\nAccording to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaGradeInverse",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "is involution M (main involution).  See also ",
 ButtonBox["[DH-STA4 .12 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 17. This operation change sign of all odd grade multivectors. It does \
not change order of terms (proper automorphism, i.e. order of multipliers \
remain the same).\n\nFor CliffordConjugate (see  ",
 ButtonBox["[DH-STA6 .10 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 21).  According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaCliffordConjugate",
 StyleBox[" [ ]",
  FontWeight->"Bold"],
 " is involution (antiautomorphism, i.e. changes order of multipliers) C \
(Clifford conjugation ). Thought gaCliffordConjugate can be expressed using \
gaCliffordConjugate and ",
 StyleBox["gaReverse",
  FontWeight->"Bold"],
 " as gaCliffordConjugate",
 StyleBox["[v_,opts___?OptionQ]:=",
  FontWeight->"Bold"],
 "gaGradeInverse",
 StyleBox["[gaReverse[v,opts],opts]",
  FontWeight->"Bold"],
 ", we prefer direct calculation"
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d61ff425-67ff-4709-bef3-1219df3ea905"],

Cell["Involutions are linear functions", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"57d8ab61-daeb-47ab-a058-2df7846e1814"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaReverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaSetLinear", "/@", 
    RowBox[{"{", 
     RowBox[{
     "gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate", ",", 
      "gaNonZeroGradeInverse"}], "}"}]}], ";"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[563]:=",ExpressionUUID->"19244310-2bd4-4d5a-a02e-5199645dd295"],

Cell["Involution action on base elements in PlainRepresentation", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"96dd64e1-c224-475e-8c93-7725f3a00a70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaReverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaGradeInverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNonZeroGradeInverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], "/;", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"List", "@@", "arg"}], "]"}], "]"}], ">", "0"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"gaBinomialConjugate", "[", "]"}], " ", "has", " ", "two", " ",
        "arguments", " ", "and", " ", "we", " ", "want", " ", "it", " ", "to",
        " ", "be", " ", "linear", " ", "with", " ", "respect", " ", "to", " ",
        "the", " ", "first", " ", "argument", " ", "only"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", "_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", "param_", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "param", ",", "op"}], "]"}]}], "]"}], ",", 
             "y"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", "param_", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "param", ",", "op"}], 
              "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", "param_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"expr", "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}]}]}], "]"}], "/@", 
       RowBox[{"{", "gaBinomialConjugate", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"product", " ", "of", " ", 
       RowBox[{"gaBinomialConjugate", "[", " ", "]"}], " ", "is", " ", 
       "implemented", " ", "as", " ", "Folding", " ", "over", " ", "list", 
       " ", "of", " ", "pure", " ", "conjugations"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBinomialConjugate", "[", 
       RowBox[{"expr_bs", ",", 
        RowBox[{"{", 
         RowBox[{"r__Integer", "?", "Positive"}], "}"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Fold", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaBinomialConjugate", "[", 
          RowBox[{"#1", ",", "#2", ",", "opts"}], "]"}], "&"}], ",", "expr", 
        ",", 
        RowBox[{"{", "r", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBinomialConjugate", "[", 
       RowBox[{"any_", ",", 
        RowBox[{"0", "|", 
         RowBox[{"{", "0", "}"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", "any"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"Binomial", " ", "0", " ", "is", " ", "identity"}], " ", "*)"}],
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "computation", " ", "of", " ", "pure", " ", "Binomial", " ", 
       "conjugations"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBinomialConjugate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"r_Integer", "?", "Positive"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], 
         "\[GreaterEqual]", 
         RowBox[{"2", "^", 
          RowBox[{"(", 
           RowBox[{"r", "-", "1"}], ")"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "arg"}], "]"}], "]"}], ",", 
                  RowBox[{"2", "^", 
                   RowBox[{"(", 
                    RowBox[{"r", "+", "1"}], ")"}]}]}], "]"}], ",", "2", ",", 
                "r"}], "]"}], "]"}], "===", "1"}], ",", 
            RowBox[{"(", 
             RowBox[{"-", 
              RowBox[{"bs", "[", 
               RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], ")"}], ",", 
            
            RowBox[{"bs", "[", 
             RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], "]"}], ","}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"faster", " ", "check"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"List", "@@", "arg"}], "]"}], "]"}], ",", 
              RowBox[{"2", "^", "r"}]}], "]"}], "\[GreaterEqual]", 
            RowBox[{"(", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"r", "-", "1"}], ")"}]}], ")"}]}], ")"}], ",", 
          RowBox[{"(", 
           RowBox[{"-", 
            RowBox[{"bs", "[", 
             RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], ")"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaBinomialConjugate", "::", "NotDefined"}], ",", "r", ",", 
           RowBox[{"2", "^", 
            RowBox[{"(", 
             RowBox[{"r", "-", "1"}], ")"}]}]}], "]"}], ";", "$Failed"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[564]:=",ExpressionUUID->"6eb1d731-c1c1-4d40-8986-5c937894cdf8"],

Cell[TextData[{
 "Reverse of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " rewrites expression from different side and then reverses  each term. \
Currently no rules for  ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ".\nNote on implementation. We should be careful when operating on ",
 StyleBox["expr_GeometricProduct",
  FontWeight->"Bold"],
 ". For example, if in ",
 StyleBox["Reverse",
  FontWeight->"Bold"],
 " function we would first reverse expr, and then map gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", we would enter into infinite loop when applied to bivector. The reason is \
that after reversion we get ",
 StyleBox["Times[-1, GeometricProduct[expr]] ",
  FontWeight->"Bold"],
 "and the mapping would again map gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " itself. "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"95c9b705-3ceb-41e5-bdc9-98bf2fb1c942"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"In", " ", "general"}], ",", " ", 
    RowBox[{
    "we", " ", "cannot", " ", "reverse", " ", "args", " ", "in", " ", 
     "geometric", " ", "product"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaReverse", "[", 
     RowBox[{"expr_OuterProduct", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Reverse", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaReverse", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
   ";"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[565]:=",ExpressionUUID->"9d449d9b-c0a0-441e-bc03-a9b0edff5cfc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGradeInverse", "[", 
     RowBox[{"expr_OuterProduct", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "suspictinions", " ", "about", " ", "grade", " ", "inverse", " ", "inside",
     " ", "geometric", " ", 
    RowBox[{"product", ":", " ", 
     RowBox[{
     "can", " ", "produce", " ", "errors", " ", "in", " ", "curvilinear", " ",
       "coord", " ", "system"}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "Print", "[", 
      "\"\<Suspicious rule applied: gaGradeInverse applied to arguments \
inside geometric product.\>\"", "]"}], ";", 
     RowBox[{
      RowBox[{
       RowBox[{"gaGradeInverse", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}], ")"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[566]:=",ExpressionUUID->"1d45e7e8-9e92-49ba-b747-5bc56d42637c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"In", " ", "general"}], ",", " ", 
    RowBox[{
    "we", " ", "cannot", " ", "reverse", " ", "args", " ", "in", " ", 
     "geometric", " ", "product"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", 
      RowBox[{"expr_OuterProduct", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Reverse", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaCliffordConjugate", "[", 
         RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaPrincipalInvolution", "=", "gaCliffordConjugate"}], 
    ";"}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[568]:=",ExpressionUUID->"3c10bbe2-b02a-4c26-bfec-d7da6017e539"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Hermitian conjugation for complex Clifford algebras:  ",
 StyleBox["gaComplexConjugate[ ], gaComplexCliffordConjugate[ ]",
  FontWeight->"Bold"],
 ", and ",
 StyleBox[" gaHermitianConjugate[ ] ",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"c1d34d6c-d454-4342-8916-a5fd0473bed1"],

Cell["\<\
We assume, that all symbolic quantities are real, therefore we simply change \
complex unit sign.  \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"4fdfe02a-e14c-46f9-a550-2baae2c5cfbe"],

Cell["\<\
To do: add option to gaComplexConjugate, ... to dealt with symbolic \
coefficients (i.e. wrap symbolic coefficients with Conjugate[ ], for correct \
expressions)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"5b2f92e0-4bae-402b-ab3a-ff9711bece93"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaComplexConjugate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"gaComplexSymbols", "\[Rule]", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexConjugate", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"complexSymb", "=", 
        RowBox[{"OptionValue", "[", "gaComplexSymbols", "]"}]}], ",", 
       "numberConjugate"}], "}"}], ",", 
     RowBox[{
      RowBox[{"numberConjugate", "=", 
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Complex", "[", 
            RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Complex", "[", 
            RowBox[{"x", ",", 
             RowBox[{"-", "y"}]}], "]"}]}], "}"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"complexSymb", ",", "\[IndentingNewLine]", 
        RowBox[{"{", "}"}], ",", "numberConjugate", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}], ",", 
        RowBox[{
         RowBox[{"complexSymb", "=", 
          RowBox[{"gaVariables", "[", "expr", "]"}]}], ";", 
         RowBox[{"numberConjugate", "/.", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"complexSymb", ",", 
             RowBox[{"Conjugate", "/@", "complexSymb"}]}], "]"}], "]"}]}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", "__", "}"}], ",", 
        RowBox[{"numberConjugate", "/.", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{"complexSymb", ",", 
            RowBox[{"Conjugate", "/@", "complexSymb"}]}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[570]:=",ExpressionUUID->"39ef3650-16ff-4a15-9eff-7245f94114d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexCliffordConjugate", "[", "expr_", "]"}], ":=", 
   RowBox[{"gaReverse", "[", 
    RowBox[{"gaComplexConjugate", "[", "expr", "]"}], "]"}]}], ";"}]], "Input",\

 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[572]:=",ExpressionUUID->"90b2f013-84d7-49b9-8afd-cb53b7651a4d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaQuaternionicConjugate", "[", "expr_", "]"}], ":=", 
      RowBox[{"expr", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"x_", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\"", ",", "y___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "y"}], "]"}]}]}], "}"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[573]:=",ExpressionUUID->"00761f48-ca41-4d5e-9496-8c4ac7ad1a0f"],

Cell["\<\
gaHermitianConjugate option Method can take values \
\[OpenCurlyDoubleQuote]DownUp\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]P\[CloseCurlyDoubleQuote] ,\[OpenCurlyDoubleQuote]Q\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]Sign\
\[CloseCurlyDoubleQuote] (experimental, fastest). The \
\[OpenCurlyDoubleQuote]DownUp\[CloseCurlyDoubleQuote] explicitly turns down \
indices to up and up to down then reverses basis element indices. The \
\[OpenCurlyDoubleQuote]P\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Q\
\[CloseCurlyDoubleQuote]  method uses explicit formulas of Shirokov and Vaz \
\[OpenCurlyDoubleQuote]Clifford algebras and spinors\[CloseCurlyDoubleQuote], \
page 118, (formulas 4.86,4.87,4.88,4.89) wrapping the expression by \
appropriate elements (no expansion of expression is performed)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"e6a02e8c-c72f-4132-bd2d-0ab60754f5c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaHermitianConjugate", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<DownUp\>\""}], ",", 
      RowBox[{"gaComplexSymbols", "\[Rule]", 
       RowBox[{"{", "}"}]}]}], "}"}]}], ";"}], " "}]], "Input",
 CellLabel->
  "In[574]:=",ExpressionUUID->"ba5b3748-0948-43cb-b209-c925280af2ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"for", " ", "bad", " ", "usage", " ", "message"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionHermitianConjugate", "[", "\"\<Method\>\"", "]"}], ":=", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<DownUp\>\"", ",", "\"\<P\>\"", " ", ",", "\"\<Q\>\"", ",", 
       "\"\<Sign\>\"", ",", "\"\<DownUpExpand\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionHermitianConjugate", "[", "\"\<gaComplexSymbols\>\"", "]"}], 
     ":=", "\"\<List of symbols\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"actual", " ", "check"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionHermitianConjugate", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{
        "\"\<DownUp\>\"", ",", "\"\<P\>\"", " ", ",", "\"\<Q\>\"", ",", 
         "\"\<Sign\>\"", ",", "\"\<DownUpExpand\>\""}], "]"}]}], "]"}]}], ";", 
    RowBox[{
     RowBox[{"testOptionHermitianConjugate", "[", 
      RowBox[{"\"\<gaComplexSymbols\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{
       RowBox[{"Union", "[", 
        RowBox[{"Head", "/@", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", "val", "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "__Symbol", "}"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[575]:=",ExpressionUUID->"d6dee8c1-3ad1-4e79-bacd-3b91ffdd28fc"],

Cell["\<\
Definition of function which include Switch and related operations which were \
modified in Unicode.tr file interferes with Information[] (the first call) if \
we use them in cases like expr/. {some\[RuleDelayed]GeometricProduct[any, \
Intersection[ any1,any2]]}. To overcome the problem we must form the \
expression like expr/. {some\[RuleDelayed]GeometricProduct@@{any, \
Intersection[ any1,any2]}}. Then the problem disappears. Complete solution \
requires modification of Unicode.tr!!! Probably this happens because \
Geometric product has higher precedence 440 that Intersection 420 and Union \
410!\
\>", "Text",ExpressionUUID->"a4d94896-bf4d-47af-87fd-33f775a9997b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHermitianConjugate", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"op", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", 
           RowBox[{"gaHermitianConjugate", ",", "gaComplexConjugate"}], "}"}],
           "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"opHC", "=", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "op", "}"}], ",", 
             RowBox[{"Options", "[", "gaHermitianConjugate", "]"}]}], "]"}]}],
           ",", 
          RowBox[{"opConj", "=", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "op", "}"}], ",", 
             RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], "]"}]}], 
          ",", "theAlgebra", ",", "p", ",", "q", ",", "r", ",", 
          "orthogonalBaseElements", ",", "replRules", ",", "indRange", ",", 
          "exprExpanded"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"option", " ", "handling"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaHermitianConjugate", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionHermitianConjugate", "]"}], 
              "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"First", "/@", "opHC"}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "method", " ", "value", " ", "if", " ", "it", " ", 
           "was", " ", "not", " ", "set"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Method", "/.", 
              RowBox[{"Options", "[", "gaHermitianConjugate", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
           "\[IndentingNewLine]", "\"\<DownUp\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"orthogonalBaseElements", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"replRules", "=", 
             RowBox[{"Dispatch", "[", 
              RowBox[{"Thread", "[", 
               RowBox[{"Rule", "[", 
                RowBox[{"orthogonalBaseElements", ",", 
                 RowBox[{"orthogonalBaseElements", "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"x_", ",", "y_"}], "]"}], ":>", 
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"y", ",", "x"}], "]"}]}], "}"}]}]}], "]"}], "]"}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "coefficients", " ", "should", " ", "be", " ", "made", " ", 
              "complex", " ", "also"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{
              RowBox[{"gaReverse", "[", 
               RowBox[{"expr", "/.", "replRules"}], "]"}], ",", 
              RowBox[{"Sequence", "@@", "opConj"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", " ", "\"\<P\>\"", " ", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}], "=", 
             RowBox[{"List", "@@", "theAlgebra"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"indRange", "=", 
             RowBox[{"Range", "[", 
              RowBox[{"1", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OddQ", "[", "p", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"p", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaReverse", "[", "expr", "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], 
              "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"p", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"gaReverse", "[", "expr", "]"}], "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], 
                "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<Q\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}], "=", 
             RowBox[{"List", "@@", "theAlgebra"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"indRange", "=", 
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{"p", "+", "1"}], ",", 
               RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"EvenQ", "[", "q", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"q", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"q", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaReverse", "[", "expr", "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], 
              "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"q", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"q", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"gaReverse", "[", "expr", "]"}], "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], 
                "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<Sign\>\"", ",", "\[IndentingNewLine]", 
           
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "explicitly", " ", "change", " ", "signs", " ", "for", " ", "q", 
              " ", 
              RowBox[{"indices", ".", " ", "Unfortunatelly"}]}], ",", " ", 
             RowBox[{"requires", " ", "gaPE", " ", "as", " ", "well"}]}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"indRange", "=", 
             RowBox[{
             "gaNegativeSignatureIndexList", "[", "theAlgebra", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"gaReverse", "[", 
                RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"indD_List", ",", "indU_List"}], "]"}], ",", 
                   "theAlgebra", ",", "mark___"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{"GeometricProduct", "@@", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"indD", ",", "indRange"}], "]"}], "]"}], "+", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"indU", ",", "indRange"}], "]"}], "]"}]}], 
                    ")"}]}], ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"indD", ",", "indU"}], "]"}], ",", "theAlgebra", 
                    ",", "mark"}], "]"}]}], "}"}]}]}], "}"}]}], ",", 
              RowBox[{"Sequence", "@@", "opConj"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<DownUpExpand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"gaExpandedQ", "[", "expr", "]"}], ",", 
              RowBox[{"exprExpanded", "=", "expr"}], ",", 
              RowBox[{"exprExpanded", "=", 
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"orthogonalBaseElements", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"{", "exprExpanded", "}"}], ",", "_bs", ",", 
                "Infinity"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"replRules", "=", 
             RowBox[{"Dispatch", "[", 
              RowBox[{"Thread", "[", 
               RowBox[{"Rule", "[", 
                RowBox[{"orthogonalBaseElements", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"gaReverse", "/@", "orthogonalBaseElements"}], 
                   ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"x_", ",", "y_"}], "]"}], ":>", 
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"y", ",", "x"}], "]"}]}], "}"}]}]}], "]"}], "]"}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "coefficients", " ", "should", " ", "be", " ", "made", " ", 
              "complex", " ", "also"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{
              RowBox[{"exprExpanded", "/.", "replRules"}], ",", 
              RowBox[{"Sequence", "@@", "opConj"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "_", ",", "$Failed"}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CodeAssistOptions->{
 "CodeToolsOptions"-><|
  "CodeInspect" -> <|
    "Tags" -> <|"UnexpectedLetterlikeCharacter" -> <||>|>|>|>},
 CellLabel->
  "In[578]:=",ExpressionUUID->"3d0276be-571d-41b5-abef-0f57665610c5"],

Cell[TextData[{
 "General not trivial properties are gaHermitianConjugate[\[Lambda] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"U", "]"}], "->", 
    RowBox[{
     SuperscriptBox["\[Lambda]", "*"], 
     RowBox[{"gaHermitianConjugate", "[", "U", "]"}], " "}]}], 
   TraditionalForm]],ExpressionUUID->"ff598428-5d77-4716-bb2b-541e6a36425a"],
 ", and gaHermitianConjugate[A\[GeometricProduct]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"U", "]"}], "\[Rule]", 
    RowBox[{"gaHermitianConjugate", "[", "U", "]"}], " "}], TraditionalForm]],
  ExpressionUUID->"34c5b83f-3c54-41df-8c98-896d599d2ea8"],
 "\[GeometricProduct]gaHermitianConjugate[A]."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"cadde639-c713-40c2-a319-1de3ec620ab6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"gaComplexConjugate", "[", 
              RowBox[{"c", ",", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"FilterRules", "[", 
                 RowBox[{
                  RowBox[{"{", "op", "}"}], ",", 
                  RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], 
                 "]"}]}]}], "]"}], "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"h", ":", 
               RowBox[{"(", 
                RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], 
              ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"#", ",", "op"}], "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Reverse", "[", "h", "]"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"FilterRules", "[", 
                RowBox[{
                 RowBox[{"{", "op", "}"}], ",", 
                 RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], 
                "]"}]}]}], "]"}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaHermitianConjugate", "}"}]}], ")"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[579]:=",ExpressionUUID->"6fca29bd-360b-4a0e-a67b-a12034875a5f"],

Cell["Tests if GA element is Hermitian ", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"e9a8d41a-5b40-42f0-a972-ee81bb3bcd54"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", 
       RowBox[{
        RowBox[{"gaIndexDown", "[", 
         RowBox[{"gaHermitianConjugate", "[", "expr", "]"}], "]"}], "-", 
        "expr"}], "]"}], "]"}], "===", "0"}], ")"}]}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[580]:=",ExpressionUUID->"0e0ef88b-f054-48c2-a0d1-4897ad906fa2"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Different definitions of ",
 StyleBox["gaHodgeDual[ ]",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"ed478fd6-8b0c-4e38-9cea-8c84931c9dee"],

Cell[TextData[{
 "In fact different methods of HodgeDual[ ] are different definitions! \
Possible values \[OpenCurlyDoubleQuote]MVInverseI\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]MVReverseI\[CloseCurlyDoubleQuote] ,\
\[OpenCurlyDoubleQuote]ReverseMVI\[CloseCurlyDoubleQuote]and \
\[OpenCurlyDoubleQuote]MVI\[CloseCurlyDoubleQuote], which defines dual as  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", " ", 
    SuperscriptBox["I", 
     RowBox[{"-", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "cd07386a-6892-4186-9632-1ee9191504e5"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", 
    OverscriptBox["I", "~"], " "}], TraditionalForm]],ExpressionUUID->
  "ce0b24fa-8176-42c2-b8f0-401234b0908d"],
 ", and   ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", " ", "I"}], TraditionalForm]],ExpressionUUID->
  "22577382-9d9b-4fc4-a15f-3a345f67925e"],
 " correspondingly."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"58ebd07a-a708-4c7b-8344-229c8660fce4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaHodgeDual", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<MVInverseI\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHodgeDual", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlgebra", "=", 
           RowBox[{"gaGetAlgebra", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
            "]"}]}], ",", 
          RowBox[{"theMethod", "=", 
           RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", 
          "thePseudoFactor"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"thePseudoFactor", "=", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], 
               "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theMethod", ",", "\[IndentingNewLine]", "\"\<MVInverseI\>\"", ",", 
           
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"theAlgebra", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                  "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "-",
                     "1"}], ")"}]}], ")"}], "/", "2"}]}], ")"}]}], "*", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{"expr", ",", "thePseudoFactor"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<MVReverseI\>\"", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}],
                  "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                   "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "-", 
                   "1"}], ")"}]}], ")"}], "/", "2"}], ")"}]}], "*", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{"expr", ",", "thePseudoFactor"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<MVI\>\"", ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"expr", ",", "thePseudoFactor"}], "]"}], ",", 
           "\[IndentingNewLine]", "\"\<ReverseMVI\>\"", ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{
             RowBox[{"gaReverse", "[", "expr", "]"}], ",", 
             "thePseudoFactor"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[581]:=",ExpressionUUID->"0dec8b13-bba0-4c2c-acbc-e8e9bc93f1bb"]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Functions of single argument"
}], "Subsection",ExpressionUUID->"da217918-c99d-4ce2-ae95-92ce0cf52804"],

Cell[TextData[{
 "Explicit formulas for mathematical functions of MV are only available for \
algebras p+q\[LessEqual]3. All exact functions are named as ",
 StyleBox["gaFuntionOfMV[ ]",
  FontWeight->"Bold"],
 ", where Function is Exponent, Logarithm, Sqrt, Sinh (+ other hyperbolic) \
Sin (+ other trigonometric for the algebras when they can be defined), \
ArcSinh (+ other inverse hyperbolic) and ArcSin (+ other inverse \
trigonometric, when trigonometric can be defined).  For n>3 only symbolic \
Series expressions are available and the functions are named as gaSinhSeries, \
... etc (see next subsection Series)."
}], "Text",ExpressionUUID->"524991a5-98a9-40d1-8894-9ca3befe4624"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Square root of multivector for n\[LessEqual]3"
}], "Subsubsection",ExpressionUUID->"4752c398-43a4-45e3-97b3-28112bde453f"],

Cell["\<\
Here we implement square root algorithm of general multivector for n\
\[LessEqual]3 case. \
\>", "Text",ExpressionUUID->"58de283e-5610-4dc9-8dc9-070c4976700d"],

Cell[CellGroupData[{

Cell["Method selection and help functions ", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"32c12529-7849-486e-89a9-69ba227b5a1b"],

Cell[TextData[{
 "Help functions used by ",
 StyleBox["gaSqrtOfMV[ ] ",
  FontWeight->"Bold"],
 ". Since new realisation uses Piecewise[ ], we have to redefine check \
functions accordingly"
}], "Text",ExpressionUUID->"da55144c-e239-4b4e-86fb-a8ada20f2f60"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"positiveQ", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "False", ",", 
     RowBox[{"Positive", "[", "x", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"negativeQ", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "False", ",", 
     RowBox[{"Negative", "[", "x", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"zeroQ", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "True", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaVariables", "[", "x", "]"}], "===", 
        RowBox[{"{", "}"}]}], ",", "False", ",", 
       RowBox[{"x", "\[Equal]", "0"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nonNegativeQ", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "True", ",", 
     RowBox[{
      RowBox[{"Positive", "[", "x", "]"}], "||", 
      RowBox[{"x", "\[Equal]", "0"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nonzeroQ", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"Not", "[", 
      RowBox[{"PossibleZeroQ", "[", "x", "]"}], "]"}], ",", "True", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaVariables", "[", "x", "]"}], "===", 
        RowBox[{"{", "}"}]}], ",", "False", ",", 
       RowBox[{"Not", "[", 
        RowBox[{"x", "\[Equal]", "0"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nonPositiveQ", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "True", ",", 
     RowBox[{
      RowBox[{"Negative", "[", "x", "]"}], "||", 
      RowBox[{"x", "\[Equal]", "0"}]}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[583]:=",ExpressionUUID->"6ba575bd-3dc4-4764-852b-5b5f1f4f7d66"],

Cell["First general code and options ", "Text",ExpressionUUID->"8e85606c-98e6-4a9f-a1ea-cc1e37528bf2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSqrtOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"gaFormula", "->", "Automatic"}]}], "}"}]}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"GeneratedParameters", "\[Rule]", "C"}], ",", 
     RowBox[{"Simplify", "\[Rule]", "False"}], ",", 
     RowBox[{"VerifySolutions", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSqrtOfMV", "::", "lowDimensionFormula"}], "=", 
    "\"\<The algebra dimension `1` is greater than 3, \\\"LowDimension\\\" \
option will be ignored.\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", "\"\<Method\>\"", "]"}], "=", 
   RowBox[{"Alternatives", "[", 
    RowBox[{
    "Automatic", ",", "\"\<Automatic\>\"", ",", "\"\<CoordinateFree\>\"", 
     ",", "\"\<gaMatrixRepresentation\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", "\"\<Quiet\>\"", "]"}], "=", 
   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", "\"\<GeneratedParameters\>\"", "]"}], 
   "=", "\"\<Any Symbol\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", "\"\<Simplify\>\"", "]"}], "=", 
   RowBox[{
   "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", "\"\<VerifySolutions\>\"", "]"}], "=", 
   RowBox[{"True", "|", "False"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionSqrtOfMV", "[", 
     RowBox[{"{", 
      RowBox[{"theMethod_String", ",", "\"\<gaFormula\>\""}], "}"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"HoldForm", "[", 
      RowBox[{"{", 
       RowBox[{"theMethod", ",", 
        RowBox[{"gaFormula", "->", 
         RowBox[{"Alternatives", "[", 
          RowBox[{
          "Automatic", ",", "\"\<Automatic\>\"", ",", "\"\<LowDimension\>\"", 
           ",", "\"\<ScalarPartOutOfSum\>\"", ",", 
           "\"\<ScalarPartInSum\>\""}], "]"}]}]}], "}"}], "]"}], "/;", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"theMethod", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{"\"\<Automatic\>\"", ",", "\"\<CoordinateFree\>\""}], "]"}]}],
       "]"}]}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"with", " ", "suboptions"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<Automatic\>\"", ",", "\"\<CoordinateFree\>\"", ",", 
       "\"\<gaMatrixRepresentation\>\""}], "]"}]}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "\"\<Automatic\>\"", "|", "Automatic", "|", "\"\<CoordinateFree\>\"",
           "|", "\"\<gaMatrixRepresentation\>\""}], ",", "___Rule"}], "}"}]}],
       "]"}], "&&", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"Rest", "[", "val", "]"}], ",", 
       RowBox[{
        RowBox[{"testOptionSqrtOfMV", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"val", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ")"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theMethod_String", ",", "\"\<gaFormula\>\""}], "}"}], ",", 
     "val_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{
      "Automatic", "|", "\"\<Automatic\>\"", "|", "\"\<LowDimension\>\"", 
       "|", "\"\<ScalarPartOutOfSum\>\"", "|", "\"\<ScalarPartInSum\>\""}]}], 
     "]"}], "/;", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"theMethod", ",", 
      RowBox[{"Alternatives", "[", 
       RowBox[{"\"\<Automatic\>\"", ",", "\"\<CoordinateFree\>\""}], "]"}]}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionSqrtOfMV", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"no", " ", "suboptions"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<GeneratedParameters\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Head", "[", "val", "]"}], "===", "Symbol"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<Simplify\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
      "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionSqrtOfMV", "[", 
    RowBox[{"\"\<VerifySolutions\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[589]:=",ExpressionUUID->"65a9a9f9-35b3-47d5-b12f-f38b963c2d94"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrtOfMV", "::", "verify"}], "=", 
   "\"\<Input contains symbolic coefficients `1`. Validation of free \
coefficients could take enormous time, changing to \
VerifySolutions\[Rule]False.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], "=", 
   "\"\<Warning! Solutions `1` failed passing verification procedure. Manual \
investigation necessary.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrtOfMV", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"aAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", "theMethod", ",", 
       "theAlgebra", ",", "theOption", ",", "theFormula"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaSqrtOfMV", ",", "#", ",", "theOption"}], "}"}], ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionSqrtOfMV", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "options"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Method", "/.", 
           RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
         "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], "=", 
         
         RowBox[{"(", 
          RowBox[{"GeneratedParameters", "/.", 
           RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Simplify", "/.", 
           RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<VerifySolutions\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<VerifySolutions\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"VerifySolutions", "/.", 
           RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"aAlgebra", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"theAlgebra", "=", "gaRunningAlgebra"}], ",", 
        RowBox[{"theAlgebra", "=", "aAlgebra"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
          RowBox[{"\"\<Automatic\>\"", "|", "Automatic", "|", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}], ",", 
             "___Rule"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"theMethod", "=", "\"\<CoordinateFree\>\""}], ",", 
        RowBox[{"theMethod", "=", 
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"set", " ", "gaFormula", " ", 
         RowBox[{"option", ":", " ", 
          RowBox[{
           RowBox[{"if", " ", "dimension"}], " ", ">", 
           RowBox[{
           "3", " ", "or", " ", "Method", " ", "set", " ", "to", " ", 
            "Coordinate"}]}]}]}], ",", " ", 
        RowBox[{
        "which", " ", "is", " ", "not", " ", "implemented", " ", "directly", 
         " ", "for", " ", "low", " ", "dim"}], ",", " ", 
        RowBox[{"use", " ", "gaFunctionOfMV"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], ">", 
         "3"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaSqrtOfMV", "::", "lowDimensionFormula"}], ",", 
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"theFormula", "=", "\"\<ScalarPartInSum\>\""}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], ",", 
             RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"theMethod", ",", "\"\<CoordinateFree\>\"", ",", 
             RowBox[{"theFormula", "=", "\"\<LowDimension\>\""}], ",", 
             "\[IndentingNewLine]", "\"\<gaMatrixRepresentation\>\"", ",", 
             RowBox[{"theFormula", "=", "\"\<\>\""}], ",", 
             "\[IndentingNewLine]", "_", ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
               "gaSqrtOfMV"}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theMethod", "===", "\"\<CoordinateFree\>\""}], ",", 
             RowBox[{"theFormula", "=", 
              RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
               "gaSqrtOfMV"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Information", " ", "about", " ", "option", " ", "handling"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Method is\>\"", ",", "theMethod"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Formula is set to \>\"", ",", "theFormula"}], "}"}]}],
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "only", " ", "available", " ", "methods", " ", "log", " ", 
        "is", " ", "\"\<CoordinateFree\>\"", " ", "and", " ", 
        "\"\<Coordinate\>\"", " ", "if", " ", "gaFunctionOfMV", " ", "is", 
        " ", "used"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "theMethod", ",", "\"\<CoordinateFree\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "theFormula", ",", "\"\<LowDimension\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"sqrtOfMV", "[", 
           RowBox[{"expr", ",", "theMethod", ",", "theFormula", ",", 
            RowBox[{"theOption", "/@", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Quiet\>\"", ",", "\"\<GeneratedParameters\>\"", ",", 
               "\"\<Simplify\>\"", ",", "\"\<VerifySolutions\>\""}], 
              "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ScalarPartInSum\>\"", "|", "\"\<ScalarPartOutOfSum\>\""}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Call to gaFunctionOfMV[Log,MV]! More control is available \
using options for that function.\>\"", ",", "\"\<\>\""}], "}"}], "}"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"functionOfMVCoordinateFree", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Power", "[", 
               RowBox[{"#", ",", 
                RowBox[{"1", "/", "2"}]}], "]"}], "&"}], ",", 
             RowBox[{"gaPE", "[", "expr", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}], ",", 
               "Identity", ",", "theFormula", ",", "\"\<RootSum\>\"", ",", 
               "Complexes", ",", "False", ",", "False"}], "}"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        "\"\<gaMatrixRepresentation\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"sqrtOfMV", "[", 
         RowBox[{"expr", ",", "\"\<gaMatrixRepresentation\>\"", ",", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
           "gaSqrtOfMV"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[605]:=",ExpressionUUID->"70d2f162-3ea0-4055-9439-6e8392d544c8"],

Cell["\<\
The older implementation was moved to notebook Develop/obsolete.nb\
\>", "Text",ExpressionUUID->"58ccba73-06f7-42b4-9dda-3ca5231ed05f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrt", "[", "args___", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaVerify", "::", "obsolete"}], ",", "\"\<gaSqrt[]\>\"", ",", 
       "\"\<gaSqrtOfMV[]\>\""}], "]"}], ";", 
     RowBox[{"gaSqrtOfMV", "[", "args", "]"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[608]:=",ExpressionUUID->"2f433aeb-9ead-4086-9079-d441fa7e5c19"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,0) case", "Item",ExpressionUUID->"e0bb99f1-b6b2-4fae-be26-6d65ff645b34"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. "
}], "Text",ExpressionUUID->"f15cd4c4-e2ee-49a1-9730-bc0241cb1cda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", "cfsRules", ",", "cfs", 
          ",", "coef", ",", "b", ",", "\[IndentingNewLine]", 
          "theTransformation", ",", "det", ",", "detSqrt", ",", "solsZero", 
          ",", "sSRulesGeneric", ",", "solTemplate", ",", "vVRulesGeneric", 
          ",", "s", ",", "v", ",", "solRegular", ",", "answer", ",", 
          "possiblyBadSols"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", "det", "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"\"\<det\>\"", ",", 
              RowBox[{"det", "/.", "cfsRules"}]}], "}"}], "}"}]}], "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "s"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGeneric", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{"-", "detSqrt"}], "+", 
                   RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                 RowBox[{"Sqrt", "[", "2", "]"}]}]}], "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"detSqrt", "+", 
                   RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                 RowBox[{"Sqrt", "[", "2", "]"}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"b", "[", "1", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}]}], "}"}], "/.", "cfsRules"}],
            ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"main", " ", "s"}], ",", 
                 RowBox[{"S", " ", "branch"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[PlusMinus]detSqrt+b[0]\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "cfsRules"}]}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                   "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{"det", "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
              "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "sSRulesGeneric", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solsZero", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", " ", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], ")"}], "/.",
                     "cfsRules"}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "/.", "cfsRules"}], 
                    "]"}]}]}], "}"}]}], ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], ")"}], "/.",
                     "cfsRules"}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "/.", "cfsRules"}], "]"}]}],
                    "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"zeroQ", "[", 
                 RowBox[{
                  RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                RowBox[{"nonNegativeQ", "[", 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "/.", "cfsRules"}], "]"}]}]}],
               "}"}], "}"}], ",", "Nothing"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"solRegular", ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "solsZero"}], "}"}], ",", "solsZero"}], 
                "]"}]}], "}"}], "]"}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[609]:=",ExpressionUUID->"a274ed24-af08-4143-be06-7065d7b56779"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,1) case", "Item",ExpressionUUID->"8ab08e55-bec0-44d6-b19f-ec3f874690e3"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. "
}], "Text",ExpressionUUID->"b54cfefd-098f-40c1-8b63-af3e0b6e8831"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", "cfsRules", ",", "cfs", 
          ",", "coef", ",", "b", ",", "\[IndentingNewLine]", 
          "theTransformation", ",", "det", ",", "detSqrt", ",", "solsZero", 
          ",", "sSRulesGeneric", ",", "solTemplate", ",", "vVRulesGeneric", 
          ",", "s", ",", "v", ",", "solRegular", ",", "answer", ",", 
          "possiblyBadSols"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", "det", "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"\"\<det\>\"", ",", 
              RowBox[{"det", "/.", "cfsRules"}]}], "}"}], "}"}]}], "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "s"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGeneric", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"detSqrt", "+", 
                   RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                 RowBox[{"Sqrt", "[", "2", "]"}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"b", "[", "1", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}]}], "}"}], "/.", "cfsRules"}],
            ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"main", " ", "s"}], ",", 
                 RowBox[{"S", " ", "branch"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[PlusMinus]detSqrt+b[0]\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "cfsRules"}]}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                   "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{"det", "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
              "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "sSRulesGeneric", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solsZero", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", " ", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], ")"}], "/.",
                     "cfsRules"}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "/.", "cfsRules"}], 
                    "]"}]}]}], "}"}]}], ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], ")"}], "/.",
                     "cfsRules"}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "/.", "cfsRules"}], 
                    "]"}]}], "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"zeroQ", "[", 
                 RowBox[{
                  RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                RowBox[{"nonNegativeQ", "[", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"b", "[", "0", "]"}]}], "/.", "cfsRules"}], 
                 "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"solRegular", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "solsZero"}], "}"}], ",", "solsZero"}], 
               "]"}]}], "}"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[610]:=",ExpressionUUID->"d380c725-79da-4c39-a043-ebaeebcfca24"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,0) case", "Item",ExpressionUUID->"5489a124-a492-4370-89c2-8bea07b23fcc"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. "
}], "Text",ExpressionUUID->"cd825a33-3f7d-409b-87f0-fcc0dbd210ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", "cfsRules", ",", "cfs", 
          ",", "coef", ",", "b", ",", "\[IndentingNewLine]", 
          "theTransformation", ",", "det", ",", "detSqrt", ",", "solsZero", 
          ",", "sSRulesGeneric", ",", "solTemplate", ",", "vVRulesGeneric", 
          ",", "s", ",", "S", ",", "v", ",", "solRegular", ",", "answer", ",",
           "possiblyBadSols"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "3", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", "det", "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"\"\<det\>\"", ",", 
              RowBox[{"det", "/.", "cfsRules"}]}], "}"}], "}"}]}], "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "s"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGeneric", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], 
                   ")"}]}]}]}], "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                  RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"b", "[", "3", "]"}], "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}]}]}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], 
                   ")"}]}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                  RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"b", "[", "3", "]"}], "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}]}]}], 
               "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{"S", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"b", "[", "1", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", "s"}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"b", "[", "2", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", "s"}], ")"}]}]}]}], "}"}], "/.", 
            "cfsRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"main", " ", "s"}], ",", 
                 RowBox[{"S", " ", "branch"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[PlusMinus]detSqrt+b[0]\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "cfsRules"}]}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                   "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{"det", "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
              "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "sSRulesGeneric", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solsZero", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}]}], 
                    "}"}]}], ")"}], ")"}], "/.", "cfsRules"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "}"}]}], ")"}], ")"}], "/.", "cfsRules"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"solRegular", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solsZero"}], "}"}], ",", "solsZero"}], 
                 "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
              RowBox[{"genParam", "[", 
               RowBox[{"1", ",", "in"}], "]"}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[611]:=",ExpressionUUID->"7d6c06dc-6c74-4f9b-9f45-a21d72ca6754"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,1) case (the algebra is isomorphic to Cl(2,0)) ", "Item",ExpressionUUID->"328d4f1e-abf1-46c3-adff-d0b4b0b9d828"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. "
}], "Text",ExpressionUUID->"56186a26-55fc-40e4-84dd-c85e97a28b4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", "cfsRules", ",", "cfs", 
          ",", "coef", ",", "b", ",", "\[IndentingNewLine]", 
          "theTransformation", ",", "det", ",", "detSqrt", ",", "solsZero", 
          ",", "sSRulesGeneric", ",", "solTemplate", ",", "vVRulesGeneric", 
          ",", "s", ",", "S", ",", "v", ",", "solRegular", ",", "answer", ",",
           "possiblyBadSols"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "3", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", "det", "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "s"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGeneric", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], 
                   ")"}]}]}]}], "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                  RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"b", "[", "3", "]"}], "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}]}]}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], 
                   ")"}]}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                  RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"b", "[", "3", "]"}], "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}]}]}], 
               "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{"S", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"b", "[", "1", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", "s"}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"b", "[", "2", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", "s"}], ")"}]}]}]}], "}"}], "/.", 
            "cfsRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"main", " ", "s"}], ",", 
                 RowBox[{"S", " ", "branch"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                  "cfsRules"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{"det", "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
              "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "sSRulesGeneric", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solsZero", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}]}], 
                    "}"}]}], ")"}], ")"}], "/.", "cfsRules"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "}"}]}], ")"}], ")"}], "/.", "cfsRules"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"solRegular", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solsZero"}], "}"}], ",", "solsZero"}], 
                 "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
              RowBox[{"genParam", "[", 
               RowBox[{"1", ",", "in"}], "]"}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[612]:=",ExpressionUUID->"1bf9d479-8964-4297-b123-a07c4e928c3f"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,2) case", "Item",ExpressionUUID->"797bfead-0439-49d6-891f-45f3f52db796"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. "
}], "Text",ExpressionUUID->"bbc884e7-a355-4ed5-a649-931f6ec2fa75"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", "cfsRules", ",", "cfs", 
          ",", "coef", ",", "b", ",", "\[IndentingNewLine]", 
          "theTransformation", ",", "det", ",", "detSqrt", ",", "solsZero", 
          ",", "sSRulesGeneric", ",", "solTemplate", ",", "vVRulesGeneric", 
          ",", "s", ",", "S", ",", "v", ",", "solRegular", ",", "answer", ",",
           "possiblyBadSols"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "3", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", "det", "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "s"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGeneric", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], 
                   ")"}]}]}]}], "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                  RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"b", "[", "3", "]"}], "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}]}]}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{"-", "detSqrt"}], "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], 
                   ")"}]}]}]}], "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                  RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"b", "[", "3", "]"}], "/", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}]}]}], 
               "}"}], ",", 
              RowBox[{"detSqrt", "+", 
               RowBox[{"b", "[", "0", "]"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{"S", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"b", "[", "1", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", "s"}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"b", "[", "2", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", "s"}], ")"}]}]}]}], "}"}], "/.", 
            "cfsRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"main", " ", "s"}], ",", 
                 RowBox[{"S", " ", "branch"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                  "cfsRules"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{"det", "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
              "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "sSRulesGeneric", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solsZero", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}]}], 
                    "}"}]}], ")"}], ")"}], "/.", "cfsRules"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"negativeQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "}"}]}], ")"}], ")"}], "/.", "cfsRules"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/.", "cfsRules"}], "]"}], "&&", 
                  RowBox[{"negativeQ", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "/.", "cfsRules"}], 
                   "]"}]}]}], "}"}], "}"}], ",", "Nothing"}], "]"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"solRegular", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solsZero"}], "}"}], ",", "solsZero"}], 
                 "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
              RowBox[{"genParam", "[", 
               RowBox[{"1", ",", "in"}], "]"}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[613]:=",ExpressionUUID->"d8c8ca2d-14f6-408b-88aa-4bf29e42caa9"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(3,0) case", "Item",ExpressionUUID->"bfe6d47a-c8fe-4120-a368-9b9f9f8ad02f"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. Not yet well tested, please \
check the answer using older implementation ",
 StyleBox["gaSqrt []",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"291c3347-6a13-405a-b688-fad01c2216ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"ps", "=", 
           RowBox[{"gaI", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"3", ",", "0", ",", "0"}], "]"}], "]"}]}], ",", 
          "cfsRules", ",", "cfs", ",", "coef", ",", "b", ",", 
          "\[IndentingNewLine]", "theTransformation", ",", "bCCb0", ",", 
          "bCCbI0", ",", "detSqrt", ",", "mBsPlusdetSqrt", ",", 
          "mBsPlusdetSqrt1", ",", "tTRulesGeneric", ",", "tTRulesGeneric0", 
          ",", "tTRules", ",", "stS", ",", "s2pS2", ",", "sSRulesGeneric", 
          ",", "sSRulesGenerict0Positive", ",", "sSRulesGenerict0Negative", 
          ",", "solTemplate", ",", "vVRulesGeneric", ",", "vVRules00", ",", 
          "s", ",", "S", ",", "v", ",", "V", ",", "solRegular", ",", 
          "solBothsSZero", ",", "answer", ",", "possiblyBadSols"}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}], ",", 
               RowBox[{"b", "[", "4", "]"}], ",", 
               RowBox[{"b", "[", "5", "]"}], ",", 
               RowBox[{"b", "[", "6", "]"}], ",", 
               RowBox[{"b", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}], ",", 
              RowBox[{"b", "[", "4", "]"}], ",", 
              RowBox[{"b", "[", "5", "]"}], ",", 
              RowBox[{"b", "[", "6", "]"}], ",", 
              RowBox[{"b", "[", "7", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", 
            RowBox[{
             RowBox[{"bCCb0", "^", "2"}], "+", 
             RowBox[{"bCCbI0", "^", "2"}]}], "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"mBsPlusdetSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{
            RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<b_S=\>\"", ",", "bCCb0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<b_I=\>\"", ",", "bCCbI0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Sqrt[D]=\>\"", ",", "detSqrt"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<-b_S+Sqrt[D]=\>\"", ",", "mBsPlusdetSqrt"}], 
              "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "stS"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sSSqrt", "=", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"s2pS2", "^", "2"}], "+", 
               RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"{", 
             RowBox[{"rules", ",", " ", "conditions"}], "}"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"sSRulesGeneric", "=", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    ")"}]}]}]}], "}"}], ",", 
                RowBox[{
                 RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    ")"}]}]}], "}"}], ",", 
                RowBox[{
                 RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}]}], "}"}]}], 
             "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "stS"}], "=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGenerict0Positive", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", "0"}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}]}]}], "}"}],
               ",", "s2pS2"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", "0"}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", "s2pS2", "]"}]}]}]}], "}"}], ",", 
              "s2pS2"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGenerict0Negative", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"S", "\[Rule]", "0"}], ",", 
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "s2pS2"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
              
              RowBox[{"-", "s2pS2"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"S", "\[Rule]", "0"}], ",", 
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", "s2pS2"}], "]"}]}]}]}], "}"}], ",", 
              RowBox[{"-", "s2pS2"}]}], "}"}]}], "\[IndentingNewLine]", 
           "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"mBsPlusdetSqrt", " ", ">", 
            RowBox[{
            "0.", " ", "Since", " ", "mBsPlusdetSqrt", " ", "can", " ", 
             "turn", " ", "to", " ", "zero"}]}], ",", " ", 
           RowBox[{
           "rename", " ", "it", " ", "to", " ", "some", " ", "other", " ", 
            "symbol"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}]}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "*", "bCCbI0"}], ")"}],
                     "/", 
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}]}], "}"}], "/.", "cfsRules"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"mBsPlusdetSqrt", "=", "0"}], ",", " ", 
           RowBox[{"bCCb0", ">", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric0", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "-", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "bCCb0", "]"}], "-", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "+", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "2", "]"}]}], "-", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "3", "]"}]}], "+", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"S", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], "+", 
                   RowBox[{"s", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], ")"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}]}], "}"}], "/.",
             "cfsRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "continuous", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "explicit", " ", "equations", " ", "and", " ", "their", " ", 
            "solutions"}], ",", " ", 
           RowBox[{"which", " ", "depend", " ", "on", " ", 
            RowBox[{"parameters", ".", " ", "Not"}], " ", "all", " ", 
            "parameters", " ", "have", " ", "numerical", " ", "values", " ", 
            "in", " ", 
            RowBox[{
             RowBox[{"R", " ", "!!"}], "!"}]}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vVRules00", "=", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "0", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "7", "]"}]}], "+", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "1", "]"}], "*", 
                  RowBox[{"V", "[", "1", "]"}]}], "+", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "2", "]"}], "*", 
                  RowBox[{"V", "[", "2", "]"}]}], "+", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "3", "]"}], "*", 
                  RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
              "}"}], "/.", "cfsRules"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], ",", 
              RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "\[NotEqual]", "0"}], ",", " ", 
                    RowBox[{"mBsPlusdetSqrt", ">", "0"}]}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"mBsPlusdetSqrt1", "->", "mBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}]}]}], 
                    ")"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"mBsPlusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], ">", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"mBsPlusdetSqrt1", "->", "mBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"mBsPlusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], "<", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"mBsPlusdetSqrt1", "->", "mBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "mBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", 
                    RowBox[{"0", " ", "t"}], "\[NotEqual]", "0"}]}]}], "*)"}],
                   "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}]}]}], 
                    ")"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "mBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}], 
                    ",", " ", 
                    RowBox[{"t", "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
                  
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "mBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], "<", "0"}]}], 
                    ",", " ", 
                    RowBox[{"t", "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
                  
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"i", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{
          "branch", " ", "with", " ", "4", " ", "free", " ", "parameters"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solBothsSZero", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"(*", " ", 
              RowBox[{"sqrt", " ", "of", " ", "0"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], ",", 
                    RowBox[{"V", "[", "1", "]"}]}], "}"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "Reals"}], "]"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "}"}], ",", "Nothing"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
                   "}"}], "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], "]"}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"(*", " ", 
              RowBox[{"sqrt", " ", "of", " ", "0"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
                   "}"}], "\[IndentingNewLine]", "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], "]"}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"solRegular", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solBothsSZero"}], "}"}], ",", 
                  "solBothsSZero"}], "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"3", ",", "0", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[614]:=",ExpressionUUID->"672bf2e8-50e0-4a91-8a4d-b71360d94d86"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,1) case", "Item",ExpressionUUID->"64049c0c-c575-4904-a093-abd750ee256f"],

Cell[TextData[{
 "New realisation using Piecewise[ ] under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. Not yet well tested, please \
check the answer using older implementation ",
 StyleBox["gaSqrt []",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"711b2484-3bd8-4979-b093-938cde8f5a7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "1", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"ps", "=", 
           RowBox[{"gaI", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "1", ",", "0"}], "]"}], "]"}]}], ",", 
          "cfsRules", ",", "cfs", ",", "coef", ",", "b", ",", 
          "\[IndentingNewLine]", "theTransformation", ",", "bCCb0", ",", 
          "bCCbI0", ",", "detD", ",", "detSqrt", ",", "pBsMinusdetSqrt", ",", 
          "pBsPlusdetSqrt", ",", "pBsMinusdetSqrt1", ",", "pBsPlusdetSqrt1", 
          ",", "stS", ",", "s2pS2", ",", "sSRulesGeneric", ",", 
          "sSRulesGenerict0", ",", "tTRulesGenericMinus", ",", 
          "tTRulesGenericPlus", ",", "tTRulesGeneric0", ",", "tTRules", ",", 
          "solTemplate", ",", "vVRulesGeneric", ",", "sSRulesPositive", ",", 
          "sSRulesNegative", ",", "vVRulesPositive", ",", "V1RulesPositive", 
          ",", "vVRulesNegative", ",", "V1RulesNegative", ",", "vVRules00", 
          ",", "s", ",", "S", ",", "v", ",", "V", ",", "solRegular", ",", 
          "solFree2Positive", ",", "solFree2Negative", ",", "solBothsSZero", 
          ",", "answer", ",", "possiblyBadSols"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}], ",", 
               RowBox[{"b", "[", "4", "]"}], ",", 
               RowBox[{"b", "[", "5", "]"}], ",", 
               RowBox[{"b", "[", "6", "]"}], ",", 
               RowBox[{"b", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}], ",", 
              RowBox[{"b", "[", "4", "]"}], ",", 
              RowBox[{"b", "[", "5", "]"}], ",", 
              RowBox[{"b", "[", "6", "]"}], ",", 
              RowBox[{"b", "[", "7", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detD", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{
            RowBox[{"bCCb0", "^", "2"}], "-", 
            RowBox[{"bCCbI0", "^", "2"}]}], "]"}]}], ";", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"Sqrt", "[", "detD", "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"it", " ", "can", " ", "be", " ", "proved", " ", 
            RowBox[{"(", 
             RowBox[{"using", " ", 
              RowBox[{"Resolve", "[", "]"}]}], ")"}], " ", "that", " ", 
            "pBsMinusdetSqrt"}], "\[GreaterEqual]", 
           RowBox[{"0", " ", "and", " ", "pBsPlusdetSqrt"}], 
           "\[GreaterEqual]", 
           RowBox[{
           "0.", " ", "So", " ", "check", " ", "of", " ", "positivity", " ", 
            "below", " ", "is", " ", 
            RowBox[{"obsolete", ".", " ", "To"}], " ", "be", " ", "removed", 
            " ", "in", " ", "future"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{"pBsMinusdetSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pBsPlusdetSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"condition", "  ", "s2pS2"}], "\[GreaterEqual]", "0"}], 
           ",", 
           RowBox[{"stS", "=!=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sSSqrt", "=", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"s2pS2", "^", "2"}], "-", 
               RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"{", 
             RowBox[{"rules", ",", " ", "conditions"}], "}"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"sSRulesGeneric", "=", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ")"}]}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "-", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ")"}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "-", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ")"}]}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "+", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ")"}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "+", "sSSqrt"}]}], "}"}]}], 
             "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"condition", "  ", "s2pS2"}], "\[GreaterEqual]", "0"}], 
           ",", 
           RowBox[{"stS", "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"sSRulesGenerict0", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"s", "\[Rule]", "0"}], ",", 
               RowBox[{"S", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}]}]}], "}"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"s", "\[Rule]", "0"}], ",", 
               RowBox[{"S", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                 RowBox[{"Sqrt", "[", "s2pS2", "]"}]}]}]}], "}"}], "}"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", "0"}], ",", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}]}]}], "}"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", "0"}], ",", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                 RowBox[{"Sqrt", "[", "s2pS2", "]"}]}]}]}], "}"}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"pBsMinusdetSqrt", ",", " ", 
           RowBox[{"pBsPlusdetSqrt", " ", ">", "<", 
            RowBox[{
            "0.", " ", "Since", " ", "pBsMinusdetSqrt", " ", "and", " ", 
             "pBsPlusdetSqrt", " ", "can", " ", "be", " ", "0"}]}], ",", " ", 
           
           RowBox[{
           "rename", " ", "it", " ", "to", " ", "some", " ", "other", " ", 
            "symbol"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGenericMinus", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}]}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "*", "bCCbI0"}], ")"}],
                     "/", 
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"tTRulesGenericPlus", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sqrt", "[", "pBsPlusdetSqrt1", "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", "pBsPlusdetSqrt1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "pBsPlusdetSqrt1", "]"}]}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "*", "bCCbI0"}], ")"}],
                     "/", 
                    RowBox[{"Sqrt", "[", "pBsPlusdetSqrt1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"pBsMinusdetSqrt", "|", "pBsPlusdetSqrt"}], " ", "=", 
            "0"}], ",", " ", 
           RowBox[{"bCCb0", ">", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric0", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "+", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "bCCb0", "]"}], "+", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"two", " ", "free", " ", "parameters"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"rules", ",", " ", "conditions"}], "}"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesPositive", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}]}], 
            "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesNegative", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], 
           "/.", "cfsRules"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<b_S=\>\"", ",", "bCCb0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<b_I=\>\"", ",", "bCCbI0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<D=\>\"", ",", "detD"}], "}"}]}], "}"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"s", "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "-", 
                 RowBox[{"S", "*", 
                  RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"s", "*", 
                  RowBox[{"b", "[", "2", "]"}]}], "+", 
                 RowBox[{"S", "*", 
                  RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"s", "*", 
                  RowBox[{"b", "[", "3", "]"}]}], "+", 
                 RowBox[{"S", "*", 
                  RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "S"}], "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "+", 
                 RowBox[{"s", "*", 
                  RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "2", "]"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "3", "]"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}]}], "}"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "continuous", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"vVRulesPositive", "=", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "[", "1", "]"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "-", 
              RowBox[{"V", "[", "1", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "[", "2", "]"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "-", 
              RowBox[{"V", "[", "2", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "[", "3", "]"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "-", 
              RowBox[{"V", "[", "3", "]"}]}]}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"V1RulesPositive", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"vVRulesNegative", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"b", "[", "1", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "+", 
              RowBox[{"V", "[", "1", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"b", "[", "2", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "+", 
              RowBox[{"V", "[", "2", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"b", "[", "3", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "+", 
              RowBox[{"V", "[", "3", "]"}]}]}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"V1RulesNegative", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "-", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "-", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "explicit", " ", "equations", " ", "and", " ", "their", " ", 
            "solutions"}], ",", " ", 
           RowBox[{"which", " ", "depend", " ", "on", " ", 
            RowBox[{"parameters", ".", " ", "Not"}], " ", "all", " ", 
            "parameters", " ", "have", " ", "numerical", " ", "values", " ", 
            "in", " ", 
            RowBox[{
             RowBox[{"R", " ", "!!"}], "!"}]}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vVRules00", "=", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "0", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "7", "]"}]}], "+", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "1", "]"}], "*", 
                  RowBox[{"V", "[", "1", "]"}]}], "+", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "2", "]"}], "*", 
                  RowBox[{"V", "[", "2", "]"}]}], "-", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "3", "]"}], "*", 
                  RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
              "}"}], "/.", "cfsRules"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], ",", 
              RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "\[NotEqual]", "0"}], ",", " ", 
                    RowBox[{"pBsMinusdetSqrt", ">", "0"}]}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsMinusSqrtOfDet>0,t\[NotEqual]\
0\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<s2pS2\[PlusMinus]sSSqrt>0;s2pS2\[GreaterEqual]0;stS\
\[NotEqual]0;s^2-S^2\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGenericMinus", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"pBsMinusdetSqrt1", "->", "pBsMinusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "\[NotEqual]", "0"}], ",", " ", 
                    RowBox[{"pBsPlusdetSqrt", ">", "0"}]}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsPlusSqrtOfDet>0,t\[NotEqual]0\
\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<s2pS2\[PlusMinus]sSSqrt>0;s2pS2\[GreaterEqual]0;stS\
\[NotEqual]0;s^2-S^2\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", "pBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGenericPlus", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"pBsPlusdetSqrt1", "->", "pBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "pBsMinusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsMinusSqrtOfDet=0,t\[NotEqual]\
0\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<s2pS2\[PlusMinus]sSSqrt>0;s2pS2\[GreaterEqual]0;stS\
\[NotEqual]0;s^2-S^2\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "pBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsPlusSqrtOfDet=0,t\[NotEqual]0\
\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<s2pS2\[PlusMinus]sSSqrt>0;s2pS2\[GreaterEqual]0;stS\
\[NotEqual]0;s^2-S^2\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", "pBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"pBsMinusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], ">", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsMinusSqrtOfDet=0,t\[NotEqual]\
0\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<s2pS2\[PlusMinus]sSSqrt>0;s2pS2\[GreaterEqual]0;stS=\
0;s^2-S^2\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGenericMinus", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"pBsMinusdetSqrt1", "->", "pBsMinusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"pBsPlusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], ">", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsPlusSqrtOfDet=0,t\[NotEqual]0\
\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<s2pS2\[PlusMinus]sSSqrt>0;s2pS2\[GreaterEqual]0;stS=\
0;s^2-S^2\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", "pBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGenericPlus", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"pBsPlusdetSqrt1", "->", "pBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"pBsMinusdetSqrt", "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsMinusSqrtOfDet=0,t\[NotEqual]\
0\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<bCCb0>0;s2pS2\[GreaterEqual]0;stS=0;s^2-S^2\
\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"pBsPlusdetSqrt", "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Det\[GreaterEqual]0,pBsPlusSqrtOfDet=0,t\[NotEqual]0\
\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<bCCb0>0;s2pS2\[GreaterEqual]0;stS=0;s^2-S^2\
\[NotEqual]0;s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", "pBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"i", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "branch", " ", "with", " ", "2", " ", "free", " ", "parameters"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solFree2Positive", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Try", " ", "to", " ", "validate", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"positive", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Two free parameters Free2Positive branch. \
Verify:\>\"", ",", "theVerify"}], "}"}]}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesPositive"}], ")"}], "/.", 
                    RowBox[{"V1RulesPositive", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V1RulesPositive", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], "/.", 
                    "cfsRules"}], ")"}], ",", "Reals"}], "]"}]}], "]"}], 
                    "]"}]}], "}"}], "\[IndentingNewLine]", "}"}], ",", 
                    "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Without", " ", "validation", " ", "of", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"positive", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Two free parameters Free2Positive branch. \
Verify:\>\"", ",", "theVerify"}], "}"}]}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesPositive"}], ")"}], "/.", 
                    RowBox[{"V1RulesPositive", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solFree2Negative", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Try", " ", "to", " ", "validate", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"negative", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Two free parameters Free2negative branch. \
Verify:\>\"", ",", "theVerify"}], "}"}]}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesNegative"}], ")"}], "/.", 
                    RowBox[{"V1RulesNegative", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V1RulesNegative", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], "/.", 
                    "cfsRules"}], ")"}], ",", "Reals"}], "]"}]}], "]"}], 
                    "]"}]}], "}"}], "\[IndentingNewLine]", "}"}], ",", 
                    "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Without", " ", "validation", " ", "of", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"negative", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<{i,j}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Two free parameters Free2negative branch. \
Verify:\>\"", ",", "theVerify"}], "}"}]}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesNegative"}], ")"}], "/.", 
                    RowBox[{"V1RulesNegative", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "branch", " ", "with", " ", "4", " ", "free", " ", "parameters"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solBothsSZero", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], ",", 
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"b", "[", "7", "]"}]}], "}"}], "/.", "cfsRules"}],
                     ")"}]}], ")"}]}]}], "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Piecewise", "[", 
                  RowBox[{
                   RowBox[{"{", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Four free parameters branch. Verify:\>\"", ",", 
                    "theVerify"}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], ",", 
                    RowBox[{"V", "[", "1", "]"}]}], "}"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "Reals"}], "]"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "}"}], ",", "Nothing"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], 
                "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], ",", 
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"b", "[", "7", "]"}]}], "}"}], "/.", "cfsRules"}],
                     ")"}]}], ")"}]}]}], "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Piecewise", "[", 
                  RowBox[{
                   RowBox[{"{", " ", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Four free parameters branch. Verify:\>\"", ",", 
                    "theVerify"}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", "detD", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}], ")"}]}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "}"}], ",", "Nothing"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], 
                "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
               "solRegular", ",", "solFree2Positive", ",", "solFree2Negative",
                 ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solBothsSZero"}], "}"}], ",", 
                  "solBothsSZero"}], "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[615]:=",ExpressionUUID->"52dd8d37-0c97-4ab9-83fe-d726ada7b15b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,2) case (the algebra is isomorphic to Cl(3,0) )", "Item",ExpressionUUID->"74f8001e-15e4-4704-8e61-b6f416fbfeb2"],

Cell[TextData[{
 "New realisation using Piecewise under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. Not yet well tested, please \
check the answer using older implementation ",
 StyleBox["gaSqrt []",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"c2c0ae8c-b23f-4284-9b5e-1950037a65bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"ps", "=", 
           RowBox[{"gaI", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "2", ",", "0"}], "]"}], "]"}]}], ",", 
          "cfsRules", ",", "cfs", ",", "coef", ",", "b", ",", 
          "\[IndentingNewLine]", "theTransformation", ",", "bCCb0", ",", 
          "bCCbI0", ",", "detSqrt", ",", "mBsPlusdetSqrt", ",", 
          "mBsPlusdetSqrt1", ",", "tTRulesGeneric", ",", "tTRulesGeneric0", 
          ",", "tTRules", ",", "stS", ",", "s2pS2", ",", "sSRulesGeneric", 
          ",", "sSRulesGenerict0Positive", ",", "sSRulesGenerict0Negative", 
          ",", "solTemplate", ",", "vVRulesGeneric", ",", "vVRules00", ",", 
          "s", ",", "S", ",", "v", ",", "V", ",", "solRegular", ",", 
          "solBothsSZero", ",", "answer", ",", "possiblyBadSols"}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}], ",", 
               RowBox[{"b", "[", "4", "]"}], ",", 
               RowBox[{"b", "[", "5", "]"}], ",", 
               RowBox[{"b", "[", "6", "]"}], ",", 
               RowBox[{"b", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}], ",", 
              RowBox[{"b", "[", "4", "]"}], ",", 
              RowBox[{"b", "[", "5", "]"}], ",", 
              RowBox[{"b", "[", "6", "]"}], ",", 
              RowBox[{"b", "[", "7", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"Sqrt", "[", 
            RowBox[{
             RowBox[{"bCCb0", "^", "2"}], "+", 
             RowBox[{"bCCbI0", "^", "2"}]}], "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"mBsPlusdetSqrt", "=", 
          RowBox[{
           RowBox[{"-", "bCCb0"}], "+", "detSqrt"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<b_S=\>\"", ",", "bCCb0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<b_I=\>\"", ",", "bCCbI0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Sqrt[D]=\>\"", ",", "detSqrt"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<-b_S+Sqrt[D]=\>\"", ",", "mBsPlusdetSqrt"}], 
              "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "stS"}], "=!=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sSSqrt", "=", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"s2pS2", "^", "2"}], "+", 
               RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"{", 
             RowBox[{"rules", ",", " ", "conditions"}], "}"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"sSRulesGeneric", "=", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    ")"}]}]}]}], "}"}], ",", 
                RowBox[{
                 RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    ")"}]}]}], "}"}], ",", 
                RowBox[{
                 RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}]}], "}"}]}], 
             "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"condition", "  ", "stS"}], "=", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGenerict0Positive", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", "0"}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}]}]}], "}"}],
               ",", "s2pS2"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"s", "\[Rule]", "0"}], ",", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", "s2pS2", "]"}]}]}]}], "}"}], ",", 
              "s2pS2"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesGenerict0Negative", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"S", "\[Rule]", "0"}], ",", 
                RowBox[{"s", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "s2pS2"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
              
              RowBox[{"-", "s2pS2"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"S", "\[Rule]", "0"}], ",", 
                RowBox[{"s", "\[Rule]", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", "s2pS2"}], "]"}]}]}]}], "}"}], ",", 
              RowBox[{"-", "s2pS2"}]}], "}"}]}], "\[IndentingNewLine]", 
           "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"mBsPlusdetSqrt", " ", ">", 
            RowBox[{
            "0.", " ", "Since", " ", "mBsPlusdetSqrt", " ", "can", " ", 
             "turn", " ", "to", " ", "zero"}]}], ",", " ", 
           RowBox[{
           "rename", " ", "it", " ", "to", " ", "some", " ", "other", " ", 
            "symbol"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}]}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "*", "bCCbI0"}], ")"}],
                     "/", 
                    RowBox[{"Sqrt", "[", "mBsPlusdetSqrt1", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}]}], "}"}], "/.", "cfsRules"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"mBsPlusdetSqrt", "=", "0"}], ",", " ", 
           RowBox[{"bCCb0", ">", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric0", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "-", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "bCCb0", "]"}], "-", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "+", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "2", "]"}]}], "+", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "3", "]"}]}], "-", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "S"}], "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "S"}], "*", 
                   RowBox[{"b", "[", "2", "]"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], "+", 
                   RowBox[{"s", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
                RowBox[{"(", 
                 RowBox[{"2", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}]}], "}"}], "/.",
             "cfsRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "continuous", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "explicit", " ", "equations", " ", "and", " ", "their", " ", 
            "solutions"}], ",", " ", 
           RowBox[{"which", " ", "depend", " ", "on", " ", 
            RowBox[{"parameters", ".", " ", "Not"}], " ", "all", " ", 
            "parameters", " ", "have", " ", "numerical", " ", "values", " ", 
            "in", " ", 
            RowBox[{
             RowBox[{"R", " ", "!!"}], "!"}]}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vVRules00", "=", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "0", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "7", "]"}]}], "+", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "1", "]"}], "*", 
                  RowBox[{"V", "[", "1", "]"}]}], "-", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "2", "]"}], "*", 
                  RowBox[{"V", "[", "2", "]"}]}], "-", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "3", "]"}], "*", 
                  RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
              "}"}], "/.", "cfsRules"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], ",", 
              RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "\[NotEqual]", "0"}], ",", " ", 
                    RowBox[{"mBsPlusdetSqrt", ">", "0"}]}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"mBsPlusdetSqrt1", "->", "mBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}]}]}], 
                    ")"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"mBsPlusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], ">", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"mBsPlusdetSqrt1", "->", "mBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"mBsPlusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], "<", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"mBsPlusdetSqrt1", "->", "mBsPlusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "mBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", 
                    RowBox[{"0", " ", "t"}], "\[NotEqual]", "0"}]}]}], "*)"}],
                   "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}]}]}], 
                    ")"}]}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "mBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}], 
                    ",", " ", 
                    RowBox[{"t", "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
                  
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Positive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "mBsPlusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], "<", "0"}]}], 
                    ",", " ", 
                    RowBox[{"t", "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
                  
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "mBsPlusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0Negative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"i", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "branch", " ", "with", " ", "4", " ", "free", " ", "parameters"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solBothsSZero", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], ",", 
                    RowBox[{"V", "[", "1", "]"}]}], "}"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "Reals"}], "]"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "}"}], ",", "Nothing"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
                   "}"}], "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], "]"}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
                   "}"}], "\[IndentingNewLine]", "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], "]"}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"solRegular", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solBothsSZero"}], "}"}], ",", 
                  "solBothsSZero"}], "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "2", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[616]:=",ExpressionUUID->"5da4619e-32e5-4e30-8409-fd193f8327bc"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,3) case", "Item",ExpressionUUID->"3d0c09a2-0346-4269-b483-eccb54055148"],

Cell[TextData[{
 "New realisation using Piecewise[ ] under new name   ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " we hope will enable some symbolic expressions. Not yet well tested, please \
check the answer using older implementation ",
 StyleBox["gaSqrt []",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"81e7a131-d5ec-4bc0-8bad-f85d21304616"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
      RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"sqrtOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{
        "quiet_", ",", "genParam_", ",", "simplify_", ",", "verify_"}], 
        "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "3", ",", "0"}], "]"}]}], ",", 
          RowBox[{"theVerify", "=", "verify"}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"ps", "=", 
           RowBox[{"gaI", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "3", ",", "0"}], "]"}], "]"}]}], ",", 
          "cfsRules", ",", "cfs", ",", "coef", ",", "b", ",", 
          "\[IndentingNewLine]", "theTransformation", ",", "bCCb0", ",", 
          "bCCbI0", ",", "detSqrt", ",", "pBsMinusdetSqrt", ",", 
          "pBsMinusdetSqrt1", ",", "stS", ",", "s2pS2", ",", "sSRulesGeneric",
           ",", "sSRulesGenerict0", ",", "tTRulesGeneric", ",", 
          "tTRulesGeneric0", ",", "tTRules", ",", "solTemplate", ",", 
          "vVRulesGeneric", ",", "sSRulesPositive", ",", "sSRulesNegative", 
          ",", "vVRulesPositive", ",", "V1RulesPositive", ",", 
          "vVRulesNegative", ",", "V1RulesNegative", ",", "vVRules00", ",", 
          "s", ",", "S", ",", "v", ",", "V", ",", "solRegular", ",", 
          "solFree2Positive", ",", "solFree2Negative", ",", "solBothsSZero", 
          ",", "answer", ",", "possiblyBadSols"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicit", " ", "option", " ", "values"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "find", " ", "coefficients", " ", "of", " ", "input", " ", "MV"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"cfsRules", "=", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Collect", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", "expr"}], ",", "_bs", 
                    ",", "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], 
                 "]"}], "/.", 
                RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}],
              ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], ",", 
               RowBox[{"b", "[", "1", "]"}], ",", 
               RowBox[{"b", "[", "2", "]"}], ",", 
               RowBox[{"b", "[", "3", "]"}], ",", 
               RowBox[{"b", "[", "4", "]"}], ",", 
               RowBox[{"b", "[", "5", "]"}], ",", 
               RowBox[{"b", "[", "6", "]"}], ",", 
               RowBox[{"b", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cfs", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], ",", 
              RowBox[{"b", "[", "1", "]"}], ",", 
              RowBox[{"b", "[", "2", "]"}], ",", 
              RowBox[{"b", "[", "3", "]"}], ",", 
              RowBox[{"b", "[", "4", "]"}], ",", 
              RowBox[{"b", "[", "5", "]"}], ",", 
              RowBox[{"b", "[", "6", "]"}], ",", 
              RowBox[{"b", "[", "7", "]"}]}], "}"}], "/.", "cfsRules"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"MatchQ", "[", 
               RowBox[{"cfs", ",", 
                RowBox[{"{", 
                 RowBox[{"__", "?", "NumericQ"}], "}"}]}], "]"}]}], ")"}], "&&", 
            RowBox[{"theVerify", "===", "True"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaSqrtOfMV", "::", "verify"}], ",", "cfs"}], "]"}], 
            ";", 
            RowBox[{"theVerify", "=", "False"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{"theTransformation", "[", 
            RowBox[{
             RowBox[{"bCCb0", "^", "2"}], "-", 
             RowBox[{"bCCbI0", "^", "2"}]}], "]"}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"pBsMinusdetSqrt", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "generic", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"condition", "  ", "s2pS2"}], "\[GreaterEqual]", "0"}], 
           ",", 
           RowBox[{"stS", "=!=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sSSqrt", "=", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"s2pS2", "^", "2"}], "-", 
               RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"{", 
             RowBox[{"rules", ",", " ", "conditions"}], "}"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"sSRulesGeneric", "=", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ")"}]}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "-", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ")"}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "-", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ")"}]}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "+", "sSSqrt"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ",", 
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ")"}]}]}], 
                 "}"}], ",", 
                RowBox[{"s2pS2", "+", "sSSqrt"}]}], "}"}]}], 
             "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"condition", "  ", "s2pS2"}], "\[GreaterEqual]", "0"}], 
           ",", 
           RowBox[{"stS", "=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"sSRulesGenerict0", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"s", "\[Rule]", "0"}], ",", 
               RowBox[{"S", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}]}]}], "}"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"s", "\[Rule]", "0"}], ",", 
               RowBox[{"S", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                 RowBox[{"Sqrt", "[", "s2pS2", "]"}]}]}]}], "}"}], "}"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", "0"}], ",", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}]}]}], "}"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", "0"}], ",", 
               RowBox[{"s", "\[Rule]", 
                RowBox[{
                 RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                 RowBox[{"Sqrt", "[", "s2pS2", "]"}]}]}]}], "}"}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"pBsMinusdetSqrt", " ", ">", 
            RowBox[{"0.", " ", "Since", " ", "pBsMinusdetSqrt"}]}], ",", " ", 
           
           RowBox[{
           "rename", " ", "it", " ", "to", " ", "some", " ", "other", " ", 
            "symbol"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}]}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                   RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "*", "bCCbI0"}], ")"}],
                     "/", 
                    RowBox[{"Sqrt", "[", "pBsMinusdetSqrt1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}]}]}], 
              "}"}]}], "}"}], "/.", "cfsRules"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"pBsMinusdetSqrt", "=", "0"}], ",", " ", 
           RowBox[{"bCCb0", ">", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tTRulesGeneric0", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "+", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"stS", "\[Rule]", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "/", "4"}]}], ",", 
               RowBox[{"s2pS2", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "bCCb0", "]"}], "+", 
                   RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"two", " ", "free", " ", "parameters"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"rules", ",", " ", "conditions"}], "}"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesPositive", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}], "+", 
                  RowBox[{"b", "[", "7", "]"}]}]}], "}"}]}], "}"}]}], 
            "\[IndentingNewLine]", "}"}], "/.", "cfsRules"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sSRulesNegative", "=", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"s", "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{"S", "\[Rule]", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"2", "*", "bCCb0"}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], ",", 
                 
                 RowBox[{
                  RowBox[{"b", "[", "0", "]"}], "-", 
                  RowBox[{"b", "[", "7", "]"}], "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                   "]"}]}]}], "}"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], 
           "/.", "cfsRules"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<b_S=\>\"", ",", "bCCb0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<b_I=\>\"", ",", "bCCbI0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Sqrt[D]=\>\"", ",", "detSqrt"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<b_S-Sqrt[D]=\>\"", ",", "pBsMinusdetSqrt"}], 
              "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "regular", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vVRulesGeneric", "=", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "-", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "6", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], ")"}]}], "+", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], ")"}]}], "-", 
                  RowBox[{"S", "*", 
                   RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "-", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "6", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], ")"}]}], "+", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}], ",", 
             RowBox[{
              RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], ")"}]}], "-", 
                  RowBox[{"s", "*", 
                   RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                   RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}]}]}], "}"}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "continuous", " ", "solution", " ", "and", " ", "vV", " ", "rules", 
           " ", "for", " ", "it"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"vVRulesPositive", "=", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "[", "1", "]"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "-", 
              RowBox[{"V", "[", "1", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "[", "5", "]"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "-", 
              RowBox[{"V", "[", "2", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", 
                 RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "-", 
              RowBox[{"V", "[", "3", "]"}]}]}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"V1RulesPositive", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"vVRulesNegative", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"b", "[", "6", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "+", 
              RowBox[{"V", "[", "1", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"b", "[", "2", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "+", 
              RowBox[{"V", "[", "2", "]"}]}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
             RowBox[{
              RowBox[{
               RowBox[{"b", "[", "4", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"2", "*", "s"}], ")"}]}], "+", 
              RowBox[{"V", "[", "3", "]"}]}]}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"V1RulesNegative", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "-", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "2"}], "*", 
                  RowBox[{"b", "[", "1", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "-", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "explicit", " ", "equations", " ", "and", " ", "their", " ", 
            "solutions"}], ",", " ", 
           RowBox[{"which", " ", "depend", " ", "on", " ", 
            RowBox[{"parameters", ".", " ", "Not"}], " ", "all", " ", 
            "parameters", " ", "have", " ", "numerical", " ", "values", " ", 
            "in", " ", 
            RowBox[{
             RowBox[{"R", " ", "!!"}], "!"}]}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vVRules00", "=", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "0", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                 RowBox[{
                  RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"b", "[", "7", "]"}]}], "-", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "1", "]"}], "*", 
                  RowBox[{"V", "[", "1", "]"}]}], "-", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "2", "]"}], "*", 
                  RowBox[{"V", "[", "2", "]"}]}], "-", 
                 RowBox[{"2", "*", 
                  RowBox[{"v", "[", "3", "]"}], "*", 
                  RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
              "}"}], "/.", "cfsRules"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "[", "1", "]"}], ",", 
              RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"since", " ", "in", " ", "12.1", ".1", " ", "version", " ", 
            RowBox[{"Piecewise", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"s", "\[Equal]", "0"}]}], "}"}], "}"}], ",", 
              "Nothing"}], "]"}], " ", "quits", " ", "kernel"}], ",", " ", 
           RowBox[{"needs", " ", "a", " ", "workaround", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Sequence", " ", "dissapears", " ", "immediately"}], 
              ",", " ", 
              RowBox[{"not", " ", "good"}]}], ")"}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "provide", " ", "only", " ", "mutually", " ", "exclusive", " ", 
           "pieces", " ", "in", " ", 
           RowBox[{"piecewise", "!"}], " ", "Otherwise", " ", "some", " ", 
           "parts", " ", "will", " ", "be", " ", "lost"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"solRegular", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "\[NotEqual]", "0"}], ",", " ", 
                    RowBox[{"pBsMinusdetSqrt", ">", "0"}]}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printSqrtDetail", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<pBsMinusdetSqrt>0,T\[GreaterEqual]0,t\[NotEqual]0\>\"\
", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"pBsMinusdetSqrt1", "->", "pBsMinusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{
                    RowBox[{"t", "\[NotEqual]", 
                    RowBox[{"0", " ", "pBsMinusdetSqrt"}]}], "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<pBsMinusdetSqrt=0;bCCb0>0,T\[GreaterEqual]0,t\
\[NotEqual]0\>\"", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}]}], ")"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"pBsMinusdetSqrt", ">", 
                    RowBox[{"0", " ", "or", " ", "s2pS2"}], ">", "0"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<pBsMinusdetSqrt>0||s2pS2>0,T\[GreaterEqual]0,t=0\>\"\
", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRulesGeneric", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"pBsMinusdetSqrt1", "->", "pBsMinusdetSqrt"}], 
                    "}"}]}], ")"}], "/.", "cfsRules"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGeneric", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", "tTRules"}], "]"}], 
                    "&&", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"main", " ", "restricted", " ", "s"}], ",", 
                    RowBox[{
                    RowBox[{"S", " ", "branch", " ", "T"}], "\[GreaterEqual]",
                     "0"}], ",", 
                    RowBox[{"t", "=", "0"}], ",", " ", 
                    RowBox[{"pBsMinusdetSqrt", "=", 
                    RowBox[{
                    RowBox[{"0", " ", "and", " ", "bCCb0"}], ">", "0"}]}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<pBsMinusdetSqrt=0&&bCCb0>0,T\[GreaterEqual]0,t=0\>\"\
", ",", "tTRules"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<s,S=\>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", "tTRules"}]}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesGeneric"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], ")"}], "/.", "cfsRules"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "pBsMinusdetSqrt", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"tTRules", "=", 
                    RowBox[{"tTRulesGeneric0", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", "bCCb0", "]"}], "&&", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"stS", "/.", "tTRules"}], "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesGenerict0", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "tTRules"}], "]"}]}], ")"}]}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}], "}"}], ",", "Nothing"}], 
                "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"i", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "branch", " ", "with", " ", "2", " ", "free", " ", "parameters"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solFree2Positive", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Try", " ", "to", " ", "validate", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"positive", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Positive branch with validation of parameter range\>\
\"", ",", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesPositive"}], ")"}], "/.", 
                    RowBox[{"V1RulesPositive", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V1RulesPositive", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], "/.", 
                    "cfsRules"}], ")"}], ",", "Reals"}], "]"}]}], "]"}], 
                    "]"}]}], "}"}], "\[IndentingNewLine]", "}"}], ",", 
                    "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Without", " ", "validation", " ", "of", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"positive", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Positive branch without validation of parameter \
range\>\"", ",", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesPositive"}], ")"}], "/.", 
                    RowBox[{"V1RulesPositive", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesPositive", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solFree2Negative", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Try", " ", "to", " ", "validate", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"negative", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Negative branch with validation of parameter range\>\
\"", ",", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesNegative"}], ")"}], "/.", 
                    RowBox[{"V1RulesNegative", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "/.", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"V1RulesNegative", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], "/.", 
                    "cfsRules"}], ")"}], ",", "Reals"}], "]"}]}], "]"}], 
                    "]"}]}], "}"}], "\[IndentingNewLine]", "}"}], ",", 
                    "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
                 "Nothing"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Without", " ", "validation", " ", "of", " ", "free", " ", 
              "parameters"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{"negative", " ", "branch"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Negative branch without validation of parameter \
range\>\"", ",", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", "vVRulesNegative"}], ")"}], "/.", 
                    RowBox[{"V1RulesNegative", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "/.", "cfsRules"}], "]"}],
                     "&&", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"positiveQ", "/@", 
                    RowBox[{
                    RowBox[{"sSRulesNegative", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ")"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}], 
                  "\[IndentingNewLine]", "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "branch", " ", "with", " ", "4", " ", "free", " ", "parameters"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"solBothsSZero", "=", 
          RowBox[{"If", "[", 
           RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Branch s=0,S=0, with validation of parameter range\>\
\"", ",", "Null"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Resolve", "[", 
                    RowBox[{"Exists", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], ",", 
                    RowBox[{"v", "[", "3", "]"}], ",", 
                    RowBox[{"V", "[", "2", "]"}], ",", 
                    RowBox[{"V", "[", "3", "]"}]}], "}"}], ",", "Reals"}], 
                    "]"}], ",", 
                    RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], ",", 
                    RowBox[{"V", "[", "1", "]"}]}], "}"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}], ",", "Reals"}], "]"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "}"}], ",", "Nothing"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
                   "}"}], "}"}], ",", "Nothing"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], "]"}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Piecewise", "[", 
                RowBox[{
                 RowBox[{"{", " ", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"branch", " ", "s"}], "=", "0"}], ",", 
                    RowBox[{"S", "=", "0"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Branch s=0,S=0, without validation of parameter \
range\>\"", ",", "Null"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "0"}], ",", 
                    RowBox[{"S", "\[Rule]", "0"}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"vVRules00", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/.", 
                    "cfsRules"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], ",", 
                    RowBox[{"b", "[", "2", "]"}], ",", 
                    RowBox[{"b", "[", "3", "]"}], ",", 
                    RowBox[{"b", "[", "4", "]"}], ",", 
                    RowBox[{"b", "[", "5", "]"}], ",", 
                    RowBox[{"b", "[", "6", "]"}], ",", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], ",", 
                    RowBox[{"bCCbI0", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"b", "[", "0", "]"}], "*", " ", 
                    RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "/.", 
                    "cfsRules"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
                   "}"}], "\[IndentingNewLine]", "}"}], ",", "Nothing"}], 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", "vVRules00", "]"}]}], "}"}]}], "]"}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "collect", " ", "and", " ", "check", " ", "all", " ", "answers"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
               "solRegular", ",", "solFree2Positive", ",", "solFree2Negative",
                 ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", "expr", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "solBothsSZero"}], "}"}], ",", 
                  "solBothsSZero"}], "]"}]}], "}"}], "]"}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"theVerify", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"possiblyBadSols", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"answer", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"#", ",", "False"}], "]"}], "&"}], "/@", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "PossibleZeroQ"}], "]"}], 
                   "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"answer", ",", "answer"}], "]"}], "]"}], "//", 
                    "gaPE"}], "//", "Expand"}], ")"}], "-", 
                    RowBox[{"Table", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "answer", "]"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}], ",", "False"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"possiblyBadSols", "=!=", 
               RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSqrtOfMV", "::", "possiblybad"}], ",", 
                "possiblyBadSols"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[617]:=",ExpressionUUID->"35093b7f-d077-4887-8841-c8f4b97c59bc"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Exponent of MV for n\[LessEqual]3"
}], "Subsubsection",ExpressionUUID->"58f56edb-2bec-45c1-bd30-50164c9d6a59"],

Cell["\<\
Here we compute exact exponent of general multivector for n=2 and Cl(3,0) \
algebras \
\>", "Text",ExpressionUUID->"8f8c7b86-f6c7-48ed-9f65-f8b7bd09673f"],

Cell[CellGroupData[{

Cell["Method selection, help functions", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"a34bb1cb-87bb-4ab1-bea9-c7793428e6cc"],

Cell[TextData[{
 "First general code and options . Set Listable attribute to  ",
 StyleBox["gaExpOfMV[ ]",
  FontWeight->"Bold"],
 ". Then in can nicely handle the case ",
 StyleBox["gaExpOfMV[{} ]",
  FontWeight->"Bold"],
 ", which is convenient when testing MV for which logarithms don\
\[CloseCurlyQuote]t exist. "
}], "Text",ExpressionUUID->"b43a949c-c273-40b7-824a-bc22d23f0857"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaExpOfMV", ",", "Listable"}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[618]:=",ExpressionUUID->"147e4281-de5e-4499-a642-2295fa100ccc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaExpOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Automatic\>\"", ",", 
        RowBox[{"gaFormula", "\[Rule]", "\"\<Automatic\>\""}]}], "}"}]}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExpOfMV", "::", "lowDimensionFormula"}], "=", 
   "\"\<The algebra dimension `1` is greater than 3, \\\"LowDimension\\\" \
option will be ignored.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[619]:=",ExpressionUUID->"b337e2bb-9521-4776-94a6-c0539926b568"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Since", " ", "only", " ", "specific", " ", "combinantions", " ", "of", 
     " ", "Method", " ", "and", " ", "gaFormula", " ", "are", " ", 
     "allowed"}], ",", " ", 
    RowBox[{"test", " ", "splits", " ", "into", " ", "pieces"}]}], " ", 
   "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", "\"\<Method\>\"", "]"}], "=", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "Automatic", ",", "\"\<Automatic\>\"", ",", 
       "\"\<CoordinateFree \
(gaFormula->\\\"LowDimension\\\"|\\\"ScalarPartOutOfSum\\\"|\\\"\
ScalarPartInSum\\\")\>\"", ",", "\"\<Coordinate\>\"", ",", 
       "\"\<gaMatrixRepresentation\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{"{", 
       RowBox[{"theMethod_String", ",", "\"\<gaFormula\>\""}], "}"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"HoldForm", "[", 
       RowBox[{"{", 
        RowBox[{"theMethod", ",", 
         RowBox[{"gaFormula", "->", 
          RowBox[{"Alternatives", "[", 
           RowBox[{
           "Automatic", ",", "\"\<Automatic\>\"", ",", "\"\<LowDimension\>\"",
             ",", "\"\<ScalarPartOutOfSum\>\"", ",", 
            "\"\<ScalarPartInSum\>\""}], "]"}]}]}], "}"}], "]"}], "/;", 
      RowBox[{"MatchQ", "[", 
       RowBox[{"theMethod", ",", 
        RowBox[{"Alternatives", "[", 
         RowBox[{
         "\"\<Automatic\>\"", ",", "\"\<CoordinateFree\>\"", ",", 
          "\"\<Coordinate\>\""}], "]"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", "\"\<Quiet\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
     RowBox[{
     "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
      "for", " ", "each", " ", "suboption"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{
        "\"\<Automatic\>\"", ",", "\"\<CoordinateFree\>\"", ",", 
         "\"\<Coordinate\>\"", ",", "\"\<gaMatrixRepresentation\>\""}], 
        "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "\"\<Automatic\>\"", "|", "Automatic", "|", 
            "\"\<CoordinateFree\>\"", "|", "\"\<Coordinate\>\"", "|", 
            "\"\<gaMatrixRepresentation\>\""}], ",", "___Rule"}], "}"}]}], 
        "]"}], "&&", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"testOptionExpOfMV", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ToString", "[", 
               RowBox[{"val", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theMethod_String", ",", "\"\<gaFormula\>\""}], "}"}], ",", 
       "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"MatchQ", "[", 
       RowBox[{"val", ",", 
        RowBox[{"Alternatives", "[", 
         RowBox[{
         "Automatic", ",", "\"\<Automatic\>\"", ",", "\"\<LowDimension\>\"", 
          ",", "\"\<ScalarPartOutOfSum\>\"", ",", "\"\<ScalarPartInSum\>\""}],
          "]"}]}], "]"}], "/;", 
      RowBox[{"MatchQ", "[", 
       RowBox[{"theMethod", ",", 
        RowBox[{"Alternatives", "[", 
         RowBox[{"\"\<CoordinateFree\>\"", ",", "\"\<Coordinate\>\""}], 
         "]"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionExpOfMV", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[621]:=",ExpressionUUID->"f4ab4fdc-9b40-40e9-9829-7659e18c971d"],

Cell[TextData[{
 "Definitions for \[OpenCurlyDoubleQuote]gaMatrixRepresentation\
\[CloseCurlyDoubleQuote] method as well as for functionOfMVCoordinateFree[] \
and functionOfMVCoordinate[] are given along with ",
 StyleBox["gaFunctionOfMV[ ]",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"f38b0ed2-72b4-4bf8-b9ab-1f26135ec89d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpOfMV", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", "theMethod", ",", 
       "theFormula"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaExpOfMV", ",", "#", ",", "theOption"}], "}"}], ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionExpOfMV", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"(", 
           RowBox[{"{", "opts", "}"}], ")"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "main", " ", "options", " ", "obtained", " ", 
        "values"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
         "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaExpOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
          RowBox[{"\"\<Automatic\>\"", "|", "Automatic", "|", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}], ",", 
             "___Rule"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"theMethod", "=", "\"\<CoordinateFree\>\""}], ",", 
        RowBox[{"theMethod", "=", 
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"set", " ", "gaFormula", " ", 
         RowBox[{"option", ":", " ", 
          RowBox[{
           RowBox[{"if", " ", "dimension"}], " ", ">", 
           RowBox[{
           "3", " ", "or", " ", "Method", " ", "set", " ", "to", " ", 
            "Coordinate"}]}]}]}], ",", " ", 
        RowBox[{
        "which", " ", "is", " ", "not", " ", "implemented", " ", "directly", 
         " ", "for", " ", "low", " ", "dim"}], ",", " ", 
        RowBox[{"use", " ", "gaFunctionOfMV"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], ">", 
         "3"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaExpOfMV", "::", "lowDimensionFormula"}], ",", 
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"theFormula", "=", "\"\<ScalarPartInSum\>\""}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], ",", 
             RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"theMethod", ",", "\"\<CoordinateFree\>\"", ",", 
             RowBox[{"theFormula", "=", "\"\<LowDimension\>\""}], ",", 
             "\[IndentingNewLine]", "\"\<Coordinate\>\"", ",", 
             RowBox[{"theFormula", "=", "\"\<ScalarPartInSum\>\""}], ",", 
             "\[IndentingNewLine]", "\"\<gaMatrixRepresentation\>\"", ",", 
             RowBox[{"theFormula", "=", "\"\<\>\""}], ",", 
             "\[IndentingNewLine]", "_", ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
               "gaExpOfMV"}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theMethod", "===", "\"\<CoordinateFree\>\""}], ",", 
             RowBox[{"theFormula", "=", 
              RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
               "gaExpOfMV"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Information", " ", "about", " ", "option", " ", "handling"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Method is\>\"", ",", "theMethod"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Formula is set to \>\"", ",", "theFormula"}], "}"}]}],
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "only", " ", "available", " ", "methods", " ", "log", " ", 
        "is", " ", "\"\<CoordinateFree\>\"", " ", "and", " ", 
        "\"\<Coordinate\>\"", " ", "if", " ", "gaFunctionOfMV", " ", "is", 
        " ", "used"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "theMethod", ",", "\"\<CoordinateFree\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "theFormula", ",", "\"\<LowDimension\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"expOfMV", "[", 
           RowBox[{"expr", ",", "theMethod", ",", "theFormula", ",", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ScalarPartInSum\>\"", "|", "\"\<ScalarPartOutOfSum\>\""}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Call to gaFunctionOfMV[Log,MV]! More control is available \
using options for that function.\>\"", ",", "\"\<\>\""}], "}"}], "}"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"functionOfMVCoordinateFree", "[", 
            RowBox[{"Exp", ",", 
             RowBox[{"gaPE", "[", "expr", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}], ",", 
               "Identity", ",", "theFormula", ",", "\"\<RootSum\>\"", ",", 
               "Complexes", ",", "False", ",", "False"}], "}"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        "\"\<Coordinate\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "theFormula", ",", "\"\<LowDimension\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"expOfMV", "[", 
           RowBox[{"expr", ",", "theMethod", ",", "theFormula", ",", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ScalarPartInSum\>\"", "|", "\"\<ScalarPartOutOfSum\>\""}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "in", " ", "coordinate", " ", "method", " ", "for", " ", "n"}], 
            ">", 
            RowBox[{
            "3", " ", "we", " ", "make", " ", "no", " ", "distiction", " ", 
             "for", " ", "gaFormula", " ", "option"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Call to gaFunctionOfMV[Log,MV]! More control is available \
using options for that function.\>\"", ",", "\"\<\>\""}], "}"}], "}"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"functionOfMVCoordinate", "[", 
            RowBox[{"Exp", ",", 
             RowBox[{"gaPE", "[", "expr", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}], ",", 
               "Identity"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}],
         ",", "\[IndentingNewLine]", "\"\<gaMatrixRepresentation\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"expOfMV", "[", 
         RowBox[{"expr", ",", "\"\<gaMatrixRepresentation\>\"", ",", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
           "gaLogOfMV"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[630]:=",ExpressionUUID->"647c7c4f-ca1d-4017-94ad-3a2ce0a5b5cd"],

Cell[TextData[{
 "Help functions",
 StyleBox[" positiveQ[]",
  FontWeight->"Bold"],
 ", ",
 StyleBox["zeroQ[]",
  FontWeight->"Bold"],
 ",",
 StyleBox["nonNegativeQ[]",
  FontWeight->"Bold"],
 ",",
 StyleBox["nonzeroQ[]",
  FontWeight->"Bold"],
 " are defined in \[OpenCurlyDoubleQuote]Square root of MV\
\[CloseCurlyDoubleQuote] section"
}], "Text",ExpressionUUID->"b62bc844-0d13-48a9-85e3-24327548dfa4"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,0) case", "Item",ExpressionUUID->"7d2f5add-3d68-4046-8ead-dcf0847648f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"\"\<Coordinate\>\"", "|", "\"\<CoordinateFree\>\""}], ",", 
    "\"\<LowDimension\>\"", ",", "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a0", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aVB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "q2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"q2", "=", 
       RowBox[{"-", 
        RowBox[{"gaPE", "[", 
         RowBox[{"aVB", "\[GeometricProduct]", 
          RowBox[{"gaCliffordConjugate", "[", "aVB", "]"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2=0\>\""}], "}"}], 
               "}"}]}], "]"}], ";", 
            RowBox[{
             RowBox[{"Exp", "[", "a0", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{"1", "+", "aVB"}], ")"}]}]}], ",", 
           RowBox[{"(", 
            RowBox[{"zeroQ", "[", "q2", "]"}], ")"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2>0\>\""}], "}"}], 
               "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Exp", "[", "a0", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cosh", "[", 
                RowBox[{"Sqrt", "[", "q2", "]"}], "]"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"aVB", "/", 
                  RowBox[{"Sqrt", "[", "q2", "]"}]}], ")"}], 
                RowBox[{"Sinh", "[", 
                 RowBox[{"Sqrt", "[", "q2", "]"}], "]"}]}]}], ")"}]}]}], ",", 
           
           RowBox[{"positiveQ", "[", "q2", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}],
    "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Cl", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[631]:=",ExpressionUUID->"33e53d47-0cd1-43a7-83e4-2d96251fcfc0"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,1) case", "Item",ExpressionUUID->"1ff7fec4-f62e-43f7-9787-38e4034370b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"\"\<Coordinate\>\"", "|", "\"\<CoordinateFree\>\""}], ",", 
    "\"\<LowDimension\>\"", ",", "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a0", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aVB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "q2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"q2", "=", 
       RowBox[{"-", 
        RowBox[{"gaPE", "[", 
         RowBox[{"aVB", "\[GeometricProduct]", 
          RowBox[{"gaCliffordConjugate", "[", "aVB", "]"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2=0\>\""}], "}"}], 
               "}"}]}], "]"}], ";", 
            RowBox[{
             RowBox[{"Exp", "[", "a0", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{"1", "+", "aVB"}], ")"}]}]}], ",", 
           RowBox[{"(", 
            RowBox[{"zeroQ", "[", "q2", "]"}], ")"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2<0\>\""}], "}"}], 
               "}"}]}], "]"}], ";", 
            RowBox[{
             RowBox[{"Exp", "[", "a0", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cos", "[", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{"-", "q2"}], "]"}], "]"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"aVB", "/", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", "q2"}], "]"}]}], ")"}], 
                RowBox[{"Sin", "[", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"-", "q2"}], "]"}], "]"}]}]}], ")"}]}]}], ",", 
           RowBox[{"negativeQ", "[", "q2", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}],
    "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[632]:=",ExpressionUUID->"e4aeba2a-3a7d-4fa1-868b-7deed73926e9"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,0) and Cl(1,1) cases", "Item",ExpressionUUID->"0c41eea3-6307-4c37-a732-4f50e8ed38ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"\"\<Coordinate\>\"", "|", "\"\<CoordinateFree\>\""}], ",", 
    "\"\<LowDimension\>\"", ",", "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a0", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aVB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "q2"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"q2", "=", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{"gaPE", "[", 
          RowBox[{"aVB", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "aVB", "]"}]}], "]"}]}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<q2=gaNorm2CliffordConjugateSigned[gaGetMV[expr,{1,2}]] \>\"", 
           ",", "q2"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"printDetails", "[", 
              RowBox[{"quiet", ",", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2<0\>\""}], "}"}], 
                "}"}]}], "]"}], ";", 
             RowBox[{
              RowBox[{"Exp", "[", "a0", "]"}], "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cos", "[", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"-", "q2"}], "]"}], "]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"aVB", "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "q2"}], "]"}]}], ")"}], 
                 RowBox[{"Sin", "[", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", "q2"}], "]"}], "]"}]}]}], ")"}]}]}], ",", 
            RowBox[{"negativeQ", "[", "q2", "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"printDetails", "[", 
              RowBox[{"quiet", ",", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2=0\>\""}], "}"}], 
                "}"}]}], "]"}], ";", 
             RowBox[{
              RowBox[{"Exp", "[", "a0", "]"}], "*", 
              RowBox[{"(", 
               RowBox[{"1", "+", "aVB"}], ")"}]}]}], ",", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "q2", "]"}], ")"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"printDetails", "[", 
              RowBox[{"quiet", ",", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"\"\<Piecewise: \>\"", ",", "\"\<q2>0\>\""}], "}"}], 
                "}"}]}], "]"}], ";", 
             RowBox[{
              RowBox[{"Exp", "[", "a0", "]"}], "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Cosh", "[", 
                 RowBox[{"Sqrt", "[", "q2", "]"}], "]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"aVB", "/", 
                   RowBox[{"Sqrt", "[", "q2", "]"}]}], ")"}], 
                 RowBox[{"Sinh", "[", 
                  RowBox[{"Sqrt", "[", "q2", "]"}], "]"}]}]}], ")"}]}]}], ",", 
            RowBox[{"positiveQ", "[", "q2", "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[633]:=",ExpressionUUID->"42e4ba9c-61d7-431f-ad79-1c1f1a83f13b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,2) case", "Item",ExpressionUUID->"0915d439-e5f4-47c1-bd13-8999a38ee46f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"\"\<Coordinate\>\"", "|", "\"\<CoordinateFree\>\""}], ",", 
    "\"\<LowDimension\>\"", ",", "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a0", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aVB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "q2"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"q2", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"aVB", "\[GeometricProduct]", 
          RowBox[{"gaCliffordConjugate", "[", "aVB", "]"}]}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<q2=gaNorm2CliffordConjugateSigned[gaGetMV[expr,{1,2}]] \>\"", 
           ",", "q2"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Exp", "[", "a0", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cos", "[", "q2", "]"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"aVB", "/", "q2"}], ")"}], 
                RowBox[{"Sin", "[", "q2", "]"}]}]}], ")"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"!", 
             RowBox[{"zeroQ", "[", "q2", "]"}]}]}], "\[IndentingNewLine]", 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Exp", "[", "a0", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"zeroQ", "[", "q2", "]"}]}], "\[IndentingNewLine]", 
           "}"}]}], "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}]}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "2", ",", "0"}], "]"}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[634]:=",ExpressionUUID->"ceae32b3-f7d2-4eee-a217-5f9b57a35945"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(3,0) case", "Item",ExpressionUUID->"f3a3a3a1-abc2-46c6-b075-bdfc03b0d506"],

Cell["\<\
Algorithm which outputs real coefficients. Expressed in very powerful \
Piecewise form.\
\>", "Text",ExpressionUUID->"69d3590d-8efe-4cca-85f1-94f6aa9aef5a"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
     RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"expOfMV", "[", 
     RowBox[{
     "expr_", ",", "\"\<Coordinate\>\"", ",", "\"\<LowDimension\>\"", ",", 
      "quiet_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theAlg", "=", 
          RowBox[{"Cl", "[", 
           RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], ",", "aRules", ",", 
         "cfsRules", ",", "coef", ",", "a", ",", "b", ",", 
         RowBox[{"vecBivect", "=", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "vBIP", ",", 
         "vBOPI", ",", "v", ",", "vC", ",", "sC", ",", "sS", ",", 
         "vVRulesGeneric", ",", "vVRules", ",", "genMVb"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"aRules", "=", 
         RowBox[{
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Collect", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"a", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", 
                    RowBox[{"gaPE", "[", "expr", "]"}]}], ",", "_bs", ",", 
                   "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], "]"}], "/.", 
               RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"a", "[", "0", "]"}], ",", 
              RowBox[{"a", "[", "1", "]"}], ",", 
              RowBox[{"a", "[", "2", "]"}], ",", 
              RowBox[{"a", "[", "3", "]"}], ",", 
              RowBox[{"a", "[", "4", "]"}], ",", 
              RowBox[{"a", "[", "5", "]"}], ",", 
              RowBox[{"a", "[", "6", "]"}], ",", 
              RowBox[{"a", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"vBIP", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"vecBivect", "\[InnerProduct]", "vecBivect"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"vBOPI", "=", 
         RowBox[{"-", 
          RowBox[{"gaPE", "[", 
           RowBox[{
            RowBox[{"vecBivect", "\[OuterProduct]", "vecBivect"}], 
            "\[GeometricProduct]", 
            RowBox[{"gaI", "[", "theAlg", "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{"quiet", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<vBIP=v.v+B.B= \>\"", ",", "vBIP"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<vBOPI=-v\[OuterProduct]B*I= \>\"", ",", "vBOPI"}], 
             "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "introduce", " ", "formal", " ", "vars", " ", "sS", " ", "and", " ",
            "sC"}], ",", " ", 
          RowBox[{"since", " ", "denominator", " ", "can", " ", "vanish"}]}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"vVRulesGeneric", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"v", "->", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"sS", "+", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{"sS", "^", "2"}], "+", 
                 RowBox[{"sC", "^", "2"}]}], "]"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Sqrt", "[", "2", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{"sS", "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"sS", "^", "2"}], "+", 
                    RowBox[{"sC", "^", "2"}]}], "]"}]}], "]"}], ")"}]}], 
              ")"}]}]}], ",", 
           RowBox[{"vC", "->", 
            RowBox[{"sC", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Sqrt", "[", "2", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{"sS", "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"sS", "^", "2"}], "+", 
                    RowBox[{"sC", "^", "2"}]}], "]"}]}], "]"}], ")"}]}], 
              ")"}]}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cfsRules", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"non", " ", "zero", " ", "case"}], ",", " ", 
              RowBox[{"scalar", " ", "+", " ", "pseudovector"}]}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "->", 
              RowBox[{
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cos", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"Cosh", "[", "v", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Sin", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "7", "]"}], "->", 
              RowBox[{
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sin", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"Cosh", "[", "v", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"vector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "v"}], " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "-", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"bivector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "4", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "vC"}], " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "5", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"Cosh", "[", "v", "]"}]}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "-", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "v"}], " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "6", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "vC"}], " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}]}], 
            "\[IndentingNewLine]", "}"}], "/.", "aRules"}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"genMVb", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"b", ",", "theAlg"}], "]"}], "/.", "cfsRules"}], ")"}], "/.",
           "aRules"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Piecewise", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI\[NotEqual]0\>\""}], 
                  "}"}], "}"}]}], "]"}], ";", 
              RowBox[{"vVRules", "=", 
               RowBox[{"(", 
                RowBox[{"vVRulesGeneric", "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"sS", "\[Rule]", "vBIP"}], ",", 
                   RowBox[{"sC", "->", "vBOPI"}]}], "}"}]}], ")"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"!", 
              RowBox[{"zeroQ", "[", "vBOPI", "]"}]}]}], "\[IndentingNewLine]",
             "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI=0 && vBIP>0\>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "\[Rule]", 
                  RowBox[{"Sqrt", "[", "vBIP", "]"}]}], ",", 
                 RowBox[{"vC", "\[Rule]", "0"}]}], "}"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"zeroQ", "[", "vBOPI", "]"}], "&&", 
              RowBox[{"positiveQ", "[", "vBIP", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI=0 && vBIP<0\>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "\[Rule]", "0"}], ",", 
                 RowBox[{"vC", "->", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", "vBIP"}], "]"}]}]}], "}"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"zeroQ", "[", "vBOPI", "]"}], "&&", 
              RowBox[{"negativeQ", "[", "vBIP", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI=0 && vBIP=0\>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "\[Rule]", "0"}], ",", 
                 RowBox[{"vC", "->", "0"}]}], "}"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "3"}], "}"}]}], "]"}], "/.", 
                    "cfsRules"}], ")"}], "/.", "aRules"}], ")"}], "/.", 
                   "vVRules"}], ")"}], "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{"1", "+", "vecBivect"}], ")"}]}], "]"}], "]"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"zeroQ", "[", "vBOPI", "]"}], "&&", 
              RowBox[{"zeroQ", "[", "vBIP", "]"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Cl", "[", 
         RowBox[{"3", ",", "0", ",", "0"}], "]"}], "}"}], ",", 
       RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[635]:=",ExpressionUUID->"162d1289-00f8-4acb-8a96-0f480d98c2ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{
   "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", ",", 
    "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlg", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
       RowBox[{"aS", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aV", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
       RowBox[{"aB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
       RowBox[{"aP", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "a7", ",", "VdVpBdB", ",", 
       "m2VoB", ",", "argDown", ",", "argUp"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"VdVpBdB", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
           RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"m2VoB", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
          RowBox[{"(", 
           RowBox[{"2", "\[GeometricProduct]", 
            RowBox[{"aV", "\[OuterProduct]", "aB"}]}], ")"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"a7", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"-", "aP"}], "\[GeometricProduct]", 
         RowBox[{"gaI", "[", "theAlg", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<VdVpBdB=v.v+B.B= \>\"", ",", "VdVpBdB"}], "}"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"\"\<m2VoB=-2*v\[OuterProduct]B*I= \>\"", ",", "m2VoB"}], 
           "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"argUp2pargDown2Squared", "=", 
        RowBox[{
         RowBox[{"m2VoB", "^", "2"}], "+", 
         RowBox[{"VdVpBdB", "^", "2"}]}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<m2VoB\[NotEqual]0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"argUp", "=", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"VdVpBdB", "+", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{"m2VoB", "^", "2"}], "+", 
                   RowBox[{"VdVpBdB", "^", "2"}]}], "]"}]}], ")"}], "/", 
               "2"}], "]"}]}], ";", 
            RowBox[{"argDown", "=", 
             RowBox[{"m2VoB", "/", 
              RowBox[{"Sqrt", "[", 
               RowBox[{"2", "*", 
                RowBox[{"(", 
                 RowBox[{"VdVpBdB", "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"m2VoB", "^", "2"}], "+", 
                    RowBox[{"VdVpBdB", "^", "2"}]}], "]"}]}], ")"}]}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Exp", "[", "aS", "]"}], "\[GeometricProduct]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cos", "[", "a7", "]"}], "+", 
               RowBox[{
                RowBox[{"Sin", "[", "a7", "]"}], "\[GeometricProduct]", 
                RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
             "\[GeometricProduct]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Cos", "[", "argDown", "]"}], " ", 
                RowBox[{"Cosh", "[", "argUp", "]"}]}], "+", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", 
                RowBox[{"Sin", "[", "argDown", "]"}], "\[GeometricProduct]", 
                RowBox[{"Sinh", "[", "argUp", "]"}]}], "+", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"m2VoB", "^", "2"}], "+", 
                    RowBox[{"VdVpBdB", "^", "2"}]}], "]"}]}], ")"}], "*", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"argDown", "*", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], " ", "+", " ", 
                   RowBox[{
                    RowBox[{"argUp", "*", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}]}], ")"}]}], 
                "\[GeometricProduct]", 
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cosh", "[", "argUp", "]"}], "*", 
                    RowBox[{"Sin", "[", "argDown", "]"}]}], "-", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Cos", "[", "argDown", "]"}], "*", 
                    RowBox[{"Sinh", "[", "argUp", "]"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
                 "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
              ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{"!", 
             RowBox[{"zeroQ", "[", "m2VoB", "]"}]}], ")"}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<m2VoB=0 && VdVpBdB>0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"argUp", "=", 
                 RowBox[{"Sqrt", "[", "VdVpBdB", "]"}]}], ",", 
                RowBox[{"argDown", "=", "0"}], ",", 
                RowBox[{"m2VoB", "=", "0"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Exp", "[", "aS", "]"}], "\[GeometricProduct]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Cos", "[", "a7", "]"}], "+", 
                 RowBox[{
                  RowBox[{"Sin", "[", "a7", "]"}], "\[GeometricProduct]", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
               "\[GeometricProduct]", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cos", "[", "argDown", "]"}], " ", 
                  RowBox[{"Cosh", "[", "argUp", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", 
                  
                  RowBox[{"Sin", "[", "argDown", "]"}], "\[GeometricProduct]", 
                  RowBox[{"Sinh", "[", "argUp", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"m2VoB", "^", "2"}], "+", 
                    RowBox[{"VdVpBdB", "^", "2"}]}], "]"}]}], ")"}], "*", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"argDown", "*", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"argUp", "*", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}]}], ")"}]}], 
                  "\[GeometricProduct]", 
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cosh", "[", "argUp", "]"}], "*", 
                    RowBox[{"Sin", "[", "argDown", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cos", "[", "argDown", "]"}], "*", 
                    RowBox[{"Sinh", "[", "argUp", "]"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
                   "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
                ")"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "m2VoB", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "VdVpBdB", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<m2VoB=0 && VdVpBdB<0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"argUp", "=", "0"}], ",", 
                RowBox[{"argDown", "=", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"-", "VdVpBdB"}], "]"}]}], ",", 
                RowBox[{"m2VoB", "=", "0"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Exp", "[", "aS", "]"}], "\[GeometricProduct]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Cos", "[", "a7", "]"}], "+", 
                 RowBox[{
                  RowBox[{"Sin", "[", "a7", "]"}], "\[GeometricProduct]", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
               "\[GeometricProduct]", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cos", "[", "argDown", "]"}], " ", 
                  RowBox[{"Cosh", "[", "argUp", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", 
                  
                  RowBox[{"Sin", "[", "argDown", "]"}], "\[GeometricProduct]", 
                  RowBox[{"Sinh", "[", "argUp", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"m2VoB", "^", "2"}], "+", 
                    RowBox[{"VdVpBdB", "^", "2"}]}], "]"}]}], ")"}], "*", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"argDown", "*", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], " ", "+", " ", 
                    RowBox[{
                    RowBox[{"argUp", "*", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}]}], ")"}]}], 
                  "\[GeometricProduct]", 
                  RowBox[{"(", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cosh", "[", "argUp", "]"}], "*", 
                    RowBox[{"Sin", "[", "argDown", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cos", "[", "argDown", "]"}], "*", 
                    RowBox[{"Sinh", "[", "argUp", "]"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
                   "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
                ")"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "m2VoB", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "VdVpBdB", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<m2VoB=0 && VdVpBdB=0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Exp", "[", "aS", "]"}], "\[GeometricProduct]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cos", "[", "a7", "]"}], "+", 
               RowBox[{
                RowBox[{"Sin", "[", "a7", "]"}], "\[GeometricProduct]", 
                RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
             "\[GeometricProduct]", 
             RowBox[{"(", 
              RowBox[{"1", "+", "aV", "+", "aB"}], ")"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "m2VoB", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "VdVpBdB", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
       "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[636]:=",ExpressionUUID->"d8a5f201-b3bb-47be-811f-620090e464e2"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,1) case", "Item",ExpressionUUID->"acae5680-df3e-4c4c-bd56-5bae0bda4716"],

Cell["\<\
Algorithm which outputs real coefficients. Note that expressions under square \
root for cl(2,1) algebra can be negative, therefore a correct way is to \
replace them by positive with modified functions. \
\>", "Text",ExpressionUUID->"5d2df381-65a7-4782-81ef-6d61fa23ab4f"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
     RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"expOfMV", "[", 
     RowBox[{
     "expr_", ",", "\"\<Coordinate\>\"", ",", "\"\<LowDimension\>\"", ",", 
      "quiet_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theAlg", "=", 
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "1", ",", "0"}], "]"}]}], ",", "aRules", ",", 
         "cfsRules", ",", "coef", ",", "a", ",", "b", ",", 
         RowBox[{"vecBivect", "=", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "vBIP", ",", 
         "vBOPI", ",", "mvIPpOP", ",", "mvIPmOP", ",", "mvIPpOP0", ",", 
         "mvIPmOP0", ",", "funcRules", ",", "vVRules", ",", "genMVb", ",", 
         "fLimit"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"aRules", "=", 
         RowBox[{
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Collect", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"a", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", 
                    RowBox[{"gaPE", "[", "expr", "]"}]}], ",", "_bs", ",", 
                   "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], "]"}], "/.", 
               RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"a", "[", "0", "]"}], ",", 
              RowBox[{"a", "[", "1", "]"}], ",", 
              RowBox[{"a", "[", "2", "]"}], ",", 
              RowBox[{"a", "[", "3", "]"}], ",", 
              RowBox[{"a", "[", "4", "]"}], ",", 
              RowBox[{"a", "[", "5", "]"}], ",", 
              RowBox[{"a", "[", "6", "]"}], ",", 
              RowBox[{"a", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"vBIP", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"vecBivect", "\[InnerProduct]", "vecBivect"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"vBOPI", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"vecBivect", "\[OuterProduct]", "vecBivect"}], 
           "\[GeometricProduct]", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mvIPpOP", "=", 
         RowBox[{"vBIP", "+", "vBOPI"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"mvIPmOP", "=", 
         RowBox[{"vBIP", "-", "vBOPI"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{"quiet", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<vBIP=v.v+B.B= \>\"", ",", "vBIP"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<vBOPI=v\[OuterProduct]B*I= \>\"", ",", "vBOPI"}], 
             "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "introduce", " ", "formal", " ", "vars", " ", "mvIPpOP0", " ", 
           "and", " ", "mvIPmOP0"}], ",", " ", 
          RowBox[{"since", " ", "denominator", " ", "can", " ", 
           RowBox[{"vanish", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cfsRules", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"non", " ", "zero", " ", "case"}], ",", " ", 
              RowBox[{"scalar", " ", "+", " ", "pseudovector"}]}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"Cosh", "[", "mvIPpOP0", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"Cosh", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "7", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"Cosh", "[", "mvIPpOP0", "]"}]}], " ", "-", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"Cosh", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"vector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "+", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                    "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "-", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                    "]"}]}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "-", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                    "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "+", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                    "]"}]}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "-", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                    "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "+", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                    "]"}]}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"bivector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "4", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "-", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                    "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "+", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                    "]"}]}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "5", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "-", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                    "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "+", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                    "]"}]}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "6", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "+", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                    "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "-", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"fLimit", "[", 
                   RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                    "]"}]}]}], ")"}]}]}]}], "}"}], "/.", "aRules"}], ")"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"genMVb", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"b", ",", "theAlg"}], "]"}], "/.", "cfsRules"}], ")"}], "/.",
           "aRules"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Piecewise", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "both", " ", "mvIPmOP0", " ", "and", " ", "mvIPpOP0", " ", 
            "nonzero"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI>0 && vBIP-vBOPI>0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                 RowBox[{"mvIPmOP0", "\[Rule]", 
                  RowBox[{"Sqrt", "[", "mvIPmOP", "]"}]}], ",", 
                 RowBox[{"mvIPpOP0", "->", 
                  RowBox[{"Sqrt", "[", "mvIPpOP", "]"}]}]}], "}"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"positiveQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"positiveQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI>0 && vBIP-vBOPI<0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "->", 
                   RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPmOP0", "]"}], "\[Rule]", 
                   RowBox[{"Cos", "[", "mvIPmOP0", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPpOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", "mvIPpOP", "]"}]}], ",", 
                  RowBox[{"mvIPmOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvIPmOP"}], "]"}]}]}], "}"}]}], ")"}], ";", 
              
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"positiveQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"negativeQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI<0 && vBIP-vBOPI>0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "->", 
                   RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPpOP0", "]"}], "\[Rule]", 
                   RowBox[{"Cos", "[", "mvIPpOP0", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPpOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvIPpOP"}], "]"}]}], ",", 
                  RowBox[{"mvIPmOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", "mvIPmOP", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"negativeQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"positiveQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI<0 && vBIP-vBOPI<0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "->", 
                   RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPmOP0", "]"}], "\[Rule]", 
                   RowBox[{"Cos", "[", "mvIPmOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "->", 
                   RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPpOP0", "]"}], "\[Rule]", 
                   RowBox[{"Cos", "[", "mvIPpOP0", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPpOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvIPpOP"}], "]"}]}], ",", 
                  RowBox[{"mvIPmOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvIPmOP"}], "]"}]}]}], "}"}]}], ")"}], ";", 
              
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"negativeQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"negativeQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "either", " ", "mvIPmOP0", " ", "or", " ", "mvIPpOP0", " ", "is", 
             " ", "zero"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI>0 && vBIP-vBOPI=0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"fLimit", "[", 
                    RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                     "]"}], "\[Rule]", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPmOP0", "]"}], "\[Rule]", "1"}]}],
                  "}"}]}], ")"}], ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPpOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", "mvIPpOP", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"positiveQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI<0 && vBIP-vBOPI=0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"fLimit", "[", 
                    RowBox[{
                    RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "/", "mvIPmOP0"}],
                     "]"}], "\[Rule]", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPmOP0", "]"}], "\[Rule]", "1"}], 
                  ",", 
                  RowBox[{
                   RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "->", 
                   RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPpOP0", "]"}], "\[Rule]", 
                   RowBox[{"Cos", "[", "mvIPpOP0", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPpOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvIPpOP"}], "]"}]}]}], "}"}]}], ")"}], ";", 
              
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"negativeQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI=0 && vBIP-vBOPI>0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"fLimit", "[", 
                    RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                     "]"}], "\[Rule]", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPpOP0", "]"}], "\[Rule]", "1"}]}],
                  "}"}]}], ")"}], ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPmOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", "mvIPmOP", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"positiveQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI=0 && vBIP-vBOPI<0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"fLimit", "[", 
                    RowBox[{
                    RowBox[{"Sinh", "[", "mvIPpOP0", "]"}], "/", "mvIPpOP0"}],
                     "]"}], "\[Rule]", "1"}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPpOP0", "]"}], "\[Rule]", "1"}], 
                  ",", 
                  RowBox[{
                   RowBox[{"Sinh", "[", "mvIPmOP0", "]"}], "->", 
                   RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPmOP0", "]"}], "\[Rule]", 
                   RowBox[{"Cos", "[", "mvIPmOP0", "]"}]}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPmOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvIPmOP"}], "]"}]}]}], "}"}]}], ")"}], ";", 
              
              RowBox[{
               RowBox[{"(", 
                RowBox[{"genMVb", "/.", "funcRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"negativeQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI=0 && vBIP-vBOPI=0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"funcRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPpOP0", "]"}], "\[Rule]", "1"}], 
                  ",", 
                  RowBox[{
                   RowBox[{"Cosh", "[", "mvIPmOP0", "]"}], "\[Rule]", "1"}]}],
                  "}"}]}], ")"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"fLimit", "\[Rule]", "Identity"}], ",", 
                  RowBox[{"mvIPmOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", "mvIPmOP", "]"}]}], ",", 
                  RowBox[{"mvIPpOP0", "\[Rule]", 
                   RowBox[{"Sqrt", "[", "mvIPpOP", "]"}]}]}], "}"}]}], ")"}], 
              ";", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "3"}], "}"}]}], "]"}], "/.", 
                    "cfsRules"}], ")"}], "/.", "aRules"}], ")"}], "/.", 
                 "funcRules"}], ")"}], "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
       RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[637]:=",ExpressionUUID->"e0951e2c-0e96-44ae-9e87-f18d5eb8a508"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{
   "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", ",", 
    "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlg", "=", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "1", ",", "0"}], "]"}]}], ",", 
       RowBox[{"aS", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aV", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
       RowBox[{"aB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
       RowBox[{"aP", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "a7", ",", "aSqrtP", ",", 
       "aSqrtM"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"aSqrtP", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
            RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"2", "*", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
          RowBox[{"(", 
           RowBox[{"aV", "\[OuterProduct]", "aB"}], ")"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"aSqrtM", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
            RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"2", "*", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
          RowBox[{"aV", "\[OuterProduct]", "aB"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"a7", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", "aP"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<aSqrtP=-(v.v+B.B)-2*I\[GeometricProduct](aV\[OuterProduct]aB)=\
 \>\"", ",", "aSqrtP"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<aSqrtM=-(v.v+B.B)+2*I\[GeometricProduct](aV\[OuterProduct]aB)=\
 \>\"", ",", "aSqrtM"}], "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"generic", " ", "cases"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP>0 && aSqrtM>0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}], "]"}]}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}], "]"}]}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "aSqrtP", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "aSqrtM", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP>0 && aSqrtM<0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}], "]"}]}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sinh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cosh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}], "]"}]}], ")"}]}], ")"}]}],
               ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP<0 && aSqrtM>0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sinh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cosh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}], "]"}]}], ")"}]}], ")"}], 
               "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}], "]"}]}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP<0 && aSqrtM<0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sinh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cosh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}], "]"}]}], ")"}]}], ")"}], 
               "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sinh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cosh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}], "]"}]}], ")"}]}], ")"}]}],
               ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "aSqrtP", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "aSqrtM", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"special", " ", "cases"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP=0 && aSqrtM>0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtM", "]"}], "]"}]}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP=0 && aSqrtM<0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sinh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cosh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtM"}], "]"}], "]"}]}], ")"}]}], ")"}]}],
               ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP>0 && aSqrtM=0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", 
                    RowBox[{"Sqrt", "[", "aSqrtP", "]"}], "]"}]}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"positiveQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP<0 && aSqrtM=0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sinh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cosh", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "aSqrtP"}], "]"}], "]"}]}], ")"}]}], ")"}], 
               "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"negativeQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtP=0 && aSqrtM=0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Cl", "[", 
       RowBox[{"2", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[638]:=",ExpressionUUID->"2a24c64f-b59e-4725-9257-7ff12090708b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,2) case", "Item",ExpressionUUID->"6d0de974-7b3c-4182-9587-c634d6e689ac"],

Cell["\<\
Algorithm which outputs real coefficients. Direct implementation\
\>", "Text",ExpressionUUID->"9dfc86b3-9ef4-4c76-9588-32d827176342"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
     RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"expOfMV", "[", 
     RowBox[{
     "expr_", ",", "\"\<Coordinate\>\"", ",", "\"\<LowDimension\>\"", ",", 
      "quiet_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theAlg", "=", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], ",", "aRules", ",", 
         "cfsRules", ",", "coef", ",", "a", ",", "b", ",", 
         RowBox[{"vecBivect", "=", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "vBIP", ",", 
         "vBOPI", ",", "v", ",", "vC", ",", "sC", ",", "sS", ",", 
         "vVRulesGeneric", ",", "vVRules", ",", "genMVb"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"aRules", "=", 
         RowBox[{
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Collect", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"a", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", 
                    RowBox[{"gaPE", "[", "expr", "]"}]}], ",", "_bs", ",", 
                   "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], "]"}], "/.", 
               RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"a", "[", "0", "]"}], ",", 
              RowBox[{"a", "[", "1", "]"}], ",", 
              RowBox[{"a", "[", "2", "]"}], ",", 
              RowBox[{"a", "[", "3", "]"}], ",", 
              RowBox[{"a", "[", "4", "]"}], ",", 
              RowBox[{"a", "[", "5", "]"}], ",", 
              RowBox[{"a", "[", "6", "]"}], ",", 
              RowBox[{"a", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"vBIP", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"vecBivect", "\[InnerProduct]", "vecBivect"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"vBOPI", "=", 
         RowBox[{"-", 
          RowBox[{"gaPE", "[", 
           RowBox[{
            RowBox[{"vecBivect", "\[OuterProduct]", "vecBivect"}], 
            "\[GeometricProduct]", 
            RowBox[{"gaI", "[", "theAlg", "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{"quiet", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<vBIP=v.v+B.B= \>\"", ",", "vBIP"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<vBOPI=-v^B*I= \>\"", ",", "vBOPI"}], "}"}]}], 
           "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "introduce", " ", "formal", " ", "vars", " ", "sS", " ", "and", " ",
            "sC"}], ",", " ", 
          RowBox[{"since", " ", "denominator", " ", "can", " ", "vanish"}]}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"vVRulesGeneric", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"v", "->", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"sS", "+", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{"sS", "^", "2"}], "+", 
                 RowBox[{"sC", "^", "2"}]}], "]"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Sqrt", "[", "2", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{"sS", "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"sS", "^", "2"}], "+", 
                    RowBox[{"sC", "^", "2"}]}], "]"}]}], "]"}], ")"}]}], 
              ")"}]}]}], ",", 
           RowBox[{"vC", "->", 
            RowBox[{"sC", "/", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Sqrt", "[", "2", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{"sS", "+", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"sS", "^", "2"}], "+", 
                    RowBox[{"sC", "^", "2"}]}], "]"}]}], "]"}], ")"}]}], 
              ")"}]}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cfsRules", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"non", " ", "zero", " ", "case"}], ",", " ", 
              RowBox[{"scalar", " ", "+", " ", "pseudovector"}]}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "->", 
              RowBox[{
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cos", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"Cosh", "[", "v", "]"}]}], "-", 
                 RowBox[{
                  RowBox[{"Sin", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "7", "]"}], "->", 
              RowBox[{
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sin", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"Cosh", "[", "v", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"vector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"Cosh", "[", "v", "]"}]}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "vC"}], " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "v"}], " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "-", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"bivector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "4", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "v"}], " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "v"}], " ", 
                    RowBox[{"a", "[", "3", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "4", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "5", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "vC"}], " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "2", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "5", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "6", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Exp", "[", 
                  RowBox[{"a", "[", "0", "]"}], "]"}], "/", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"v", "^", "2"}], "+", 
                   RowBox[{"vC", "^", "2"}]}], ")"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Cosh", "[", "v", "]"}], " ", 
                  RowBox[{"Sin", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "-", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"Cos", "[", "vC", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "vC"}], " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Cos", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"v", " ", 
                    RowBox[{"a", "[", "1", "]"}]}], "+", 
                    RowBox[{"vC", " ", 
                    RowBox[{"a", "[", "6", "]"}]}]}], ")"}], " ", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}]}]}], ")"}], " ", 
                  RowBox[{"Sinh", "[", "v", "]"}]}]}], ")"}]}]}]}], 
            "\[IndentingNewLine]", "}"}], "/.", "aRules"}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"genMVb", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"b", ",", "theAlg"}], "]"}], "/.", "cfsRules"}], ")"}], "/.",
           "aRules"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Piecewise", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI\[NotEqual]0\>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"(", 
                RowBox[{"vVRulesGeneric", "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"sS", "\[Rule]", "vBIP"}], ",", 
                   RowBox[{"sC", "->", "vBOPI"}]}], "}"}]}], ")"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"!", 
              RowBox[{"zeroQ", "[", "vBOPI", "]"}]}]}], "\[IndentingNewLine]",
             "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI=0 && vBIP>0 \>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "\[Rule]", 
                  RowBox[{"Sqrt", "[", "vBIP", "]"}]}], ",", 
                 RowBox[{"vC", "\[Rule]", "0"}]}], "}"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"zeroQ", "[", "vBOPI", "]"}], "&&", 
              RowBox[{"positiveQ", "[", "vBIP", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI=0 && vBIP<0 \>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "\[Rule]", "0"}], ",", 
                 RowBox[{"vC", "->", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", "vBIP"}], "]"}]}]}], "}"}]}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"zeroQ", "[", "vBOPI", "]"}], "&&", 
              RowBox[{"negativeQ", "[", "vBIP", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", "\"\<vBOPI=0 && vBIP=0 \>\""}], 
                  "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"vVRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "\[Rule]", "0"}], ",", 
                 RowBox[{"vC", "->", "0"}]}], "}"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "3"}], "}"}]}], "]"}], "/.", 
                    "cfsRules"}], ")"}], "/.", "aRules"}], ")"}], "/.", 
                 "vVRules"}], ")"}], "\[GeometricProduct]", 
               RowBox[{"(", 
                RowBox[{"1", "+", "vecBivect"}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"zeroQ", "[", "vBOPI", "]"}], "&&", 
              RowBox[{"zeroQ", "[", "vBIP", "]"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "2", ",", "0"}], "]"}], "}"}], ",", 
       RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[639]:=",ExpressionUUID->"94891363-cba0-4ab2-9ffd-0b466fae0ee0"],

Cell["Coordinate free formula is the same as for Cl(3,0)", "Text",ExpressionUUID->"0122351d-769b-4aea-9840-a03ec4d4a200"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,3) case", "Item",ExpressionUUID->"b0a4572a-fa87-4f01-a401-caa119f23d88"],

Cell["\<\
Algorithm which outputs real coefficients. Expressed in very powerful \
Piecewise form.\
\>", "Text",ExpressionUUID->"decd9032-fe82-4f2b-9dc0-e75a3c8c072a"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
     RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"expOfMV", "[", 
     RowBox[{
     "expr_", ",", "\"\<Coordinate\>\"", ",", "\"\<LowDimension\>\"", ",", 
      "quiet_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theAlg", "=", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "3", ",", "0"}], "]"}]}], ",", "aRules", ",", 
         "cfsRules", ",", "coef", ",", "a", ",", "b", ",", 
         RowBox[{"vecBivect", "=", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "vBIP", ",", 
         "vBOPI", ",", "mvIPpOP", ",", "mvIPmOP", ",", "mvIPpOP0", ",", 
         "mvIPmOP0", ",", "vVRules", ",", "genMVb"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"aRules", "=", 
         RowBox[{
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Collect", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"a", ",", "theAlg", ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], "-", 
                    RowBox[{"gaPE", "[", "expr", "]"}]}], ",", "_bs", ",", 
                   "coef"}], "]"}], ",", "_coef", ",", "Infinity"}], "]"}], "/.", 
               RowBox[{"coef", "\[Rule]", "Identity"}]}], ")"}], "==", "0"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"a", "[", "0", "]"}], ",", 
              RowBox[{"a", "[", "1", "]"}], ",", 
              RowBox[{"a", "[", "2", "]"}], ",", 
              RowBox[{"a", "[", "3", "]"}], ",", 
              RowBox[{"a", "[", "4", "]"}], ",", 
              RowBox[{"a", "[", "5", "]"}], ",", 
              RowBox[{"a", "[", "6", "]"}], ",", 
              RowBox[{"a", "[", "7", "]"}]}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"vBIP", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"vecBivect", "\[InnerProduct]", "vecBivect"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"vBOPI", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"vecBivect", "\[OuterProduct]", "vecBivect"}], 
           "\[GeometricProduct]", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{"quiet", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<vBIP=v.v+B.B= \>\"", ",", "vBIP"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<vBOPI=v\[OuterProduct]B*I= \>\"", ",", "vBOPI"}], 
             "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"mvIPpOP", "=", 
         RowBox[{"Sqrt", "[", 
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{"vBIP", "+", "vBOPI"}], ")"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mvIPmOP", "=", 
         RowBox[{"Sqrt", "[", 
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{"vBIP", "-", "vBOPI"}], ")"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "introduce", " ", "formal", " ", "vars", " ", "sS", " ", "and", " ",
            "sC"}], ",", " ", 
          RowBox[{
           RowBox[{"since", " ", "denominator", " ", "can", " ", 
            RowBox[{"vanish", ".", " ", "These"}], " ", "are", " ", "sqrt", 
            " ", "of", " ", "s"}], "+", 
           RowBox[{
           "SI", " ", "and", " ", "plays", " ", "an", " ", "important", " ", 
            "role"}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"vVRulesGeneric", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"v", "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"sS", "+", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{"sS", "^", "2"}], "-", 
                   RowBox[{"sC", "^", "2"}]}], "]"}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"sS", "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"sS", "^", "2"}], "-", 
                    RowBox[{"sC", "^", "2"}]}], "]"}]}], "]"}], ")"}]}], 
                ")"}]}]}], ",", 
             RowBox[{"vC", "->", 
              RowBox[{"sC", "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"sS", "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"sS", "^", "2"}], "-", 
                    RowBox[{"sC", "^", "2"}]}], "]"}]}], "]"}], ")"}]}], 
                ")"}]}]}]}], "}"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cfsRules", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"non", " ", "zero", " ", "case"}], ",", " ", 
              RowBox[{"scalar", " ", "+", " ", "pseudovector"}]}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "\[Rule]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"Cos", "[", "mvIPpOP", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"Cos", "[", "mvIPmOP", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "7", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"a", "[", "7", "]"}], "]"}], "*", 
                  RowBox[{"Cos", "[", "mvIPpOP", "]"}]}], " ", "-", 
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "*", 
                  RowBox[{"Cos", "[", "mvIPmOP", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"vector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}], "/", "mvIPpOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "-", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "/", "mvIPmOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "+", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}], "/", "mvIPpOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "+", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "/", "mvIPmOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "-", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}], "/", "mvIPpOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "-", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "/", "mvIPmOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "+", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"bivector", " ", "components"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "4", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}], "/", "mvIPpOP0"}], 
                    ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "-", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "/", "mvIPmOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "3", "]"}], "+", 
                    RowBox[{"a", "[", "4", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "5", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}], "/", "mvIPpOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "+", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], " ", "-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "/", "mvIPmOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "2", "]"}], "-", 
                    RowBox[{"a", "[", "5", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"b", "[", "6", "]"}], "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "2"}], ")"}], "*", 
               RowBox[{"Exp", "[", 
                RowBox[{"a", "[", "0", "]"}], "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"a", "[", "7", "]"}], "]"}], "/", "mvIPpOP0"}], 
                    ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "-", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPpOP0", "]"}]}], " ", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"-", 
                    RowBox[{"a", "[", "7", "]"}]}], "]"}], "/", "mvIPmOP0"}], 
                   ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"a", "[", "1", "]"}], "+", 
                    RowBox[{"a", "[", "6", "]"}]}], ")"}], "*", 
                  RowBox[{"Sin", "[", "mvIPmOP0", "]"}]}]}], ")"}]}]}]}], 
            "}"}], "/.", "aRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"genMVb", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"b", ",", "theAlg"}], "]"}], "/.", "cfsRules"}], ")"}], "/.",
           "aRules"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Piecewise", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI\[NotEqual]0 && \
vBIP-vBOPI\[NotEqual]0\>\""}], "}"}], "}"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"mvIPmOP0", "\[Rule]", "mvIPmOP"}], ",", 
                  RowBox[{"mvIPpOP0", "->", "mvIPpOP"}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"!", 
                RowBox[{"zeroQ", "[", 
                 RowBox[{"(", 
                  RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}]}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"!", 
                RowBox[{"zeroQ", "[", 
                 RowBox[{"(", 
                  RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}]}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI\[NotEqual]0 && vBIP-vBOPI=0\>\""}], "}"}], 
                 "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sin", "[", "mvIPmOP0", "]"}], "\[Rule]", "0"}], 
                  ",", 
                  RowBox[{"mvIPpOP0", "->", "mvIPpOP"}]}], "}"}]}], ")"}], 
              ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"!", 
                RowBox[{"zeroQ", "[", 
                 RowBox[{"(", 
                  RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}]}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI=0 && vBIP-vBOPI\[NotEqual]0\>\""}], "}"}], 
                 "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"mvIPmOP0", "->", "mvIPmOP"}], ",", 
                  RowBox[{
                   RowBox[{"Sin", "[", "mvIPpOP0", "]"}], "\[Rule]", "0"}]}], 
                 "}"}]}], ")"}], ";", 
              RowBox[{"genMVb", "/.", "vVRules"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"!", 
                RowBox[{"zeroQ", "[", 
                 RowBox[{"(", 
                  RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}]}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"printDetails", "[", 
               RowBox[{"quiet", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Piecewise: \>\"", ",", 
                   "\"\<vBIP+vBOPI=0 && vBIP-vBOPI=0\>\""}], "}"}], "}"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"vVRules", "=", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"mvIPmOP0", "\[Rule]", "mvIPmOP"}], ",", 
                  RowBox[{"mvIPpOP0", "->", "mvIPpOP"}]}], "}"}]}], ")"}], 
              ";", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"b", ",", "theAlg", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "3"}], "}"}]}], "]"}], "/.", 
                   "cfsRules"}], ")"}], "/.", "aRules"}], ")"}], "/.", 
               "vVRules"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "+", "vBOPI"}], ")"}], "]"}], ")"}], "&&", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"(", 
                 RowBox[{"vBIP", "-", "vBOPI"}], ")"}], "]"}], ")"}]}]}], 
            "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "3", ",", "0"}], "]"}], "}"}], ",", 
       RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[640]:=",ExpressionUUID->"314ca94c-b2a3-4c0d-9fc8-47216d59ee64"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{
   "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", ",", 
    "quiet_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlg", "=", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "3", ",", "0"}], "]"}]}], ",", 
       RowBox[{"aS", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
       RowBox[{"aV", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
       RowBox[{"aB", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
       RowBox[{"aP", "=", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "a7", ",", "aSqrtP", ",", 
       "aSqrtM"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"aSqrtP", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Expand", "[", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
              RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "-", 
           RowBox[{
            RowBox[{"2", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
            RowBox[{"(", 
             RowBox[{"aV", "\[OuterProduct]", "aB"}], ")"}]}]}], "]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"aSqrtM", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Expand", "[", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
              RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "+", 
           RowBox[{
            RowBox[{"2", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
            RowBox[{"aV", "\[OuterProduct]", "aB"}]}]}], "]"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"a7", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", "aP"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<aSqrtP=-(v.v+B.B)-2*I\[GeometricProduct](aV\[OuterProduct]aB)=\
 \>\"", ",", "aSqrtP"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<aSqrtM=-(v.v+B.B)+2*I\[GeometricProduct](aV\[OuterProduct]aB)=\
 \>\"", ",", "aSqrtM"}], "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", 
                 "\"\<aSqrtP\[NotEqual]0 && aSqrtM\[NotEqual]0\>\""}], "}"}], 
               "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", "aSqrtP", "]"}], "/", "aSqrtP"}], 
                    ")"}], "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", "aSqrtP", "]"}]}], ")"}]}], ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", "aSqrtM", "]"}], "/", "aSqrtM"}], 
                    ")"}], "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", "aSqrtM", "]"}]}], ")"}]}], ")"}]}], 
              ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"zeroQ", "[", "aSqrtM", "]"}]}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"zeroQ", "[", "aSqrtP", "]"}]}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", 
                 "\"\<aSqrtM\[NotEqual]0 && aSqrtP=0\>\""}], "}"}], "}"}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", "aSqrtM", "]"}], "/", "aSqrtM"}], 
                    ")"}], "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", "aSqrtM", "]"}]}], ")"}]}], ")"}]}], 
              ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"zeroQ", "[", "aSqrtM", "]"}]}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", 
                 "\"\<aSqrtM=0 && aSqrtP\[NotEqual]0\>\""}], "}"}], "}"}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sin", "[", "aSqrtP", "]"}], "/", "aSqrtP"}], 
                    ")"}], "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "+", 
                   RowBox[{"Cos", "[", "aSqrtP", "]"}]}], ")"}]}], ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"!", 
              RowBox[{"zeroQ", "[", "aSqrtP", "]"}]}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                "\"\<Piecewise: \>\"", ",", "\"\<aSqrtM=0 && aSqrtP=0\>\""}], 
                "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"Exp", "[", "aS", "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", "a7", "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Exp", "[", 
                   RowBox[{"-", "a7"}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                 "\[GeometricProduct]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "+", "1"}], ")"}]}], 
                ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtM", "]"}], ")"}], "&&", 
            RowBox[{"(", 
             RowBox[{"zeroQ", "[", "aSqrtP", "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "3", ",", "0"}], "]"}], "}"}], ",", 
     RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[641]:=",ExpressionUUID->"e3b3e5b9-d90d-4ea7-8734-2ab58b30b147"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Methods, which uses characteristic polynomial and matrix representations \
\>", "Item",ExpressionUUID->"9b618885-a195-4e6d-b13c-a025e3976e72"],

Cell[TextData[{
 "Methods which uses matrix representations  ",
 StyleBox["gaCharacteristicPolynomial[]",
  FontWeight->"Bold"],
 " are implemented in sec 10. This is done because we want to avoid listing \
of these functions in forward definition section ."
}], "Text",ExpressionUUID->"7b23d737-0ba0-4195-ae5d-565d8737c460"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Logarithm of MV for n\[LessEqual]3"
}], "Subsubsection",ExpressionUUID->"13784c72-3261-4855-9709-93d600f27eff"],

Cell[CellGroupData[{

Cell["Method selection, help functions", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"21ae957b-c02a-420c-a463-d86ee9245db1"],

Cell["First general code and options ", "Text",ExpressionUUID->"ba5cd739-745a-4e60-85fa-fde866f4b6d5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLogOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Automatic\>\"", ",", 
        RowBox[{"gaFormula", "\[Rule]", "Automatic"}]}], "}"}]}], ",", 
     RowBox[{"GeneratedParameters", "\[Rule]", "C"}], ",", 
     RowBox[{"gaIncludeFreeMV", "\[Rule]", "False"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLogOfMV", "::", "Method"}], "=", 
   "\"\<Unknown method `1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLogOfMV", "::", "lowDimensionFormula"}], "=", 
   "\"\<The algebra dimension `1` is greater than 3 or Method was set to \
\\\"Coordinate\\\", which is not implemented for Log with \
\\\"LowDimension\\\" option. Will use gaFunctionOfMV[Log,MV] call.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[642]:=",ExpressionUUID->"9e6d28a2-667d-4688-bc25-746caf0e9c39"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", "\"\<GeneratedParameters\>\"", "]"}], 
     "=", "\"\<Any symbol without value.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", "\"\<gaIncludeFreeMV\>\"", "]"}], "=", 
     
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", "\"\<Quiet\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", "\"\<Method\>\"", "]"}], "=", 
     RowBox[{
     "Automatic", "|", "\"\<Automatic\>\"", "|", 
      "\"\<CoordinateFree \
(gaFormula->\\\"LowDimension\\\"|\\\"ScalarPartOutOfSum\\\"|\\\"\
ScalarPartInSum\\\")\>\"", "|", "\"\<Coordinate\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"{", 
       RowBox[{"_", ",", "\"\<gaFormula\>\""}], "}"}], "]"}], "=", 
     RowBox[{"HoldForm", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<CoordinateFree\>\"", ",", 
        RowBox[{"gaFormula", "->", 
         RowBox[{"Alternatives", "[", 
          RowBox[{
          "Automatic", ",", "\"\<Automatic\>\"", ",", "\"\<LowDimension\>\"", 
           ",", "\"\<ScalarPartOutOfSum\>\"", ",", 
           "\"\<ScalarPartInSum\>\""}], "]"}]}]}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
     RowBox[{
     "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
      "for", " ", "each", " ", "suboption"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"\"\<GeneratedParameters\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Head", "[", "val", "]"}], "===", "Symbol"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"\"\<gaIncludeFreeMV\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<Automatic\>\"", "|", "\"\<CoordinateFree\>\"", "|", 
        "\"\<Coordinate\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "\"\<Automatic\>\"", "|", "Automatic", "|", 
            "\"\<CoordinateFree\>\"", "|", "\"\<Coordinate\>\""}], ",", 
           "___Rule"}], "}"}]}], "]"}], "&&", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"testOptionLogOfMV", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ToString", "[", 
               RowBox[{"val", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theMethod_", ",", "\"\<gaFormula\>\""}], "}"}], ",", 
       "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"MatchQ", "[", 
       RowBox[{"val", ",", 
        RowBox[{
        "Automatic", "|", "\"\<Automatic\>\"", "|", "\"\<LowDimension\>\"", 
         "|", "\"\<ScalarPartOutOfSum\>\"", "|", 
         "\"\<ScalarPartInSum\>\""}]}], "]"}], "/;", 
      RowBox[{"MatchQ", "[", 
       RowBox[{"theMethod", ",", 
        RowBox[{"Alternatives", "[", 
         RowBox[{
         "Automatic", ",", "\"\<Automatic\>\"", ",", 
          "\"\<CoordinateFree\>\""}], "]"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionLogOfMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[645]:=",ExpressionUUID->"6f22605e-c1cd-4d2a-abde-30e6fb1467b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLogOfMV", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", "gaLogOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", "theMethod", ",", 
       "theFormula"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaLogOfMV", ",", "#", ",", "theOption"}], "}"}], ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionLogOfMV", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"(", 
           RowBox[{"{", "opts", "}"}], ")"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "main", " ", "options", " ", "obtained", " ", 
        "values", " ", "ans", " ", "specify", " ", "Automatic", " ", 
        "settings"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], "=", 
         
         RowBox[{"GeneratedParameters", "/.", 
          RowBox[{"Options", "[", "gaLogOfMV", "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaIncludeFreeMV\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaIncludeFreeMV\>\"", "]"}], "=", 
         RowBox[{"gaIncludeFreeMV", "/.", 
          RowBox[{"Options", "[", "gaLogOfMV", "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaLogOfMV", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
         "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
          RowBox[{"\"\<Automatic\>\"", "|", "Automatic", "|", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}], ",", 
             "___Rule"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"theMethod", "=", "\"\<CoordinateFree\>\""}], ",", 
        RowBox[{"theMethod", "=", 
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"set", " ", "gaFormula", " ", 
         RowBox[{"option", ":", " ", 
          RowBox[{
           RowBox[{"if", " ", "dimension"}], " ", ">", 
           RowBox[{
           "3", " ", "or", " ", "Method", " ", "set", " ", "to", " ", 
            "Coordinate"}]}]}]}], ",", " ", 
        RowBox[{
        "which", " ", "is", " ", "not", " ", "implemented", " ", "directly", 
         " ", "for", " ", "low", " ", "dim"}], ",", " ", 
        RowBox[{"use", " ", "gaFunctionOfMV"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], ">", 
           "3"}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{"theMethod", "===", "\"\<Coordinate\>\""}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaLogOfMV", "::", "lowDimensionFormula"}], ",", 
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"theFormula", "=", "\"\<ScalarPartInSum\>\""}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], ",", 
              RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}]}], "]"}], ")"}],
            "&&", 
           RowBox[{"(", 
            RowBox[{"theMethod", "===", "\"\<CoordinateFree\>\""}], ")"}]}], 
          ",", 
          RowBox[{"theFormula", "=", "\"\<LowDimension\>\""}], ",", 
          RowBox[{"theFormula", "=", 
           RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Information", " ", "about", " ", "option", " ", "handling"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Method is\>\"", ",", "theMethod"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Formula is set to \>\"", ",", "theFormula"}], "}"}]}],
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "only", " ", "available", " ", "methods", " ", "log", " ", 
        "is", " ", "\"\<CoordinateFree\>\"", " ", "and", " ", 
        "\"\<Coordinate\>\"", " ", "if", " ", "gaFunctionOfMV", " ", "is", 
        " ", "used"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "theMethod", ",", "\"\<CoordinateFree\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "theFormula", ",", "\"\<LowDimension\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"logOfMV", "[", 
           RowBox[{"expr", ",", "theMethod", ",", "theFormula", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], 
              ",", 
              RowBox[{"theOption", "[", "\"\<gaIncludeFreeMV\>\"", "]"}], ",", 
              RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "}"}]}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<ScalarPartInSum\>\"", "|", "\"\<ScalarPartOutOfSum\>\""}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Call to gaFunctionOfMV[Log,MV]! More control is available \
using options for that function.\>\"", ",", "\"\<\>\""}], "}"}], "}"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"functionOfMVCoordinateFree", "[", 
            RowBox[{"Log", ",", 
             RowBox[{"gaPE", "[", "expr", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}], ",", 
               "Identity", ",", "theFormula", ",", "\"\<RootSum\>\"", ",", 
               "Complexes", ",", "False", ",", "False"}], "}"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        "\"\<Coordinate\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"printDetails", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Call to gaFunctionOfMV[Log,MV]! More control is available \
using options for that function.\>\"", ",", "\"\<\>\""}], "}"}], "}"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"functionOfMVCoordinate", "[", 
          RowBox[{"Log", ",", 
           RowBox[{"gaPE", "[", "expr", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}], ",", 
             "Identity"}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", "_", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaVerify", "::", "missing"}], ",", "theMethod", ",", 
           "gaLogOfMV"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[658]:=",ExpressionUUID->"600a2ff8-18bc-4c32-8205-dee11ac1caf2"],

Cell[TextData[{
 "Help functions",
 StyleBox[" positiveQ[]",
  FontWeight->"Bold"],
 ", ",
 StyleBox["zeroQ[]",
  FontWeight->"Bold"],
 ",",
 StyleBox["nonNegativeQ[]",
  FontWeight->"Bold"],
 ",",
 StyleBox["nonzeroQ[]",
  FontWeight->"Bold"],
 " are defined in \[OpenCurlyDoubleQuote]Square root of MV\
\[CloseCurlyDoubleQuote] section. "
}], "Text",ExpressionUUID->"c1a142a7-0882-42db-a426-8ec9aec17f7a"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,0) case", "Item",ExpressionUUID->"30a495d0-7bed-4de3-886e-3adbc7f7eb8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logOfMV", "[", 
    RowBox[{
    "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", ",", 
     
     RowBox[{"{", 
      RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"a0", "=", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
        RowBox[{"aV", "=", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "log", ",", "mvNorm", ",",
         "mvNorm1", ",", "ansRaw"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvNorm1", "=", 
        RowBox[{"-", 
         RowBox[{"gaPE", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{
            RowBox[{"gaGradeInverse", "[", "aV", "]"}], ",", "aV"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"mvNorm", "=", 
        RowBox[{
         RowBox[{"-", "mvNorm1"}], "+", 
         RowBox[{"a0", "^", "2"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
           "\"\<mvNorm=gaNorm2CliffordConjugateSigned[expr] \>\"", ",", 
            "mvNorm"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ansRaw", "=", 
        RowBox[{"(", 
         RowBox[{"Piecewise", "[", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<mvNorm1>0,mvNorm>0,a0>0\>\""}], "}"}], "}"}]}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                  RowBox[{"Log", "[", "mvNorm", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"ArcTanh", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "mvNorm1", "]"}], "/", "a0"}], "]"}],
                     "/", 
                    RowBox[{"Sqrt", "[", "mvNorm1", "]"}]}], ")"}], "*", 
                  "aV"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"positiveQ", "[", "mvNorm1", "]"}], "&&", 
                RowBox[{"positiveQ", "[", "mvNorm", "]"}], "&&", 
                RowBox[{"positiveQ", "[", "a0", "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<case: \>\"", ",", "\"\<mvNorm=0,a0>0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], "+", 
                    RowBox[{"Log", "[", 
                    RowBox[{"2", "a0"}], "]"}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}]}], " ", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"2", "a0"}], "]"}]}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", "mvNorm1", "]"}]}], ")"}], "*", 
                  "aV"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"zeroQ", "[", "mvNorm", "]"}], "&&", 
                RowBox[{"positiveQ", "[", "a0", "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<case: \>\"", ",", "\"\<mvNorm1=0,a0=0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"log", "[", "a0", "]"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"zeroQ", "[", "mvNorm1", "]"}], "&&", 
                RowBox[{"nonNegativeQ", "[", "a0", "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<(negativeQ[mvNorm1]||nonNegativeQ[mvNorm]||(\
positiveQ[mvNorm1]&&nonNegativeQ[mvNorm]&&negativeQ[a0])\>\""}], "}"}], 
                   "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"negativeQ", "[", "mvNorm1", "]"}], "||", 
                 RowBox[{"negativeQ", "[", "mvNorm", "]"}], "||", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"nonNegativeQ", "[", "mvNorm1", "]"}], "&&", 
                   RowBox[{"nonNegativeQ", "[", "mvNorm", "]"}], "&&", 
                   RowBox[{"negativeQ", "[", "a0", "]"}]}], ")"}]}], ")"}]}], 
              "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
           ",", "$Failed"}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
       "ansRaw"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "0", ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[659]:=",ExpressionUUID->"906056a3-aeca-4e76-b806-67e54494ac7c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,1) case", "Item",ExpressionUUID->"8d090290-ff69-4787-b705-566a4d93abc7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logOfMV", "[", 
    RowBox[{
    "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", ",", 
     
     RowBox[{"{", 
      RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"theAlg", "=", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1", ",", "0"}], "]"}]}], ",", 
        RowBox[{"a0", "=", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
        RowBox[{"aV", "=", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "mvNorm", ",", "mvNorm1", 
        ",", "cleanEvenPiInPlus", ",", "ansRaw"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvNorm1", "=", 
        RowBox[{"-", 
         RowBox[{"gaPE", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{
            RowBox[{"gaGradeInverse", "[", "aV", "]"}], ",", "aV"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"mvNorm", "=", 
        RowBox[{
         RowBox[{"-", "mvNorm1"}], "+", 
         RowBox[{"a0", "^", "2"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<mvNorm1=-gaNorm2CliffordConjugateSigned[gaGetMV[expr,{1}]] \
\>\"", ",", "mvNorm1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<mvNorm=-mvNorm1+gaGetMV[expr,{0}]^2 \>\"", ",", "mvNorm"}], 
            "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "when", " ", "we", " ", "want", " ", "to", " ", "add", " ", "free", 
          " ", "constants"}], ",", " ", 
         RowBox[{"we", " ", "differently", " ", "define", " ", "function"}], 
         ",", " ", 
         RowBox[{"which", " ", "handle", " ", "periodic", " ", "argument"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"Plus", "[", 
               RowBox[{"x___", ",", 
                RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",", 
             "___"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"Plus", "[", 
             RowBox[{"x", ",", "y"}], "]"}], "/;", 
            RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"Plus", "[", 
               RowBox[{"x___", ",", 
                RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",", 
             "k_Integer"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"Plus", "[", 
              RowBox[{"x", ",", "y"}], "]"}], "+", 
             RowBox[{"2", "*", "Pi", "*", 
              RowBox[{"fc", "[", "k", "]"}]}]}], "/;", 
            RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{"any_", ",", "n_Integer"}], "]"}], ":=", 
           RowBox[{"any", "+", 
            RowBox[{"2", "*", "Pi", "*", 
             RowBox[{"fc", "[", "n", "]"}]}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ansRaw", "=", 
        RowBox[{"(", 
         RowBox[{"Piecewise", "[", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", "\"\<mvNorm1\[NotEqual]0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                  RowBox[{"Log", "[", "mvNorm", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{"a0", ",", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvNorm1"}], "]"}]}], "]"}], ",", "1"}], 
                    "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvNorm1"}], "]"}]}], ")"}], "*", "aV"}]}]}],
                ",", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", "mvNorm1", "]"}]}], ")"}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", "\"\<mvNorm1=0,a0>=0\>\""}], "}"}],
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", "a0", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}], "+", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{"0", ",", "1"}], "]"}], "*", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"zeroQ", "[", "mvNorm1", "]"}], ")"}], "&&", 
                RowBox[{"(", 
                 RowBox[{"nonNegativeQ", "[", "a0", "]"}], ")"}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<case: \>\"", ",", "\"\<mvNorm1=0,a0<0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Log", "[", 
                  RowBox[{"-", "a0"}], "]"}], " ", "+", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{"Pi", ",", "1"}], "]"}], "*", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"zeroQ", "[", "mvNorm1", "]"}], ")"}], "&&", 
                RowBox[{"(", 
                 RowBox[{"negativeQ", "[", "a0", "]"}], ")"}]}]}], 
              "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
           ",", "$Failed"}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ansRaw", "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"ClearAll", "[", "cleanEvenPiInPlus", "]"}], ";", 
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}]}], 
         "}"}]}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[660]:=",ExpressionUUID->"d148f88f-a123-4342-a911-4c34f9068246"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,0) and Cl(1,1) cases", "Item",ExpressionUUID->"59cd01ff-0579-4aa3-bfaf-b3f7db2dcd06"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"logOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
          RowBox[{"a0", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
          RowBox[{"aVB", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "mvNorm12", ",",
           "cleanEvenPiInPlus", ",", "ansRaw", ",", "freeM"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"mvNorm12", "=", 
          RowBox[{"-", 
           RowBox[{"gaPE", "[", 
            RowBox[{"aVB", "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "aVB", "]"}]}], "]"}]}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
             "\"\<mvNorm12=-gaNorm2CliffordConjugateSigned[gaGetMV[expr,{1,2}]\
] \>\"", ",", "mvNorm12"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "when", " ", "we", " ", "want", " ", "to", " ", "add", " ", "free",
             " ", "constants"}], ",", " ", 
           RowBox[{"we", " ", "differently", " ", "define", " ", "function"}],
            ",", " ", 
           RowBox[{
           "which", " ", "handle", " ", "periodic", " ", "argument"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "___"}], "]"}], ":=", 
             RowBox[{
              RowBox[{"Plus", "[", 
               RowBox[{"x", ",", "y"}], "]"}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "k_Integer"}], "]"}], ":=", 
             RowBox[{
              RowBox[{
               RowBox[{"Plus", "[", 
                RowBox[{"x", ",", "y"}], "]"}], "+", 
               RowBox[{"2", "*", "Pi", "*", 
                RowBox[{"fc", "[", "k", "]"}]}]}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{"any_", ",", "n_Integer"}], "]"}], ":=", 
             RowBox[{"any", "+", 
              RowBox[{"2", "*", "Pi", "*", 
               RowBox[{"fc", "[", "n", "]"}]}]}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeM", "[", "n_Integer", "]"}], ":=", 
          RowBox[{"Switch", "[", 
           RowBox[{"theAlg", ",", "\[IndentingNewLine]", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "1"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "2"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "-", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"1", "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "1"}], "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "2"}], "]"}], "^", "2"}]}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}]}], 
             ")"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "1"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"1", "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "1"}], "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "2"}], "]"}], "^", "2"}]}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "2"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}]}], 
             ")"}], ",", "\[IndentingNewLine]", "_", ",", "$Failed"}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"specCondition", "=", 
              RowBox[{"(", 
               RowBox[{"And", "@@", 
                RowBox[{"(", 
                 RowBox[{"zeroQ", "/@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"gaComponentList", "[", 
                    RowBox[{"gaGetMV", "[", 
                    RowBox[{"aVB", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}]}], 
                 ")"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"specCondition", "=", 
              RowBox[{"(", 
               RowBox[{"And", "@@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "/@", 
                   RowBox[{"(", 
                    RowBox[{"gaComponentList", "[", 
                    RowBox[{
                    RowBox[{"gaGetMV", "[", 
                    RowBox[{"aVB", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}], 
                    "\[Rule]", "0"}], "}"}]}], "]"}], ")"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}]}], 
               ")"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
          "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{"freeM", "[", "n_Integer", "]"}], ":=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{
                   RowBox[{"fc", "[", 
                    RowBox[{"n", ",", "1"}], "]"}], "^", "2"}]}], "-", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "2"}], "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
              ")"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "1"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
               "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "2"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
               "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "3"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
              ")"}]}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"ansRaw", "=", 
          RowBox[{"(", 
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<mvNorm12>0,Sqrt[mvNorm12]/a0<1,a0>0\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "mvNorm12"}], "+", 
                    RowBox[{"a0", "^", "2"}]}], "]"}]}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ArcTanh", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}], "/", "a0"}], 
                    "]"}], "/", 
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}]}], ")"}], "*", 
                    "aVB"}]}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", "a0", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", "mvNorm12", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "-", 
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "case", " ", "of", " ", "the", " ", "MV", " ", "with", " ", 
                  "infinite", " ", "coefficient", " ", "for", " ", 
                  RowBox[{"Log", ".", " ", "Example"}], " ", "MV", " ", "of", 
                  " ", "Cl", 
                  RowBox[{"(", 
                   RowBox[{"2", ",", "0"}], ")"}], " ", "a"}], "=", " ", 
                 RowBox[{"9", "-", 
                  RowBox[{"9", " ", 
                   TemplateBox[{
                    
                    TemplateBox[{"1"}, "mvDownUp", 
                    DisplayFunction :> (StyleBox[
                    RowBox[{
                    AdjustmentBox[#, BoxBaselineShift -> 1]}], FontSize -> 
                    Small, FontTracking -> "Condensed", AutoSpacing -> 
                    False]& ), InterpretationFunction :> (ReleaseHold[
                    RowBox[{"mvDownUp", "@@", 
                    MakeExpression[{
                    Take[{
                    SlotSequence[1]}, 
                    Length[{1}]], 
                    Take[{
                    SlotSequence[1]}, {Length[{1}] + 1, 
                    Length[{1}]}]}, StandardForm]}]]& ), SyntaxForm -> "fish",
                     Tooltip -> "mvDownUp[{1}, {}]"], 
                    
                    TemplateBox[{"2", "0", "0"}, "Cl", 
                    DisplayFunction -> (SubscriptBox[
                    StyleBox["Cl", {FontColor -> RGBColor[0., 0., 1.]}], 
                    RowBox[{#, ",", #2}]]& ), Tooltip -> None]},
                    "\[DoubleStruckE]",
                    DisplayFunction:>(StyleBox[
                    RowBox[{
                    StyleBox[
                    "\[DoubleStruckE]", FontColor -> 
                    RGBColor[0., 0., 1.]], #}], AutoSpacing -> False, 
                    FontTracking -> "Condensed"]& ),
                    
                    InterpretationFunction:>(
                    RowBox[{"\[DoubleStruckE]", "[", #, ",", #2, "]"}]& ),
                    SyntaxForm->"fish",
                    Tooltip->"Cl[2, 0, 0]"]}], "+", 
                  RowBox[{"8", " ", 
                   TemplateBox[{
                    
                    TemplateBox[{"2"}, "mvDownUp", 
                    DisplayFunction :> (StyleBox[
                    RowBox[{
                    AdjustmentBox[#, BoxBaselineShift -> 1]}], FontSize -> 
                    Small, FontTracking -> "Condensed", AutoSpacing -> 
                    False]& ), InterpretationFunction :> (ReleaseHold[
                    RowBox[{"mvDownUp", "@@", 
                    MakeExpression[{
                    Take[{
                    SlotSequence[1]}, 
                    Length[{2}]], 
                    Take[{
                    SlotSequence[1]}, {Length[{2}] + 1, 
                    Length[{2}]}]}, StandardForm]}]]& ), SyntaxForm -> "fish",
                     Tooltip -> "mvDownUp[{2}, {}]"], 
                    
                    TemplateBox[{"2", "0", "0"}, "Cl", 
                    DisplayFunction -> (SubscriptBox[
                    StyleBox["Cl", {FontColor -> RGBColor[0., 0., 1.]}], 
                    RowBox[{#, ",", #2}]]& ), Tooltip -> None]},
                    "\[DoubleStruckE]",
                    DisplayFunction:>(StyleBox[
                    RowBox[{
                    StyleBox[
                    "\[DoubleStruckE]", FontColor -> 
                    RGBColor[0., 0., 1.]], #}], AutoSpacing -> False, 
                    FontTracking -> "Condensed"]& ),
                    
                    InterpretationFunction:>(
                    RowBox[{"\[DoubleStruckE]", "[", #, ",", #2, "]"}]& ),
                    SyntaxForm->"fish",
                    Tooltip->"Cl[2, 0, 0]"]}], "+", 
                  RowBox[{"8", " ", 
                   TemplateBox[{
                    
                    TemplateBox[{"1", "2"}, "mvDownUp", 
                    DisplayFunction :> (StyleBox[
                    RowBox[{
                    AdjustmentBox[#, BoxBaselineShift -> 1], ",", 
                    AdjustmentBox[#2, BoxBaselineShift -> 1]}], FontSize -> 
                    Small, FontTracking -> "Condensed", AutoSpacing -> 
                    False]& ), InterpretationFunction :> (ReleaseHold[
                    RowBox[{"mvDownUp", "@@", 
                    MakeExpression[{
                    Take[{
                    SlotSequence[1]}, 
                    Length[{1, 2}]], 
                    Take[{
                    SlotSequence[1]}, {Length[{1, 2}] + 1, 
                    Length[{1, 2}]}]}, StandardForm]}]]& ), SyntaxForm -> 
                    "fish", Tooltip -> "mvDownUp[{1, 2}, {}]"], 
                    
                    TemplateBox[{"2", "0", "0"}, "Cl", 
                    DisplayFunction -> (SubscriptBox[
                    StyleBox["Cl", {FontColor -> RGBColor[0., 0., 1.]}], 
                    RowBox[{#, ",", #2}]]& ), Tooltip -> None]},
                    "\[DoubleStruckE]",
                    DisplayFunction:>(StyleBox[
                    RowBox[{
                    StyleBox[
                    "\[DoubleStruckE]", FontColor -> 
                    RGBColor[0., 0., 1.]], #}], AutoSpacing -> False, 
                    FontTracking -> "Condensed"]& ),
                    
                    InterpretationFunction:>(
                    RowBox[{"\[DoubleStruckE]", "[", #, ",", #2, "]"}]& ),
                    SyntaxForm->"fish",
                    Tooltip->"Cl[2, 0, 0]"]}]}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<mvNorm12>0,Sqrt[mvNorm12]/a0=1,a0>0\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Log", "[", "a0", "]"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], "*", 
                    RowBox[{"Log", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"Log", "[", "2", "]"}]}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}]}], ")"}], "*", 
                    "aVB"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", "a0", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", "mvNorm12", "]"}], "&&", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{"a0", "-", 
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Example", " ", "MV", " ", "of", " ", "Cl", 
                   RowBox[{"(", 
                    RowBox[{"2", ",", "0"}], ")"}], " ", "a"}], "=", 
                  RowBox[{"2", "+", 
                   RowBox[{"5", " ", 
                    RowBox[{"\[DoubleStruckE]", "[", "1", "]"}]}], "-", 
                   RowBox[{"4", " ", 
                    RowBox[{"\[DoubleStruckE]", "[", "2", "]"}]}], "-", 
                   RowBox[{"7", 
                    RowBox[{"\[DoubleStruckE]", "[", 
                    RowBox[{"1", ",", "2"}], "]"}]}]}]}], ";"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<mvNorm12<0,-mvNorm12+a0^2>=0\>\""}], "}"}], "}"}]}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "mvNorm12"}], "+", 
                    RowBox[{"a0", "^", "2"}]}], "]"}]}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{"a0", ",", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvNorm12"}], "]"}]}], "]"}], ",", "1"}], 
                    "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "mvNorm12"}], "]"}]}], ")"}], "*", 
                    "aVB"}]}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"negativeQ", "[", "mvNorm12", "]"}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", "\"\<mvNorm12=0, a0>0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Log", "[", "a0", "]"}], "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "a0"}], ")"}], "*", "aVB"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"positiveQ", "[", "a0", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "mvNorm12", "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "simplified", " ", "version", " ", "of", " ", "commented", 
                 " ", "code", " ", "part", " ", "below"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<A12=0,a0<=0, only negative scalar scalar \>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"-", "a0"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}], "+", 
                   RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "1"}], "]"}], "*", 
                    RowBox[{"freeM", "[", "1", "]"}]}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonPositiveQ", "[", "a0", "]"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "aVB", "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<(nonNegativeQ[mvNorm12])&&((nonPositiveQ[a0]&&(!\
zeroQ[gaGetMV[aVB,{1}]]))||nonPositiveQ[a0^2-mvNorm12])\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"nonNegativeQ", "[", "mvNorm12", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nonPositiveQ", "[", "a0", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"nonzeroQ", "[", "aVB", "]"}], ")"}]}], ")"}], "||", 
                    RowBox[{"nonPositiveQ", "[", 
                    RowBox[{
                    RowBox[{"a0", "^", "2"}], "-", "mvNorm12"}], "]"}]}], 
                   ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<mvNorm12>=0,a0<=0, only scalar and basis element \
with square -1 present\>\""}], "}"}], "}"}]}], "]"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"-", "a0"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}], "+", 
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "1"}], "]"}], "*", 
                    RowBox[{"freeM", "[", "1", "]"}]}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"nonPositiveQ", "[", "a0", "]"}], "&&", 
                   RowBox[{"nonNegativeQ", "[", "mvNorm12", "]"}], "&&", 
                   "specCondition"}]}], "\[IndentingNewLine]", "}"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"printDetails", "[", 
                    RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", 
                    "\"\<(nonNegativeQ[mvNorm12])&&((nonPositiveQ[a0]&&(!\
zeroQ[gaGetMV[aVB,{1}]]))||nonPositiveQ[a0^2-mvNorm12])\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                   RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"nonNegativeQ", "[", "mvNorm12", "]"}], ")"}], "&&", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nonPositiveQ", "[", "a0", "]"}], "&&", 
                    RowBox[{"(", 
                    RowBox[{"Not", "[", "specCondition", "]"}], ")"}]}], 
                    ")"}], "||", 
                    RowBox[{"nonPositiveQ", "[", 
                    RowBox[{
                    RowBox[{"a0", "^", "2"}], "-", "mvNorm12"}], "]"}]}], 
                    ")"}]}]}], "\[IndentingNewLine]", "}"}]}], "*)"}], 
              "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}], ")"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"ansRaw", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ClearAll", "[", "cleanEvenPiInPlus", "]"}], ";", 
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}]}], 
           "}"}]}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[661]:=",ExpressionUUID->"c9264fe8-20be-4978-84d1-cdff82749767"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,2) case", "Item",ExpressionUUID->"e194850f-51ef-427e-9079-e9c44acb138f"],

Cell["\<\
The formula can easily be derived from isomorphism to even Cl(0,3). The \
formula to even Cl(3,0) has branches and is not convenient.\
\>", "Text",ExpressionUUID->"75b35f19-b015-4b7b-8011-afae68125e3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logOfMV", "[", 
    RowBox[{
    "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", ",", 
     
     RowBox[{"{", 
      RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"theAlg", "=", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ",", 
        RowBox[{"a0", "=", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
        RowBox[{"aVB", "=", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", "mvNorm", ",", 
        "mvNorm12", ",", "cleanEvenPiInPlus", ",", "ansRaw", ",", "freeM"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvNorm12", "=", 
        RowBox[{"gaPE", "[", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{
           RowBox[{"gaCliffordConjugate", "[", "aVB", "]"}], ",", "aVB"}], 
          "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"mvNorm", "=", 
        RowBox[{"mvNorm12", "+", 
         RowBox[{"a0", "^", "2"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
           "\"\<mvNorm=gaNorm2CliffordConjugateSigned[expr] \>\"", ",", 
            "mvNorm"}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "when", " ", "we", " ", "want", " ", "to", " ", "add", " ", "free", 
          " ", "constants"}], ",", " ", 
         RowBox[{"we", " ", "differently", " ", "define", " ", "function"}], 
         ",", " ", 
         RowBox[{"which", " ", "handle", " ", "periodic", " ", "argument"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"Plus", "[", 
               RowBox[{"x___", ",", 
                RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",", 
             "___"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"Plus", "[", 
             RowBox[{"x", ",", "y"}], "]"}], "/;", 
            RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"Plus", "[", 
               RowBox[{"x___", ",", 
                RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",", 
             "k_Integer"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"Plus", "[", 
              RowBox[{"x", ",", "y"}], "]"}], "+", 
             RowBox[{"2", "*", "Pi", "*", 
              RowBox[{"fc", "[", "k", "]"}]}]}], "/;", 
            RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{"any_", ",", "n_Integer"}], "]"}], ":=", 
           RowBox[{"any", "+", 
            RowBox[{"2", "*", "Pi", "*", 
             RowBox[{"fc", "[", "n", "]"}]}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"bs", "=", 
           RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeM", "[", "n_Integer", "]"}], ":=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "1"}], "]"}], "^", "2"}], "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "2"}], "]"}], "^", "2"}], "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], ")"}],
            "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"fc", "[", 
               RowBox[{"n", ",", "1"}], "]"}], "*", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], "+", 
             
             RowBox[{
              RowBox[{"fc", "[", 
               RowBox[{"n", ",", "2"}], "]"}], "*", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "2", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], "+", 
             
             RowBox[{
              RowBox[{"fc", "[", 
               RowBox[{"n", ",", "3"}], "]"}], "*", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
            "\[IndentingNewLine]", ")"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ansRaw", "=", 
        RowBox[{"(", 
         RowBox[{"Piecewise", "[", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", "\"\<mvNorm12\[NotEqual]0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], "*", " ", 
                  RowBox[{"Log", "[", "mvNorm", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{"a0", ",", 
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}]}], "]"}], ",", 
                    "1"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "mvNorm12", "]"}]}], ")"}], "*", 
                  "aVB"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", "mvNorm12", "]"}]}], ")"}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", "\"\<mvNorm12=0,a0>=0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"when", " ", "mvNorm12"}], "=", 
                  RowBox[{
                  "0", " ", "vector", " ", "and", " ", "bivector", " ", 
                   "part", " ", "for", " ", "this", " ", "algebra", " ", 
                   "disappear"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", "a0", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}], "+", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{"0", ",", "1"}], "]"}], "*", 
                  RowBox[{"freeM", "[", "1", "]"}]}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"zeroQ", "[", "mvNorm12", "]"}], ")"}], "&&", 
                RowBox[{"nonNegativeQ", "[", "a0", "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<case: \>\"", ",", "\"\<mvNorm12=0,a0<0\>\""}], "}"}],
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"when", " ", "mvNorm12"}], "=", 
                  RowBox[{
                  "0", " ", "vector", " ", "and", " ", "bivector", " ", 
                   "part", " ", "for", " ", "this", " ", "algebra", " ", 
                   "disappear"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Log", "[", 
                  RowBox[{"-", "a0"}], "]"}], "+", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{"Pi", ",", "1"}], "]"}], "*", 
                  RowBox[{"freeM", "[", "1", "]"}]}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"zeroQ", "[", "mvNorm12", "]"}], ")"}], "&&", 
                RowBox[{"negativeQ", "[", "a0", "]"}]}]}], 
              "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
           ",", "$Failed"}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ansRaw", "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"ClearAll", "[", 
           RowBox[{"cleanEvenPiInPlus", ",", "freeM"}], "]"}], ";", 
          RowBox[{
           RowBox[{"cleanEvenPiInPlus", "[", 
            RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}]}], 
         "}"}]}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[662]:=",ExpressionUUID->"1ba5129e-70db-44ff-b750-7b7466c86110"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(3,0) and Cl(1,2) cases ", "Item",ExpressionUUID->"52142dde-db20-43e6-9c36-57ddf3b3cc4e"],

Cell["\<\
In Coordinate free form free MV, which can be added to logarithm is provided \
by cleanEvenPiInPlus function.  There are two discrete integer constants. \
\>", "Text",ExpressionUUID->"a86c594d-f0fb-4950-b9dc-b1487d5cc002"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"logOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
          RowBox[{"a0", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
          RowBox[{"aV", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
          RowBox[{"aB", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
          RowBox[{"aP", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "a7", ",", "iP", ",", 
          "oP", ",", "bP", ",", "bM", ",", "kP2", ",", "kM2", ",", 
          "cleanEvenPiInPlus", ",", "log", ",", "sLog", ",", "pseudoTerm", 
          ",", "vbLog", ",", "vbArctan", ",", "freeB", ",", 
          RowBox[{"exists", "=", "True"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"a7", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
            "aP"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"iP", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
              RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"oP", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
             RowBox[{"(", 
              RowBox[{"2", "\[GeometricProduct]", 
               RowBox[{"aV", "\[OuterProduct]", "aB"}]}], ")"}]}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bP", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Sqrt", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"iP", "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"oP", "^", "2"}], "+", 
                    RowBox[{"iP", "^", "2"}]}], "]"}]}], ")"}], "/", "2"}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", "oP", "]"}]}], ")"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Sqrt", "[", "iP", "]"}], ",", "\[IndentingNewLine]", 
                
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", "oP", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", "iP", "]"}]}], ")"}]}], "}"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"0", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", "oP", "]"}], "&&", 
                  RowBox[{"negativeQ", "[", "iP", "]"}]}], ")"}]}], "}"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"0", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", "oP", "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "iP", "]"}]}], ")"}]}], "}"}]}], 
             "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"bM", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"oP", "/", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"2", "*", 
                   RowBox[{"(", 
                    RowBox[{"iP", "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"oP", "^", "2"}], "+", 
                    RowBox[{"iP", "^", "2"}]}], "]"}]}], ")"}]}], "]"}]}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", "oP", "]"}]}], ")"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", " ", "\[IndentingNewLine]", 
               RowBox[{"0", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", "oP", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", "iP", "]"}]}], ")"}]}], "}"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Sqrt", "[", 
                 RowBox[{"-", "iP"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", "oP", "]"}], "&&", 
                  RowBox[{"negativeQ", "[", "iP", "]"}]}], ")"}]}], "}"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"0", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", "oP", "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "iP", "]"}]}], ")"}]}], "}"}]}], 
             "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"kP2", "=", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"bP", "+", "a0"}], ")"}], "2"], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"bM", "+", "a7"}], ")"}], "2"]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"kM2", "=", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"bP", "-", "a0"}], ")"}], "2"], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"bM", "-", "a7"}], ")"}], "2"]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<b+=\>\"", ",", "bP"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<b-=\>\"", ",", "bM"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<(\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)\!\(\*SubscriptBox[\()\), \(+\)]\)=\>\"", ",", "kP2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<(\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)\!\(\*SubscriptBox[\()\), \(-\)]\)=\>\"", ",", "kM2"}], "}"}]}], 
            "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "when", " ", "we", " ", "want", " ", "to", " ", "add", " ", "free",
             " ", "constants"}], ",", " ", 
           RowBox[{"we", " ", "differently", " ", "define", " ", "function"}],
            ",", " ", 
           RowBox[{
           "which", " ", "handle", " ", "periodic", " ", "argument"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"need", " ", "two", " ", "fuctions"}], ",", " ", 
           RowBox[{
           "because", " ", "of", " ", "different", " ", "periodicity", " ", 
            "2", "Pi", " ", "and", " ", "4", " ", "Pi"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "___"}], "]"}], ":=", 
             RowBox[{
              RowBox[{"Plus", "[", 
               RowBox[{"x", ",", "y"}], "]"}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "k_Integer"}], "]"}], ":=", 
             RowBox[{
              RowBox[{
               RowBox[{"Plus", "[", 
                RowBox[{"x", ",", "y"}], "]"}], "+", 
               RowBox[{"2", "*", "Pi", "*", 
                RowBox[{"fc", "[", "k", "]"}]}]}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{"any_", ",", "n_Integer"}], "]"}], ":=", 
             RowBox[{"any", "+", 
              RowBox[{"2", "*", "Pi", "*", 
               RowBox[{"fc", "[", "n", "]"}]}]}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeB", "[", "n_Integer", "]"}], ":=", 
          RowBox[{"Switch", "[", 
           RowBox[{"theAlg", ",", "\[IndentingNewLine]", 
            RowBox[{"Cl", "[", 
             RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "1"}], "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "2"}], "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
              ")"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "1"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "2"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "3"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}]}]}], 
              ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "2", ",", "0"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", 
               RowBox[{"Sqrt", "[", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{
                   RowBox[{"fc", "[", 
                    RowBox[{"n", ",", "1"}], "]"}], "^", "2"}]}], "-", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "2"}], "]"}], "^", "2"}], "+", 
                 RowBox[{
                  RowBox[{"fc", "[", 
                   RowBox[{"n", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
              ")"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "1"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "2"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "+", 
               RowBox[{
                RowBox[{"fc", "[", 
                 RowBox[{"n", ",", "3"}], "]"}], "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], "]"}]}]}], 
              ")"}]}], ",", "\[IndentingNewLine]", "_", ",", "$Failed"}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "preffer", " ", "to", " ", "make", " ", "all", " ", "conditions", 
           " ", "the", " ", "same", " ", "through", " ", "all", " ", 
           RowBox[{"terms", ":", " ", 
            RowBox[{
            "not", " ", "possible", " ", "for", " ", "the", " ", 
             "moment"}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"sLog", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Log[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+Log[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<!zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]\>\""}], "}"}], "}"}]}], "]"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", " ", 
                    RowBox[{"1", "/", "2"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"Sqrt", "[", "kP2", "]"}], "]"}], "+", 
                    RowBox[{"log", "[", 
                    RowBox[{"Sqrt", "[", "kM2", "]"}], "]"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"the", " ", "det", " ", "A"}], " ", "=", 
                RowBox[{
                 RowBox[{"0", " ", 
                  RowBox[{"case", ":", " ", 
                   RowBox[{"split", " ", "when", " ", "det", " ", 
                    SubscriptBox["A", "12"]}]}]}], " ", "=", 
                 RowBox[{
                  RowBox[{"0", " ", "and", " ", "det", " ", 
                   SubscriptBox["A", "12"]}], " ", "!=", "0"}]}]}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"when", "  ", 
                   SuperscriptBox["bM", "2"]}], "+", 
                  SuperscriptBox["bP", "2"]}], "==", "0"}], ",", " ", 
                RowBox[{
                 RowBox[{"then", " ", "kP2"}], "==", "kM2"}], ",", " ", 
                RowBox[{
                "we", " ", "still", " ", "test", " ", "both", " ", "for", " ",
                  "development", " ", "symmetry"}]}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Log[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+Log[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \
\(2\)]\)]&&(!zeroQ[\!\(\*SuperscriptBox[\(a0\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(a7\), \(2\)]\)])\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", " ", 
                    RowBox[{"1", "/", "2"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"a0", "^", "2"}], "+", 
                    RowBox[{"a7", "^", "2"}]}], "]"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}], "&&", 
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    SuperscriptBox["a0", "2"], "+", 
                    SuperscriptBox["a7", "2"]}], "]"}]}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Log[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+Log[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]&&(zeroQ[\!\(\*SuperscriptBox[\
\(a0\), \(2\)]\)+\!\(\*SuperscriptBox[\(a7\), \(2\)]\)])\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"logarithm", " ", 
                   RowBox[{"don", "'"}], "t", " ", 
                   RowBox[{"exists", "!"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["a0", "2"], "+", 
                   SuperscriptBox["a7", "2"]}], "]"}]}]}], 
               "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
            ",", "$Failed"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vbLog", "=", "\[IndentingNewLine]", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"the", " ", "det", " ", "A"}], " ", "=", 
               RowBox[{
                RowBox[{"0", " ", 
                 RowBox[{"case", ":", " ", 
                  RowBox[{"split", " ", "when", " ", "det", " ", 
                   SubscriptBox["A", "12"]}]}]}], " ", "=", 
                RowBox[{
                 RowBox[{"0", " ", "and", " ", "det", " ", 
                  SubscriptBox["A", "12"]}], " ", "!=", "0"}]}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"when", "  ", 
                  SuperscriptBox["bM", "2"]}], "+", 
                 SuperscriptBox["bP", "2"]}], "==", "0"}], ",", " ", 
               RowBox[{
                RowBox[{"then", " ", "kP2"}], "==", "kM2"}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<vbLog[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+vbLog[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<!zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]\>\""}], "}"}], "}"}]}], "]"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], ")"}]}], ")"}]}], " ", 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"Sqrt", "[", "kP2", "]"}], "]"}], "-", 
                    RowBox[{"log", "[", 
                    RowBox[{"Sqrt", "[", "kM2", "]"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"bP", " ", "-", " ", 
                    RowBox[{"bM", "\[GeometricProduct]", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"det", 
                  RowBox[{"(", 
                   SubscriptBox["A", "12"], ")"}]}], "=", "0"}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"a0", "^", "2"}], "+", 
                  RowBox[{"a7", "^", "2"}]}], "\[NotEqual]", "0"}]}], " ", 
               "*)"}], "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<vbLog[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+vbLog[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]\>\""}], "}"}], "}"}]}], "]"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{
                   "free", " ", "bivector", " ", "will", " ", "be", " ", 
                    "added", " ", "in", " ", "vbArctan", " ", "term"}], ",", 
                   " ", 
                   RowBox[{"no", " ", "dublication"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", "0"}], ",", "\[IndentingNewLine]", 
                RowBox[{"zeroQ", "[", 
                 RowBox[{
                  SuperscriptBox["bM", "2"], "+", 
                  SuperscriptBox["bP", "2"]}], "]"}]}], "\[IndentingNewLine]",
                "}"}]}], "\[IndentingNewLine]", "}"}], ",", "$Failed"}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"vbArctan", "=", "\[IndentingNewLine]", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "two", " ", "formulas", " ", "for", " ", "det", " ", "A_", "12",
                " ", "\\n", "eq", " ", "0"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<vbArctan[]\>\"", ",", 
                    "\"\<(!zeroQ[kP2])&&(!zeroQ[kM2])&&(!zeroQ[\!\(\*\
SuperscriptBox[\(bM\), \(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \
\(2\)]\)])\>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], ")"}], ")"}]}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "bM"}], "-", " ", 
                    RowBox[{"bP", "\[GeometricProduct]", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}]}], ")"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"(", 
                   RowBox[{"aV", "+", "aB"}], ")"}], "\[GeometricProduct]", 
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], "*", 
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "+", "a0"}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"bP", "-", "a0"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bM", "+", "a7"}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"bM", "-", "a7"}], ")"}]}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "-", "a0"}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"bM", "+", "a7"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "+", "a0"}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"bM", "-", "a7"}], ")"}]}]}]}], "]"}]}], ",", 
                    "2"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", "kP2", "]"}]}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", "kM2", "]"}]}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], "]"}]}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "Here", " ", "the", " ", "only", " ", "uncertanity", " ", 
                RowBox[{"Arctan", "[", 
                 RowBox[{"0", ",", "0"}], "]"}], " ", "happes", " ", "when", 
                " ", "kP2", " ", "or", " ", "kM2", " ", "is", " ", "zero", 
                " ", 
                RowBox[{"(", 
                 RowBox[{"no", " ", "other", " ", "possibilities"}], ")"}]}], 
               "*)"}], " ", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<vbArctan[]\>\"", ",", 
                    "\"\<(zeroQ[kP2]||zeroQ[kM2])&&(!zeroQ[\!\(\*\
SuperscriptBox[\(bM\), \(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \
\(2\)]\)])\>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], ")"}], ")"}]}], ")"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{
                    RowBox[{"Pi", "/", "2"}], ",", "2"}], "]"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "bM"}], "-", 
                    RowBox[{"bP", "\[GeometricProduct]", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"(", 
                   RowBox[{"aV", "+", "aB"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"zeroQ", "[", "kP2", "]"}], "||", 
                   RowBox[{"zeroQ", "[", "kM2", "]"}]}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], "]"}]}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"det", 
                  RowBox[{"(", 
                   SubscriptBox["A", "12"], ")"}]}], "=", 
                 RowBox[{
                  RowBox[{"0", ":", " ", 
                   RowBox[{
                    RowBox[{"when", " ", 
                    SuperscriptBox["bM", "2"]}], "+", 
                    SuperscriptBox["bP", "2"]}]}], "=", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"0", " ", "and", " ", 
                    RowBox[{"a0", "^", "2"}]}], "+", 
                    RowBox[{"a7", "^", "2"}]}], "=", "0"}]}]}], ",", " ", 
                RowBox[{
                 RowBox[{"then", " ", "inevitably", " ", "kP2"}], "=", 
                 RowBox[{"kM2", "=", 
                  RowBox[{
                   RowBox[{"0.", " ", 
                    RowBox[{"i", ".", "e", ".", " ", "DetA"}]}], "=", 
                   "0"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"when", " ", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   RowBox[{"a0", "^", "2"}], "+", 
                   RowBox[{"a7", "^", "2"}]}], "]"}]}], "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"True", " ", "and", " ", "aV"}], "+", "aB"}], 
                 "\[NotEqual]", 
                 RowBox[{
                 "0", " ", "the", " ", "free", " ", "MV", " ", "is", " ", 
                  "not", " ", "not", " ", "included", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    "a", " ", "piece", " ", "that", " ", "commutes", " ", 
                    "with", " ", "aV"}], "+", 
                    RowBox[{"aB", " ", "can", " ", "be", " ", "added"}]}], 
                   ")"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<vbArctan[]\>\"", ",", 
                    "\"\<(zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]&&!zeroQ[\!\(\*SuperscriptBox[\
\(a0\), \(2\)]\)+\!\(\*SuperscriptBox[\(a7\), \(2\)]\)])+conditional \
piecewise of zeroQ[a0^2+a7^2]\>\""}], "}"}], "}"}]}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Piecewise", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", "+", "aB"}], ")"}], "\[GeometricProduct]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", 
                    RowBox[{"a7", "*", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a0", "2"], "+", 
                    SuperscriptBox["a7", "2"]}], ")"}]}]}], ",", 
                    RowBox[{"Not", "[", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"gaComponentList", "[", 
                    RowBox[{"aV", "+", "aB"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}]}], ")"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"0", ",", "3"}], "]"}], "*", 
                    RowBox[{"freeB", "[", "3", "]"}]}], ",", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"gaComponentList", "[", 
                    RowBox[{"aV", "+", "aB"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}]}], 
                    ")"}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
                   "$Failed"}], "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], "]"}], ")"}], "&&", 
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    SuperscriptBox["a0", "2"], "+", 
                    SuperscriptBox["a7", "2"]}], "]"}]}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Log[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+Log[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]&&(zeroQ[\!\(\*SuperscriptBox[\
\(a0\), \(2\)]\)+\!\(\*SuperscriptBox[\(a7\), \(2\)]\)])\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"logarithm", " ", 
                   RowBox[{"don", "'"}], "t", " ", 
                   RowBox[{"exists", "!"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["a0", "2"], "+", 
                   SuperscriptBox["a7", "2"]}], "]"}]}]}], 
               "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
            ",", "$Failed"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{"when", " ", 
             SubscriptBox["k", "\[PlusMinus]"]}], "=", "0"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"the", " ", 
              SuperscriptBox["bM", "2"]}], "+", 
             SuperscriptBox["bP", "2"]}], "\[NotEqual]", 
            RowBox[{
             RowBox[{
             "0", " ", "condition", " ", "is", " ", "equivalent", " ", "to", 
              " ", 
              RowBox[{"a0", "^", "2"}]}], "+", 
             RowBox[{"a7", "^", "2"}]}], "\[NotEqual]", "0"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"conditions", " ", "when", " ", "we", " ", "have", " ", 
            RowBox[{"Arctan", "[", 
             RowBox[{"0", ",", "0"}], "]"}], " ", "are", " ", "involved"}], 
           ",", " ", 
           RowBox[{"use", " ", "strighforward", " ", "test"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"pseudoTerm", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(A\), \(I\)]\)\>\"", ",", 
                    "\"\<(!zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)])&&((!zeroQ[(bP+a0) \
\!\(\*SqrtBox[\(kM2\)]\) -(bP-a0) \
\!\(\*SqrtBox[\(kP2\)]\)])||(!zeroQ[\!\(\*SqrtBox[\(kM2\)]\) (bM+a7) -(bM-a7) \
\!\(\*SqrtBox[\(kP2\)]\)]))\>\""}], "}"}], "}"}]}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "+", "a0"}], ")"}], " ", 
                    SqrtBox["kM2"]}], " ", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "-", "a0"}], ")"}], " ", 
                    SqrtBox["kP2"]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SqrtBox["kM2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"bM", "+", "a7"}], ")"}]}], " ", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bM", "-", "a7"}], ")"}], " ", 
                    SqrtBox["kP2"]}]}]}], "]"}], ",", "1"}], "]"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], "]"}]}], ")"}], "&&", 
                 RowBox[{"Or", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "+", "a0"}], ")"}], " ", 
                    SqrtBox["kM2"]}], " ", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "-", "a0"}], ")"}], " ", 
                    SqrtBox["kP2"]}]}], "]"}]}], ")"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"!", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    SqrtBox["kM2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"bM", "+", "a7"}], ")"}]}], " ", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bM", "-", "a7"}], ")"}], " ", 
                    SqrtBox["kP2"]}]}], "]"}]}], ")"}]}], "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"conditions", "!"}], 
                 RowBox[{"zeroQ", "[", "kP2", "]"}]}], "&&", 
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", "kM2", "]"}]}], "&&", 
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}]}], "&&", 
                RowBox[{"zeroQ", "[", 
                 RowBox[{
                  RowBox[{"bM", "*", "a0"}], "-", 
                  RowBox[{"bP", "*", "a7"}]}], "]"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "are", " ", "NOT", " ", "equivalent", " ", "to", " ", 
                "requirement", " ", "that", " ", "both", " ", "of", " ", 
                "arguments", " ", "of", " ", "ArcTan", " ", "become", " ", 
                RowBox[{"zero", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(A\), \(I\)]\)\>\"", ",", 
                    "\"\<(!zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)])&&zeroQ[(bP+a0) \
\!\(\*SqrtBox[\(kM2\)]\) -(bP-a0) \
\!\(\*SqrtBox[\(kP2\)]\)]&&zeroQ[\!\(\*SqrtBox[\(kM2\)]\) (bM+a7) -(bM-a7) \!\
\(\*SqrtBox[\(kP2\)]\)]\>\""}], "}"}], "}"}]}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"-", "bM"}], ",", "bP"}], "]"}], ",", "1"}], 
                   "]"}], "\[GeometricProduct]", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], "]"}]}], ")"}], "&&", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "+", "a0"}], ")"}], " ", 
                    SqrtBox["kM2"]}], " ", "-", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bP", "-", "a0"}], ")"}], " ", 
                    SqrtBox["kP2"]}]}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   RowBox[{
                    SqrtBox["kM2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"bM", "+", "a7"}], ")"}]}], " ", "-", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"bM", "-", "a7"}], ")"}], " ", 
                    SqrtBox["kP2"]}]}], "]"}]}]}], "\[IndentingNewLine]", 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"bM", "*", "a0"}], "-", 
                    RowBox[{"bP", "*", "a7"}]}], "]"}], ")"}], "||", 
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"bM", "*", "a7"}], "+", 
                    RowBox[{"bP", "*", "a0"}]}], "]"}], ")"}], "||", 
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{"a0", "*", "a7"}], "-", 
                    RowBox[{"bP", "*", "bM"}]}], "]"}], ")"}]}], ")"}], 
               "*)"}], "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"the", " ", "det", " ", "A"}], " ", "=", 
                RowBox[{
                 RowBox[{"0", " ", 
                  RowBox[{"case", ":", " ", 
                   RowBox[{"split", " ", "when", " ", "det", " ", 
                    SubscriptBox["A", "12"]}]}]}], " ", "=", 
                 RowBox[{
                  RowBox[{"0", " ", "and", " ", "det", " ", 
                   SubscriptBox["A", "12"]}], " ", "!=", "0"}]}]}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"when", "  ", 
                   SuperscriptBox["bM", "2"]}], "+", 
                  SuperscriptBox["bP", "2"]}], "==", "0"}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"then", " ", "kP2"}], "==", "kM2"}], ";", " ", 
                 RowBox[{
                 "it", " ", "is", " ", "not", " ", "special", " ", 
                  "case"}]}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\!\(\*SubscriptBox[\(A\), \(I\)]\)\>\"", ",", 
                    "\"\<(zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)])&&(!zeroQ[a0^2+a7^2])\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"cleanEvenPiInPlus", "[", 
                   RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{"a0", ",", "a7"}], "]"}], ",", "2"}], "]"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    SuperscriptBox["bM", "2"], "+", 
                    SuperscriptBox["bP", "2"]}], "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"a0", "^", "2"}], "+", 
                    RowBox[{"a7", "^", "2"}]}], "]"}]}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Log[\!\(\*SuperscriptBox[\(k\), \
\(2\)]\)+]+Log[\!\(\*SuperscriptBox[\(k\), \(2\)]\)-]\>\"", ",", 
                    "\"\<zeroQ[\!\(\*SuperscriptBox[\(bM\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(bP\), \(2\)]\)]&&(zeroQ[\!\(\*SuperscriptBox[\
\(a0\), \(2\)]\)+\!\(\*SuperscriptBox[\(a7\), \(2\)]\)])\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"logarithm", " ", 
                   RowBox[{"don", "'"}], "t", " ", 
                   RowBox[{"exists", "!"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["bM", "2"], "+", 
                   SuperscriptBox["bP", "2"]}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   SuperscriptBox["a0", "2"], "+", 
                   SuperscriptBox["a7", "2"]}], "]"}]}]}], 
               "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
            ",", "$Failed"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<sLog=\>\"", ",", "sLog"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<vbLog=\>\"", ",", "vbLog"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<vbArctan=\>\"", ",", "vbArctan"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<pseudoTerm=\>\"", ",", "pseudoTerm"}], "}"}]}], 
            "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "answer", " ", "is", " ", "a", " ", "sum", " ", "of", " ", 
           "piecewise", " ", "parts"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"exists", "||", 
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                "sLog", "+", "vbLog", "+", "vbArctan", "+", "pseudoTerm"}], 
                ")"}], ",", "_Piecewise"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                 "sLog", "+", "vbLog", "+", "vbArctan", "+", "pseudoTerm"}], 
                 ")"}], "/.", 
                RowBox[{
                 RowBox[{"fc", "[", "_", "]"}], "\[RuleDelayed]", "0"}]}], 
               ")"}], "//.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"cleanEvenPiInPlus", "[", 
                 RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}], 
               "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"ClearAll", "[", "cleanEvenPiInPlus", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                "sLog", "+", "vbLog", "+", "vbArctan", "+", "pseudoTerm"}], 
                ")"}], "//.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"cleanEvenPiInPlus", "[", 
                  RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}], 
                "}"}]}]}]}], "\[IndentingNewLine]", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "2", ",", "0"}], "]"}]}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[663]:=",ExpressionUUID->"5dce2e8b-bcb0-4e3b-abfc-658c5a25f842"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,1) case ", "Item",ExpressionUUID->"cf635b82-ffc8-4d7b-b0f9-cdfc2c94cded"],

Cell["In Cl(2,1) logarithm don\[CloseCurlyQuote]t exist in many cases. ", \
"Text",ExpressionUUID->"c699fa05-0e72-4bb9-93e6-87467d0581f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"logOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "1", ",", "0"}], "]"}]}], ",", 
          RowBox[{"a0", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
          RowBox[{"aV", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
          RowBox[{"aB", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
          RowBox[{"aP", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "a7", ",", "pbPSquared",
           ",", "pbMSquared", ",", "detOfMV", ",", "cleanEvenPiInPlus", ",", 
          "scP", ",", "scM", ",", "vbP", ",", "vbM", ",", "psP", ",", "psM", 
          ",", "log", ",", 
          RowBox[{"exists", "=", "True"}], ",", "freeMV"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"a7", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{
            RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", 
            "aP"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"pbPSquared", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
                RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "-", 
             RowBox[{
              RowBox[{"2", 
               RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
              RowBox[{"aV", "\[OuterProduct]", "aB"}]}]}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"pbMSquared", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
                RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "+", 
             RowBox[{
              RowBox[{"2", 
               RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
              RowBox[{"aV", "\[OuterProduct]", "aB"}]}]}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"detOfMV", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"pbMSquared", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}]}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{"pbPSquared", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}]}], ")"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "the", " ", "logaritm", " ", "may", " ", "exist", " ", "only", " ",
             "when", " ", "Det"}], "\[GreaterEqual]", 
           RowBox[{"0", " ", "and", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
              "pbPSquared"}], ")"}]}], " ", "\[GreaterEqual]", 
           RowBox[{
            RowBox[{"0", " ", "and", " ", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}]}], "+", 
            "pbMSquared"}], " ", "\[GreaterEqual]", "0"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "if", " ", "either", " ", "of", " ", "the", " ", "conditions", " ", 
           "is", " ", "broken", " ", "log", " ", "do", " ", "not", " ", 
           "exist", " ", "and", " ", "we", " ", "output", " ", 
           RowBox[{"{", "}"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"mayExistQ", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"nonNegativeQ", "[", "detOfMV", "]"}], "&&", 
              RowBox[{"nonNegativeQ", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                "pbMSquared"}], "]"}], "&&", 
              RowBox[{"nonNegativeQ", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                "pbPSquared"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
              RowBox[{"when", " ", "pbMSquared"}], "<", 
              RowBox[{"0", " ", "or", " ", "pbPSquared"}], "<", "0"}], ",", 
             " ", 
             RowBox[{"additional", " ", "condition", " ", "apply"}]}], "*)"}],
            "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"negativeQ", "[", "pbMSquared", "]"}], ",", 
             RowBox[{"mayExistQ", "=", 
              RowBox[{"mayExistQ", "&&", 
               RowBox[{"nonNegativeQ", "[", 
                RowBox[{"a0", "-", "a7"}], "]"}]}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"negativeQ", "[", "pbPSquared", "]"}], ",", 
             RowBox[{"mayExistQ", "=", 
              RowBox[{"mayExistQ", "&&", 
               RowBox[{"nonNegativeQ", "[", 
                RowBox[{"a0", "+", "a7"}], "]"}]}]}]}], "]"}], ";"}], 
          "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<Det=\>\"", ",", "detOfMV"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<pbPSquared + (a0+a7)^2= \>\"", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                "pbPSquared"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<pbPSquared=-(v.v+B.B)-2*I\[GeometricProduct](aV\
\[OuterProduct]aB)= \>\"", ",", "pbPSquared"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<pbMSquared + (a0-a7)^2= \>\"", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                "pbMSquared"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<pbMSquared=-(v.v+B.B)+2*I\[GeometricProduct](aV\
\[OuterProduct]aB)= \>\"", ",", "pbMSquared"}], "}"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "when", " ", "we", " ", "want", " ", "to", " ", "add", " ", "free",
             " ", "constants"}], ",", " ", 
           RowBox[{"we", " ", "differently", " ", "define", " ", "function"}],
            ",", " ", 
           RowBox[{
           "which", " ", "handle", " ", "periodic", " ", "argument"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "___"}], "]"}], ":=", 
             RowBox[{
              RowBox[{"Plus", "[", 
               RowBox[{"x", ",", "y"}], "]"}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "k_Integer"}], "]"}], ":=", 
             RowBox[{
              RowBox[{
               RowBox[{"Plus", "[", 
                RowBox[{"x", ",", "y"}], "]"}], "+", 
               RowBox[{"2", "*", "Pi", "*", 
                RowBox[{"fc", "[", "k", "]"}]}]}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{"any_", ",", "n_Integer"}], "]"}], ":=", 
             RowBox[{"any", "+", 
              RowBox[{"2", "*", "Pi", "*", 
               RowBox[{"fc", "[", "n", "]"}]}]}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Contrary", " ", "to", " ", "Cl", 
            RowBox[{"(", 
             RowBox[{"0", ",", "3"}], ")"}], " ", "case"}], ",", " ", 
           RowBox[{
            RowBox[{"for", " ", "Cl", 
             RowBox[{"(", 
              RowBox[{"2", ",", "1"}], ")"}], " ", "we", " ", "can", " ", 
             "have", " ", "pbPSquared"}], "<", 
            RowBox[{"0", " ", 
             RowBox[{"and", "/", "or"}], " ", "pbMSquared"}], " ", "<", 
            RowBox[{"0", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "while", " ", "testing", " ", "we", " ", "include", " ", "all", 
            " ", "branches"}], ",", " ", 
           RowBox[{
           "even", " ", "those", " ", "for", " ", "which", " ", "solution", 
            " ", "is", " ", 
            RowBox[{"absent", ":", " ", 
             RowBox[{
             "will", " ", "delete", " ", "them", " ", "latter"}]}]}]}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"scP", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"Generic", " ", "cases"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared > 0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", " ", 
                   RowBox[{"1", "/", "2"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"positiveQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbPSquared"}], "]"}], "&&", 
                 RowBox[{"positiveQ", "[", "pbPSquared", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared < 0 && a0+a7 \
> 0\>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", " ", 
                   RowBox[{"1", "/", "2"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"positiveQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbPSquared"}], "]"}], "&&", 
                 RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
                 RowBox[{"positiveQ", "[", 
                  RowBox[{"a0", "+", "a7"}], "]"}]}]}], "\[IndentingNewLine]",
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared < 0 && a0+a7 \
< 0\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Nonexistence reason: \>\"", ",", " ", 
                    "\"\<pbPSquared < 0 && a0+a7 < 0\>\""}], "}"}]}], "}"}]}],
                   "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"negativeQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], ")"}], "||", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                   RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
                   RowBox[{"negativeQ", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}]}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"Special", " ", "cases"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared = 0 && pbPSquared < 0 && a0+a7 \
> 0\>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", " ", 
                    RowBox[{"1", "/", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}]}], "]"}], "+", 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}]}], "]"}]}], ")"}]}], 
                    ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbPSquared"}], "]"}], "&&", 
                 RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
                 RowBox[{"positiveQ", "[", 
                  RowBox[{"a0", "+", "a7"}], "]"}]}]}], "\[IndentingNewLine]",
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared = 0 && a0+a7 \
> 0\>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"if", " ", "mv", " ", "is", " ", "specific"}], ",",
                    " ", 
                   RowBox[{
                   "we", " ", "can", " ", "add", " ", "nonzero", " ", "free", 
                    " ", "MV"}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"freeMV", "=", 
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"0", ",", "3"}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "1"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "2"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "1"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "2"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "3"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
                    ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"freeMV", "=", "0"}]}], "\[IndentingNewLine]", 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Log", "[", 
                   RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "]"}], "+", 
                  "freeMV"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"positiveQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbPSquared"}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", "pbPSquared", "]"}], "&&", 
                 RowBox[{"positiveQ", "[", 
                  RowBox[{"a0", "+", "a7"}], "]"}]}]}], "\[IndentingNewLine]",
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                  "In", " ", "fact", " ", "sqrt", " ", "of", " ", "2"}], "-", 
                  
                  RowBox[{"3", 
                   RowBox[{"e", "[", "123", "]"}], " ", "exists"}]}], ",", 
                 " ", 
                 RowBox[{
                 "free", " ", "terms", " ", "probably", " ", "not", " ", "in",
                   " ", "most", " ", "general", " ", "form"}]}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared >0 && pbPSquared = 0 && a0+a7 < \
0 && aV==\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], "}"}]}], "]"}], ";",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "3"}], "]"}], "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "1"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "2"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "1"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "2"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"3", ",", "3"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
                    ")"}]}], ")"}]}], "+", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}]}]}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"nonNegativeQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbPSquared"}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", "pbPSquared", "]"}], "&&", 
                 RowBox[{"nonPositiveQ", "[", 
                  RowBox[{"a0", "+", "a7"}], "]"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}], "||", 
                   RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}],
               ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"don", "'"}], "t", " ", "exists"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared >0 && pbPSquared = 0 && a0+a7 < \
0 && aV\[NotEqual]\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"nonNegativeQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbPSquared"}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", "pbPSquared", "]"}], "&&", 
                 RowBox[{"nonPositiveQ", "[", 
                  RowBox[{"a0", "+", "a7"}], "]"}], "&&", 
                 RowBox[{"Not", "[", 
                  RowBox[{"And", "@@", 
                   RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}], "&&", 
                 RowBox[{"Not", "[", 
                  RowBox[{"And", "@@", 
                   RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
             "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"scM", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"Generic", " ", "cases"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared > 0 \>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"positiveQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbMSquared"}], "]"}], "&&", 
                 RowBox[{"positiveQ", "[", "pbMSquared", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared < 0 && a0-a7 \
> 0 \>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"positiveQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbMSquared"}], "]"}], "&&", 
                 RowBox[{"negativeQ", "[", "pbMSquared", "]"}], "&&", 
                 RowBox[{"positiveQ", "[", 
                  RowBox[{"a0", "-", "a7"}], "]"}]}]}], "\[IndentingNewLine]",
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared < 0 && a0-a7 \
< 0 \>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Nonexistence reason: \>\"", ",", " ", 
                    "\"\<pbMSquared < 0 && a0-a7 < 0\>\""}], "}"}]}], "}"}]}],
                   "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"logarithm", " ", 
                   RowBox[{"don", "'"}], "t", " ", "exist"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"negativeQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], ")"}], "||", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                   RowBox[{"negativeQ", "[", "pbMSquared", "]"}], "&&", 
                   RowBox[{"negativeQ", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}]}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"Special", " ", "cases"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared = 0 && pbMSquared < 0 && a0-a7 \
> 0 \>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", " ", 
                    RowBox[{"1", "/", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}]}], "]"}], "+", 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}]}], "]"}]}], ")"}]}], 
                    ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbMSquared"}], "]"}], "&&", 
                 RowBox[{"negativeQ", "[", "pbMSquared", "]"}], "&&", 
                 RowBox[{"positiveQ", "[", 
                  RowBox[{"a0", "-", "a7"}], "]"}]}]}], "\[IndentingNewLine]",
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared = 0 && a0-a7 \
> 0\>\""}], "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"freeMV", "=", 
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"0", ",", "4"}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "1"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "2"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "1"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "2"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "3"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
                    ")"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"freeMV", "=", "0"}]}], "\[IndentingNewLine]", 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Log", "[", 
                   RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "]"}], "+", 
                  "freeMV"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"positiveQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbMSquared"}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", "pbMSquared", "]"}], "&&", 
                 RowBox[{"positiveQ", "[", 
                  RowBox[{"a0", "-", "a7"}], "]"}]}]}], "\[IndentingNewLine]",
                "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared = 0 && a0-a7 \
< 0 && aV==\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], "}"}]}], "]"}], 
                 ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"logarithm", " ", 
                   RowBox[{"exists", "!"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "4"}], "]"}], "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "1"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "2"}], "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
                    ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "1"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "2"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"fc", "[", 
                    RowBox[{"4", ",", "3"}], "]"}], "*", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
                    ")"}]}], ")"}]}], "+", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}], ")"}]}]}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"nonNegativeQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbMSquared"}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", "pbMSquared", "]"}], "&&", 
                 RowBox[{"nonPositiveQ", "[", 
                  RowBox[{"a0", "-", "a7"}], "]"}], "&&", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}], "||", 
                   RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}],
               ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared = 0 && \
a0-a7<0 && aV\[NotEqual]\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"logarithm", " ", 
                   RowBox[{"don", "'"}], "t", " ", 
                   RowBox[{"exists", "!"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"exists", "=", "False"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"nonNegativeQ", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                   "pbMSquared"}], "]"}], "&&", 
                 RowBox[{"zeroQ", "[", "pbMSquared", "]"}], "&&", 
                 RowBox[{"nonPositiveQ", "[", 
                  RowBox[{"a0", "-", "a7"}], "]"}], "&&", 
                 RowBox[{"Not", "[", 
                  RowBox[{"And", "@@", 
                   RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}], "&&", 
                 RowBox[{"Not", "[", 
                  RowBox[{"And", "@@", 
                   RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
             "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"if", " ", "in", " ", "mayExistQ"}], "&&", 
           RowBox[{"positiveQ", "[", "detOfMV", "]"}], "&&", 
           RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
           RowBox[{
            RowBox[{"positiveQ", "[", 
             RowBox[{"a0", "+", "a7"}], "]"}], " ", "we", " ", "drop", " ", 
            "the", " ", 
            RowBox[{"positiveQ", "[", 
             RowBox[{"a0", "+", "a7"}], "]"}], " ", "condition"}]}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "then", " ", "after", " ", "exponentiation", " ", "we", " ", 
           "obtain", " ", "opposite", " ", 
           RowBox[{"sign", ".", " ", "Same"}], " ", "true", " ", "for", " ", 
           "vbM", " ", "branch"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"vbP", "=", 
          RowBox[{"(", 
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"Generic", " ", "cases"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared > 0\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"Together", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}], ",", 
                    RowBox[{"Together", "[", 
                    RowBox[{"Sqrt", "[", "pbPSquared", "]"}], "]"}]}], "]"}], 
                    ",", "1"}], "]"}], 
                    RowBox[{"Sqrt", "[", "pbPSquared", "]"}]], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"1", "+", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", "pbPSquared", "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared < 0 && a0+a7 > 0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    FractionBox[
                    RowBox[{"ArcTanh", "[", 
                    RowBox[{"Together", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}]}], "]"}], "]"}], 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}]], 
                    RowBox[{"(", 
                    RowBox[{"1", "+", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                  RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared < 0&& a0+a7 < 0\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Nonexistence reason: \>\"", ",", " ", 
                    "\"\<pbPSquared < 0 && a0+a7 < 0\>\""}], "}"}]}], "}"}]}],
                    "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"logarithm", " ", 
                    RowBox[{"don", "'"}], "t", " ", "exist"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"exists", "=", "False"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"negativeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], ")"}], "||", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                    RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
                    RowBox[{"negativeQ", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}]}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Special", " ", "cases"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<(a0+a7)^2+pbPSquared = 0 && pbPSquared < 0 && a0+a7 > 0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}]}], 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}]}], "]"}]}]}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbPSquared"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                  RowBox[{"negativeQ", "[", "pbPSquared", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared = 0 && a0+a7 > 0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared = 0 && a0+a7 \
< 0 && aV==\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], "}"}]}], "]"}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"logarithm", " ", 
                    RowBox[{"exists", "!"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"in", " ", "fact", " ", "vector"}], " ", "+", " ", 
                    RowBox[{
                    "bivector", " ", "term", " ", "was", " ", "added", " ", 
                    "in", " ", "scalar", " ", "parts", " ", 
                    RowBox[{"(", 
                    RowBox[{"due", " ", "to", " ", "compactness"}], ")"}]}]}],
                    " ", "*)"}], "\[IndentingNewLine]", "0"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}], "&&", 
                  RowBox[{"nonPositiveQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}],
                ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", 
                    "\"\<(a0+a7)^2+pbPSquared > 0 && pbPSquared = 0 && a0+a7 \
< 0 && aV\[NotEqual]\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], "}"}]}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"logarithm", " ", 
                    RowBox[{"don", "'"}], "t", " ", 
                    RowBox[{"exists", "!"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"exists", "=", "False"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}], "&&", 
                  RowBox[{"nonPositiveQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
              "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}], ")"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vbM", "=", 
          RowBox[{"(", 
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"Generic", " ", "cases"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared > 0\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    FractionBox[
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"Together", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}], ",", 
                    RowBox[{"Together", "[", 
                    RowBox[{"Sqrt", "[", "pbMSquared", "]"}], "]"}]}], "]"}], 
                    ",", "2"}], "]"}], 
                    RowBox[{"Sqrt", "[", "pbMSquared", "]"}]], 
                    RowBox[{"(", 
                    RowBox[{"1", "-", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                  RowBox[{"positiveQ", "[", "pbMSquared", "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared < 0 && a0-a7 > 0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    FractionBox[
                    RowBox[{"ArcTanh", "[", 
                    RowBox[{"Together", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}]}], "]"}], "]"}], 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}]], 
                    RowBox[{"(", 
                    RowBox[{"1", "-", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}]}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                  RowBox[{"negativeQ", "[", "pbMSquared", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared<0 && a0-a7<0\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Nonexistence reason: \>\"", ",", " ", 
                    "\"\<pbMSquared<0 && a0-a7<0\>\""}], "}"}]}], "}"}]}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"logarithm", " ", 
                    RowBox[{"don", "'"}], "t", " ", "exist"}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"exists", "=", "False"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"negativeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], ")"}], "||", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                    RowBox[{"negativeQ", "[", "pbMSquared", "]"}], "&&", 
                    RowBox[{"negativeQ", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}]}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Special", " ", "cases"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<(a0-a7)^2+pbMSquared = 0 && pbMSquared < 0 && a0-a7 > 0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}]}], 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"log", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}]}], "]"}]}]}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "pbMSquared"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"log", "[", 
                    RowBox[{"x_", "?", "NumericQ"}], "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"Log", "[", "0", "]"}], "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], "]"}]}], 
                    "}"}]}], ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"log", "\[Rule]", "Log"}], "}"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"zeroQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                  RowBox[{"negativeQ", "[", "pbMSquared", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared = 0 && a0-a7 > 0\>\""}],
                     "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}]}], ")"}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"1", "-", " ", 
                    RowBox[{"gaI", "[", "theAlg", "]"}]}], ")"}], 
                   "\[GeometricProduct]", 
                   RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"positiveQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}], "&&", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared = 0 && \
a0-a7<0 && aV==\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], "}"}]}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"logarithm", " ", 
                    RowBox[{"exists", "!"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"in", " ", "fact", " ", "vector"}], " ", "+", " ", 
                    RowBox[{
                    "bivector", " ", "term", " ", "was", " ", "added", " ", 
                    "in", " ", "scalar", " ", "parts", " ", 
                    RowBox[{"(", 
                    RowBox[{"due", " ", "to", " ", "compactness"}], ")"}]}]}],
                    " ", "*)"}], "\[IndentingNewLine]", "0"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}], "&&", 
                  RowBox[{"nonPositiveQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}],
                ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", 
                    "\"\<(a0-a7)^2+pbMSquared > 0 && pbMSquared = 0 && \
a0-a7<0 && aV\[NotEqual]\[PlusMinus]Reverse[aB]*{1,-1,-1}\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"logarithm", " ", 
                    RowBox[{"don", "'"}], "t", " ", 
                    RowBox[{"exists", "!"}]}], " ", "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"exists", "=", "False"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"nonNegativeQ", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], "&&", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}], "&&", 
                  RowBox[{"nonPositiveQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "-", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
              "\[IndentingNewLine]", "}"}], ",", "$Failed"}], "]"}], ")"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<\!\(\*SubscriptBox[\(s\), \(-\)]\) =\>\"", ",", "scM"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\!\(\*SubscriptBox[\(s\), \(+\)]\)=\>\"", ",", "scP"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<(v+B\!\(\*SubscriptBox[\()\), \(+\)]\)=\>\"", ",", "vbP"}],
               "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<(v+B\!\(\*SubscriptBox[\()\), \(-\)]\)=\>\"", ",", "vbM"}],
               "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"psP", "=", 
          RowBox[{"scP", "\[GeometricProduct]", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"psM", "=", 
          RowBox[{
           RowBox[{"-", "scM"}], "\[GeometricProduct]", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "answer", " ", "is", " ", "a", " ", "sum", " ", "of", " ", 
           "piecewise", " ", "parts"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"exists", "||", 
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                "scP", "+", "scM", "+", "vbP", "+", "vbM", "+", "psP", "+", 
                 "psM"}], ")"}], ",", "_Piecewise"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], "*", 
             RowBox[{"(", 
              RowBox[{
              "scP", "+", "scM", "+", "vbP", "+", "vbM", "+", "psP", "+", 
               "psM"}], ")"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ClearAll", "[", "cleanEvenPiInPlus", "]"}], ";", 
              RowBox[{
               RowBox[{"cleanEvenPiInPlus", "[", 
                RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}]}], 
             "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[664]:=",ExpressionUUID->"6313a33a-f864-4289-821c-f06efcd4b0be"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,3) case", "Item",ExpressionUUID->"97ab2961-5209-43cd-8484-1135962a33d8"],

Cell["\<\
In Coordinate free form free MV, which can be added to logarithm is provided \
by cleanEvenPiInPlus function.  There are two discrete integer constants.\
\>", "Text",ExpressionUUID->"9e2d4190-7cae-475a-98c9-fd9373b21d9c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"logOfMV", "[", 
      RowBox[{
      "expr_", ",", "\"\<CoordinateFree\>\"", ",", "\"\<LowDimension\>\"", 
       ",", 
       RowBox[{"{", 
        RowBox[{"fc_", ",", "includeFree_", ",", "quiet_"}], "}"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "3", ",", "0"}], "]"}]}], ",", 
          RowBox[{"a0", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}]}], ",", 
          RowBox[{"aV", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
          RowBox[{"aB", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
          RowBox[{"aP", "=", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "a7", ",", "pbPSquared",
           ",", "pbMSquared", ",", "cleanEvenPiInPlus", ",", "scP", ",", 
          "scM", ",", "vbP", ",", "vbM", ",", "psP", ",", "psM", ",", 
          "freeMV"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"a7", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{
            RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", 
            "aP"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"pbPSquared", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
                RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "-", 
             RowBox[{
              RowBox[{"2", 
               RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
              RowBox[{"aV", "\[OuterProduct]", "aB"}]}]}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"pbMSquared", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"aV", "\[InnerProduct]", "aV"}], "+", 
                RowBox[{"aB", "\[InnerProduct]", "aB"}]}], ")"}]}], "+", 
             RowBox[{
              RowBox[{"2", 
               RowBox[{"gaI", "[", "theAlg", "]"}]}], "\[GeometricProduct]", 
              RowBox[{"aV", "\[OuterProduct]", "aB"}]}]}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<pbPSquared=-(v.v+B.B)-2*I\[GeometricProduct](aV\
\[OuterProduct]aB)= \>\"", ",", "pbPSquared"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<pbMSquared=-(v.v+B.B)+2*I\[GeometricProduct](aV\
\[OuterProduct]aB)= \>\"", ",", "pbMSquared"}], "}"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "when", " ", "we", " ", "want", " ", "to", " ", "add", " ", "free",
             " ", "constants"}], ",", " ", 
           RowBox[{"we", " ", "differently", " ", "define", " ", "function"}],
            ",", " ", 
           RowBox[{
           "which", " ", "handle", " ", "periodic", " ", "argument"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "includeFree"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "___"}], "]"}], ":=", 
             RowBox[{
              RowBox[{"Plus", "[", 
               RowBox[{"x", ",", "y"}], "]"}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Plus", "[", 
                 RowBox[{"x___", ",", 
                  RowBox[{"n_", "*", "Pi"}], ",", "y___"}], "]"}], "]"}], ",",
                "k_Integer"}], "]"}], ":=", 
             RowBox[{
              RowBox[{
               RowBox[{"Plus", "[", 
                RowBox[{"x", ",", "y"}], "]"}], "+", 
               RowBox[{"2", "*", "Pi", "*", 
                RowBox[{"fc", "[", "k", "]"}]}]}], "/;", 
              RowBox[{"EvenQ", "[", "n", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{"any_", ",", "n_Integer"}], "]"}], ":=", 
             RowBox[{"any", "+", 
              RowBox[{"2", "*", "Pi", "*", 
               RowBox[{"fc", "[", "n", "]"}]}]}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeMV", "[", "n_Integer", "]"}], ":=", 
          "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", 
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"fc", "[", 
                  RowBox[{"n", ",", "1"}], "]"}], "^", "2"}], "+", 
                RowBox[{
                 RowBox[{"fc", "[", 
                  RowBox[{"n", ",", "2"}], "]"}], "^", "2"}], "+", 
                RowBox[{
                 RowBox[{"fc", "[", 
                  RowBox[{"n", ",", "3"}], "]"}], "^", "2"}]}], "]"}]}], 
             ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "1"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "2"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"fc", "[", 
                RowBox[{"n", ",", "3"}], "]"}], "*", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
             ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "not", " ", "quite", " ", "clear", " ", "if", " ", "the", " ", 
           "conditions", " ", "below", " ", "are", " ", "needed", " ", "in", 
           " ", "order", " ", "to", " ", "ensure", " ", "commutativity", " ", 
           "in", " ", "\"\<pbMSquared=0 && a0-a7=0\>\"", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"and", " ", "pbP"}], "..."}], ")"}], " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "/@", 
                RowBox[{"Expand", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                   "-", 
                   RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}]}],
              ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"And", "@@", 
              RowBox[{"(", 
               RowBox[{"zeroQ", "/@", 
                RowBox[{"Expand", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], "*", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "aB", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"5", ";;", "7"}], "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}], 
                   "+", 
                   RowBox[{
                    RowBox[{"gaComponentList", "[", "aV", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ";;", "4"}], "]"}], "]"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], ")"}]}],
              ")"}]}], ")"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"scP", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<pbPSquared\[NotEqual]0 && aSqrtM\[NotEqual]0\>\""}], 
                    "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", " ", 
                   RowBox[{"1", "/", "2"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbPSquared"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}]}], ")"}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<pbPSquared=0 && a0+a7>0\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", " ", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Log", "[", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "]"}], ")"}], ","}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"0", ",", "3"}], "]"}], "*", 
                   RowBox[{"freeMV", "[", "3", "]"}]}], "+", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<pbPSquared=0 && a0+a7<0\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"here", " ", "instead", " ", 
                    RowBox[{"e", "[", "1", "]"}], " ", "we", " ", "can", " ", 
                    "chose", " ", "any", " ", "MV", " ", "with", " ", 
                    "square"}], " ", "-", 
                    RowBox[{"1", " ", "?"}]}], ",", " ", 
                   RowBox[{"commutation", " ", "important"}], ",", " ", 
                   RowBox[{"restriction", " ", "or", " ", 
                    RowBox[{"freedom", "?"}]}]}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "1"}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{"Log", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}]}], "]"}]}], ","}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "3"}], "]"}], "*", 
                   RowBox[{"freeMV", "[", "3", "]"}]}], "+", 
                  RowBox[{"Log", "[", 
                   RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}]}], "]"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"negativeQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s+: \>\"", ",", 
                    "\"\<pbPSquared=0 && a0+a7=0\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Hold", "[", 
                   RowBox[{"Log", "[", "0", "]"}], "]"}], "+", 
                  RowBox[{"freeMV", "[", "3", "]"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", "pbPSquared", "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{"a0", "+", "a7"}], "]"}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
            ",", "$Failed"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"scM", "=", 
          RowBox[{"Piecewise", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<pbMSquared\[NotEqual]0\>\""}], "}"}], "}"}]}], "]"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", " ", 
                   RowBox[{"1", "/", "2"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "^", "2"}], "+", 
                    "pbMSquared"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}]}], ")"}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<pbMSquared=0 && a0-a7>0\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", " ", 
                 RowBox[{"(*", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "]"}], ")"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"0", ",", "4"}], "]"}], "*", 
                   RowBox[{"freeMV", "[", "4", "]"}]}], "+", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"positiveQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<pbMSquared=0 && a0-a7<0\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"here", " ", "instead", " ", 
                    RowBox[{"e", "[", "1", "]"}], " ", "we", " ", "can", " ", 
                    "chose", " ", "any", " ", "MV", " ", "with", " ", 
                    "square"}], " ", "-", "1"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "2"}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlg"}], "]"}]}], 
                    "+", 
                    RowBox[{"(", 
                    RowBox[{"Log", "[", 
                    RowBox[{"(", 
                    RowBox[{"a7", "-", "a0"}], ")"}], "]"}], ")"}]}], ","}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "4"}], "]"}], "*", 
                   RowBox[{"freeMV", "[", "4", "]"}]}], "+", 
                  RowBox[{"(", 
                   RowBox[{"Log", "[", 
                    RowBox[{"(", 
                    RowBox[{"a7", "-", "a0"}], ")"}], "]"}], ")"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"negativeQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise s_: \>\"", ",", 
                    "\"\<pbMSquared=0 && a0-a7=0\>\""}], "}"}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"gerai", ",", " ", 
                   RowBox[{
                    RowBox[{
                    "bet", " ", "dar", " ", "atskirai", " ", "reik", " ", 
                    "tikrint", " ", "a0"}], "<", "0"}], ",", " ", 
                   RowBox[{"a0", "=", "0"}], ",", 
                   RowBox[{"a7", ">", "<", 
                    RowBox[{"0", " ", "ir", " ", "pan", " ", "atrodo"}]}], 
                   ",", " ", 
                   RowBox[{
                    RowBox[{"tikrai", " ", "cia"}], " ", "-", 
                    RowBox[{"begalybe", " ", "turi", " ", "but"}]}], ",", " ", 
                   RowBox[{"norint", " ", "gaut", " ", "atsakyma"}]}], " ", 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Hold", "[", 
                   RowBox[{"Log", "[", "0", "]"}], "]"}], "+", 
                  RowBox[{"freeMV", "[", "4", "]"}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", "pbMSquared", "]"}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{"a0", "-", "a7"}], "]"}], ")"}]}]}], 
               "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
            ",", "$Failed"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vbP", "=", 
          RowBox[{"(", 
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<pbPSquared\[NotEqual]0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"Together", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}], ",", 
                    RowBox[{"Together", "[", 
                    RowBox[{"Sqrt", "[", "pbPSquared", "]"}], "]"}]}], "]"}], 
                    ",", "1"}], "]"}], 
                    RowBox[{"Sqrt", "[", "pbPSquared", "]"}]], 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}], "+", " ", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ")"}]}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", "pbPSquared", "]"}]}], ")"}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<pbPSquared=0 && a0+a7>0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"a0", "+", "a7"}], ")"}]}], ",", "1"}], "]"}], 
                   "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}], "+", " ", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ")"}]}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "pbPSquared", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"positiveQ", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<pbPSquared=0 && a0+a7<0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "1"}], "]"}], "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}], "+", " ", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ")"}]}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "pbPSquared", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"negativeQ", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(+\)]\): \>\
\"", ",", "\"\<pbPSquared=0 && a0+a7=0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", "0"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "pbPSquared", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{"a0", "+", "a7"}], "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
             ",", "$Failed"}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vbM", "=", 
          RowBox[{"(", 
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<pbMSquared\[NotEqual]0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"ArcTan", "[", 
                    RowBox[{
                    RowBox[{"Together", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}], ",", 
                    RowBox[{"Together", "[", 
                    RowBox[{"Sqrt", "[", "pbMSquared", "]"}], "]"}]}], "]"}], 
                    ",", "2"}], "]"}], 
                    RowBox[{"Sqrt", "[", "pbMSquared", "]"}]], 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}], "-", " ", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ")"}]}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{"!", 
                   RowBox[{"zeroQ", "[", "pbMSquared", "]"}]}], ")"}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<pbMSquared=0 && a0-a7>0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"a0", "-", "a7"}], ")"}]}], ",", "2"}], "]"}], 
                   "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}], "-", " ", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ")"}]}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "pbMSquared", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"positiveQ", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<pbMSquared=0 && a0-a7<0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"cleanEvenPiInPlus", "[", 
                    RowBox[{"Pi", ",", "2"}], "]"}], "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}], "-", " ", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{"aV", " ", "+", "aB"}], ")"}]}]}], ")"}]}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "pbMSquared", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"negativeQ", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"printDetails", "[", 
                   RowBox[{"quiet", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Piecewise (v+B\!\(\*SubscriptBox[\()\), \(-\)]\): \>\
\"", ",", "\"\<pbMSquared=0 && a0-a7=0\>\""}], "}"}], "}"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", "0"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", "pbMSquared", "]"}], ")"}], "&&", 
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "[", 
                    RowBox[{"a0", "-", "a7"}], "]"}], ")"}]}]}], 
                "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}], 
             ",", "$Failed"}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<\!\(\*SubscriptBox[\(s\), \(-\)]\) =\>\"", ",", "scM"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\!\(\*SubscriptBox[\(s\), \(+\)]\)=\>\"", ",", "scP"}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<(v+B\!\(\*SubscriptBox[\()\), \(+\)]\)=\>\"", ",", "vbP"}],
               "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<(v+B\!\(\*SubscriptBox[\()\), \(-\)]\)=\>\"", ",", "vbM"}],
               "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"psP", "=", 
          RowBox[{"scP", "\[GeometricProduct]", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"psM", "=", 
          RowBox[{
           RowBox[{"-", "scM"}], "\[GeometricProduct]", 
           RowBox[{"gaI", "[", "theAlg", "]"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "answer", " ", "is", " ", "a", " ", "sum", " ", "of", " ", 
           "piecewise", " ", "parts"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "2"}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{
            "scP", "+", "scM", "+", "vbP", "+", "vbM", "+", "psP", "+", 
             "psM"}], ")"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ClearAll", "[", "cleanEvenPiInPlus", "]"}], ";", 
            RowBox[{
             RowBox[{"cleanEvenPiInPlus", "[", 
              RowBox[{"x_", ",", "_"}], "]"}], "\[RuleDelayed]", "x"}]}], 
           "}"}]}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[665]:=",ExpressionUUID->"c1758dd0-3917-4594-b9d4-d7de6dffc688"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Other trigonometric/hyperbolic functions (and their inverses) of MV"
}], "Subsubsection",ExpressionUUID->"1aa47735-205c-4213-9b50-5c49cb3b22e4"],

Cell["\<\
Here we provide  exact trigonometric/hypergeometric functions and their \
inverses, which can be expressed in terms of exponential, logarithm and \
square root functions defined above.\
\>", "Text",ExpressionUUID->"4ec7fec8-157e-478a-aa45-e980b658cb8a"],

Cell[CellGroupData[{

Cell[TextData[{
 "Help functions",
 StyleBox[" ",
  FontColor->RGBColor[1, 0, 0]]
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"027b3048-c1e8-4969-bafa-778bbb8be97d"],

Cell[TextData[{
 "First general code and options. Options of all these functions are supplied \
by  ",
 StyleBox["gaLogOfMV[]",
  FontWeight->"Bold"],
 ", ",
 StyleBox["gaExpOfMV[]",
  FontWeight->"Bold"],
 ", ",
 StyleBox["gaInverse[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaSqrtOfMV[ ]",
  FontWeight->"Bold"],
 " (depending on which of these functions are used in the function \
definition). The option handling is performed outside of the function \
itself."
}], "Text",ExpressionUUID->"7627b75d-a77f-497b-8f53-b6ac03ecce12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaArcCoshOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PrincipalValue", "\[Rule]", "True"}], ",", 
     RowBox[{"Simplify", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaArcSinhOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PrincipalValue", "\[Rule]", "True"}], ",", 
     RowBox[{"Simplify", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaArcSinOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PrincipalValue", "\[Rule]", "True"}], ",", 
     RowBox[{"Simplify", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaArcCosOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PrincipalValue", "\[Rule]", "True"}], ",", 
     RowBox[{"Simplify", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaArcCoshOfMV", "::", "sqrt"}], "=", 
   "\"\<Sqrt of `1`-1 and `1`+1 yields different number of roots or square \
root set is empty. Don't know how to make corresponding pairs. Try option \
PrincipalValue\[Rule]True to attempt to find at least one value of the \
function. Manual investigation required.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testTrigonometric", "::", "notpossible"}], "=", 
    "\"\<Trigonometric and inverse trigonometric functions in real GA can be \
defined only when pseudoscalar is commutative an squares to minus one. The \
algebra `1` do not have this property. You know what you are doing.\>\""}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptiongaArcCoshOfMV", "[", "\"\<PrincipalValue\>\"", "]"}], 
   "=", 
   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptiongaArcCoshOfMV", "[", "\"\<Simplify\>\"", "]"}], "=", 
    RowBox[{
    "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
     "\"\<any transformation (i.e with head Function[]) of \
expression\>\""}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptiongaArcCoshOfMV", "[", 
    RowBox[{"\"\<PrincipalValue\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptiongaArcCoshOfMV", "[", 
     RowBox[{"\"\<Simplify\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{
      "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
       "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "other", " ", "similar", " ", "functions", " ", "have", " ", "the", " ", 
     "same", " ", "options"}], ",", " ", 
    RowBox[{
    "so", " ", "we", " ", "can", " ", "use", " ", "the", " ", "same", " ", 
     "test", " ", "function"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testOptiongaArcSinhOfMV", "=", "testOptiongaArcCoshOfMV"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testOptiongaArcSinOfMV", "=", "testOptiongaArcCoshOfMV"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testOptiongaArcCosOfMV", "=", "testOptiongaArcCoshOfMV"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[666]:=",ExpressionUUID->"8b0f30ac-7308-46ab-afd0-3417f16ca904"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"testTrigonometric", "[", "alg_Cl", "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"involutionInverse", "[", 
              RowBox[{
               RowBox[{"gaI", "[", "alg", "]"}], ",", "3", ",", "Expand", ",", 
               RowBox[{"10.", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "10"}], ")"}]}]}], "]"}], "\[GeometricProduct]", 
             RowBox[{"involutionInverse", "[", 
              RowBox[{
               RowBox[{"gaI", "[", "alg", "]"}], ",", "3", ",", "Expand", ",", 
               RowBox[{"10.", "^", 
                RowBox[{"(", 
                 RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], "]"}], "=!=", 
           RowBox[{"-", "1"}]}], ")"}], "||", "\[IndentingNewLine]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaI", "[", "alg", "]"}], "\[GeometricProduct]", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}]}], "-", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaI", "[", "alg", "]"}]}]}], "]"}], "=!=", "0"}], 
          ")"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"testTrigonometric", "::", "notpossible"}], ",", "alg"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[679]:=",ExpressionUUID->"59f6bd81-6ceb-47ef-b2af-930c13e26ebf"]
}, Closed]],

Cell[CellGroupData[{

Cell["Trigonometric and hyperbolic functions", "Item",ExpressionUUID->"592b0731-4eec-4cfa-84cc-13a437aabd99"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"hyperbolic", " ", "functions"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaTanhOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"exp", ",", "expinv"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"exp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{"z", ",", "opts"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expinv", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"-", "z"}], ",", "opts"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "cgaInverse", " ", "is", " ", "defined", " ", "after", " ", "this", 
           " ", "function", " ", "and", " ", 
           RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", "include", 
           " ", "it", " ", "in", " ", "forward", " ", "list"}], ",", " ", 
          RowBox[{
          "therefore", " ", "use", " ", "local", " ", "internal", " ", 
           "definition", " ", "of", " ", "it"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{
           RowBox[{"exp", "-", "expinv"}], ",", 
           RowBox[{"involutionInverse", "[", 
            RowBox[{
             RowBox[{"exp", "+", "expinv"}], ",", "3", ",", "Expand", ",", 
             RowBox[{"10.", "^", 
              RowBox[{"(", 
               RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], "]"}], ")"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaCothOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"exp", ",", "expinv"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"exp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{"z", ",", "opts"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expinv", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"-", "z"}], ",", "opts"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"exp", "+", "expinv"}], ",", 
          RowBox[{"involutionInverse", "[", 
           RowBox[{
            RowBox[{"exp", "-", "expinv"}], ",", "3", ",", "Expand", ",", 
            RowBox[{"10.", "^", 
             RowBox[{"(", 
              RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaCoshOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "2"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaExpOfMV", "[", 
         RowBox[{"z", ",", "opts"}], "]"}], "+", 
        RowBox[{"gaExpOfMV", "[", 
         RowBox[{
          RowBox[{"-", "z"}], ",", "opts"}], "]"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaSinhOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "2"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaExpOfMV", "[", 
         RowBox[{"z", ",", "opts"}], "]"}], "-", 
        RowBox[{"gaExpOfMV", "[", 
         RowBox[{
          RowBox[{"-", "z"}], ",", "opts"}], "]"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"trigonometric", " ", "functions"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaTanOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"exp", ",", "expinv", ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"gaGetAlgebra", "[", "z", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"exp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                "\[GeometricProduct]", "z"}], "]"}], "]"}], ",", "opts"}], 
            "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"expinv", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                 "\[GeometricProduct]", "z"}], "]"}], "]"}]}], ",", "opts"}], 
            "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "cgaInverse", " ", "is", " ", "defined", " ", "after", " ", "this", 
           " ", "function", " ", "and", " ", 
           RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", "include", 
           " ", "it", " ", "in", " ", "forward", " ", "list"}], ",", " ", 
          RowBox[{
          "therefore", " ", "use", " ", "local", " ", "internal", " ", 
           "definition", " ", "of", " ", "it"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"gaI", "[", "theAlgebra", "]"}]}], ",", 
           RowBox[{"exp", "-", "expinv"}], ",", 
           RowBox[{"involutionInverse", "[", 
            RowBox[{
             RowBox[{"exp", "+", "expinv"}], ",", "3", ",", "Expand", ",", 
             RowBox[{"10.", "^", 
              RowBox[{"(", 
               RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], "]"}], ")"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaCotOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"exp", ",", "expinv", ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"gaGetAlgebra", "[", "z", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"exp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                "\[GeometricProduct]", "z"}], "]"}], "]"}], ",", "opts"}], 
            "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"expinv", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                 "\[GeometricProduct]", "z"}], "]"}], "]"}]}], ",", "opts"}], 
            "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "cgaInverse", " ", "is", " ", "defined", " ", "after", " ", "this", 
           " ", "function", " ", "and", " ", 
           RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", "include", 
           " ", "it", " ", "in", " ", "forward", " ", "list"}], ",", " ", 
          RowBox[{
          "therefore", " ", "use", " ", "local", " ", "internal", " ", 
           "definition", " ", "of", " ", "it"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{
           RowBox[{"gaI", "[", "theAlgebra", "]"}], ",", 
           RowBox[{"exp", "+", "expinv"}], ",", 
           RowBox[{"involutionInverse", "[", 
            RowBox[{
             RowBox[{"exp", "-", "expinv"}], ",", "3", ",", "Expand", ",", 
             RowBox[{"10.", "^", 
              RowBox[{"(", 
               RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], "]"}], ")"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaSinOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theAlgebra", "=", 
         RowBox[{"gaGetAlgebra", "[", "z", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "2"}], ")"}], "\[GeometricProduct]", 
         RowBox[{"involutionInverse", "[", 
          RowBox[{
           RowBox[{"gaI", "[", "theAlgebra", "]"}], ",", "3", ",", "Expand", 
           ",", 
           RowBox[{"10.", "^", 
            RowBox[{"(", 
             RowBox[{"-", "10"}], ")"}]}]}], "]"}], "\[GeometricProduct]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{
               RowBox[{"gaI", "[", "theAlgebra", "]"}], "\[GeometricProduct]",
                "z"}], "]"}], ",", "opts"}], "]"}], "-", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                "\[GeometricProduct]", "z"}], "]"}]}], ",", "opts"}], "]"}]}],
           ")"}]}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaCosOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaExpOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theAlgebra", "=", 
         RowBox[{"gaGetAlgebra", "[", "z", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "2"}], ")"}], "\[GeometricProduct]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{
               RowBox[{"gaI", "[", "theAlgebra", "]"}], "\[GeometricProduct]",
                "z"}], "]"}], ",", "opts"}], "]"}], "+", 
           RowBox[{"gaExpOfMV", "[", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                "\[GeometricProduct]", "z"}], "]"}]}], ",", "opts"}], "]"}]}],
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[680]:=",ExpressionUUID->"998d7cda-cb64-4246-bdd8-c174d01f66f9"]
}, Closed]],

Cell[CellGroupData[{

Cell["Inverse trigonometric and hyperbolic functions", "Item",ExpressionUUID->"628eef7b-aded-4520-b54e-f0cc85c710d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"hyperbolic", " ", "functions"}], " ", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaArcTanhOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaLogOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "2"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaLogOfMV", "[", 
         RowBox[{
          RowBox[{"1", "+", "z"}], ",", "opts"}], "]"}], "-", 
        RowBox[{"gaLogOfMV", "[", 
         RowBox[{
          RowBox[{"1", "-", "z"}], ",", "opts"}], "]"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaArcCothOfMV", "[", 
         RowBox[{"z_", ",", 
          RowBox[{"opts", ":", 
           RowBox[{"OptionsPattern", "[", 
            RowBox[{"{", "gaLogOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"invz", ",", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", "z", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Piecewise", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"invz", "=", 
                 RowBox[{"involutionInverse", "[", 
                  RowBox[{"z", ",", "3", ",", "Expand", ",", 
                   RowBox[{"10.", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Inverse is \>\"", ",", "invz"}], "}"}], 
                   "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "2"}], ")"}], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"1", "+", "invz"}], ",", "opts"}], "]"}], "-", 
                   RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"1", "-", "invz"}], ",", "opts"}], "]"}]}], 
                  ")"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"zeroQ", "[", 
                  RowBox[{"gaGetMV", "[", 
                   RowBox[{"z", ",", 
                    RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], "||", 
                RowBox[{"!", 
                 RowBox[{"(", 
                  RowBox[{"And", "@@", 
                   RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Most", "[", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "z", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{"quiet", ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<MV is zero \>\"", ",", "z"}], "}"}], "}"}]}],
                  "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Pi", "/", "2"}], ")"}], 
                 RowBox[{"gaI", "[", "theAlgebra", "]"}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"zeroQ", "[", 
                 RowBox[{"gaGetMV", "[", 
                  RowBox[{"z", ",", 
                   RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "&&", 
                RowBox[{"(", 
                 RowBox[{"And", "@@", 
                  RowBox[{"(", 
                   RowBox[{"zeroQ", "/@", 
                    RowBox[{"Most", "[", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "z", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                   ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaArcSinhOfMV", "[", 
         RowBox[{"z_", ",", 
          RowBox[{"opts", ":", 
           RowBox[{"OptionsPattern", "[", 
            RowBox[{"{", 
             RowBox[{
             "gaLogOfMV", ",", "gaExpOfMV", ",", "gaSqrtOfMV", ",", 
              "gaArcSinhOfMV"}], "}"}], "]"}]}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"theOption", ",", 
            RowBox[{"optArcSinhOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaArcSinhOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optSqrtOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optExpOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaExpOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optLogOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaLogOfMV", "]"}]}], "]"}]}], ",", 
            "s2"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaSetNamedOptionValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"gaArcSinhOfMV", ",", "#", ",", "theOption"}], "}"}], 
               ",", 
               RowBox[{
                RowBox[{
                "gaOptionCheck", "[", "testOptiongaArcSinhOfMV", "]"}], "[", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                   "}"}]}], ")"}], "]"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
              "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Flatten", "[", 
              RowBox[{"First", "/@", 
               RowBox[{"{", 
                RowBox[{"Sequence", "@@", "optArcSinhOfMV"}], "}"}]}], "]"}], 
             ")"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], 
               "]"}], "===", "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], "=", 
              
              RowBox[{"(", 
               RowBox[{"PrincipalValue", "/.", 
                RowBox[{"Options", "[", "gaArcSinhOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"Simplify", "/.", 
                RowBox[{"Options", "[", "gaArcSinhOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], ",", "True",
              ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Simplify"}], ",", "False", ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Identity"}], ",", "_", ",", 
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"single", " ", "value"}], ",", " ", 
               RowBox[{"no", " ", "full", " ", "sqrt"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"gaLogOfMV", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Collect", "[", 
                RowBox[{
                 RowBox[{"z", "+", 
                  RowBox[{"Expand", "[", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{"gaExpOfMV", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"z", "\[GeometricProduct]", "z"}], "+", "1"}], 
                    ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", "optExpOfMV"}]}], "]"}], "]"}], 
                   "]"}]}], ",", "_bs", ",", 
                 RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}],
                ",", 
               RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", "  ", 
              RowBox[{"full", " ", "sqrt", "  ", "answers"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"s2", "=", 
               RowBox[{"gaSqrtOfMV", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{
                   RowBox[{"gaPE", "[", 
                    RowBox[{"z", "\[GeometricProduct]", "z"}], "]"}], "+", 
                   "1"}], "]"}], ",", 
                 RowBox[{"Sequence", "@@", "optSqrtOfMV"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", "s2", "]"}], "=!=", "0"}], ")"}], 
                "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaLogOfMV", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}], "&"}], 
                 "/@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", 
                    RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], 
                    "]"}], "&"}], "/@", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"gaPE", "/@", "s2"}], ")"}], "+", "z"}], ")"}], 
                    "]"}]}], ")"}]}], "\[IndentingNewLine]", ",", 
                RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaArcCoshOfMV", "[", 
         RowBox[{"z_", ",", 
          RowBox[{"opts", ":", 
           RowBox[{"OptionsPattern", "[", 
            RowBox[{"{", 
             RowBox[{
             "gaLogOfMV", ",", "gaExpOfMV", ",", "gaSqrtOfMV", ",", 
              "gaArcCoshOfMV"}], "}"}], "]"}]}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"theOption", ",", 
            RowBox[{"optArcCoshOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaArcCoshOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optSqrtOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optExpOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaExpOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optLogOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaLogOfMV", "]"}]}], "]"}]}], ",", 
            "sm1", ",", "sp1"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaSetNamedOptionValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"gaArcCoshOfMV", ",", "#", ",", "theOption"}], "}"}], 
               ",", 
               RowBox[{
                RowBox[{
                "gaOptionCheck", "[", "testOptiongaArcCoshOfMV", "]"}], "[", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                   "}"}]}], ")"}], "]"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
              "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Flatten", "[", 
              RowBox[{"First", "/@", 
               RowBox[{"{", 
                RowBox[{"Sequence", "@@", "optArcCoshOfMV"}], "}"}]}], "]"}], 
             ")"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], 
               "]"}], "===", "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], "=", 
              
              RowBox[{"(", 
               RowBox[{"PrincipalValue", "/.", 
                RowBox[{"Options", "[", "gaArcCoshOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"Simplify", "/.", 
                RowBox[{"Options", "[", "gaArcCoshOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], ",", "True",
              ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Simplify"}], ",", "False", ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Identity"}], ",", "_", ",", 
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"single", " ", "value"}], ",", " ", 
               RowBox[{"no", " ", "full", " ", "sqrt"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"gaLogOfMV", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Collect", "[", 
                RowBox[{
                 RowBox[{"z", "+", 
                  RowBox[{"Expand", "[", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaExpOfMV", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"z", "-", "1"}], ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", "optExpOfMV"}]}], "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"gaExpOfMV", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"z", "+", "1"}], ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", "optExpOfMV"}]}], "]"}]}], 
                    "]"}], "]"}]}], ",", "_bs", ",", 
                 RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}],
                ",", 
               RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", "  ", 
              RowBox[{"full", " ", "sqrt", "  ", "answers"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"sm1", "=", 
               RowBox[{"gaSqrtOfMV", "[", 
                RowBox[{
                 RowBox[{"z", "-", "1"}], ",", 
                 RowBox[{"Sequence", "@@", "optSqrtOfMV"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"sp1", "=", 
               RowBox[{"gaSqrtOfMV", "[", 
                RowBox[{
                 RowBox[{"z", "+", "1"}], ",", 
                 RowBox[{"Sequence", "@@", "optSqrtOfMV"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Length", "[", "sm1", "]"}], "===", 
                   RowBox[{"Length", "[", "sp1", "]"}]}], ")"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Length", "[", "sp1", "]"}], "=!=", "0"}], ")"}]}],
                 "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaLogOfMV", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}], "&"}], 
                 "/@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", 
                    RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], 
                    "]"}], "&"}], "/@", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"gaPE", "/@", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"sm1", ",", "sp1"}], "]"}], "]"}]}], ")"}], "+", 
                    "z"}], ")"}], "]"}]}], ")"}]}], "\[IndentingNewLine]", 
                ",", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaArcCoshOfMV", "::", "sqrt"}], ",", "z"}], "]"}],
                  ";", 
                 RowBox[{"Abort", "[", "]"}]}]}], "]"}]}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"trigonometric", " ", "functions"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaArcTanOfMV", "[", 
      RowBox[{"z_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", 
         RowBox[{"{", "gaLogOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theAlgebra", "=", 
         RowBox[{"gaGetAlgebra", "[", "z", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "2"}], ")"}], "\[GeometricProduct]", 
         RowBox[{"gaI", "[", "theAlgebra", "]"}], "\[GeometricProduct]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaLogOfMV", "[", 
            RowBox[{
             RowBox[{"1", "-", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                "\[GeometricProduct]", "z"}], "]"}]}], ",", "opts"}], "]"}], 
           "-", 
           RowBox[{"gaLogOfMV", "[", 
            RowBox[{
             RowBox[{"1", "+", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                "\[GeometricProduct]", "z"}], "]"}]}], ",", "opts"}], "]"}]}],
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaArcCotOfMV", "[", 
         RowBox[{"z_", ",", 
          RowBox[{"opts", ":", 
           RowBox[{"OptionsPattern", "[", 
            RowBox[{"{", "gaLogOfMV", "}"}], "]"}]}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"invz", ",", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", "z", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Piecewise", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"invz", "=", 
                  RowBox[{"involutionInverse", "[", 
                   RowBox[{"z", ",", "3", ",", "Expand", ",", 
                    RowBox[{"10.", "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "10"}], ")"}]}]}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Inverse is \>\"", ",", "invz"}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], "\[GeometricProduct]", 
                  RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                  "\[GeometricProduct]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", "invz"}], "]"}]}], ",", "opts"}], 
                    "]"}], "-", 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"1", "+", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", "invz"}], "]"}]}], ",", "opts"}], 
                    "]"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"!", 
                  RowBox[{"zeroQ", "[", 
                   RowBox[{"gaGetMV", "[", 
                    RowBox[{"z", ",", 
                    RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], "||", 
                 RowBox[{"!", 
                  RowBox[{"(", 
                   RowBox[{"And", "@@", 
                    RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Most", "[", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "z", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"printDetails", "[", 
                  RowBox[{"quiet", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV is zero \>\"", ",", "z"}], "}"}], "}"}]}],
                   "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "/", "2"}], ")"}], "Pi"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"zeroQ", "[", 
                  RowBox[{"gaGetMV", "[", 
                   RowBox[{"z", ",", 
                    RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "&&", 
                 RowBox[{"(", 
                  RowBox[{"And", "@@", 
                   RowBox[{"(", 
                    RowBox[{"zeroQ", "/@", 
                    RowBox[{"Most", "[", 
                    RowBox[{
                    RowBox[{"gaComponentList", "[", "z", "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
             "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
         "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaArcSinOfMV", "[", 
         RowBox[{"z_", ",", 
          RowBox[{"opts", ":", 
           RowBox[{"OptionsPattern", "[", 
            RowBox[{"{", 
             RowBox[{
             "gaLogOfMV", ",", "gaExpOfMV", ",", "gaSqrtOfMV", ",", 
              "gaArcSinOfMV"}], "}"}], "]"}]}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"theOption", ",", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", "z", "]"}]}], ",", 
            RowBox[{"optArcSinOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaArcSinOfMV", "]"}]}], "]"}]}], ",", 
            
            RowBox[{"optSqrtOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optExpOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaExpOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optLogOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaLogOfMV", "]"}]}], "]"}]}], ",", 
            "s2"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"gaSetNamedOptionValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"gaArcSinOfMV", ",", "#", ",", "theOption"}], "}"}], 
               ",", 
               RowBox[{
                RowBox[{"gaOptionCheck", "[", "testOptiongaArcSinOfMV", "]"}],
                 "[", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                   "}"}]}], ")"}], "]"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
              "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Flatten", "[", 
              RowBox[{"First", "/@", 
               RowBox[{"{", 
                RowBox[{"Sequence", "@@", "optArcSinOfMV"}], "}"}]}], "]"}], 
             ")"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], 
               "]"}], "===", "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], "=", 
              
              RowBox[{"(", 
               RowBox[{"PrincipalValue", "/.", 
                RowBox[{"Options", "[", "gaArcSinOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"Simplify", "/.", 
                RowBox[{"Options", "[", "gaArcSinOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], ",", "True",
              ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Simplify"}], ",", "False", ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Identity"}], ",", "_", ",", 
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"single", " ", "value"}], ",", " ", 
               RowBox[{"no", " ", "full", " ", "sqrt"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"gaI", "[", "theAlgebra", "]"}]}], 
              "\[GeometricProduct]", 
              RowBox[{"gaLogOfMV", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Collect", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", "z"}], "]"}], "+", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaExpOfMV", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    RowBox[{"z", "\[GeometricProduct]", "z"}]}], ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", "optExpOfMV"}]}], "]"}], "]"}], 
                    "]"}]}], ",", "_bs", ",", 
                  RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], 
                 "]"}], ",", 
                RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", "  ", 
              RowBox[{"full", " ", "sqrt", "  ", "answers"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"s2", "=", 
               RowBox[{"gaSqrtOfMV", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"1", "-", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{"z", "\[GeometricProduct]", "z"}], "]"}]}], "]"}],
                  ",", 
                 RowBox[{"Sequence", "@@", "optSqrtOfMV"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", "s2", "]"}], "=!=", "0"}], ")"}], 
                "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"gaI", "[", "theAlgebra", "]"}]}], 
                   "\[GeometricProduct]", 
                   RowBox[{"gaLogOfMV", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], 
                  "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", 
                    RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], 
                    "]"}], "&"}], "/@", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"gaPE", "/@", "s2"}], ")"}], "+", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", "z"}], "]"}], "]"}]}], ")"}], 
                    "]"}]}], ")"}]}], "\[IndentingNewLine]", ",", 
                RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaArcCosOfMV", "[", 
         RowBox[{"z_", ",", 
          RowBox[{"opts", ":", 
           RowBox[{"OptionsPattern", "[", 
            RowBox[{"{", 
             RowBox[{
             "gaLogOfMV", ",", "gaExpOfMV", ",", "gaSqrtOfMV", ",", 
              "gaArcCosOfMV"}], "}"}], "]"}]}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"theOption", ",", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", "z", "]"}]}], ",", 
            RowBox[{"optArcCosOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaArcSinOfMV", "]"}]}], "]"}]}], ",", 
            
            RowBox[{"optSqrtOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaSqrtOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optExpOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaExpOfMV", "]"}]}], "]"}]}], ",", 
            RowBox[{"optLogOfMV", "=", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaLogOfMV", "]"}]}], "]"}]}], ",", 
            "s2"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"testTrigonometric", "[", "theAlgebra", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"gaSetNamedOptionValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"gaArcCosOfMV", ",", "#", ",", "theOption"}], "}"}], 
               ",", 
               RowBox[{
                RowBox[{"gaOptionCheck", "[", "testOptiongaArcCosOfMV", "]"}],
                 "[", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                   "}"}]}], ")"}], "]"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
              "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Flatten", "[", 
              RowBox[{"First", "/@", 
               RowBox[{"{", 
                RowBox[{"Sequence", "@@", "optArcCosOfMV"}], "}"}]}], "]"}], 
             ")"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], 
               "]"}], "===", "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], "=", 
              
              RowBox[{"(", 
               RowBox[{"PrincipalValue", "/.", 
                RowBox[{"Options", "[", "gaArcCosOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"Simplify", "/.", 
                RowBox[{"Options", "[", "gaArcCosOfMV", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], ",", "True",
              ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Simplify"}], ",", "False", ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
              "Identity"}], ",", "_", ",", 
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<PrincipalValue\>\"", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"single", " ", "value"}], ",", " ", 
               RowBox[{"no", " ", "full", " ", "sqrt"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Pi", "/", "2"}], ")"}], "+", 
              RowBox[{
               RowBox[{"gaI", "[", "theAlgebra", "]"}], "\[GeometricProduct]", 
               RowBox[{"gaLogOfMV", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Collect", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", "z"}], "]"}], "+", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaExpOfMV", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    RowBox[{"z", "\[GeometricProduct]", "z"}]}], ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", "optExpOfMV"}]}], "]"}], "]"}], 
                    "]"}]}], ",", "_bs", ",", 
                   RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], 
                  "]"}], ",", 
                 RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", "  ", 
              RowBox[{"full", " ", "sqrt", "  ", "answers"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"s2", "=", 
               RowBox[{"gaSqrtOfMV", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"1", "-", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{"z", "\[GeometricProduct]", "z"}], "]"}]}], "]"}],
                  ",", 
                 RowBox[{"Sequence", "@@", "optSqrtOfMV"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", "s2", "]"}], "=!=", "0"}], ")"}], 
                "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Pi", "/", "2"}], ")"}], "+", 
                   RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"gaLogOfMV", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Sequence", "@@", "optLogOfMV"}]}], "]"}]}]}], 
                  "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", 
                    RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], 
                    "]"}], "&"}], "/@", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"gaPE", "/@", "s2"}], ")"}], "+", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlgebra", "]"}], 
                    "\[GeometricProduct]", "z"}], "]"}], "]"}]}], ")"}], 
                    "]"}]}], ")"}]}], "\[IndentingNewLine]", ",", 
                RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";"}]}]}]], "Input",
 CellLabel->
  "In[688]:=",ExpressionUUID->"f47b9e36-5b06-4578-a4f7-a5ca803e8014"]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Series "
}], "Subsection",ExpressionUUID->"428fe170-9580-456c-92aa-566a8eacd33a"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". GeometricProductSeries"
}], "Subsubsection",ExpressionUUID->"1840d34c-5c9e-4787-ac73-64c3e404248d"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaGeometricProductSeries[ ] ",
  FontWeight->"Bold"],
 "is taken  from package ",
 StyleBox["clifford.m",
  FontWeight->"Bold"],
 "  (version 1.3 (Oct,2007): authors G. Aragon-Camarasa, J.L. Aragon, G. \
Aragon and M.A. Rodriguez )."
}], "Text",ExpressionUUID->"3efa313c-07df-41f7-9f58-5daf56b3abd0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "gaSeriesData", "}"}]}], " ", ";"}]], "Input",
 CellLabel->
  "In[696]:=",ExpressionUUID->"fc729999-dc29-4fc4-bbe3-601d7ec6c95d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "::", "function"}], "=", 
   "\"\<The expanded function `1` contains noncommutative operations \
(GeometricProduct or other). Current implementation is not ready to handle \
such cases. Use only with single argument!!!\>\""}], ";"}]], "Input",
 CellLabel->
  "In[697]:=",ExpressionUUID->"be3a10ac-ba3f-42ff-9baa-71cc64b90efd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Expand", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionGeometricProductSeries", "[", "\"\<Expand\>\"", "]"}], 
   "=", 
   RowBox[{
   "True", "|", "False", "|", "\"\<Automatic\>\"", "|", "Automatic", "|", 
    "gaProductExpand", "|", "gaPE", "|", "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionGeometricProductSeries", "[", "\"\<Quiet\>\"", "]"}], 
    "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionGeometricProductSeries", "[", 
    RowBox[{"\"\<Expand\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "True", "|", "\"\<Automatic\>\"", "|", "Automatic", "|", 
      "gaProductExpand", "|", "gaPE", "|", "Identity", "|", "_Function"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionGeometricProductSeries", "[", 
     RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "[", 
    RowBox[{
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Function", "|", "_Symbol"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"point_", "?", "NumberQ"}], ",", 
         RowBox[{"n_Integer", "?", "Positive"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"Series", "[", 
         RowBox[{
          RowBox[{"sym", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "point", ",", "n"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"a", "=", "1"}], ",", "theOption"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaGeometricProductSeries", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionGeometricProductSeries", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Expand", "/.", 
           RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
          RowBox[{"True", "|", "\"\<Automatic\>\"", "|", "Automatic"}]}], 
         "]"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"sym", ",", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}]}], "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaGeometricProductSeries", "::", "function"}], ",", 
          "sym"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"a", "=", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "[", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"a", ",", "m"}], "]"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"res", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Coefficient", "[", 
                RowBox[{"s", ",", "x", ",", "i"}], "]"}], "*", "a"}], "}"}], 
             ",", "i"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gaSeriesData", "@@", 
       RowBox[{"{", 
        RowBox[{"point", ",", "res"}], "}"}]}]}]}], "]"}]}], ";"}]}], "Input",\

 CellLabel->
  "In[698]:=",ExpressionUUID->"f0a8dcf1-f632-4be3-91e1-ed081f37fe44"],

Cell[TextData[{
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 " returns ",
 StyleBox["gaSeriesData[ ] ",
  FontWeight->"Bold"],
 "series data (mimic ",
 StyleBox["Series[ ]",
  FontWeight->"Bold"],
 " behaviour). It can be converted either to ordinary geometric product (with \
",
 StyleBox["Normal[ ]",
  FontWeight->"Bold"],
 ") or user can explicitly include infinitesimal parameter with ",
 StyleBox["gaParameterSeries[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaSeriesData[]",
  FontWeight->"Bold"],
 " rules for ",
 StyleBox["Zassenhaus",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Baker-Campbell-Hausdorff",
  FontSlant->"Italic"],
 " series are added in these series definition sections."
}], "Text",ExpressionUUID->"6f185173-1f5b-4652-9017-be5ad3b694c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Normal", "[", "a_gaSeriesData", "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[704]:=",ExpressionUUID->"0f46725f-b604-44e7-ba5b-d068ae0b010a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "[", 
    RowBox[{"a_gaSeriesData", ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"var", "^", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"Plus", "@@", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[705]:=",ExpressionUUID->"fe399153-f549-477a-9372-0204e9af6bc6"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " are automatically summed order by order and geometrically multiplied."
}], "Text",ExpressionUUID->"fd2cfa14-fe02-4313-8577-1ee919c17602"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Plus", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any3___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxOrder", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", "dat1", "]"}], ",", 
         RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Plus", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"gaSeriesData", "[", 
        RowBox[{"point", ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat1", ",", "maxOrder"}], "]"}]}], ")"}], "+", 
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat2", ",", "maxOrder"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
        "]"}], ",", "any2", ",", "any3"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[706]:=",ExpressionUUID->"26431bf5-2b4a-4c87-b885-e9bee719ef70"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication by multivector is multiplication of every term of series by \
that factor."
}], "Text",ExpressionUUID->"412613fa-9e0f-47b1-af2c-4daf1a856d97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Times", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[707]:=",ExpressionUUID->"014c3035-e3e4-4d75-92d3-df5e3db128ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[708]:=",ExpressionUUID->"34e6ef61-dd02-41b8-b80b-66a94cf34452"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication is realized first constructing pairs of infinitesimal of \
same power ",
 StyleBox["relevantPairs",
  FontWeight->"Bold"],
 ", then simply taking these terms with ",
 StyleBox["Extract[ ]",
  FontWeight->"Bold"],
 ", multiplying and at least summing."
}], "Text",ExpressionUUID->"3482516d-dae2-425e-b53d-a7ef6a487c38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any2___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"maxOrder", "=", 
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"Length", "[", "dat1", "]"}], ",", 
          RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], ",", 
       "relevantPairs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"relevantPairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "+", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "k"}], "}"}], ",", "k"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "maxOrder"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"any1", ",", 
        RowBox[{"gaSeriesData", "[", 
         RowBox[{"point", ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"List", "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat2"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}]}], "}"}], "]"}]}], ")"}], "&"}], "/@", 
                  RowBox[{"relevantPairs", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "maxOrder"}], "}"}]}], "]"}]}]}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", 
               RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
         "]"}], ",", "any2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[709]:=",ExpressionUUID->"3d393635-e47b-43b9-b113-09576e728d50"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "gaAssociationTogether", " ", "action", " ", "on", " ", "series", " ", 
    "data"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaSeriesData", "/:", 
    RowBox[{"gaAssociationTogether", "[", 
     RowBox[{"gaSeriesData", "[", "expr__", "]"}], "]"}], ":=", 
    RowBox[{"MapAt", "[", 
     RowBox[{"gaAssociationTogether", ",", 
      RowBox[{"gaSeriesData", "[", "expr", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "All", ",", "1", ",", "1"}], "}"}]}], "]"}]}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[710]:=",ExpressionUUID->"10819bd1-abd8-417c-80a9-b79fcf7dfffc"],

Cell[TextData[{
 "Below follows shortcuts and simplified predefined usage of ",
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"9f01afff-5d82-4eae-b3d3-a2e4b4e781ef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaExpSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSinSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSinhSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCosSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCoshSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaTanSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaTanhSeries", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "Automatic"}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[711]:=",ExpressionUUID->"74113379-1f94-4f8a-b951-50602255ec72"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaExpSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaExpSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Exp", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Exp", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSinSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaSinSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sin", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sin", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSinhSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaSinhSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sinh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sinh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCosSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaCosSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cos", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cos", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCoshSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaCoshSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cosh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cosh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaTanSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaTanSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tan", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tan", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaTanhSeries", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaTanhSeries", ",", "Expand"}], "]"}]}], ")"}]}], "}"}], 
      ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tanh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tanh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]"}], "Input",
 CellLabel->
  "In[718]:=",ExpressionUUID->"7e8ec40a-8163-4512-a57c-833691e36d4c"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Commutator, Zassenhaus and BakerCampbellHausdorff (BCH) expansions"
}], "Subsection",ExpressionUUID->"f0ffaedd-c797-495c-a4a1-46bccc4f47f7"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"09a7d234-0784-49e3-9839-c5ce1f546c10"],

Cell["Nice output of commutator and anticommutator", "Text",ExpressionUUID->"85136167-d851-4998-925f-0fc4adec8faa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"gaCommutator", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
    RowBox[{"StyleBox", "[", 
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<\[LeftDoubleBracket]\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<,\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<\[RightDoubleBracket]\>\""}], "}"}], "]"}], ",", 
      RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
      RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaAntiCommutator", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
   RowBox[{"StyleBox", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<{\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<,\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<}\>\""}], "}"}], "]"}], ",", 
     RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
     RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[725]:=",ExpressionUUID->"3f4cf023-ab0f-4097-8543-aff9cc43f02a"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaSetMultiLinear[ ] ",
  FontWeight->"Bold"],
 "is taken  from  Daniel Lichtblau<danl@wolfram.com>Re:[mg25540] MultiLinear \
and Linear function (old mathgroup mail list)"
}], "Text",ExpressionUUID->"de59bf16-7d4c-4c2f-9ade-324a1c0ca78d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", 
                RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", "c_", ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", "1", ",", "b"}], "]"}]}], "/;", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "=!=", "1"}], ")"}], "&&", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "c", "}"}], ",", 
                RowBox[{"MV", "|", "bs"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False,ExpressionUUID->"eca5b081-d731-4791-9cb9-30e68802f9b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"c_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&"}], ")"}]}], 
                ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", 
               RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"c_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
                   RowBox[{"c", "=!=", "1"}]}], ")"}], "&"}], ")"}]}], ",", 
              "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "1", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False,ExpressionUUID->"139c3cbf-c9d9-48a8-a98b-8c19d4fe948b"],

Cell["Expand commutator and anticommutator.", "Text",ExpressionUUID->"20e9f64c-3c09-41e2-8372-dfb95c80af9b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCommutatorExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "gaAntiCommutator", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaCommutatorExpand", "[", 
      RowBox[{"n", ":", 
       RowBox[{"(", 
        RowBox[{"_", "?", "NumberQ"}], ")"}], ":", "1"}], "]"}], "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"repRules", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plus", " ", "Rules", " ", "for", " ", "gaCommutator"}], 
            "*)"}], 
           RowBox[{
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "Plus", " ", "Rules", " ", "for", " ", "gaAntiCommutator"}], 
             "*)"}], 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaAntiCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"Alternatives", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{"gaCommutatorExpand", ",", "Except"}], "]"}]}], 
                  ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Expand", "[", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", "#", ")"}], "/.", "repRules"}], ")"}], "&"}], ",", 
         "expr"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "[", "n_", "]"}], "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{
      RowBox[{"gaCommutatorExpand", "[", "n", "]"}], "[", "x", "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[727]:=",ExpressionUUID->"15741003-769c-46be-bb35-dbf39c515240"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Zassenhaus series"
}], "Subsubsection",ExpressionUUID->"7ddc9247-79aa-40c5-a85f-35ca34778aa8"],

Cell["\<\
Optimize commutator linearity for Clifford algebras instead of using general \
gaSetMultiLinear[ ] . With this optimization $IterationLimit for \
gaZassenhausSeries for value 8 causes no problems. gaCommutator is nonzero \
only if it contains heads orthonormalBasisSymbolName or MV. If you need other \
noncommutative quantities, just use MV[yourhead].\
\>", "Text",ExpressionUUID->"bfe9fefa-af6b-4e2e-8262-41892805098a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", "y_Plus", ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", "#", ",", "b"}], "]"}], "&"}], "/@", "y"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"___", ",", "a_", ",", "___"}], "]"}], "]"}], ":=", 
      RowBox[{"0", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", 
          RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[730]:=",ExpressionUUID->"148073d1-ddc9-47f5-8e03-4863df33a9cc"],

Cell["\<\
If one uses definition below,  one gets $IterationLimit for \
gaZassenhausSeries values 8 or higher. This can be avoided with 
Block[{$RecursionLimit=2048},gaZassenhausSeries[Exp[t1+t2],8]], however the \
better way is to optimize iteration procedure as above.\
\>", "Text",ExpressionUUID->"4c8ec0f2-20a5-49a7-af21-9cb377cb30dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetMultiLinear", "[", 
   RowBox[{"gaCommutator", ",", "gaAntiCommutator"}], "]"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"cd7be513-d8d2-441d-82c2-8174c5cf2c2b"],

Cell["Add antisymmetry property ", "Text",ExpressionUUID->"c990bdbb-1c95-406a-9a7a-76d02b96c725"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaCommutator", "[", 
     RowBox[{"a_", ",", "a_"}], "]"}], "]"}], ":=", "0"}], ";"}]], "Input",
 CellLabel->
  "In[731]:=",ExpressionUUID->"07fedce7-d4fc-46a9-9d8f-0638d489408b"],

Cell[TextData[{
 "Efficient computation of general Zassenhaus coefficients is literally taken \
form the article Fernando Casas, Ander Murua, Mladen Nadinic, \
\[OpenCurlyDoubleQuote]Efficient computation of the Zassenhaus formula\
\[CloseCurlyDoubleQuote],Computer Physics Communications, 183 (2012) \
2386-2391, where algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given."
}], "Text",ExpressionUUID->"2ccc7200-5cac-454b-a51f-f81d3bd25e31"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointForZassenhaus", "[", 
    RowBox[{"a_", ",", "0", ",", "b_"}], "]"}], ":=", "b"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointForZassenhaus", "[", 
    RowBox[{"a_", ",", "j_Integer", ",", "b_"}], "]"}], ":=", 
   RowBox[{"gaCommutator", "[", 
    RowBox[{"a", ",", 
     RowBox[{"gaAdjointForZassenhaus", "[", 
      RowBox[{"a", ",", 
       RowBox[{"j", "-", "1"}], ",", "b"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"1", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"1", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "k"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"j", "!"}], " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "-", "j"}], ")"}], "!"}]}], ")"}]}], ")"}], " ", 
       RowBox[{"gaAdjointForZassenhaus", "[", 
        RowBox[{
         RowBox[{"MV", "[", "bTemp", "]"}], ",", 
         RowBox[{"k", "-", "j"}], ",", 
         RowBox[{"gaAdjointForZassenhaus", "[", 
          RowBox[{
           RowBox[{"MV", "[", "aTemp", "]"}], ",", "j", ",", 
           RowBox[{"MV", "[", "bTemp", "]"}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "k"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "2", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], " ", 
    RowBox[{"gaff", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"p_", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaff", "[", 
     RowBox[{"p", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "j"}], "/", 
         RowBox[{"j", "!"}]}], ")"}], " ", 
       RowBox[{"gaAdjointForZassenhaus", "[", 
        RowBox[{
         RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], ",", "j", ",", 
         RowBox[{"gaff", "[", 
          RowBox[{
           RowBox[{"p", "-", "1"}], ",", 
           RowBox[{"k", "-", 
            RowBox[{"p", " ", "j"}]}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"k", "/", "p"}], "]"}], "-", "1"}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "p_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "=", 
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "p"}], ")"}], " ", 
      RowBox[{"gaff", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"p", "-", "1"}], ")"}], "/", "2"}], "]"}], ",", 
        RowBox[{"p", "-", "1"}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", 
     RowBox[{"a_", ",", "b_"}], "]"}], "[", "p_Integer", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
       RowBox[{
        RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], "}"}]}], 
    ")"}]}], ";"}]}], "Input",
 CellLabel->
  "In[732]:=",ExpressionUUID->"a8694b99-dadd-413f-9c65-eac31f0fbc1a"],

Cell[TextData[{
 "Right Zassenhaus series of Exp[A+B] is given as \
{Exp[A],Exp[B],Exp[C_2],Exp[C_3],...}. Whereas Left Zassenhaus series of \
Exp[A+B] is presented as {...,Exp[C\[CloseCurlyQuote]_3],Exp[C\
\[CloseCurlyQuote]_2],Exp[B],Exp[A]}. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"C", "'"}], "_n"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"n", "+", "1"}]], "C_n"}]}], TraditionalForm]],ExpressionUUID->
  "604d19c0-2dfd-48fa-b170-225410c1e651"],
 "."
}], "Text",ExpressionUUID->"fd1ded1c-7cff-41d3-bc12-c5520ef4b4ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaZassenhausSeries", "}"}], ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaZassenhausSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<Right\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausSeries", "::", "format"}], "=", 
    "\"\<gaZasenhausSeries option Format-> `1` is unknown. Possible values \
are \\\"Right\\\" or \\\"Left\\\".\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaZassenhausSeries", "[", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"aa_", "+", "bb_"}], "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a", "=", 
           RowBox[{"Unevaluated", "[", "aa", "]"}]}], ",", 
          RowBox[{"b", "=", 
           RowBox[{"Unevaluated", "[", "bb", "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaZassenhausSeries", ",", "Format"}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "seriesType", ",", "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"gaZassenhausCoefficient", "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"2", ",", "n"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "aTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "bTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\"\<Left\>\"", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"Reverse", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2", ",", "n"}], "}"}]}], "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"gaZassenhausCoefficient", "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "bTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "aTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaZassenhausSeries", "::", "format"}], ",", 
            "seriesType"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[739]:=",ExpressionUUID->"de5c5767-c327-4ee3-91e3-2422209110e1"],

Cell["Conversion of Zassenhaus series data to gaSeriesData. ", "Text",ExpressionUUID->"0f0b3a26-ee76-425e-9768-41fad4df86d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"u1_", ",", 
     RowBox[{"{", 
      RowBox[{"u2a_", ",", "u2b_"}], "}"}], ",", "u3_", ",", "len_"}], "]"}], 
   ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2a", ",", "u3", ",", "len"}], "]"}], ",", 
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2b", ",", "u3", ",", "len"}], "]"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[743]:=",ExpressionUUID->"f6d9b3ef-502c-4134-b775-9edb1be9c7db"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"expansionOrder_", ",", "uMVec_", ",", "rang_", ",", "len_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"Series", "[", 
          RowBox[{
           RowBox[{"Exp", "[", "t", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"res", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"a", "=", "1"}], ",", 
        RowBox[{"initialSeq", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "0", "}"}], ",", "j"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "0", ",", "len"}], "}"}]}], "]"}]}]}], "}"}], 
      ",", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"i", "\[NotEqual]", "0"}], ",", 
            RowBox[{"a", "=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"a", ",", "uMVec"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"res", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Coefficient", "[", 
                 RowBox[{"s", ",", "t", ",", "i"}], "]"}], "*", "a"}], "}"}], 
              ",", 
              RowBox[{"rang", "*", "i"}]}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"initialSeq", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", 
             RowBox[{"rang", "*", "k"}]}], "]"}], "]"}], "=", 
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", "k"}], "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", 
           RowBox[{
            RowBox[{"Length", "[", "res", "]"}], "-", "1"}]}], "}"}]}], "]"}],
        ";", "initialSeq"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", "uMVec", "]"}], "=!=", "List"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[744]:=",ExpressionUUID->"bcc2d301-6d80-40d2-8037-d985b676f7d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", 
       "expansionOrder", ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"expansionOrder", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"len", "/", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"res", "=", 
       RowBox[{"MapAt", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"expandZasExp", "[", 
             RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"expansionOrder", ",", 
             RowBox[{"{", 
              RowBox[{"inf0", ",", "infn"}], "}"}], ",", 
             RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"gaSeriesData", "@@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", "res"}],
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[745]:=",ExpressionUUID->"8cdff088-68a8-413b-b549-25dfce854577"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "[", 
   RowBox[{"gaZassenhausSeriesData", "[", 
    RowBox[{"infn___", ",", "inf0_List"}], "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "expansionOrder",
       ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expansionOrder", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{"len", "/", "i"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Apply", "[", 
          RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"expandZasExp", "[", 
            RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"expansionOrder", ",", 
            RowBox[{"Reverse", "[", 
             RowBox[{"{", 
              RowBox[{"infn", ",", 
               RowBox[{"Reverse", "[", "inf0", "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GeometricProduct", "@@", 
      RowBox[{"gaSeriesData", "@@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", 
         RowBox[{"Reverse", "[", "res", "]"}]}], ")"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[746]:=",ExpressionUUID->"d8baf1de-e919-4a37-8b7f-c61eef64bdb4"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "gaAssociationTogether", " ", "action", " ", "on", " ", "series", " ", 
   "data"}], " ", "*)"}]], "Input",
 CellLabel->
  "In[747]:=",ExpressionUUID->"e6eeb7f0-9348-44b4-922f-04bcd9ccf8f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaZassenhausSeriesData", "/:", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", "expr__", "]"}], "]"}], ":=", 
   RowBox[{"gaAssociationTogether", "/@", 
    RowBox[{"gaZassenhausSeriesData", "[", "expr", "]"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[748]:=",ExpressionUUID->"df7fb41f-53b7-4247-86f4-96f4c33a704a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". BCH series"
}], "Subsubsection",ExpressionUUID->"000b37fb-664f-4af7-afdd-f24b1ea3233b"],

Cell[TextData[{
 "Efficient computation of general BCH coefficients is literally taken form \
the Mattias W. Reinsch, \[OpenCurlyDoubleQuote]A simple expression for the \
terms in the Baker-Campbell-Hausdorff \
series\[CloseCurlyDoubleQuote],(arXiv:math-ph/9905012v2 13 Jan,2000), where \
algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given. We only add speedup using SparseArray matrices (15% \
speedup for n=12 term)."
}], "Text",ExpressionUUID->"c4379cdf-d7ab-4471-a7b3-5bbe481cf4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myStrings__String", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Band", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], "]"}], "\[Rule]", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "+", "1"}], ",", 
            RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}]}], ",", "FFGGm1"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dot", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                 RowBox[{"Product", "[", 
                  RowBox[{
                   RowBox[{"sb", "[", 
                    RowBox[{"k", ",", "#"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "]"}], "&"}], "/@", 
            RowBox[{"{", "myStrings", "\[IndentingNewLine]", "}"}]}], ")"}]}],
          "-", "qthpower"}], ")"}]}], ";", 
      RowBox[{"Expand", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"qthpower", "=", 
             RowBox[{"qthpower", ".", "FFGGm1"}]}], ";", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
             "qthpower"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", 
           RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[749]:=",ExpressionUUID->"5ce5bc77-f81e-4b55-acf3-375f8c27c69a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
    RowBox[{
     RowBox[{"{", "exprs__String", "}"}], ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"temp", "=", 
        RowBox[{"logTempMatrix", "[", 
         RowBox[{
          RowBox[{"{", "exprs", "}"}], ",", "n"}], "]"}]}], ",", "term"}], 
      "}"}], ",", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"term", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"List", ",", 
           RowBox[{"temp", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{"term", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*", 
         RowBox[{"Apply", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"term", ",", 
              RowBox[{"-", "n"}]}], "]"}], "/.", 
            RowBox[{
             RowBox[{"sb", "[", 
              RowBox[{"_", ",", "k_"}], "]"}], "\[Rule]", 
             RowBox[{"MV", "[", "k", "]"}]}]}]}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "temp", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[750]:=",ExpressionUUID->"13c3de3e-0894-437f-b8f3-6a797057a1a1"],

Cell["\<\
Nested commutator on the right or left hand side. This differs from \
traditional form presented in the literature, because some terms are equal \
and can be added. For example in 5-th order term two terms with coefficients \
add  1/360+1/180 to form 1/120 coefficient of their sum. \
\>", "Text",ExpressionUUID->"7c359209-ca67-4feb-9719-69c071d09068"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateCommutatorForm", "[", 
    RowBox[{"expr_", ",", "vars_List", ",", "type_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rules", ",", "gaCom", ",", "any1", ",", "any2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetNonCommutative", "[", 
       RowBox[{"gaCom", ",", "any1", ",", "any2"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "type", ",", "\[IndentingNewLine]", "\"\<DeepestRight\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}]}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "a", "]"}], ">", 
                RowBox[{"Depth", "[", "b", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "b", ",", "a", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "a"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}], ",", 
                 RowBox[{"c", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "\"\<DeepestLeft\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", "b"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "b", "]"}], ">", 
                RowBox[{"Depth", "[", "a", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", "any2___"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "a", ",", "b", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"a", ",", "b"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"c", ":", "_gaCom"}], ",", 
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}], ",", "b"}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "b"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"#", "/.", "rules"}], "]"}], "&"}], ",", "expr"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"gaCom", "\[Rule]", "gaCommutator"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[751]:=",ExpressionUUID->"1563b761-d0db-4a86-9b22-b5ae328c4170"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaBakerCampbellHausdorffSeries", "}"}], ",", "HoldFirst"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBakerCampbellHausdorffSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "format"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries option Format-> `1` is unknown. \
Possible values are \\\"Commutators\\\",\\\"Expand\\\" or \
\\\"None\\\".\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[752]:=",ExpressionUUID->"e231240a-fd8f-4565-aaf4-20afc5c120e0"],

Cell[TextData[{
 "Note: ",
 StyleBox["directLogTempMatrix[ ]",
  FontWeight->"Bold"],
 " is much faster when expanding multivectors. For example for two 3D vectors \
9-th order BCH series (expanded) is 600sec compared to 5000 sec using \
commutative algorithm. All this due to slow expansion of large noncommutative \
expression. Therefore we switch to directLogTempMatrix[ ] for n>5."
}], "Text",ExpressionUUID->"2e2035f8-a7b6-4ab8-8a88-96692c364e2e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"directLogTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myexressions__", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], ",", "FFGGm1"}], "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"gaPE", ",", 
           RowBox[{"gaGeometricMatrixProduct", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"1", "/", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "&"}], "/@", 
              RowBox[{"{", "myexressions", "\[IndentingNewLine]", "}"}]}], 
             ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", 
             RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "-", "qthpower"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"gaPE", "/@", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"qthpower", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"MapAt", "[", 
                 RowBox[{"gaPE", ",", "qthpower", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", "FFGGm1"}], "]"}]}], 
             ";", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
              "qthpower"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", 
            RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[755]:=",ExpressionUUID->"0d060885-f303-4d8d-9efc-e4281e06c289"],

Cell["\<\
Note: rewrite using commutators to left or to right side. It is not rewrite \
into Hall or Lyndon base (don\[CloseCurlyQuote]t know how to do this)\
\>", "Text",ExpressionUUID->"efc77767-2f0b-4b4c-b4b5-610c13dca05e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBakerCampbellHausdorffSeries", "[", 
       RowBox[{
        RowBox[{"GeometricProduct", "[", "expr__Exp", "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"expArgs", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"List", "@@@", 
             RowBox[{"Unevaluated", "[", 
              RowBox[{"{", "expr", "}"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaBakerCampbellHausdorffSeries", ",", "Format"}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"stringNames", "=", 
           RowBox[{"(", 
            RowBox[{"ToString", "/@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Unique", "[", "\"\<vn\>\"", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "expr", "}"}], "]"}], "}"}]}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "seriesType", ",", "\[IndentingNewLine]", "\"\<None\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "gaBakerCampbellHausdorffSeriesData", "@@", "\[IndentingNewLine]", 
            
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", "expArgs"}], 
              "]"}], ")"}]}], ",", "\"\<Expand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "gaBakerCampbellHausdorffSeriesData", "@@", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", 
                 RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"directLogTempMatrix", "[", 
                  RowBox[{"expArgs", ",", "k"}], "]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Commutators\>\"", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<DeepestRight\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestRight\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Commutators\>\"", "|", 
            RowBox[{"{", 
             RowBox[{"\"\<Commutators\>\"", ",", 
              RowBox[{"Method", "\[Rule]", "\"\<DeepestLeft\>\""}]}], "}"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestLeft\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[756]:=",ExpressionUUID->"4d9e015e-2e9b-42a5-ad38-8ed8f0916c59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBCHSeries", "=", "gaBakerCampbellHausdorffSeries"}], 
  ";"}]], "Input",
 CellLabel->
  "In[757]:=",ExpressionUUID->"d3a28ee5-b273-4243-be10-f8ea3d1ebe22"],

Cell["\<\
Conversion of BakerCampbellHausdorffSeries series data to gaSeriesData. \
\>", "Text",ExpressionUUID->"d8d3f85b-cbd2-44fc-bbb7-565847e558f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeProductTerm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pair", ":", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ".."}]}], "}"}], 
     ",", 
     RowBox[{"expansionOrder_Integer", "?", "Positive"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{"#", ",", 
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"Factorial", "[", 
          RowBox[{"Length", "[", "#", "]"}], "]"}]}], ")"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Permutations", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
       RowBox[{"{", "pair", "}"}]}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[758]:=",ExpressionUUID->"df422bb9-8104-444a-8290-a94f4eb40263"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "termsToTake", 
       ",", "nontrivialEntries"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"0", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"termsToTake", "=", 
                RowBox[{"FrobeniusSolve", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "len", "]"}], ",", "order"}], "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"nontrivialEntries", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Plus", "@@", "inf0"}], ",", "infn"}], "}"}], ",",
                     "#"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "0"}], "}"}]}], "]"}], ")"}], "&"}], "/@",
                  "termsToTake"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"gaPE", "[", 
                RowBox[{"Plus", "@@", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{"GeometricProduct", ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"makeProductTerm", "[", 
                    RowBox[{"#", ",", "order"}], "]"}], "&"}], "/@", 
                    "nontrivialEntries"}], ")"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
              ",", "order"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"order", ",", "len"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "0", "}"}], ",", "0"}], "}"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[759]:=",ExpressionUUID->"7ffce8e8-82a8-451d-a517-0291f62bf414"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBakerCampbellHausdorffSeriesData", "/:", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", "expr__", "]"}], "]"}],
    ":=", 
   RowBox[{"gaAssociationTogether", "/@", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", "expr", "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[760]:=",ExpressionUUID->"34ff6798-e968-442e-9cb8-75a76e0c10e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[761]:=",ExpressionUUID->"470f0de9-b2ec-45d8-9dc3-536959d1ac05"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Idempotents, left ideals, bilateral ideals, ideal basis"
}], "Section",ExpressionUUID->"2e36cfc7-e28c-4536-a20a-ba3dfeac0510"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaRadonHurwitzNumber", ",", "gaIdempotentQ", ",", 
     "gaPrimitiveIdempotent", ",", "StartingElement", ",", 
     "NumberOfPrimitiveFactors", ",", "HermitianOnly", ",", "gaLeftIdeal", 
     ",", "gaDoubleSidedIdeal", ",", "gaLeftIdealBasis", ",", "gaSpinor", ",",
      "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", ",", 
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", ",", 
     "gaSpinorIdempotent"}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[762]:=",ExpressionUUID->"306c1950-971e-4a4e-8e3d-674f810a521f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[763]:=",ExpressionUUID->"c3d91181-805f-4fd5-96a2-7de5fb0baaf1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "::", "usage"}], "=", 
   "\"\<gaRadonHurwitzNumber[s_Integer] gives Radon-Hurwitz number, which is \
sequence A034584 in the On-Line Encyclopedia of Integer Sequences (OEIS). The \
number of primitive idempotents of algebra Cl[p,q,0] is equal to \
q-gaRadonHurwitzNumber[q-p].\>\""}], ";"}]], "Input",
 CellLabel->
  "In[765]:=",ExpressionUUID->"ff94e806-3f01-45dc-9d7e-f9672972e47a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIdempotentQ", "::", "usage"}], "=", 
   "\"\<gaIdempotentQ[expr_] returns True if expr*expr===expr, where expr is \
either Matrix or GA expression.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[766]:=",ExpressionUUID->"cf3e33b3-d97b-4ed7-aa7f-82d92b3da953"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "usage"}], "=", 
   "\"\<gaPrimitiveIdempotent[algebra_Cl, opts___] returs a list of factors \
of the algebra of primitive idempotent. Representative factors of primitive \
idempotent are selected using options StartingElement->Integer (or list of \
integers) and gaNonCommutativeMonomialOrder\[Rule] (monomial ordering). \
Possible monomial orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \
\\\"InvRevLex\\\". These pure orderings can be proceeded with \\\"Deg[]\\\", \
and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 possible orderings. Use \
option OutputForm\[Rule]\\\"Blades\\\" to return set of blades instead of \
factors of primitive idempotent.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StartingElement", "::", "usage"}], "=", 
   "\"\<StartingElement-> Integer or StartingElement-> {Integers}. \
StartingElement is an option for gaPrimitiveIdempotent[], which determines a \
number of blade in a list. The blade is selected as a next candidate for \
primitive idempotent factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NumberOfPrimitiveFactors", "::", "usage"}], "=", 
   "\"\<NumberOfPrimitiveFactors-> positive Integer or \\\"Automatic\\\". \
NumberOfPrimitiveFactors is an option for gaPrimitiveIdempotent[], which \
restricts number of factors in the idempotent to given value. Idempotent with \
manually restricted number of factors may not be a primitive idempotent. \
Default value is \\\"Automatic\\\". Normaly your should not use the option.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HermitianOnly", "::", "usage"}], "=", 
   "\"\<HermitianOnly-> True|False is an option for gaPrimitiveIdempotent[], \
which explicitly removes non Hermitian idempotens from the list. In all \
tested cases the idempotents are Hermitian by construction. Default value is \
True.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[767]:=",ExpressionUUID->"172f6040-d1dd-492e-92c2-9c473efc2b13"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDoubleSidedIdeal", "::", "usage"}], "=", 
   "\"\<gaDoubleSidedIdeal[thePrimitiveIdempotent_gaIdempotentQ, leftIdeal_, \
Order_String ,opts___] returns double sided ideal. Options: CoefficientDomain\
\[Rule]Complexes,Quiet\[Rule]True.  Option \
OutputForm->\\\"ElementsReplacementRules\\\". is used for calculation of \
matrix representations.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[771]:=",ExpressionUUID->"4aaebdad-35b3-4d80-a1c1-d20c6841d897"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "::", "usage"}], "=", 
   "\"\<gaLeftIdealBasis[leftIdeal_, gaDoubleSidedIdeal_, Order_String, \
opts___] \nreturs an left ideal orthonormal basis. The elements in the basis \
is ordered by Order, of which most useful for spinor calculations is \
\\\"RevLex\\\". It yields first nonzero column in matrix \
representation.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[772]:=",ExpressionUUID->"2cd03471-40b9-47da-9e3c-76715c4977bf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSpinor", "::", "usage"}], "=", 
    "\"\<gaSpinor[algebra, opts___] computes general column spinors of the \
given algebra. Options: \n\
gaPrimitiveIdempotent,\
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals,CoefficientDomain\
\[Rule]Complexes|Reals,Quiet\[Rule]True|False, gaSpinorIdempotent\[Rule]1, \
GeneratedParameters\[Rule]C,gaNonCommutativeMonomialOrder->\\\"RevLex\\\",\
gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\[Rule]\\\"InvLex\\\".\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "::", 
     "usage"}], "=", 
    "\"\<Method suboption of gaSpinor. Can be used to provide direct data for \
spinor computations. Usage: \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\[Rule]\
dataMajoranaForSpinor, where dataMajoranaForSpinor has structure {{the \
idempotent, lengthOfMutuallyAnihilatingIdempotents_Integer}, }, the ideal \
basis, {{the double sided ideal_1},{the double sided ideal_2}... }. See \
detailed example for Dirac, Majorana and chiral representation calculation \
for Cl[1,3].\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "::", "usage"}],
    "=", "\"\<Option of gaSpinor and gaDefineMatrixRepresentation (when \
IdealBasis method is used). Only makes sense for semisimple algebras (odd \
algebras for complex field and p-q=1 mod 4 for real field) which sorts basis \
elements of grade inverted ideal in requiested order.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSpinorIdempotent", "::", "usage"}], "=", 
   "\"\<Option for gaSpinor, decides which of full system of idempotents \
P_1+P_2+ ... +P_n=1 should be used for spinor computation (default \
gaSpinorIdempotent->1).\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[773]:=",ExpressionUUID->"e50347d4-aa81-4418-ae98-8994f84276e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[777]:=",ExpressionUUID->"301c3ead-b153-4915-acd8-588bfe8bfdf1"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Idempotents"
}], "Subsection",ExpressionUUID->"31776a9e-5c60-4496-bc16-0f75cd878c1d"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"8b4c3182-a2f4-4e23-9a93-b47e438f7335"],

Cell[TextData[{
 "Sequence A034584  in OEIS:  Radon-Hurwitz numbers: log_2 of dimension of an \
irreducible R-module for Clifford algebra Cl_n.  Generating function: x*(1+ x \
+ x^3 + x^7)/((1 - x)*(1 - x^8)), i.e. \
CoefficientList[Normal[Series[x*(1+x+x^3+x^7)/((1-x)*(1-x^8)),{x,0,100}]],x]\n\
This matches sequence [PL-GPW] Perti Lounesto, G.P. Wene \
\[OpenCurlyDoubleQuote]Idempotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173"
}], "Text",ExpressionUUID->"956d7a27-bc80-4788-a8f9-055d6169aba7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaRadonHurwitzNumber", "[", 
      RowBox[{"s", "-", "8"}], "]"}], "+", "4"}], "/;", 
    RowBox[{"s", "\[GreaterEqual]", "8"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", "s_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"s", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", 
      ",", "2", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "3", 
      ",", "6", ",", "3", ",", "7", ",", "3"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"-", "1"}], "\[LessEqual]", "s", "\[LessEqual]", "7"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Negative"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"s", "+", "8"}], "]"}], "-", "4"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberOfPrimitiveIdempotents", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"p_", ",", "q_", ",", "0"}], "]"}], "]"}], ":=", 
   RowBox[{"q", "-", 
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"q", "-", "p"}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[778]:=",ExpressionUUID->"7c234573-da53-4378-8a59-137fa5129077"],

Cell[TextData[{
 "Using Shirokov arXiv 0705.1641 formulas we implement ",
 StyleBox["gaComplexLeftIdealBase[ ]",
  FontWeight->"Bold"],
 ", which uses even then odd base element ordered left ideal base. You can \
change ordering and take linear combinations of base element using options, \
for example for base of 4 elements with Ordering\[Rule]{4,3,2,1} or \
TransformationMatrix->{{1,1,0,0},{1,-1,0,0},{0,0,1,I},{0,0,1,-I}}."
}], "Text",ExpressionUUID->"b43165da-3bb3-4990-9a15-452bd9be7baf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIdempotentQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"MatrixQ", "[", "expr", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", "expr"}], "]"}], "]"}], "]"}], "===", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"expr", "\[GeometricProduct]", "expr"}], "]"}], "]"}], "===", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[782]:=",ExpressionUUID->"11687818-5d43-4ccb-9b1a-a386bf876164"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Primitive  idempotents of real  and complex algebras"
}], "Subsubsection",ExpressionUUID->"ec6d0a04-6d38-4937-aef3-02991cb05389"],

Cell[TextData[{
 "By [PL-GPW] primitive idempotent of Cl(p,q) is a product of type \
(1+blade)..., where blade squares to 1 and all blades forms commuting set. \
The  ",
 StyleBox["commutingWithElement[] ",
  FontWeight->"Bold"],
 " test if blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 " of the blade list ",
 StyleBox[" testList",
  FontWeight->"Bold"],
 " commutes with this blade. The function then deletes all blades, which do \
not commute with blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"d6a06861-cd56-42fe-b285-42345f351971"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"commutingWithElement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"testList_List", ",", "startEl_List"}], "}"}], ",", "quiet_", 
     ",", "ord_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"in", "=", 
         RowBox[{"RotateLeft", "[", 
          RowBox[{"testList", ",", 
           RowBox[{
            RowBox[{"startEl", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ",", "fe",
         ",", "res", ",", "restoredList"}], "}"}], ",", 
      RowBox[{
       RowBox[{"Sow", "[", 
        RowBox[{"fe", "=", 
         RowBox[{"First", "[", "in", "]"}]}], "]"}], ";", 
       RowBox[{"restoredList", "=", 
        RowBox[{"RotateRight", "[", 
         RowBox[{
          RowBox[{"Rest", "[", "in", "]"}], ",", 
          RowBox[{
           RowBox[{"startEl", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"Pick", "[", 
         RowBox[{"restoredList", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"fe", ",", "#"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#", ",", "fe"}], "]"}]}], "===", "0"}], ")"}], "&"}],
            "/@", "restoredList"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "res", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<Selecting blade \>\"", ",", "fe"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"\"\<It commutes  with \>\"", ",", "res"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"\"\<Next selected blade number is \>\"", ",", 
               RowBox[{"First", "[", 
                RowBox[{"RotateLeft", "[", "startEl", "]"}], "]"}]}], "}"}]}],
             "\[IndentingNewLine]", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"res", ",", 
         RowBox[{"RotateLeft", "[", "startEl", "]"}]}], "}"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "testList", "]"}], ">", "0"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[783]:=",ExpressionUUID->"576e9621-987d-4255-b1f8-d245a5568d5e"],

Cell["\<\
After system of commuting blades which square to 1 is formed, we need to \
remove of them all blades, which are products of blades which are in the \
beginning of the list. Recursive implementation of removing product blades, \
i.e. blades which are products of blades in the beginning of given list. The \
initial blade ordering by default is \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], which can be changed to any other by option \
gaNonCommutativeMonomialOrder->order.\
\>", "Text",ExpressionUUID->"4b5e3860-c016-4497-bfb8-c0da48d267d6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other___"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", "nextAccept", "}"}], ",", 
       RowBox[{"{", "other", "}"}]}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other__"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"accepted", ",", "nextAccept"}], "}"}], ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"removeElems", "=", 
           RowBox[{"ReplaceAll", "[", 
            RowBox[{
             RowBox[{"GeometricProduct", "@@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "nextAccept"}], "}"}], "]"}], "&"}], "/@", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"{", "accepted", "}"}], "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{"-", "any_"}], "\[RuleDelayed]", "any"}]}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "other", "}"}], ",", 
           RowBox[{"Alternatives", "@@", "removeElems"}]}], "]"}]}], "]"}]}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "nextAccept_", "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", "Nothing"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "Nothing"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[784]:=",ExpressionUUID->"ba594d6f-3819-4f8f-b211-d5a6f3f99bbe"],

Cell[TextData[{
 "Function ",
 StyleBox["gaPrimitiveIdempotent[al_Cl] ",
  FontWeight->"Bold"],
 " returns list of primitive idempotents of algebra. Geometric multiplication \
of list element will give representative of primitive idempotent. Different \
representatives can be obtained either by using different sorting of \
monomials or by manually selecting preferred blades, or combining both. The \
result then is checked if proper number of required product blades is \
obtained.  "
}], "Text",ExpressionUUID->"d78be527-b83c-43cc-ada5-5e64c2484c1d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "moreNumberOfPrimitives"}], "=", 
   "\"\<Number of expected commuting idempotents for complex algebra `1` is \
`3`. Taking the first `2` out of `4` possible. \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
    "=", "\"\<Radon-Hurwitz number of expected commuting idempotents for \
algebra `1` is `2`. It does not match length of result. Something goes wrong.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", " ", 
     RowBox[{"StartingElement", "\[Rule]", "1"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}], ",", 
     RowBox[{"HermitianOnly", "\[Rule]", "True"}], ",", 
     RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"TransformationFunction", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[789]:=",ExpressionUUID->"dea4a981-3a46-4c32-877c-b2fed5b7e6be"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "one", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPrimitiveIdempotent", "[", "\"\<CoefficientDomain\>\"", "]"}],
      "=", 
     RowBox[{"Reals", "|", "Complexes"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPrimitiveIdempotent", "[", "\"\<StartingElement\>\"", "]"}], 
     "=", "\"\<Positive integer, or list of positive integers\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", "\"\<Quiet\>\"", "]"}], 
     "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPrimitiveIdempotent", "[", "\"\<OutputForm\>\"", "]"}], "=", 
     RowBox[{
     "\"\<IdempotentFactors\>\"", "|", "\"\<Blades\>\"", "|", 
      "\"\<AllSignatures\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPrimitiveIdempotent", "[", "\"\<HermitianOnly\>\"", "]"}], 
     "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPrimitiveIdempotent", "[", "\"\<NumberOfPrimitiveFactors\>\"",
       "]"}], "=", 
     RowBox[{"Automatic", "|", "\"\<Positive integer\>\""}]}], ";", 
    RowBox[{
     RowBox[{
     "testOptionPrimitiveIdempotent", "[", "\"\<TransformationFunction\>\"", 
      "]"}], "=", 
     RowBox[{"None", "|", "\"\<Pure function\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
     " ", "actual", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Reals", "|", "Complexes"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<StartingElement\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"IntegerQ", "[", "val", "]"}], "&&", 
        RowBox[{"Positive", "[", "val", "]"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"val", ",", 
          RowBox[{"{", "__Integer", "}"}]}], "]"}], "&&", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{"Positive", "/@", "val"}], ")"}]}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<OutputForm\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<IdempotentFactors\>\"", "|", "\"\<Blades\>\"", "|", 
        "\"\<AllSignatures\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<HermitianOnly\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<NumberOfPrimitiveFactors\>\"", ",", "val_"}], "]"}], ":=", 
     
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Automatic", "|", 
        RowBox[{"_Integer", "?", "Positive"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPrimitiveIdempotent", "[", 
      RowBox[{"\"\<TransformationFunction\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"None", "|", "Identity", "|", "_Function"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[792]:=",ExpressionUUID->"f1dbfac5-3bc5-4a54-9728-af0dce47d881"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", 
        RowBox[{"gaPrimitiveIdempotent", ",", "gaDefineOrthonormalBasis"}], 
        "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "theOption", ",", "theBasis", ",", "ord", ",", "positiveBlades", ",", 
       "commutingPositiveBlades", ",", "commutingPositiveBladesProductFree", 
       ",", "idempotentList", ",", "expectedNumberOfPrimitiveIdempotents", 
       ",", "expectedNumberOfPrimitiveIdempotentsAutomatic", ",", 
       "commutingPositiveBladesProductFreeTransformed", ",", "startElement", 
       ",", 
       RowBox[{"allPrimitiveIdempotentOptions", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "op", "}"}], ",", 
          RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"allDefineOrthonormalBasisOptions", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "op", "}"}], ",", 
          RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
         "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaPrimitiveIdempotent", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionPrimitiveIdempotent", "]"}], "[", 
           
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", "allPrimitiveIdempotentOptions"}], "]"}], 
        ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "options", " ", "of", " ", "gaDefineOrthonormalBasis", " ", "are", 
         " ", "only", " ", "checked"}], ",", " ", 
        RowBox[{"no", " ", "action"}], ",", " ", 
        RowBox[{
        "some", " ", "will", " ", "be", " ", "replaced", " ", "by", " ", 
         "different", " ", "values"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
         "gaOptionCheck", "[", "testOptionDefineOrthonormalBasis", "]"}], "[", 
         RowBox[{"OptionValue", "[", "#", "]"}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", "allDefineOrthonormalBasisOptions"}], "]"}], 
        ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "main", " ", "options", " ", "obtained", " ", 
        "values"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<StartingElement\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<StartingElement\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"StartingElement", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"OutputForm", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<HermitianOnly\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<HermitianOnly\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"HermitianOnly", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<NumberOfPrimitiveFactors\>\"", "]"}],
           "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<NumberOfPrimitiveFactors\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{"NumberOfPrimitiveFactors", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<TransformationFunction\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<TransformationFunction\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{"TransformationFunction", "/.", 
           RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{
          "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{
         "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
         "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "gaNonCommutativeMonomialOrder", "/.", 
            "allDefineOrthonormalBasisOptions"}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"startElement", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"theOption", "[", "\"\<StartingElement\>\"", "]"}], "}"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "automatically", " ", "determined", " ", "or", " ", "manually", " ", 
        "set", " ", "number", " ", "of", " ", "factors", " ", "in", " ", 
        "the", " ", "idemportent"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<NumberOfPrimitiveFactors\>\"", "]"}], 
        ",", "Automatic", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===",
            "Reals"}], ",", 
          RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
           RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
            RowBox[{"IntegerPart", "[", 
             RowBox[{
              RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "/", 
              "2"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"_Integer", "?", "Positive"}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
         RowBox[{
         "theOption", "[", "\"\<NumberOfPrimitiveFactors\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===",
            "Reals"}], ",", 
          RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
           RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
            RowBox[{"IntegerPart", "[", 
             RowBox[{
              RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "/", 
              "2"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "correct", " ", "values", " ", "of", " ", "idempotent", 
        " ", "factors", " ", "should", " ", "be"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===", 
         "Reals"}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=", 
         RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=", 
         RowBox[{"IntegerPart", "[", 
          RowBox[{
           RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "/", "2"}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Show", " ", "whats", " ", "going"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Expected number of idempotents is \>\"", ",", 
           "expectedNumberOfPrimitiveIdempotentsAutomatic"}], "}"}], 
         "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "expected", " ", "number", " ", "of", " ", "idempotents", 
         " ", "is", " ", "zero"}], ",", " ", 
        RowBox[{"we", " ", "have", " ", "a", " ", "trivial", " ", "case"}], 
        ",", " ", 
        RowBox[{"skip", " ", "all", " ", "steps"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=!=", "0"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"set", " ", "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ord", "=", 
          RowBox[{
          "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "===", 
             "gaOrthonormalBasis"}], ")"}], ",", "\[IndentingNewLine]", 
           RowBox[{"theBasis", "=", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
              RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}], 
              ",", 
              RowBox[{"gaMakeAlias", "->", "False"}]}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "All"}], "]"}], ",", 
                "_Association"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"theBasis", "=", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", "ord", ",", "All"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
               RowBox[{"gaRunningAlgebra", "=", "al"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"theBasis", "=", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaPlainRepresentation", "[", 
                   RowBox[{"gaOrthonormalBasis", "[", 
                    RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
               RowBox[{"gaRunningAlgebra", "=", "al"}]}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"which", " ", "blades", " ", "squares", " ", "to"}], " ", 
           "+", "1"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===",
             "Reals"}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{"real", " ", "algebra", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"positiveBlades", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{
               RowBox[{"DeleteCases", "[", 
                RowBox[{"theBasis", ",", "1"}], "]"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], "&"}], 
                  ")"}], "/@", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{"theBasis", ",", "1"}], "]"}]}], ")"}]}], "]"}]}], 
            ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"complex", " ", "algebra", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"positiveBlades", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], ",", "#", 
                 ",", 
                 RowBox[{"I", "#"}]}], "]"}], "&"}], "/@", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{"theBasis", ",", "1"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<HermitianOnly\>\"", "]"}], ",", 
              RowBox[{"positiveBlades", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{"positiveBlades", ",", 
                 RowBox[{"_", "?", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Not", "[", 
                    RowBox[{"gaHermitianQ", "[", "#", "]"}], "]"}], "&"}], 
                   ")"}]}]}], "]"}]}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Blades, which square to 1 are \>\"", ",", 
              "positiveBlades"}], "}"}], "\[IndentingNewLine]", "}"}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"which", " ", "commutes"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"commutingPositiveBlades", "=", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Last", "[", 
            RowBox[{"Reap", "[", 
             RowBox[{"NestWhile", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"commutingWithElement", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                  "ord"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"positiveBlades", ",", "startElement"}], "}"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "0"}], "&"}]}],
               "]"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Full system of commuting blades are\>\"", ",", 
              "commutingPositiveBlades"}], "}"}], "\[IndentingNewLine]", 
            "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"commutingPositiveBladesProductFree", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Reap", "[", 
            RowBox[{"removeProductsOfElements", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "commutingPositiveBlades"}], "]"}], 
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
            RowBox[{
            "Length", "[", "commutingPositiveBladesProductFree", "]"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaPrimitiveIdempotent", "::", "moreNumberOfPrimitives"}], ",", 
              "al", ",", "expectedNumberOfPrimitiveIdempotents", ",", 
              "expectedNumberOfPrimitiveIdempotentsAutomatic", ",", 
              RowBox[{"Length", "[", "commutingPositiveBlades", "]"}]}], 
             "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"commutingPositiveBladesProductFree", "=", 
             RowBox[{"Take", "[", 
              RowBox[{"commutingPositiveBlades", ",", 
               RowBox[{"Min", "[", 
                RowBox[{"expectedNumberOfPrimitiveIdempotents", ",", 
                 RowBox[{"Length", "[", "commutingPositiveBlades", "]"}]}], 
                "]"}]}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"theOption", "[", "\"\<TransformationFunction\>\"", "]"}],
             "===", "None"}], ",", "\[IndentingNewLine]", 
           RowBox[{
           "commutingPositiveBladesProductFreeTransformed", "=", 
            "commutingPositiveBladesProductFree"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"commutingPositiveBladesProductFreeTransformed", "=", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<TransformationFunction\>\"", "]"}], "/@", 
             "commutingPositiveBladesProductFree"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"idempotentList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], 
             RowBox[{"(", 
              RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
           "commutingPositiveBladesProductFreeTransformed"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
            RowBox[{
            "Length", "[", "commutingPositiveBladesProductFree", "]"}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
             ",", "al", ",", "expectedNumberOfPrimitiveIdempotents"}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"make", " ", "requested", " ", "answer", " ", "form"}], " ",
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], ",", 
           "\[IndentingNewLine]", "\"\<IdempotentFactors\>\"", ",", 
           RowBox[{"GeometricProduct", "@@", "idempotentList"}], ",", 
           "\[IndentingNewLine]", "\"\<Blades\>\"", ",", 
           "commutingPositiveBladesProductFreeTransformed", ",", 
           "\[IndentingNewLine]", "\"\<AllSignatures\>\"", ",", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Outer", "[", 
               RowBox[{"GeometricProduct", ",", "##"}], "]"}], "&"}], "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                   RowBox[{"(", 
                    RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
                 RowBox[{"Times", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "#"}], "]"}]}], "&"}], "/@",
                "commutingPositiveBladesProductFreeTransformed"}], ")"}]}], 
            "]"}], ",", "\[IndentingNewLine]", "_", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"GeometricProduct", "@@", "idempotentList"}]}], "]"}]}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "===", 
           "\"\<AllSignatures\>\""}], ",", 
          RowBox[{"{", "1", "}"}], ",", "1"}], "]"}]}], "\[IndentingNewLine]",
        "]"}]}]}], " ", 
    RowBox[{"(*", 
     RowBox[{"end", " ", "trivial", " ", "case"}], "*)"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[805]:=",ExpressionUUID->"1097e10a-28ac-46c1-9265-70117b5e0929"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Ideals"
}], "Subsection",ExpressionUUID->"3a3abbe5-3902-4336-b5da-2902681c5259"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"7f955be0-4edd-4113-a5e6-96bceb7668ca"],

Cell["\<\
The toRCHFactors factors double side ideal into fields \
\[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \[DoubleStruckCapitalH] \
(not in most general form yet)\
\>", "Text",ExpressionUUID->"9f7c5c94-ac60-4997-be1e-58bb6e38fc3d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "nounit"}], "=", 
   "\"\<The field `1` has no element which plays the role of unit or has more \
than one such element. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "false"}], "=", 
   "\"\<The double sided ideal  `1` does not represent a known field \
\[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \[DoubleStruckCapitalH] or \
complex \[DoubleStruckCapitalH]. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "CommutativeUnit"}], "=", 
   "\"\<The  `1` commutes with all elements of `2`, but does not represent \
imaginary or hyperbolic unit. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "nonseparable"}], "=", 
   "\"\<The double sided ideal part `1`, cannot be further factored into \
direct product of \[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \
\[DoubleStruckCapitalH]. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "NotImplemented"}], "=", 
   "\"\<The double sided ideal `1` can contain more commuting quaternion \
fields, however factorization is not yet implemented. Proceeding without \
identification with known division rings \[DoubleStruckCapitalR], \
\[DoubleStruckCapitalC], \[DoubleStruckCapitalH].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[806]:=",ExpressionUUID->"c5c128cf-b607-4545-b4a2-b8ea79224d4c"],

Cell["\<\
Remove elements after  some field was found and check if candidates satisfy \
all requirements. The finishing condition is \
\>", "Text",ExpressionUUID->"622a898b-b5e4-4494-8eee-2463f4c1f24d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{
     RowBox[{"{", "factors__List", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"{", "factors", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[811]:=",ExpressionUUID->"fce54413-8de9-4eb3-bcd0-0193015afbb5"],

Cell["If proper candidate was not found leave field as is ", "Text",ExpressionUUID->"a1348cc7-3f8f-45a0-929e-c63d8f27d257"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{
     RowBox[{"{", "factors__List", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", "factors", "}"}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", "#"}], "}"}], "&"}], "/@", 
       RowBox[{"{", "remaining", "}"}]}], ")"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[812]:=",ExpressionUUID->"fc1e8314-e5af-48e0-aaa3-6e5d02f80c37"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{"factors_List", ",", 
     RowBox[{"{", "candidates__", "}"}], ",", 
     RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"found", "=", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "candidates", "}"}]}]}], ",", 
       RowBox[{"confirmed", "=", 
        RowBox[{"First", "/@", "factors"}]}], ",", "allObtained", ",", 
       "productsOfFound", ",", "restElems"}], "}"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "remove", " ", "candidates", " ", "from", " ", "remaining", " ", 
       "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allObtained", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"found", ",", "confirmed"}], "}"}], "]"}]}], ";", 
      RowBox[{"productsOfFound", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Outer", "[", 
           RowBox[{
           "GeometricProduct", ",", "allObtained", ",", "allObtained"}], 
           "]"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"restElems", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", "remaining", "}"}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"Expand", "/@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"allObtained", ",", 
               RowBox[{"-", "allObtained"}], ",", "productsOfFound", ",", 
               RowBox[{"-", "productsOfFound"}]}], "}"}], "]"}]}], ")"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "restElems", " ", "commute", " ", "with", " ",
         "candidates"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"restElems", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Select", "[", 
                RowBox[{"restElems", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"{", "candidates", "}"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], 
                    "\[GeometricProduct]", "#"}], "-", 
                    RowBox[{"#", "\[GeometricProduct]", 
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"{", "candidates", "}"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "]"}], "]"}], "=!=",
                     "0"}], "&"}], ")"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", 
                  RowBox[{"{", "candidates", "}"}], "]"}]}], "}"}]}], "]"}], 
             "]"}], ")"}], "===", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"getRCHFactor", "[", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"factors", ",", 
              RowBox[{"{", "candidates", "}"}]}], "]"}], ",", "restElems", 
            ",", "idempotent"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"toRCHFactors", "::", "nonseparable"}], ",", 
             RowBox[{"{", "remaining", "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"getRCHFactor", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"factors", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "#"}], "}"}], "&"}], "/@", 
                 RowBox[{"{", "remaining", "}"}]}], ")"}]}], "]"}], ",", 
             RowBox[{"{", "}"}], ",", "idempotent"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"if", " ", "restElemens", " ", "emty"}], ",", " ", 
          RowBox[{"all", " ", "finished"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"getRCHFactor", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", "candidates", "}"}]}], "]"}], ",", "restElems", ",", 
          "idempotent"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[813]:=",ExpressionUUID->"eef13236-ee54-441a-aed0-2a91d14eb097"],

Cell["\<\
Start by looking for unity, then for imaginary unity, then for hyperbolic \
unity and lastly for quaternion units\
\>", "Text",ExpressionUUID->"cfbeb5c6-3cae-455f-bd53-56b06eb6c0ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getRCHFactor", "[", 
    RowBox[{"fin_List", ",", 
     RowBox[{"{", "}"}], ",", "_"}], "]"}], ":=", "fin"}], ";"}]], "Input",
 CellLabel->
  "In[814]:=",ExpressionUUID->"d22e8443-b5f0-4761-aa0a-f4708e768ab8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"getRCHFactor", "[", 
      RowBox[{"factors_List", ",", 
       RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "candidateForUnit", ",", "commutingWithAllPos", ",", 
         "commutingWithAll", ",", "imaginaryUnits", ",", "hyperbolicUnits", 
         ",", "nonCommutingQuaternionLike", ",", "nonCommutingWithFirstList", 
         ",", "quaternionUnits", ",", "qu"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Which", "[", 
        RowBox[{"(*", " ", 
         RowBox[{
         "first", " ", "try", " ", "to", " ", "find", " ", "element", " ", 
          "with", " ", "unity", " ", "role"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"candidateForUnit", "=", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", 
                 RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===",
                "#"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "candidateForUnit", "]"}], "=!=", "0"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"cleanRCHList", "[", 
          RowBox[{"factors", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"candidateForUnit", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "1"}], "}"}], "}"}], ",", 
           
           RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "try", " ", "to", " ", "find", " ", "positive", " ", 
           "commuting", " ", "which", " ", "squares", " ", "to", " ", "found",
            " ", "unity"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"commutingWithAllPos", "=", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"Outer", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#1", "\[GeometricProduct]", "#2"}], "-", 
                    RowBox[{"#2", "\[GeometricProduct]", "#1"}]}], ")"}], 
                  "]"}], "]"}], "&"}], ",", 
               RowBox[{"{", "remaining", "}"}], ",", 
               RowBox[{"{", "remaining", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ".."}], "}"}]}], "]"}]}], ";", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "commutingWithAllPos", "]"}], "=!=", "0"}],
            ")"}]}], ",", 
         RowBox[{
          RowBox[{"commutingWithAll", "=", 
           RowBox[{"Extract", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", "commutingWithAllPos"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"imaginaryUnits", "=", 
                RowBox[{"Select", "[", 
                 RowBox[{"commutingWithAll", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===", 
                    RowBox[{"-", "idempotent"}]}], ")"}], "&"}]}], "]"}]}], 
               ")"}], ",", 
              RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"cleanRCHList", "[", 
             RowBox[{"factors", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"imaginaryUnits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "I"}], "}"}], "}"}], 
              ",", 
              RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"hyperbolicUnits", "=", 
                  RowBox[{"Select", "[", 
                   RowBox[{"commutingWithAll", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===",
                     "idempotent"}], ")"}], "&"}]}], "]"}]}], ")"}], ",", 
                RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"cleanRCHList", "[", 
               RowBox[{"factors", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"hyperbolicUnits", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "HyperbolicUnit"}], 
                  "}"}], "}"}], ",", 
                RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], 
              ",", " ", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"toRCHFactors", "::", "CommutativeUnit"}], ",", 
                 "commutingWithAll", ",", 
                 RowBox[{"{", "remaining", "}"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ",", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "try", " ", "to", " ", "find", " ", "quaternion", " ", 
           "system"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"nonCommutingQuaternionLike", "=", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===", 
                RowBox[{"-", "idempotent"}]}], ")"}], "&"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "nonCommutingQuaternionLike", "]"}], 
            "\[GreaterEqual]", "3"}], ")"}]}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"nonCommutingWithFirstList", "=", 
               RowBox[{"Select", "[", 
                RowBox[{"nonCommutingQuaternionLike", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[GeometricProduct]", 
                    "#"}], "-", 
                    RowBox[{"#", "\[GeometricProduct]", 
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], "]"}], "=!=", 
                    "0"}], ")"}], "&"}]}], "]"}]}], ",", 
              RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"quaternionUnits", "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"nonCommutingQuaternionLike", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"nonCommutingWithFirstList", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"nonCommutingWithFirstList", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "]"}]}], 
               "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"qu", "=", 
           RowBox[{"Unique", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"cleanRCHList", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}]}], "}"}], 
            ",", 
            RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}]}], 
         "\[IndentingNewLine]", ",", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "if", " ", "quaternion", " ", "candidates", " ", "not", " ", 
           "found", " ", "leave", " ", "as", " ", "is"}], "*)"}], 
         "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"toRCHFactors", "::", "nonseparable"}], ",", 
            RowBox[{"{", "remaining", "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"cleanRCHList", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[815]:=",ExpressionUUID->"c494daba-d1ca-41e9-bd03-0e1b250c38fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeReplRule", "[", 
    RowBox[{"{", 
     RowBox[{"field_", ",", "value_"}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"factors", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Internal`SyntacticNegativeQ", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "[", 
        RowBox[{"FactorTermsList", "[", "field", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"field", ",", 
       RowBox[{"Rule", "[", 
        RowBox[{
         RowBox[{"factors", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"factors", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "*", "value"}]}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[816]:=",ExpressionUUID->"55730541-4165-4dc0-9be5-83864a153d7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"semisimpleClAlgebraQ", "[", 
    RowBox[{"alg_Cl", ",", 
     RowBox[{"theDomain", ":", 
      RowBox[{"(", 
       RowBox[{"Reals", "|", "Complexes"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{"theDomain", ",", "Reals", ",", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "-", 
          RowBox[{"2", 
           RowBox[{"Length", "[", 
            RowBox[{"gaNegativeSignatureIndexList", "[", "alg", "]"}], 
            "]"}]}]}], ")"}], ",", "4"}], "]"}], "===", "1"}], " ", ",", 
     "Complexes", ",", 
     RowBox[{"OddQ", "[", 
      RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}]}], "]"}]}],
   ";"}]], "Input",
 CellLabel->
  "In[817]:=",ExpressionUUID->"b3e532d1-2d13-4932-9d9d-6f5b59bf635f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sameTestForUnion", "[", "Reals", "]"}], "=", 
   RowBox[{"Hold", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", "#2"}], "]"}], "===", "0"}], ")"}]}], "&"}], 
     ")"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sameTestForUnion", "[", "Complexes", "]"}], "=", 
   RowBox[{"Hold", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", 
           RowBox[{"I", "*", "#2"}]}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", 
           RowBox[{"I", "*", "#2"}]}], "]"}], "===", "0"}], ")"}]}], "&"}], 
     ")"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coefficientFreedom", "[", "Reals", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coefficientFreedom", "[", "Complexes", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "I", ",", 
     RowBox[{"-", "I"}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[818]:=",ExpressionUUID->"07e42029-8425-4d9c-a50e-eec83346d934"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left ideal "
}], "Subsubsection",ExpressionUUID->"72150ce5-87ae-4aa2-a8d3-dccee38e5126"],

Cell[TextData[{
 "Function ",
 StyleBox["gaLeftIdeal[al_Cl,idempotent, order, opts] ",
  FontWeight->"Bold"],
 " returns left ideal of algebra generated using the given idempotent. "
}], "Text",ExpressionUUID->"a3025936-6284-43e5-9d45-9672198d3380"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], "=", 
    "\"\<The algebra `1` is not simple. Only half of left ideal will be \
generated.\>\""}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaLeftIdeal", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
      RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "one", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "messages"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionLeftIdeal", "[", "\"\<CoefficientDomain\>\"", "]"}], 
   "=", 
   RowBox[{"Reals", "|", "Complexes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionLeftIdeal", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionLeftIdeal", "[", 
    RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Reals", "|", "Complexes"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionLeftIdeal", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[822]:=",ExpressionUUID->"6c7c9df7-3c4d-4c07-a925-e1aa17d74f58"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaLeftIdeal", "[", 
   RowBox[{"idempotent_", ",", 
    RowBox[{"order", ":", 
     RowBox[{"(", 
      RowBox[{
      "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
       "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
       "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
       "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
       "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
       "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"alg", "=", 
        RowBox[{"gaGetAlgebra", "[", "idempotent", "]"}]}], ",", "rawAnswer", 
       ",", "answer", ",", "semisimpleQ"}], "}"}], ",", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaLeftIdeal", ",", "#", ",", "theOption"}], "}"}], ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionLeftIdeal", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaLeftIdeal", ",", "CoefficientDomain"}], "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaLeftIdeal", "]"}]}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"semisimpleQ", "=", 
       RowBox[{"semisimpleClAlgebraQ", "[", 
        RowBox[{"alg", ",", 
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"semisimpleQ", "&&", 
         RowBox[{"(", 
          RowBox[{"!", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ")"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], ",", "alg"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Warn", " ", "when", " ", "idempotent", " ", "contains", " ", 
        "complex", " ", "number", " ", "and", " ", "CoefficientDomain", " ", 
        "is", " ", "set", " ", "to", " ", "Reals"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===",
            "Reals"}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"idempotent", ",", "_Complex"}], "]"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Warning! gaIdempotent and gaLeftIdeal has different setting \
of CoefficientDomain! Hope you know what you are doing.\>\"", " ", ",", 
            "Red"}], "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "orthonormal", " ", "basis", " ", "of", " ", "required", 
         " ", "ordering", " ", "is", " ", "not", " ", "defined"}], ",", " ", 
        RowBox[{"then", " ", "define"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alg", ",", "order", ",", "All"}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"alg", ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "order"}], ",", 
          
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rawAnswer", "=", 
       RowBox[{"Union", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"gaPE", "[", 
             RowBox[{"(", 
              RowBox[{"#", "\[GeometricProduct]", "idempotent"}], ")"}], 
             "]"}], "&"}], "/@", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"alg", ",", "order", ",", "All"}], "]"}]}], ")"}], ",", 
         RowBox[{"SameTest", "\[Rule]", 
          RowBox[{"ReleaseHold", "[", 
           RowBox[{"sameTestForUnion", "[", 
            RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
            "]"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "complex", " ", "algebras", " ", "make", " ", "scalar", 
        " ", "part", " ", "real"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===", 
         "Complexes"}], ",", 
        RowBox[{"rawAnswer", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", "#", "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "===", "Complex"}], 
             ",", 
             RowBox[{"Expand", "[", 
              RowBox[{
               RowBox[{"(", "I", ")"}], "*", "#"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "rawAnswer"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "make", " ", "scalar", " ", "part", " ", "positive", " ", "an", " ", 
        "sort"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"gaSort", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Internal`SyntacticNegativeQ", "[", 
              RowBox[{"Expand", "[", "#", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], "&"}], "/@",
           "rawAnswer"}], ",", "order"}], "]"}]}]}]}], "\[IndentingNewLine]", 
    "]"}], "/;", 
   RowBox[{"idempotent", "=!=", "1"}]}]}]], "Input",
 CellLabel->
  "In[828]:=",ExpressionUUID->"d1a54c89-0c5c-47bd-a0f6-05ae4a5c9a94"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"gaRunningAlgebra", ",", "order", ",", "All"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[829]:=",ExpressionUUID->"9ccab754-5c14-490c-af12-d97668f0c73f"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Double sided (bilateral) ideal"
}], "Subsubsection",ExpressionUUID->"96041e09-1730-4586-a599-a2b3e68ceeda"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDoubleSidedIdeal", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
      RowBox[{"OutputForm", "\[Rule]", "\"\<ElementsOnly\>\""}], ",", 
      RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "one", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "messages"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionDoubleSidedIdeal", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
   RowBox[{"Reals", "|", "Complexes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDoubleSidedIdeal", "[", "\"\<OutputForm\>\"", "]"}], 
   "=", 
   RowBox[{
   "\"\<ElementsOnly\>\"", "|", "\"\<ElementsWithInterpretation\>\"", "|", 
    "\"\<ElementsReplacementRules\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDoubleSidedIdeal", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDoubleSidedIdeal", "[", 
    RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Reals", "|", "Complexes"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDoubleSidedIdeal", "[", 
    RowBox[{"\"\<OutputForm\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<ElementsOnly\>\"", "|", "\"\<ElementsWithInterpretation\>\"", "|", 
      "\"\<ElementsReplacementRules\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDoubleSidedIdeal", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[830]:=",ExpressionUUID->"2132d6b2-c08d-4339-82a2-a15e76083af0"],

Cell["\<\
Output form \[OpenCurlyDoubleQuote]ElementsReplacementRules\
\[CloseCurlyDoubleQuote] is used for computation of ideal basis, all other \
forms being for investigation\
\>", "Text",ExpressionUUID->"d4b0fd2f-3f55-4121-a87b-e462b32139de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDoubleSidedIdeal", "[", 
   RowBox[{
    RowBox[{"idempotent_", "?", "gaIdempotentQ"}], ",", "leftideal_List", ",", 
    RowBox[{"order", ":", 
     RowBox[{"(", 
      RowBox[{
      "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
       "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
       "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
       "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
       "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
       "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "theOption", ",", "theFieldAndName", ",", "half1", ",", "theSortedField",
       ",", "rawAnswer", ",", "answer"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gaDoubleSidedIdeal", ",", "#", ",", "theOption"}], "}"}], 
         ",", 
         RowBox[{
          RowBox[{"gaOptionCheck", "[", "testOptionDoubleSidedIdeal", "]"}], 
          "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "[", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}], 
        "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"CoefficientDomain", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDoubleSidedIdeal", ",", "CoefficientDomain"}], "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"OutputForm", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDoubleSidedIdeal", ",", "OutputForm"}], "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"Options", "[", "gaDoubleSidedIdeal", "]"}]}], ")"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"rawAnswer", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"idempotent", "\[GeometricProduct]", "#"}], "]"}], 
             "&"}], "/@", "leftideal"}], ")"}], ",", 
          RowBox[{"SameTest", "\[Rule]", 
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"sameTestForUnion", "[", 
             RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
             "]"}], "]"}]}]}], "]"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "for", " ", "complex", " ", "algebras", " ", "make", " ", "scalar", " ",
        "part", " ", "real"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===", 
        "Complexes"}], ",", 
       RowBox[{"rawAnswer", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{
                RowBox[{"Expand", "[", "#", "]"}], ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "===", "Complex"}], 
            ",", 
            RowBox[{"Expand", "[", 
             RowBox[{
              RowBox[{"(", "I", ")"}], "*", "#"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "rawAnswer"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "make", " ", "scalar", " ", "part", " ", "positive", " ", "an", " ", 
       "sort"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"theSortedField", "=", 
      RowBox[{"gaSort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Internal`SyntacticNegativeQ", "[", 
             RowBox[{"Expand", "[", "#", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], "&"}], "/@",
          "rawAnswer"}], ",", "order"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<The sort order is \>\"", ",", "order"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<The sorted bilateral ideal is \>\"", ",", "theSortedField"}], 
          "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", "interpretation", " ", "was", " ", "requested"}], 
       ",", " ", 
       RowBox[{"do", " ", "aaditional", " ", "job"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "=!=", 
        "\"\<ElementsOnly\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theFieldAndName", "=", 
         RowBox[{"getRCHFactor", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"Expand", "/@", "theSortedField"}], ",", " ", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "idempotent", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"half1", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Outer", "[", 
                 RowBox[{"GeometricProduct", ",", "#", ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Transpose", "[", 
                RowBox[{"(", 
                 RowBox[{"theFieldAndName", "/.", 
                  RowBox[{"{", 
                   RowBox[{"HyperbolicUnit", "\[Rule]", "1"}], "}"}]}], ")"}],
                 "]"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{"Transpose", "[", 
          RowBox[{"(", 
           RowBox[{"makeReplRule", "/@", 
            RowBox[{"(", 
             RowBox[{"Union", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Internal`SyntacticNegativeQ", "[", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Transpose", "[", "half1", "]"}]}], "]"}], ")"}]}], 
           ")"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"make", " ", "requested", " ", "answer", " ", "form"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], ",", 
       "\[IndentingNewLine]", "\"\<ElementsOnly\>\"", ",", "theSortedField", 
       ",", "\[IndentingNewLine]", "\"\<ElementsWithInterpretation\>\"", ",", 
       
       RowBox[{"UndirectedEdge", "@@@", "theFieldAndName"}], ",", 
       "\[IndentingNewLine]", "\"\<ElementsReplacementRules\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Ordering", " ", "in", " ", "answer", " ", "and", " ", 
          "theSortedField", " ", 
          RowBox[{
           RowBox[{"differ", "!!"}], "!"}], " ", "In", " ", "answer", " ", 
          "they", " ", "are", " ", "ordered", " ", "by", " ", 
          RowBox[{"meaning", ":", " ", "scalar"}]}], ",", " ", "imaginary", 
         ",", " ", "Q"}], " ", "*)"}], "\[IndentingNewLine]", "answer", ",", 
       "\[IndentingNewLine]", "_", ",", "theSortedField"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[837]:=",ExpressionUUID->"a53f6062-30fe-437d-b029-bac818bfe878"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left ideal basis"
}], "Subsubsection",ExpressionUUID->"cc1c688a-a953-4ad1-8c00-207a00d3d390"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], "=", 
   "\"\<The algebra `1` is not simple. Only one instance of left ideal basis \
is generated.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
      RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "one", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "messages"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionLeftIdealBasis", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
   RowBox[{"Reals", "|", "Complexes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionLeftIdealBasis", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionLeftIdealBasis", "[", 
    RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Reals", "|", "Complexes"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionLeftIdealBasis", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->
  "In[838]:=",ExpressionUUID->"d8204356-31ec-41bf-85a3-329d71af5919"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "[", 
    RowBox[{"leftIdeal_", ",", "fieldOnly_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theOption", ",", 
        RowBox[{"alg", "=", 
         RowBox[{"gaGetAlgebra", "[", "fieldOnly", "]"}]}], ",", 
        "semisimpleQ", ",", "theLeftMinimaIdealBasisA"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaSetNamedOptionValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"gaLeftIdealBasis", ",", "#", ",", "theOption"}], "}"}], 
           ",", 
           RowBox[{
            RowBox[{"gaOptionCheck", "[", "testOptionLeftIdealBasis", "]"}], 
            "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
               "}"}]}], ")"}], "]"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
          "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"Flatten", "[", 
          RowBox[{"First", "/@", 
           RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
           "]"}], "===", "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"CoefficientDomain", "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaLeftIdealBasis", ",", "CoefficientDomain"}], "]"}]}], 
           ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}]}], ")"}]}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"semisimpleQ", "=", 
        RowBox[{"semisimpleClAlgebraQ", "[", 
         RowBox[{"alg", ",", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"semisimpleQ", "&&", 
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ")"}]}], ",", 
         
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], ",", "alg"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"theLeftMinimaIdealBasisA", "=", 
        RowBox[{"gaSort", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"leftIdeal", ",", 
            RowBox[{"SameTest", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Expand", "/@", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{
                    RowBox[{"coefficientFreedom", "[", 
                    RowBox[{
                    "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
                    "]"}], "*", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "x"}], "]"}], "]"}]}]}], "]"}], "/@", 
                    RowBox[{"(", "fieldOnly", ")"}]}], "]"}]}], ")"}], ",", 
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#2", "]"}], "]"}]}], "]"}], "&"}], 
              ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", "order"}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<The sort order is \>\"", ",", "order"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<The sorted left minimal ideal is \>\"", ",", 
             "theLeftMinimaIdealBasisA"}], "}"}]}], "\[IndentingNewLine]", 
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "theLeftMinimaIdealBasisA"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"leftIdeal", "=!=", "fieldOnly"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[844]:=",ExpressionUUID->"4515f70e-fd90-4284-90ae-48aaaefc5f59"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "[", 
    RowBox[{"leftIdeal_", ",", "fieldOnly_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "theOption", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaSetNamedOptionValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"gaLeftIdealBasis", ",", "#", ",", "theOption"}], "}"}], 
           ",", 
           RowBox[{
            RowBox[{"gaOptionCheck", "[", "testOptionLeftIdealBasis", "]"}], 
            "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
               "}"}]}], ")"}], "]"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
          "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"Flatten", "[", 
          RowBox[{"First", "/@", 
           RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}]}], ")"}]}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<The left minimal ideal basis is \>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", "1", "}"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"leftIdeal", "===", "fieldOnly"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[845]:=",ExpressionUUID->"0bc372bd-4879-41a1-9608-420aebbe9d76"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Spinors"
}], "Subsection",ExpressionUUID->"9da2536e-5255-40c8-9d5f-6c80a71c9ba9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSpinor", "::", "idempotent"}], "=", 
   "\"\<Provided idempotents `1` do not pass gaIdempotendQ[] test.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSpinor", "::", "gaSpinorIdempotentOptionValue"}], "=", 
    "\"\<Provided gaSpinorIdempotent value `1` should not exceed the number \
of  mutually anihilating idempotents `2`. Will use \
gaSpinorIdempotent->1.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSpinor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaPrimitiveIdempotent", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"StartingElement", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}]}], 
       "}"}]}], ",", 
     RowBox[{
     "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "\[Rule]", 
      
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"gaSpinorIdempotent", "\[Rule]", "1"}], ",", 
     RowBox[{"GeneratedParameters", "\[Rule]", "C"}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "->", "\"\<RevLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "\[Rule]", 
      "\"\<InvLex\>\""}], ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[846]:=",ExpressionUUID->"51869ead-39dc-4326-b16e-f284363edc72"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"simpleOptions", ":", " ", 
    RowBox[{
    "one", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
     " ", "messages"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionSpinor", "[", 
      "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"", 
      "]"}], "=", 
     "\"\<Explicit list of structure: {idempotent, left ideal basis, double \
sided ideals}\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
     "=", "\"\<Positive integer less than number of idempotents of \
algebra\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", "\"\<GeneratedParameters\>\"", "]"}], 
     "=", "\"\<Symbol without value\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionSpinor", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
     "=", "\"\<Should be one of possible GA orderings: \
(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\
\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\
\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\") \
or \\\"None\\\". \>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionSpinor", "[", 
      "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
      "]"}], "=", 
     "\"\<Should be one of possible GA orderings: \
(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\
\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\
\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\") \
or \\\"None\\\". \>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
     RowBox[{"Reals", "|", "Complexes"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", "\"\<Quiet\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
     " ", "actual", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{
      "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"", 
       ",", "val_"}], "]"}], ":=", "True"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"no", " ", "explicit", " ", 
     RowBox[{"check", ":", " ", 
      RowBox[{"complicated", " ", "structure"}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<gaSpinorIdempotent\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"IntegerQ", "[", "val", "]"}], "&&", 
      RowBox[{"Positive", "[", "val", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<GeneratedParameters\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Head", "[", "val", "]"}], "===", "Symbol"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<gaNonCommutativeMonomialOrder\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<None\>\"", "|", "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", 
        "\"\<RevLex\>\"", "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", 
        "|", "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{
      "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", ",", 
       "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<None\>\"", "|", "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", 
        "\"\<RevLex\>\"", "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", 
        "|", "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Reals", "|", "Complexes"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[849]:=",ExpressionUUID->"ef405b22-30c8-406c-860d-1121402f3ade"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSpinor", "[", 
   RowBox[{"alg_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "gaSpinor", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theOption", ",", "\[IndentingNewLine]", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"OptionValue", "[", "gaPrimitiveIdempotent", "]"}]}], ",", 
      "mutuallyAnihilatingIdempotentsFull", ",", "\[IndentingNewLine]", 
      "mutuallyAnihilatingIdempotents", ",", "theIdempotent", ",", 
      "leftIdeal", ",", "divisionRing", ",", "idealBasis", ",", 
      "lengthOfIdealBasis", ",", "lengthOfDivisionRing", ",", "spinorCoeffs", 
      ",", "divisionRingPrecomp", ",", 
      "lengthOfMutuallyAnihilatingIdempotents", ",", "semisimpleQ"}], "}"}], 
    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "there", " ", "is", " ", "a", " ", "problem", " ", "to", " ", "define", 
       " ", "complex", " ", "option", " ", "gaPrimitiveIdempotent"}], ",", 
      " ", 
      RowBox[{
      "fall", " ", "back", " ", "to", " ", "traditional", " ", "method"}]}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gaSpinor", ",", "#", ",", "theOption"}], "}"}], ",", 
         RowBox[{
          RowBox[{"gaOptionCheck", "[", "testOptionSpinor", "]"}], "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "[", 
        RowBox[{"First", "/@", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "opts", "}"}], ",", 
           RowBox[{"(", 
            RowBox[{"gaPrimitiveIdempotent", "\[Rule]", "_"}], ")"}]}], 
          "]"}]}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "gaPrimitiveIdempotent", " ", "suboptions", " ", "is", " ", "tested", 
       " ", "separately"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"theIdempotentSetting", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "__"}], "}"}], "|", 
          RowBox[{"{", 
           RowBox[{"\"\<Automatic\>\"", ",", "__"}], "}"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
          "gaOptionCheck", "[", "testOptionPrimitiveIdempotent", "]"}], "[", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", 
            RowBox[{"Rest", "[", "theIdempotentSetting", "]"}], ",", "#"}], 
           "]"}], "]"}], "&"}], "/@", 
        RowBox[{"First", "/@", 
         RowBox[{"Rest", "[", "theIdempotentSetting", "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "set", " ", "unset", " ", "values", " ", "for", " ", "simple", " ", 
       "options"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", 
          "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"\
", "]"}], "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", 
         "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
         "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{
           "gaSpinor", ",", 
            "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals"}], 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}], 
        "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"CoefficientDomain", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaSpinor", ",", "CoefficientDomain"}], "]"}]}], ")"}]}]}],
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], "]"}],
         "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"gaSpinorIdempotent", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaSpinor", ",", "gaSpinorIdempotent"}], "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"GeneratedParameters", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaSpinor", ",", "GeneratedParameters"}], "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaSpinor", ",", "gaNonCommutativeMonomialOrder"}], 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", 
          "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
          "]"}], "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", 
         "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
         "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "/.", 
          RowBox[{"Options", "[", 
           RowBox[{
           "gaSpinor", ",", 
            "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder"}], 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"Options", "[", "gaSpinor", "]"}]}], ")"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "determine", " ", "if", " ", "precomputed", " ", "structure", " ", 
        "is", " ", "provided"}], ",", " ", 
       RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Idempotents are determined using settings \>\"", ",", 
          "theIdempotentSetting"}], "}"}], "\[IndentingNewLine]", "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "depending", " ", "on", " ", "theIdempotentSetting", " ", "compute", 
       " ", "primitive", " ", "idempotents", " ", "or", " ", "use", " ", 
       "already", " ", "provided", " ", "idemponents"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
        "theOption", "[", 
         "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"",
          "]"}], "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{"theIdempotentSetting", ",", "\[IndentingNewLine]", 
          RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mutuallyAnihilatingIdempotentsFull", "=", 
            RowBox[{"gaPrimitiveIdempotent", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"alg", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"DeleteDuplicatesBy", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "OutputForm", "\[Rule]", "\"\<AllSignatures\>\""}], ",", 
                    RowBox[{"CoefficientDomain", "\[Rule]", 
                    RowBox[{
                    "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"gaPrimitiveIdempotent", "/.", 
                    RowBox[{
                    "Options", "[", 
                    "defineMatrixRepresentationIdealBasisMethod", "]"}]}], 
                    ")"}], "/.", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
                    "any___"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", "any", "}"}]}]}]}], "}"}], "]"}], ",", 
                   "First"}], "]"}], ")"}]}], "}"}], "]"}]}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "__"}], "}"}], "|", 
           RowBox[{"{", 
            RowBox[{"\"\<Automatic\>\"", ",", "__"}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mutuallyAnihilatingIdempotentsFull", "=", 
            RowBox[{"gaPrimitiveIdempotent", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"alg", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"DeleteDuplicatesBy", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "OutputForm", "\[Rule]", "\"\<AllSignatures\>\""}], ",", 
                    RowBox[{"Rest", "[", "theIdempotentSetting", "]"}], ",", 
                    RowBox[{"CoefficientDomain", "\[Rule]", 
                    RowBox[{
                    "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"gaPrimitiveIdempotent", "/.", 
                    RowBox[{
                    "Options", "[", 
                    "defineMatrixRepresentationIdealBasisMethod", "]"}]}], 
                    ")"}], "/.", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
                    "any___"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", "any", "}"}]}]}]}], "}"}], "]"}], ",", 
                   "First"}], "]"}], ")"}]}], "}"}], "]"}]}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{"#", ",", "gaIdempotentQ"}], "]"}], "&"}], ")"}]}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "mutuallyAnihilatingIdempotents", "=", "theIdempotentSetting"}], 
          ",", "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaSpinor", "::", "idempotent"}], ",", 
             "theIdempotentSetting"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\n", "\t", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Pick", "[", 
          RowBox[{"mutuallyAnihilatingIdempotentsFull", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"PossibleZeroQ", "[", "#", "]"}], "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"gaPE", "/@", "mutuallyAnihilatingIdempotentsFull"}], 
             ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "mutuallyAnihilatingIdempotents"}], 
         ")"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "all", " ", "left", " ", "ideals"}], "   ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<The primitive idempotent is \>\"", ",", 
              "mutuallyAnihilatingIdempotents"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Starting computation of all left ideals, which correspond \
to idempotents \>\"", ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}],
                  "}"}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"leftIdeal", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaLeftIdeal", "[", 
              RowBox[{"#", ",", 
               RowBox[{
               "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                "]"}], ",", 
               RowBox[{"CoefficientDomain", "->", 
                RowBox[{
                "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], ",", 
               RowBox[{"Quiet", "\[Rule]", 
                RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}]}], "]"}], 
             "&"}], "/@", "mutuallyAnihilatingIdempotents"}], ")"}]}], ")"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "the", " ", "all", " ", "double", " ", "sided", " ", "ideals"}], 
         "  ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Starting computation of all bilateral ideals, which \
correspond to idempotents \>\"", ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                "}"}]}], "]"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], "=", 
            RowBox[{
             RowBox[{"gaDoubleSidedIdeal", "[", 
              RowBox[{
               RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
               RowBox[{"leftIdeal", "[", "d", "]"}], ",", 
               RowBox[{
               "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
                "]"}], ",", 
               RowBox[{"CoefficientDomain", "->", 
                RowBox[{
                "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], ",", 
               RowBox[{"Quiet", "\[Rule]", 
                RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
               RowBox[{
               "OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}], 
              "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
            "}"}]}], "]"}], ")"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", 
          RowBox[{"basis", ":", " ", 
           RowBox[{"only", " ", "one", " ", "needed"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<Starting computation of ideal basis, which correspond the \
requested idempotent gaSpinorIdempotent\[Rule]\>\"", ",", 
              RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}]}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<The idempotent is \>\"", ",", 
              RowBox[{"theIdempotent", "[", 
               RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
               "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], ">", 
           RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaSpinor", "::", "gaSpinorIdempotentOptionValue"}], ",",
              " ", 
             RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
             ",", 
             RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}],
             "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
            "=", "1"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"idealBasis", "[", 
           RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
           "]"}], "=", "\[IndentingNewLine]", 
          RowBox[{"gaLeftIdealBasis", "[", 
           RowBox[{
            RowBox[{"leftIdeal", "[", 
             RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
             "]"}], ",", 
            RowBox[{"divisionRing", "[", 
             RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
             "]"}], ",", 
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            ",", 
            RowBox[{"CoefficientDomain", "->", 
             RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
            ",", 
            RowBox[{"Quiet", "\[Rule]", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}]}], "]"}]}], 
         ")"}], ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"precomputed", " ", 
          RowBox[{"input", ":", " ", 
           RowBox[{"no", " ", "checks"}]}]}], ",", " ", 
         RowBox[{"we", " ", "trust", " ", "the", " ", "user"}]}], " ", "*)"}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<Option \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals with user input in \
gaSpinor! No check! Most options will be ignored!\>\"", " ", ",", "Red"}], 
              "]"}], ",", 
             RowBox[{
             "theOption", "[", 
              "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\
\>\"", "]"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], "=", 
         RowBox[{
          RowBox[{
          "theOption", "[", 
           "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"\
", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{
          RowBox[{
          "theOption", "[", 
           "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"\
", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", 
          RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
          "]"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", 
            "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\
\"", "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"divisionRingPrecomp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", 
            "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\
\"", "]"}], "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Evaluate", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"d", ",", 
              RowBox[{"Length", "[", "divisionRingPrecomp", "]"}]}], "}"}]}], 
           "]"}], "]"}], "=", "divisionRingPrecomp"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", 
        RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "in", " ", "semisimple", " ", "real", " ", "algebra", " ", "case", " ", 
       "we", " ", "enlarge", " ", "ideal", " ", "basis", " ", "by", " ", 
       "grade", " ", "inverted", " ", "part"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"semisimpleQ", "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "===",
           "Reals"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], ",", 
            "alg"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", 
          RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
          "]"}], "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"idealBasis", "[", 
             RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
             "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"idealBasis", "[", 
              RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
              "]"}]}]}], "}"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"idealBasis", "[", 
        RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], "]"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lengthOfDivisionRing", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"divisionRing", "[", "1", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"name", " ", "free", " ", "coefficients"}], ",", " ", 
       RowBox[{
       "which", " ", "will", " ", "appear", " ", "in", " ", "final", " ", 
        "spinor", " ", "expression"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"spinorCoeffs", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}], 
           "[", "i", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"lengthOfIdealBasis", "*", "lengthOfDivisionRing"}]}], 
           "}"}]}], "]"}], ",", "lengthOfDivisionRing"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<The general column spinor free coefficients are named \
SpinorCoefficientName\[Rule]\>\"", ",", 
           RowBox[{"theOption", "[", "\"\<GeneratedParameters\>\"", "]"}]}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<The column spinor coefficients are \>\"", ",", 
           "spinorCoeffs"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"spinorCoeffs", "[", 
            RowBox[{"[", "u", "]"}], "]"}], "[", 
           RowBox[{"[", "k", "]"}], "]"}], "*", 
          RowBox[{"gaPE", "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"divisionRing", "[", "d", "]"}], "[", 
               RowBox[{"[", "k", "]"}], "]"}], ")"}], "\[GeometricProduct]", 
             RowBox[{
              RowBox[{"idealBasis", "[", 
               RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
               "]"}], "[", 
              RowBox[{"[", "u", "]"}], "]"}]}], ")"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"divisionRing", "[", 
             RowBox[{"theOption", "[", "\"\<gaSpinorIdempotent\>\"", "]"}], 
             "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"u", ",", "lengthOfIdealBasis"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
          "}"}]}], "]"}], ",", 
       RowBox[{"Flatten", "[", "spinorCoeffs", "]"}], ",", "Factor"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[863]:=",ExpressionUUID->"0e8a08fa-b6e2-47b2-9ddc-c88669648bb5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[864]:=",ExpressionUUID->"96bf7a12-2465-47ed-a4c0-1ee77155c9c0"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Tensor products and matrix representation of algebra"
}], "Section",ExpressionUUID->"1a5eceee-b69b-4f22-96c7-8e73e72a41a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTensorProduct", ",", "gaAlgebraMultiplicationTable", ",", 
     "gaToTensorProduct", ",", "gaFromTensorProduct", ",", 
     "gaDefineMatrixRepresentation", ",", "ReductionOrder", ",", 
     "gaMatrixRepresentation", ",", "gaToMatrixRepresentation", ",", 
     "gaFromMatrixRepresentation", ",", "gaFieldFactor", ",", 
     "gaListDefinedElementaryRepresentations", ",", "BasisVectorsMultipliers",
      ",", "BasisVectorsReordering", ",", "BaseVectorAlgebra", ",", 
     "TargetMatrices", ",", "QuaternionIsomorphismRules", ",", 
     "MatrixOuterProductOrder", ",", "ElementaryRepresentations", ",", 
     "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", 
     ",", "gaSemisimpleAlgebraExtension", ",", "gaReplaceDivisionRing", ",", 
     "gaIdealBasisReordering", ",", "gaIdealBasisMultipliers", ",", 
     "gaIsomorphicGAsQ"}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[865]:=",ExpressionUUID->"94c59a73-0d0a-4e85-9324-d6b5a0a0358c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[866]:=",ExpressionUUID->"b3f75340-83d6-4f56-84d9-1dce12ac7c2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "::", "usage"}], "=", 
   "\"\<gaTensorProduct[any1,any2] is a notation for any1 \[CircleTimes] \
any2.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[868]:=",ExpressionUUID->"3c0352af-5991-4289-8f2d-bdcef561871f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "::", "usage"}], "=", 
   "\"\<gaAlgebraMultiplicationTable[algebra] prints algebras multiplication \
table. Option gaGradesOnly->{{},{},...} selects only elements of grades \
{{0},{1},{2},...\>\""}], ";"}]], "Input",
 CellLabel->
  "In[869]:=",ExpressionUUID->"05536d25-65ec-49d0-bf5d-5596468379be"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "usage"}], "=", 
   "\"\<gaToTensorProduct[(algebra|gaTensorProduct),opts_\
ReductionAlgebrasOrder] decomposes given algebra into product of algebras \
with p+q=0, i.e. algebras Cl[0,2,0],Cl[1,1,0],Cl[2,0,0]. These reduction \
algebras can be specified with an option in the form of list \
Order->{__algebras} or list of lists \
Order->{{__algebraList1},{__algebraList2},...}. In the first case reduction \
process takes  algebra one by one until list is exhausted. The second form \
aplies reduction cyclically, first using all algebras in the list \
algebraList1, then in algebraList2, ...\>\""}], ";"}]], "Input",
 CellLabel->
  "In[870]:=",ExpressionUUID->"0e8a696a-6c76-4943-bb77-2ae201723d80"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "::", "usage"}], "=", 
   "\"\<gaFromTensorProduct[algebra_gaTensorProduct] returs Clifford algebra, \
which is isomorphics to tensors products of given algebras, i.e. is oposite \
to gaToTensorProduct[ ]. \>\""}], ";"}]], "Input",
 CellLabel->
  "In[871]:=",ExpressionUUID->"4e18438a-e695-4fe8-a9f1-b92ee04def53"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<Unfinished. gaDefineMatrixRepresentation[al_Cl] or \
gaDefineMatrixRepresentation[baseVectorRepresentation_List] constructs matrix \
representation of algebra. \nThe syntax \
gaDefineMatrixRepresentation[al_gaTensorProduct], first calculates direct \
product representation of product al_gaTensorProduct into elementary algebras \
of p+q<=2. Then uses direct product of matrix representation of these \
algebras. When user provides matrix representations of base vectors as a list \
baseVectorRepresentation, all other elements are simply obtained multiplying \
the matrices of these vectors.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<Option for how to select elementary reps.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", "::",
     "usage"}], "=", 
   "\"\<Method suboption of gaDefineMatrixRepresentation. Can be used to \
provide direct data for matrix representation computations. Usage: Method\
\[Rule]{\\\"IdealBasis\\\", \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\[Rule]\
dataMajorana}, where dataMajorana is a list of three elements {the \
idempotent, the ideal basis, the double sided ideal (with element replacement \
rules)}. See detailed example for Dirac, Majorana and chiral representation \
calculation for Cl[1,3].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSemisimpleAlgebraExtension", "::", "usage"}], "=", 
   "\"\<Method suboption of gaDefineMatrixRepresentation for semisimple \
algebras (odd algebras for complex field and p-q=1 mod 4 for real field). \
Usage: Method\[Rule]{\\\"IdealBasis\\\", \
gaSemisimpleAlgebraExtension->\\\"GradeInvertedLast\\\"|\\\"\
GradeInvertedFirst\\\"}, decide where to put grade inverted ideal basis block \
(after of before) computed ideal basis block.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaReplaceDivisionRing", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation.  \
gaReplaceDivisionRing\[Rule]True|False decides if a double sided ideal in the \
matrix representation should be replaced by its interpretation by standard \
division rings (R, C and H) or should be left as is. If interpretation is \
unknown, do nothing.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIdealBasisReordering", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which reorders ideal basis \
by given order. gaIdealBasisMultipliers option acts before reaordering takes \
place.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIdealBasisMultipliers", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which multiplies ideal basis \
elements by given numbers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BasisVectorsReordering", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which reorders basis \
vectors. Should not be confused with similar option, which reorders elements \
of ideal basis.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaDefineMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
command.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[872]:=",ExpressionUUID->"995b814d-9fd4-4556-82a2-9bdf37627324"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaDefineMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
command.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[881]:=",ExpressionUUID->"fdfce7ad-9182-480b-beae-bb4def33a27c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaToMatrixRepresentation[expr, algebra] converts expression into \
matrix representation. Orthogonal base and algebras matrix representations \
should be calculated in advance (till automatic representation settings will \
be implemented).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[882]:=",ExpressionUUID->"09693627-693f-4657-b33a-7711891b5fb4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaFromMatrixRepresentation[expr_matrix, algebra,opts___] converts \
matrix representation into multivector expression. Orthogonal base and \
algebras matrix representations should be calculated in advance. The option \
CoefficientDomain, which can aquire values \\\"All\\\", \\\"Reals\\\" or \
\\\"Complexes\\\" filter the result of the obtained Tr[ ] coefficient. In \
particular, the value \\\"All\\\" do nothing (no filtering, the default), the \
 value \\\"Reals\\\" replaces pure imaginary and quaternion parts by zero.  \
The choice \\\"Complexes\\\", removes quaternions and multiply the result by \
factor 1/2 in order to compensate the doubling of the result due to imaginary \
part (in order to obtain the same answer). \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFieldFactor", "::", "usage"}], "=", 
   "\"\<Option for gaFromMatrixRepresentation and gaToMatrixRepresentation, \
which can be positive integer or Automatic. In the later case dimensional \
factor is set to 1 if all matrix elements are real, 2 if complex number is \
found or 4 in the case if matrix contains quaternion\>\""}], ";"}]}], "Input",\

 CellLabel->
  "In[883]:=",ExpressionUUID->"81617218-c397-44be-9d25-b20f16782d70"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<gaListDefinedElementaryRepresentations[algebra] or \
gaListDefinedElementaryRepresentations[algebra, representation name] return \
names (or representation itself), which can be used in \
gaDefineMatrixRepresentation[algebra_gaTensorProduct].\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[885]:=",ExpressionUUID->"dde496ea-e0b5-48c9-8d9d-f7b1d801b65d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BasisVectorsMultipliers", "::", "usage"}], "=", 
   "\"\<Option, multiplies base matrices by given scalars: Automatic, None or \
_List\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorAlgebra", "::", "usage"}], "=", 
   "\"\<Option, uses given Clifford algebra base vector representation to \
produce required algebra representation. Number of base vectors for requested \
and option provided algebras need be the same\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TargetMatrices", "::", "usage"}], "=", 
   "\"\<Option, points which type, Reals or Complexes matrices to \
prefer.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"QuaternionIsomorphismRules", "::", "usage"}], "=", 
   "\"\<subOption for gaDefineMatrixRepresentation Method, possible values \
are {\\\"Pauli[1,2]\\\", \\\"HH2R4\\\",\\\"QToRealMatrix\\\"} or True. \
Determines whether quaternions in matrices to be replaced by matrix \
representations or not.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatrixOuterProductOrder", "::", "usage"}], "=", 
   "\"\<subOption for gaDefineMatrixRepresentation Method, possible values \
are {Identity, Reverse}. Determines weather matrix (only!) sequence in the \
Outer product should be reversed or not. Not tested.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ReductionOrder", "::", "usage"}], "=", "\"\<Option, \>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[886]:=",ExpressionUUID->"892e04a4-7d31-4b14-bba7-020fbe603504"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIsomorphicGAsQ", "::", "usage"}], "=", 
   "\"\<gaIsomorphicGAsQ[algA, algB] returns True if algebras algA and algB \
are isomorphics and False otherwise. Algebras can be given in the form \
Cl[p,q,0] or in gaTensorProduct[ ] of algebras.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[892]:=",ExpressionUUID->"09695fee-f810-4506-85b2-1e4e97bd6dd3"],

Cell[TextData[{
 "One needs still to take square root of it according to Ian Porteous in \
RA-LoCGAaA, page 42. ",
 Cell[BoxData[
 " "], "Text",ExpressionUUID->"1f5cd990-d072-4bdd-81da-ea0975202088"]
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"84c69218-171a-41bc-8219-ed60ff00aca1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[893]:=",ExpressionUUID->"e47b49c9-e5e0-4a21-b4a5-fe8e39628986"],

Cell["\<\
The matrix representation section is more or less finished by functionality. \
The code, however,  in many places is awful. The ideal method needs \
considerable speedup to get representations of full periodicity table.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"e748c0f3-df64-42d6-87f5-28272dacc2b8"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation algorithm selection part"
}], "Subsection",ExpressionUUID->"b421c4a5-f9af-45e4-9e55-e86c4b1f2173"],

Cell["Help function to test if BasisVectorReordering is allowed", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"8509469b-763c-4992-80f7-fb7f7ab67d70"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"validBasisVectorsReordering", "[", 
    RowBox[{"alg_Cl", ",", "ordering_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SameQ", "@@", 
      RowBox[{"(", 
       RowBox[{"Sort", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Plus", "@@", "alg"}], ")"}], "-", 
                RowBox[{"alg", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"(", 
              RowBox[{"Plus", "@@", "alg"}], ")"}], "]"}], ",", "ordering"}], 
           "}"}]}], ")"}]}], ")"}]}], "&&", "\[IndentingNewLine]", 
     RowBox[{"SameQ", "@@", 
      RowBox[{"(", 
       RowBox[{"Sort", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"alg", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
               RowBox[{
                RowBox[{"alg", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", 
                RowBox[{"alg", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"(", 
              RowBox[{"Plus", "@@", "alg"}], ")"}], "]"}], ",", "ordering"}], 
           "}"}]}], ")"}]}], ")"}]}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[894]:=",ExpressionUUID->"65d7920f-0960-4943-8dc3-4c868e2d9d62"],

Cell["\<\
Default settings for each method. They include all possible options for each \
of methods.  Note, that gaDefineMatrixRepresentation[ ] uses general options \
(valid for all methods) and the Method option.  In turn, two known methods \
defineMatrixRepresentationTensorProductMethod[]  and \
defineMatrixRepresentationIdealBasisMethod[ ] have options which can be \
specified in the Method option of  gaDefineMatrixRepresentation[ ]. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"6ede69b5-9cd3-40d6-8030-7f30f6e16e45"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{
         "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
          "]"}]}], "}"}], "]"}]}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"BasisVectorsMultipliers", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}], ",", 
     RowBox[{"BasisVectorsReordering", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[895]:=",ExpressionUUID->"273fc9e5-4892-4c47-ac83-c973251d10b4"],

Cell["\<\
Method option check is realised in each private function separately. The \
check functions of all options are described in the main function. First the \
method option itself and method independent options.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"cd8887d5-0efb-43b3-a6e5-97861e3d7a46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "syntax", " ", "is", " ", "for", " ", 
    RowBox[{"message", ":", " ", 
     RowBox[{
     "Method", " ", "option", " ", "itself", " ", "and", " ", "method", " ", 
      "independent", " ", "options"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<Method\>\"", "]"}], 
     "=", 
     RowBox[{
     "Automatic", "|", "\"\<Automatic\>\"", "|", 
      "\"\<TensorProduct (ReductionOrder, ElementaryRepresentations, \
BaseVectorAlgebra, TargetMatrices, MatrixOuterProductOrder)\>\"", "|", 
      "\"\<IdealBasis (gaPrimitiveIdempotent, CoefficientDomain, \
gaNonCommutativeMonomialOrder, \
gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder, \
gaSemisimpleAlgebraExtension,gaReplaceDivisionRing, \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules, \
gaIdealBasisReordering, gaIdealBasisMultipliers)\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<Quiet\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<BasisVectorsMultipliers\>\"", "]"}], "=", 
     "\"\<Automatic, None or list of +1 or -1 (or list of such lists) with \
number of elements which equal to vector space dimension of the \
algebra\>\""}], ";", 
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<gaGradesOnly\>\"", 
      "]"}], "=", 
     RowBox[{
     "All", "|", "\"\<All\>\"", "|", 
      "\"\<Nonempty list of allowed grades\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<BasisVectorsReordering\>\"", "]"}], "=", 
     RowBox[{
     "None", "|", "\"\<None\>\"", "|", 
      "\"\<Permutation of basis vectors order, i.e. {2,1,3...}. You can't \
hope permute vectors with different signature.\>\""}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "syntax", " ", "is", " ", "actual", " ", 
     RowBox[{"check", ":", " ", 
      RowBox[{
      "important", " ", "for", " ", "complex", " ", "method", " ", "pattern", 
       " ", "should", " ", "be", " ", "val_String", " ", "or", " ", 
       RowBox[{"val_List", "!"}], " ", 
       RowBox[{"don", "'"}], "t", " ", 
       RowBox[{"forget", "!"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<Automatic\>\"", "|", "\"\<TensorProduct\>\"", "|", 
        "\"\<IdealBasis\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "nonstandard", " ", "suboption", " ", "check", " ", "for", " ", "this", 
     " ", 
     RowBox[{"function", "!"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<Method\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", "val___Rule"}], "}"}]}], "]"}], 
     ":=", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"First", "/@", 
        RowBox[{"{", "val", "}"}]}], ",", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "ElementaryRepresentations", ",", "BaseVectorAlgebra", ",", 
            "TargetMatrices", ",", "ReductionOrder", ",", 
            "MatrixOuterProductOrder", ",", "QuaternionIsomorphismRules"}], 
           "}"}], ",", "#"}], "]"}], "&"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<Method\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<IdealBasis\>\"", ",", "val___Rule"}], "}"}]}], "]"}], ":=", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"First", "/@", 
        RowBox[{"{", "val", "}"}]}], ",", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "gaPrimitiveIdempotent", ",", 
            "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRu\
les", ",", "gaNonCommutativeMonomialOrder", ",", 
            "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", ",", 
            "gaSemisimpleAlgebraExtension", ",", "CoefficientDomain", ",", 
            "gaReplaceDivisionRing", ",", "gaIdealBasisReordering", ",", 
            "gaIdealBasisMultipliers"}], "}"}], ",", "#"}], "]"}], "&"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<Method\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}]}], "]"}], ":=", "False"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "refuse", " ", "to", " ", "accept", " ", "any", " ", "not", " ", 
     "explicitly", " ", "listed", " ", "suboptions"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"options", ",", " ", 
     RowBox[{"which", " ", 
      RowBox[{"don", "'"}], "t", " ", "have", " ", "suboptions"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<BasisVectorsMultipliers\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"\"\<Automatic\>\"", "|", "Automatic", "|", "None"}]}], 
        "]"}], "||", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", "val", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], "]"}], "===", 
        "2"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<gaGradesOnly\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"\"\<All\>\"", "|", "All", "|", 
        RowBox[{"{", 
         RowBox[{"__Integer", "?", "Positive"}], "}"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<BasisVectorsReordering\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"None", "|", "\"\<None\>\""}]}], "]"}], "||", 
       RowBox[{"PermutationListQ", "[", "val", "]"}]}], ")"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[896]:=",ExpressionUUID->"b59a1153-301d-49aa-97ad-72b8c17149dd"],

Cell["\<\
Here we only decide which method is used. All other options are set in the \
corresponding method function, which is not public, however.\
\>", "Text",ExpressionUUID->"dec5b4a7-2680-4dcf-b3ca-f415baa0d684"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "[", 
    RowBox[{
     RowBox[{"alg", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"aMethod", "=", 
        RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", "theMethod", ",", 
       "methodOpts", ",", "theOtherOptions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "take", " ", "all", " ", "options", " ", "and", " ", "separate", " ", 
       RowBox[{"(", 
        RowBox[{"with", " ", "completeion"}], ")"}], " ", "method", " ", 
       "options", " ", "and", " ", "other", " ", "options"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "gaDefineMatrixRepresentation", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionDefineMatrixRepresentation", 
            "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{"BasisVectorsMultipliers", "/.", 
           RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{"BasisVectorsReordering", "/.", 
           RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"theOtherOptions", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
         RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
         ",", 
         RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
         RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "separate", " ", "Method", " ", "and", " ", "its", " ", "options"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "aMethod", "]"}], "===", "List"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"theMethod", ",", "methodOpts"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", "aMethod", "]"}], ",", 
           RowBox[{"Rest", "[", "aMethod", "]"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"theMethod", "=", "aMethod"}], ";", 
         RowBox[{"methodOpts", "=", 
          RowBox[{"{", "}"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"call", " ", "proper", " ", "method", " ", "functions"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"theMethod", ",", "\[IndentingNewLine]", 
        RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
        RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
         RowBox[{"alg", ",", "theOtherOptions"}], "]"}], ",", 
        "\[IndentingNewLine]", "\"\<TensorProduct\>\"", ",", 
        RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
         RowBox[{"alg", ",", "theOtherOptions", ",", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"FilterRules", "[", 
            RowBox[{"methodOpts", ",", 
             RowBox[{
             "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
              "]"}]}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        "\"\<IdealBasis\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "alg", "]"}], "===", "Cl"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
           RowBox[{"alg", ",", "theOtherOptions", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{"methodOpts", ",", 
               RowBox[{
               "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
                "]"}]}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
           RowBox[{
            RowBox[{"gaFromTensorProduct", "[", "alg", "]"}], ",", 
            "theOtherOptions", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{"methodOpts", ",", 
               RowBox[{
               "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
                "]"}]}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}], 
        ",", "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[909]:=",ExpressionUUID->"1c7c3caf-7ab3-4ba1-9303-8f735c3074af"],

Cell["\<\
Calculation of matrices after vector matrices has been obtained. This part is \
the same for both methods\
\>", "Text",ExpressionUUID->"96468a92-9280-4668-9fd6-d8b45ffcae1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"oneGradeRule", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"multIndex_List", ",", "factorIndex_List"}], "}"}], ",", 
        "prevRules_List", ",", "op_", ",", "alg_"}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"multIndex", ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], "->", 
        RowBox[{"op", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], "&"}], "/@",
              "factorIndex"}], ")"}], "/.", "prevRules"}], ")"}]}]}], ")"}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "gaDefineMatrixRepresentation", "[", "baseVectorRepresentation_List", 
       "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "alg", ",", "optimizedMultiplicationOrder", ",", "opElement", ",", 
           "opMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"alg", "=", 
           RowBox[{"gaGetAlgebra", "[", "baseVectorRepresentation", "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"some", " ", "compatibility", " ", "tests"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"alg", "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
              "gaDefineMatrixRepresentation", "::", "unknownAlgebra"}], "]"}],
              ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "=!=", 
             RowBox[{"Length", "[", "baseVectorRepresentation", "]"}]}], ",", 
            
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaDefineMatrixRepresentation", "::", "lenghtmismatch"}], ",", 
               "baseVectorRepresentation", ",", "alg"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "check", " ", "if", " ", "orthonormal", " ", "basis", " ", "is", 
            " ", "available"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"alg", ",", "\"\<InvDeg[Lex]\>\"", ",", "All"}], "]"}],
               "]"}], "===", "gaOrthonormalBasis"}], ",", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"alg", ",", 
              RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
              ",", 
              RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "determine", " ", "how", " ", "to", " ", "multiply", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Last", "/@", "baseVectorRepresentation"}], ")"}], ",",
               "_bs"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
             RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "here", " ", "we", " ", "minimize", " ", "number", " ", "of", " ", 
            "matrix", " ", "multiplications", " ", "from", " ", "vector", " ",
             "matrices", " ", "to", " ", "all", " ", "algebra", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"optimizedMultiplicationOrder", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Most", "[", "#", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Last", "[", "#", "]"}], "}"}]}], "}"}]}], "}"}], 
                "&"}], "/@", 
               RowBox[{"Subsets", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], 
                  "]"}], ",", 
                 RowBox[{"{", "#", "}"}]}], "]"}]}], ")"}], "&"}], "/@", 
            RowBox[{"Rest", "[", 
             RowBox[{"Range", "[", 
              RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "use", " ", "these", " ", "order", " ", "of", " ", 
            "multiplications", " ", "to", " ", "obtain", " ", "all", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "=", 
           RowBox[{"MapAt", "[", 
            RowBox[{"Normal", ",", 
             RowBox[{"Fold", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"#1", ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"oneGradeRule", "[", 
                    RowBox[{"x", ",", "#1", ",", "opMatrix", ",", "alg"}], 
                    "]"}]}], "]"}], ",", "#2"}], "]"}]}], "}"}], "]"}], "&"}],
                ",", 
               RowBox[{"MapAt", "[", 
                RowBox[{"SparseArray", ",", "baseVectorRepresentation", ",", 
                 RowBox[{"{", 
                  RowBox[{"All", ",", "2"}], "}"}]}], "]"}], ",", 
               "optimizedMultiplicationOrder"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"MatchQ", "[", 
        RowBox[{"baseVectorRepresentation", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_bs", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], 
        "]"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[910]:=",ExpressionUUID->"d6c4b3fa-068f-4426-8cfb-03cc135e9999"],

Cell[" General  messages", "Text",ExpressionUUID->"d07f32ca-e009-4c97-9ef5-2d2d35fca7f1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "unknownAlgebra"}], "=", 
   "\"\<Unable to determine the algebra.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "lenghtmismatch"}], "=", 
   "\"\<Number of provided base vector matrices `1`, do not match the vector \
space dimension of the algebra `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], "=", 
   "\"\<Matrix representations of computed vectors are WRONG. Investigation \
needed.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "basisvectorpermutation"}], 
   "=", "\"\<The BasisVectorsReordering permutation `1` attempts to permute \
basis vectors with different signature. Negative signature index list of this \
algebra is `2`. The permutation will be ignored.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], "=", 
   "\"\<The option value `1` have to be `2`.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[911]:=",ExpressionUUID->"2683869c-5a0d-4f99-8163-03e3e6c6e4c1"],

Cell[" \[OpenCurlyDoubleQuote]IdealBasis\[CloseCurlyDoubleQuote] method \
messages", "Text",ExpressionUUID->"722a37c4-a4d0-4b05-8bf8-9c366eb6f46e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "idempotent"}], " ", "=", 
   " ", "\"\<The expression `1` provided by option PrimitiveIdempotent is not \
an idempotent. Aborting.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaDefineMatrixRepresentation", "::", "gaSemisimpleAlgebraExtension"}], 
   "=", "\"\<The block position  `1` for real field (case p-q=1 mod 4) in the \
final representation matrix can be only \\\"GradeInvertedLast\\\" (default) \
or \\\"GradeInvertedFirst\\\".\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[916]:=",ExpressionUUID->"f5015e46-e498-4b07-a0ac-d75b53617e72"],

Cell["\[OpenCurlyDoubleQuote]TensorProduct\[CloseCurlyDoubleQuote] method \
messages", "Text",ExpressionUUID->"c8c68ec7-03ea-4e29-ba44-3015f200f85e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "NoDefaultData"}], "=", 
   "\"\<No explicit default representations of elementary algebras for `1` \
was given. Possible values are are. Will use `2` .\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], "=", 
   "\"\<Provided elementary matrix representations `2` do not cover all \
algebras which appear in the tensor product `1`. Your need to provide \
elementary matrix representations for algebras `3`. Chose from posible values \
`4` from corresponding lists. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "=", 
   "\"\<Tensor product decomposition `1` contains Cl[1,0] algebra. Smaller \
(complex) representation matrices can be obtained using Method \
->{\\\"TensorProduct\\\",BaseVectorAlgebra\[Rule]`2`,TargetMatrices\[Rule]\
Reals}. The smaller matrices realizes HOMOMORPHISM of the algebra (not an \
isomorphism).\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}], 
   "=", "\"\<Option BasisVectorsMultipliers `1` has wrong number of elements. \
Expected pattern is `2`. Will use 1. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BaseVectorAlgebra"}], "=", 
   "\"\<BaseVectorAlgebra `1` has different number of vectors than algebra \
`2`. Will proceed with original algebra\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "isomorphismIRule"}], "=", 
   "\"\<Warning. Imaginary unit replacement \\\"IToRealMatrix\\\" was \
applied. It replaces explicitly elements \[PlusMinus]1 and \[PlusMinus]\
\[ImaginaryI]. For general matrices it will definitely yield wrong result. \
Please check the answer explicitly or don't use \\\"IToRealMatrix\\\" \
rules!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "isomorphismIRuleBad"}], 
   "=", "\"\<Error when trying to apply \\\"IToRealMatrix\\\" isomorphism \
rules. The rules \\\"IToRealMatrix\\\" will not be applied.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[918]:=",ExpressionUUID->"3106667a-11eb-4780-926d-baf2b5d3a0e2"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation construction by left ideals"
}], "Subsection",ExpressionUUID->"f1dbc753-d435-4a6d-b4c7-d4c5d80e2489"],

Cell["\<\
If we already have computed double sided ideal and left ideal basis we can \
avoid recomputation by providing the structure of ideal basis and double \
sided ideal with replacement rules. The function of particular method is \
hidden in the private context.\
\>", "Text",ExpressionUUID->"8a59d881-3445-4f2a-b48e-5e32bf7183ce"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"replaceFieldElement", "[", "0", "]"}], "=", "0"}], ";", 
  RowBox[{
   RowBox[{"replaceFieldElement", "[", "1", "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceFieldElement", "[", 
    RowBox[{"expr_", ",", "rules_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"Times", "@@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Internal`SyntacticNegativeQ", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "[", 
         RowBox[{"FactorTermsList", "[", "expr", "]"}], "]"}], ")"}], "/.", 
       "rules"}], ")"}]}], ")"}]}], ";"}]}], "Input",
 CellLabel->
  "In[925]:=",ExpressionUUID->"1f01aab2-4378-445b-a72d-37d60be47253"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"inversedRules", "[", "Reals", "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "1", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "2", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}]}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"inversedRules", "[", "Complexes", "]"}], "=", 
      RowBox[{"{", "}"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[927]:=",ExpressionUUID->"d314e179-4bbc-4d98-b9e4-7873d470a5b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "Options", "[", "defineMatrixRepresentationIdealBasisMethod", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaPrimitiveIdempotent", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"StartingElement", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{
        "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
        ",", 
        RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}], ",", 
        RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}]}], 
       "}"}]}], ",", 
     RowBox[{
     "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", 
      "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "->", "\"\<RevLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "->", 
      "\"\<InvLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtension", "\[Rule]", "\"\<GradeInvertedLast\>\""}],
      ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"gaReplaceDivisionRing", "\[Rule]", "True"}], ",", 
     RowBox[{"gaIdealBasisReordering", "\[Rule]", "None"}], ",", 
     RowBox[{"gaIdealBasisMultipliers", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[928]:=",ExpressionUUID->"945fa8de-0371-4ec8-8bf9-5b2ba32db6e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"the", " ", "IdealBasis", " ", "method", " ", 
    RowBox[{"options", ":", " ", 
     RowBox[{
     "one", " ", "argument", " ", "call", " ", "produces", " ", 
      "messages"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "option", " ", "gaPrimitiveIdempotent", " ", "is", " ", 
    "treated", " ", "exeptionally"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRule\
s\>\"", "]"}], "=", 
     RowBox[{
     "testOptionSpinor", "[", 
      "\"\<gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\>\"", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=", 
     RowBox[{
     "testOptionSpinor", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
      "]"}], "=", 
     RowBox[{
     "testOptionSpinor", "[", 
      "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<CoefficientDomain\>\"",
       "]"}], "=", 
     RowBox[{"testOptionSpinor", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaSemisimpleAlgebraExtension\>\"", "]"}], "=", 
     RowBox[{
     "\"\<GradeInvertedLast\>\"", "|", "\"\<GradeInvertedFirst\>\""}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaReplaceDivisionRing\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";", 
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaIdealBasisReordering\>\"", "]"}], "=", 
     RowBox[{
     "None", "|", "\"\<None\>\"", "|", 
      "\"\<Permutation of ideal basis elements, i.e. {2,1,3...} (or list of \
two lists for semisimple algebras)\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<gaIdealBasisMultipliers\>\"", "]"}], "=", 
     RowBox[{
     "None", "|", "\"\<None\>\"", "|", 
      "\"\<List of numbers by which ideal basis elements are multiplied (or \
list of two list for semisimple algebras)\>\""}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"the", " ", "IdealBasis", " ", "method", " ", 
     RowBox[{"options", ":", " ", 
      RowBox[{
      "two", " ", "argument", " ", "call", " ", "does", " ", "real", " ", 
       "check"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"testOptionDefineMatrixRepresentation", "[", 
     RowBox[{
     "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\
\>\"", ",", "val_"}], "]"}], ":=", "True"}], 
   RowBox[{"(*", 
    RowBox[{"no", " ", "explicit", " ", "check"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<gaNonCommutativeMonomialOrder\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<gaNonCommutativeMonomialOrder\>\"", ",", "val"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{
      "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", ",", 
       "val_"}], "]"}], ":=", 
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{
      "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", ",", 
       "val"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"testOptionSpinor", "[", 
      RowBox[{"\"\<CoefficientDomain\>\"", ",", "val"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<gaSemisimpleAlgebraExtension\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<GradeInvertedLast\>\"", "|", "\"\<GradeInvertedFirst\>\""}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<gaReplaceDivisionRing\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<gaIdealBasisReordering\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"None", "|", "\"\<None\>\""}]}], "]"}], "||", 
       RowBox[{"PermutationListQ", "[", "val", "]"}], "||", 
       RowBox[{"(", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{"PermutationListQ", "/@", "val"}], ")"}]}], ")"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<gaIdealBasisMultipliers\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"None", "|", "\"\<None\>\"", "|", 
        RowBox[{"{", 
         RowBox[{"__", "?", "NumberQ"}], "}"}], "|", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"__", "?", "NumberQ"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"__", "?", "NumberQ"}], "}"}]}], "}"}]}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[929]:=",ExpressionUUID->"023308e1-8b04-439e-9d4d-b8f941e0409b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
   RowBox[{"alg_Cl", ",", "generalOpts_List", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{
       "defineMatrixRepresentationIdealBasisMethod", ",", 
        "gaDefineMatrixRepresentation"}], "}"}], "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theOption", ",", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"OptionValue", "[", "gaPrimitiveIdempotent", "]"}]}], ",", 
      "theIdempotent", ",", "\[IndentingNewLine]", "theVectorBasis", ",", 
      "semisimpleQ", ",", "leftIdeal", ",", "divisionRingA", ",", 
      "fieldReplacementRules", ",", "idealBasisA", ",", "lengthOfIdealBasis", 
      ",", "matrixRepresentationsOfVectorsA", ",", 
      "matrixRepresentationsOfVectorsANorepl", ",", 
      "matrixRepresentationsOfVectorsB", ",", "divisionRingB", ",", 
      "idealBasisB", ",", "fieldReplacementRulesGradeInversed", ",", 
      "vectorMatrices", ",", "vectorMatricesFin", ",", "answer", ",", 
      "idealBasisAUnordered", ",", "idealBasisBUnordered", ",", 
      "allMatrices"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
        ",", 
        RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
        RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}]}], 
       "}"}], "=", "generalOpts"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "test", " ", "for", " ", "attempt", " ", "to", " ", "permute", " ", 
        "basis", " ", "vectors", " ", "with", " ", "different", " ", 
        "signature"}], ",", " ", 
       RowBox[{"which", " ", "is", " ", "not", " ", "allowed"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"None", "|", "\"\<None\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
        "=", 
        RowBox[{"Range", "[", 
         RowBox[{"(", 
          RowBox[{"Plus", "@@", "alg"}], ")"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "__Integer", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"validBasisVectorsReordering", "[", 
            RowBox[{"alg", ",", 
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}]}], 
            "]"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaDefineMatrixRepresentation", "::", "basisvectorpermutation"}],
              ",", 
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], ",", 
             " ", 
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"alg", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
               RowBox[{
                RowBox[{"alg", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", 
                RowBox[{"alg", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}],
             "=", 
            RowBox[{"Range", "[", 
             RowBox[{"(", 
              RowBox[{"Plus", "@@", "alg"}], ")"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "there", " ", "is", " ", "a", " ", "problem", " ", "to", " ", "define",
         " ", "complex", " ", "option", " ", "gaPrimitiveIdempotent"}], ",", 
       " ", 
       RowBox[{
       "fall", " ", "back", " ", "to", " ", "traditional", " ", "method"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "gaPrimitiveIdempotent", " ", "suboptions", " ", "is", " ", "tested", 
       " ", "separately", " ", "by", " ", "appropriate", " ", 
       RowBox[{"commands", ".", " ", "Checking"}], " ", "it", " ", "here", 
       " ", "means", " ", "we", " ", "double", " ", "check"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "gaDefineMatrixRepresentation", ",", "#", ",", "theOption"}], "}"}],
          ",", 
         RowBox[{
          RowBox[{
          "gaOptionCheck", "[", "testOptionDefineMatrixRepresentation", "]"}],
           "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "[", 
        RowBox[{"First", "/@", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "opts", "}"}], ",", 
           RowBox[{"(", 
            RowBox[{"gaPrimitiveIdempotent", "\[Rule]", "_"}], ")"}]}], 
          "]"}]}], "]"}], ")"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "set", " ", "unset", " ", "values", " ", "for", " ", "simple", " ", 
       "options"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", 
          "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacement\
Rules\>\"", "]"}], "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", 
         "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementR\
ules\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
         "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\
", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", 
          "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
          "]"}], "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", 
         "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"", 
         "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}], 
        "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"CoefficientDomain", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{
         "theOption", "[", "\"\<gaSemisimpleAlgebraExtension\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{
        "theOption", "[", "\"\<gaSemisimpleAlgebraExtension\>\"", "]"}], "=", 
        
        RowBox[{"(", 
         RowBox[{"gaSemisimpleAlgebraExtension", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<gaReplaceDivisionRing\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaReplaceDivisionRing\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"gaReplaceDivisionRing", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
        "=", 
        RowBox[{"(", 
         RowBox[{"gaIdealBasisReordering", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
        "=", 
        RowBox[{"(", 
         RowBox[{"gaIdealBasisMultipliers", "/.", 
          RowBox[{
          "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
           "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "initialization", " ", "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"alg", ",", 
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
           ",", "All"}], "]"}], "]"}], "===", "gaOrthonormalBasis"}], ",", 
       RowBox[{"gaDefineOrthonormalBasis", "[", 
        RowBox[{"alg", ",", 
         RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
         RowBox[{"gaNonCommutativeMonomialOrder", "->", 
          RowBox[{
          "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}]}], 
         ",", 
         RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"theVectorBasis", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alg", ",", 
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            ",", "All"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", 
        RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "determine", " ", "if", " ", "precomputed", " ", "structure", " ", 
        "is", " ", "provided"}], ",", " ", 
       RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
        "theOption", "[", 
         "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementR\
ules\>\"", "]"}], "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{"theIdempotentSetting", ",", "\[IndentingNewLine]", 
          RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"theIdempotent", "=", 
            RowBox[{"gaPrimitiveIdempotent", "[", 
             RowBox[{"alg", ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"FilterRules", "[", 
                RowBox[{"theIdempotentSetting", ",", 
                 RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
                "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "__"}], "}"}], "|", 
           RowBox[{"{", 
            RowBox[{"\"\<Automatic\>\"", ",", "__"}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"theIdempotent", "=", 
            RowBox[{"gaPrimitiveIdempotent", "[", 
             RowBox[{"alg", ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"FilterRules", "[", 
                RowBox[{
                 RowBox[{"Rest", "[", "theIdempotentSetting", "]"}], ",", 
                 RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
                "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{"#", ",", "gaIdempotentQ"}], "]"}], "&"}], ")"}]}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"theIdempotent", "=", "theIdempotentSetting"}], ",", 
          "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaDefineMatrixRepresentation", "::", "idempotent"}], 
             ",", "theIdempotentSetting"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\n", "\t", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Warn", " ", "if", " ", "idempotent", " ", "and", " ", "function", 
          " ", "domains", " ", "differ", " ", "or", " ", "have", " ", "wrong",
           " ", "values"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=!=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"CoefficientDomain", "/.", 
               RowBox[{"Cases", "[", 
                RowBox[{"theIdempotentSetting", ",", 
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{"CoefficientDomain", ",", "_"}], "]"}], "]"}]}], 
                "]"}]}], ")"}], "/.", 
             RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Style", "[", 
             RowBox[{
             "\"\<Warning! gaIdempotent and gaDefineMatrixRepresentation has \
different setting of CoefficientDomain! Hope you know what you are \
doing.\>\"", " ", ",", "Red"}], "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<The primitive idempotent is \>\"", ",", "theIdempotent"}], 
            "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal"}], "  ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"leftIdeal", "=", 
         RowBox[{"gaLeftIdeal", "[", 
          RowBox[{"theIdempotent", ",", 
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
           ",", 
           RowBox[{"CoefficientDomain", "->", 
            RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
           ",", 
           RowBox[{"Quiet", "\[Rule]", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "double", " ", "sided", " ", "ideal"}], "  ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"divisionRingA", ",", "fieldReplacementRules"}], "}"}], "=", 
         RowBox[{"gaDoubleSidedIdeal", "[", 
          RowBox[{"theIdempotent", ",", "leftIdeal", ",", 
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
           ",", 
           RowBox[{"CoefficientDomain", "->", 
            RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
           ",", 
           RowBox[{"Quiet", "\[Rule]", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
           RowBox[{"OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}],
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", "basis"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"idealBasisAUnordered", "=", 
         RowBox[{"gaLeftIdealBasis", "[", 
          RowBox[{"leftIdeal", ",", "divisionRingA", ",", 
           RowBox[{
           "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
           ",", 
           RowBox[{"CoefficientDomain", "->", 
            RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
           ",", 
           RowBox[{"Quiet", "\[Rule]", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "multiply", " ", "ideal", " ", "basis", " ", "by", " ", "numbers", 
          " ", "in", " ", "case", " ", "of", " ", "simple", " ", "algebras"}],
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"semisimpleQ", ",", "False", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"None", "|", "\"\<None\>\""}], ",", 
             RowBox[{
              RowBox[{
              "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], "=",
               "1"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"__", "?", "NumberQ"}], "}"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{
                 "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
                 "]"}], "===", 
                RowBox[{"Length", "[", "idealBasisAUnordered", "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"idealBasisAUnordered", "=", 
                RowBox[{"idealBasisAUnordered", "*", 
                 RowBox[{
                 "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", 
                  "]"}]}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{
                  "gaDefineMatrixRepresentation", "::", "optionValue"}], ",", 
                  "gaIdealBasisMultipliers", ",", 
                  RowBox[{"{", 
                   RowBox[{"None", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ";", 
                RowBox[{
                 RowBox[{
                 "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
                 "=", "1"}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", "_", 
             ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}],
                 ",", "gaIdealBasisMultipliers", ",", 
                RowBox[{"{", 
                 RowBox[{"None", ",", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ";", 
              RowBox[{
               RowBox[{
               "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
               "=", "1"}], ";"}]}], "\[IndentingNewLine]", " ", "]"}], ";"}], 
          "\[IndentingNewLine]", ",", "True", ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"None", "|", "\"\<None\>\""}], ",", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], "=", 
             
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"__", "?", "NumberQ"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"__", "?", "NumberQ"}], "}"}]}], "}"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Length", "/@", 
                   RowBox[{
                   "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", 
                    "]"}]}], ")"}], "-", 
                 RowBox[{"Length", "[", "idealBasisAUnordered", "]"}]}], 
                ")"}], "===", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"idealBasisAUnordered", "=", 
               RowBox[{"idealBasisAUnordered", "*", 
                RowBox[{
                 RowBox[{
                 "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
                 "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", "optionValue"}], ",", 
                 "gaIdealBasisMultipliers", ",", 
                 RowBox[{"{", 
                  RowBox[{"None", ",", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalY]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "}"}]}], "]"}], ";", 
               RowBox[{
                RowBox[{
                "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], 
                "=", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}], ";"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "_", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], 
               ",", "gaIdealBasisMultipliers", ",", 
               RowBox[{"{", 
                RowBox[{"None", ",", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalY]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "}"}]}], "]"}], ";", 
             RowBox[{
              RowBox[{
              "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], "=", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], ";"}]}], 
           "\[IndentingNewLine]", " ", "]"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "reorder", " ", "ideal", " ", "basis", " ", "if", " ", "required"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"semisimpleQ", ",", "False", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{
               "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], ",", 
               RowBox[{"None", "|", "\"\<None\>\""}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{
                  "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
                  "]"}], "===", 
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"idealBasisA", "=", 
                 RowBox[{"idealBasisAUnordered", "[", 
                  RowBox[{"[", 
                   RowBox[{
                   "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
                   "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{
                   "gaDefineMatrixRepresentation", "::", "optionValue"}], ",",
                    "gaIdealBasisReordering", ",", 
                   RowBox[{"{", 
                    RowBox[{"\"\<None\>\"", ",", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}]}], "]"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          "True", ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{
               "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], ",", 
               RowBox[{"None", "|", "\"\<None\>\""}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{
                   RowBox[{
                   "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
                   "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", 
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"idealBasisA", "=", 
                 RowBox[{"idealBasisAUnordered", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}],
                     "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{
                   "gaDefineMatrixRepresentation", "::", "optionValue"}], ",",
                    "gaIdealBasisReordering", ",", 
                   RowBox[{"{", 
                    RowBox[{"\"\<None\>\"", ",", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<{Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<],Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]}\>\""}], "]"}]}], "}"}]}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
              "\"\<Option \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules is used \
in gaDefineMatrixRepresentation! No check! All other Method options will be \
ignored.\>\"", " ", ",", "Red"}], "]"}], ",", 
             RowBox[{
             "theOption", "[", 
              "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplace\
mentRules\>\"", "]"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"divisionRingA", ",", "fieldReplacementRules"}], "}"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", 
            "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplaceme\
ntRules\>\"", "]"}], "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"idealBasisA", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", 
            "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplaceme\
ntRules\>\"", "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"theIdempotent", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", 
            "\"\<gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplaceme\
ntRules\>\"", "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", "idealBasisA", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Once", " ", "double", " ", "sided", " ", "ideal", " ", "and", " ", 
       "left", " ", "ideal", " ", "basis", " ", "are", " ", "known", " ", 
       "compute", " ", "matrix", " ", "representation", " ", "of", " ", "a", 
       " ", "matrix", " ", "block"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"matrixRepresentationsOfVectorsANorepl", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaIndexDown", "[", 
              RowBox[{"gaHermitianConjugate", "[", 
               RowBox[{"idealBasisA", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], 
             "\[GeometricProduct]", "#", "\[GeometricProduct]", 
             RowBox[{"idealBasisA", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "lengthOfIdealBasis"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "lengthOfIdealBasis"}], "}"}]}], "]"}], "&"}], "/@",
        "theVectorBasis"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<gaReplaceDivisionRing\>\"", "]"}], ",", 
       
       RowBox[{"matrixRepresentationsOfVectorsA", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"replaceFieldElement", "[", 
            RowBox[{"#", ",", "fieldReplacementRules"}], "]"}], "&"}], ",", 
          "matrixRepresentationsOfVectorsANorepl", ",", 
          RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "matrixRepresentationsOfVectorsA", "=", 
        "matrixRepresentationsOfVectorsANorepl"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "final", " ", "matrix", " ", "representations", " ", "of", " ", "basis",
        " ", 
       RowBox[{"vectors", ".", " ", "For"}], " ", "semisimple", " ", 
       "algebra", " ", "make", " ", "additional", " ", "steps"}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"semisimpleQ", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "for", " ", "semisimple", " ", "use", " ", "grade", " ", "inversed", 
         " ", "subspase"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"divisionRingB", "=", 
         RowBox[{"gaGradeInverse", "/@", "divisionRingA"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"idealBasisBUnordered", "=", 
         RowBox[{
          RowBox[{"gaSort", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"gaGradeInverse", "/@", "idealBasisA"}], ")"}], ",", 
            RowBox[{
            "theOption", "[", 
             "\"\<gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\>\"\
", "]"}]}], "]"}], "*", 
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}], "[", 
             
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaIdealBasisMultipliers\>\"", "]"}],
            "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}],
             ",", 
            RowBox[{"None", "|", "\"\<None\>\""}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"idealBasisB", "=", "idealBasisBUnordered"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{
                RowBox[{
                "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
                "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
              RowBox[{"Range", "[", 
               RowBox[{"Length", "[", "idealBasisBUnordered", "]"}], "]"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"idealBasisB", "=", 
              RowBox[{"idealBasisBUnordered", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{
                 "theOption", "[", "\"\<gaIdealBasisReordering\>\"", "]"}], 
                 "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}],
                 ",", "gaIdealBasisReordering", ",", 
                RowBox[{"{", 
                 RowBox[{"\"\<None\>\"", ",", 
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<{Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<],Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]}\>\""}], "]"}]}], "}"}]}], 
               "]"}], ";", 
              RowBox[{"idealBasisB", "=", "idealBasisBUnordered"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"fieldReplacementRulesGradeInversed", "=", 
         RowBox[{"(", 
          RowBox[{"Last", "/@", 
           RowBox[{"makeReplRule", "/@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "/.", 
                  RowBox[{"inversedRules", "[", 
                   RowBox[{
                   "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
                   "]"}]}]}], "}"}], "&"}], ",", 
              RowBox[{"fieldReplacementRules", "/.", 
               RowBox[{"{", 
                RowBox[{"Rule", "\[Rule]", "List"}], "}"}]}]}], "]"}]}]}], 
          ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"matrixRepresentationsOfVectorsB", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "tempvar", "}"}], ",", 
                RowBox[{"replaceFieldElement", "[", 
                 RowBox[{
                 "tempvar", ",", "fieldReplacementRulesGradeInversed"}], 
                 "]"}]}], "]"}], ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{
                   RowBox[{"gaIndexDown", "[", 
                    RowBox[{"gaHermitianConjugate", "[", 
                    RowBox[{"idealBasisB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], 
                   "\[GeometricProduct]", "#", "\[GeometricProduct]", 
                   RowBox[{"idealBasisB", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "lengthOfIdealBasis"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "lengthOfIdealBasis"}], "}"}]}], "]"}], 
              ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
           "theVectorBasis"}], ")"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"make", " ", "final", " ", "matrix"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{
          "theOption", "[", "\"\<gaSemisimpleAlgebraExtension\>\"", "]"}], 
          ",", "\[IndentingNewLine]", "\"\<GradeInvertedLast\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], " ", ";"}], ",", "\[IndentingNewLine]", 
          "\"\<GradeInvertedFirst\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], " ", ";"}], ",", "\[IndentingNewLine]", "_", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "semisimple", " ", "case"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatrices", "=", "matrixRepresentationsOfVectorsA"}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "change", " ", "order", " ", "of", " ", "vectors", " ", "if", " ", 
       "required"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], ",", 
       RowBox[{"None", "|", "\"\<None\>\""}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
        "=", 
        RowBox[{"Range", "[", 
         RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"__Integer", "?", "Positive"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
           "]"}], "=!=", 
          RowBox[{"Range", "[", 
           RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], ",", 
           RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"\"\<None\>\"", ",", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"\"\<Permutation[\>\"", ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"Range", "[", 
                 RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}],
                 "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "_", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], ",", 
          
          RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<None\>\"", ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<Permutation[\>\"", ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"Range", "[", 
                RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}], 
               "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
         "=", 
         RowBox[{"Range", "[", 
          RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "try", " ", "to", " ", "make", " ", "minimize", " ", "minus", " ", 
       "signs", " ", "in", " ", "the", " ", "representation", " ", "block"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"old", ":", " ", 
         RowBox[{
         "change", " ", "sign", " ", "if", " ", "only", " ", "all", " ", 
          "elements", " ", "of", " ", "matrx", " ", "is", " ", "negative"}]}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AllTrue", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], ",", 
                "Internal`SyntacticNegativeQ"}], "]"}], ",", 
              RowBox[{
               RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "/@",
            "\[IndentingNewLine]", "vectorMatrices"}], ")"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"vectorMatricesFin", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"Internal`SyntacticNegativeQ", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], 
                  "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "/@",
              "\[IndentingNewLine]", "vectorMatrices"}], ")"}], "[", 
           RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", 
           RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
           "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", "None", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", 
           RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
           "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"__", "?", "NumberQ"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
             "]"}], "===", 
            RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}]}], ")"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"vectorMatricesFin", "=", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], "*", 
            RowBox[{"(", 
             RowBox[{"vectorMatrices", "[", 
              RowBox[{"[", 
               RowBox[{
               "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
               "]"}], "]"}], ")"}]}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], 
             ",", "BasisVectorsMultipliers", ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"\[PlusMinus]", "1"}], ",", 
               RowBox[{"{", 
                RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], 
                "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"vectorMatricesFin", "=", 
            RowBox[{"vectorMatrices", "[", 
             RowBox[{"[", 
              RowBox[{
              "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
              "]"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
       "\[IndentingNewLine]", ",", "_", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], ",", 
          "BasisVectorsMultipliers", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\[PlusMinus]", "1"}], ",", 
            RowBox[{"{", 
             RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "}"}]}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", 
           RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
           "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"answer", "=", 
      RowBox[{"Thread", "[", 
       RowBox[{"Rule", "[", 
        RowBox[{"theVectorBasis", ",", "vectorMatricesFin"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "if", " ", "full", " ", "algebra", " ", "representation", " ", "was", 
       " ", "requested", " ", "call", " ", 
       RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", " ", 
       "special", " ", "syntax"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], ",", 
       RowBox[{"None", "|", "\"\<None\>\""}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
        "=", 
        RowBox[{"Range", "[", 
         RowBox[{"gaDimensionOfVectorSpace", "[", "alg", "]"}], "]"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "1", "}"}], ",", "answer", ",", "\[IndentingNewLine]", 
       RowBox[{"All", "|", "\"\<All\>\""}], ",", 
       RowBox[{"gaDefineMatrixRepresentation", "[", "answer", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "__Integer", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"allMatrices", "=", 
         RowBox[{"gaDefineMatrixRepresentation", "[", "answer", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Pick", "[", 
         RowBox[{"allMatrices", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "=!=", "0"}], ")"}], "&"}], "/@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetMV", "[", 
               RowBox[{"#", ",", 
                RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
               "]"}], "&"}], ",", 
             RowBox[{"First", "/@", "allMatrices"}]}], "]"}]}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[944]:=",ExpressionUUID->"ae1065c1-9835-4724-90da-fb0ca984691d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation construction by direct product"
}], "Subsection",ExpressionUUID->"55d41403-b71f-4712-8945-0b997fc3e9fc"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"290be3bd-6cd6-42a9-b0b4-2daac816a3f7"],

Cell[TextData[{
 "The help function ",
 StyleBox["tensorProductIsomorphicToAlgebra[ ] ",
  FontWeight->"Bold"],
 " is used in gaDefineOrthonormalBasis",
 StyleBox["[gaTensorProduct[ ]]",
  FontWeight->"Bold"],
 ", where it generates indices of isomorphic algebra. These indices then are \
substituted by corresponding tensor product indices.  The rule below helps to \
replace single algebra by fake tensor product (containing only one term), \
which then enables to use single definition (thought a bit more complicated) \
instead of two separate: one for ",
 StyleBox["gaTensorProduct[Cl, Cl]",
  FontWeight->"Bold"],
 ", the other for ",
 StyleBox["gaTensorProduct[ gaTensorProduct[Cl], Cl]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"447f1ff7-f6f1-4b68-b225-18d5b84df69c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tensorProductIsomorphicToAlgebra", "[", 
    RowBox[{"gaTensorProduct", "[", "al_Cl", "]"}], "]"}], ":=", "al"}], 
  ";"}]], "Input",
 CellLabel->
  "In[945]:=",ExpressionUUID->"2abdcb7e-a329-4c28-89a4-c0712a671e8c"],

Cell[TextData[{
 "The function ",
 StyleBox["gaAlgebraMultiplicationTable[ ]",
  FontWeight->"Bold"],
 ", constructs product table of all elements and prints it in a clear way. \
Entire base  should be generated before call."
}], "Text",ExpressionUUID->"48a2f804-bb3f-4b96-8514-12623bf46dd2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], "=", 
    "\"\<Option `1` is not a list of grades like {{1},{3},...}.\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaAlgebraMultiplicationTable", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grades", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaAlgebraMultiplicationTable", ",", "gaGradesOnly"}], 
           "]"}]}], ")"}]}], ",", "selectedBE"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"grades", ",", "All", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"Outer", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
           RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "]"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "}"}]}]}], 
        "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_Integer", "?", "NonNegative"}], "}"}], ".."}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"selectedBE", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGradeList", "[", "#", "]"}], "===", "x"}], 
                   "&"}], ")"}]}]}], "]"}]}], "]"}], ",", "grades"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", "selectedBE", ",", "selectedBE"}],
            "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"selectedBE", ",", "selectedBE"}], "}"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], 
          ",", "grades"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[946]:=",ExpressionUUID->"81285ccd-5c79-4ca6-a5bb-962031654f49"],

Cell["Set unit element to 1.", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"bf79b8e3-b266-4a1c-85d1-49546d42b6d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"bs", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "_"}], 
       "]"}], "]"}], "=", "1"}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[949]:=",ExpressionUUID->"f0cb170a-4656-43f9-8752-10329083bf70"],

Cell["\<\
The signature of tensor product is a sum of signatures for each product \
algebras\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"3fc1bac3-6a2c-4450-ad3d-e56bb8f6e756"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_gaTensorProduct", ",", "___"}], "]"}]}]}], 
       "]"}], ":=", 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{"Length", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{
                RowBox[{"gaNegativeSignatureIndexList", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Thread", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Thread", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"First", "/@", 
                    RowBox[{"gaIndexList", "[", "expr", "]"}]}], ")"}]}], ",",
                     "al"}], "}"}], "]"}], "/.", 
                  RowBox[{"gaTensorProduct", "\[Rule]", "List"}]}], ")"}]}], 
               ",", "1"}], "]"}]}], ")"}]}], ")"}]}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[950]:=",ExpressionUUID->"9350bb9e-aefc-4ba0-b2e9-da8e7c773415"],

Cell["\<\
Decide, when base recalculation is unavoidable. Always use \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] \
representation for these calculations.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"7e7b5344-f3aa-4ff7-9a93-655aa5981cdd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getBase", "[", 
    RowBox[{"al_", ",", "grRequested_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"variants", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"DownValues", "[", "gaOrthonormalBasis", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "_"}], 
                   "]"}]}], "]"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RuleDelayed", "[", 
             RowBox[{"def_", ",", "_"}], "]"}], ":>", "def"}], "}"}]}], 
         ")"}]}], ",", "definedGrades"}], "}"}], ",", 
     RowBox[{
      RowBox[{"definedGrades", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Hold", "@@", "variants"}], ")"}], "/.", 
             RowBox[{"HoldPattern", "\[Rule]", "Sequence"}]}], ")"}], "/.", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"_", ",", "\"\<InvDeg[Lex]\>\"", ",", "gr_"}], "]"}], 
            "\[RuleDelayed]", "gr"}]}], ")"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"definedGrades", ",", "All"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "grRequested"}], 
          "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "All"}], "]"}], 
           ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGradeList", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Intersection", "[", 
          RowBox[{"grRequested", ",", 
           RowBox[{"(", 
            RowBox[{"Union", "@@", 
             RowBox[{"(", "definedGrades", ")"}]}], ")"}]}], "]"}], "===", 
         "grRequested"}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "grRequested"}], 
          "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Join", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "#"}], "]"}], 
                "&"}], "/@", "definedGrades"}], ")"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGradeList", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", "True", ",",
         "\[IndentingNewLine]", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"al", ",", 
          RowBox[{"gaGradesOnly", "->", "grRequested"}], ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{
          "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}],
           ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[951]:=",ExpressionUUID->"608773a7-0343-4a33-a275-7d15ebd221ff"],

Cell[TextData[{
 "Lets provide user with \[OpenCurlyDoubleQuote]default\
\[CloseCurlyDoubleQuote] algebra representations. It may be  convenient  if \
user wants other representations that differ from universal representations \
set by  ",
 StyleBox["generalDefaultMatrixRepresentationSetting[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"8ed856c5-c355-4898-b1c2-bef1edda5791"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDefaultMatrixRepresentationData", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "4"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "5"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "6"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "7"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ","}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Diagonal\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
            "\"\<Antisymmetric\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], 
       ","}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"2", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[952]:=",ExpressionUUID->"f707761b-1ad8-4aa9-b776-21942ab6643e"],

Cell[TextData[{
 "Below we construct matrix representations for real Clifford algebras, which \
is known to be of dimensions:\n\[DoubleStruckCapitalR](2^(n/2)),    if \
q-p=0,6 (mod 8); \n\[DoubleStruckCapitalC](2^((n-1)/2)),    if q-p=1,5(mod \
8); \n\[DoubleStruckCapitalH](2^((n-2)/2)),    if q-p=2,4(mod 8); \n\
\[DoubleStruckCapitalH](2^((n-3)/2))\[CirclePlus]\[DoubleStruckCapitalH](2^((\
n-3)/2)),   if q-p=3(mod 8); \n\[DoubleStruckCapitalR](2^((n-1)/2))\
\[CirclePlus]\[DoubleStruckCapitalR](2^((n-1)/2)),   if q-p=7(mod 8); \n\nIn \
order to get these matrices we generate automatic calculation instructions \
below. \nThese settings are applied only if particular settings were not \
found in ",
 StyleBox["gaDefaultMatrixRepresentationData[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",ExpressionUUID->"cbedef98-4127-444b-9ee9-ffb4bed25228"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_", ",", "_"}], "]"}], "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"q", "-", "p"}], ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"0", "|", "6"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1", "|", "5"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", "\"\<Pauli[1,2]\>\""}]}],
        "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"2", "|", "4"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "3", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "7", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[953]:=",ExpressionUUID->"cc8e3ff8-7076-4368-a895-c8519c248787"],

Cell["\<\
Shirokov test if Clifford algebras are isomorphic (Marchuk, Shirokov, Teorija \
algebr Clifforda i spinorov, p118, in russian)\
\>", "Text",ExpressionUUID->"290d4de5-edb6-48e9-a5ee-3203345f1630"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaIsomorphicGAsQ", "[", 
   RowBox[{"algA_", ",", "algB_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"algAp", ",", "algBp", ",", "algAq", ",", "algBq"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Switch", "[", 
      RowBox[{"algA", ",", "_Cl", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"algAp", ",", "algAq"}], "}"}], "=", 
        RowBox[{"Most", "[", 
         RowBox[{"List", "@@", "algA"}], "]"}]}], ",", "_gaTensorProduct", 
       ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"algAp", ",", "algAq"}], "}"}], "=", 
        RowBox[{"Most", "[", 
         RowBox[{"List", "@@", 
          RowBox[{"gaFromTensorProduct", "[", "algA", "]"}]}], "]"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"algB", ",", "_Cl", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"algBp", ",", "algBq"}], "}"}], "=", 
        RowBox[{"Most", "[", 
         RowBox[{"List", "@@", "algB"}], "]"}]}], ",", "_gaTensorProduct", 
       ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"algBp", ",", "algBq"}], "}"}], "=", 
        RowBox[{"Most", "[", 
         RowBox[{"List", "@@", 
          RowBox[{"gaFromTensorProduct", "[", "algB", "]"}]}], "]"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"algAp", ",", "algAq", ",", "algBp", ",", "algBq"}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"__Integer", "?", "NonNegative"}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PossibleZeroQ", "[", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Pi", "/", "4"}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{"algAp", "-", "algAq", "+", "1"}], ")"}]}], "]"}], "-", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Pi", "/", "4"}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{"algBp", "-", "algBq", "+", "1"}], ")"}]}], "]"}]}], 
        "]"}], ",", "\[IndentingNewLine]", "$Failed"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[954]:=",ExpressionUUID->"f1733125-50d5-4e28-9553-72408846e6bd"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notations"
}], "Subsubsection",ExpressionUUID->"55b41415-b87f-45d6-ae5e-aca2435e11de"],

Cell["Tensor product notation for products of algebras", "Text",ExpressionUUID->"0885b392-b2fd-4780-9903-0fbd5a195227"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "al__Cl", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "#", "]"}], "]"}], "===", 
          "gaNotation"}], ",", 
         RowBox[{"gaDefineNotation", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"{", "al", "}"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", 
          RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}], "]"}], "===", 
        "gaNotation"}], ",", 
       RowBox[{"gaDefineNotation", "[", 
        RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"alB", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "al", "}"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfdProto", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"Slot", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", 
               RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", 
            RowBox[{"StyleBox", "[", 
             RowBox[{"\"\<\[CircleTimes]\>\"", ",", 
              RowBox[{"FontSize", "\[Rule]", "Medium"}], ",", 
              RowBox[{"gaNotation", "[", 
               RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}]}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfiProto", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<gaTensorProduct\>\"", ",", "\"\<[\>\""}], "}"}], 
            ",", 
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Slot", "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", "\"\<,\>\""}],
              "]"}], ",", 
            RowBox[{"{", "\"\<]\>\"", "}"}]}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfdProto", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfiProto", "]"}], "]"}]}]}], "}"}], ",", 
         
         RowBox[{"TemplateBox", "[", 
          RowBox[{"alB", ",", "\"\<gaTensorProduct\>\"", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
      "]"}]}], "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[955]:=",ExpressionUUID->"c7254d77-2d03-49be-839d-bfdbbe6b49bc"],

Cell[TextData[{
 "For other quantities, i.e. indices, simply use ",
 StyleBox["CircleTimes[ ] ",
  FontWeight->"Bold"],
 "trick, thus avoiding problems with bracketing. For speed reasons, don\
\[CloseCurlyQuote]t associate MakeBoxes with  ",
 StyleBox["gaTensorProduct/: ",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"1e2561e4-ffc8-4f67-b3fe-5c4746621e15"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "argsa__", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"TagBox", "[", 
    RowBox[{
     RowBox[{"ToBoxes", "[", 
      RowBox[{"CircleTimes", "[", "argsa", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"gaTensorProduct", "@@", "#"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[956]:=",ExpressionUUID->"428ff97f-47b8-45c6-9353-57dd5f0c65f4"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multiplication of elements, which are tensor products. "
}], "Subsubsection",ExpressionUUID->"81d67273-9b26-414a-a5f0-80d08ea001b8"],

Cell[TextData[{
 "Tensor product indices are treated in a different way than indices of \
simple Clifford algebras. Identifier ignoreMe deals with tensor products of \
identical algebras, which is unavoidable if we want to construct tensor \
product from simple algebras. After base elements are constructed we ignore \
them.  ignoreMe is used only in gaDefineOrthonormalBasis",
 StyleBox["[gaTensorProduct[]]",
  FontWeight->"Bold"],
 ". It is not needed when dealing with already defined base elements."
}], "Text",ExpressionUUID->"ce4ea755-2d49-4d31-a237-73868146b97e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"other1___", ",", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du1_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du2_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"setSymDiff4TP", ",", "signProdSigMap4TP"}], "}"}], ",", 
        RowBox[{
         RowBox[{"setSymDiff4TP", "=", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "@@", 
              RowBox[{"(", 
               RowBox[{"List", "/@", 
                RowBox[{"gaTensorProduct", "@@@", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Apply", "[", 
                   RowBox[{"mvSetSymmetricDifference", ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ")"}]}], ",",
              "al"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", 
                "_"}], "]"}], "]"}], "->", "1"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "=", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Times", "@@@", 
             RowBox[{"Apply", "[", 
              RowBox[{"mvProductSignatureMapC", ",", 
               RowBox[{"MapThread", "[", 
                RowBox[{"List", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], "}"}]}], 
                    "]"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"other1", ",", "setSymDiff4TP", ",", "other2"}], 
           "]"}]}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[957]:=",ExpressionUUID->"0268e5a1-685a-4320-8297-c39e08915f9f"],

Cell[TextData[{
 "Geometric product of ",
 StyleBox["gaTensorProduct[_,_]",
  FontWeight->"Bold"],
 ". Note, that ",
 StyleBox["gaTensorProduct[x_]:=x",
  FontWeight->"Bold"],
 " rule would spoil rearrangement ",
 StyleBox["gaTensorProduct[gaTensorProduct[a],b]",
  FontWeight->"Bold"],
 ", therefore is not allowed. Associate these recursive definitions with ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " itself  for speed reasons (they are more rare than ",
 StyleBox["GeometricProduct[ ]",
  FontWeight->"Bold"],
 ")"
}], "Text",ExpressionUUID->"9221967a-f63c-4744-988c-c5f303490c92"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "/:", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1___", ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"x1_", ",", "x2__"}], "]"}], ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"y1_", ",", "y2__"}], "]"}], ",", "any2___"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
           "x"}], "}"}]}], ")"}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "x2", "]"}], ",", 
         RowBox[{"gaTensorProduct", "[", "y2", "]"}]}], "]"}], ",", "any2"}], 
      "]"}], ")"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTensorProduct", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaTensorProduct", "[", "x1_", "]"}], ",", 
     RowBox[{"gaTensorProduct", "[", "y1_", "]"}], ",", "any2___"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1", ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
          "x"}], "}"}]}], ")"}], ",", "any2"}], "]"}], ")"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[958]:=",ExpressionUUID->"698ff176-71ea-4237-8313-e6913c60ad17"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Orthonormal base construction for tensor product algebras"
}], "Subsubsection",ExpressionUUID->"d1fab53a-de07-48f1-93f0-70bc5cde1457"],

Cell["\<\
General note. The case with (Cl[2,0,0]|Cl[1,1,0]|Cl[0,2,0]) algebras is \
special, because we know what are base vectors. Then it follows that we can \
easily order and grade all elements. For tensor products of arbitrary \
algebras the nontrivial point is to find what tensor products play the role \
of vectors. The generation of orthonormal base of product of tensor algebras \
should not be confused with calculation of  geometric product between \
elements of tensor algebra products. The later can be calculated directly \
(see \[OpenCurlyDoubleQuote]Multiplication of elements, which are tensor \
products\[CloseCurlyDoubleQuote] subsubsection).  \
\>", "Text",ExpressionUUID->"dc6837e1-787c-442c-80cd-520333ce3f5f"],

Cell[TextData[{
 "The  ",
 StyleBox["gaTensorProduct[Cl,Cl,...]",
  FontWeight->"Bold"],
 ", puts tensor products into onion like form ",
 StyleBox["gaTensorProduct[ gaTensorProduct[gaTensorProduct[Cl],Cl] ,..]",
  FontWeight->"Bold"],
 " below. Then calls gaDefineOrthonormalBasis",
 StyleBox["Main[ ] ",
  FontWeight->"Bold"],
 " to do all calculations step by step starting from the deepest product. \
Only necessary grades are calculated in intermediate steps."
}], "Text",ExpressionUUID->"e8c0dde9-119e-450e-a13c-b7bbc49d9f1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBasis", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"p_", ",", "q_", ",", 
         RowBox[{"r_", ":", "0"}]}], "]"}], ",", 
       RowBox[{"specAlgebra", ":", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}], ".."}]}]}], 
      "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gro", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], "]"}]}],
          ")"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"gaGradesOnly", "->", "_"}]}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"gaDefineOrthonormalBasisMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBasisMain", "[", 
               RowBox[{
                RowBox[{"gaTensorProduct", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], ",", 
                RowBox[{"gaGradesOnly", "->", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], ",", 
                RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}], ";", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], ")"}], "&"}], ",", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], ",", 
           RowBox[{"Most", "[", 
            RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{"Last", "[", 
          RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"gaGradesOnly", "\[Rule]", "gro"}], ",", 
       RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[960]:=",ExpressionUUID->"6bb5f098-1b81-4ff9-8347-a41be479755a"],

Cell[TextData[{
 "Note ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 " is private context symbol (not ",
 StyleBox["Module[ ]",
  FontWeight->"Bold"],
 " local symbol)"
}], "Text",ExpressionUUID->"cff90433-d8ab-476a-ad2c-1532a1f446d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaDefineOrthonormalBasisMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "algebraSeq__", "]"}], ",", 
         RowBox[{"specAlgebra", ":", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}]}]}], "]"}], 
       ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "baseSymbol", ",", "invdeglexIndexList", ",", "indSet", ",", "keysB", 
         ",", "gr", ",", "ifPrint", ",", "vectorsOfArbitraryAlgebra", ",", 
         "bivectorsOfSpecialAlgebra", ",", 
         "alreadyCalculatedProductsAdoptedToSingle", ",", 
         RowBox[{"uniqueMaskForArbitraryAlgebra", "=", 
          RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
         RowBox[{"uniqueMaskForSpecAlgebra", "=", 
          RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
         RowBox[{"productAlgebra", "=", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"algebraSeq", ",", "specAlgebra"}], "]"}], "//.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a___", ",", 
               RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
              "]"}], ":>", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}]}], ",", 
         RowBox[{"alreadyCalculatedProducts", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", "algebraSeq", "]"}], "//.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a___", ",", 
                RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
               "]"}], ":>", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], ")"}]}], 
         ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBasis", ",", "Quiet"}], "]"}]}], 
           ")"}]}], ",", 
         RowBox[{"grOnly", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGradesOnly", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], 
             "]"}]}], ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Other", " ", "commands", " ", "do", " ", "not", " ", "understand", 
          " ", 
          RowBox[{"gaTensorProduct", "[", "cl", "]"}]}], ",", " ", 
         RowBox[{"therefore", " ", "define", " ", "usual", " ", "Cl"}]}], " ",
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alreadyCalculatedProductsAdoptedToSingle", "=", 
         RowBox[{"alreadyCalculatedProducts", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", "a_Cl", "]"}], "\[RuleDelayed]", 
            "a"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "In", " ", "order", " ", "to", " ", "define", " ", "orthonormal", 
          " ", "base", " ", "of", " ", "tensor", " ", "product", " ", "we", 
          " ", "need", " ", "to", " ", "know", " ", "orthonormal", " ", 
          "bases", " ", "of", " ", "all", " ", "intermediate", " ", 
          "algebras"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"getBase", "[", 
         RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"getBase", "[", 
         RowBox[{"specAlgebra", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"specific", " ", "algebra", " ", "cases"}], ",", " ", 
          RowBox[{
          "for", " ", "which", " ", "we", " ", "know", " ", "what", " ", 
           "are", " ", "grade", " ", "1", " ", "elements"}], ",", " ", 
          RowBox[{"i", ".", "e", ".", " ", "vectors"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"specAlgebra", ",", "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], ")"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaNotation", "[", "productAlgebra", "]"}], "]"}], "===",
              "gaNotation"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
             RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{"productAlgebra", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaDefineNotation", "]"}]}], "]"}]}]}],
            "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
         "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "color", " ", "of", " ", "tensor", " ", "product", " ", "and", " ", 
          "isomorphics", " ", "algebra", " ", "are", " ", "set", " ", "to", 
          " ", "be", " ", "the", " ", "same", " ", "by", " ", "default"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              "]"}], "===", "gaNotation"}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"gaNotation", "[", "productAlgebra", "]"}]}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"space", " ", "dimensions"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "productAlgebra", "]"}], 
         "=", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", 
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "]"}], "=", 
          RowBox[{
           RowBox[{
           "gaDimensionOfVectorSpace", "[", 
            "alreadyCalculatedProductsAdoptedToSingle", "]"}], "+", "2"}]}]}],
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"the", " ", "standard", " ", "ordering", " ", "stuff"}], 
          ",", " ", 
          RowBox[{
          "same", " ", "as", " ", "for", " ", "simple", " ", "algebra", " ", 
           "case"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"grOnly", "===", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"invdeglexIndexList", "=", 
           RowBox[{"mvInvDegLexSortedIndexList", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"invdeglexIndexList", "=", 
           RowBox[{"mvInvDegLexSortedIndexList", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", "grOnly"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"indSet", "=", "invdeglexIndexList"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "for", " ", "special", " ", "algebras", " ", "vectors", " ", "of", 
          " ", "tensor", " ", "product", " ", "are", " ", "vectors", " ", 
          "of", " ", "arbitrary", " ", "algebra", " ", "multiplied", " ", 
          "by", " ", "bivectors", " ", "of", " ", "special", " ", "algebra"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "and", " ", "vectors", " ", "of", " ", "special", " ", "algebra", 
          " ", "multiplied", " ", "by", " ", "unit", " ", "element", " ", 
          "of", " ", "arbitrary", " ", "algebra"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Note", ":", " ", 
          RowBox[{
          "we", " ", "need", " ", "to", " ", "make", " ", "generated", " ", 
           "vectors", " ", "unique"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfArbitraryAlgebra", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{
              "alreadyCalculatedProductsAdoptedToSingle", ",", 
               "\"\<InvDeg[Lex]\>\"", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeList", "[", "#", "]"}], "===", 
                 RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{
             "inc", ",", "alc", ",", "uniqueMaskForArbitraryAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"vectorsOfSpecialAlgebra", "=", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"specAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeList", "[", "#", "]"}], "===", 
                RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bivectorsOfSpecialAlgebra", "=", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"specAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeList", "[", "#", "]"}], "===", 
                RowBox[{"{", "2", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"unitElement", "[", "productAlgebra", "]"}], "=", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "#", "}"}], ",", 
               RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
            RowBox[{"gaTensorProduct", "@@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", "}"}], " ", ",", 
               RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}], 
            "]"}], ",", "productAlgebra"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "construct", " ", "unsorted", " ", "list", " ", "of", " ", "tensor",
            " ", "product", " ", "algebra", " ", "vectors"}], ",", " ", 
          RowBox[{"very", " ", "inefficient"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfTensorProductAlgebra", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"baseSymbol", "[", 
            RowBox[{"#", ",", "productAlgebra"}], "]"}], "&"}], "@@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Outer", "[", 
                 RowBox[{
                 "GeometricProduct", ",", "vectorsOfArbitraryAlgebra", ",", 
                  "bivectorsOfSpecialAlgebra"}], "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"GeometricProduct", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"baseSymbol", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{
                    "Length", "[", "alreadyCalculatedProducts", "]"}]}], 
                    "]"}]}], "]"}], ",", "alreadyCalculatedProducts", ",", 
                    "uniqueMaskForArbitraryAlgebra"}], "]"}], ",", "#"}], 
                  "]"}], "&"}], "/@", "vectorsOfSpecialAlgebra"}]}], "]"}], 
             ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "al1_", ",", 
                  "___"}], "]"}], ",", 
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"du2_", ",", "up2_"}], "]"}], ",", "al2_", ",", 
                  "___"}], "]"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"du1", ",", "du2"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"up1", ",", "up2"}], "]"}], "}"}]}], "]"}], "}"}],
                  "//.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a___", ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", "b__", "]"}], "}"}], ",", 
                    "c___"}], "]"}], ":>", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], 
                ")"}], ")"}]}], "}"}]}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "sort", " ", "acording", " ", "to", " ", "vector", " ", "square"}], 
          ",", " ", 
          RowBox[{"i", ".", "e", ".", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "...", ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{"-", "1"}]}], "}"}]}], ",", " ", 
          RowBox[{"in", " ", "analogy", " ", "with", " ", 
           RowBox[{"{", 
            RowBox[{"p", ",", "q"}], "}"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{
           RowBox[{"(", "vectorsOfTensorProductAlgebra", ")"}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"indSetReplRul", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"gaDimensionOfVectorSpace", "[", "productAlgebra", "]"}],
              "]"}], ",", 
            RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "/.", 
             RowBox[{
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "__"}], "]"}], 
              "\[RuleDelayed]", "du1"}]}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"GeometricProduct", "@@@", 
          RowBox[{"Apply", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "#", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"gaTensorProduct", "@@", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}],
                   "}"}]}], "]"}], ",", "productAlgebra"}], "]"}], "&"}], ",", 
            RowBox[{"(", 
             RowBox[{"indSet", "/.", "indSetReplRul"}], ")"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{
            "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
            "]"}], "=", 
           RowBox[{"Prepend", "[", 
            RowBox[{"keysB", ",", 
             RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{
            "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
            "]"}], "=", "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "assign", " ", "grades", " ", "after", " ", "removing", " ", 
          "possible", " ", "minus", " ", "signs"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{"keysB", ",", "_baseSymbol", ",", "Infinity"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"gr", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
          "indSet"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGradeList", "[", 
            RowBox[{"keysB", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
           RowBox[{"gr", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"set", " ", "value", " ", "for", " ", "gaRunningAlgebra"}], 
          ",", " ", 
          RowBox[{"because", " ", "many", " ", 
           RowBox[{"gaGradeList", "[", " ", "]"}], " ", "and", " ", "others", 
           " ", "depend", " ", "on", " ", "it"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"gaRunningAlgebra", "=", "productAlgebra"}], ";"}], "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"quiet", ",", "True", ",", 
          RowBox[{"ifPrint", "=", "False"}], ",", "Automatic", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaDimensionOfVectorSpace", "[", "productAlgebra", "]"}],
              "<", "8"}], ",", 
            RowBox[{"ifPrint", "=", "True"}], ",", 
            RowBox[{"ifPrint", "=", "False"}]}], "]"}], ",", "False", ",", 
          RowBox[{"ifPrint", "=", "True"}], ",", "_", ",", 
          RowBox[{"ifPrint", "=", "True"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"!", "ifPrint"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Basis vectors are stored in \>\"", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "=!=",
                  "All"}], ")"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"HoldForm", "@@", 
                  RowBox[{"{", 
                   RowBox[{"\[FormalN]", "[", 
                    RowBox[{
                    "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                    "grOnly"}], "]"}], "}"}]}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"\[FormalN]", "->", "gaOrthonormalBasis"}], "}"}]}],
                 ")"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"HoldForm", "@@", 
                  RowBox[{"{", 
                   RowBox[{"\[FormalN]", "[", 
                    RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\""}], 
                    "]"}], "}"}]}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"\[FormalN]", "->", "gaOrthonormalBasis"}], "}"}]}],
                 ")"}]}], "\[IndentingNewLine]", "]"}]}], "}"}], 
           "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{
         "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[961]:=",ExpressionUUID->"17491090-7169-444d-b2da-af5b9d96d2d9"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"grOnly", "===", "All"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\""}], "]"}], "=", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
     "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"f72f2ae8-e5ad-4b2e-8d85-c74a81e34d37"],

Cell[TextData[{
 "Set universal unit element grade, this will not influence",
 StyleBox[" private Context",
  FontColor->RGBColor[1, 0, 1]],
 " element ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"2004339b-a5ed-4d7c-b973-c688b4490b2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "__"}],
          "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[962]:=",ExpressionUUID->"7c51d151-19a1-417a-95a4-dd52acd99d83"],

Cell[TextData[{
 "The ",
 StyleBox["gaToTensorProduct[ ]",
  FontWeight->"Bold"],
 " tries to decompose given algebra (or their tensor product, without term \
reordering) into elementary algebras, for which matrix representations are \
well known. Decomposition into algebras Cl[2,0],Cl[1,1],Cl[0,2] enables to \
find orthonormal base (possibly non optimal) using direct product of \
elementary algebras"
}], "Text",ExpressionUUID->"0dc33902-e4f9-45e2-992f-be3c58c2bc19"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"elementaryTPAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reductionAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], "=", 
   "\"\<Reduction set `1` is not allowed\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaToTensorProduct", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"ReductionOrder", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionToTensorProduct", "[", "\"\<ReductionOrder\>\"", "]"}],
     "=", "\"\<List of elementary Clifford algebras \
Cl[0,1,0],Cl[0,2,0],Cl[1,0,0],Cl[1,1,0],Cl[2,0,0] or list of list of these \
algebras in order of preffered reduction.\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "two", " ", "argument", " ", "call", " ", "does", " ", "real", 
    " ", "job"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionToTensorProduct", "[", 
     RowBox[{"\"\<ReductionOrder\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", "val", "]"}], ",", "elementaryTPAlgebras"}], 
      "]"}], "===", 
     RowBox[{"Union", "[", "elementaryTPAlgebras", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_Cl", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theOption", ",", "reductionInstructionNo00"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaSetNamedOptionValue", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"gaToTensorProduct", ",", "#", ",", "theOption"}], "}"}],
             ",", 
            RowBox[{
             RowBox[{"gaOptionCheck", "[", "testOptionToTensorProduct", "]"}],
              "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                "}"}]}], ")"}], "]"}], ",", 
            RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
           "]"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"Flatten", "[", 
           RowBox[{"First", "/@", 
            RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "set", " ", "option", " ", "value", " ", "if", " ", "it", " ", "was",
           " ", "not", " ", "provided"}], " ", "*)"}], "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], "]"}], 
           "===", "theOption"}], ",", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{"ReductionOrder", "/.", 
             RowBox[{"Options", "[", "gaToTensorProduct", "]"}]}], ")"}]}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], 
              "]"}], ",", "reductionAlgebras"}], "]"}], "=!=", 
           "reductionAlgebras"}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", 
             RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}]}], 
            "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"reductionInstructionNo00", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "0"}], "]"}], ",", "Infinity"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", "__Cl", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{"step", ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              "reductionInstructionNo00"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], ".."}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                RowBox[{"First", "[", 
                 RowBox[{"NestWhile", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "y", "}"}], ",", 
                    RowBox[{"step", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "y", "]"}], ",", 
                    RowBox[{"First", "[", 
                    RowBox[{"Last", "[", "y", "]"}], "]"}]}], "]"}]}], "]"}], 
                    "[", "#", "]"}], ",", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                   RowBox[{"SameTest", "\[Rule]", "UnsameQ"}], ",", 
                   RowBox[{"Plus", "@@", "al"}], ",", "Infinity", ",", "2"}], 
                  "]"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              RowBox[{"(", 
               RowBox[{"RotateRight", "/@", "reductionInstructionNo00"}], 
               ")"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", 
             RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}]}], 
            "]"}], ";", "al"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"al", "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaTensorProduct", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaToTensorProduct", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[963]:=",ExpressionUUID->"f0cac43a-a5b5-414c-9ba9-84c76d1035cb"],

Cell[TextData[{
 "Help steps of how each specific algebra acts on p\[CloseCurlyQuote]s and q\
\[CloseCurlyQuote]s. See ",
 ButtonBox["[NDNO-CoMISoMvCA], [NDSK-EIoRCA],[MRdT].",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text",ExpressionUUID->"05bf773e-bea5-4d74-8f4a-bfdbd69f354f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "diff", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}], "-", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "diff", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "diff", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"step", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"al", ",", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"col", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input",\

 CellLabel->
  "In[972]:=",ExpressionUUID->"e2b95f55-d196-4acd-946c-7969f350f8e6"],

Cell["\<\
The reverse step, i.e. reconstruction of algebra from tensor products is much \
simple, because we don\[CloseCurlyQuote]t need to realize different \
possibilities\
\>", "Text",ExpressionUUID->"a44a8f39-8078-43d6-8469-d67e5178d3b6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{"ar", "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[976]:=",ExpressionUUID->"2e03cc5f-3e40-447c-a7ab-d9d15462853c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_gaTensorProduct", "]"}], ":=", 
   RowBox[{"Cl", "@@", 
    RowBox[{"Fold", "[", 
     RowBox[{"stepRev", ",", 
      RowBox[{"List", "@@@", 
       RowBox[{"(", 
        RowBox[{"List", "@@", "al"}], ")"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_Cl", "]"}], ":=", "al"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[979]:=",ExpressionUUID->"16fbb544-26f0-494c-85d5-878560147981"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Matrix representations of Clifford algebras"
}], "Subsubsection",ExpressionUUID->"6b939310-0ac4-4f83-be43-f67d5d5a528e"],

Cell["\<\
Matrix representations of elementary algebras. For general representations we \
limit ourselves only with simple one parameter representations. In general \
(see Cl2Allrepresentations.nb)  representations, which have up to 3 free \
parameters can be constructed. These representations, however, become \
singular for some parameter values, so not included here). Representations \
are listed in order of preference, i.e. Option Automatic will simply take \
first representation of the list.\
\>", "Text",ExpressionUUID->"5e04349c-e89b-4453-bdf9-a0c8881e0241"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[981]:=",ExpressionUUID->"cc91ff43-d28b-482a-be73-3ba36c80c350"],

Cell["\<\
For Cl[1,0,0]: note outer multiply with {{{0,1},{1,0}} choice will not give \
block diagonal representation! \
\>", "Text",ExpressionUUID->"2d39579c-cb56-4b14-97e8-b5a458470a2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Diagonal\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[982]:=",ExpressionUUID->"eb8a3752-a219-4986-8081-23da3b90344f"],

Cell["For Cl[0,1,0]", "Text",ExpressionUUID->"1158ca6d-7a2b-4078-832c-c1c5afb310fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", "\"\<Complex\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "I", "}"}], "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[983]:=",ExpressionUUID->"58f6f4ea-7bc7-409c-a237-5e64d7f13d66"],

Cell["For Cl[2,0,0]", "Text",ExpressionUUID->"b38a2216-04d4-4e65-8628-b4f0c0bbbf33"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[1,2]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[2,3]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[3,1]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"this", " ", "is"}], " ", "-", 
       RowBox[{"I", "*", 
        RowBox[{"Pauli", "[", 
         RowBox[{"3", ",", "1"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[984]:=",ExpressionUUID->"2b946737-44b6-451d-9d2e-6e6d73d49ef9"],

Cell["For Cl[1,1,0]", "Text",ExpressionUUID->"2c5fdd3a-19a6-4dce-bd2e-97d71e72f516"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<SymmetricComplex\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary1\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary2\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[985]:=",ExpressionUUID->"cb52c7bd-0855-49a8-859e-4de8a9ef6df0"],

Cell["For Cl[0,2,0]", "Text",ExpressionUUID->"3bef303a-2d39-473f-83a0-e62c7ff49610"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[1,2]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[2,3]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[3,1]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"-", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}],
        ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Real\>\""}], 
        "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        "}"}]}], ",", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"quaternionic", " ", "representations"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[1,2]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[2,3]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[3,1]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]", 
         "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[986]:=",ExpressionUUID->"0328597e-8fe7-4b0d-92f9-a316bbe443df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", "al_Cl", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
        RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", 
     RowBox[{"al_Cl", ",", "rep_String", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"BasisVectorsMultipliers", "/.", 
              RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
           ")"}]}], ",", 
         RowBox[{"repMatrix", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"vRep", "[", 
             RowBox[{"al", ",", "rep"}], "]"}], "/.", 
            RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"mult", ",", 
            RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
           RowBox[{"{", 
            RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaDefineMatrixRepresentation", "::", 
              "BasisVectorsMultipliers"}], ",", "mult", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
           RowBox[{"mult", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{"repMatrix", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
           ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
           "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
         "rep"}], "]"}]}], "&&", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
        ",", "rep"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BasisVectorsMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}], ",", "repMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"mult", ",", 
           RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
         RowBox[{"mult", "=", 
          RowBox[{"Table", "[", 
           RowBox[{"1", ",", 
            RowBox[{"{", 
             RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}],
             ",", "mult", ",", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"arg", "=", 
            RowBox[{"Unique", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"repMatrix", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vRep", "[", 
               RowBox[{"al", ",", "rep", ",", "arg"}], "]"}], "/.", 
              RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}], ";", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mult", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{"repMatrix", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
         "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"x_Symbol", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"Symbol", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"SymbolName", "[", "x", "]"}], ",", 
              RowBox[{"\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
             "]"}], "]"}], "/;", 
           RowBox[{
            RowBox[{"Context", "[", "x", "]"}], "===", 
            "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
         ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
       "rep"}], "]"}], "&&", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
       ",", "rep"}], "]"}]}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[987]:=",ExpressionUUID->"ab6bea84-001b-4b02-9aa9-6b8fb29d0ba7"],

Cell[TextData[{
 "Help function ",
 StyleBox["gaElementaryAlgebraToMatrixRepresentationRules[ ] ",
  FontWeight->"Bold"],
 "construct replacement rules index->matrix for each of vectors (and identity \
element). Note. When dealing with function gaOrthonormalBasis",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", which does not hold its arguments, then",
 StyleBox[" ValueQ[",
  FontWeight->"Bold"],
 "gaOrthonormalBasis",
 StyleBox["[ ]]",
  FontWeight->"Bold"],
 " returns True if argument was evaluated. So, in this way we cannot decide \
if  base was defined. Then instead of  ",
 StyleBox["ValueQ[ ]",
  FontWeight->"Bold"],
 " for base definition we use check ",
 StyleBox["Head[",
  FontWeight->"Bold"],
 "gaOrthonormalBasis",
 StyleBox["[al,{1}]]===",
  FontWeight->"Bold"],
 "gaOrthonormalBasis"
}], "Text",ExpressionUUID->"8b74032a-596c-4fee-b8ce-04141b63b542"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
     "representation"}], "=", 
    "\"\<Algeba `1` matrix representation `2` is undefined. Select from \
defined values `3`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "replRules", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep", ",", "opts"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeList", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaIndexList", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep", ",", "opts"}], "]"}], "]"}], "===", 
          "gaListDefinedElementaryRepresentations"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", "rep", ",", 
            RowBox[{
            "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"replRules", "=", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"index2Repl", ",", 
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", "rep", ",", "opts"}], "]"}]}], "]"}], "]"}],
            ")"}], ",", 
          RowBox[{
           RowBox[{"{", "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{"di", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input",\

 CellLabel->
  "In[990]:=",ExpressionUUID->"554103e6-a29b-4723-9efd-93a40e169911"],

Cell["\<\
The explicit specification of elementary algebras matrix representations.\
\>", "Text",ExpressionUUID->"47be6f27-a1e2-4cb4-a3be-3ca2063d46e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"rep__", "?", "MatrixQ"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "newRep", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"{", "rep", "}"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BasisVectorsMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"{", "rep", "}"}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{
               RowBox[{"{", "rep", "}"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ")"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", 
            RowBox[{"{", "rep", "}"}], ",", 
            RowBox[{
            "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}],
             ",", "mult", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
          
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeList", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaIndexList", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newRep", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"{", "rep", "}"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"index2Repl", ",", "newRep"}], "]"}], "]"}], ")"}], ",", 
         RowBox[{
          RowBox[{"{", "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"IdentityMatrix", "[", 
            RowBox[{"di", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[992]:=",ExpressionUUID->"d673cd2d-15a8-4500-b2c4-5a6883ae1b9f"],

Cell["\<\
Quaternion tensor product H\[CircleTimes]H ->R(4) isomorphism rules, taken \
from [NDSK-EIoRCA]. And simple C\[CircleTimes]H->C(2) rules, using Pauli 1,2 \
matrix representation  \
\>", "Text",ExpressionUUID->"9962236f-dfbf-487d-aa34-55b0ca8cecff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<HH2R4\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "\"\<IToRealMatrix\>\"", " ", "rules", " ", "are", " ", "implemented", 
       " ", 
       RowBox[{"differently", ".", " ", "Only"}], " ", "special", " ", 
       "cases", " ", 
       RowBox[{"works", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<IToRealMatrix\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProductI", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", 
          RowBox[{"-", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", "I", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", 
          RowBox[{"-", "I"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<QToRealMatrix\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "without", " ", "isomorphismPreRules", " ", "BaseVectorMultiplies", " ", 
       RowBox[{"don", "'"}], "t", " ", "properly", " ", "work", " ", "with", 
       " ", "above", " ", "isomorphism", " ", "rules"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"isomorphismPreRules", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", "c_", ",", "a3___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "1", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "c", "}"}], ",", 
             RowBox[{"MV", "|", "bs"}], ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
           RowBox[{"c", "=!=", "1"}]}]}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", 
           RowBox[{"c_", "*", "a2_"}], ",", "a3___"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "a2", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "c", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "}"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[993]:=",ExpressionUUID->"af198689-fe63-473c-952c-2aa5f912deba"],

Cell[TextData[{
 "Help function",
 StyleBox[" applyQuaternionIsomorphismRules[ ]",
  FontWeight->"Bold"],
 ", which apply isomorphism rules under request. The  ",
 StyleBox["nestedApplyQuaternionIsomorphismRules[ ] ",
  FontWeight->"Bold"],
 "apply list of these rules repeatedly"
}], "Text",ExpressionUUID->"2444e767-719e-43aa-bcf8-ac696b7ebc2b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"applyQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rule", ":", 
         RowBox[{"(", 
          RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
       "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
   RowBox[{"ArrayFlatten", "[", 
    RowBox[{"expr", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{"a1_", ",", "a2_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a1", ",", "a2"}], "]"}], "/.", "isomorphismPreRules"}],
             ")"}], "/.", 
           RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
         RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        RowBox[{
        "\"\<Pauli[1,2]\>\"", "|", "\"\<IToRealMatrix\>\"", "|", 
         "\"\<QToRealMatrix\>\""}]}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "a1", "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nestedQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{"rule_List", ",", 
        RowBox[{"theRule", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Pauli[1,2]\>\"", "|", "\"\<HH2R4\>\"", "|", 
           "\"\<IToRealMatrix\>\"", "|", "\"\<QToRealMatrix\>\""}], ")"}]}]}],
        "}"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nestNumber", "=", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"Length", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
            "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"applyQuaternionIsomorphismRule", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{"rule", ",", "theRule"}], "}"}]}], "]"}], "&"}], ",", 
        "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", "ruleListList_", ",", 
     "type_List"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "ruleListList", "]"}], "===", 
      RowBox[{"Length", "[", "type", "]"}]}], ",", 
     RowBox[{"Fold", "[", 
      RowBox[{"nestedQuaternionIsomorphismRule", ",", "expr", ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"ruleListList", ",", "type"}], "}"}], "]"}]}], "]"}], ",", 
     "expr"}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[994]:=",ExpressionUUID->"c92ebfe4-be39-406a-9c4e-556bcfdb6856"],

Cell[TextData[{
 "Help function",
 StyleBox[" singleElementOuterMultiply[ ]",
  FontWeight->"Bold"],
 " construct outer product for single algebra element."
}], "Text",ExpressionUUID->"25567cf3-ccfa-4176-a986-2401bfb33078"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"singleElementOuterMultiply", "[", 
       RowBox[{
        RowBox[{"c_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{"ind_mvDownUp", ",", "algTP_gaTensorProduct"}], "]"}]}], 
        ",", "algRepRules_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "productMatrices", ",", "opElement", ",", "opMatrix", ",", "marks", 
           ",", "vars", ",", "varsWithMarks", ",", 
           RowBox[{"replaceTensorProducts", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"theQuaternionReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "quaternionReplacement", ",", 
           RowBox[{"theImaginaryIReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "imaginaryIReplacement", ",", 
           "matrixOuterProductOrder", ",", "resultWithoutQuaternionRepl", ",",
            "resultWithQuaternionReplButWithoutIRepl"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"quaternionReplacement", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"QuaternionIsomorphismRules", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"QuaternionIsomorphismRules", "\[Rule]", 
               RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"imaginaryIReplacement", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{"quaternionReplacement", ",", 
             RowBox[{"{", "\"\<IToRealMatrix\>\"", "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"quaternionReplacement", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{"quaternionReplacement", ",", "\"\<IToRealMatrix\>\""}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"matrixOuterProductOrder", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"MatrixOuterProductOrder", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}], 
              "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRepRules", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"varsWithMarks", "=", 
              RowBox[{"Thread", "[", 
               RowBox[{"List", "[", 
                RowBox[{
                 RowBox[{"marks", "=", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}], "&"}], "/@",
                     "algRepRules"}], ")"}]}], ",", 
                 RowBox[{"vars", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"Unique", "[", "sEOM", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "algRepRules", "]"}], "}"}]}], 
                   "]"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{"marks", ",", "False"}], "]"}], "===", "1"}], 
                 ")"}], "&&", 
                RowBox[{"quaternionReplacement", "===", 
                 RowBox[{"{", "}"}]}]}], ",", 
               RowBox[{"(*", " ", 
                RowBox[{
                "for", " ", "single", " ", "quaternion", " ", "can", " ", 
                 "use", " ", "GeometricProduct", " ", "immediatelly", " ", 
                 "if", " ", "option", " ", "isomorphismRules", " ", "not", 
                 " ", "set"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"replaceTensorProducts", "=", 
                  RowBox[{"{", 
                   RowBox[{"RuleDelayed", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Pattern", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Blank", "[", "]"}]}], "]"}], "&"}], "/@", 
                    "vars"}], ")"}]}], ",", 
                    RowBox[{"Times", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"True", "\[Rule]", "Nothing"}]}], "]"}]}], ")"}], 
                    ",", 
                    RowBox[{"(", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"False", "\[Rule]", "Nothing"}]}], "]"}]}], 
                    ")"}]}], "]"}]}], "}"}]}], "}"}]}], ")"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"theQuaternionReplacementRules", "=", 
                 RowBox[{
                 "isomorphismRules", "/@", "quaternionReplacement"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"opElement", "=", "gaTensorProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"productMatrices", "=", 
           RowBox[{"(", 
            RowBox[{"opMatrix", "@@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{"ReplaceAll", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"List", "@@", 
                  RowBox[{"(", 
                   RowBox[{"ind", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "a_", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", "a"}], "}"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", "algRepRules"}], "}"}]}], "]"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"opElement", "===", "Times"}], ")"}], "&&", 
             RowBox[{"(", 
              RowBox[{"matrixOuterProductOrder", "===", "Reverse"}], ")"}]}], 
            ",", 
            RowBox[{"productMatrices", "=", 
             RowBox[{"Reverse", "[", "productMatrices", "]"}]}]}], "]"}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"resultWithoutQuaternionRepl", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "*", 
                 RowBox[{"Nest", "[", 
                  RowBox[{"ArrayFlatten", ",", 
                   RowBox[{"Outer", "[", 
                    RowBox[{"opElement", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", "productMatrices", ")"}]}]}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "productMatrices", "]"}], "-", 
                    "1"}]}], "]"}]}], ")"}], "/.", "replaceTensorProducts"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[RuleDelayed]", "1"}],
               "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"resultWithQuaternionReplButWithoutIRepl", "=", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"quaternionReplacement", "===", 
               RowBox[{"{", "}"}]}], ",", "resultWithoutQuaternionRepl", ",", 
              
              RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
               RowBox[{
               "resultWithoutQuaternionRepl", ",", 
                "theQuaternionReplacementRules", ",", 
                "quaternionReplacement"}], "]"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"imaginaryIReplacement", "===", 
             RowBox[{"{", "}"}]}], ",", 
            "resultWithQuaternionReplButWithoutIRepl", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theImaginaryIReplacementRules", "=", 
              RowBox[{"isomorphismRules", "/@", "imaginaryIReplacement"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                   "Flatten", "[", "resultWithQuaternionReplButWithoutIRepl", 
                    "]"}], ",", "0"}], "]"}], "]"}], "===", 
                RowBox[{
                "Length", "[", "resultWithQuaternionReplButWithoutIRepl", 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", "isomorphismIRule"}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ArrayFlatten", "@@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"resultWithQuaternionReplButWithoutIRepl", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"cc", ":", 
                    RowBox[{"(", 
                    RowBox[{"1", "|", 
                    RowBox[{"-", "1"}], "|", "I", "|", 
                    RowBox[{"-", "I"}]}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"gaTensorProductI", "[", "cc", "]"}]}], "}"}]}], 
                    ")"}], "/.", "theImaginaryIReplacementRules"}], ")"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaTensorProductI", "[", "0", "]"}], "\[Rule]", 
                    "0"}], "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", 
                  "isomorphismIRuleBad"}], "]"}], ";", "\[IndentingNewLine]", 
                "resultWithQuaternionReplButWithoutIRepl"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[998]:=",ExpressionUUID->"e15179ba-0719-4a98-a6c6-9518331698c8"],

Cell[TextData[{
 "Function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaDefineMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " construct entire algebra matrix representation from known elementary \
algebras representation. For complex (\[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]) representations, when in the decomposition appears \
algebra Cl[1,0] we use the following trick. First restore Cl[p,q] algebra \
from direct from direct product decomposition. Then instead of Cl[p,q] take \
Cl[q,p], for which decomposition into direct product yields Cl[0,1] (instead \
of Cl[1,0]). Calculate orthonormal base and matrix representation for this \
algebra. Take matrices, which corresponds vectors of calculated matrices. \
Multiply these vectors by  imaginary unit \[ImaginaryI]. This effectively \
will turn algebra Cl[q,p] vectors into Cl[p,q] vectors which we are seeking. \
Construct entire base of algebra using these matrices. The little problem is \
how to ensure strict correspondence between matrices obtained in this way and \
Cl[p,q] elements (if this is possible in general). "
}], "Text",ExpressionUUID->"cb6f7345-5eaa-463d-8231-cb699aa451e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"groupByGrade", "[", 
    RowBox[{"x_List", ",", "algebra_"}], "]"}], ":=", 
   RowBox[{"Internal`PartitionRagged", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Length", "/@", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"algebra", ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGradeList", "[", "#1", "]"}], "===", 
           RowBox[{"gaGradeList", "[", "#2", "]"}]}], "&"}], ")"}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[999]:=",ExpressionUUID->"6217af8e-f291-4a5f-a58d-8f82e1c54e27"],

Cell["\<\
If an algebra is elementary, just replace by defined representation\
\>", "Text",ExpressionUUID->"2c3ab399-4e9f-4e2a-8d99-3660d335853f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "Options", "[", "defineMatrixRepresentationTensorProductMethod", "]"}], 
   "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ElementaryRepresentations", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"BaseVectorAlgebra", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
     RowBox[{"ReductionOrder", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], ",", 
     
     RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}], ",", 
     RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1000]:=",ExpressionUUID->"9bbc0161-7f45-4686-bd06-988971ddfd73"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"the", " ", "TensorProduct", " ", "method", " ", 
    RowBox[{"options", ":", " ", 
     RowBox[{
     "one", " ", "argument", " ", "call", " ", "prints", " ", 
      "messages"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<ElementaryRepresentations\>\"", "]"}], "=", 
     "\"\<Possible settings for different elementary algebras are {Cl[0,1,0]\
\[Rule]\\\"Complex\\\"|\\\"Antisymmetric\\\",\\n \
Cl[0,2,0]\[Rule]\\\"Pauli[1,2]\\\"|\\\"Pauli[2,3]\\\"|\\\"Pauli[3,1]\\\"|\\\"\
Trigonometric\\\"|\\\"TrigonometricAntisymmetric\\\"|\\\"\
HyperbolicTrigonometric\\\"|\\\"HyperbolicTrigonometricAntisymmetric\\\"|\\\"\
Real\\\"|\\\"Q[1,2]\\\"|\\\"Q[2,3]\\\"|\\\"Q[3,1]\\\", \
Cl[1,0,0]\[Rule]\\\"Diagonal\\\"|\\\"Symmetric\\\",\\n \
Cl[1,1,0]\[Rule]\\\"Antisymmetric\\\"|\\\"SymmetricComplex\\\"|\\\"Imaginary1\
\\\"|\\\"Imaginary2\\\"|\\\"Trigonometric\\\"|\\\"TrigonometricAntisymmetric\\\
\"|\\\"HyperbolicTrigonometric\\\"|\\\"HyperbolicTrigonometricAntisymmetric\\\
\",\\n Cl[2,0,0]\[Rule]\\\"IPauli[1,2]\\\"|\\\"IPauli[2,3]\\\"|\\\"IPauli[3,1]\
\\\"|\\\"Symmetric\\\"|\\\"Trigonometric\\\"|\\\"TrigonometricAntisymmetric\\\
\"|\\\"HyperbolicTrigonometric\\\"|\\\"HyperbolicTrigonometricAntisymmetric\\\
\"}\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<BaseVectorAlgebra\>\"",
       "]"}], "=", 
     "\"\<Cl[p,q], where p+q matches the dimension of algebra matrix \
representation of which is computed.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<TargetMatrices\>\"", 
      "]"}], "=", "\"\<Reals|Complexes\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", "\"\<ReductionOrder\>\"", 
      "]"}], "=", 
     "\"\<List of elementary Clifford algebras {__Cl}, or List of lists of \
these algebras {{__Cl}..}\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<MatrixOuterProductOrder\>\"", "]"}], "=", 
     "\"\<Identity|Reverse\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineMatrixRepresentation", "[", 
      "\"\<QuaternionIsomorphismRules\>\"", "]"}], "=", 
     RowBox[{
     "True", "|", "False", "|", "\"\<HH2R4\>\"", "|", "\"\<Pauli[1,2]\>\"", 
      "|", "\"\<QToRealMatrix\>\"", "|", 
      "\"\<IToRealMatrix (not properly implemented)\>\"", "|", 
      "\"\< or list of their combinations like \
{\\\"HH2R4\\\",\\\"QToRealMatrix\\\"}\>\""}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"the", " ", "TensorProduct", " ", "method", " ", 
     RowBox[{"options", ":", " ", 
      RowBox[{
      "two", " ", "argument", " ", "call", " ", "does", " ", "real", " ", 
       "job"}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<ElementaryRepresentations\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", "val", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{"_Cl", ",", "_"}], "]"}], ".."}], "}"}]}], "]"}], "&&", 
      RowBox[{"(", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"MemberQ", "@@@", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaListDefinedElementaryRepresentations", "/@", 
              RowBox[{"(", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"Thread", "/@", "val"}], "]"}]}], ")"}]}], ",", 
             RowBox[{"Last", "/@", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Thread", "/@", "val"}], "]"}]}]}], "}"}], "]"}]}], 
         ")"}]}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<BaseVectorAlgebra\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Cl", "[", "__", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<TargetMatrices\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Reals", "|", "Complexes"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<ReductionOrder\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{
          RowBox[{"{", "__Cl", "}"}], "|", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}]}], "]"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", "val", "]"}], ",", 
           "elementaryTPAlgebras"}], "]"}], "===", 
         RowBox[{"Union", "[", "elementaryTPAlgebras", "]"}]}], ")"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<MatrixOuterProductOrder\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Identity", "|", "Reverse"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineMatrixRepresentation", "[", 
      RowBox[{"\"\<QuaternionIsomorphismRules\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "val", "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
         "True", ",", "False", ",", "\"\<HH2R4\>\"", ",", 
          "\"\<Pauli[1,2]\>\"", ",", "\"\<QToRealMatrix\>\"", ",", 
          "\"\<IToRealMatrix\>\""}], "}"}]}], "]"}], "===", 
      RowBox[{"Union", "[", 
       RowBox[{"{", 
        RowBox[{
        "True", ",", "False", ",", "\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\"",
          ",", "\"\<QToRealMatrix\>\"", ",", "\"\<IToRealMatrix\>\""}], "}"}],
        "]"}]}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1001]:=",ExpressionUUID->"4261481c-03f8-4baf-9b2b-8456163a5723"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_Cl", ",", "generalOpts_List", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", 
        RowBox[{
        "defineMatrixRepresentationTensorProductMethod", ",", 
         "gaDefineMatrixRepresentation"}], "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theOption", ",", "\[IndentingNewLine]", 
        RowBox[{"definedReps", "=", 
         RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}]}],
         ",", "whi", ",", "thisRep", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "}"}]}], ",", "answer", ",", "opMatrix", ",", 
        "alvectors", ",", "sortedAnswer", ",", "answerFin", ",", 
        "allMatrices"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
          ",", 
          RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
          RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}]}],
          "}"}], "=", "generalOpts"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "that", " ", "permutation", " ", "is", " ", "only", " ",
          "between", " ", "basis", " ", "vectors", " ", "of", " ", "same", 
         " ", "signature"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"None", "|", "\"\<None\>\""}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
          "=", 
          RowBox[{"Range", "[", 
           RowBox[{"(", 
            RowBox[{"Plus", "@@", "al"}], ")"}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", "__Integer", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", 
             RowBox[{"validBasisVectorsReordering", "[", 
              RowBox[{"al", ",", 
               RowBox[{
               "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}]}], 
              "]"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaDefineMatrixRepresentation", "::", 
                "basisvectorpermutation"}], ",", 
               RowBox[{
               "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], ",",
                " ", 
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"al", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                 RowBox[{
                  RowBox[{"al", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "+", 
                  RowBox[{"al", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], "=", 
              
              RowBox[{"Range", "[", 
               RowBox[{"(", 
                RowBox[{"Plus", "@@", "al"}], ")"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"$MessagePrePrint", "=", "Identity"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaSetNamedOptionValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "gaDefineMatrixRepresentation", ",", "#", ",", "theOption"}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{
               "gaOptionCheck", "[", "testOptionDefineMatrixRepresentation", 
                "]"}], "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                  "}"}]}], ")"}], "]"}], ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Flatten", "[", 
             RowBox[{"First", "/@", 
              RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "set", " ", "unset", " ", "values", " ", "for", " ", "simple", " ", 
          RowBox[{"options", ":", " ", 
           RowBox[{
           "not", " ", "all", " ", "options", " ", "is", " ", "used", " ", 
            "in", " ", "this", " ", "command"}]}]}], ","}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{
           "theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}], 
           "]"}], "===", "theOption"}], ",", 
         RowBox[{
          RowBox[{
          "theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"ElementaryRepresentations", "/.", 
            RowBox[{
            "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
             "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{
           "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}], 
           "]"}], "===", "theOption"}], ",", 
         RowBox[{
          RowBox[{
          "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}], "=", 
          
          RowBox[{"(", 
           RowBox[{"QuaternionIsomorphismRules", "/.", 
            RowBox[{
            "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
             "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "if", " ", "there", " ", "are", " ", "no", " ", "elementary", " ", 
          "representation", " ", "replacement", " ", "rules"}], ",", " ", 
         RowBox[{"then", " ", "define"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}], ",", 
           
           RowBox[{"Automatic", "|", "\"\<Automatic\>\""}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"whi", "=", 
              RowBox[{"Cases", "[", 
               RowBox[{"gaDefaultMatrixRepresentationData", ",", 
                RowBox[{"{", 
                 RowBox[{"al", ",", "__"}], "}"}]}], "]"}]}], ")"}], "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "if", " ", "elementary", " ", "matrices", " ", "are", " ", "put", 
             " ", "in", " ", "default", " ", "data", " ", "take", " ", 
             "them"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"thisRep", "=", 
            RowBox[{"al", "/.", 
             RowBox[{"whi", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"else", " ", "determine", " ", "automatically"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "NoDefaultData"}],
               ",", "al", ",", 
              RowBox[{
              "gaListDefinedElementaryRepresentations", "[", "al", "]"}], ",", 
              RowBox[{
              "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}],
              "]"}], ";", 
            RowBox[{"thisRep", "=", 
             RowBox[{"al", "/.", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}],
                 "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"thisRep", "=", 
          RowBox[{"(", 
           RowBox[{"al", "/.", 
            RowBox[{
            "theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}]}], 
           ")"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "if", " ", "we", " ", "have", " ", "a", " ", "list", 
         " ", "of", " ", "matrices", " ", "after", " ", "replacement"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"thisRep", ",", 
           RowBox[{"{", 
            RowBox[{"__", "?", "MatrixQ"}], "}"}]}], "]"}], ",", "thisRep", 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"thisRep", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "thisRep", "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "special", " ", "case", " ", "for", " ", "compatability", " ", 
            "to", " ", "decide", " ", "if", " ", "we", " ", "need", " ", "to",
             " ", "replace", " ", "quaternion", " ", "by", " ", "matrices"}], 
           "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}], 
               "===", "True"}], ")"}], "||", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", 
                  "]"}], "}"}], "]"}], ",", "\"\<Pauli[1,2]\>\""}], "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"bs", "=", 
                 RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}],
                 "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"theQuaternionReplacementRules", "=", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "I"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"definedReps", ",", "thisRep"}], "]"}], "===", 
             RowBox[{"Union", "[", "definedReps", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"answer", "=", 
             RowBox[{
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", 
                RowBox[{"First", "[", "thisRep", "]"}], ",", 
                RowBox[{"BasisVectorsMultipliers", "->", 
                 RowBox[{
                 "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", 
                  "]"}]}]}], "]"}], "/.", "theQuaternionReplacementRules"}]}],
             ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
                "representation"}], ",", "al", ",", "thisRep", ",", 
               RowBox[{
               "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
              "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"answer", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"opMatrix", "=", "Dot"}], ",", "\[IndentingNewLine]", 
            RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
             "gaOrthonormalBasis"}], ",", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
              RowBox[{"gaGradesOnly", "\[Rule]", 
               RowBox[{"{", "1", "}"}]}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
              ",", 
              RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"alvectors", "=", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"First", "[", "answer", "]"}], "]"}], "]"}], "*", 
                   "#"}], ")"}], "&"}], "/@", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", 
                  "alvectors"}], "]"}]}], "=!=", " ", 
               RowBox[{"opMatrix", "[", 
                RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"sortedAnswer", "=", 
               RowBox[{"Sort", "[", 
                RowBox[{"answer", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Dot", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                    RowBox[{
                    RowBox[{"opMatrix", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
                "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], 
              "]"}], ";", " ", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}],
             ",", 
            RowBox[{"None", "|", "\"\<None\>\""}], ",", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], "=", 
             RowBox[{"Range", "[", 
              RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "]"}]}]}],
            "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"answerFin", "=", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"alvectors", ",", 
              RowBox[{"sortedAnswer", "[", 
               RowBox[{"[", 
                RowBox[{
                "theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
                "]"}], "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"answerFin", "=", 
             RowBox[{"Thread", "[", 
              RowBox[{"Rule", "[", 
               RowBox[{"alvectors", ",", "sortedAnswer"}], "]"}], "]"}]}], 
            ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "if", " ", "full", " ", "algebra", " ", "representation", " ", 
            "was", " ", "requested", " ", "call", " ", 
            RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", 
            " ", "special", " ", "syntax"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", "1", "}"}], ",", "answerFin", ",", 
            "\[IndentingNewLine]", "All", ",", 
            RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}], 
            ",", "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allMatrices", "=", 
              RowBox[{
              "gaDefineMatrixRepresentation", "[", "answerFin", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Pick", "[", 
              RowBox[{"allMatrices", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"#", "=!=", "0"}], ")"}], "&"}], "/@", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaGetMV", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}],
                     "]"}], "&"}], ",", 
                  RowBox[{"First", "/@", "allMatrices"}]}], "]"}]}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[1013]:=",ExpressionUUID->"d4890554-90e0-42a9-86f4-1d2a82521921"],

Cell["\<\
When algebra is not elementary, reduce to tensor product of reduced algebras\
\>", "Text",ExpressionUUID->"6af371d5-cdce-42d3-9d00-718c673adabd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
   RowBox[{"al_Cl", ",", "generalOpts_List", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{
       "defineMatrixRepresentationTensorProductMethod", ",", 
        "gaDefineMatrixRepresentation"}], "}"}], "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "newGenOpts", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"Last", "[", "generalOpts", "]"}], ",", 
          RowBox[{"None", "|", "\"\<None\>\""}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "test", " ", "if", " ", "basis", " ", "vector", " ", "permutation", 
          " ", "do", " ", "not", " ", "attempt", " ", "to", " ", "permute", 
          " ", "vectors", " ", "with", " ", "different", " ", "signatures"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newGenOpts", "=", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"Most", "[", "generalOpts", "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"(", 
              RowBox[{"Plus", "@@", "al"}], ")"}], "]"}]}], "]"}]}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{
            RowBox[{"SameQ", "@@", 
             RowBox[{"(", 
              RowBox[{"Sort", "/@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Plus", "@@", "al"}], ")"}], "-", 
                    RowBox[{"al", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}], "&"}],
                  "/@", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Range", "[", 
                    RowBox[{"(", 
                    RowBox[{"Plus", "@@", "al"}], ")"}], "]"}], ",", 
                   RowBox[{"Last", "[", "generalOpts", "]"}]}], "}"}]}], 
                ")"}]}], ")"}]}], "&&", "\[IndentingNewLine]", 
            RowBox[{"SameQ", "@@", 
             RowBox[{"(", 
              RowBox[{"Sort", "/@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"al", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"al", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                    RowBox[{"al", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}], "&"}],
                  "/@", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Range", "[", 
                    RowBox[{"(", 
                    RowBox[{"Plus", "@@", "al"}], ")"}], "]"}], ",", 
                   RowBox[{"Last", "[", "generalOpts", "]"}]}], "}"}]}], 
                ")"}]}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaDefineMatrixRepresentation", "::", "basisvectorpermutation"}],
              ",", 
             RowBox[{"Last", "[", "generalOpts", "]"}], ",", " ", 
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"al", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
               RowBox[{
                RowBox[{"al", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", 
                RowBox[{"al", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"newGenOpts", "=", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Most", "[", "generalOpts", "]"}], ",", 
              RowBox[{"Range", "[", 
               RowBox[{"(", 
                RowBox[{"Plus", "@@", "al"}], ")"}], "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"newGenOpts", "=", "generalOpts"}]}], "\[IndentingNewLine]",
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
       RowBox[{
        RowBox[{"gaToTensorProduct", "[", 
         RowBox[{"al", ",", 
          RowBox[{"ReductionOrder", "->", 
           RowBox[{"OptionValue", "[", "ReductionOrder", "]"}]}]}], "]"}], 
        ",", "newGenOpts", ",", "opts"}], "]"}]}]}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}]], "Input",
 CellLabel->
  "In[1014]:=",ExpressionUUID->"020ae9ac-d0ef-4107-9b7a-be91adf56222"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_gaTensorProduct", ",", "generalOpts_List", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", 
        RowBox[{
        "defineMatrixRepresentationTensorProductMethod", ",", 
         "gaDefineMatrixRepresentation"}], "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"alout", "=", 
        RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}], ",", "repRules", 
       ",", "algRep", ",", "newAl", ",", "algIso", ",", "reductionOrder", ",",
        "counter", ",", "repNames", ",", "signatureSplittedVectors", ",", 
       "signatureSplittedSortedVectors", ",", "algTrueMinusAlgHelp", ",", 
       "removeVectorList", ",", "addVectorList", ",", 
       "theQuaternionReplacementRules", ",", "msgHelp", ",", "opMatrix", ",", 
       "answer", ",", "answerFin", ",", "alvectors", ",", "sortedAnswer", ",",
        "allMatrices"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
         RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
         ",", 
         RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
         RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}]}], 
        "}"}], "=", "generalOpts"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Message", " ", "\"\<ElementaryRepresentations\>\"", " ", "text", " ", 
        "is", " ", "too", " ", "long", " ", "to", " ", "display", " ", "and", 
        " ", "$MessagePrePrint", " ", "shallows", " ", "informative", " ", 
        RowBox[{"part", ".", " ", "Disable"}], " ", "it", " ", 
        RowBox[{"temporary", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"$MessagePrePrint", "=", "Identity"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "gaDefineMatrixRepresentation", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionDefineMatrixRepresentation", 
               "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y__Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "set", " ", "unset", " ", "values", " ", "for", " ", "simple", " ", 
        "options"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{
          "theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}],
          "=", 
         RowBox[{"(", 
          RowBox[{"ElementaryRepresentations", "/.", 
           RowBox[{
           "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
            "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"List", "@@", "al"}], ",", "elementaryTPAlgebras"}], "]"}],
          "=!=", "elementaryTPAlgebras"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineMatrixRepresentation", "::", "unable"}], ",", 
           "al"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"BaseVectorAlgebra", "/.", 
           RowBox[{
           "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
            "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{
          "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{
         "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"QuaternionIsomorphismRules", "/.", 
           RowBox[{
           "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
            "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<TargetMatrices\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<TargetMatrices\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"TargetMatrices", "/.", 
           RowBox[{
           "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
            "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"ReductionOrder", "/.", 
           RowBox[{
           "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
            "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<MatrixOuterProductOrder\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<MatrixOuterProductOrder\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{"MatrixOuterProductOrder", "/.", 
           RowBox[{
           "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
            "]"}]}], ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
          ",", 
          RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
         "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Plus", "@@@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "/@", 
          RowBox[{
          "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}]}], "=!=", 
         RowBox[{"(", 
          RowBox[{"Plus", "@@@", 
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}], 
           ",", 
           RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}],
            ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
             RowBox[{"Plus", "@@@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], 
          "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}]}], "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}], 
               "]"}], "]"}]}], "]"}], "===", 
           RowBox[{"{", "2", "}"}]}], ")"}]}], ",", 
        RowBox[{"reductionOrder", "=", 
         RowBox[{"theOption", "[", "\"\<ReductionOrder\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], ",",
            "ReductionOrder", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "__Cl", "}"}], "|", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}], "}"}]}], "]"}], 
         ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"MatchQ", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}], ",", 
           
           RowBox[{"Automatic", "|", "\"\<Automatic\>\""}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ")"}], "=!=", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@", 
              RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}]}], 
             ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], 
              ",", "\"\<BaseVectorAlgebra\>\"", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", 
                   RowBox[{
                    RowBox[{"Plus", "@@", 
                    RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}], "-", 
                    "#"}]}], "}"}], "&"}], "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"Plus", "@@", 
                   RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}]}], 
                 "]"}]}], ")"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}], 
             "=", "Automatic"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}],
         ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"theQuaternionReplacementRules", "=", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{
              "theOption", "[", "\"\<QuaternionIsomorphismRules\>\"", "]"}], 
              "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Pauli[1,2]\>\"", ",", "\"\<HH2R4\>\"", ",", 
              "\"\<IToRealMatrix\>\"", ",", "\"\<QToRealMatrix\>\""}], 
             "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "If", "  ", "ElementaryRepresentations", " ", "was", " ", "not", " ", 
         "provided", " ", "by", " ", "user"}], ",", " ", 
        RowBox[{"take", " ", "defaults"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}], 
        ",", 
        RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"repRules", "=", 
         RowBox[{
          RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
           RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", 
          RowBox[{
          "theOption", "[", "\"\<ElementaryRepresentations\>\"", "]"}]}], 
         ";"}], ",", "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineMatrixRepresentation", "::", "optionValue"}], ",",
            "ElementaryRepresentations", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"repRules", "=", 
          RowBox[{
           RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
            RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}], ",", 
        RowBox[{"Automatic", "|", "\"\<Automatic\>\"", "|", "al"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"repRules", ",", 
                   RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}], ")"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"msgHelp", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], ",", 
              "al", ",", "repRules", ",", "msgHelp", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "gaListDefinedElementaryRepresentations", "[", "#", "]"}], 
                "&"}], "/@", "msgHelp"}]}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"repNames", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"alP_Cl", "\[RuleDelayed]", 
               RowBox[{"{", 
                RowBox[{"alP", ",", 
                 RowBox[{"++", 
                  RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], "}"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"RotateLeft", "[", 
                  RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                   "}"}]}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"algRep", "=", 
          RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
           RowBox[{"(", 
            RowBox[{"Append", "@@@", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"repNames", ",", 
                RowBox[{"Thread", "[", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"BasisVectorsMultipliers", ",", 
                   RowBox[{
                   "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", 
                    "]"}]}], "]"}], "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ", 
            "already", " ", "defined"}], ",", " ", 
           RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
            "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"al", ",", 
             RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
             RowBox[{"gaGradesOnly", "\[Rule]", 
              RowBox[{"{", "1", "}"}]}], ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], "=", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{"getBase", "[", 
                RowBox[{"al", ",", 
                 RowBox[{"{", "1", "}"}]}], "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}],
            ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "here", " ", "was", " ", "the", " ", "problem", " ", "of", " ", 
           "different", " ", "ordering", " ", "on", " ", "repeated", " ", 
           "calculation"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "solution", " ", "was", " ", "to", " ", "insert", " ", 
            "additional", " ", 
            RowBox[{"Sort", "[", "]"}]}], ",", " ", 
           RowBox[{
           "which", " ", "ensures", " ", "the", " ", "vectors", " ", "are", 
            " ", "first", " ", "ordered", " ", "lexicographically"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "and", " ", "onle", " ", "then", " ", "reordered", " ", "by", " ", 
           "signature"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "suggest", " ", "method", " ", "for", " ", "smaller", " ", 
           "complex", " ", "matrix", " ", "representations", " ", "when", " ", 
           RowBox[{"C", "[", 
            RowBox[{"1", ",", "0"}], "]"}], " ", "appears", " ", "in", " ", 
           "decomposition", " ", "with", " ", "complex", " ", "matrices"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRep", ",", "\"\<Quaternion\>\""}], "]"}], "&&", 
            RowBox[{"Not", "[", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"List", "@@", "al"}], ",", 
               RowBox[{"Cl", "[", 
                RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], "]"}], "]"}], "&&", 
            RowBox[{"!", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], ",", 
             "al", ",", 
             RowBox[{"Cl", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], 
               ")"}]}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "calculate", " ", "matrix", " ", "representations", " ", "for", " ",
            "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"singleElementOuterMultiply", "[", 
                  RowBox[{"#", ",", "algRep", ",", 
                   RowBox[{
                   "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}], ",", 
                   RowBox[{"MatrixOuterProductOrder", "->", 
                    RowBox[{
                    "theOption", "[", "\"\<MatrixOuterProductOrder\>\"", 
                    "]"}]}]}], "]"}], "&"}], "/@", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
               "\[RuleDelayed]", "singlet"}], ",", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
             "}"}]}], ")"}]}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"Cl", "[", "__", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"newAl", "=", 
          RowBox[{"gaToTensorProduct", "[", 
           RowBox[{
            RowBox[{"algIso", "=", 
             RowBox[{"theOption", "[", "\"\<BaseVectorAlgebra\>\"", "]"}]}], 
            ",", 
            RowBox[{"ReductionOrder", "->", "reductionOrder"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], "===",
              "Automatic"}], "|", "\"\<Automatic\>\"", "|", "1"}], ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "/@", 
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}]}], "=!=", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaDefineMatrixRepresentation", "::", 
               "BasisVectorsMultipliers"}], ",", 
              RowBox[{
              "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                RowBox[{"Plus", "@@@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}], "]"}], 
            ";", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", "]"}], "=", 
             
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"repRules", ",", 
                   RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"msgHelp", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "newAl"}], ")"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "newAl"}], ")"}]}], "]"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], ",", 
              "newAl", ",", "repRules", ",", "msgHelp", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "gaListDefinedElementaryRepresentations", "[", "#", "]"}], 
                "&"}], "/@", "msgHelp"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ", 
            "already", " ", "defined"}], ",", " ", 
           RowBox[{"if", " ", "not"}], ",", " ", 
           RowBox[{
            RowBox[{"define", ".", " ", "Two"}], " ", "Sort", " ", "needed", 
            " ", "to", " ", "ensure", " ", "same", " ", "ordering"}], ",", 
           " ", 
           RowBox[{"see", " ", "comment", " ", "above"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"newAl", ",", "\"\<InvDeg[Lex]\>\"", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
            "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"newAl", ",", 
             RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
             RowBox[{"gaGradesOnly", "\[Rule]", 
              RowBox[{"{", "1", "}"}]}], ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"repNames", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"List", "@@", "newAl"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"alP_Cl", "\[RuleDelayed]", 
               RowBox[{"{", 
                RowBox[{"alP", ",", 
                 RowBox[{"++", 
                  RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], "}"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"RotateLeft", "[", 
                  RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                   "}"}]}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"algRep", "=", 
          RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
           RowBox[{"(", 
            RowBox[{"Append", "@@@", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"repNames", ",", 
                RowBox[{"Thread", "[", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"BasisVectorsMultipliers", ",", 
                   RowBox[{
                   "theOption", "[", "\"\<BasisVectorsMultipliers\>\"", 
                    "]"}]}], "]"}], "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"signatureSplittedVectors", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"singleElementOuterMultiply", "[", 
                RowBox[{"#", ",", "algRep", ",", 
                 RowBox[{
                 "QuaternionIsomorphismRules", "->", 
                  "theQuaternionReplacementRules"}]}], "]"}], "&"}], ",", 
              RowBox[{"Split", "[", 
               RowBox[{
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"newAl", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}],
                 ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "===", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}],
               ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
               "\[RuleDelayed]", "singlet"}], ",", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
             "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"signatureSplittedSortedVectors", "=", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Sort", "[", 
               RowBox[{"x", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"FreeQ", "[", 
                   RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
               "]"}]}], "]"}], ",", "signatureSplittedVectors"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"algIso", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", 
               RowBox[{"_", "?", "Positive"}], ",", "0"}], "]"}]}], "]"}], 
           ",", 
           RowBox[{"PrependTo", "[", 
            RowBox[{"signatureSplittedSortedVectors", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"algIso", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{
               RowBox[{"_", "?", "Positive"}], ",", "0", ",", "0"}], "]"}]}], 
            "]"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"signatureSplittedSortedVectors", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"theOption", "[", "\"\<TargetMatrices\>\"", "]"}], "=!=", 
            "Reals"}], ",", 
           RowBox[{"signatureSplittedSortedVectors", "=", 
            RowBox[{"Reverse", "/@", "signatureSplittedSortedVectors"}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"algTrueMinusAlgHelp", "=", 
          RowBox[{"(", 
           RowBox[{"Subtract", "@@", 
            RowBox[{"(", 
             RowBox[{"Most", "/@", 
              RowBox[{"(", 
               RowBox[{"List", "@@@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"gaFromTensorProduct", "[", "al", "]"}], ",", 
                  "algIso"}], "}"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{"algTrueMinusAlgHelp", ",", 
            RowBox[{"(*", " ", 
             RowBox[{"0", ",", 
              RowBox[{
              "0", " ", "means", " ", "we", " ", "calculate", " ", "in", " ", 
               "naitive", " ", "algebra"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"signatureSplittedSortedVectors", ",", "1"}], "]"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_Integer", "?", "Negative"}], ",", 
              RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
              "has", " ", "more", " ", "positive", " ", "signature", " ", 
              "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"removeVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{"addVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Drop", "[", 
                 RowBox[{"removeVectorList", ",", 
                  RowBox[{"algTrueMinusAlgHelp", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                 "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_Integer", "?", "Positive"}], ",", 
              RowBox[{"_Integer", "?", "Negative"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
              "has", " ", "more", " ", "negative", " ", "signature", " ", 
              "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"removeVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", 
             RowBox[{"addVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"Drop", "[", 
                 RowBox[{"removeVectorList", ",", 
                  RowBox[{"algTrueMinusAlgHelp", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], 
           "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"test", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"answer", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"opMatrix", "=", "Dot"}], ",", "\[IndentingNewLine]", 
        RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alout", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"alout", ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"gaGradesOnly", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}], ",", 
          RowBox[{
          "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alvectors", "=", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"alout", ",", "\"\<InvDeg[Lex]\>\"", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"IdentityMatrix", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"First", "[", "answer", "]"}], "]"}], "]"}], "*", 
               "#"}], ")"}], "&"}], "/@", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", "alvectors"}], 
             "]"}]}], "=!=", " ", 
           RowBox[{"opMatrix", "[", 
            RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"sortedAnswer", "=", 
           RowBox[{"Sort", "[", 
            RowBox[{"answer", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Dot", "[", 
                  RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                RowBox[{
                 RowBox[{"opMatrix", "[", 
                  RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
            "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
        ",", 
        RowBox[{"None", "|", "\"\<None\>\""}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}], 
         "=", 
         RowBox[{"Range", "[", 
          RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"answerFin", "=", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"alvectors", ",", 
          RowBox[{"sortedAnswer", "[", 
           RowBox[{"[", 
            RowBox[{"theOption", "[", "\"\<BasisVectorsReordering\>\"", "]"}],
             "]"}], "]"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "if", " ", "full", " ", "algebra", " ", "representation", " ", "was", 
        " ", "requested", " ", "call", " ", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", " ", 
        "special", " ", "syntax"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "1", "}"}], ",", "answerFin", ",", "\[IndentingNewLine]", 
        RowBox[{"All", "|", "\"\<All\>\""}], ",", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "__Integer", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"allMatrices", "=", 
          RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Pick", "[", 
          RowBox[{"allMatrices", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "=!=", "0"}], ")"}], "&"}], "/@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"gaGetMV", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
                "]"}], "&"}], ",", 
              RowBox[{"First", "/@", "allMatrices"}]}], "]"}]}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1015]:=",ExpressionUUID->"857d310c-9b2c-4477-b16e-d7de6f6b376e"],

Cell["\<\
Explicit check if matrix representation matches symbolic GA orthogonal base \
multiplication. Useless for end user, keep in private context. First argument \
is gaOrthonormalBasis[testAlgebra], second argument is matrix representation \
list, which can be generated, for example, as  \
gaDefineMatrixRepresentation[testAlgebra,gaDefineMatrixRepresentation[\
testAlgebra]].\
\>", "Text",ExpressionUUID->"47037364-9723-4221-935c-8aebf6fdf2b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ", "[", 
    RowBox[{"algebraBase_List", ",", " ", "matrixRepresentation_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"replRules", "=", 
        RowBox[{"Rule", "@@@", 
         RowBox[{"(", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Rest", "/@", 
            RowBox[{"{", 
             RowBox[{"algebraBase", ",", "matrixRepresentation"}], "}"}]}], 
           "]"}], ")"}]}]}], ",", "baseProd", ",", "matrProd", ",", 
       "allTable"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allTable", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"baseProd", "=", 
                RowBox[{
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[GeometricProduct]", 
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}]}], ")"}], "/.", 
              "replRules"}], " ", ",", 
             RowBox[{"matrProd", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
           "True", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"baseProd", "*", 
              RowBox[{"matrixRepresentation", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "===", "matrProd"}], ")"}]}],
           "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"Length", "[", "algebraBase", "]"}], "-", "1"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"And", "@@", 
       RowBox[{"Flatten", "[", "allTable", "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1016]:=",ExpressionUUID->"5dd2c4d8-520c-4852-829b-8d525069cb08"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". From/to matrix representation"
}], "Subsubsection",ExpressionUUID->"103fede3-7523-4d11-b213-d85f23cf729b"],

Cell["\<\
We need inverse base elements (not reciprocal) inside Tr !!! (need \
investigation still)\
\>", "Text",ExpressionUUID->"b0a4a4db-d801-48f0-8aab-b04a6133df77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"baseElementInverse", "[", "el_bs", "]"}], ":=", 
      RowBox[{
       RowBox[{"gaReverse", "[", "el", "]"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaReverse", "[", "el", "]"}], "\[GeometricProduct]", "el"}],
         ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"baseElementInverse", "[", "1", "]"}], "=", "1"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1017]:=",ExpressionUUID->"b02ea6a8-ef58-4136-9ce4-e0a6d6be6cde"],

Cell["\<\
CoefficientDomain option can be \[OpenCurlyDoubleQuote]Reals\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]Complexes \
\[OpenCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]All\[CloseCurlyDoubleQuote].  CoefficientDomain->All \
do not filter out quaternions after trace is taken,  \
CoefficientDomain->Complexes do not filter complex numbers, but filter out \
quaternions. CoefficientDomain->Reals filter out both quaternions and \
imaginary parts from the result of Tr.\
\>", "Text",ExpressionUUID->"ad4dec47-a002-415e-a4a5-6916aa5fd1a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaFromMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "\"\<All\>\""}], ",", 
     RowBox[{"Quiet", "->", "False"}], ",", 
     RowBox[{"gaFieldFactor", "->", "\"\<Automatic\>\""}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1018]:=",ExpressionUUID->"3079c51e-3f79-47ce-a638-aec09bde9b3b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"filterNumbers", "[", 
     RowBox[{"expr_", ",", "\"\<All\>\""}], "]"}], ":=", "expr"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "it", " ", "is", " ", "unclear", " ", "what", " ", "to", " ", "do", " ", 
     "when", " ", "quaternions", " ", "appear", " ", "in", " ", "Tr"}], ",", 
    " ", 
    RowBox[{"do", " ", "nothing"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"filterNumbers", "[", 
       RowBox[{"expr_", ",", "\"\<Complexes\>\""}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ")"}]}], "/.", 
       RowBox[{"_bs", "\[Rule]", "0"}]}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"Addditional", " ", "multiple", " ", 
       RowBox[{"1", "/", 
        RowBox[{"2", " ", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"filterNumbers", "[", 
       RowBox[{"expr_", ",", "\"\<Reals\>\""}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"_bs", "\[Rule]", "0"}], ",", 
         RowBox[{
          RowBox[{"Complex", "[", 
           RowBox[{"any_", ",", "_"}], "]"}], "\[RuleDelayed]", "any"}]}], 
        "}"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[1019]:=",ExpressionUUID->"8f3e3a30-ed23-48ba-a50c-1d2287fa14fb"],

Cell["\<\
We multiply basis elements from the right! It is possible to do \
multiplication from the left also. In fact we assume, that quaternions \
commutes with GA basis elements, so this is only can be important for other \
commands like gaGetMV[ ], etc.\
\>", "Text",ExpressionUUID->"20d3877f-ed51-4b81-aebd-1ae658cddb64"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionFromMatrixRepresentation", "[", "\"\<CoefficientDomain\>\"", 
      "]"}], "=", 
     RowBox[{
     "\"\<Reals\>\"", "|", "\"\<Complexes\>\"", "|", "\"\<All\>\""}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionFromMatrixRepresentation", "[", "\"\<gaFieldFactor\>\"", 
      "]"}], "=", 
     RowBox[{"\"\<Automatic\>\"", "|", "\"\<Positive integer\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionFromMatrixRepresentation", "[", "\"\<Quiet\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
     " ", "actual", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionFromMatrixRepresentation", "[", 
      RowBox[{"\"\<CoefficientDomain\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<Reals\>\"", "|", "\"\<Complexes\>\"", "|", "\"\<All\>\""}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionFromMatrixRepresentation", "[", 
      RowBox[{"\"\<gaFieldFactor\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"\"\<Automatic\>\"", "|", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"_Integer", "|", "_Rational"}], ")"}], "?", 
         "Positive"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionFromMatrixRepresentation", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaFromMatrixRepresentation", "::", "FieldFactor"}], "=", 
     "\"\<Info: Field factor is set to `1`.\>\""}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellLabel->
  "In[1021]:=",ExpressionUUID->"4375d677-282c-447e-b74f-7ac12ff1df5b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromMatrixRepresentation", "::", "optionValue"}], "=", 
   "\"\<The gaFromMatrixRepresentation comand option value `1` have to be \
`2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaFromMatrixRepresentation", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", "fieldFactor", ",", "dimensionalFactor"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaFromMatrixRepresentation", ",", "#", ",", "theOption"}],
            "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionFromMatrixRepresentation", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"test", " ", "option", " ", "values"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"Options", "[", "gaFromMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"gaFieldFactor", "/.", 
           RowBox[{"Options", "[", "gaFromMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaFromMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "compute", " ", "actual", " ", "factor", " ", "when", " ", 
         "gaFieldFactor"}], "->", "Automatic"}], "  ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}], ",", 
          RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"fieldFactor", "=", "1"}], ",", "\[IndentingNewLine]", 
        RowBox[{"fieldFactor", "=", 
         RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], ",", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"fieldFactor", "=!=", "1"}], ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaFromMatrixRepresentation", "::", "FieldFactor"}], ",", 
            "fieldFactor"}], "]"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "matrix", " ", "representation", " ", "is", " ", 
         "defined"}], ",", " ", 
        RowBox[{"make", " ", "convertion"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"_", "\[Rule]", 
              RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"dimensionalFactor", "=", 
          RowBox[{"fieldFactor", "*", 
           RowBox[{"Length", "[", "matrix", "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<Reals\>\"", ",", "\"\<Complexes\>\"", ",", 
                "\"\<All\>\""}], "}"}], ",", 
              RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
             "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaFromMatrixRepresentation", "::", "optionValue"}], 
              ",", "CoefficientDomain", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Reals\>\"", ",", "\"\<Complexes\>\"", ",", 
                "\"\<All\>\""}], "}"}]}], "]"}], ";", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
             "=", "\"\<All\>\""}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "dimensionalFactor"}], ")"}], "*", 
            RowBox[{"Thread", "[", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"filterNumbers", "[", 
                   RowBox[{
                    RowBox[{"Tr", "[", 
                    RowBox[{"gaGeometricMatrixProduct", "[", 
                    RowBox[{"matrix", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{
                    "theOption", "[", "\"\<CoefficientDomain\>\"", "]"}]}], 
                   "]"}], "&"}], "/@", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", "matrix", "]"}], "]"}], "}"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"Last", "/@", 
                    RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
                    ")"}]}], "]"}]}], ")"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"(", 
                  RowBox[{"baseElementInverse", "/@", 
                   RowBox[{"(", 
                    RowBox[{"First", "/@", 
                    RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
                    ")"}]}], ")"}]}], "]"}]}], "]"}], "]"}]}], ")"}]}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",",
           "al"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]}], "Input",
 CellLabel->
  "In[1028]:=",ExpressionUUID->"b843e462-9dfd-499b-842d-5565bf7e505a"],

Cell["\<\
In general it is still not clear how to dealt with matrices with \
quaternionic*imaginary entries. The above \
\[OpenCurlyDoubleQuote]CoefficientDomain\[CloseCurlyDoubleQuote] solution is \
obviously is a poor man\[CloseCurlyQuote]s solution.\
\>", "Text",ExpressionUUID->"5ce43845-2468-4e8a-b2d3-e30f3c09302a"],

Cell["\<\
Possible ways to improve matrix representation code:
1. Use SparseArrays[ ] to represent large dimension matrices. This becomes \
important, when matrices becomes 32x32 or large.
2. For large algebras representation it would be useful introduce direct \
multiplication by R(16) matrices. This represents Cl[0,8] and Cl[8,0] \
periodicity of Clifford algebras. Current implementation follows {0,2},{1,1} \
or {2,0} steps only.
3. One could get even more representations if user could specify row/column \
interchange transformation (this is always possible to do after matrix \
representation is calculated).\
\>", "Text",ExpressionUUID->"193e1a05-11a4-4e74-a26e-16179a029270"],

Cell[TextData[{
 "Note.  In  ",
 StyleBox["repRuls",
  FontWeight->"Bold"],
 " rule ",
 StyleBox["gaTensorProduct[c_]\[RuleDelayed]c*IdentityMatrix[2]]",
  FontWeight->"Bold"],
 " should be given last. Otherwise expression  a +e[x] would first become  \
{{a +e[x],0},{0,a +e[x]}} and matrix structure will be broken."
}], "Text",ExpressionUUID->"02c3bac8-40ad-4d2e-963e-4379fbcf843f"],

Cell["\<\
At last define function, which automatically converts expression to matrix \
representation\
\>", "Text",ExpressionUUID->"ef4f3899-ff66-40e2-9dbd-b2e162e19d53"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], "=", 
   "\"\<Matrix representation of algebra `1` not defined or orthonormal base \
elements don't match their matrix representations. First make sure you \
defined orthonormal base with gaDefineOrthonormalBasis[alg]. Then calculate \
matrix representations of base vectors of algebra with \
gaDefineMatrixRepresentation[al_Cl,opts___].\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "NotBottDimension"}], "=", 
   "\"\<You are using matrix representation of algebra `1` that do not match \
dimensions `2`, listed in Bott periodicity table. Conversion to/from matrix \
representation may need adjusting the option gaFieldFactor value. These \
representations are inapropriate for non-diagonalizable MVs\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "::", "FieldFactor"}], "=", 
    "\"\<Info: Field factor is set to `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "[", 
     RowBox[{"expr_List", ",", 
      RowBox[{"al", ":", 
       RowBox[{"(", 
        RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"gaToMatrixRepresentation", "[", 
       RowBox[{"#", ",", "al"}], "]"}], "&"}], "/@", "expr"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"gaToMatrixRepresentation", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"al", ":", 
        RowBox[{"(", 
         RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allScalars", ",", "allNonScalars", ",", "idMatrix"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"_", "\[Rule]", 
               RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"idMatrix", "=", 
           RowBox[{"IdentityMatrix", "[", 
            RowBox[{"Length", "[", 
             RowBox[{
              RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"allScalars", "=", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", "0", "}"}]}], "]"}], "*", "idMatrix"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"allNonScalars", "=", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"!", 
               RowBox[{"{", "0", "}"}]}]}], "]"}], "/.", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"allScalars", "+", "allNonScalars"}]}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], 
           ",", "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}], "*)"}]}]}], "Input",\

 CellLabel->
  "In[1030]:=",ExpressionUUID->"52dd6b39-b977-4b09-b4ef-47ceafdaa18c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaToMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "\"\<All\>\""}], ",", 
     RowBox[{"Quiet", "->", "False"}], ",", 
     RowBox[{"gaFieldFactor", "->", "\"\<Automatic\>\""}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1034]:=",ExpressionUUID->"bcbbcaba-6734-4d31-ba43-694f14007431"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"al", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "theOption", ",", "fieldFactor", ",", "allScalars", ",", 
       "theMatrixSize", ",", "allNonScalars", ",", "idMatrix", ",", 
       "nonScalarMatrixPart"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "for", " ", "option", " ", "test", " ", "use", " ", "same", " ", 
       "functions", " ", "as", " ", "for", " ", 
       "gaFromMatrixRepresentation"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaToMatrixRepresentation", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionFromMatrixRepresentation", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"test", " ", "option", " ", "values"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"Options", "[", "gaToMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"gaFieldFactor", "/.", 
           RowBox[{"Options", "[", "gaToMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaToMatrixRepresentation", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"_", "\[Rule]", 
              RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theMatrixSize", "=", 
          RowBox[{"Length", "[", 
           RowBox[{
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "warn", " ", "when", " ", "not", " ", "Bott", " ", "dimensions", 
           " ", "are", " ", "used"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theMatrixSize", "=!=", 
              RowBox[{"gaDimensionOfMatrixRepresentation", "[", 
               RowBox[{"al", ",", 
                RowBox[{"OutputForm", "->", "\"\<DimensionOnly\>\""}]}], 
               "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaToMatrixRepresentation", "::", "NotBottDimension"}],
                ",", "al", ",", 
               RowBox[{"gaDimensionOfMatrixRepresentation", "[", 
                RowBox[{"al", ",", 
                 RowBox[{"OutputForm", "->", "\"\<DimensionOnly\>\""}]}], 
                "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"idMatrix", "=", 
          RowBox[{"IdentityMatrix", "[", "theMatrixSize", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "compute", " ", "actual", " ", "factor", " ", "when", " ", 
            "gaFieldFactor"}], "->", "Automatic"}], "  ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}], ",", 
             RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Which", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}], "]"}], ",", 
             RowBox[{"fieldFactor", "=", "4"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Not", "[", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"expr", ",", "_Complex"}], "]"}], "]"}], ",", 
             RowBox[{"fieldFactor", "=", "2"}], ",", "\[IndentingNewLine]", 
             "True", ",", 
             RowBox[{"fieldFactor", "=", "1"}]}], "\[IndentingNewLine]", 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"fieldFactor", "=", 
            RowBox[{"theOption", "[", "\"\<gaFieldFactor\>\"", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], ",", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"fieldFactor", "=!=", "1"}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaToMatrixRepresentation", "::", "FieldFactor"}], ",",
                "fieldFactor"}], "]"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"allScalars", "=", 
          RowBox[{
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "*", "idMatrix"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "when", " ", "coefficients", " ", "lack", " ", "quaternions", " ", 
            "simple", " ", "solution", " ", "is", " ", "possible"}], ",", " ",
            "commented"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"allNonScalars", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaGetMV", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"!", 
                 RowBox[{"{", "0", "}"}]}]}], "]"}], "/.", 
              RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
           ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"allNonScalars", "=", 
          RowBox[{"gaComponentList", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"!", 
              RowBox[{"{", "0", "}"}]}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"nonScalarMatrixPart", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"allNonScalars", "/.", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"bs", "=", 
                 RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}],
                 "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"arg1_", ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"any1_", ",", "al", ",", "any2___"}], "]"}]}], 
                   "]"}], "]"}], ":>", 
                 RowBox[{
                  RowBox[{"gaGeometricMatrixProduct", "[", 
                   RowBox[{"arg1", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{"any1", ",", "al", ",", "any2"}], "]"}], "/.", 
                    RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
                    ")"}]}], "]"}], "/;", 
                  RowBox[{
                   RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"arg1", ",", "\"\<Quaternion\>\""}], "]"}], "]"}],
                    "&&", 
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", "any2", "}"}], ",", "\"\<Quaternion\>\""}], 
                    "]"}]}]}]}], "}"}]}], "]"}]}], ")"}], "/.", 
           RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"nonScalarMatrixPart", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"HoldPattern", "[", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":>", 
                  RowBox[{
                   RowBox[{"gaGeometricMatrixProduct", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], "/;", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", "b", "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"a", ",", "\"\<Quaternion\>\""}], "]"}], "]"}]}], 
                    ")"}]}]}], "}"}]}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"allNonScalars", "/.", 
               RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
              ")"}]}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"1", "/", 
           RowBox[{"(", "fieldFactor", ")"}]}], "*", 
          RowBox[{"(", 
           RowBox[{"allScalars", "+", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@", "nonScalarMatrixPart"}], ")"}]}], 
           ")"}]}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",",
           "al"}], "]"}]}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1035]:=",ExpressionUUID->"e0e1b13c-5566-4bc9-9dae-6a9d1044b10d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1036]:=",ExpressionUUID->"b3bd9c2f-ff11-4018-ab02-e9be1a13e50e"]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector inverse, reciprocal base, some bivector algebra formulas, \
blade and versor decomposition (not finished yet) [",
 StyleBox["gaDeterminantFormula, ExplicitFormula to replace by gaFormula. Too \
many similar names and duplications.",
  FontColor->RGBColor[1, 0, 0]],
 "]"
}], "Section",ExpressionUUID->"ad8cc3f7-6a4a-450d-b8fa-5c494d1a4c52"],

Cell["\<\
Functions ... are rewrites from the article: 
G.S. Staples, D. Wylie. Clifford algebra decompositions of conformal \
orthogonal group elements, Clifford Analysis, Clifford Algebras and Their \
Applications, 4 (2015), 223-240\
\>", "Text",ExpressionUUID->"a5d2a1c8-1acc-4371-a78f-446ab0a15ad9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaDeterminantOfMV", ",", "gaNormDeterminant", ",", 
     "gaDeterminantFormula", ",", "gaNormHermitian", ",", 
     "gaMultivectorParityCheck", ",", "gaInvertibleQ", ",", "gaInverse", ",", 
     "ZeroTolerance", ",", "Involutions", ",", "gaRandomBasis", ",", 
     "gaReciprocalVectors", ",", "gaReciprocalBasis", ",", "gaBilinearForm", 
     ",", "gaMetric", ",", "gaKillingMetric", ",", "gaCasimir", ",", 
     "gaDynkinFactor", ",", "Blade", ",", "gaCliffordDecomposableQ", ",", 
     "gaVersorQ", ",", "NextVector", ",", "gaCliffordDecompose", ",", 
     "gaBladeFactor", ",", "gaNormOfCoefficients", ",", "gaNormReverseAbs", 
     ",", "gaNorm2ReverseSigned", ",", "gaNormCliffordConjugateAbs", ",", 
     "gaNorm2CliffordConjugateSigned", ",", "gaNormalize", ",", 
     "gaFactorTerm", ",", "gaStructureConstant", ",", "gaVersorToSumOfBlades",
      ",", "gaBladeToSumOfVersors", ",", "gaBladeQ", ",", "gaLinearSolve", 
     ",", "ExplicitFormula", ",", "gaOrthogonalize", ",", 
     "gaCharacteristicPolynomial", ",", "gaMinimalPolynomial", ",", 
     "gaFunctionOfMV", ",", "gaReplaceImaginary", ",", "gaDiagonalizableQ", 
     ",", "gaRandomNonDiagonalizableMV", ",", "JordanForm"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1037]:=",ExpressionUUID->"6e81be12-42b0-46a0-bbc1-929a9df266d3"],

Cell["\<\
Name gaFunctionOfMV was introduced above (in section 7. Involutions...) since \
we want compatibility with functions of gaExpOfMV, etc functions introduced \
there.\
\>", "Text",ExpressionUUID->"518d11be-b6ce-48c5-8544-7e6b65a05fcb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[1038]:=",ExpressionUUID->"6e77c918-e972-442c-8856-24ff3f70a33d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "usage"}], "=", 
   "\"\<Returns determinant of Clifford algebra representation matrices. If \
the matrix representation is complex, then mapping I->R(2) is used. The \
determinant of matrices with quaternionic matrix elements is computed using \
H->R(4) mapping\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantFormula", "::", "usage"}], "=", 
   "\"\<Option for gaDeterminantOfMV which can have values \\\"Recursion\\\" \
or \\\"Explicit\\\" and determines the way of how coefficients of general \
determinant are computed.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[1040]:=",ExpressionUUID->"ec6ba39a-9e84-47f4-aa64-4f781899963e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormDeterminant", "::", "usage"}], "=", 
   "\"\<Returns absolute value of the determinant of MV rised in the power \
(1/Power[2,Ceiling[theVectorSpaceDimension/2]). The determinant norm ensures \
that any MV which squares to a scalar gets normalized after division by the \
determinant norm.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1042]:=",ExpressionUUID->"bf9010a6-3cd6-4ec3-832a-5dd15604e12c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormHermitian", "::", "usage"}], "=", 
   "\"\<Returns Hermitian norm.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1043]:=",ExpressionUUID->"39b7f38c-330c-4df2-8301-f3f6a30c9def"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaInvertibleQ", "::", "usage"}], "=", 
   "\"\<gaInvertibleQ[generalMultivector,opts] returns True if multivector is \
invertable and False othewise. When symbolic coefficients are present return \
calculated expression, which depend on the method used. Two methods realized \
Method\[Rule]gaNorm2ReverseSigned, and Method\[Rule]Det. The second method \
calculates the algebra matrix representation, then the determinant.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ZeroTolerance", "::", "usage"}], "=", 
   "\"\<Option for gaInverse and gaInvertibleQ, gaRandomBasis, \
gaReciprocalVectors, gaReciprocalBasis. If numeric determinant/discriminant \
value is less that ZeroTolerance number, it is assumed that determinant value \
is zero. Likewise similar warning is issued when generating/checking random \
base and calculating reciprocal vectors, bases.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Blade", "::", "usage"}], "=", "\"\<Option for gaInverse\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1044]:=",ExpressionUUID->"a1337e2d-f168-48bc-a6d7-e7b1f36d9ba9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomBasis", "::", "usage"}], "=", 
   "\"\<gaRandomBasis[algebra, opts___]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1047]:=",ExpressionUUID->"28e24135-f389-4678-972c-67ea4b45fb0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "::", "usage"}], "=", 
   "\"\<gaReciprocalVectors[vectors_List, opts___]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1048]:=",ExpressionUUID->"754235ca-845b-4266-bf05-f180d1449716"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalBasis", "::", "usage"}], "=", 
   "\"\<gaReciprocalBasis[fullBase_List, opts___]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1049]:=",ExpressionUUID->"7703a856-ace5-4f1d-a927-380606f4b4b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBilinearForm", "::", "usage"}], " ", "=", " ", 
   "\"\<gaBilinearForm[base_List,{grade_Integer}] computes general homogeneus \
bilinear form. Depending in given base the form can be in the reciprocal base \
(i.e. will coinside with dual space form).\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMetric", "::", "usage"}], " ", "=", 
   "\"\<gaMetric[base_List] is a shortcut of \
gaBilinearForm[base_List,{1}]\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaKillingMetric", "::", "usage"}], " ", "=", 
   "\"\<gaKillingMetric[base_List] is a shortcut of \
gaBilinearForm[base_List,{2}]\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[1050]:=",ExpressionUUID->"0afea192-e094-4eb6-a9d9-8a3fd4768973"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "::", "usage"}], " ", "=", 
   "\"\<gaStructureConstant[{i_Integer,j_Integer},k_Integer,baseBivectors_\
List,recoprocalBaseBivectors_List] computes bivector commutator algebra \
structure constants using \!\(TraditionalForm\`\*SuperscriptBox[SubscriptBox[\
\(c\), \(i, j\)], \(k\)] = \(-\((1/2)\)[\*SubscriptBox[\(\[ScriptCapitalB]\), \
\(i\)], \*SubscriptBox[\(\[ScriptCapitalB]\), \(j\)]]\) \[InnerProduct] \
\*SuperscriptBox[\(\[ScriptCapitalB]\), \(k\)]\) formula. Indices indicate \
bivector order in given base, therefore ordering of reciprocal base bivectors \
should match direct base bivector ordering. Otherwise the result will be \
wrong.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1053]:=",ExpressionUUID->"d6e72a7a-93df-4d0a-9eb5-406e94e664f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCasimir", "::", "usage"}], " ", "=", 
   "\"\<gaCasimir[fullbase,{n_Integer}] with n>=2 implements Lie group \
Casimir operator formula, where Lie generators are replaced by bivectors. It \
is interesting, that gaCasimir[fullbase,{2}] always yields the number of \
bivectors. What are the numbers given by higher numbers n is unclear\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1054]:=",ExpressionUUID->"92960c84-eff0-47ef-be15-1312655ea2cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDynkinFactor", "::", "usage"}], " ", "=", 
   "\"\<gaDynkinFactor[fullBase_] computes Dynkin factor by comparing rezults \
of two expressions for Killing form: one expressed by bivectors and the other \
by using expression with structure constants.\>\""}], " ", ";"}]], "Input",
 CellLabel->
  "In[1055]:=",ExpressionUUID->"46ec411f-65b8-459d-8bd8-68740977287d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1056]:=",ExpressionUUID->"ce70a08f-62ea-47b9-b6b6-6b6a9c2a3e81"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMultivectorParityCheck", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1057]:=",ExpressionUUID->"45f86e9b-62a2-4eaf-a40e-79682206084b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecompose", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1058]:=",ExpressionUUID->"0eab2c32-15eb-446f-bef3-732c13a0fc2c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorQ", "::", "usage"}], "=", 
   "\"\<gaVersorQ[expr] tests if given multivector is a versor. Test applies \
only to nonisotropic (non null) versor, i.e. which can be written as a \
geometric product of non isotropic vectors.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1059]:=",ExpressionUUID->"fecca069-d895-44fe-b82f-9d39a316f333"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeFactor", "::", "usage"}], "=", 
   "\"\<Gives blade decomposition into vectors using D. Fontinje algorithm.\>\
\""}], ";"}]], "Input",
 CellLabel->
  "In[1060]:=",ExpressionUUID->"b953d84b-7e50-4a17-ac88-788223a98417"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaInverse", "::", "usage"}], "=", 
   "\"\<gaInverse[m] calculates the inverse of a multivector m. The default \
Method->Automatic for p+q\[LessEqual]6 uses base free formulas. For larger \
dimensions matrix representations are calculated which then are inverted. For \
unexpanded geometric products inverses of each product are computed \
separately. Inverse of simple blades and versors use simplified formulas. \
Possible Method values are Blade, Involutions and Det. Warning. Using \
Method->Blade with multivectors, which are not blades will return wrong \
answer! \>\""}], ";"}]], "Input",
 CellLabel->
  "In[1061]:=",ExpressionUUID->"8e651f5e-364c-451d-ad9a-f629cb3dd5b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NextVector", "::", "usage"}], "=", 
   "\"\<Option for oneStepCliffordDecompose gaCliffordDecompose, which \
represents next vector to be selected in oneStepCliffordDecompose\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1062]:=",ExpressionUUID->"c52028b0-7b3f-4a86-a9ce-426845494f03"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormOfCoefficients", "::", "usage"}], "=", 
   "\"\<gaNormOfCoefficients[mv] or  gaNormOfCoefficients[mv,n_Integer] \
computes multivector norm. It is not the same as gaNormReverseAbs[]!\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1063]:=",ExpressionUUID->"df9cef97-9ac7-40f4-bedf-f7efc5d28b6f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "usage"}], "=", 
   "\"\<gaNormalize[mv] returns normalized multivector of mv. The norm can be \
selected using option \
Norm->\\\"gaNormReverseAbs\\\"|\\\"gaNormCliffordConjugateAbs\\\"|\\\"\
gaNormDeterminant\\\"|\\\"gaNormHermitian\\\". Default is \
Norm->\\\"gaNormReverseAbs\\\".\>\""}], " ", ";"}]], "Input",
 CellLabel->
  "In[1064]:=",ExpressionUUID->"f2e72c64-73db-40d1-99fa-90e9427adfd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2ReverseSigned", "::", "usage"}], "=", 
   "\"\<gaNorm2ReverseSigned[mv] computes multivector magnitude as absolute \
value of scalar part of multivector multiplied by reversed multivector. \
gaNormReverseAbs is NOT the same as gaNormOfCoefficients.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1065]:=",ExpressionUUID->"b9b35ec4-7176-45cb-b538-949a6b741942"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormReverseAbs", "::", "usage"}], "=", 
   "\"\<gaNormReverseAbs[f_multivector] gives magnitude of multivector. \
\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1066]:=",ExpressionUUID->"edc0e87c-f6f7-4217-b581-ffa1160b4094"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2CliffordConjugateSigned", "::", "usage"}], "=", 
   "\"\<gaNorm2CliffordConjugateSigned[mv] computes multivector magnitude as \
absolute value of scalar part of multivector multiplied by Clifford \
conjugated multivector. gaNormCliffordConjugateAbs is NOT the same as \
gaNormOfCoefficients.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1067]:=",ExpressionUUID->"6bdc207a-e012-4d00-b1fd-79db51396307"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormCliffordConjugateAbs", "::", "usage"}], "=", 
   "\"\<gaNormCliffordConjugateAbs[f_multivector] gives magnitude of \
multivector. \>\""}], ";"}]], "Input",
 CellLabel->
  "In[1068]:=",ExpressionUUID->"12619815-3228-42a2-8d89-7269ac4ad49e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "usage"}], "=", 
   "\"\<gaFactorTerm[f_MV,{fac1MV, fac2_MV}] attempt to rewrite f in the form \
f=answ1\[GeometricProduct]fac1+answ2\[GeometricProduct]fac2+. The result is \
returned in the form {{answ1,fac1},{answ2, fac2},...}. The other side \
factorization can be obtained moving list of factors in the other \
side.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1069]:=",ExpressionUUID->"6f4a2303-236e-4946-879c-8f85ce698b85"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorToSumOfBlades", "::", "usage"}], "=", 
   "\"\<gaVersorToSumOfBlades[a\[GeometricProduct]b\[GeometricProduct]...] \
rewrites versor (geometric product of vectors) as a sum of blades (outer \
product of the same vectors).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1070]:=",ExpressionUUID->"339161dc-6228-4b0a-9e68-3490f6dd1020"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeToSumOfVersors", "::", "usage"}], "=", 
   "\"\<gaBladeToSumOfVersors[a\[OuterProduct]b\[OuterProduct]...] rewrites \
blade (outer product of vectors) as a sum of versors (geometric product of \
the same vectors).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1071]:=",ExpressionUUID->"ed238c6d-e570-4607-af71-367633facbde"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeQ", "::", "usage"}], "=", 
   "\"\<gaBladeQ[expr] yields True if expr is a blade (aka simple \
multivector) and False otherwise. Option Method has values \\\"Automatic\\\", \
\\\"PluckerRelations\\\",  or \\\"InvertibleHomogeneusVersor\\\". \>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1072]:=",ExpressionUUID->"598c2736-42c5-4a71-b2da-4bb7cc904f0a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "::", "usage"}], "=", 
   "\"\<General linear equation solver in GA. At the moment only Sylvester \
equation AX-XB+C==0  (written in the above explicit form) can be solved. \
Options, to improve and test\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExplicitFormula", "::", "usage"}], "=", 
   "\"\<Option of gaLinearSolve, which instructs gaLinearSolve to use look \
for explicit optimized formula (if exists) for the equation before switching \
to general Sylvester equation reccurent algorithm (which yields much more \
complicated expressions). Can take values True/False (for dimensions n<=5) or \
\\\"gaGetMV\\\" / \\\"gaNonScalarGradeInverse\\\" (for any dimension).\>\""}],
   ";"}]}], "Input",
 CellLabel->
  "In[1073]:=",ExpressionUUID->"89be4443-1bf5-4b2d-80b6-b5fb9fe04e1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthogonalize", "::", "usage"}], "=", 
   "\"\<gaOrthogonalize[vectorList_List, opts___] implements \
orthogonalization procedure for vectors in vectorList. Methods \
Method->\\\"GramSchmidt\\\" | \\\"Metric\\\" are implemented and give \
different ortonormalized vector sets. Options, to improve and test.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1075]:=",ExpressionUUID->"d8c98c29-5d7a-4ceb-8d9b-09c232d3f989"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCharacteristicPolynomial", "::", "usage"}], "=", 
   "\"\<gaCharacteristicPolynomial[MV,n_Integer,opts] computes coefficients \
of characteristic polynomial of degree n of MV. Options to describe, \
expansion in terms of grade inverses of all except 0 to simplify, to improve \
and test. gaCharacteristicPolynomial[MV,All,opts] computes all coefficients \
of characteristic polynomial. gaCharacteristicPolynomial[MV,var_Symbol,opts] \
computes the characteristic polynomial\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1076]:=",ExpressionUUID->"bb9f700d-1117-4f9e-a968-488d37cc240a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMinimalPolynomial", "::", "usage"}], "=", 
   "\"\<gaMinimaPolynomial[MV,var_Symbol,opts] computes minimal polynomial of \
MV. Options: .\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1077]:=",ExpressionUUID->"f2b46a5c-61a6-4136-87b6-ada2502b7b48"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFunctionOfMV", "::", "usage"}], "=", 
   "\"\<gaFunctioOfMV[f_Function,m_multivector, opts___] computes exact \
function of multivector f[m] using characteristic equation formula. Function \
can be any elementary or special function of single argument.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaReplaceImaginary", "::", "usage"}], "=", 
   "\"\<Suboption of OutputForm option of gaFunctionOfMV, which attempts to \
replace (when possible) imaginary I in the final answer with pseudoscalar or \
other commuting withh the answer blade wquare of which is -1.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1078]:=",ExpressionUUID->"a34aba8d-0767-4781-a074-bc35c658c13f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDiagonalizableQ", "::", "usage"}], "=", 
   "\"\<gaDiagonalizableQ[MV] test is MV is diagonalizable by computing \
minimal polynomial and checking if it has multiple roots. Also can be used as \
option for gaFunctionOfMV[ ] to warn when MV is not diagonalizable.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1080]:=",ExpressionUUID->"488d7394-ba80-407c-86a4-3403cb32162c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomNonDiagonalizableMV", "::", "usage"}], "=", 
   "\"\<gaRandomNonDiagonalizableMV[alg, Method->{\\\"Matrix\\\",JordanForm->\
\\\"Random\\\",TransformationMatrix->\\\"IdentityMatrix\\\"} generates \
simplest non-diagonalizable MV using randomly constructed Jordan \
blocks.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"JordanForm", "::", "usage"}], "=", 
  "\"\<Option for gaRandomNonDiagonalizableMV. Your can either provide Jordan \
block yourself or generate it randomly.\>\""}]}], "Input",
 CellLabel->
  "In[1081]:=",ExpressionUUID->"d3861336-6938-4835-bb44-e2db0db02173"],

Cell[BoxData["\<\"Option for gaRandomNonDiagonalizableMV. Your can either \
provide Jordan block yourself or generate it randomly.\"\>"], "Output",
 CellLabel->
  "Out[1082]=",ExpressionUUID->"a57b380f-0c4e-4da5-a2e7-86bd6a921f3f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1083]:=",ExpressionUUID->"ab7c6c8e-f4cf-434e-b920-24939b0fb2cd"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Multivector inverse, invertibility test, determinant norm of MV, \
determinant of of MV, minimal and characteristic polynomials"
}], "Subsection",ExpressionUUID->"2e0a9323-c2a9-4d92-a4c3-d72783be4955"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"609fedae-f0a6-4e20-8d3a-a7d69b794a56"],

Cell["\<\
The zero test function. Will be used in calculation of inverses also\
\>", "Text",ExpressionUUID->"693a8320-1a64-4d03-84d1-6d88534d36f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"allZeroTest", "::", "zero"}], "=", 
   "\"\<Zero catched when calculating expression `1` inside function \
`2`.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1084]:=",ExpressionUUID->"74826a15-5714-480d-a45b-c7829612f1d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"allZeroTest", "[", 
    RowBox[{
    "expr_List", ",", "exprBeforeExpansion_", ",", "theTransfrom_", ",", 
     "chopTol_", ",", " ", "name_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"theTransfrom", "/@", "expr"}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], ")"}], ",", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{
          RowBox[{"Abs", "[", "#", "]"}], "<", "chopTol"}], "]"}], "&"}]}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"allZeroTest", "::", "zero"}], ",", "exprBeforeExpansion", 
        ",", "name"}], "]"}], ";", 
      RowBox[{"Throw", "[", "Infinity", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1085]:=",ExpressionUUID->"e9dc2406-c012-4fe7-9b57-de9f063df025"],

Cell["\<\
Optimize general gaFromMatrixRepresentation[ ] function for inversion. It \
will use Dot and SparseArrays for faster matrix multiplication. We do not \
include identity matrix representation, therefore \
(Length[gaOrthonormalBasis[al]]-1).\
\>", "Text",ExpressionUUID->"b34db859-bf61-46b9-a121-cec6a5d200b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentationSparseNoQuaternions", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dimensionFactor", "=", 
        RowBox[{"First", "[", 
         RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], ",", 
       RowBox[{"theIdentityMatrix", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "matrix", "]"}], "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"MatrixQ", "[", 
               RowBox[{"Last", "[", "#", "]"}], "]"}], "&"}], "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\""}], "]"}], "]"}], "-", 
             "1"}], ")"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Tr", "[", 
               RowBox[{"Dot", "[", 
                RowBox[{"matrix", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"SparseArray", "/@", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", "theIdentityMatrix", "}"}], ",", 
                 RowBox[{"Last", "/@", 
                  RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}]}], 
                "]"}]}], ")"}]}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{"baseElementInverse", "/@", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\""}], "]"}]}], ")"}]}], 
          ")"}], ")"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input",
 CellLabel->
  "In[1086]:=",ExpressionUUID->"b177e3f5-1cee-448a-a74c-ed2fee12b8b0"],

Cell["Explicit formulas for inverse and determinant", "Text",ExpressionUUID->"0fd7087d-0361-43e0-b5c0-f209cbbdb4d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "6"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "involutionInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"TheFormula", "\[Rule]", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "6", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], "]"}]}],
            ",", "hh", ",", "h4h4", ",", "s1", ",", "denom", ",", "numerat"}],
           "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"hh", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{"h", "\[GeometricProduct]", "h"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"h4h4", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"hh", ",", "h4h4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"h", "\[GeometricProduct]", "h"}], ",", 
                 RowBox[{
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}]}]}], "}"}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"s1", "=", 
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"theExpandFunction", "[", 
                 RowBox[{"h", "\[GeometricProduct]", 
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"hh", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                 "]"}], "+", 
                RowBox[{"2", "*", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{
                   RowBox[{"theExpandFunction", "[", 
                    RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                   RowBox[{"{", "4", "}"}]}], "]"}]}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "s1", "}"}], ",", 
               RowBox[{
                RowBox[{"h", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"hh", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], "+", 
                
                RowBox[{"2", "*", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], ",", 
                   
                   RowBox[{"{", "4", "}"}]}], "]"}]}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"skip", " ", "factor", " ", 
                RowBox[{"1", "/", "3"}], " ", "for", " ", "inverse", " ", 
                "in", " ", "the", " ", "formula"}], ",", " ", 
               RowBox[{"it", " ", "cancels", " ", "out"}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h", "\[GeometricProduct]", "s1"}], "]"}], "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"when", " ", "expanded"}], ",", " ", 
               RowBox[{
               "take", " ", "0", " ", "grade", " ", "in", " ", "order", " ", 
                "to", " ", "remove", " ", "small", " ", "spurious", " ", 
                "coefficients", " ", "in", " ", "front", " ", "of", " ", 
                "basis", " ", "elements"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"expandFunction", "=!=", "Identity"}], ",", 
               RowBox[{"denom", "=", 
                RowBox[{"gaGetMV", "[", 
                 RowBox[{"denom", ",", 
                  RowBox[{"{", "0", "}"}]}], "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", "s1"}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", "s1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "6"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "involutionDet", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"TheFormula", "\[Rule]", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "6", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], "]"}]}],
            ",", "hh", ",", "h4h4", ",", "denom"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"hh", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", "h"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"h4h4", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"denom", "=", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"Expand", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "3"}], ")"}], "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"theExpandFunction", "[", 
                    RowBox[{"hh", "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"hh", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"theExpandFunction", "[", 
                    RowBox[{"h", "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{
                    RowBox[{"theExpandFunction", "[", 
                    RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}]}], ")"}]}], 
                "]"}], "]"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1087]:=",ExpressionUUID->"63d04127-4c3f-452e-8c7e-95f882607677"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "5"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "5", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "h14", ",", "s1", ",", "denom", ",", "numerat"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,5,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"h14", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h14", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,5,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h14", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h14", ",", 
                   RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"when", " ", "expanded"}], ",", " ", 
               RowBox[{
               "take", " ", "0", " ", "grade", " ", "in", " ", "order", " ", 
                "to", " ", "remove", " ", "small", " ", "spurious", " ", 
                "coefficients", " ", "in", " ", "front", " ", "of", " ", 
                "basis", " ", "elements"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"expandFunction", "=!=", "Identity"}], ",", 
               RowBox[{"denom", "=", 
                RowBox[{"gaGetMV", "[", 
                 RowBox[{"denom", ",", 
                  RowBox[{"{", "0", "}"}]}], "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h14", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h14", ",", 
                  RowBox[{"{", "5", "}"}]}], "]"}]}], ",", "Identity", ",", 
               "chopTol", ",", "\"\<involutionInverse[_,5,__]\>\""}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"s1", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h14", ",", 
                  RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", "s1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "5"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "5", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "h14", ",", "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"h14", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"denom", "=", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h14", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h14", ",", 
                   RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}], "]"}], 
              "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1091]:=",ExpressionUUID->"96ef3f93-9b5a-45db-98bf-4dab7e9770f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "4"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "4", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,4,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"when", " ", "expanded"}], ",", " ", 
               RowBox[{
               "take", " ", "0", " ", "grade", " ", "in", " ", "order", " ", 
                "to", " ", "remove", " ", "small", " ", "spurious", " ", 
                "coefficients", " ", "in", " ", "front", " ", "of", " ", 
                "basis", " ", "elements"}]}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"expandFunction", "=!=", "Identity"}], ",", 
               RowBox[{"denom", "=", 
                RowBox[{"gaGetMV", "[", 
                 RowBox[{"denom", ",", 
                  RowBox[{"{", "0", "}"}]}], "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,4,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "4"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "4", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theAssociationFunction", "[", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}]}],
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1093]:=",ExpressionUUID->"14d362b8-803f-419e-9729-cb1cd8ce8578"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "3"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "3", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,3,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"when", " ", "expanded"}], ",", " ", 
             RowBox[{
             "take", " ", "0", " ", "grade", " ", "in", " ", "order", " ", 
              "to", " ", "remove", " ", "small", " ", "spurious", " ", 
              "coefficients", " ", "in", " ", "front", " ", "of", " ", 
              "basis", " ", "elements"}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"expandFunction", "=!=", "Identity"}], ",", 
             RowBox[{"denom", "=", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"denom", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "denom", "}"}], ",", 
             RowBox[{"h", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,3,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "3"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "3", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", 
           RowBox[{"theDiscriminantFunction", "[", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"h", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "]"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1095]:=",ExpressionUUID->"e00fc2cf-f759-4e7b-af04-d4082c9f4c59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "2"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "2", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,2,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", "h", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"when", " ", "expanded"}], ",", " ", 
             RowBox[{
             "take", " ", "0", " ", "grade", " ", "in", " ", "order", " ", 
              "to", " ", "remove", " ", "small", " ", "spurious", " ", 
              "coefficients", " ", "in", " ", "front", " ", "of", " ", 
              "basis", " ", "elements"}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"expandFunction", "=!=", "Identity"}], ",", 
             RowBox[{"denom", "=", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"denom", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"gaGradeNegate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "2"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "2", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", "h", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1097]:=",ExpressionUUID->"1b6e5568-5fd2-43ec-a11e-cc317d935eb6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "1"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "1", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "denom", 
           ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,1,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", "h", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"when", " ", "expanded"}], ",", " ", 
             RowBox[{
             "take", " ", "0", " ", "grade", " ", "in", " ", "order", " ", 
              "to", " ", "remove", " ", "small", " ", "spurious", " ", 
              "coefficients", " ", "in", " ", "front", " ", "of", " ", 
              "basis", " ", "elements"}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"expandFunction", "=!=", "Identity"}], ",", 
             RowBox[{"denom", "=", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"denom", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"gaGradeNegate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "1"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "1", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "\"\<Automatic\>\""}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaProductPairExpand", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "Expand", ",", "True", ",", "\"\<RealTimePairProduct\>\"", 
                  ",", "\[Infinity]", ",", 
                  RowBox[{"{", "}"}]}], "}"}]}], "]"}], "&"}], ")"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "denom"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", "h", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1099]:=",ExpressionUUID->"d0c37fb4-3b6f-46dd-877e-88e6cffd3559"],

Cell["\<\
Recursive functions for determinant calculation to use with algebras of \
dimension n> 6 (see [Shirokov2020]: arxiv:2005.04015v1 for details )\
\>", "Text",ExpressionUUID->"4ebf6a85-149d-434e-b7fd-0cf5479293ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"detCRec", "[", 
     RowBox[{"1", ",", "mv_", ",", "al_Cl"}], "]"}], ":=", "1"}], "*)"}], 
  "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"detCRec", "[", 
      RowBox[{
       RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
      "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{"2", "^", 
        RowBox[{"Ceiling", "[", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "/", "2"}], 
         "]"}]}], ")"}], "*", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"detURec", "[", 
         RowBox[{"k", ",", "mv", ",", "al"}], "]"}], ",", 
        RowBox[{"{", "0", "}"}]}], "]"}]}]}], ";"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"detCRec", "[", 
      RowBox[{
       RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
      "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", "k"}], ")"}]}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{"2", "^", 
        RowBox[{"Ceiling", "[", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "/", "2"}], 
         "]"}]}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"detURec", "[", 
         RowBox[{"k", ",", "mv"}], "]"}], "+", 
        RowBox[{"gaNonZeroGradeInverse", "[", 
         RowBox[{"detURec", "[", 
          RowBox[{"k", ",", "mv"}], "]"}], "]"}]}], ")"}]}]}], ";"}], 
   "*)"}]}]], "Input",
 CellLabel->
  "In[1101]:=",ExpressionUUID->"f632001d-c1a4-43b6-88dd-30e0fd929656"],

Cell["\<\
Recursive implementation using Nest tend to be much faster. Still needs to \
decide how to handle expansion in this case (at the moment expanded version \
implemented)\
\>", "Text",ExpressionUUID->"e69f5364-a095-4719-b486-26c543943f1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"determinantFormulaByLeftNest", "[", 
    RowBox[{"expr_", ",", "theAlgebra_Cl"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "theNumberOfNestLevels", "}"}], ",", 
     RowBox[{
      RowBox[{"theNumberOfNestLevels", "=", 
       RowBox[{"(", 
        RowBox[{"2", "^", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/", 
           "2"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Last", "[", 
       RowBox[{"Nest", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"expr", ",", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "+", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}]}], ")"}], 
                   "*", "theNumberOfNestLevels", "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                    RowBox[{"gaNonZeroGradeInverse", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], 
                  ")"}]}]}], "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "expr"}], "}"}], ",", 
         RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1102]:=",ExpressionUUID->"f5e61b77-eeed-4dab-b50c-8696615498c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"determinantFormulaByRightNest", "[", 
    RowBox[{"expr_", ",", "theAlgebra_Cl"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "theNumberOfNestLevels", "}"}], ",", 
     RowBox[{
      RowBox[{"theNumberOfNestLevels", "=", 
       RowBox[{"(", 
        RowBox[{"2", "^", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/", 
           "2"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Last", "[", 
       RowBox[{"Nest", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", 
                   RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}]}], ")"}], 
                 "*", "theNumberOfNestLevels", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                   RowBox[{"gaNonZeroGradeInverse", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], ")"}]}],
               ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "expr"}], "}"}], ",", 
         RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1103]:=",ExpressionUUID->"d7cda6df-f2c8-4d4f-b57c-8fbffbd14289"],

Cell["\<\
Functions for determinant calculation using explicit formula to use with \
algebras of dimension n> 6 (see [Shirokov2020]: arxiv:2005.04015v1 for \
details )\
\>", "Text",ExpressionUUID->"30aaddc1-929b-40e8-9547-4bfa1b3d7d31"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"detSRec", "[", 
    RowBox[{
     RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", 
     RowBox[{"(", 
      RowBox[{"k", "-", "1"}], ")"}]}], "*", 
    RowBox[{"(", 
     RowBox[{"2", "^", 
      RowBox[{"Ceiling", "[", 
       RowBox[{
        RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "/", "2"}], 
       "]"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"Factorial", "[", 
      RowBox[{"k", "-", "1"}], "]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"detU", "[", 
        RowBox[{"k", ",", "mv"}], "]"}], ",", 
       RowBox[{"{", "0", "}"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCompleteBellPolynomial", "[", "x_List", "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"BellY", "[", 
      RowBox[{
       RowBox[{"Length", "[", "x", "]"}], ",", "k", ",", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"detCExpl", "[", 
    RowBox[{
     RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", 
     RowBox[{"(", 
      RowBox[{"k", "+", "1"}], ")"}]}], "*", 
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"Factorial", "[", "k", "]"}]}], ")"}], "*", 
    RowBox[{"gaCompleteBellPolynomial", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"detSRec", "[", 
        RowBox[{"i", ",", "mv", ",", "al"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "k"}], "}"}]}], "]"}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[1104]:=",ExpressionUUID->"c471a59e-c8d7-4854-a9a1-94f2c05b4fb6"],

Cell["Recursive characteristic polynomial calculations.", "Text",ExpressionUUID->"7c04917a-3907-409b-bcf7-dba6a5299c66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"characteristicPolynomialFormulaByLeftNest", "[", 
   RowBox[{"expr_", ",", "theAlgebra_Cl", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dim", "=", 
      RowBox[{"(", 
       RowBox[{"2", "^", 
        RowBox[{"Ceiling", "[", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/", 
          "2"}], "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dim", "*", 
         RowBox[{
          RowBox[{"Last", "[", "#", "]"}], "/", 
          RowBox[{"First", "[", "#", "]"}]}]}], ")"}], "&"}], "[", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"Nest", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"expr", ",", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dim", "/", 
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}], ")"}]}], ")"}], 
                    "*", 
                    RowBox[{"(", 
                    RowBox[{"gaGetMV", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"{", "0", "}"}]}], "]"}], ")"}]}], ")"}]}]}], 
                "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "expr"}], "}"}], ",", 
          RowBox[{"n", "-", "1"}]}], "]"}], ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[1107]:=",ExpressionUUID->"d7a66c65-0e40-4d5f-96e5-803b84a1b684"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector inverse, determinant, determinant norm of \
multivector, minimal and characteristic polynomials"
}], "Subsubsection",ExpressionUUID->"b13efc83-bc7c-46ab-9a4a-914c637b0c2d"],

Cell["\<\
Main multivector inverse function. Involution method needs extension to n>6, \
using method of Shirokov (in a similar way like it was done in \
gaDeterminantOfMV)\
\>", "Text",ExpressionUUID->"5b2efb92-da2e-4f90-a75c-ec537b3c7c89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"three", " ", "methods", " ", 
     RowBox[{"realized", ":", " ", "Blade"}]}], ",", " ", 
    RowBox[{"Involutions", " ", "and", " ", "Det"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "\"\<Automatic\>\""}], ",", 
       RowBox[{"ZeroTolerance", "->", 
        RowBox[{"10.", "^", 
         RowBox[{"(", 
          RowBox[{"-", "10"}], ")"}]}]}], ",", 
       RowBox[{"Expand", "\[Rule]", "\"\<Automatic\>\""}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInverse", "::", "unknownMethod"}], "=", 
     "\"\<Inversion method Method->`1` is unknown.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInverse", "::", "notBlade"}], "=", 
     "\"\<The input MV `1` is not a blade. The specified method will yield \
wrong answer.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "case", " ", "of", " ", "option", " ", "which", " ", "may", " ", "have", 
     " ", "suboptions"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to",
      " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
     " ", "user"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", "\"\<Method\>\"", "]"}], "=", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "Automatic", ",", 
       "\"\<Involutions (gaDeterminantFormula, Direction)\>\"", ",", 
       "\"\<Det ()\>\"", ",", "\"\<Blade ()\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Involutions\>\"", ",", "\"\<gaDeterminantFormula\>\""}], 
       "}"}], "]"}], "=", 
     RowBox[{"HoldForm", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Involutions\>\"", ",", 
        RowBox[{"gaDeterminantFormula", "->", 
         RowBox[{"Alternatives", "[", 
          RowBox[{
          "\"\<Recursive\>\"", ",", "\"\<Explicit\>\"", ",", 
           "\"\<Optimal\>\""}], "]"}]}]}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Involutions\>\"", ",", "\"\<Direction\>\""}], "}"}], 
      "]"}], "=", 
     RowBox[{"HoldForm", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Involutions\>\"", ",", 
        RowBox[{"Direction", "->", 
         RowBox[{"Alternatives", "[", 
          RowBox[{"\"\<Left\>\"", ",", "\"\<Right\>\""}], "]"}]}]}], "}"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
     RowBox[{
     "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
      "for", " ", "each", " ", "suboption"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{
        "\"\<Automatic\>\"", ",", "\"\<Involutions\>\"", ",", "\"\<Det\>\"", 
         ",", "\"\<Blade\>\""}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Alternatives", "[", 
            RowBox[{
            "\"\<Automatic\>\"", ",", "\"\<Involutions\>\"", ",", 
             "\"\<Det\>\"", ",", "\"\<Blade\>\""}], "]"}], ",", "___Rule"}], 
          "}"}]}], "]"}], "&&", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"testOptionInverse", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"val", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Involutions\>\"", ",", "\"\<gaDeterminantFormula\>\""}], 
        "}"}], ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{
        "\"\<Recursive\>\"", ",", "\"\<Explicit\>\"", ",", 
         "\"\<Optimal\>\""}], "]"}]}], "]"}]}], ";", 
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Involutions\>\"", ",", "\"\<Direction\>\""}], "}"}], ",",
        "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{"\"\<Left\>\"", ",", "\"\<Right\>\""}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
    ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "when", " ", "neither", " ", "maches", " ", "we", " ", "provide", " ", 
     "negative", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"case", " ", "of", " ", "simple", " ", "option"}], "  ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", "\"\<Expand\>\"", "]"}], "=", 
     RowBox[{
     "\"\<Automatic\>\"", "|", "Automatic", "|", "Expand", "|", "Identity", 
      "|", "\"\<any transformation (i.e with head Function[]) of expression\>\
\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", "\"\<ZeroTolerance\>\"", "]"}], "=", 
     "\"\<Small real number tol << 1\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", "\"\<Quiet\>\"", "]"}], "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
     " ", "actual", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"\"\<Expand\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "\"\<Automatic\>\"", "|", "Automatic", "|", "Expand", "|", "Identity", 
        "|", "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"\"\<ZeroTolerance\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"TrueQ", "[", 
      RowBox[{"val", "<", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionInverse", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "scalar", " ", "case"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"1", "/", "expr"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"bs", "|", "MV"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"the", " ", "factored", " ", "product", " ", "case"}], ",", 
        " ", 
        RowBox[{"including", " ", "factored", " ", "versor"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"prod_GeometricProduct", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{
         RowBox[{"gaInverse", "[", 
          RowBox[{"#", ",", "opts"}], "]"}], "&"}], " ", "/@", 
        RowBox[{"Reverse", "[", "prod", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"the", " ", "general", " ", "case"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"op", ":", 
          RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"theOption", ",", "theMethod", ",", "testResult", ",", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"theScalarFunction", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity",
                ",", "gaPlainRepresentation"}], "]"}]}], ",", "theResult", 
            ",", "dim"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaSetNamedOptionValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"gaInverse", ",", "#", ",", "theOption"}], "}"}], ",", 
               RowBox[{
                RowBox[{"gaOptionCheck", "[", "testOptionInverse", "]"}], "[", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                    ",", 
                    RowBox[{"Automatic", "\[Rule]", "\"\<Automatic\>\""}]}], 
                   "}"}]}], ")"}], "]"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
              "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Flatten", "[", 
              RowBox[{"First", "/@", 
               RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
             " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
              "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"Expand", "/.", 
                RowBox[{"Options", "[", "gaInverse", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], 
               "]"}], "===", "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"ZeroTolerance", "/.", 
                RowBox[{"Options", "[", "gaInverse", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===",
               "theOption"}], ",", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
              RowBox[{"(", 
               RowBox[{"Quiet", "/.", 
                RowBox[{"Options", "[", "gaInverse", "]"}]}], ")"}]}]}], 
            "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"dim", "=", 
               RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], 
                ",", " ", 
                RowBox[{
                "decide", " ", "which", " ", "one", " ", "of", " ", "methods",
                  " ", "to", " ", "use"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
                 "\"\<Automatic\>\""}], ",", "\[IndentingNewLine]", 
                RowBox[{"Which", "[", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "if", " ", "expr", " ", "is", " ", "base", " ", "element", "  ",
                    "or", " ", "vector", " ", "use", " ", 
                   "gaNorm2ReverseSigned"}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Or", "[", 
                   RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"theScalarFunction", "===", "Identity"}], ",", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"Times", "[", 
                    RowBox[{"c_.", ",", "_bs"}], "]"}], "]"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"gaGradeList", "[", "expr", "]"}], "===", 
                    RowBox[{"{", "1", "}"}]}]}], "]"}], ",", 
                  RowBox[{"theMethod", "=", "\"\<Blade\>\""}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                    RowBox[{
                    "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                   "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
                  RowBox[{"theMethod", "=", "\"\<Involutions\>\""}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                   "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                    " ", "do", " ", "generic", " ", "inverse", " ", "using", 
                    " ", "matrix", " ", "representations"}], "*)"}], 
                  "\[IndentingNewLine]", "True", ",", 
                  RowBox[{"theMethod", "=", "\"\<Det\>\""}]}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"theMethod", "=", 
                  RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "inverse", " ", "using", " ", "chosen", " ", 
                "method"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"Catch", "[", 
               RowBox[{"Switch", "[", 
                RowBox[{
                "theMethod", ",", "\[IndentingNewLine]", "\"\<Blade\>\"", ",",
                  "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"Not", "[", 
                    RowBox[{"gaBladeQ", "[", "expr", "]"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaInverse", "::", "notBlade"}], ",", "expr"}], 
                    "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                   "vector", " ", "and", " ", "base", " ", "element", " ", 
                    "blade", " ", "case"}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"testResult", "=", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{"gaNorm2ReverseSigned", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"allZeroTest", "[", 
                   RowBox[{
                   "testResult", ",", "expr", ",", "theScalarFunction", ",", 
                    RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], 
                    ",", "\"\<gaInverse[_,Method->\\\"Blade\\\"]\>\""}], 
                   "]"}], ";", 
                  RowBox[{"theResult", "=", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"expr", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], ",", "al__"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Signature", "[", 
                    RowBox[{"Reverse", "[", "a", "]"}], "]"}], "*", 
                    RowBox[{"Signature", "[", 
                    RowBox[{"Reverse", "[", "b", "]"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], ",", "al"}], "]"}]}], 
                    ")"}]}], "}"}]}], ")"}], "/", 
                    RowBox[{
                    "theScalarFunction", "[", "testResult", "]"}]}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "algebras", " ", "for", " ", "which", " ", "involution", 
                   " ", "formula", " ", "is", " ", "known"}], " ", "*)"}], 
                 "\[IndentingNewLine]", "\"\<Involutions\>\"", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"theResult", "=", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"involutionInverse", "[", 
                    RowBox[{"expr", ",", "dim", ",", 
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
                    RowBox[{
                    "theOption", "[", "\"\<ZeroTolerance\>\"", "]"}]}], "]"}],
                     "/.", 
                    RowBox[{"{", 
                    RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                   ")"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
                 "\[IndentingNewLine]", "\"\<Det\>\"", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Off", "[", 
                   RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"gaDefineMatrixRepresentation", "[", 
                   RowBox[{"theAlgebra", ",", 
                    RowBox[{"Method", " ", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<TensorProduct\>\"", ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"On", "[", 
                   RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"testResult", "=", 
                   RowBox[{"gaToMatrixRepresentation", "[", 
                    RowBox[{
                    RowBox[{"gaPlainRepresentation", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                    "theAlgebra"}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"allZeroTest", "[", 
                   RowBox[{"testResult", ",", "expr", ",", "Identity", ",", 
                    RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], 
                    ",", "\"\<gaInverse[_,Method->\\\"Det\\\"]\>\""}], "]"}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"theResult", "=", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{
                    "gaFromMatrixRepresentationSparseNoQuaternions", "[", 
                    RowBox[{
                    RowBox[{"Inverse", "[", "testResult", "]"}], ",", 
                    "theAlgebra"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
                 ",", "\[IndentingNewLine]", "_", ",", 
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaInvertibleQ", "::", "unknownMethod"}], ",", 
                   "theMethod"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_bs"}], "]"}]}]}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellLabel->
  "In[1108]:=",ExpressionUUID->"8ce879f3-043c-464a-8920-b1037d5dd40f"],

Cell[TextData[{
 "Definitions of  determinants of matrices with quaternions can be found in  \
Joao Pedro Morais, Svetlin Georgiev, Wolfgang Spro\[Beta]ig, \
\[OpenCurlyDoubleQuote]Real quaternionic calculus handbook\
\[CloseCurlyDoubleQuote], Birkhauser, 2014. These definitions, however are \
useless, because no interpretation is given for the determinant being the \
quaternion. Ian Porteous in  ",
 ButtonBox["[RA-LoCGAaA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 42 says that \[OpenCurlyDoubleQuote]determinant of n\[Cross]n \
quaternionic matrix is defined to be square root of determinant of the matrix \
regarded as 2n\[Cross]2n complex matrix, the later necessary having \
determinant of nonnegative real number\[CloseCurlyDoubleQuote]. The \
realization below calculates determinant exactly this way, except it do not \
take square root (user can easily take it itself). The other source about \
quaternionic determinants is in Andrzej Trautmann, \
\[OpenCurlyDoubleQuote]Clifford algebras and their representations\
\[CloseCurlyDoubleQuote], Encyclopedia of Mathematical physics, eds. J.-P. \
Francoise, G.L. Naber and Tsou S.T., Oxford, Elsevier, 2006, vol 1., pages \
518-530. In the Algebras section he describes exactly the same approach, \
except no square root is mentioned. He also gives two explicit formulas for \
determinant. "
}], "Text",ExpressionUUID->"d1d20f09-1cfd-43fd-861a-226c7cee16f4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDeterminantOfMV", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<Automatic\>\""}], ",", 
      RowBox[{"Expand", "\[Rule]", "\"\<Automatic\>\""}], ",", 
      RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Method", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Involutions\>\"", ",", 
      RowBox[{"gaDeterminantFormula", "\[Rule]", "\"\<Recursive\>\""}], ",", 
      RowBox[{"Direction", "\[Rule]", "\"\<Left\>\""}]}], "}"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "case", " ", "of", " ", "option", " ", "which", " ", "may", " ", "have", 
    " ", "suboptions"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", "\"\<Method\>\"", "]"}], "=", 
   RowBox[{"Alternatives", "[", 
    RowBox[{
    "Automatic", ",", "\"\<\\\"Automatic\\\"\>\"", ",", 
     "\"\<{\\\"Involutions\\\", \
gaDeterminantFormula->\\\"Recursive\\\"|\\\"Explicit\\\"|\\\"Optimal\\\", \
Direction->\\\"Left\\\"}\>\"", ",", "\"\<Det()\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Involutions\>\"", ",", "\"\<gaDeterminantFormula\>\""}], 
     "}"}], "]"}], "=", 
   RowBox[{"HoldForm", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<\\\"Involutions\\\"\>\"", ",", 
      RowBox[{
      "gaDeterminantFormula", "->", 
       "\"\<\\\"Recursive\\\"|\\\"Explicit\\\"|\\\"Optimal\\\"\>\""}]}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDeterminantOfMV", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Involutions\>\"", ",", "\"\<Direction\>\""}], "}"}], "]"}],
     "=", 
    RowBox[{"HoldForm", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<\\\"Involutions\\\"\>\"", ",", 
       RowBox[{
       "Direction", "\[Rule]", "\"\<\\\"Left\\\"|\\\"Right\\\"\>\""}]}], 
      "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<Automatic\>\"", ",", "\"\<Involutions\>\"", ",", "\"\<Det\>\""}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "\"\<Automatic\>\"", "|", "Automatic", "|", "\"\<Involutions\>\"", 
          "|", "\"\<Det\>\""}], ",", "___Rule"}], "}"}]}], "]"}], "&&", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"Rest", "[", "val", "]"}], ",", 
       RowBox[{
        RowBox[{"testOptionDeterminantOfMV", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"val", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ")"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Involutions\>\"", ",", "\"\<gaDeterminantFormula\>\""}], 
      "}"}], ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<Recursive\>\"", ",", "\"\<Explicit\>\"", ",", "\"\<Optimal\>\""}], 
      "]"}]}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Involutions\>\"", ",", "\"\<Direction\>\""}], "}"}], ",", 
     "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{"\"\<Left\>\"", ",", "\"\<Right\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDeterminantOfMV", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
   ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "when", " ", "neither", " ", "maches", " ", "we", " ", "provide", " ", 
    "negative", " ", "answer", " ", "as", " ", "last", " ", "possibility"}], 
   "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"case", " ", "of", " ", "simple", " ", "option"}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", "\"\<Expand\>\"", "]"}], "=", 
   RowBox[{
   "\"\<\\\"Automatic\\\"\>\"", "|", "Automatic", "|", "Expand", "|", 
    "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDeterminantOfMV", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDeterminantOfMV", "[", 
    RowBox[{"\"\<Expand\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<Automatic\>\"", "|", "Automatic", "|", "Expand", "|", "Identity", 
      "|", "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDeterminantOfMV", "[", 
     RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "unknownMethod"}], "=", 
   "\"\<Determinant computation method Method->`1` is unknown. Possible \
values are Automatic, Involutions and Det. Method\[Rule]Det will first \
calculate matrix representation of MV. The default is to use \
Method->Involutions for algebras with p+q<=6 and Method\[Rule]Det in all \
other cases.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "OptimalMethod"}], "=", 
   "\"\<Explicit optimized formulas are known for dimension n\[LessEqual]6. \
Your algebra has dimension `1`. Switching suboption \
gaDeterminantFormula->\\\"Explicit\\\".\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "fail"}], "=", 
   "\"\<Failed to replace quaternion entries by complex 2x2 matrices in \
`1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDeterminantOfMV", "::", "unexpectedDim"}], "=", 
    "\"\<The calculated matrix dimension `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"y_", "+", "w_"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"y", ",", "op"}], "]"}], "+", 
            RowBox[{"x", "[", 
             RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"Times", "[", 
              RowBox[{"c_", ",", "d__"}], "]"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaPureLinearity", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"the", " ", "factored", " ", "product", " ", "case"}], ",", 
       " ", 
       RowBox[{"including", " ", "factored", " ", "versor"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantOfMV", "[", 
       RowBox[{"prod_GeometricProduct", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaDeterminantOfMV", "[", 
         RowBox[{"#", ",", "opts"}], "]"}], "&"}], " ", "/@", "prod"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "the", " ", "matrix", " ", "with", " ", "quaternionic", " ", "entries", 
       " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantOfMV", "[", 
       RowBox[{"mat_", "?", "MatrixQ"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"mat", ",", 
           RowBox[{"MV", "|", "bs"}]}], "]"}], ",", 
         RowBox[{"Det", "[", "mat", "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"quaternionFreeMatrix", ",", 
             RowBox[{"repRuls", "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"Rest", "[", 
                 RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}],
                  "]"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "c_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"c", "*", 
                  RowBox[{"IdentityMatrix", "[", "2", "]"}]}]}]}], "]"}]}]}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"quaternionFreeMatrix", "=", 
             RowBox[{"ArrayFlatten", "[", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"gaPureLinearity", ",", "mat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
                  RowBox[{"gaPureLinearity", "\[Rule]", "gaTensorProduct"}]}],
                  ")"}], "/.", "repRuls"}], ")"}], "\[IndentingNewLine]", 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"quaternionFreeMatrix", ",", 
                 RowBox[{"MV", "|", "bs"}]}], "]"}], "&&", 
               RowBox[{"MatrixQ", "[", "quaternionFreeMatrix", "]"}]}], ",", 
              RowBox[{"Det", "[", "quaternionFreeMatrix", "]"}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDeterminantOfMV", "::", "fail"}], ",", 
                "quaternionFreeMatrix"}], "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
       
       RowBox[{"(", 
        RowBox[{
         RowBox[{"SameQ", "@@", 
          RowBox[{"Dimensions", "[", "mat", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Dimensions", "[", "mat", "]"}], "]"}], "===", "2"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"the", " ", "general", " ", "MV", " ", 
        RowBox[{"case", ".", " ", "theScalarFunction"}]}], "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", ",", 
         "gaPlainRepresentation"}], "]"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantOfMV", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"op", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"theAlgebra", "=", 
           RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
          "\[IndentingNewLine]", "theResult", ",", "dim", ",", "theMatrix", 
          ",", "theMatrixDet"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"option", " ", 
           RowBox[{"handling", ":", " ", 
            RowBox[{
            "when", " ", "option", " ", "has", " ", "value", " ", 
             "Automatic"}]}]}], ",", " ", 
          RowBox[{
          "replace", " ", "it", " ", "by", " ", "string", " ", 
           "\"\<Automatic\>\""}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaDeterminantOfMV", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionDeterminantOfMV", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                  ",", 
                  RowBox[{"Automatic", "\[Rule]", "\"\<Automatic\>\""}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
           " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
            "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Expand", "/.", 
              RowBox[{"Options", "[", "gaDeterminantOfMV", "]"}]}], ")"}]}]}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Quiet", "/.", 
              RowBox[{"Options", "[", "gaDeterminantOfMV", "]"}]}], ")"}]}]}],
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"MV", "|", "bs"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"scalar", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"expr", "^", 
            RowBox[{
            "gaDimensionOfRepresentation", "[", "gaRunningAlgebra", "]"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "true", " ", "MV", " ", "case", " ", "starts", " ", "here"}], " ",
             "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"dim", "=", 
               RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], 
                ",", " ", 
                RowBox[{
                "decide", " ", "which", " ", "one", " ", "of", " ", "methods",
                  " ", "to", " ", "use"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
                 "\"\<Automatic\>\""}], ",", "\[IndentingNewLine]", 
                RowBox[{"Which", "[", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                   RowBox[{
                   "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
                    "\"\<Involutions\>\""}], ";", 
                   RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    "=", "\"\<Optimal\>\""}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                   "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                    " ", "do", " ", "generic", " ", "inverse", " ", "using", 
                    " ", "matrix", " ", "representations"}], "*)"}], 
                  "\[IndentingNewLine]", "True", ",", 
                  RowBox[{
                   RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
                   "\"\<Det\>\""}]}], "\[IndentingNewLine]", "]"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "determinant", " ", "of", " ", "MV", " ", 
                "using", " ", "chosen", " ", "method"}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"Switch", "[", 
               RowBox[{
                RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "algebras", " ", "for", " ", "which", " ", "involution", " ",
                   "formula", " ", "is", " ", "optimal"}], " ", "*)"}], 
                "\[IndentingNewLine]", "\"\<Involutions\>\"", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "chech", " ", "if", " ", "suboption", " ", "values", " ", 
                  "were", " ", "defined"}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Head", "[", 
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    "]"}], "===", "theOption"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"dim", ">", "6"}], ",", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    "=", "\"\<Explicit\>\""}], ",", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    "=", "\"\<Optimal\>\""}]}], "]"}]}], 
                  "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "===", 
                    "\"\<Automatic\>\""}], ",", 
                   RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}]}]}], 
                  "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    "===", "\"\<Optimal\>\""}], ",", "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"dim", ">", "6"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    "=", "\"\<Explicit\>\""}], ";", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDeterminantOfMV", "::", "OptimalMethod"}], ",",
                     "dim"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
                  "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"Switch", "[", 
                  RowBox[{
                   RowBox[{
                   "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{"for", " ", "dim"}], " ", "\[LessEqual]", " ", 
                    RowBox[{
                    "6", " ", "we", " ", "have", " ", "explicit", " ", 
                    "optimized", " ", "functions"}]}], " ", "*)"}], 
                   "\[IndentingNewLine]", "\"\<Optimal\>\"", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"theResult", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"involutionDet", "[", 
                    RowBox[{"expr", ",", "dim", ",", 
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}]}], 
                    "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                    ")"}]}], ",", "\[IndentingNewLine]", "\"\<Recursive\>\"", 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{
                    "if", " ", "Method", " ", "option", " ", "was", " ", 
                    "not", " ", "defined"}], ",", " ", 
                    RowBox[{"define", " ", "one"}]}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", 
                    RowBox[{"theOption", "[", "\"\<Direction\>\"", "]"}], 
                    "]"}], "===", "theOption"}], ",", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Direction\>\"", "]"}], 
                    "=", "\"\<Left\>\""}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{"1", ",", "mv_"}], "]"}], ":=", "mv"}], ";"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Direction\>\"", "]"}], 
                    ",", "\"\<Left\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"for", " ", "dim"}], " ", ">", " ", 
                    RowBox[{
                    "6", " ", "can", " ", "use", " ", "recursime", " ", "or", 
                    " ", "explicit", " ", "implementation", " ", 
                    RowBox[{"using", " ", "[", "Shirokov2020", "]"}]}]}], ":",
                     " ", "arxiv", ":", 
                    RowBox[{"2005.04015", "v1"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "commented", " ", "is", " ", "direct", " ", "recursive", 
                    " ", "implementation"}], " ", "*)"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<The determinant is computed using: \>\"", ",", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
                    RowBox[{"gaDeterminantFormula", "->", 
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}]}],
                     ",", 
                    RowBox[{"Direction", "->", 
                    RowBox[{"theOption", "[", "\"\<Direction\>\"", "]"}]}]}], 
                    "}"}]}]}], "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"mv", "\[GeometricProduct]", 
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}]}], "]"}], 
                    "]"}], "-", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"mv", "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{"k", "-", "1"}], ")"}]}], ")"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"2", "^", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", 
                    "]"}], "/", "2"}], "]"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], "+", 
                    RowBox[{"gaNonZeroGradeInverse", "[", 
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], "]"}]}], 
                    ")"}]}], ")"}]}], "]"}], "]"}]}], ")"}], "/;", 
                    RowBox[{"k", ">", "1"}]}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"determinantFormulaByLeftNest", "[", 
                    RowBox[{"expr", ",", "theAlgebra"}], "]"}]}]}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaVerify", "::", "missing"}], ",", 
                    "\"\<Direction->\\\"Right\\\"\>\"", ",", 
                    "\"\<gaDeterminantOfMV[]\>\""}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{"k", ",", "mv"}], "]"}], "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], "-", 
                    RowBox[{"detCRec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv", ",", "theAlgebra"}], 
                    "]"}]}], ")"}], "\[GeometricProduct]", "mv"}]}], ")"}], "/;", 
                    RowBox[{"k", ">", "1"}]}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"determinantFormulaByRightNest", "[", 
                    RowBox[{"expr", ",", "theAlgebra"}], "]"}]}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], ",", 
                   "\[IndentingNewLine]", "\"\<Explicit\>\"", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<The determinant is computed using: \>\"", ",", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
                    RowBox[{"gaDeterminantFormula", "->", 
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", 
                    "]"}]}]}], "}"}]}]}], "}"}], "\[IndentingNewLine]", 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{"1", ",", "mv_"}], "]"}], ":=", "mv"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{
                    RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{"k", ",", "mv"}], "]"}], "=", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], 
                    "\[GeometricProduct]", "mv"}], "]"}]}], ")"}], "/;", 
                    RowBox[{"k", ">", "1"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"-", 
                    RowBox[{"detCExpl", "[", 
                    RowBox[{
                    RowBox[{"2", "^", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/",
                     "2"}], "]"}]}], ",", "expr", ",", "theAlgebra"}], 
                    "]"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"remove", " ", "memoized", " ", "values"}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "detU", "]"}], ";"}], ",", 
                   "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaVerify", "::", "missing"}], ",", 
                    RowBox[{
                    "theOption", "[", "\"\<gaDeterminantFormula\>\"", "]"}], 
                    ",", "\"\<gaDeterminantOfMV[]\>\""}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", " ", "$Failed"}], ";"}]}], 
                  "\[IndentingNewLine]", "]"}], ";", "theResult"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
                "\[IndentingNewLine]", "\"\<Det\>\"", ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "===", 
                    "\"\<Automatic\>\""}], ",", 
                   RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
                    "Expand"}]}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"printDetails", "[", 
                  RowBox[{
                   RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<The determinant is computed using: \>\"", ",", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}]}], 
                    "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"Off", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"gaDefineMatrixRepresentation", "[", 
                  RowBox[{"theAlgebra", ",", 
                   RowBox[{"Method", " ", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<TensorProduct\>\"", ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
                 ";", "\[IndentingNewLine]", 
                 RowBox[{"On", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"theMatrix", "=", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{
                    RowBox[{"gaPlainRepresentation", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                    "theAlgebra"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"if", " ", "dimenion", " ", "smaller"}], ",", " ", 
                   
                   RowBox[{"multiply", " ", "by", " ", "complex", " ", 
                    RowBox[{"conjugate", ":", " ", 
                    RowBox[{
                    "the", " ", "complex", " ", "matrix", " ", "case"}]}]}]}],
                   " ", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"Switch", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Dimensions", "[", "theMatrix", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"2", "^", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/",
                     "2"}], "]"}]}], ",", 
                   RowBox[{"theResult", "=", 
                    RowBox[{"Det", "[", "theMatrix", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"2", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/",
                     "2"}], "]"}], "-", "1"}], ")"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"theMatrixDet", "=", 
                    RowBox[{"Det", "[", "theMatrix", "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "[", 
                    RowBox[{"theMatrixDet", "*", 
                    RowBox[{"(", 
                    RowBox[{"theMatrixDet", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Complex", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"Complex", "[", 
                    RowBox[{"a", ",", 
                    RowBox[{"-", "b"}]}], "]"}]}], "}"}]}], ")"}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", "_", ",", 
                   RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDeterminantOfMV", "::", "unexpectedDim"}], ",", 
                    RowBox[{"Dimensions", "[", "theMatrix", "]"}]}], "]"}], 
                    ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], 
                  "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                 "theResult"}], "\[IndentingNewLine]", ",", 
                "\[IndentingNewLine]", "_", ",", 
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaDeterminantOfMV", "::", "unknownMethod"}], ",", 
                  RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], 
                 "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1126]:=",ExpressionUUID->"bf9d8ccb-5d8e-410f-85bf-2e85e8bc6690"],

Cell["\<\
Two methods for invertibility test. One is to check if  gaNorm2ReverseSigned \
is zero, or convert to matrix representation and check if determinant is \
zero. In the case if symbolic coefficients are present, just return \
calculated magnitude square and the determinant. This might be useful for \
further precession.\
\>", "Text",ExpressionUUID->"8821b710-7077-4005-9e9b-d5fdea06ead8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaNormDeterminant", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"gaVerify", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormDeterminant", "::", "normOfScalar"}], "=", 
   "\"\<Request to compute determinant norm of scalar `1` encountered. The \
algebra dimension will be extracted from gaRunningAlgebra=`2`.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNormDeterminant", "::", "nonscalar"}], "=", 
    "\"\<Error. Nonscalar value was obtained when computing determinat `1` of \
MV `2`. \>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionNormDeterminant", "[", "\"\<gaVerify\>\"", "]"}], "=", 
   "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionNormDeterminant", "[", "\"\<Quiet\>\"", "]"}], "=", 
    "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionNormDeterminant", "[", 
    RowBox[{"\"\<gaVerify\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionNormDeterminant", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1144]:=",ExpressionUUID->"d0a1c123-9fc1-40c0-9474-d7135866213c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormDeterminant", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", 
           RowBox[{"gaNormDeterminant", ",", "gaDeterminantOfMV"}], "}"}], 
          "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"theVectorSpaceDimension", "=", 
           RowBox[{"gaDimensionOfVectorSpace", "[", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}], 
            "]"}]}], ",", "theDet"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaNormDeterminant", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionNormDeterminant", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaNormDeterminant", "]"}]}], "]"}]}], 
            "]"}], ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
           " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "=", 
            RowBox[{"gaVerify", "/.", 
             RowBox[{"Options", "[", "gaNormDeterminant", "]"}]}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"Options", "[", "gaNormDeterminant", "]"}]}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theVectorSpaceDimension", "===", 
            RowBox[{"gaDimensionOfVectorSpace", "[", "0", "]"}]}], ",", 
           RowBox[{
            RowBox[{"theVectorSpaceDimension", "=", 
             RowBox[{
             "gaDimensionOfVectorSpace", "[", "gaRunningAlgebra", "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaNormDeterminant", "::", "normOfScalar"}], ",", 
                "expr", ",", "gaRunningAlgebra"}], "]"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"theDet", "=", 
          RowBox[{"gaDeterminantOfMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaDeterminantOfMV", "]"}]}], 
              "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"Expand", "[", "theDet", "]"}], ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaNormDeterminant", "::", "nonscalar"}], ",", 
                "theDet", ",", "expr"}], "]"}], ";", 
              RowBox[{"Abort", "[", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Power", "[", 
              RowBox[{
               RowBox[{"Abs", "[", "theDet", "]"}], ",", 
               RowBox[{"(", 
                RowBox[{"1", "/", 
                 RowBox[{"Power", "[", 
                  RowBox[{"2", ",", 
                   RowBox[{"Ceiling", "[", 
                    RowBox[{"theVectorSpaceDimension", "/", "2"}], "]"}]}], 
                  "]"}]}], ")"}]}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Power", "[", 
            RowBox[{
             RowBox[{"Abs", "[", "theDet", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{"1", "/", 
               RowBox[{"Power", "[", 
                RowBox[{"2", ",", 
                 RowBox[{"Ceiling", "[", 
                  RowBox[{"theVectorSpaceDimension", "/", "2"}], "]"}]}], 
                "]"}]}], ")"}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1151]:=",ExpressionUUID->"c6ab9df0-685c-4ad7-9c52-434dc34a3837"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"two", " ", "methods", " ", 
    RowBox[{"realized", ":", " ", 
     RowBox[{"gaNorm2ReverseSigned", " ", "and", " ", "Det"}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInvertibleQ", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "gaDeterminantOfMV"}], ",", 
       RowBox[{"ZeroTolerance", "->", 
        RowBox[{"10", "^", 
         RowBox[{"-", "10"}]}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertibleQ", "::", "unknownMethod"}], "=", 
     "\"\<Invertibility check method Method->`1` is unknown. Possible value \
gaDeterminantOfMV.\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertibleQ", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theMethod", "=", 
          RowBox[{"ToExpression", "[", 
           RowBox[{"OptionValue", "[", "Method", "]"}], "]"}]}], ",", 
         RowBox[{"chopTol", "=", 
          RowBox[{"OptionValue", "[", "ZeroTolerance", "]"}]}], ",", 
         "testResult"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "theMethod", ",", "\[IndentingNewLine]", "gaDeterminantOfMV", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"testResult", "=", 
           RowBox[{"Chop", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"gaDeterminantOfMV", "[", 
               RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], ",", 
             "chopTol"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"PossibleZeroQ", "[", "testResult", "]"}], ",", "False", 
            ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"NumericQ", "[", "testResult", "]"}], ",", "True", ",", 
              
              RowBox[{"testResult", "\[NotEqual]", "0"}]}], "]"}]}], "]"}]}], 
         ",", "\[IndentingNewLine]", "_", ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaInvertibleQ", "::", "unknownMethod"}], ",", 
           "theMethod"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1152]:=",ExpressionUUID->"0aa770b1-4cf8-4c69-ae65-99f96ff18d08"],

Cell["\<\
GA characteristic polynomials. Method the same as for gaDeterminant[ ], \
except that this time we use projection instead of sum of MV and its all \
grade (except 0) inverse (see the same Shirokov article as for determinant).\
\>", "Text",ExpressionUUID->"505f6280-e11b-4249-b445-4d9527b6ab1f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaCharacteristicPolynomial", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<Automatic\>\""}], ",", 
      RowBox[{"Expand", "\[Rule]", "\"\<Automatic\>\""}], ",", 
      RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "case", " ", "of", " ", "option", " ", "which", " ", "may", " ", "have", 
    " ", "suboptions"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", "\"\<Method\>\"", "]"}],
    "=", 
   RowBox[{"Alternatives", "[", 
    RowBox[{
    "Automatic", ",", "\"\<\\\"Automatic\\\"\>\"", ",", 
     "\"\<\\\"Involutions\\\"\>\"", ",", "\"\<\\\"Matrix\\\"\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Involutions\>\"", ",", "\"\<gaFormula\>\""}], "}"}], "]"}], 
   "=", 
   RowBox[{"HoldForm", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<\\\"Involutions\\\"\>\"", ",", 
      RowBox[{
      "gaFormula", "->", 
       "\"\<\\\"Recursive\\\"|\\\"Explicit\\\"|\\\"Optimal\\\"\>\""}]}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionCharacteristicPolynomial", "[", "\"\<Quiet\>\"", "]"}],
     ":=", 
    RowBox[{"Alternatives", "[", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<Automatic\>\"", ",", "\"\<Involutions\>\"", ",", 
       "\"\<Matrix\>\""}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", 
    RowBox[{"\"\<Method\>\"", ",", "Automatic"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "\"\<Automatic\>\"", "|", "Automatic", "|", "\"\<Involutions\>\"", 
          "|", "\"\<Matrix\>\""}], ",", "___Rule"}], "}"}]}], "]"}], "&&", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"Rest", "[", "val", "]"}], ",", 
       RowBox[{
        RowBox[{"testOptionCharacteristicPolynomial", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"val", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ")"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Involutions\>\"", ",", "\"\<gaFormula\>\""}], "}"}], ",", 
     "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<Recursive\>\"", ",", "\"\<Explicit\>\"", ",", "\"\<Optimal\>\""}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionCharacteristicPolynomial", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "when", " ", "neither", " ", "maches", " ", "we", " ", "provide", " ", 
    "negative", " ", "answer", " ", "as", " ", "last", " ", "possibility"}], 
   "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"case", " ", "of", " ", "simple", " ", "option"}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", "\"\<Expand\>\"", "]"}],
    "=", 
   RowBox[{
   "\"\<\\\"Automatic\\\"\>\"", "|", "Automatic", "|", "Expand", "|", 
    "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionCharacteristicPolynomial", "[", "\"\<Quiet\>\"", "]"}],
     "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionCharacteristicPolynomial", "[", 
    RowBox[{"\"\<Expand\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<Automatic\>\"", "|", "Automatic", "|", "Expand", "|", "Identity", 
      "|", "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionCharacteristicPolynomial", "[", 
     RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", "Messages", " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCharacteristicPolynomial", "::", "degree"}], "=", 
   "\"\<Characteristic polynomial degree `1` (or elements of degree list) is \
in not in the range [1, `2`]. Will replace by All.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCharacteristicPolynomial", "::", "OptimalMethod"}], "=", 
   "\"\<Explicit optimized formulas are known for dimension n\[LessEqual]6. \
The algebra has dimension `1`. Switching suboption \
gaFormula->\\\"Explicit\\\".\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[1155]:=",ExpressionUUID->"aaa2297f-a405-4c78-a15d-eb6e18b1ef23"],

Cell["\<\
gaCharacteristicPolynomial[ ] called with poly variable return polynomial. \
When called with number returns corresponding coefficient of char poly\
\>", "Text",ExpressionUUID->"12bb01e1-7cc3-41e3-82b1-b942f425763e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCharacteristicPolynomial", "[", 
   RowBox[{"exprInput_", ",", "x_Symbol", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "exprInput", "]"}]}], ",", 
       "maxPolyDegree", ",", "charCoefficients"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"maxPolyDegree", "=", 
       RowBox[{"gaDimensionOfRepresentation", "[", "theAlgebra", "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "call", " ", "back", " ", "the", " ", "same", " ", "function", " ", 
        "to", " ", "obtain", " ", "coefficients", " ", "of", " ", "char", " ",
         "poly"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"charCoefficients", "=", 
       RowBox[{"gaCharacteristicPolynomial", "[", 
        RowBox[{"exprInput", ",", "All", ",", "op"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Reverse", "[", "charCoefficients", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}], ".", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"x", "^", "i"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "maxPolyDegree"}], "}"}]}], "]"}]}]}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"x", "=!=", "All"}]}]}]], "Input",
 CellLabel->
  "In[1170]:=",ExpressionUUID->"afdddfe0-ede8-4324-883d-a66451a32cdf"],

Cell["\<\
gaCharacteristicPolynomial[ ] is not well tested (especially options, in \
particular option Expand is not implemented, optimal method is not known, \
etc...). \
\>", "Text",ExpressionUUID->"83ab81e6-38b1-4aa8-95c1-d1ea9002d684"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCharacteristicPolynomial", "[", 
    RowBox[{"exprInput_", ",", "0", ",", "_"}], "]"}], ":=", 
   RowBox[{"-", "1"}]}], ";"}]], "Input",
 CellLabel->
  "In[1171]:=",ExpressionUUID->"e1ba8907-8e86-44ba-970b-a38009264399"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaCharacteristicPolynomial", "[", 
     RowBox[{"exprInput_", ",", 
      RowBox[{"n", ":", 
       RowBox[{"(", 
        RowBox[{"_Integer", "|", "All"}], ")"}]}], ",", 
      RowBox[{"op", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theOption", ",", "testResult", ",", 
        RowBox[{"theAlgebra", "=", 
         RowBox[{"gaGetAlgebra", "[", "exprInput", "]"}]}], ",", "theResult", 
        ",", "dim", ",", "theMatrix", ",", "maxPolyDegree", ",", "nRange", 
        ",", "expr", ",", "oldMatrixRep"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"option", " ", 
         RowBox[{"handling", ":", " ", 
          RowBox[{
          "when", " ", "option", " ", "has", " ", "value", " ", 
           "Automatic"}]}]}], ",", " ", 
        RowBox[{
        "replace", " ", "it", " ", "by", " ", "string", " ", 
         "\"\<Automatic\>\""}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaSetNamedOptionValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "gaCharacteristicPolynomial", ",", "#", ",", "theOption"}], "}"}],
            ",", 
           RowBox[{
            RowBox[{
            "gaOptionCheck", "[", "testOptionCharacteristicPolynomial", "]"}],
             "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                ",", 
                RowBox[{"Automatic", "\[Rule]", "\"\<Automatic\>\""}]}], 
               "}"}]}], ")"}], "]"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
          "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"Flatten", "[", 
          RowBox[{"First", "/@", 
           RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "if", " ", "main", " ", "options", " ", "obtained", " ",
          "values"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
          "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"Expand", "/.", 
            RowBox[{"Options", "[", "gaCharacteristicPolynomial", "]"}]}], 
           ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"Options", "[", "gaCharacteristicPolynomial", "]"}]}], 
           ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"true", " ", "MV", " ", "case", " ", "starts", " ", "here"}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"maxPolyDegree", "=", 
        RowBox[{"gaDimensionOfRepresentation", "[", "theAlgebra", "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", "===", "All"}], ",", 
         RowBox[{"nRange", "=", 
          RowBox[{"Range", "[", 
           RowBox[{"1", ",", "maxPolyDegree"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "===", 
          "\"\<Automatic\>\""}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}]}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"expr", "=", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "[", "exprInput", 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"when", " ", "n", " ", "is", " ", "symbol"}], ",", " ", 
         RowBox[{"output", " ", "characteristic", " ", "polynomial"}], ",", 
         " ", 
         RowBox[{"not", " ", "coefficient"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{"n", ",", "\[IndentingNewLine]", 
         RowBox[{"_Integer", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Positive", "[", "#", "]"}], "&&", 
              RowBox[{"(", 
               RowBox[{"#", "\[LessEqual]", "maxPolyDegree"}], ")"}]}], ")"}],
             "&"}], ")"}]}], ",", 
         RowBox[{"nRange", "=", 
          RowBox[{"{", "n", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"__Integer", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Positive", "[", "#", "]"}], "&&", 
               RowBox[{"(", 
                RowBox[{"#", "\[LessEqual]", "maxPolyDegree"}], ")"}]}], 
              ")"}], "&"}], ")"}]}], "}"}], ",", 
         RowBox[{"nRange", "=", "n"}], ",", "\[IndentingNewLine]", "All", ",", 
         RowBox[{"nRange", "=", 
          RowBox[{"Range", "[", 
           RowBox[{"1", ",", "maxPolyDegree"}], "]"}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaCharacteristicPolynomial", "::", "degree"}], ",", "n", 
            ",", "maxPolyDegree"}], "]"}], ";", 
          RowBox[{"nRange", "=", 
           RowBox[{"Range", "[", 
            RowBox[{"1", ",", "maxPolyDegree"}], "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"dim", "=", 
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], ",",
             " ", 
            RowBox[{
            "decide", " ", "which", " ", "one", " ", "of", " ", "methods", 
             " ", "to", " ", "use"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
             "\"\<Automatic\>\""}], ",", "\[IndentingNewLine]", 
            RowBox[{"Which", "[", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
               RowBox[{"q", " ", "use", " ", "specific", " ", "formulas"}]}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
               "\"\<Involutions\>\""}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{
                "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                 " ", "use", " ", "matrix", " ", "representations"}], ",", 
                " ", 
                RowBox[{
                "since", " ", "it", " ", "is", " ", "much", " ", "faster"}]}],
                "*)"}], "\[IndentingNewLine]", "True", ",", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
               "\"\<Matrix\>\""}]}], "\[IndentingNewLine]", "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "calculate", " ", "determinant", " ", "of", " ", "MV", " ", 
            "using", " ", "chosen", " ", "method"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "recursive", " ", "computation", " ", "using", " ", "Shirokov", 
              " ", "method"}], " ", "*)"}], "\[IndentingNewLine]", 
            "\"\<Involutions\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "chech", " ", "if", " ", "suboption", " ", "values", " ", "were",
               " ", "defined"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "[", 
                 RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "]"}], 
                "===", "theOption"}], ",", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"dim", ">", "6"}], ",", 
                 RowBox[{
                  RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
                  "\"\<Recursive\>\""}], ",", 
                 RowBox[{
                  RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
                  "\"\<Optimal\>\""}]}], "]"}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "===", 
                "\"\<Optimal\>\""}], ",", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"dim", ">", "6"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
                   "\"\<Explicit\>\""}], ";", 
                  RowBox[{"Message", "[", 
                   RowBox[{
                    RowBox[{
                    "gaCharacteristicPolynomial", "::", "OptimalMethod"}], 
                    ",", "dim"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"for", " ", "dim"}], " ", "\[LessEqual]", " ", 
                 RowBox[{
                 "6", " ", "we", " ", "have", " ", "explicit", " ", 
                  "optimized", " ", "functions"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", "\"\<Optimal\>\"", ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{
                  RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Using {Method,gaFormula}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
                    RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}]}], 
                    "}"}]}], "}"}], "}"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"testResult", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "characteristicPolynomialFormulaByLeftNest", "[", 
                    RowBox[{"expr", ",", "theAlgebra", ",", "#"}], "]"}], 
                    "&"}], "/@", "nRange"}], ")"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               "\"\<Recursive\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{
                  RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Using {Method,gaFormula}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
                    RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}]}], 
                    "}"}]}], "}"}], "}"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"testResult", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "characteristicPolynomialFormulaByLeftNest", "[", 
                    RowBox[{"expr", ",", "theAlgebra", ",", "#"}], "]"}], 
                    "&"}], "/@", "nRange"}], ")"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               "\"\<Explicit\>\"", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"printDetails", "[", 
                 RowBox[{
                  RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Using {Method,gaFormula}=\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
                    RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}]}], 
                    "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Very slow, to improve\>\"", ",", "\"\<!\>\""}], 
                    "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"detU", "[", 
                  RowBox[{"1", ",", "mv_"}], "]"}], ":=", "mv"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"detU", "[", 
                  RowBox[{
                   RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                  "]"}], ":=", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{"k", ",", "mv"}], "]"}], "=", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "[", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], 
                    "\[GeometricProduct]", "mv"}], "]"}]}], ")"}], "/;", 
                  RowBox[{"k", ">", "1"}]}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"testResult", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"detCExpl", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "[", 
                    "expr", "]"}], ",", "theAlgebra"}], "]"}], "&"}], "/@", 
                   "nRange"}], ")"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
              ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
            "\[IndentingNewLine]", "\"\<Matrix\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"oldMatrixRep", "=", 
              RowBox[{"gaMatrixRepresentation", "[", "theAlgebra", "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "===", 
                "\"\<Automatic\>\""}], ",", 
               RowBox[{
                RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
                "Expand"}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Head", "[", 
                   RowBox[{"gaMatrixRepresentation", "[", "theAlgebra", "]"}],
                    "]"}], "===", "gaMatrixRepresentation"}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{"!", 
                  RowBox[{"FreeQ", "[", 
                   RowBox[{
                    RowBox[{
                    "gaMatrixRepresentation", "[", "theAlgebra", "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}]}], ")"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Off", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"gaDefineMatrixRepresentation", "[", 
                 RowBox[{"theAlgebra", ",", 
                  RowBox[{"Method", " ", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<TensorProduct\>\"", ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<IPauli[3,1]\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"On", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                 "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"printDetails", "[", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<The characteristic is computed using matrix \
representations:\>\"", ",", 
                   RowBox[{"Method", "\[Rule]", 
                    RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}]}], 
                  "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Matrix representations are \>\"", ",", 
                   RowBox[{
                   "gaMatrixRepresentation", "[", "theAlgebra", "]"}]}], 
                  "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"theMatrix", "=", 
              RowBox[{"gaToMatrixRepresentation", "[", 
               RowBox[{
                RowBox[{"gaPlainRepresentation", "[", 
                 RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                "theAlgebra"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"testResult", "=", 
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{"-", 
                 RowBox[{"Rest", "[", 
                  RowBox[{"Reverse", "[", 
                   RowBox[{"CoefficientList", "[", 
                    RowBox[{
                    RowBox[{"CharacteristicPolynomial", "[", 
                    RowBox[{"theMatrix", ",", "\[FormalA]"}], "]"}], ",", 
                    "\[FormalA]"}], "]"}], "]"}], "]"}]}], "]"}], "[", 
               RowBox[{"[", "nRange", "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"restore", " ", "matrix", " ", "representation"}], 
              "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaMatrixRepresentation", "[", "theAlgebra", "]"}], "=",
               "oldMatrixRep"}], ";"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", "_", ",", " ", "$Failed"}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "testResult", "]"}], ">", "1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"theResult", "=", "testResult"}], ",", "\[IndentingNewLine]", 
         RowBox[{"theResult", "=", 
          RowBox[{"testResult", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"remove", " ", "memoized", " ", "values"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"ClearAll", "[", "detU", "]"}], ";", "\[IndentingNewLine]", 
       "theResult"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[1172]:=",ExpressionUUID->"d7ce1dd1-f605-4de1-a2f3-23db25cf218a"],

Cell["\<\
Minimal polynomial is important when deciding if MV is diagonalizable or not. \
The MV is diagonalizable, iff its minimal polynomial has no multiple roots \
(is made of linear factors only). In other words it is SquareFree.\
\>", "Text",ExpressionUUID->"34f70a63-a954-4ce0-b9ff-90db6a2fb653"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMinimalPolynomial", "::", "matrixMethod"}], "=", 
   "\"\<Method->\\\"Matrix\\\" selected. Primitive function form Mathworld \
will be used. Much more powerfull function \
ResourceFunction[\\\"MatrixMinimalPolynomial\\\"] is available from \
Mathematica function repository.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMinimalPolynomial", "::", "quaternionicCoefficients"}], "=", 
   "\"\<Multivector `1` has quaternionic coefficients. Don't know how to \
proceed with the MV. Try to convert MV to matrix representation without \
quaternionic entries (not suitable for non-diagonalizable MV). The \
computations will be unpredictable and answer wrong.\>\""}], ";"}]}], "Input",\

 CellLabel->
  "In[1173]:=",ExpressionUUID->"c543a897-34ab-4514-9622-99ff9eedede6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaMinimalPolynomial", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<Automatic\>\""}], ",", 
      RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "case", " ", "of", " ", "option", " ", "which", " ", "may", " ", "have", 
    " ", "suboptions"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionMinimalPolynomial", "[", "\"\<Method\>\"", "]"}], "=", 
   RowBox[{"Alternatives", "[", 
    RowBox[{
    "Automatic", ",", "\"\<\\\"Automatic\\\"\>\"", ",", "\"\<\\\"GA\\\"\>\"", 
     ",", "\"\<\\\"Matrix\\\"\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionMinimalPolynomial", "[", "\"\<Quiet\>\"", "]"}], ":=", 
    
    RowBox[{"Alternatives", "[", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"case", " ", "of", " ", "simple", " ", "option"}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionMinimalPolynomial", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<Automatic\>\"", "|", "Automatic", "|", "\"\<GA\>\"", "|", 
      "\"\<Matrix\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionMinimalPolynomial", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionMinimalPolynomial", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1175]:=",ExpressionUUID->"86a103a3-bb5e-4619-8130-8c353af86727"],

Cell[TextData[{
 "The function MatrixMinimalPolynomial is taken from \
https://mathworld.wolfram.com/MatrixMinimalPolynomial.html. Much better \
function can be found in \
https://resources.wolframcloud.com/FunctionRepository/resources/\
MatrixMinimalPolynomial . Call as ",
 Cell[BoxData[
  RowBox[{"ResourceFunction", "[", "\"\<MatrixMinimalPolynomial\>\"", "]"}]], 
  "Input",
  CellChangeTimes->{{3.8608293238462057`*^9, 3.860829327307953*^9}, {
   3.860829385749505*^9, 3.8608294141128483`*^9}},ExpressionUUID->
  "a2a7c3ca-96c6-4ffd-a292-6e131bb63818"]
}], "Text",ExpressionUUID->"9a066bfc-ba84-41f8-91b4-5deb5b308fa8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matrixMinimalPolynomialPrimitive", "[", 
   RowBox[{
    RowBox[{"a_List", "?", "MatrixQ"}], ",", "x_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"n", "=", "1"}], ",", 
      RowBox[{"qu", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"mnm", "=", 
       RowBox[{"{", 
        RowBox[{"Flatten", "[", 
         RowBox[{"IdentityMatrix", "[", 
          RowBox[{"Length", "[", "a", "]"}], "]"}], "]"}], "}"}]}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "qu", "]"}], "==", "0"}], ",", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"mnm", ",", 
          RowBox[{"Flatten", "[", 
           RowBox[{"MatrixPower", "[", 
            RowBox[{"a", ",", "n"}], "]"}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Hope", " ", "that", " ", "Method"}], "->", 
          RowBox[{
          "\"\<OneStepRowReduction\>\"", " ", "will", " ", "work", " ", 
           "better", " ", "with", " ", "radicals"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"qu", "=", 
         RowBox[{"NullSpace", "[", 
          RowBox[{
           RowBox[{"Transpose", "[", "mnm", "]"}], ",", 
           RowBox[{"Method", "->", "\"\<OneStepRowReduction\>\""}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"n", "++"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"First", "[", "qu", "]"}], ".", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"x", "^", "i"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", 
          RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}]}]}], "]"}]}]], "Input",
 CellLabel->
  "In[1181]:=",ExpressionUUID->"70c6cef6-f8d8-4b03-9635-9218b45474cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaMinimalPolynomial", "[", 
   RowBox[{"expr_", ",", "var_Symbol", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theOption", ",", 
      RowBox[{"theAlg", "=", 
       RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
      RowBox[{"exprExpanded", "=", 
       RowBox[{"gaPE", "[", "expr", "]"}]}], ",", 
      RowBox[{"nullSpace", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"nullSpaceCandidateVectors", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"lastMVProduct", "=", "1"}], ",", "nullSpaceCoeffs", ",", 
      "detectedMatrixRepresentation", ",", 
      RowBox[{"restoreMatrixRepresentation", "=", "False"}], ",", "answer"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gaMinimalPolynomial", ",", "#", ",", "theOption"}], "}"}], 
         ",", 
         RowBox[{
          RowBox[{"gaOptionCheck", "[", "testOptionMinimalPolynomial", "]"}], 
          "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              ",", 
              RowBox[{"Automatic", "\[Rule]", "\"\<Automatic\>\""}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "[", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "check", " ", "if", " ", "main", " ", "options", " ", "obtained", " ", 
       "values"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
        "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"Options", "[", "gaMinimalPolynomial", "]"}]}], ")"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
        "\"\<Automatic\>\""}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
        "\"\<GA\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "If", " ", "MV", " ", "has", " ", "quaternionic", " ", 
        "coefficients"}], ",", " ", 
       RowBox[{"we", " ", 
        RowBox[{"don", "'"}], "t", " ", "know", " ", "how", " ", "to", " ", 
        "compute", " ", "minimal", " ", "polynomial"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Not", "[", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}], "]"}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaMinimalPolynomial", "::", "quaternionicCoefficients"}], 
         ",", "expr"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Automatic\>\"", "|", "\"\<GA\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"\"\<Using Method=\>\"", ",", 
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "}"}], 
           "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "use", " ", "vector", " ", "made", " ", "of", " ", "MV", " ", 
          "coefficients"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"nullSpace", "===", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{
           RowBox[{"lastMVProduct", "=", 
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"lastMVProduct", ",", "exprExpanded"}], "]"}], "]"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"nullSpaceCandidateVectors", ",", 
             RowBox[{
             "gaComponentCoefficientList", "[", "lastMVProduct", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Vector list for NullSpace\>\"", ",", 
                "nullSpaceCandidateVectors"}], "}"}], "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"Hope", " ", "that", " ", "Method"}], "->", 
             RowBox[{
             "\"\<OneStepRowReduction\>\"", " ", "will", " ", "work", " ", 
              "better", " ", "with", " ", "radicals"}]}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"nullSpace", "=", 
            RowBox[{"NullSpace", "[", 
             RowBox[{
              RowBox[{"Transpose", "[", "nullSpaceCandidateVectors", "]"}], 
              ",", 
              RowBox[{"Method", "->", "\"\<OneStepRowReduction\>\""}]}], 
             "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nullSpaceCoeffs", "=", 
         RowBox[{"First", "[", "nullSpace", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Null space weights are:\>\"", ",", "nullSpaceCoeffs"}], 
            "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"nullSpaceCoeffs", ".", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"var", "^", "i"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "0", ",", 
             RowBox[{
              RowBox[{"Length", "[", "nullSpaceCoeffs", "]"}], "-", "1"}]}], 
            "}"}]}], "]"}]}]}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", "\"\<Matrix\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"\"\<Using Method=\>\"", ",", 
             RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "}"}], 
           "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "use", " ", "matrix", " ", "representations", " ", "and", " ", 
           "function", " ", "from", " ", 
           RowBox[{"Mathwolrld", ":", " ", "https", ":"}]}], "//", 
          RowBox[{
           RowBox[{"mathworld", ".", "wolfram", ".", "com"}], "/", 
           RowBox[{"MatrixMinimalPolynomial", ".", "html"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "much", " ", "better", " ", "function", " ", "can", " ", "be", " ", 
           "found", " ", "in", " ", 
           RowBox[{"https", ":"}]}], "//", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"resources", ".", "wolframcloud", ".", "com"}], "/", 
             "FunctionRepository"}], "/", "resources"}], "/", 
           "MatrixMinimalPolynomial"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaMatrixRepresentation", "[", "theAlg", "]"}], "]"}], "===",
              "gaMatrixRepresentation"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"gaMatrixRepresentation", "[", "theAlg", "]"}], ",", 
               "\"\<Quaternion\>\""}], "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "save", " ", "detected", " ", "matrix", " ", "representation", " ",
             "in", " ", "order", " ", "to", " ", "restore", " ", "later"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"gaMatrixRepresentation", "[", "theAlg", "]"}], ",", 
                 "\"\<Quaternion\>\""}], "]"}]}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{"detectedMatrixRepresentation", "=", 
               RowBox[{"gaMatrixRepresentation", "[", "theAlg", "]"}]}], ";", 
              
              RowBox[{"restoreMatrixRepresentation", "=", "True"}]}]}], "]"}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"Off", "[", 
            RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"gaDefineMatrixRepresentation", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{"Method", " ", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<TensorProduct\>\"", ",", 
                RowBox[{"ElementaryRepresentations", "->", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                   RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                   RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                   RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<IPauli[3,1]\>\""}], ",", 
                   RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"On", "[", 
            RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"printDetails", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"\"\<Matrix representatons are\>\"", ",", 
             RowBox[{"MapAt", "[", 
              RowBox[{"MatrixForm", ",", 
               RowBox[{"gaMatrixRepresentation", "[", "theAlg", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}], "}"}], "}"}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
          RowBox[{"Message", "[", 
           RowBox[{"gaMinimalPolynomial", "::", "matrixMethod"}], "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{"matrixMinimalPolynomialPrimitive", "[", 
          RowBox[{
           RowBox[{"gaToMatrixRepresentation", "[", 
            RowBox[{"exprExpanded", ",", "theAlg"}], "]"}], ",", "var"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "restore", " ", "detected", " ", "Matrix", " ", "representation"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"restoreMatrixRepresentation", ",", " ", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "theAlg", "]"}], "=", 
           "detectedMatrixRepresentation"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "switch"}], " ", "*)"}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[1182]:=",ExpressionUUID->"8317240c-44f3-4026-8244-5a773c19913a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Random non-diagonalizable MV generation and diagonalizability test methods"
}], "Subsubsection",ExpressionUUID->"39131aca-cd52-4547-ba78-1a1d1f0c6c7e"],

Cell["\<\
One more criterion on diagonalizability: The matrix is diagonalizable in an \
orthonormal basis if and only if it is normal that is, if and only if it \
commutes with its conjugate transpose. That is the constraint for the inverse \
of X to be its ConjugateTranspose. This criterion is too restrictive for MV \
and in general not useful. Replaced by Mathematica\[CloseCurlyQuote]s \
DiagonalizableMatrixQ[ ]\
\>", "Text",ExpressionUUID->"9ada5e68-285d-47f8-9de4-aa2f1b2b835c"],

Cell["\<\
The predicate, which test if given MV is diagonalizable. Based on the \
criterion, that minimal polynomial of diagonalizable MV can't have multiple \
roots (all factors are linear). Factorization is used in \
\[OpenCurlyDoubleQuote]MinimalPolynomial\[CloseCurlyDoubleQuote] , because \
SquareFree[ ] is unable to correctly decide if extension is complicated.   \
The experimental method \
\[OpenCurlyDoubleQuote]RegularCharacteristicPolynomial\[CloseCurlyDoubleQuote]\
 is implemented once we noted that denominator at basis elements (after \
canceling same factors of numerator and denominator) of formula for function \
of MV turns into zero only for nondiagonalizable MV. Therefore the method do \
not seek linear dependency of powers of MV, but instead, checks for \
denominator zeroes. From computation point of view we still have to compute \
all powers of MV (in worst case), so no much progress.  The implementation \
here is not optimized, for the moment it is just attempt \
\[OpenCurlyDoubleQuote]to prove of concept\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"f8f6792b-a4fc-4abc-a4fc-7e0856b1fed4"],

Cell["\<\
Try to improve the zero denominator test by trying to catch case when \
numerator is not zero and denominator becomes zero. For diagonalizable MV \
with multiple roots all cases should be tested.\
\>", "Text",ExpressionUUID->"107f9e9f-2184-4dcf-9f00-eef688e089c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"numeratorNotZeroDenominatorZeroQ", "::", "invalid"}], "=", 
   "\"\<Invalid case \
{PossibleZeroQ[numerator],PossibleZeroQ[denominator]}={True,True} in `1`, \
which means that numerator and denominator wasn't properly canceled.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numeratorNotZeroDenominatorZeroQ", "[", 
     RowBox[{"numerator_", ",", "denominator_", ",", "roots_"}], "]"}], ":=", 
    
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"rootsToCheck", "=", 
         RowBox[{"First", "/@", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"roots", ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "#", "]"}], "<", "2"}], "&"}], 
              ")"}]}]}], "]"}]}]}], ",", "theroot", ",", "test", ",", "arg"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Catch", "[", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"Collect", "[", 
          RowBox[{"numerator", ",", "_bs", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "theroot", "}"}], ",", 
               RowBox[{
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "test", "}"}], ",", 
                  RowBox[{"Switch", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"PossibleZeroQ", "[", 
                    RowBox[{
                    RowBox[{"test", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "theroot"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"PossibleZeroQ", "[", 
                    RowBox[{
                    RowBox[{"test", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "theroot"}], "}"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "False"}], "}"}], ",", "True", ",", 
                    
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], ",", "True", ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}], ",", 
                    RowBox[{"Throw", "[", "False", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "True"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{
                    "numeratorNotZeroDenominatorZeroQ", "::", "invalid"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Numerator", "[", "test", "]"}], ",", 
                    RowBox[{"Denominator", "[", "test", "]"}]}], "}"}]}], 
                    "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], "]"}], "[", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"PossibleZeroQ", "[", 
                   RowBox[{"#", "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "theroot"}], "}"}]}], 
                   "]"}], ",", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "arg", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Numerator", "[", "arg", "]"}], ",", 
                    RowBox[{"Denominator", "[", "arg", "]"}]}], "}"}]}], 
                    "]"}], "[", 
                   RowBox[{"Cancel", "[", 
                    RowBox[{"#", "/", "denominator"}], "]"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "denominator"}], "}"}]}], "]"}], "]"}]}],
               "]"}], "/@", "rootsToCheck"}], "&"}]}], "]"}], ",", "False"}], 
        "]"}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[1183]:=",ExpressionUUID->"11bf145b-47c9-413a-add6-c35083224044"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"diagonalizableExperimentalCharPoly", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"quiet_", ":", "False"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"theAlg", "=", 
         RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
        RowBox[{"exprExpanded", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ",", "vectorSpaceDim", 
        ",", "dim", ",", "m", ",", "k", ",", "ch", ",", "c1Rules", ",", 
        "theGenericDenominator", ",", "theGenericNumeratorTruncated", ",", 
        "theMVPowersTruncated", ",", "rootsOfChPoly", ",", 
        "rootMultiplicityList", ",", "theFormulaCoordinateFree"}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dim", "=", 
        RowBox[{"gaDimensionOfRepresentation", "[", "theAlg", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"c1Rules", "=", 
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"ch", "[", 
                RowBox[{"1", ",", "k"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", "dim"}], "}"}]}], "]"}], ",", 
             RowBox[{"gaCharacteristicPolynomial", "[", 
              RowBox[{"exprExpanded", ",", "All", ",", 
               RowBox[{"Quiet", "->", "True"}]}], "]"}]}], "]"}], "]"}], ",", 
          
          RowBox[{
           RowBox[{"ch", "[", 
            RowBox[{"1", ",", "0"}], "]"}], "->", 
           RowBox[{"-", "1"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"printDetails", "[", "]"}], " ", "automatically", " ", 
          "inverts", " ", "quit", " ", "value"}], ",", " ", 
         RowBox[{"therefore", " ", "here", " ", 
          RowBox[{"is", " ", "!"}], "quiet"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"Format", "[", 
            RowBox[{
             TagBox[
              RowBox[{"ch", "[", 
               RowBox[{"1", ",", "b_"}], "]"}],
              FullForm], ",", "StandardForm"}], "]"}], ":=", 
           RowBox[{"DisplayForm", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"SubscriptBox", "[", 
                RowBox[{"\"\<C\>\"", ",", 
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<(\>\"", ",", 
                    RowBox[{"ToString", "[", "b", "]"}], ",", "\"\<)\>\""}], 
                   "}"}], "]"}]}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"\"\<(\>\"", ",", "\"\<A\>\"", ",", "\"\<)\>\""}], 
                 "}"}], "]"}]}], "}"}], "]"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"GeometricAlgebra`p`printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<Characteristic coefficients of MV, k=1,...d are \
\!\(\*SubscriptBox[\(C\), \((k)\)]\)(A)=\>\"", ",", "c1Rules"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Characteristic polynomial:\>\"", ",", 
             RowBox[{
              RowBox[{"Sum", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ch", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
                  RowBox[{"\[FormalLambda]", "^", "i"}]}], ")"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.", 
              "c1Rules"}]}], "}"}]}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rootsOfChPoly", "=", 
        RowBox[{"Split", "[", 
         RowBox[{"SolveValues", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Sum", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ch", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
                  RowBox[{"\[FormalLambda]", "^", "i"}]}], ")"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.", 
              "c1Rules"}], ")"}], "==", "0"}], ",", "\[FormalLambda]"}], 
          "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"rootMultiplicityList", "=", 
        RowBox[{"Length", "/@", "rootsOfChPoly"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"short", "/", "long"}], " ", 
          RowBox[{"cycle", ":", " ", 
           RowBox[{
           "if", " ", "characteristic", " ", "polynomial", " ", "has", " ", 
            "no", " ", "repeated", " ", "root"}]}]}], ",", " ", 
         RowBox[{"the", " ", "MV", " ", "is", " ", "diagonalizable"}]}], " ", 
        "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", "rootMultiplicityList", "]"}], "===", 
          RowBox[{"{", "1", "}"}]}], ",", "True", ",", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{"otherwise", " ", "apply", " ", "new", " ", "criteria"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theGenericDenominator", "=", 
           RowBox[{
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"\[FormalLambda]", "^", 
                RowBox[{"(", "k", ")"}]}], 
               RowBox[{"(", 
                RowBox[{"k", "+", "1"}], ")"}], "*", 
               RowBox[{"ch", "[", 
                RowBox[{"1", ",", 
                 RowBox[{"(", 
                  RowBox[{"dim", "-", "k", "-", "1"}], ")"}]}], "]"}]}], ",", 
              
              RowBox[{"{", 
               RowBox[{"k", ",", "0", ",", 
                RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}], "/.", 
            "c1Rules"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"GeometricAlgebra`p`printDetails", "[", 
           RowBox[{"quiet", ",", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Generic denominator polynomial:\>\"", ",", 
               "theGenericDenominator"}], "}"}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"theMVPowersTruncated", "=", 
           RowBox[{"Rest", "[", 
            RowBox[{
             RowBox[{"FoldList", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaProductPairExpand", "[", 
                 RowBox[{"GeometricProduct", "[", "##", "]"}], "]"}], "&"}], 
               ",", 
               RowBox[{"Flatten", "[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{"exprExpanded", ",", 
                    RowBox[{"{", 
                    RowBox[{"dim", "-", "1"}], "}"}]}], "]"}]}], "}"}], 
                "]"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{"GeometricAlgebra`p`singleton", "\[Rule]", "Identity"}],
               "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"theGenericNumeratorTruncated", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"\[FormalLambda]", "^", "k"}], " ", "*", 
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "k", "-", "m", "-", "1"}]}], "]"}]}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"dim", "-", "m", "-", "1"}]}], "}"}]}], "]"}], "/.",
                  "c1Rules"}], ")"}], ",", 
               RowBox[{"{", 
                RowBox[{"m", ",", "1", ",", 
                 RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}], ")"}], ".", 
            "theMVPowersTruncated"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"GeometricAlgebra`p`printDetails", "[", 
           RowBox[{"quiet", ",", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Abstract term sum \
d0*A^0+d1*A^1+d2*A^2+d3*A^3+...+d*A^(d-1) with replaced coefficients:\>\"", 
               ",", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalLambda]", "^", "k"}], " ", "*", 
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "k", "-", "m", "-", "1"}]}], "]"}]}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"dim", "-", "m", "-", "1"}]}], "}"}]}], "]"}], "/.",
                     "c1Rules"}], ")"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"m", ",", "0", ",", 
                    RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}], ".", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"\[FormalCapitalA]", "^", "i"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "0", ",", 
                    RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}]}]}], "}"}], 
             "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "the", " ", "generic", " ", "rational", " ", "function", " ", 
            "cannot", " ", "supply", " ", "the", " ", 
            RowBox[{"criteria", ":", " ", 
             RowBox[{
             "we", " ", "need", " ", "to", " ", "compute", " ", "the", " ", 
              "rational", " ", "function", " ", "at", " ", "each", " ", 
              "basis", " ", "element"}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Cancel", " ", "is", " ", "most", " ", "important", " ", "here"}],
             ",", " ", 
            RowBox[{
            "since", " ", "it", " ", "allows", " ", "to", " ", "cancel", " ", 
             "zero", " ", "factors", " ", "in", " ", "the", " ", "numerator", 
             " ", "and", " ", 
             RowBox[{"denominator", " ", "!"}]}]}], " ", "*)"}], " ", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"theFormulaCoordinateFree", "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"List", "@@", 
                RowBox[{"(", 
                 RowBox[{"Collect", "[", 
                  RowBox[{
                   RowBox[{
                   "theGenericNumeratorTruncated", "/", 
                    "theGenericDenominator"}], ",", "_bs", ",", "Cancel"}], 
                  "]"}], ")"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"bs", "[", "__", "]"}], "->", "1"}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "do", " ", "not", " ", "try", " ", "to", " ", "find", " ", 
               "particular", " ", "zero"}], ",", " ", 
              RowBox[{
              "simply", " ", "multiply", " ", "all", " ", "and", " ", "check",
                " ", "if", " ", "the", " ", "result", " ", "is", " ", 
               "zero"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
            RowBox[{"Not", "[", 
             RowBox[{"PossibleZeroQ", "[", 
              RowBox[{"Times", "@@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Product", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", 
                    RowBox[{"First", "/@", "rootsOfChPoly"}]}], "}"}]}], 
                   "]"}], "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"Denominator", "/@", "theFormulaCoordinateFree"}], 
                  ")"}]}], ")"}]}], "]"}], "]"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "the", " ", "commented", " ", "function", " ", "below", " ", 
            "checks", " ", "zero", " ", "at", " ", "every", " ", "basis", " ", 
            RowBox[{"element", ".", " ", "It"}], " ", "is", " ", "more", " ", 
            "correct", " ", "but", " ", "slower"}], "*)"}], " ", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"numeratorNotZeroDenominatorZeroQ", "[", 
            RowBox[{
            "theGenericNumeratorTruncated", ",", "theGenericDenominator", ",",
              "rootsOfChPoly"}], "]"}], "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"theFormulaCoordinateFree", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", 
              RowBox[{"(", 
               RowBox[{"Collect", "[", 
                RowBox[{
                 RowBox[{
                 "theGenericNumeratorTruncated", "/", 
                  "theGenericDenominator"}], ",", "_bs", ",", "Cancel"}], 
                "]"}], ")"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"bs", "[", "__", "]"}], "->", "1"}], "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "do", " ", "not", " ", "try", " ", "to", " ", "find", " ", 
             "particular", " ", "zero"}], ",", " ", 
            RowBox[{
            "simply", " ", "multiply", " ", "all", " ", "and", " ", "check", 
             " ", "if", " ", "the", " ", "result", " ", "is", " ", "zero"}]}],
            " ", "*)"}], " ", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"{", 
            RowBox[{"Collect", "[", 
             RowBox[{
              RowBox[{
              "theGenericNumeratorTruncated", "/", "theGenericDenominator"}], 
              ",", "_bs", ",", "Cancel"}], "]"}], "}"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Not", "[", 
           RowBox[{"PossibleZeroQ", "[", 
            RowBox[{"Expand", "[", 
             RowBox[{"Times", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Product", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", 
                    RowBox[{"First", "/@", "rootsOfChPoly"}]}], "}"}]}], 
                  "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"Denominator", "/@", "theFormulaCoordinateFree"}], 
                 ")"}]}], ")"}]}], "]"}], "]"}], "]"}]}]}], " ", 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[1185]:=",ExpressionUUID->"bc8d55cb-7c40-4b77-bc87-3a1852a4c115"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDiagonalizableQ", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
      RowBox[{"Method", "->", "\"\<MinimalPolynomial\>\""}]}], "}"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDiagonalizableQ", "[", "\"\<Quiet\>\"", "]"}], "=", 
   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionDiagonalizableQ", "[", "\"\<Method\>\"", "]"}], "=", 
    "\"\<RegularCharacteristicPolynomial|MinimalPolynomial|\
DiagonalizableMatrixQ\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDiagonalizableQ", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionDiagonalizableQ", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<DiagonalizableMatrixQ\>\"", "|", "\"\<MinimalPolynomial\>\"", "|", 
      "\"\<RegularCharacteristicPolynomial\>\""}]}], "]"}]}], ";"}]}], "Input",\

 CellLabel->
  "In[1186]:=",ExpressionUUID->"4f11ef07-f534-49c3-b8c9-6ab1fb3d24a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDiagonalizableQ", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", "x", ",", 
       RowBox[{"alg", "=", 
        RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
       "detectedMatrixRepresentation", ",", 
       RowBox[{"restoreMatrixRepresentation", "=", "False"}], ",", "answer"}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaDiagonalizableQ", ",", "#", ",", "theOption"}], "}"}], 
          ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionDiagonalizableQ", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Method", "/.", 
           RowBox[{"Options", "[", "gaDiagonalizableQ", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaDiagonalizableQ", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Diagonalizability is checked using Method->\>\"", ",", 
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "}"}], 
         "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
        "\[IndentingNewLine]", "\"\<RegularCharacteristicPolynomial\>\"", ",", 
        RowBox[{"diagonalizableExperimentalCharPoly", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "\"\<MinimalPolynomial\>\"", ",", 
        RowBox[{"SquareFreeQ", "[", 
         RowBox[{"Factor", "[", 
          RowBox[{
           RowBox[{"gaMinimalPolynomial", "[", 
            RowBox[{"expr", ",", "x"}], "]"}], ",", 
           RowBox[{"Extension", "\[Rule]", "Automatic"}]}], "]"}], "]"}], ",",
         "\[IndentingNewLine]", "\"\<DiagonalizableMatrixQ\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "]"}], "===",
              "gaMatrixRepresentation"}], ")"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", "  ", 
            RowBox[{
            "generate", " ", "matrix", " ", "representation", " ", "if", " ", 
             "absent"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Off", "[", 
             RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "]"}],
             ";", "\[IndentingNewLine]", 
            RowBox[{"gaDefineMatrixRepresentation", "[", 
             RowBox[{"alg", ",", 
              RowBox[{"Method", "->", 
               RowBox[{"{", 
                RowBox[{"\"\<TensorProduct\>\"", ",", 
                 RowBox[{"ElementaryRepresentations", "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<IPauli[1,2]\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "->", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"On", "[", 
             RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"detectedMatrixRepresentation", "=", 
             RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"restoreMatrixRepresentation", "=", "True"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printDetails", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"\"\<Using matrix representatons:\>\"", ",", 
              RowBox[{"MapAt", "[", 
               RowBox[{"MatrixForm", ",", 
                RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}], "}"}], "}"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"DiagonalizableMatrixQ", "[", 
           RowBox[{"gaToMatrixRepresentation", "[", 
            RowBox[{"expr", ",", "alg"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Restore", " ", "matrix", " ", "representation", " ", "if", " ", 
           "any"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"restoreMatrixRepresentation", ",", 
           RowBox[{
            RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "=", 
            "detectedMatrixRepresentation"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "answer"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1191]:=",ExpressionUUID->"d23ef709-aaa2-49f3-b212-8db62977295f"],

Cell["\<\
Start from Jordan decomposition with nontrivial Jordan block, then apply \
arbitrary nonsingular transformation and convert back to MV.\
\>", "Text",
 CellChangeTimes->{{3.872330279743017*^9, 3.872330300915202*^9}, {
  3.8723304012714663`*^9, 3.87233042953154*^9}, {3.873163814550598*^9, 
  3.873163815421687*^9}},ExpressionUUID->"b059d313-a2ca-4808-8ed1-\
eaf4c47a5ae7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"randomJordanBlock", "[", 
    RowBox[{"dim_Integer", ",", 
     RowBox[{"range_", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "10"}], ",", "10"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{"SparseArray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Band", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], "]"}], "\[Rule]", 
          RowBox[{"RandomInteger", "[", "range", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Band", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], "]"}], "\[Rule]", "1"}]}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}], "]"}], "/;", 
    RowBox[{"dim", ">", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomJordanBlock", "[", 
    RowBox[{"1", ",", 
     RowBox[{"range_", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "10"}], ",", "10"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"RandomInteger", "[", "range", "]"}]}], ";", 
  RowBox[{
   RowBox[{"transformationBlock", "[", 
    RowBox[{"dim_Integer", ",", 
     RowBox[{"range_", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "10"}], ",", "10"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"range", ",", 
       RowBox[{"dim", "^", "2"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.872307132991085*^9, 3.872307155900145*^9}, {
  3.872307220763324*^9, 3.872307233317704*^9}, {3.872307745587879*^9, 
  3.87230778592174*^9}, {3.872307833378889*^9, 3.872307899856687*^9}, {
  3.872308795367762*^9, 3.872308805235984*^9}, {3.8723093035735397`*^9, 
  3.872309305669806*^9}, {3.872309552137393*^9, 3.872309554793316*^9}, {
  3.87231015228717*^9, 3.872310153735139*^9}, {3.872310854642215*^9, 
  3.872310899172318*^9}},
 CellLabel->
  "In[1192]:=",ExpressionUUID->"5c2fdc0e-be43-4a35-8eac-fd92e00e9062"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionRandomNonDiagonalizableMV", "[", "\"\<Method\>\"", "]"}], 
     "=", "\"\<Matrix \
(JordanForm->\\\"Random\\\"|_?MatrixQ,TransformationMatrix->\\\"Random\\\"|\\\
\"IdentityMatrix\\\"|_?MatrixQ) | Automatic ()\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Method\>\"", ",", "\"\<JordanForm\>\""}], "}"}], "]"}], 
     "=", 
     RowBox[{
     "\"\<Random\>\"", "|", 
      "\"\<explicit matrix of dimension given by \
gaDimensionOfMatrixRepresentation[alg]\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Method\>\"", ",", "\"\<TransformationMatrix\>\""}], "}"}],
       "]"}], "=", 
     RowBox[{
     "\"\<Random\>\"", "|", "\"\<IdenityMatrix\>\"", "|", 
      "\"\<explicit matrix of dimension given by \
gaDimensionOfMatrixRepresentation[alg]\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Method\>\"", ",", "\"\<TransformationMatrix\>\""}], 
        "}"}], "]"}], "=", 
      RowBox[{
      "\"\<Random\>\"", "|", 
       "\"\<explicit matrix or dimension given by \
gaDimensionOfMatrixRepresentation[alg]\>\""}]}], ";"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionRandomNonDiagonalizableMV", "[", "\"\<Quiet\>\"", "]"}], "=", 
     
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
     " ", "actual", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"\"\<Matrix\>\"", "|", "\"\<Automatic\>\""}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Matrix\>\"", ",", "___Rule"}], "}"}]}], "]"}], "&&", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"val", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Matrix\>\"", ",", "\"\<JordanForm\>\""}], "}"}], ",", 
       "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"\"\<Random\>\"", "|", 
        RowBox[{"_", "?", "MatrixQ"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Matrix\>\"", ",", "\"\<TransformationMatrix\>\""}], 
        "}"}], ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"\"\<Random\>\"", "|", "\"\<IdentityMatrix\>\"", "|", 
        RowBox[{"_", "?", "MatrixQ"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionRandomNonDiagonalizableMV", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
    ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "refuse", " ", "to", " ", "accept", " ", "any", " ", "not", " ", 
     "explicitly", " ", "listed", " ", "suboptions"}], " ", "*)"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.8735130683462152`*^9, 3.873513393391198*^9}, {
  3.873513448122278*^9, 3.87351354377806*^9}, {3.873513582196188*^9, 
  3.873513595875266*^9}, {3.873513640642531*^9, 3.8735137013819227`*^9}, {
  3.873513781533021*^9, 3.873513784846259*^9}, {3.873535396106103*^9, 
  3.873535483121064*^9}, {3.873536330043708*^9, 3.873536343048229*^9}, {
  3.8735363738738947`*^9, 3.873536430237698*^9}, {3.873540648492786*^9, 
  3.8735406970467873`*^9}},
 CellLabel->
  "In[1194]:=",ExpressionUUID->"a56881a1-9453-452d-9824-f272214fc514"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomNonDiagonalizableMV", "::", "zerodeterminant"}], "=", 
   "\"\<Generated or provided transformation matrix `1` is not invertible. \
Will use identity transformation. Run function once more in the case your \
generate random transformation. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomNonDiagonalizableMV", "::", "dimension"}], "=", 
   "\"\<The provided matrix `1` is not of required dimension `2`.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaRandomNonDiagonalizableMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"Method", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<Matrix\>\"", ",", 
        RowBox[{"JordanForm", "->", "\"\<Random\>\""}], ",", 
        RowBox[{"TransformationMatrix", "->", "\"\<Random\>\""}]}], "}"}]}]}],
     "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.873512826167534*^9, 3.873513053496176*^9}, {
  3.873535518669018*^9, 3.873535611330538*^9}, {3.873539908623582*^9, 
  3.8735399166465597`*^9}, {3.873539956649475*^9, 3.873540077309455*^9}, {
  3.87455058041144*^9, 3.874550597532239*^9}},
 CellLabel->
  "In[1204]:=",ExpressionUUID->"5d9add77-aa7f-4cb2-a042-03afd0d64c2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaRandomNonDiagonalizableMV", "[", 
   RowBox[{"alg_Cl", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theOption", ",", 
      RowBox[{"dimMR", "=", 
       RowBox[{"gaDimensionOfMatrixRepresentation", "[", 
        RowBox[{"alg", ",", 
         RowBox[{"OutputForm", "->", "\"\<DimensionOnly\>\""}]}], "]"}]}], 
      ",", "idMatrix", ",", "blockMatrixList", ",", "blockMatrixListLength", 
      ",", "jordanFactor", ",", "transformationFactorNoTest", ",", 
      "transformationFactor", ",", "detectedMatrixRepresentation", ",", 
      RowBox[{"restoreMatrixRepresentation", "=", "False"}], ",", "answer"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gaRandomNonDiagonalizableMV", ",", "#", ",", "theOption"}],
           "}"}], ",", 
         RowBox[{
          RowBox[{
          "gaOptionCheck", "[", "testOptionRandomNonDiagonalizableMV", "]"}], 
          "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "[", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Method", "/.", 
          RowBox[{"Options", "[", "gaRandomNonDiagonalizableMV", "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"JordanForm", "/.", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"Options", "[", "gaRandomNonDiagonalizableMV", "]"}]}], 
            ",", "_String"}], "]"}]}], ")"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], "=", 
        
        RowBox[{"(", 
         RowBox[{"TransformationMatrix", "/.", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"Options", "[", "gaRandomNonDiagonalizableMV", "]"}]}], 
            ",", "_String"}], "]"}]}], ")"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"Options", "[", "gaRandomNonDiagonalizableMV", "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "check", " ", "if", " ", "suboption", " ", "values", " ", "were", " ", 
        "defined"}], ",", " ", 
       RowBox[{"if", " ", "not", " ", "set", " ", "defaults"}]}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], "=", 
        "\"\<Random\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], "=", 
        "\"\<Random\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<Matrix\>\"", "|", "\"\<Automatic\>\"", "|", "Automatic", "|", 
        RowBox[{"{", 
         RowBox[{"\"\<Matrix\>\"", ",", "___"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "method", " ", "is", " ", "based", " ", "on", " ", "nontrivial", " ", 
         "Jordan", " ", "matrix", " ", "form"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"_", "?", "MatrixQ"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], "]"}], "===", 
             RowBox[{"{", 
              RowBox[{"dimMR", ",", "dimMR"}], "}"}]}], ",", 
            RowBox[{"jordanFactor", "=", 
             RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaRandomNonDiagonalizableMV", "::", "dimension"}], 
               ",", 
               RowBox[{"theOption", "[", "\"\<JordanForm\>\"", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"dimMR", ",", "dimMR"}], "}"}]}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", "\"\<Random\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"blockMatrixList", "=", 
            RowBox[{"randomJordanBlock", "/@", 
             RowBox[{"RandomChoice", "[", 
              RowBox[{"Most", "[", 
               RowBox[{"IntegerPartitions", "[", "dimMR", "]"}], "]"}], 
              "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"blockMatrixListLength", "=", 
            RowBox[{"Length", "[", "blockMatrixList", "]"}]}], ";", 
           RowBox[{"idMatrix", "=", 
            RowBox[{"IdentityMatrix", "[", "blockMatrixListLength", "]"}]}], 
           ";", 
           RowBox[{"jordanFactor", "=", 
            RowBox[{"ArrayFlatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"idMatrix", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"1", "->", 
                  RowBox[{"blockMatrixList", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", "blockMatrixListLength"}], 
                "}"}]}], "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"_", "?", "MatrixQ"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MatrixQ", "[", 
              RowBox[{"theOption", "[", "\"\<TransformationMatrix\>\"", "]"}],
               "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Dimensions", "[", 
                 RowBox[{
                 "theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], 
                 "]"}], "===", 
                RowBox[{"{", 
                 RowBox[{"dimMR", ",", "dimMR"}], "}"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"transformationFactorNoTest", "=", 
                RowBox[{
                "theOption", "[", "\"\<TransformationMatrix\>\"", "]"}]}], 
               ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaRandomNonDiagonalizableMV", "::", "dimension"}], 
                  ",", 
                  RowBox[{
                  "theOption", "[", "\"\<TransformationMatrix\>\"", "]"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"dimMR", ",", "dimMR"}], "}"}]}], "]"}], ";", 
                RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", "\"\<Random\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"transformationFactorNoTest", "=", 
            RowBox[{"transformationBlock", "[", "dimMR", "]"}]}], ";", 
           "\[IndentingNewLine]", "\"\<IdentityMatrix\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"transformationFactorNoTest", "=", 
           RowBox[{"IdentityMatrix", "[", "dimMR", "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{"Print", "[", "\"\<Not implemented\>\"", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"PossibleZeroQ", "[", 
        RowBox[{"Det", "[", "transformationFactorNoTest", "]"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaRandomNonDiagonalizableMV", "::", "zerodeterminant"}], 
          ",", "transformationFactorNoTest"}], "]"}], ";", 
        RowBox[{"transformationFactor", "=", 
         RowBox[{"IdentityMatrix", "[", "dimMR", "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"transformationFactor", "=", "transformationFactorNoTest"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "]"}], "===", 
         "gaMatrixRepresentation"}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", "  ", 
        RowBox[{
        "generate", " ", "matrix", " ", "representation", " ", "if", " ", 
         "absent"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Off", "[", 
         RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "alg", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"On", "[", 
         RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"detectedMatrixRepresentation", "=", 
         RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"restoreMatrixRepresentation", "=", "True"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"\"\<Matrix representatons are\>\"", ",", 
          RowBox[{"MapAt", "[", 
           RowBox[{"MatrixForm", ",", 
            RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}], "}"}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"answer", "=", 
      RowBox[{"gaFromMatrixRepresentation", "[", 
       RowBox[{
        RowBox[{"transformationFactor", ".", "jordanFactor", ".", 
         RowBox[{"Inverse", "[", "transformationFactor", "]"}]}], ",", 
        "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Restore", " ", "matrix", " ", "representation", " ", "if", " ", 
       "any"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"restoreMatrixRepresentation", ",", 
       RowBox[{
        RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "=", 
        "detectedMatrixRepresentation"}]}], "]"}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[1207]:=",ExpressionUUID->"68a1269a-f754-4d34-9646-dc1f621e169d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Other multivector norms (Hermitian norm, etc... ) "
}], "Subsubsection",ExpressionUUID->"f5e4679a-51f2-4f30-a4a6-39a186a4006a"],

Cell[TextData[{
 "Implementation closely follows Staple, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". This functions calculate norm only if all multivectors are expanded in \
orthogonal base. ",
 StyleBox["Warning",
  FontColor->RGBColor[1, 0.5, 0.5]],
 " have we blocked Abs function when calculating ",
 StyleBox["Norm[ ]",
  FontWeight->"Bold"],
 ". If algebra is not real, then this do yield wrong result!!!."
}], "Text",ExpressionUUID->"a63eafb2-f5c5-4388-9bce-3aa6994c6dd3"],

Cell["\<\
There are many norms defined for  general Clifford algebras: 
1)Norm of coefficients,  
2) Norm of coefficients normalized (when coefficient norm is not zero)
3)gaNorm2ReverseSigned, where MV is multiplied by reversed MV and scalar part \
is taken 
4) gaNormReverseAbs, which is obtained from 3 by taking absolute value and \
then square root 
5) gaNorm2CliffordConjugateSigned, similar to 3, except that reverse is \
replaced by Clifford conjugate
6) gaNormCliffordConjugateAbs,  obtained from 5 in the same way as 4 (from 3)
7) gaNormHermitian \
\>", "Text",ExpressionUUID->"033eda36-7d45-4fef-82bd-9fab1b89348d"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["NormOfCoefficients[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaNormalize[ ]",
  FontWeight->"Bold"]
}], "Item",ExpressionUUID->"4cc22a17-6e08-4600-94b5-8895e582b4f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormOfCoefficients", "[", 
       RowBox[{"u_", ",", 
        RowBox[{"n_", ":", "2"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaComponentList", "[", "uexp", "]"}], "/.", 
            RowBox[{"_bs", "\[Rule]", "1"}]}], ",", "n"}], "]"}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1208]:=",ExpressionUUID->"d6ff4e1c-0345-46f4-ac37-67cf4d377f65"],

Cell["\<\
gaNormalize normalizes multivector if Norm is numeric and not equal 0. For 0 \
warn and normalize using gaNormOfCoefficients. This, for example apply to \
null vectors.\
\>", "Text",ExpressionUUID->"f56b90ca-9305-463d-b1cb-05676de050c4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "zeroNorm"}], "=", 
   "\"\<Warning. Multivector `1` has zero Norm. gaNormOfCoefficients[ ] will \
be used for normalization.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "symbolic"}], "=", 
   "\"\<Warning. Symbolic answer. Will remove Abs[] from final rezult.\>\""}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when computing norm `1` of MV \
`2`. Will take scalar part.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaNormalize", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Norm", "->", "\"\<gaNormReverseAbs\>\""}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1209]:=",ExpressionUUID->"d38c3062-cd4b-4bbd-be63-569b36c7b5cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionNormalize", "[", "\"\<Norm\>\"", "]"}], "=", 
     "\"\<\\\"gaNormReverseAbs\\\"|\\\"gaNormCliffordConjugateAbs\\\"|\\\"\
gaNormDeterminant\\\"|\\\"gaNormHermitian\\\"\>\""}], ";", 
    RowBox[{
     RowBox[{"testOptionNormalize", "[", "\"\<Quiet\>\"", "]"}], "=", 
     "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
     RowBox[{
     "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
      "for", " ", "each", " ", "suboption"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionNormalize", "[", 
      RowBox[{"\"\<Norm\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{
        "\"\<gaNormReverseAbs\>\"", ",", " ", 
         "\"\<gaNormCliffordConjugateAbs\>\"", ",", 
         "\"\<gaNormDeterminant\>\"", ",", "\"\<gaNormHermitian\>\""}], 
        "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionNormalize", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellLabel->
  "In[1214]:=",ExpressionUUID->"ca6a0f7b-34d3-4997-bfa0-db72f91ca664"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormalize", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", 
           RowBox[{
           "gaNormalize", ",", "gaNormReverseAbs", ",", 
            "gaNormCliffordConjugateAbs", ",", "gaNormDeterminant", ",", 
            "gaDeterminantOfMV", ",", "gaNormHermitian"}], "}"}], "]"}]}]}], 
       "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", "nsq", ",", "optsPass"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaNormalize", ",", "#", ",", "theOption"}], "}"}], ",", 
             RowBox[{
              RowBox[{"gaOptionCheck", "[", "testOptionNormalize", "]"}], "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaNormalize", "]"}]}], "]"}]}], "]"}],
            ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
           " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Norm\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Norm\>\"", "]"}], "=", 
            RowBox[{"Norm", "/.", 
             RowBox[{"Options", "[", "gaNormalize", "]"}]}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Quiet", "/.", 
              RowBox[{"Options", "[", "gaNormalize", "]"}]}], ")"}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "\"\<gaNormDeterminant\>\"", "}"}], ",", 
             RowBox[{"theOption", "[", "\"\<Norm\>\"", "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"optsPass", "=", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"{", "opts", "}"}], ",", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Options", "[", 
                 RowBox[{"ToExpression", "[", 
                  RowBox[{"theOption", "[", "\"\<Norm\>\"", "]"}], "]"}], 
                 "]"}], ",", 
                RowBox[{"Options", "[", "gaDeterminantOfMV", "]"}]}], "]"}]}],
              "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"optsPass", "=", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"{", "opts", "}"}], ",", 
              RowBox[{"Options", "[", 
               RowBox[{"ToExpression", "[", 
                RowBox[{"theOption", "[", "\"\<Norm\>\"", "]"}], "]"}], 
               "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{
            RowBox[{"ToExpression", "[", 
             RowBox[{"theOption", "[", "\"\<Norm\>\"", "]"}], "]"}], "[", 
            RowBox[{"expr", ",", 
             RowBox[{"Sequence", "@@", "optsPass"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"Switch", "[", 
            RowBox[{"nsq", ",", 
             RowBox[{"_", "?", "Positive"}], ",", 
             RowBox[{"expr", "/", "nsq"}], ",", 
             RowBox[{"_", "?", "Negative"}], ",", 
             RowBox[{"expr", "/", 
              RowBox[{"(", 
               RowBox[{"-", "nsq"}], ")"}]}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Equal", "[", 
                 RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaNormalize", "::", "zeroNorm"}], ",", "expr"}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"expr", "/", 
               RowBox[{"gaNormOfCoefficients", "[", "expr", "]"}]}]}], ",", 
             "_", ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormalize", "::", "unexpected"}], ",", "nsq"}], 
              "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "for", " ", "symbolic", " ", "answer", " ", "remove", " ", 
             "Abs"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{"gaNormalize", "::", "symbolic"}], "]"}]}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"nsq", "=!=", "0"}], ",", 
              RowBox[{"expr", "/", 
               RowBox[{"(", 
                RowBox[{"nsq", "/.", 
                 RowBox[{"{", 
                  RowBox[{"Abs", "\[Rule]", "Identity"}], "}"}]}], ")"}]}], 
              ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaNormalize", "::", "zeroNorm"}], ",", "expr"}], 
               "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[1217]:=",ExpressionUUID->"c7975247-3d58-421c-bcce-1b286d5a4ef6"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaNorm2ReverseSigned[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaNormReverseAbs[ ]",
  FontWeight->"Bold"]
}], "Item",ExpressionUUID->"7fd57813-76f4-4624-a0ef-9f010a40e535"],

Cell["The always working, thought non-optimal solution.", "Text",ExpressionUUID->"9cbf9e04-51c1-4680-9faa-42bbb7dc4750"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2ReverseSigned", "[", "expr_", "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", "expr", "]"}], ",", "expr"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1218]:=",ExpressionUUID->"5b066951-cbd9-40a6-8b8b-2ba5239821be"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by reversed multivector.\
\>", "Text",ExpressionUUID->"382de8fa-0b4e-46d2-acf0-849cacaf7801"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormReverseAbs", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormReverseAbs", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and reversed multivector.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaNormReverseAbs", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaVerify", "\[Rule]", "True"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionNormReverseAbs", "[", "\"\<gaVerify\>\"", "]"}], "=", 
    "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"if", " ", "option", " ", "has", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "test", " ", "function", " ", "should", " ", "be", " ", "defined", " ", 
     "for", " ", "each", " ", "suboption"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionNormReverseAbs", "[", 
     RowBox[{"\"\<gaVerify\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormReverseAbs", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", "gaNormReverseAbs", "}"}], "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"nsq", "=", 
           RowBox[{"gaPE", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", "expr", "]"}], "]"}]}]}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaNormReverseAbs", ",", "#", ",", "theOption"}], "}"}],
              ",", 
             RowBox[{
              RowBox[{"gaOptionCheck", "[", "testOptionNormReverseAbs", "]"}],
               "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
           " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "=", 
            RowBox[{"gaVerify", "/.", 
             RowBox[{"Options", "[", "gaNormReverseAbs", "]"}]}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"Switch", "[", 
            RowBox[{"nsq", ",", 
             RowBox[{"_", "?", "Positive"}], ",", 
             RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
             RowBox[{"_", "?", "Negative"}], ",", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"-", "nsq"}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Equal", "[", 
                 RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", 
             ",", "_", ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormReverseAbs", "::", "unexpected"}], ",", "nsq"}],
               "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{
                   RowBox[{"Expand", "[", "nsq", "]"}], ",", 
                   RowBox[{"bs", "|", "MV"}], ",", 
                   RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
                RowBox[{"Message", "[", 
                 RowBox[{"gaNormReverseAbs", "::", "nonscalar"}], "]"}]}], 
               "]"}]}], "]"}], ";", "\[IndentingNewLine]", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"Abs", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[1219]:=",ExpressionUUID->"a9e194d9-db80-4282-ad33-34ac121154fc"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaNorm2CliffordConjugateSigned[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaNormCliffordConjugateAbs[ ]",
  FontWeight->"Bold"]
}], "Item",ExpressionUUID->"6b585bd4-bcf6-4930-938e-b3ad9f37ee03"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2CliffordConjugateSigned", "[", "expr_", "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", "expr", "]"}], ",", "expr"}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1225]:=",ExpressionUUID->"c0b50bab-b314-4bee-9b70-b689f9e7bbbd"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by Clifford conjugated multivector.\
\>", "Text",ExpressionUUID->"f09509cc-5b23-4ded-a3b2-756166317ed3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormCliffordConjugateAbs", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormCliffordConjugateAbs", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and Clifford conjugate multivector.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaNormCliffordConjugateAbs", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaVerify", "\[Rule]", "True"}], "}"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormCliffordConjugateAbs", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", "gaNormCliffordConjugateAbs", "}"}], "]"}]}]}], "]"}], 
      ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theOption", ",", 
          RowBox[{"nsq", "=", 
           RowBox[{"gaPE", "[", 
            RowBox[{"gaNorm2CliffordConjugateSigned", "[", "expr", "]"}], 
            "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "gaNormCliffordConjugateAbs", ",", "#", ",", "theOption"}], 
              "}"}], ",", 
             RowBox[{
              RowBox[{"gaOptionCheck", "[", "testOptionNormReverseAbs", "]"}],
               "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "for", " ", "option", " ", "value", " ", "testing", " ", "we", " ", 
           "use", " ", "the", " ", 
           RowBox[{"testOptionNormReverseAbsfunction", " ", "!"}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
           " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "=", 
            RowBox[{"gaVerify", "/.", 
             RowBox[{
             "Options", "[", "gaNormCliffordConjugateAbs", "]"}]}]}]}], "]"}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"Switch", "[", 
            RowBox[{"nsq", ",", 
             RowBox[{"_", "?", "Positive"}], ",", 
             RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
             RowBox[{"_", "?", "Negative"}], ",", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"-", "nsq"}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Equal", "[", 
                 RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", 
             ",", "_", ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormCliffordConjugateAbs", "::", "unexpected"}], 
               ",", "nsq"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{
                   RowBox[{"Expand", "[", "nsq", "]"}], ",", 
                   RowBox[{"bs", "|", "MV"}], ",", 
                   RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
                RowBox[{"Message", "[", 
                 RowBox[{"gaNormCliffordConjugateAbs", "::", "nonscalar"}], 
                 "]"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"Abs", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[1226]:=",ExpressionUUID->"9c60d8a2-6960-42ec-818e-d2d8f685bd08"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaNormHermitian[ ]",
  FontWeight->"Bold"],
 " "
}], "Item",ExpressionUUID->"b7d090f9-7727-4901-936f-47cda74c93ee"],

Cell["\<\
HermitianNorm is calculated as up and down geometric product (applies to \
spinors)\
\>", "Text",ExpressionUUID->"47ae94ea-e54a-4bad-bde8-7c30c3d4bcf4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormHermitian", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and gaHermitianConjugate multivector.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaNormHermitian", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"gaVerify", "\[Rule]", "False"}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1230]:=",ExpressionUUID->"81104d6f-8d51-4074-ac69-a11b7d7cf551"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormHermitian", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", 
           RowBox[{"gaNormHermitian", ",", "gaHermitianConjugate"}], "}"}], 
          "]"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"theOption", ",", "hcn"}], "}"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaSetNamedOptionValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"gaNormHermitian", ",", "#", ",", "theOption"}], "}"}],
               ",", 
              RowBox[{
               RowBox[{
               "gaOptionCheck", "[", "testOptionNormReverseAbs", "]"}], "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                  "}"}]}], ")"}], "]"}], ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Flatten", "[", 
             RowBox[{"First", "/@", 
              RowBox[{"{", "opts", "}"}]}], "]"}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "for", " ", "option", " ", "value", " ", "testing", " ", "we", " ",
             "use", " ", "the", " ", 
            RowBox[{"testOptionNormReverseAbsfunction", " ", "!"}]}], "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "check", " ", "if", " ", "main", " ", "options", " ", "obtained", 
            " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "]"}], "===",
              "theOption"}], ",", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], "=", 
             RowBox[{"gaVerify", "/.", 
              RowBox[{"Options", "[", "gaNormHermitian", "]"}]}]}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"hcn", "=", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaIndexDown", "[", 
              RowBox[{"gaHermitianConjugate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"FilterRules", "[", 
                  RowBox[{
                   RowBox[{"{", "opts", "}"}], ",", 
                   RowBox[{"Options", "[", "gaHermitianConjugate", "]"}]}], 
                  "]"}]}]}], "]"}], "]"}], "\[GeometricProduct]", "expr"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaVerify\>\"", "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", "hcn", "]"}], ",", 
                 RowBox[{"bs", "|", "MV"}], ",", 
                 RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{"gaNormHermitian", "::", "nonscalar"}], "]"}]}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", "hcn"}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"Not", "[", 
        RowBox[{"MatrixQ", "[", "expr", "]"}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1232]:=",ExpressionUUID->"f2bfe04c-57de-4b26-8524-64e6182075d1"],

Cell["HermitianNorm for matrices acts differently", "Text",ExpressionUUID->"7f64cc47-0e6b-4c90-8277-f66c712868c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaNormHermitian", "[", 
   RowBox[{"expr_List", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaNormHermitian", ",", "gaComplexConjugate"}], "}"}], 
      "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"gaQuaternionicConjugate", "[", 
       RowBox[{"gaComplexConjugate", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "opts", "}"}], ",", 
            RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], "]"}]}]}], 
        "]"}], "]"}], "]"}], ",", "expr"}], "]"}], "/;", 
   RowBox[{"MatrixQ", "[", "expr", "]"}]}]}]], "Input",
 CellLabel->
  "In[1233]:=",ExpressionUUID->"28aabb57-1710-4c06-a6c3-c5519111a91f"]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Reciprocal base and bivector commutator algebra (Lie algebra) functions"
}], "Subsection",ExpressionUUID->"e83bcc65-c8fc-497f-8060-6331473310c2"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"55b37984-e8cf-48d8-8415-dacb11869c71"],

Cell["\<\
First, for test purposes it is useful to have function which generates random \
nonorthonormal basis.\
\>", "Text",ExpressionUUID->"52b99a4f-4433-405b-a330-39a386374be6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaRandomBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ZeroTolerance", "->", 
       RowBox[{"10.", "^", 
        RowBox[{"(", 
         RowBox[{"-", "2"}], ")"}]}]}], ",", 
      RowBox[{"CoefficientFunction", "\[Rule]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", "100"}], "}"}], "]"}], "&"}], ")"}]}]}], "}"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionRandomBasis", "[", "\"\<CoefficientFunction\>\"", "]"}],
    "=", "\"\<Any transformation (i.e with head Function[]), for example, \
(RandomInteger[{-10,10}]&) that produces the coefficient at basis \
element\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionRandomBasis", "[", "\"\<ZeroTolerance\>\"", "]"}], 
    "=", "\"\<Small positive real number.\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionRandomBasis", "[", 
    RowBox[{"\"\<CoefficientFunction\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", "_Function"}], "]"}]}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionRandomBasis", "[", 
     RowBox[{"\"\<ZeroTolerance\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"NumericQ", "[", "val", "]"}], "&&", 
     RowBox[{"Positive", "[", "val", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaRandomBasis", "[", 
   RowBox[{"al_Cl", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "theOption", ",", "pseudoscalar", ",", "co", ",", "vecBase", ",", 
      "pseudoscalarMagnitude", ",", "genVec"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gaRandomBasis", ",", "#", ",", "theOption"}], "}"}], ",", 
         RowBox[{
          RowBox[{"gaOptionCheck", "[", "testOptionRandomBasis", "]"}], "[", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"First", "/@", 
        RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
         "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"CoefficientFunction", "/.", 
          RowBox[{"Options", "[", "gaRandomBasis", "]"}]}], ")"}]}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], "]"}], "===",
         "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"ZeroTolerance", "/.", 
          RowBox[{"Options", "[", "gaRandomBasis", "]"}]}], ")"}]}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"genVec", "=", 
      RowBox[{"gaGeneralMultivector", "[", 
       RowBox[{"co", ",", "al", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vecBase", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"genVec", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"co", "[", "any_", "]"}], "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
            "[", "any", "]"}]}], "}"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"gaDimensionOfVectorSpace", "[", "al", "]"}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pseudoscalar", "=", 
      RowBox[{"gaPE", "[", 
       RowBox[{"OuterProduct", "@@", "vecBase"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pseudoscalarMagnitude", "=", 
      RowBox[{"gaPE", "[", 
       RowBox[{"pseudoscalar", "\[GeometricProduct]", 
        RowBox[{"gaReverse", "[", "pseudoscalar", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{"allZeroTest", "[", 
       RowBox[{
        RowBox[{"{", "pseudoscalarMagnitude", "}"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"OuterProduct", "@@", "vecBase"}], ")"}], 
         "\[GeometricProduct]", 
         RowBox[{"gaReverse", "[", 
          RowBox[{"OuterProduct", "@@", "vecBase"}], "]"}]}], ",", "Identity",
         ",", 
        RowBox[{"theOption", "[", "\"\<ZeroTolerance\>\"", "]"}], ",", 
        "\"\<gaRandomBasis[ ]\>\""}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaPE", "[", 
          RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
        RowBox[{"Rest", "[", 
         RowBox[{"Subsets", "[", "vecBase", "]"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}], "[", 
        RowBox[{
         RowBox[{"GeometricAlgebra`mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->
  "In[1234]:=",ExpressionUUID->"57371974-8cea-485c-bdb4-080b6b8cda5a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Reciprocal vectors and full bases"
}], "Subsubsection",ExpressionUUID->"974bbbe1-0bdf-40b6-a835-c9d90bda2266"],

Cell["\<\
The main function computes reciprocal vectors. Because given set of vectors \
can be linearly dependent we add some checks and tolerances in when we \
consider them linearly independent.\
\>", "Text",ExpressionUUID->"d3a15c70-bd0b-4607-b4cb-4a2a0bdf27b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "::", "NotABase"}], "=", 
   "\"\<There are not enought linearly independent vectors in `1` in order to \
compute reciprocal basis for `2` algebra.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaReciprocalVectors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ZeroTolerance", "->", 
     RowBox[{"10.", "^", 
      RowBox[{"(", 
       RowBox[{"-", "2"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "[", 
    RowBox[{"vectorBase_List", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAssociationFunction", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"vectorBase", ",", "_Association"}], "]"}], ",", 
          "Identity", ",", "gaAssociationTogether"}], "]"}]}], ",", 
       RowBox[{"theResultFunction", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"vectorBase", ",", "_Association"}], "]"}], ",", 
          "Identity", ",", "gaPlainRepresentation"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"chopTol", "=", 
        RowBox[{
         RowBox[{"ZeroTolerance", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaReciprocalVectors", ",", "ZeroTolerance"}], "]"}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "vectorBase", "]"}]}], ",", 
       RowBox[{"pseudoscalar", "=", 
        RowBox[{"gaPE", "[", 
         RowBox[{"OuterProduct", "@@", "vectorBase"}], "]"}]}], ",", 
       "pseudoscalarMagnitude", ",", "inversePseudoscalar"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "=!=", 
         
         RowBox[{"Length", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"vectorBase", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
        ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaReciprocalVectors", "::", "NotABase"}], ",", 
           "vectorBase", ",", "theAlgebra"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"pseudoscalarMagnitude", "=", 
       RowBox[{"theAssociationFunction", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"pseudoscalar", "\[GeometricProduct]", 
          RowBox[{"gaReverse", "[", "pseudoscalar", "]"}]}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Catch", "[", 
       RowBox[{"allZeroTest", "[", 
        RowBox[{
         RowBox[{"{", "pseudoscalarMagnitude", "}"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"OuterProduct", "@@", "vectorBase"}], ")"}], 
          "\[GeometricProduct]", 
          RowBox[{"gaReverse", "[", 
           RowBox[{"OuterProduct", "@@", "vectorBase"}], "]"}]}], ",", 
         "theResultFunction", ",", "chopTol", ",", 
         "\"\<gaReciprocalVectors[ ]\>\""}], "]"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inversePseudoscalar", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"-", "1"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], 
             "*", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], 
                "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], "/", 
          "pseudoscalarMagnitude"}], ")"}], "\[GeometricProduct]", 
        "pseudoscalar"}]}], ";", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"gaPE", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}]}], "\[GeometricProduct]", 
            RowBox[{"(", 
             RowBox[{"OuterProduct", "@@", 
              RowBox[{"ReplacePart", "[", 
               RowBox[{"vectorBase", ",", 
                RowBox[{"i", "->", "Nothing"}]}], "]"}]}], ")"}]}], ")"}], 
          "\[LeftContract]", "inversePseudoscalar"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",\

 CellLabel->
  "In[1240]:=",ExpressionUUID->"4b829deb-360d-4c32-b0e3-60aee7b2dfc1"],

Cell["\<\
After we know how to compute reciprocal vectors, we can generate entire \
reciprocal base. 
In the case of orthonormal base we just rise indices\
\>", "Text",ExpressionUUID->"e755e141-998c-44cb-ae4a-ef5eade99fd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaReciprocalBasis", "[", "downIndexBase_List", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"downIndexBase", "/.", 
     RowBox[{"{", 
      RowBox[{"x_mvDownUp", "\[RuleDelayed]", 
       RowBox[{"Reverse", "[", "x", "]"}]}], "}"}]}], ")"}], "/;", 
   RowBox[{"downIndexBase", "===", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"gaGetAlgebra", "[", "downIndexBase", "]"}], 
     "]"}]}]}]}]], "Input",
 CellLabel->
  "In[1243]:=",ExpressionUUID->"14447705-1254-45ba-82d1-3e185e6839bb"],

Cell["For general case we are forced to do calculations", "Text",ExpressionUUID->"349dfad9-45f4-4db5-938f-a3753cdd0a02"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalBasis", "::", "ordering"}], "=", 
   "\"\<Warning. Provided full basis `1` do not match or is inconsistent with \
given basis vectors `2`. Calculated reciprocal basis of higher grade elements \
will not match the provided basis higher grade elements. Provide properly \
prepared basis!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "reciprocalVectors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ZeroTolerance", "->", 
     RowBox[{"10.", "^", 
      RowBox[{"(", 
       RowBox[{"-", "2"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaReciprocalBasis", "[", 
   RowBox[{"algebraBase_List", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], "&"}], "/@", "algebraBase"}], 
          ",", "0"}], "]"}]}], ",", "reciprocVec"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
          RowBox[{"Rest", "[", 
           RowBox[{"Subsets", "[", "vectors", "]"}], "]"}]}], "=!=", 
         RowBox[{"Rest", "[", "algebraBase", "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaReciprocalBasis", "::", "ordering"}], ",", "algebraBase",
           ",", "vectors"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"reciprocVec", "=", 
       RowBox[{"gaReciprocalVectors", "[", 
        RowBox[{"vectors", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaPE", "[", 
           RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
         RowBox[{"Rest", "[", 
          RowBox[{"Subsets", "[", "reciprocVec", "]"}], "]"}]}], ",", 
        RowBox[{"algebraBase", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "algebraBase", "]"}], "===", 
    RowBox[{"Power", "[", 
     RowBox[{"2", ",", 
      RowBox[{"gaDimensionOfVectorSpace", "[", 
       RowBox[{"gaGetAlgebra", "[", "algebraBase", "]"}], "]"}]}], 
     "]"}]}]}]}]}], "Input",
 CellLabel->
  "In[1244]:=",ExpressionUUID->"fb2db81e-fa4c-40c7-add6-628f75ec57b6"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Structure constants and bilinear forms (including the metric and  Killing \
form)"
}], "Subsubsection",ExpressionUUID->"d37128c4-0f6b-4e8e-9a83-e1c102c447d6"],

Cell["\<\
Given some base it is trivial to compute general homogeneous bilinear forms, \
which are required for Casimir operator expressions (the standard Lie algebra \
formulas). Table[InnerProduct[list[[i]], list[[j]]], {i, 1, Length[list]}, \
{j, i,  Length[list]}]; might be faster according to \
https://mathematica.stackexchange.com/questions/163240/specialized-form-of-\
outerf-list-list-for-symmetric-f  .\
\>", "Text",ExpressionUUID->"26d3c6ca-c90a-40b5-a20c-5733e617020e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBilinearForm", "[", 
     RowBox[{"base_List", ",", 
      RowBox[{"{", "grade_Integer", "}"}]}], "]"}], ":=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"homogeneusElements", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"base", ",", 
            RowBox[{"{", "grade", "}"}]}], "]"}], ",", "0"}], "]"}]}], "}"}], 
      ",", 
      RowBox[{"Map", "[", 
       RowBox[{"gaPE", ",", 
        RowBox[{"Outer", "[", 
         RowBox[{
         "InnerProduct", ",", "homogeneusElements", ",", 
          "homogeneusElements"}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMetric", "[", "base_List", "]"}], ":=", 
   RowBox[{"gaBilinearForm", "[", 
    RowBox[{"base", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaKillingMetric", "[", "base_List", "]"}], ":=", 
   RowBox[{"gaBilinearForm", "[", 
    RowBox[{"base", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1247]:=",ExpressionUUID->"a29f11e7-1801-4317-9284-6d97263cd49b"],

Cell[TextData[{
 "General formula for structure constants can be easily derived from the \
bivector algebra definition: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "/", "2"}], ")"}], "[", 
     RowBox[{
      SubscriptBox["\[ScriptCapitalB]", "i"], ",", 
      SubscriptBox["\[ScriptCapitalB]", "j"]}], "]"}], "=", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["c", 
       RowBox[{"i", ",", "j"}]], "k"], 
     SubscriptBox["\[ScriptCapitalB]", "k"]}]}], TraditionalForm]],
  ExpressionUUID->"b3f0f6fa-93b7-4b88-bef5-ea81d253b2b9"],
 " by taking inner product from the right with reciprocal bivector ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]],ExpressionUUID->
  "f1d47e69-8a6f-42f9-a0a1-39a0b1b8a21e"],
 " (no sum). Then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]],ExpressionUUID->
  "5b871442-7558-47fb-a854-b6f464bdc9df"],
 "\[InnerProduct]",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]],ExpressionUUID->
  "cbff668d-ccdf-442d-84f9-6aee18fe7047"],
 "(no sum) will yield -1, and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["c", 
      RowBox[{"i", ",", "j"}]], "k"], "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", "2"}], ")"}], "[", 
       RowBox[{
        SubscriptBox["\[ScriptCapitalB]", "i"], ",", 
        SubscriptBox["\[ScriptCapitalB]", "j"]}], "]"}]}], "\[InnerProduct]", 
     
     SuperscriptBox["\[ScriptCapitalB]", "k"]}]}], TraditionalForm]],
  ExpressionUUID->"cbadf646-135b-41bb-a628-6b1be1fb1c29"],
 ", which is valid for general nonorthonormal set of bivectors (which should \
make base).  Because of explicit anti commutativity we slightly save time \
remembering structure constant values. Indices represent bivector order \
number in given base, therefore it is important to provide the same order in \
reciprocal base (otherwise computation will go wrong)."
}], "Text",ExpressionUUID->"7695d990-bbc8-49b0-b14c-c49e950c787f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_", ",", "i_"}], "}"}], ",", "__"}], "]"}], ":=", "0"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], ",", "k_Integer", ",", 
     "baseBivectors_List", ",", "recoprocalBaseBivectors_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"gaStructureConstant", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"j", ",", "i"}], "}"}], ",", "k", ",", "baseBivectors", ",", 
       "recoprocalBaseBivectors"}], "]"}]}], "/;", 
    RowBox[{"i", "<", "j"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaStructureConstant", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], ",", "k_Integer", ",", 
    "baseBivectors_List", ",", "recoprocalBaseBivectors_List"}], "]"}], ":=", 
  
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaStructureConstant", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "baseBivectors", ",", 
       "recoprocalBaseBivectors"}], "]"}], "=", 
     RowBox[{"-", 
      RowBox[{"gaPE", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutatorExpand", "[", 
          RowBox[{"1", "/", "2"}], "]"}], "[", 
         RowBox[{"gaCommutator", "[", 
          RowBox[{
           RowBox[{"baseBivectors", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"baseBivectors", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], "\[InnerProduct]", 
        RowBox[{"recoprocalBaseBivectors", "[", 
         RowBox[{"[", "k", "]"}], "]"}]}], "]"}]}]}], ")"}], "/;", 
   RowBox[{"i", ">", "j"}]}]}]}], "Input",
 CellLabel->
  "In[1250]:=",ExpressionUUID->"89caa8c2-a89a-47e7-b5f9-99161efb5310"],

Cell["\<\
Define general Casimir operator using Lie algebras formulas:  C_m =\\sum \
c_{i_1j_1}^{j_2} c_{i_2 j_2}^{j_3}
  \\cdots c_{i_m j_m}^{j_1} g^{i_1l_1} g^{i_2l_2} \\cdots g^{i_ml_m} \
\\cX_{l_1} \\cX_{l_2}\\cdots\\cX_{l_m}\\, \
\>", "Text",ExpressionUUID->"50cab821-cde1-4aab-b197-cfbcdf25dc14"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["C", "2"], TraditionalForm]],ExpressionUUID->
  "c92d876f-58ff-4a12-9a9d-95c345d27294"],
 " operator gives the number of bivectors of the algebra. What is less clear \
is how to interpret numbers of formulas ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["C", "3"], TraditionalForm]],ExpressionUUID->
  "78229f8e-f8d3-42ea-8357-fcd0f28ff572"],
 ", etc... Seems, that infinite number of these exist and they are definitely \
not higher order Casimir operators of Lie groups."
}], "Text",ExpressionUUID->"9b1ee343-2dc8-4864-beaf-3685354f2a59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCasimir", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"{", "order_Integer", "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"reciprocalBase", "=", 
        RowBox[{"gaReciprocalBasis", "[", "fullBase", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
       ",", "theStructureConstants", ",", 
       "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
       ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
       "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "dynkinFactor", ",", 
       "mySum", ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", 
       ",", "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"iterRange", "=", 
       RowBox[{"Binomial", "[", 
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "theBivectors", "]"}], "===", "1"}], ",", "0",
         ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theBivectors", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"fullBase", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theReciprocalBivectors", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"reciprocalBase", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theStructureConstants", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"gaStructureConstant", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
              ",", "theReciprocalBivectors"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"uniqueSymbolsC", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Unique", "[", "cas", "]"}], ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"uniqueSymbolsB", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Unique", "[", "bii", "]"}], ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"inverseKillingMetric", "=", 
          RowBox[{"Inverse", "[", 
           RowBox[{"gaKillingMetric", "[", "fullBase", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theStructureConstantsSummedWithMetric", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"theStructureConstants", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "j", ",", "k"}], "]"}], "]"}], "*", 
               RowBox[{"inverseKillingMetric", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "l"}], "]"}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "iterRange"}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"l", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterators", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
           RowBox[{"NestList", "[", 
            RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
             RowBox[{
              RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
            "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"dynkinFactor", "=", 
          RowBox[{"gaDynkinFactor", "[", "fullBase", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dynkinFactor", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ReleaseHold", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Hold", "@@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"mySum", "@@", 
                  RowBox[{"Prepend", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsB"}], ")"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"mySum", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Append", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"gp", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"theBivectors", ",", "#"}], "]"}], "&"}], "/@", 
                    "uniqueSymbolsB"}], ")"}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "scWm", "->", "theStructureConstantsSummedWithMetric"}], ",", 
                
                RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
                RowBox[{"mySum", "\[Rule]", "Sum"}]}], "}"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{"gp", "\[Rule]", "GeometricProduct"}], "}"}]}], 
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"order", ">", "1"}]}]}]], "Input",
 CellLabel->
  "In[1253]:=",ExpressionUUID->"06c5696b-2d5a-46f3-9aa8-067e9ac1cb1a"],

Cell[CellGroupData[{

Cell["\<\
 One can instead of summing structure constants with metric use reciprocal \
bivectors instead. This however is slower, therefore inactivated.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"7e939409-fed8-49a4-a9c0-48f82a1abac2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCasimirOther", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"{", "order_Integer", "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"reciprocalBase", "=", 
        RowBox[{"gaReciprocalBasis", "[", "fullBase", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
       ",", "theStructureConstants", ",", "theBivectors", ",", 
       "theReciprocalBivectors", ",", "uniqueSymbolsC", ",", "uniqueSymbolsB",
        ",", "dynkinFactor", ",", "mySum", ",", "gp", ",", "ptr", ",", "scWm",
        ",", "cas", ",", "bii", ",", "iterators"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"iterRange", "=", 
       RowBox[{"Binomial", "[", 
        RowBox[{
         RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"theBivectors", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"gaGetMV", "[", 
          RowBox[{"fullBase", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"theReciprocalBivectors", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"gaGetMV", "[", 
          RowBox[{"reciprocalBase", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"theStructureConstants", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"gaStructureConstant", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
           ",", "theReciprocalBivectors"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"uniqueSymbolsC", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Unique", "[", "cas", "]"}], ",", 
         RowBox[{"{", "order", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"uniqueSymbolsB", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Unique", "[", "bii", "]"}], ",", 
         RowBox[{"{", "order", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"iterators", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
        RowBox[{"NestList", "[", 
         RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
          RowBox[{
           RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dynkinFactor", "=", 
       RowBox[{"gaDynkinFactor", "[", "fullBase", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dynkinFactor", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ReleaseHold", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Hold", "@@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"mySum", "@@", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                   "uniqueSymbolsB"}], ")"}], ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"mySum", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"gp", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"theReciprocalBivectors", ",", "#"}], "]"}], 
                    "&"}], "/@", 
                    RowBox[{"Reverse", "[", "uniqueSymbolsB", "]"}]}], 
                    ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "]"}]}], 
              "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"scWm", "->", "theStructureConstants"}], ",", 
             RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
             RowBox[{"mySum", "\[Rule]", "Sum"}]}], "}"}]}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{"gp", "\[Rule]", "GeometricProduct"}], "}"}]}], ")"}]}]}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"order", ">", "1"}]}]}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"6e8f9dac-25bf-41cb-866e-364cd0b1ba14"]
}, Open  ]],

Cell["\<\
Dynkin index we compute using the trick that numbers given by two different \
formulas should yield the same number. From that we compute ratio. In \
particularly we compute Killing metric using structure constants  K_{ij}= \
\\delta\\sum_{k,l=1}^d c_{il}^k  c_{jk}^l, (where \\delta is the Dynkin \
factor). The function below is hidden from the user, because it is used in \
gaDynkinFactor[ ] only.\
\>", "Text",ExpressionUUID->"2a3f16db-e620-4876-bc07-b5beff4182b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaKillingMetric", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<StructureConstants\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1254]:=",ExpressionUUID->"edf1561c-7ae3-4a91-aa59-f949141bf133"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaKillingMetric", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"reciprocalBase", "=", 
       RowBox[{"gaReciprocalBasis", "[", "fullBase", "]"}]}], ",", 
      RowBox[{"theAlgebra", "=", 
       RowBox[{"gaGetAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
      ",", "theStructureConstants", ",", 
      "theStructureConstantsSummedWithMetric", ",", "theBivectors", ",", 
      "theReciprocalBivectors", ",", "uniqueSymbolsC", ",", "uniqueSymbolsB", 
      ",", "mySum", ",", "myTable", ",", "ptr", ",", "scWm", ",", "cas", ",", 
      "bii", ",", "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"OptionValue", "[", "Method", "]"}], "===", 
       "\"\<StructureConstants\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"the", " ", "only", " ", "impemented", " ", "method"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"iterRange", "=", 
        RowBox[{"Binomial", "[", 
         RowBox[{
          RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], ",", 
          "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"theBivectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"fullBase", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"theReciprocalBivectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"reciprocalBase", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"theStructureConstants", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"gaStructureConstant", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
            ",", "theReciprocalBivectors"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"uniqueSymbolsC", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Unique", "[", "cas", "]"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"uniqueSymbolsB", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Unique", "[", "bii", "]"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"theStructureConstantsSummedWithMetric", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"theStructureConstants", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "j", ",", "k"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"iterators", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
         RowBox[{"NestList", "[", 
          RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
           RowBox[{
            RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ReleaseHold", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Hold", "@@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"myTable", "@@", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                 "uniqueSymbolsB"}], ")"}], ",", 
               RowBox[{"(", 
                RowBox[{"mySum", "@@", 
                 RowBox[{"Prepend", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}]}], 
              "\[IndentingNewLine]", "]"}]}], "}"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"scWm", "->", "theStructureConstantsSummedWithMetric"}], 
           ",", 
           RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
           RowBox[{"mySum", "\[Rule]", "Sum"}], ",", 
           RowBox[{"myTable", "\[Rule]", "Table"}]}], "}"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 CellLabel->
  "In[1255]:=",ExpressionUUID->"9995e218-5bed-4a6e-8674-45488a6abd78"],

Cell["\<\
and then do the same computations directly with bivectors \
K_{ij}=\\cB_i\\d\\cB_j=\\langle\\cB_i\\cB_j\\rangle_0. Comparing these \
numbers the Dynkin factor is computed.\
\>", "Text",ExpressionUUID->"3046382d-6c11-480e-9258-dcecff12adc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDynkinFactor", "[", "fullBase_", "]"}], ":=", 
  RowBox[{"First", "[", 
   RowBox[{"Divide", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaKillingMetric", "[", "fullBase", "]"}], ",", 
        RowBox[{"gaKillingMetric", "[", 
         RowBox[{"fullBase", ",", 
          RowBox[{"Method", "\[Rule]", "\"\<StructureConstants\>\""}]}], 
         "]"}]}], "}"}]}], ")"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[1256]:=",ExpressionUUID->"bfa7b7be-bebf-4a74-9c09-e7af6d6a46d5"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into geometric product"
}], "Subsection",ExpressionUUID->"1b9f7abf-8765-4fae-9d0f-70fe33580228"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help and decomposition test functions (gaCliffordDecomposableQ[ ], \
gaVersorQ[ ])"
}], "Subsubsection",ExpressionUUID->"d66323cc-d3bd-4d9f-b606-d464679436a2"],

Cell["Here are some criteria when ", "Text",ExpressionUUID->"14dd85b8-7d43-454e-aa92-91777034d6bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "True", " ", "if", " ", "all", " ", "terms", " ", "of", " ", "u", " ", 
    "are", " ", "of", " ", "even", " ", "grade", " ", "or", " ", "all", " ", 
    "terms", " ", "are", " ", "of", " ", "odd", " ", "grade"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaMultivectorParityCheck", "[", "u_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"allGrades", "=", 
        RowBox[{"gaGradeList", "[", "u", "]"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "EvenQ"}], "]"}], "||", 
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "OddQ"}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gradeParityCheck", "[", "gradeList_List", "]"}], ":=", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "EvenQ"}], "]"}], "||", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "OddQ"}], "]"}]}]}]}]}]], "Input",
 CellLabel->
  "In[1257]:=",ExpressionUUID->"e78aa264-a06f-4ab4-afb3-5d06b373e7b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Decomposability", " ", 
    RowBox[{"Test", ".", " ", "Necessary"}], " ", "in", " ", "indefinite", 
    " ", "signatures"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "[", "u_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"allGrades", "=", 
       RowBox[{"gaGradeList", "[", "u", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
             RowBox[{"Equal", "[", 
              RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaNorm2ReverseSigned", "[", "u", "]"}], "]"}], "]"}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaNorm2ReverseSigned", "[", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"u", ",", 
              RowBox[{"{", 
               RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], "]"}],
            "]"}], "===", "0"}], ",", 
         RowBox[{"Throw", "[", "False", "]"}], ",", 
         RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[1259]:=",ExpressionUUID->"d4d7fc55-bf6b-42d1-8a0d-c06edd481337"],

Cell["\<\

This is experimental (unproved) versor test. Versor here is defined as a \
geometric product of vectors. Important note: vectors cannot be  isotropic \
(null) here [GSSDW-CADoCOGE]. \
\>", "Text",ExpressionUUID->"ebe71984-d4d8-443f-a870-69cbe52d137a"],

Cell[TextData[{
 "It checks if multivector consist of either of only even or only odd grades \
and then computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", "A", "]"}], " ", 
     SubscriptBox["e", "i"], " ", 
     RowBox[{"gaInverse", "[", "A", "]"}]}], ")"}], TraditionalForm]],
  ExpressionUUID->"b089d9ff-91a0-4c4f-b276-e88e4f7136e1"],
 " for each of basis vectors [Bouma2001a,b] . If after transformation basis \
vectors remains vectors, then we assume A is a versor. If for some vectors \
after transformation  we get zero, this means we have at least one isotropic \
vector. This test applies to non isotropic product of vectors.  MV with \
symbolic coefficients are ignored."
}], "Text",ExpressionUUID->"646d3284-4920-4b7a-834e-6bd4e44a4e13"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorQ", "::", "BasisOrdering"}], "=", 
   "\"\<Initially defined orthonormal basis ordering for `1` differ from \
current basis ordering, which is  `2`. Will try to find vectors \
manually.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1260]:=",ExpressionUUID->"e708f6f5-2e20-4929-a8ac-15d731355c39"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaVersorQ", "[", "generalMV_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "generalMV", "]"}]}], ",", 
       RowBox[{"generalMVexpanded", "=", 
        RowBox[{"gaGradeInverse", "[", 
         RowBox[{"gaPE", "[", "generalMV", "]"}], "]"}]}], ",", "baseVectors",
        ",", "inversedMV"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
          "gaMultivectorParityCheck", "[", "generalMVexpanded", "]"}]}], ",", 
         
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Take", " ", "basis", " ", "vector"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"theAlgebra", ",", "gaRunningOrdering", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "=!=", 
          "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
         RowBox[{"baseVectors", "=", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"theAlgebra", ",", "gaRunningOrdering", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaVersorQ", "::", "BasisOrdering"}], ",", "theAlgebra", 
            ",", "gaRunningOrdering"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", "theAlgebra", "]"}], "]"}], "=!=",
              "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
            RowBox[{"baseVectors", "=", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"gaOrthonormalBasis", "[", "theAlgebra", "]"}], ",", 
                 
                 RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Orthonormal basis undefined?\>\"", "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"gaInvertibleQ", "[", "generalMV", "]"}], ",", 
         RowBox[{"inversedMV", "=", 
          RowBox[{"gaInverse", "[", "generalMVexpanded", "]"}]}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"gaGradeList", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{
              RowBox[{"gaPE", "[", 
               RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
               "]"}], "\[GeometricProduct]", "inversedMV"}], "]"}], "]"}], 
           ",", 
           RowBox[{"{", "1", "}"}], ",", "\"\<ok\>\"", ",", "_", ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
        "baseVectors"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"gaInvertibleQ", "[", "generalMV", "]"}], "]"}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}], ";"}], "\[IndentingNewLine]", 
      "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{
    RowBox[{"gaVariables", "[", 
     RowBox[{"gaPE", "[", "generalMV", "]"}], "]"}], "===", 
    RowBox[{"{", "}"}]}]}]}]], "Input",
 CellLabel->
  "In[1261]:=",ExpressionUUID->"6ccb1b19-a494-480d-83e0-9946b48cdf99"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Decomposition of versor"
}], "Subsubsection",ExpressionUUID->"1d3235a4-3b8f-4c32-afd4-1fb53e2e4d39"],

Cell["\<\
 Reimplementation of Staples versor factorization  [GSSDW-CADoCOGE] algorithm.\
\>", "Text",ExpressionUUID->"9a3e8745-803b-4717-be54-0b20100bcce0"],

Cell[TextData[{
 "Vector wrapping x->B x ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]],ExpressionUUID->
  "320a2fc7-cc54-463d-89ae-f6a0b0887618"],
 "/|B|^2 , where B is assumed to be a blade and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]],ExpressionUUID->
  "b6277a8a-f3fe-4461-9a81-b70a7523dc2e"],
 " denotes its Clifford conjugation (reverse and grade inverse) \
transformation is important enough to give name ,"
}], "Text",ExpressionUUID->"39968301-8ed4-4ea5-9b43-796bfb5fd05a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wrapCliffordConjugate", "[", 
   RowBox[{"wrapArg_", ",", "wrappingBlade_"}], "]"}], ":=", 
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"wrappingBlade", "\[GeometricProduct]", "wrapArg"}], "]"}], 
      "\[GeometricProduct]", 
      RowBox[{"gaCliffordConjugate", "[", "wrappingBlade", "]"}]}], "]"}], 
    "/", 
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"gaNorm2ReverseSigned", "[", "wrappingBlade", "]"}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[1262]:=",ExpressionUUID->"88006b3c-8976-40a1-956f-624b2afa906d"],

Cell["\<\
It is useful to have single decomposition step of factoring one vector per \
step. In the last step we reverse obtained vectors order in order it be ready \
for multiplication of entire set.  Note, that due to huge numbers procedure \
might not be stable numerically.\
\>", "Text",ExpressionUUID->"520ff151-457d-4d62-afd3-fc43642b387a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "oneStepCliffordDecompose", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"NextVector", "\[Rule]", 
      RowBox[{"{", "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{"decomposableMV_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"oneStepCliffordDecompose", "[", 
       RowBox[{
        RowBox[{"{", "decomposableMV", "}"}], ",", "opts"}], "]"}], "/;", 
      RowBox[{"NumericQ", "[", 
       RowBox[{"decomposableMV", "/.", 
        RowBox[{
         RowBox[{"bs", "[", "__", "]"}], "\[RuleDelayed]", "1"}]}], "]"}]}]}],
     ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"decomposableMV_", ",", "outputVectors___"}], "}"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"allGrades", "=", 
          RowBox[{"gaGradeList", "[", "decomposableMV", "]"}]}], ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"First", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"decomposableMV", ",", "_Cl", ",", "Infinity"}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"theElement", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"NextVector", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"oneStepCliffordDecompose", ",", "NextVector"}], "]"}]}],
            ")"}]}], ",", " ", "maxGrade", ",", "selVector", ",", 
         "wrappedSelVector", ",", "wrappedSelVectorSignedMagnitudeSquare"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"maxGrade", "=", 
            RowBox[{"Last", "[", "allGrades", "]"}]}], ")"}], ">", "1"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"theElement", "=!=", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"selVector", "=", "theElement"}], ",", 
            RowBox[{"selVector", "=", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"RandomChoice", "[", 
                   RowBox[{"Union", "@@", 
                    RowBox[{"gaIndexList", "[", "decomposableMV", "]"}]}], 
                   "]"}], "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVector", "=", 
           RowBox[{"(", 
            RowBox[{"selVector", "-", 
             RowBox[{"wrapCliffordConjugate", "[", 
              RowBox[{"selVector", ",", "decomposableMV"}], "]"}]}], ")"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "=", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", "wrappedSelVector", "]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "!=", "0."}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "[", 
                 RowBox[{
                 "decomposableMV", "\[GeometricProduct]", 
                  "wrappedSelVector"}], "]"}], "/", 
                "wrappedSelVectorSignedMagnitudeSquare"}], "]"}], ",", 
              "outputVectors", ",", "wrappedSelVector"}], "}"}]}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Reverse", "[", 
          RowBox[{"{", 
           RowBox[{"outputVectors", ",", "decomposableMV"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[1263]:=",ExpressionUUID->"555b31e7-67b4-45fd-b4c0-79e74b2b81e9"],

Cell["\<\
Before starting decomposition we check if input is decomposable (this is \
slowdown) . \
\>", "Text",ExpressionUUID->"5f7590fe-66b2-4ddd-b4b7-e36d7e001e8a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCliffordDecompose", "::", "unable"}], "=", 
    "\"\<Multivector failed decomposition test. This method fails if versor \
contains an isotropic vector.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCliffordDecompose", "[", "decomposibleMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allGrades", "=", 
      RowBox[{"gaGradeList", "[", "decomposibleMV", "]"}]}], "}"}], ",", " ", 
    
    RowBox[{"If", "[", 
     RowBox[{"(*", " ", 
      RowBox[{"test", " ", "decomposability", " ", "before", " ", "start"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Catch", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
              RowBox[{"Equal", "[", 
               RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", "decomposibleMV", "]"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"decomposibleMV", ",", 
               RowBox[{"{", 
                RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], 
             "]"}], "]"}], "===", "0"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}], ",", 
          RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"(*", " ", 
       RowBox[{
       "start", " ", "decomposition", " ", "step", " ", "by", " ", "step"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"(", 
        RowBox[{"Nest", "[", 
         RowBox[{"oneStepCliffordDecompose", ",", "decomposibleMV", ",", 
          RowBox[{"Last", "[", 
           RowBox[{"gaGradeList", "[", "decomposibleMV", "]"}], "]"}]}], 
         "]"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"gaCliffordDecompose", "::", "unable"}], "]"}], ";", 
       "$Failed"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellLabel->
  "In[1265]:=",ExpressionUUID->"f96a4f9f-f0d9-4338-b2f6-045b28b9b240"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Factor when one term is known"
}], "Subsubsection",ExpressionUUID->"febb48c3-948a-454c-9e8c-e77d907052e2"],

Cell[TextData[{
 "This function attempts to factor expr into sum of given (known) factors, \
i.e gaFactorTerm[expr,{fac1, fac2}]-> \
expr=answer1\[GeometricProduct]fac1+answer2\[GeometricProduct]fac2. The \
result is returned in the form {{answer1,fac1}, {answer2,fac2},...}.  Slow, \
based on ",
 StyleBox["SolveAlways[ ]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"ba9dc594-c6ec-4895-8707-1cfec3d233d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "multipleSolutions"}], "=", 
   "\"\<SolveAlways provided multiple solutions taking the first.\>\""}], ";", 
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "SolveAlways"}], "=", 
   "\"\<SolveAlways did not find solution of equation `1` with respect to \
variables `2`. Factorization attempt failed.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1267]:=",ExpressionUUID->"9319a5b5-e257-4ca8-ab6e-c9bb819de7a4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaFactorTerm", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<SolveAlways\>\""}], ",", 
      RowBox[{"GeneratedParameters", "\[Rule]", "C"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"{", "knownfactor__", "}"}], ",", "opts___"}], "]"}], ":=", 
   RowBox[{"factorTerm", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "knownfactor", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Direction", "\[Rule]", "Left"}], ",", "opts"}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "[", 
    RowBox[{
     RowBox[{"{", "knownfactor__", "}"}], ",", "expr_", ",", "opts___"}], 
    "]"}], ":=", 
   RowBox[{"factorTerm", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "knownfactor", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Direction", "\[Rule]", "Right"}], ",", "opts"}], "}"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1268]:=",ExpressionUUID->"2d5e4afa-7584-4ecd-8821-a3590b737c99"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"help", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"singleCoefficientSolve", "[", 
        RowBox[{"{", 
         RowBox[{"eq_", ",", "vars_List"}], "}"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "fictiveVars", ",", "varName", ",", "sol", ",", "theEqLHS"}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theEqLHS", "=", 
           RowBox[{"(", 
            RowBox[{"Last", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"CoefficientRules", "[", 
                RowBox[{"eq", ",", "vars"}], "]"}], "/.", 
               RowBox[{"_bs", "\[Rule]", "0"}]}], ")"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"fictiveVars", "=", 
           RowBox[{"varName", "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "theEqLHS", "]"}], "]"}]}]}], ";", 
          RowBox[{"sol", "=", 
           RowBox[{"SolveAlways", "[", 
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{"Equal", "[", 
               RowBox[{
                RowBox[{"theEqLHS", "*", "fictiveVars"}], ",", "0"}], "]"}], 
              "]"}], ",", "fictiveVars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "sol", "]"}], ",", "\[IndentingNewLine]", 
            "0", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaFactorTerm", "::", "SolveAlways"}], ",", 
               RowBox[{"Thread", "[", 
                RowBox[{"Equal", "[", 
                 RowBox[{
                  RowBox[{"theEqLHS", "*", "fictiveVars"}], ",", "0"}], "]"}],
                 "]"}], ",", "fictiveVars"}], "]"}], ";", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", "1", ",", 
            RowBox[{"Flatten", "[", "sol", "]"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"gaFactorTerm", "::", "multipleSolutions"}], "]"}], ";", 
             RowBox[{"sol", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"trivial", " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"factorTerm", "[", 
        RowBox[{"exprToFactor_", ",", 
         RowBox[{"{", 
          RowBox[{"knownFactor_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{"#", ",", "_bs"}], "]"}], "&"}], ")"}]}], "}"}], ",", 
         RowBox[{"{", "___", "}"}]}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", "knownFactor"}], ")"}], "*", "exprToFactor"}], 
         ",", "knownFactor"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"main", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"factorTerm", "[", 
        RowBox[{"exprToFactor_", ",", 
         RowBox[{"{", "knownfactor__", "}"}], ",", 
         RowBox[{"{", "opts___", "}"}]}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"theDirection", "=", 
            RowBox[{"Direction", "/.", 
             RowBox[{"{", "opts", "}"}]}]}], ",", 
           RowBox[{"theMethod", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", "gaFactorTerm", "]"}]}], ")"}]}], ",", 
           RowBox[{"theCoef", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"GeneratedParameters", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", "gaFactorTerm", "]"}]}], ")"}]}], ",", 
           RowBox[{"alg", "=", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"exprToFactor", ",", "_Cl", ",", 
              RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"theBody", "=", 
            RowBox[{"gaPE", "/@", 
             RowBox[{"{", "knownfactor", "}"}]}]}], ",", "tempC", ",", "expr",
            ",", "testMV", ",", "prototypes", ",", "freeVars", ",", 
           "exprSeparatedByFreeCoeffs", ",", "baseElemsOfEachCoeff", ",", 
           "answerWithoutFreeVars", ",", "vars", ",", "solAns"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"initialize", " ", "data"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeVars", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Variables", "[", "exprToFactor", "]"}], ",", 
             RowBox[{"_bs", "|", "_MV"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "if", " ", "there", " ", "are", " ", "no", " ", "symbolic", " ", 
            "coefficient", " ", "add", " ", "one", " ", "and", " ", "then", 
            " ", "remove", " ", "in", " ", "the", " ", "end"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"freeVars", "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"expr", "=", 
              RowBox[{"tempC", "*", "exprToFactor"}]}], ";", 
             RowBox[{"freeVars", "=", "tempC"}]}], ",", 
            RowBox[{"expr", "=", "exprToFactor"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"exprSeparatedByFreeCoeffs", "=", 
           RowBox[{"CoefficientRules", "[", 
            RowBox[{"expr", ",", "freeVars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"baseElemsOfEachCoeff", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{"#", ",", "_bs", ",", "Infinity"}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}], ")"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theMethod", ",", "\[IndentingNewLine]", "\"\<SolveAlways\>\"", 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"testMV", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"#", ",", "alg"}], "]"}], "&"}], "/@", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"theCoef", "[", "i", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                  "]"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"theCoef", "[", "i_", "]"}], "[", "j_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"theCoef", "[", 
                  RowBox[{"i", ",", "j"}], "]"}]}], "}"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"theDirection", ",", "\[IndentingNewLine]", "Left", ",", 
               RowBox[{
                RowBox[{"prototypes", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"theBody", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     "-", "#"}], "]"}], "]"}], ",", "_bs"}], "]"}], "&"}], 
                   ",", 
                   RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}]}], 
                  "]"}]}], ";"}], ",", "\[IndentingNewLine]", "Right", ",", 
               RowBox[{
                RowBox[{"prototypes", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"theBody", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     "-", "#"}], "]"}], "]"}], ",", "_bs"}], "]"}], "&"}], 
                   ",", 
                   RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}]}], 
                  "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "solveAlways", " ", "obtained", " ", "equations", " ", "for", 
               " ", "each", " ", "of", " ", "symbolic", " ", "coefficient", 
               " ", "separatelly"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"solAns", "=", 
              RowBox[{"singleCoefficientSolve", "/@", 
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", 
                   RowBox[{"prototypes", ",", "baseElemsOfEachCoeff"}], "}"}],
                   "]"}], ")"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "substitute", " ", "answer", " ", "for", " ", "each", " ", "of",
                " ", "symbolic", " ", "coefficient"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"solAns", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"answerWithoutFreeVars", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vars", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"solAns", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "_theCoef", ",", 
                    "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "vars"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_theCoef", "\[RuleDelayed]", "0"}], "}"}]}], ",",
                     "vars"}], "]"}], "/.", 
                    RowBox[{"solAns", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "solAns", "]"}]}], "}"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                
                RowBox[{"(*", " ", 
                 RowBox[{"construct", " ", "final", " ", "answer"}], " ", 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"Switch", "[", 
                 RowBox[{
                 "theDirection", ",", "\[IndentingNewLine]", "Left", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "exprSeparatedByFreeCoeffs"}], ",", 
                    RowBox[{"answerWithoutFreeVars", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "freeVars"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     ",", 
                    RowBox[{"{", "knownfactor", "}"}]}], "}"}], "]"}], "/.", 
                   RowBox[{"tempC", "\[Rule]", "1"}]}], ",", 
                  "\[IndentingNewLine]", "Right", ",", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "knownfactor", "}"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "exprSeparatedByFreeCoeffs"}], ",", 
                    RowBox[{"answerWithoutFreeVars", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "freeVars"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], "]"}], "/.", 
                   RowBox[{"tempC", "\[Rule]", "1"}]}]}], 
                 "\[IndentingNewLine]", "]"}]}], 
               RowBox[{"(*", " ", 
                RowBox[{"end", " ", "swich", " ", "direction"}], " ", "*)"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"{", "}"}]}], "]"}]}], 
            RowBox[{"(*", " ", 
             RowBox[{"end", " ", "solution", " ", "existance"}], " ", "*)"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "_", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[1271]:=",ExpressionUUID->"d87499b4-82a3-47f8-84ea-ff8267f5a1f7"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into blades"
}], "Subsection",ExpressionUUID->"da778ee9-3516-4215-a7f0-0dfb8240a529"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help an test functions (gaBladeQ[ ])"
}], "Subsubsection",ExpressionUUID->"20753717-d784-4393-9387-3ea09072cc8e"],

Cell[TextData[{
 "The gaBladeFactor[ ] is Fontijne blade factorization algorithm, which is \
based on projection operator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["q", "i"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["p", "i"], "\[LeftContract]", " ", 
       SuperscriptBox["B", 
        RowBox[{"-", "1"}]]}], ")"}], "B"}]}], TraditionalForm]],
  ExpressionUUID->"fa626386-6c8a-46a7-a44b-d11127473300"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["q", "i"], TraditionalForm]],ExpressionUUID->
  "2c07bed5-37df-4c0d-9eb1-ba8574b71584"],
 " is (if not zero) a factor of B.  This is described in D. Fontijne \
\[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and Join of \
Blades\[CloseCurlyDoubleQuote].  Works only with numerical coefficients."
}], "Text",ExpressionUUID->"1c34fd9c-65d4-4942-ab3b-bae6e6633225"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"makeContractionPairsForVersorBlade", ",", "dat", ",", "pairs"}], 
   "]"}], ";"}], "\n", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"makeContractionPairsForVersorBlade", ",", "Listable"}], 
  "]"}]}], "Input",
 CellLabel->
  "In[1272]:=",ExpressionUUID->"d5eeb054-5508-4cfb-adbf-80d3f0b790ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"makeContractionPairsForVersorBlade", "[", 
    RowBox[{"dat", "[", 
     RowBox[{
      RowBox[{"pairs", "[", "sel___", "]"}], ",", 
      RowBox[{"{", "indToList__", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"dat", "[", 
      RowBox[{
       RowBox[{"pairs", "[", 
        RowBox[{"sel", ",", "#"}], "]"}], ",", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"{", "indToList", "}"}], ",", "#"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Subsets", "[", 
     RowBox[{
      RowBox[{"{", "indToList", "}"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeContractionPairsForVersorBlade", "[", 
    RowBox[{"dat", "[", 
     RowBox[{
      RowBox[{"pairs", "[", "sel___", "]"}], ",", 
      RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"dat", "[", 
    RowBox[{
     RowBox[{"pairs", "[", "sel", "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeContractionPairsForVersorBlade", "[", 
    RowBox[{"dat", "[", 
     RowBox[{
      RowBox[{"pairs", "[", "sel___", "]"}], ",", 
      RowBox[{"{", "i_Integer", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"dat", "[", 
    RowBox[{
     RowBox[{"pairs", "[", "sel", "]"}], ",", 
     RowBox[{"{", "i", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1274]:=",ExpressionUUID->"e2139db2-c3f4-43d6-acf4-20a1dfb2af86"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"phaseVersorBlade", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n_Integer", ",", "u_List"}], "}"}], ",", "newpair_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newRange", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{
           RowBox[{"newpair", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"newpair", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "newpair"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n", "+", 
        RowBox[{"Length", "[", 
         RowBox[{"Complement", "[", 
          RowBox[{"newRange", ",", "u"}], "]"}], "]"}]}], ",", 
       RowBox[{"Union", "[", 
        RowBox[{"u", ",", "newpair"}], "]"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"phaseFactorVersor2Blade", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"a_Integer", ",", "b_Integer"}], "}"}], "}"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Abs", "[", 
     RowBox[{"b", "-", "a"}], "]"}], "-", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"phaseFactorVersor2Blade", "[", "xlists_List", "]"}], ":=", 
    RowBox[{
     RowBox[{"Plus", "@@", 
      RowBox[{"First", "[", 
       RowBox[{"Fold", "[", 
        RowBox[{"phaseVersorBlade", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"{", "}"}]}], "}"}], ",", "xlists"}], "]"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"Length", "[", "xlists", "]"}], ">", "1"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeTermForVersor2Blade", "[", 
    RowBox[{
     RowBox[{"dat", "[", 
      RowBox[{
       RowBox[{"pairs", "[", "]"}], ",", "outerP_List"}], "]"}], ",", 
     "vectors_List", ",", "fun_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"OuterProduct", "@@", 
     RowBox[{"Part", "[", 
      RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeTermForVersor2Blade", "[", 
    RowBox[{
     RowBox[{"dat", "[", 
      RowBox[{
       RowBox[{"pairs", "[", "contr__", "]"}], ",", "outerP_List"}], "]"}], 
     ",", "vectors_List", ",", "fun_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "^", 
      RowBox[{"phaseFactorVersor2Blade", "[", 
       RowBox[{"{", "contr", "}"}], "]"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"Times", "@@", 
      RowBox[{"(", 
       RowBox[{"fun", "[", 
        RowBox[{"InnerProduct", "@@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Part", "[", 
             RowBox[{"vectors", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "contr", "}"}]}], ")"}]}], "]"}], ")"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"Part", "[", 
        RowBox[{"vectors", ",", "outerP"}], "]"}], ",", 
       RowBox[{"{", "}"}], ",", "1", ",", 
       RowBox[{"{", "__", "}"}], ",", 
       RowBox[{"(", 
        RowBox[{"OuterProduct", "@@", 
         RowBox[{"Part", "[", 
          RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], "]"}], 
     ")"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[1277]:=",ExpressionUUID->"7ba2dc29-220a-4248-a842-4497827ba3e5"],

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"phaseFactorBlade2Versor", "[", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"a_Integer", ",", "b_Integer"}], "}"}], "}"}], "]"}], ":=", 
     RowBox[{"Abs", "[", 
      RowBox[{"b", "-", "a"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"phaseFactorBlade2Versor", "[", "xlists_List", "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"First", "[", 
          RowBox[{"Fold", "[", 
           RowBox[{"phaseVersorBlade", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"{", "}"}]}], "}"}], ",", "xlists"}], "]"}], "]"}]}], 
        ")"}], "+", 
       RowBox[{"Length", "[", "xlists", "]"}]}], "/;", 
      RowBox[{
       RowBox[{"Length", "[", "xlists", "]"}], ">", "1"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"makeTermForBlade2Versor", "[", 
      RowBox[{
       RowBox[{"dat", "[", 
        RowBox[{
         RowBox[{"pairs", "[", "]"}], ",", "outerP_List"}], "]"}], ",", 
       "vectors_List", ",", "fun_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"Part", "[", 
        RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"makeTermForBlade2Versor", "[", 
      RowBox[{
       RowBox[{"dat", "[", 
        RowBox[{
         RowBox[{"pairs", "[", "contr__", "]"}], ",", "outerP_List"}], "]"}], 
       ",", "vectors_List", ",", "fun_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"phaseFactorBlade2Versor", "[", 
         RowBox[{"{", "contr", "}"}], "]"}]}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{"Times", "@@", 
        RowBox[{"(", 
         RowBox[{"fun", "[", 
          RowBox[{"InnerProduct", "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Part", "[", 
               RowBox[{"vectors", ",", "#"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "contr", "}"}]}], ")"}]}], "]"}], ")"}]}], ")"}], 
      "*", 
      RowBox[{"(", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"vectors", ",", "outerP"}], "]"}], ",", 
         RowBox[{"{", "}"}], ",", "1", ",", 
         RowBox[{"{", "__", "}"}], ",", 
         RowBox[{"(", 
          RowBox[{"GeometricProduct", "@@", 
           RowBox[{"Part", "[", 
            RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], "]"}], 
       ")"}]}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1282]:=",ExpressionUUID->"1a1b5c9d-fc59-4813-af59-18a40f0cbbb1"],

Cell[TextData[{
 "The gaBladeQ[ ]  uses test ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"Jayme", " ", "Vaz"}], ",", 
   RowBox[{"jr", " ", "Roldao", " ", "da", " ", "Rocha"}], ",", " ", 
   RowBox[{
    RowBox[{"jr", ".", " ", "Clifford"}], " ", "algebras", " ", "and", " ", 
    "spinors"}], ",", "2016", ",", " ", 
   RowBox[{"page", " ", "26"}]}]], "Input",
  CellChangeTimes->{{3.784436718154747*^9, 3.784436720658662*^9}, {
    3.784444268582802*^9, 3.7844445043194857`*^9}, {3.784444550384075*^9, 
    3.784444584588913*^9}, {3.784444965959812*^9, 3.784444992410701*^9}, {
    3.7844450426457043`*^9, 3.784445047804226*^9}, {3.784445092742909*^9, 
    3.7844452261652117`*^9}, {3.784445408807775*^9, 3.784445436329281*^9}, {
    3.784445466372163*^9, 3.784445594073523*^9}, {3.784445657840872*^9, 
    3.7844456619659023`*^9}, {3.7844457050364847`*^9, 3.784445824345138*^9}, {
    3.784445894245768*^9, 3.784445941954825*^9}, {3.78444618154585*^9, 
    3.784446343655994*^9}, 3.784446382973947*^9, {3.784446434896864*^9, 
    3.784446465317155*^9}, {3.784446773491581*^9, 3.784446776877256*^9}, {
    3.784451386369042*^9, 3.784451398692127*^9}},ExpressionUUID->
  "141a8a78-0fa0-4c5c-bd93-b11ee0ba0176"],
 " for bivectors and for general Blade criteria the article ",
 Cell[BoxData[
  RowBox[{"[", "Bouma2001a", "]"}]], "Input",
  CellChangeTimes->{{3.784436718154747*^9, 3.784436720658662*^9}, {
    3.784444268582802*^9, 3.7844445043194857`*^9}, {3.784444550384075*^9, 
    3.784444584588913*^9}, {3.784444965959812*^9, 3.784444992410701*^9}, {
    3.7844450426457043`*^9, 3.784445047804226*^9}, {3.784445092742909*^9, 
    3.7844452261652117`*^9}, {3.784445408807775*^9, 3.784445436329281*^9}, {
    3.784445466372163*^9, 3.784445594073523*^9}, {3.784445657840872*^9, 
    3.7844456619659023`*^9}, {3.7844457050364847`*^9, 3.784445824345138*^9}, {
    3.784445894245768*^9, 3.784445941954825*^9}, {3.78444618154585*^9, 
    3.784446343655994*^9}, 3.784446382973947*^9, {3.784446434896864*^9, 
    3.784446465317155*^9}, {3.784446773491581*^9, 3.784446776877256*^9}, {
    3.784451386369042*^9, 3.784451398692127*^9}},ExpressionUUID->
  "332db0f5-bc5d-483f-bfab-688a25f1c1b8"],
 "."
}], "Text",ExpressionUUID->"a73f2d00-6670-4285-876e-9627039d1d23"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBladeQ", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Method", "\[Rule]", "Automatic"}], "}"}]}], ";"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionBladeQ", "[", "\"\<Method\>\"", "]"}], "=", 
    "\"\<Automatic | PluckerRelations | InvertibleHomogeneusVersor\>\""}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionBladeQ", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "Automatic", "|", "\"\<Automatic\>\"", "|", "\"\<PluckerRelations\>\"", 
      "|", "\"\<InvertibleHomogeneusVersor\>\""}]}], "]"}]}], ";"}]}], "Input",\

 CellLabel->
  "In[1286]:=",ExpressionUUID->"8ce9d379-0662-44cf-b4e9-87ab921b03ad"],

Cell["\<\
When expression is given in explicit outer product form, we can determine \
even it has symbolic coefficients: just check if it an outer product of \
vectors\
\>", "Text",ExpressionUUID->"f3e4c698-2c4d-48a5-b346-a394e6b312e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeQ", "[", 
    RowBox[{
     RowBox[{"c_.", "*", "expr_OuterProduct"}], ",", 
     RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"gaGradeList", "/@", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"(", "expr", ")"}]}], ")"}]}], "]"}], "]"}], "===", 
    RowBox[{"{", "1", "}"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[1289]:=",ExpressionUUID->"64fbc418-15b7-4a50-be95-2f76d6508a69"],

Cell["\<\
When expression is not an outer product, we can check only when coefficients \
are numeric.\
\>", "Text",ExpressionUUID->"16eb29ba-e3bf-472b-a93a-5774c5e50ace"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeQ", "[", 
    RowBox[{"generalMV_", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theOption", ",", 
        RowBox[{"theAlgebra", "=", 
         RowBox[{"gaGetAlgebra", "[", "generalMV", "]"}]}], ",", 
        RowBox[{"generalMVexpanded", "=", 
         RowBox[{"gaPE", "[", "generalMV", "]"}]}], ",", "theGrade"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaSetNamedOptionValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"gaBladeQ", ",", "#", ",", "theOption"}], "}"}], ",", 
           RowBox[{
            RowBox[{"gaOptionCheck", "[", "testOptionBladeQ", "]"}], "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
               "}"}]}], ")"}], "]"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
          "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "if", " ", "for", " ", "some", " ", "reason", " ", "Method", " ", 
         "was", " ", "not", " ", "set", " ", "use", " ", "Automatic"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
          "theOption"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
          RowBox[{"(", 
           RowBox[{"Method", "/.", 
            RowBox[{"Options", "[", "gaBladeQ", "]"}]}], ")"}]}]}], "]"}], 
       ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
          "Automatic"}], ",", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
          "\"\<Automatic\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Catch", "[", 
        RowBox[{"(*", " ", 
         RowBox[{"Homogenenity", " ", "check"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"theGrade", "=", 
              RowBox[{"gaGradeList", "[", "generalMVexpanded", "]"}]}], "]"}],
             "=!=", "1"}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"determine", " ", "trivial", " ", "cases"}], "   ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "1", ",", 
               RowBox[{
                RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], 
                "-", "1"}], ",", 
               RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}],
               "}"}], ",", 
             RowBox[{"theGrade", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"gaComponentList", "[", "generalMVexpanded", "]"}], 
               ",", "0"}], "]"}], "]"}], "===", "1"}], ",", 
           RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "if", " ", "grade", " ", "is", " ", "2", " ", "and", " ", "Method",
             " ", "is", " ", "Automatic"}], ",", " ", 
           RowBox[{
           "compute", " ", "using", " ", "fast", " ", "Vaz", " ", "criterium",
             " ", "below"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "special", " ", "criterium", " ", "for", " ", "bivectors"}], ",", 
           " ", 
           RowBox[{"see", " ", "Jayme", " ", "Vaz"}], ",", 
           RowBox[{"jr", " ", "Roldao", " ", "da", " ", "Rocha"}], ",", " ", 
           RowBox[{
            RowBox[{"jr", ".", " ", "Clifford"}], " ", "algebras", " ", "and",
             " ", "spinors"}], ",", "2016", ",", " ", 
           RowBox[{"page", " ", "26"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"theGrade", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "===", "2"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
              "\"\<Automatic\>\""}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"PossibleZeroQ", "[", 
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"OuterProduct", "[", 
                   RowBox[{"generalMVexpanded", ",", "generalMVexpanded"}], 
                   "]"}], "]"}], "]"}], "]"}], ",", 
               RowBox[{"Throw", "[", "True", "]"}], ",", 
               RowBox[{"Throw", "[", "False", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "if", " ", "grade", " ", "is", " ", "not", " ", "2", " ", "and", 
            " ", "Method", " ", "is", " ", "Automatic"}], ",", " ", 
           RowBox[{
           "set", " ", "Method", " ", "to", " ", "PluckerRealtions", " ", 
            "since", " ", "it", " ", "is", " ", "faster", " ", "than", " ", 
            RowBox[{"Bouma", "'"}], "s", " ", 
            "\"\<InvertibleHomogeneusVersor\>\""}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "===", 
            "\"\<Automatic\>\""}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
            "\"\<PluckerRelations\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
           "\[IndentingNewLine]", "\"\<PluckerRelations\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"based", " ", "of", " ", "Sobczyk"}], ",", " ", 
             RowBox[{"Neym", " ", "article"}], ",", " ", "2018", ",", " ", 
             RowBox[{
             "published", " ", "Garret", " ", "Sobczyk", " ", 
              "\"\<Notes on Plucker's relations in GA\>\""}], ",", " ", 
             RowBox[{"Advances", " ", "in", " ", "Mathematics", " ", "363"}], 
             ",", " ", 
             RowBox[{"2020", " ", "106959"}], ",", " ", 
             RowBox[{
              RowBox[{"https", ":"}], "//", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"doi", ".", "org"}], "/", "10.1016"}], "/", 
                RowBox[{"j", ".", "aim"}]}], ".2019", ".106959"}]}]}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", 
            RowBox[{"AllTrue", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"generalMVexpanded", "\[InnerProduct]", "#"}], 
                    ")"}], "\[OuterProduct]", "#"}], ")"}], "]"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{
                "theAlgebra", ",", "gaRunningOrdering", ",", "theGrade"}], 
                "]"}]}], ",", "PossibleZeroQ"}], "]"}], "]"}], ",", 
           "\[IndentingNewLine]", "\"\<InvertibleHomogeneusVersor\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"the", " ", "general", " ", "check", " ", 
             RowBox[{"using", " ", "[", "Bouma2001a", "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"check", " ", 
             RowBox[{"gaVersorQ", "[", "]"}], " ", "includes", " ", "also", 
             " ", "test", " ", "of", " ", "invertibility"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"gaVersorQ", "[", "generalMVexpanded", "]"}], ",", 
              RowBox[{"Throw", "[", "True", "]"}], ",", 
              RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"gaVariables", "[", 
      RowBox[{"gaPE", "[", "generalMV", "]"}], "]"}], "===", 
     RowBox[{"{", "}"}]}]}]}], ";"}]], "Input",ExpressionUUID->"c27640a3-0488-\
41d7-8159-f6fd1dc3c8f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Fontinje blade factorization (unfinished, untested)"
}], "Subsubsection",ExpressionUUID->"ee7ba460-0963-42d8-b7a6-ebe38c6eab0e"],

Cell[TextData[{
 "The gaBladeFactor[ ] is Fontijne blade factorization algorithm, which is \
based on projection operator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["q", "i"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["p", "i"], "\[LeftContract]", " ", 
       SuperscriptBox["B", 
        RowBox[{"-", "1"}]]}], ")"}], "B"}]}], TraditionalForm]],
  ExpressionUUID->"cdc65c35-4f96-4f77-8497-87362db41f3e"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["q", "i"], TraditionalForm]],ExpressionUUID->
  "9b91ee07-82be-48c6-8e85-6b7fd34d8b18"],
 " is (if not zero) a factor of B.  This is described in D. Fontijne \
\[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and Join of \
Blades\[CloseCurlyDoubleQuote].  Works only with numerical coefficients."
}], "Text",ExpressionUUID->"3d8a73fa-b39d-45e8-b7d8-36193ae27a2a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaBladeFactor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<Fontijne\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBladeFactor", "::", "unknownMethod"}], "=", 
    "\"\<Specified method Method->`1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
     RowBox[{"wrap", "=", "wrapHead"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaBladeFactor", "[", 
     RowBox[{"blade_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"method", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Method", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaBladeFactor", ",", "Method"}], "]"}]}], ")"}]}], ",", 
        RowBox[{"expandedBlade", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", "blade", "]"}], "]"}]}], ",", "allBlades", ",",
         "largestAbsCoef", ",", "maxCoef", ",", "normalizedBlade", ",", 
        "theBlade", ",", "inversedTheBlade", ",", "bladeVectors"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"method", ",", "\"\<Fontijne\>\"", ",", 
        RowBox[{
         RowBox[{"allBlades", "=", 
          RowBox[{"List", "@@@", 
           RowBox[{"List", "@@", 
            RowBox[{"(", 
             RowBox[{"Collect", "[", 
              RowBox[{"expandedBlade", ",", "_bs", ",", "wrapHead"}], "]"}], 
             ")"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"largestAbsCoef", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"allBlades", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_bs", "\[Rule]", "1"}], ",", 
              RowBox[{"wrapHead", "\[Rule]", "Abs"}]}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"maxCoef", ",", "theBlade"}], "}"}], "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"Extract", "[", 
              RowBox[{"allBlades", ",", 
               RowBox[{"Position", "[", 
                RowBox[{"allBlades", ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", "largestAbsCoef", "]"}], ",", 
                    "_"}], "}"}], "|", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", 
                    RowBox[{"-", "largestAbsCoef"}], "]"}], ",", "_"}], 
                   "}"}]}]}], "]"}]}], "]"}], "]"}], "/.", 
            RowBox[{"wrapHead", "\[Rule]", "Identity"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"normalizedBlade", "=", 
          RowBox[{"Collect", "[", 
           RowBox[{
            RowBox[{"expandedBlade", "/", "maxCoef"}], ",", "_bs"}], "]"}]}], 
         ";", 
         RowBox[{"inversedTheBlade", "=", 
          RowBox[{"gaInverse", "[", "theBlade", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bladeVectors", "=", 
          RowBox[{"theBlade", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"ind_List", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "alg_", ",", "any___"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "alg", ",", "any"}], 
                 "]"}], "&"}], "/@", "ind"}], ")"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Prepend", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"LeftContract", "[", 
               RowBox[{
                RowBox[{"LeftContract", "[", 
                 RowBox[{"#", ",", "inversedTheBlade"}], "]"}], ",", 
                "normalizedBlade"}], "]"}], "]"}], "&"}], "/@", 
            "bladeVectors"}], ",", "maxCoef"}], "]"}]}], 
        "\[IndentingNewLine]", ",", "_", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaBladeFactor", "::", "unknownMethod"}], ",", "method"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[1291]:=",ExpressionUUID->"cf74ba3a-4062-48e6-bd0d-877ce7e5e5de"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Versor decomposition into sum of blades"
}], "Subsubsection",ExpressionUUID->"d17ecdfd-8880-484e-845d-2aa96e0c11fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaVersorToSumOfBlades", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientFunction", "\[Rule]", "gaPE"}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<None\>\""}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorToSumOfBlades", "::", "argument"}], "=", 
   "\"\<The argument `1` is not recognised as an geometric product of grade 1 \
elements (versor).\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[1294]:=",ExpressionUUID->"5bc7d203-d8aa-4a4b-acad-cd5c832c085d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionVersorToSumOfBlades", "[", "\"\<CoefficientFunction\>\"", "]"}],
    "=", "\"\<Any transformation (i.e. with head Function[]), for example, \
CoefficientFunction\[Rule](Expand[gaPE[#]]&) .\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionVersorToSumOfBlades", "[", 
     "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], "=", 
    "\"\<Should be one of possible GA orderings: (\\\"Lex\\\"|\\\"InvLex\\\"|\
\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\"|\\\"Deg[\
RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[InvLex]\\\"|\
\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\") or \\\"None\\\". \>\""}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionVersorToSumOfBlades", "[", 
    RowBox[{"\"\<CoefficientFunction\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", "_Function"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"testOptionVersorToSumOfBlades", "[", 
    RowBox[{"\"\<gaNonCommutativeMonomialOrder\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "\"\<None\>\"", "|", "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", 
      "\"\<RevLex\>\"", "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", 
      "|", "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
      "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
      "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
      "\"\<InvDeg[InvRevLex]\>\""}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1296]:=",ExpressionUUID->"09fd1339-92f0-4cfa-9947-e5027b07456a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"gaVersorToSumOfBlades", "[", 
       RowBox[{
        RowBox[{"c_.", "*", "expr_GeometricProduct"}], ",", 
        RowBox[{"op", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"theOption", ",", 
           RowBox[{"vectors", "=", 
            RowBox[{"List", "@@", "expr"}]}], ",", "resul", ",", 
           "allNonTrivialPairs"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaSetNamedOptionValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"gaVersorToSumOfBlades", ",", "#", ",", "theOption"}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{
               "gaOptionCheck", "[", "testOptionVersorToSumOfBlades", "]"}], 
               "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                  "}"}]}], ")"}], "]"}], ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
              "]"}], "===", "theOption"}], ",", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
             "=", 
             RowBox[{"(", 
              RowBox[{"CoefficientFunction", "/.", 
               RowBox[{"Options", "[", "gaVersorToSumOfBlades", "]"}]}], 
              ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{
              "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", 
               "]"}], "]"}], "===", "theOption"}], ",", 
            RowBox[{
             RowBox[{
             "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}],
              "=", 
             RowBox[{"(", 
              RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
               RowBox[{"Options", "[", "gaVersorToSumOfBlades", "]"}]}], 
              ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"allNonTrivialPairs", "=", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"NestList", "[", 
               RowBox[{"makeContractionPairsForVersorBlade", ",", 
                RowBox[{"{", 
                 RowBox[{"dat", "[", 
                  RowBox[{
                   RowBox[{"pairs", "[", "]"}], ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "expr", "]"}], "]"}]}], "]"}], 
                 "}"}], ",", 
                RowBox[{"Floor", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", "expr", "]"}], "/", "2"}], "]"}]}], 
               "]"}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"pairs", "[", "x__", "]"}], "\[RuleDelayed]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"pairs", "@@", 
                  RowBox[{"Sort", "[", 
                   RowBox[{"{", "x", "}"}], "]"}]}], ")"}], "/;", 
                RowBox[{"!", 
                 RowBox[{"OrderedQ", "[", 
                  RowBox[{"{", "x", "}"}], "]"}]}]}]}], "}"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"resul", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"makeTermForVersor2Blade", "[", 
              RowBox[{"#", ",", "vectors", ",", 
               RowBox[{
               "theOption", "[", "\"\<CoefficientFunction\>\"", "]"}]}], 
              "]"}], "&"}], "/@", "allNonTrivialPairs"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "by", " ", "default", " ", "vectors", " ", "in", " ", "the", " ", 
            "blades", " ", "are", " ", "not", " ", "ordered"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"", "]"}], 
            ",", "\"\<None\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"Plus", "@@", 
             RowBox[{"(", "resul", ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "we", " ", "can", " ", "them", " ", "put", " ", "into", " ", 
              "some", " ", "order", " ", "if", " ", "we", " ", 
              RowBox[{"want", ".", " ", "This"}], " ", "can", " ", "simplify",
               " ", "finall", " ", "expression"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
             "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", 
              "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
              "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
              "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
              "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
              "\"\<InvDeg[InvRevLex]\>\""}], ")"}], ",", 
            RowBox[{"Plus", "@@", 
             RowBox[{"(", 
              RowBox[{"resul", "/.", 
               RowBox[{"{", 
                RowBox[{"argggs_OuterProduct", "\[RuleDelayed]", 
                 RowBox[{
                  RowBox[{"Signature", "[", 
                   RowBox[{"gaOrdering", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "argggs"}], ",", 
                    RowBox[{
                    "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"",
                     "]"}]}], "]"}], "]"}], "*", 
                  RowBox[{"OuterProduct", "@@", 
                   RowBox[{"(", 
                    RowBox[{"gaSort", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "argggs"}], ",", 
                    RowBox[{
                    "theOption", "[", "\"\<gaNonCommutativeMonomialOrder\>\"",
                     "]"}]}], "]"}], ")"}]}]}]}], "}"}]}], ")"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "basisSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
        RowBox[{
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"gaGradeList", "/@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "expr"}], ")"}]}], "]"}], "]"}], "===", 
         RowBox[{"{", "1", "}"}]}]}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaVersorToSumOfBlades", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaVersorToSumOfBlades", "::", "argument"}], ",", "expr"}], 
         "]"}], ";", "expr"}], ")"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
   ";"}]], "Input",
 CellLabel->
  "In[1299]:=",ExpressionUUID->"735ee708-19bb-48d2-97d2-3768b197d6b4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaBladeToSumOfVersors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"CoefficientFunction", "\[Rule]", "gaPE"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeToSumOfVersors", "::", "argument"}], "=", 
   "\"\<The argument `1` is not recognised as a outer product of grade 1 \
elements (blade).\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[1300]:=",ExpressionUUID->"2c3d5b66-90f2-46fe-adc5-e41bc63f311a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionBladeToSumOfVersors", "[", "\"\<CoefficientFunction\>\"", 
     "]"}], "=", 
    "\"\<Any transformation (i.e. with head Function[]), for example, \
CoefficientFunction\[Rule](Expand[gaPE[#]]&) .\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionBladeToSumOfVersors", "[", 
    RowBox[{"\"\<CoefficientFunction\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", "_Function"}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1302]:=",ExpressionUUID->"4758c58f-4bf4-482d-bb0a-f56e00ffa1ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBladeToSumOfVersors", "[", 
       RowBox[{
        RowBox[{"c_.", "*", "expr_OuterProduct"}], ",", 
        RowBox[{"op", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"theOption", ",", 
           RowBox[{"vectors", "=", 
            RowBox[{"List", "@@", "expr"}]}], ",", "allNonTrivialPairs"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaSetNamedOptionValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"gaBladeToSumOfVersors", ",", "#", ",", "theOption"}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{
               "gaOptionCheck", "[", "testOptionBladeToSumOfVersors", "]"}], 
               "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                  "}"}]}], ")"}], "]"}], ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "op", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
              "]"}], "===", "theOption"}], ",", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<CoefficientFunction\>\"", "]"}], 
             "=", 
             RowBox[{"(", 
              RowBox[{"CoefficientFunction", "/.", 
               RowBox[{"Options", "[", "gaBladeToSumOfVersors", "]"}]}], 
              ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"allNonTrivialPairs", "=", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"NestList", "[", 
               RowBox[{"makeContractionPairsForVersorBlade", ",", 
                RowBox[{"{", 
                 RowBox[{"dat", "[", 
                  RowBox[{
                   RowBox[{"pairs", "[", "]"}], ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "expr", "]"}], "]"}]}], "]"}], 
                 "}"}], ",", 
                RowBox[{"Floor", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", "expr", "]"}], "/", "2"}], "]"}]}], 
               "]"}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"pairs", "[", "x__", "]"}], "\[RuleDelayed]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"pairs", "@@", 
                  RowBox[{"Sort", "[", 
                   RowBox[{"{", "x", "}"}], "]"}]}], ")"}], "/;", 
                RowBox[{"!", 
                 RowBox[{"OrderedQ", "[", 
                  RowBox[{"{", "x", "}"}], "]"}]}]}]}], "}"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"Plus", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"makeTermForBlade2Versor", "[", 
               RowBox[{"#", ",", "vectors", ",", 
                RowBox[{
                "theOption", "[", "\"\<CoefficientFunction\>\"", "]"}]}], 
               "]"}], "&"}], "/@", "allNonTrivialPairs"}], ")"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "basisSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
        RowBox[{
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"gaGradeList", "/@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "expr"}], ")"}]}], "]"}], "]"}], "===", 
         RowBox[{"{", "1", "}"}]}]}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBladeToSumOfVersors", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaBladeToSumOfVersors", "::", "argument"}], ",", "expr"}], 
         "]"}], ";", "expr"}], ")"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
   ";"}]], "Input",
 CellLabel->
  "In[1304]:=",ExpressionUUID->"18bd291e-6378-49a5-853a-ecd758f95173"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Orthonormalization  of vector set"
}], "Subsection",ExpressionUUID->"073d5952-6f70-40f1-a78a-cc5a0652eb92"],

Cell["\<\
Implementation of Gram-Schmidt orthogonalization procedure, described in \
Jayme Vaz, jr.& Roldao da Rocha, jr., \[OpenCurlyDoubleQuote]An Introduction \
to Clifford algebras and spinors\[CloseCurlyDoubleQuote],  page 86, item (7) \
[in Exercises] for vectors . The method is available as \
gaOrthogonalize[vec_List, Method->\[CloseCurlyDoubleQuote]GramScmidt\
\[CloseCurlyDoubleQuote]]. Alternatively J. Snygg in \[OpenCurlyDoubleQuote]A \
new approach to differential geometry using Clifford geometric algebra\
\[CloseCurlyDoubleQuote] in Appendix B gives orthonormalization method based \
on metric decomposition (valid in pseudo Riemann space). Orthogonalization \
part (based on Jordan decomposition) is available as Method->\
\[CloseCurlyDoubleQuote]Metric\[CloseCurlyDoubleQuote]. In general they \
provide different answers, since GramSchmidt fixes the first vector and \
modifies only others. \
\>", "Text",ExpressionUUID->"9cb114dc-d077-445d-a421-c10ea22e760e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrthogonalize", "::", "multipleAlgebras"}], "=", 
    "\"\<The vectors `1` are members of different  algebras `2`. \
Orthogonalization works only for the same algebra.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionOrthogonalize", "[", "\"\<Expand\>\"", "]"}], "=", 
   RowBox[{
   "Automatic", "|", "gaPE", "|", "Expand", "|", "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionOrthogonalize", "[", "\"\<Quiet\>\"", "]"}], "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionOrthogonalize", "[", 
    RowBox[{"\"\<Expand\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "Automatic", "|", "gaPE", "|", "Expand", "|", "Identity", "|", 
      "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionOrthogonalize", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1305]:=",ExpressionUUID->"400f5190-4006-47f3-abf7-147f016425b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "syntax", " ", "is", " ", "for", " ", 
    "message"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionOrthogonalize", "[", "\"\<Method\>\"", "]"}], "=", 
     RowBox[{
     "\"\<GramSchmidt(\\\"MaxIterations\\\")\>\"", "|", "\"\<Metric\>\""}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionOrthogonalize", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<GramSchidt\>\"", ",", "\"\<MaxIterations\>\""}], "}"}], 
      "]"}], "=", 
     RowBox[{"HoldForm", "[", 
      RowBox[{"MaxIterations", "->", 
       RowBox[{"Alternatives", "[", 
        RowBox[{"Infinity", ",", "\"\<Non negative integer\>\""}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionOrthogonalize", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"testOptionOrthogonalize", "[", "\"\<Method\>\"", "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionOrthogonalize", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<GramSchmidt\>\"", "|", "\"\<Metric\>\""}], ",", 
           "___Rule"}], "}"}]}], "]"}], "&&", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"testOptionOrthogonalize", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"val", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionOrthogonalize", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<GramSchmidt\>\"", ",", "\"\<MaxIterations\>\""}], "}"}], 
       ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{"Infinity", ",", 
         RowBox[{"_Integer", "?", "NonNegative"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionOrthogonalize", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[1310]:=",ExpressionUUID->"d8f8748e-424d-4696-b00a-66f5b0670c57"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orthogonalizeMetric", "[", 
   RowBox[{"vec_List", ",", 
    RowBox[{"quiet_", "?", "BooleanQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theMetric", ",", "aTrasf", ",", "aJF"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"theMetric", "=", 
      RowBox[{"Outer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaPE", "[", 
          RowBox[{"InnerProduct", "[", "##", "]"}], "]"}], "&"}], ",", "vec", 
        ",", "vec"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GeometricAlgebra`p`printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"\"\<Metric coefficients are\>\"", ",", 
          RowBox[{"MatrixForm", "[", "theMetric", "]"}]}], "}"}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"aTrasf", ",", "aJF"}], "}"}], "=", 
      RowBox[{"JordanDecomposition", "[", "theMetric", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "should", " ", "here", " ", "we", " ", "use", " ", "inverse", " ", 
        "or", " ", "as", " ", "alternative", " ", "just", " ", 
        RowBox[{"vec", ".", "aTrasf"}]}], ",", " ", 
       RowBox[{"different", " ", "choices"}]}], "  ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Inverse", "[", "aTrasf", "]"}], ".", "vec"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.887425441619404*^9, 3.887425615017968*^9}, {
   3.8874256781056547`*^9, 3.887425700033421*^9}, {3.8874257627953987`*^9, 
   3.8874257912650557`*^9}, {3.887425977357706*^9, 3.887425997538391*^9}, 
   3.8874260416288424`*^9, {3.887427852047887*^9, 3.8874278869255743`*^9}, {
   3.887428333780035*^9, 3.8874283934840803`*^9}, {3.887428829215342*^9, 
   3.887428830689206*^9}, 3.887428979982267*^9, {3.8874290473710833`*^9, 
   3.887429059444544*^9}},
 CellLabel->
  "In[1316]:=",ExpressionUUID->"28edb509-5468-4482-8c54-f255fd558add"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orthogonalizeGramSchmidt", "[", 
   RowBox[{"vec_List", ",", "quiet_", ",", "expand_", ",", "maxiter_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"helpV", ",", "helpVScalars"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"helpV", "=", 
      RowBox[{"expand", "[", 
       RowBox[{
        RowBox[{"FoldList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaProductPairExpand", "[", 
            RowBox[{
             RowBox[{"GeometricProduct", "[", "##", "]"}], ",", 
             RowBox[{"Sequence", "@@", "opProductPairExpand"}]}], "]"}], 
           "&"}], ",", "1", ",", "vec"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "need", " ", "to", " ", "implement", " ", "partial", " ", 
       "orthogonalization"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "maxiter", ",", "\[IndentingNewLine]", "Infinity", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"helpVScalars", "=", 
         RowBox[{"gaGetMV", "@@@", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"helpV", ",", 
             RowBox[{"List", "/@", 
              RowBox[{"Range", "[", 
               RowBox[{"0", ",", 
                RowBox[{"Length", "[", "vec", "]"}]}], "]"}]}]}], "}"}], 
           "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"GeometricProduct", "@@@", 
         RowBox[{"MapAt", "[", 
          RowBox[{"gaReverse", ",", 
           RowBox[{"Partition", "[", 
            RowBox[{"helpVScalars", ",", "2", ",", "1"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", "_Integer", ",", 
       RowBox[{
       "Print", "[", 
        "\"\<Truncated GramSchmidt orthogonalization procedure not \
implemented.\>\"", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[1317]:=",ExpressionUUID->"f604c933-3d5a-4b10-8e06-b62f2aee4b7b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaOrthogonalize", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<Metric\>\"", "}"}]}], ",", 
     RowBox[{"Expand", "\[Rule]", "gaPE"}], ",", 
     RowBox[{"Quiet", "->", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthogonalize", "[", 
    RowBox[{"vec_List", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", "gaOrthogonalize", "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"al", "=", 
        RowBox[{"gaGetAlgebra", "/@", "vec"}]}], ",", "theOption", ",", 
       RowBox[{"opProductPairExpand", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "op", "}"}], ",", 
          RowBox[{"Options", "[", "gaProductPairExpand", "]"}]}], "]"}]}], 
       ",", "theMetric", ",", "helpV", ",", "helpVScalars", ",", "rezult"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"DeleteDuplicates", "[", "al", "]"}], "]"}], "=!=", "1"}], 
        ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOrthogonalize", "::", "multipleAlgebras"}], ",", "vec", 
           ",", "al"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaOrthogonalize", ",", "#", ",", "theOption"}], "}"}], 
          ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionOrthogonalize", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"First", "/@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"{", "op", "}"}], ",", 
           RowBox[{"Options", "[", "gaOrthogonalize", "]"}]}], "]"}]}], 
        ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         RowBox[{"Method", "/.", 
          RowBox[{"Options", "[", "gaOrthogonalize", "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "List"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
         RowBox[{"Expand", "/.", 
          RowBox[{"Options", "[", "gaOrthogonalize", "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"Options", "[", "gaOrthogonalize", "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"GeometricAlgebra`p`printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Orthogonalization method is \>\"", ",", 
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "}"}], 
         "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
        "\[IndentingNewLine]", "\"\<Metric\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"orthogonalizeMetric", "[", 
         RowBox[{"vec", ",", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "\"\<GramSchmidt\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], "]"}], 
            "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}], "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"\"\<MaxIterations\>\"", "/.", 
               RowBox[{"Rest", "[", 
                RowBox[{"(", 
                 RowBox[{"Method", "/.", 
                  RowBox[{"Options", "[", "gaOrthogonalize", "]"}]}], ")"}], 
                "]"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"\"\<MaxIterations\>\"", "->", "Infinity"}], 
              "}"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"orthogonalizeGramSchmidt", "[", 
          RowBox[{"vec", ",", 
           RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
           RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
           RowBox[{"theOption", "[", "\"\<MaxIterations\>\"", "]"}]}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1318]:=",ExpressionUUID->"4fc3c0a8-cafc-4cbd-a0b9-d43131079d3d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linear equation solving "
}], "Subsection",ExpressionUUID->"f9892ec5-e908-4215-a4cf-0a7f89fa3b11"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Sylvester equation solvers "
}], "Subsubsection",ExpressionUUID->"261a7080-1915-4a2e-9da0-5a68060c863f"],

Cell["\<\
The general dimension solver is implemented by forward nesting. In the \
article [Shirokov2020]  it was given by recursive algorithm.  Explicit \
formulas can be used for N\[LessEqual]5. \
\>", "Text",ExpressionUUID->"9a565e42-1531-417c-a796-88935052ed37"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "::", "zero"}], "=", 
   "\"\<The value of helpD MV `1` is zero. Try the alternative (other side \
multiplication) formula (to do yet).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1320]:=",ExpressionUUID->"0909644d-152d-426a-94af-e734fd27572e"],

Cell["\<\
General dimension case, when taking scalar part is realized with gaGetMV[ \
,{0}]. This is preferable with numeric inputs.\
\>", "Text",ExpressionUUID->"7d137e0b-63b1-46e2-9911-fe5111ff955d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"solSylvesterDetFromRight", "[", 
   RowBox[{
   "mvA_", ",", "mvB_", ",", "mvC_", ",", "theAlgebra_Cl", ",", 
    "\"\<gaGetMV\>\""}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theNumberOfNestLevels", "=", 
       RowBox[{"(", 
        RowBox[{"2", "^", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/", 
           "2"}], "]"}]}], ")"}]}], ",", "dataForDandF", ",", "mvd", ",", 
      "mvF", ",", "dataForhelpD", ",", "answer"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dataForDandF", "=", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"k", "="}], "*)"}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"b_k", "="}], "*)"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", 
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], 
                  ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"mvB", ",", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}]}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"B_k", "="}], "*)"}], 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"mvB", ",", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"theNumberOfNestLevels", "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"mvB", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}]}], ",", "mvB"}], "}"}], ",", 
          "theNumberOfNestLevels"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mvd", "=", 
      RowBox[{"-", 
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"gaPE", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "*", 
               RowBox[{"GeometricProduct", "@@", 
                RowBox[{"Table", "[", 
                 RowBox[{"mvA", ",", 
                  RowBox[{"{", 
                   RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
              ")"}], "]"}], "&"}], "/@", "dataForDandF"}], ")"}]}], "]"}]}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"mvF", "=", 
      RowBox[{"Plus", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"GeometricProduct", "@@", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"GeometricProduct", "@@", 
                RowBox[{"Table", "[", 
                 RowBox[{"mvA", ",", 
                  RowBox[{"{", 
                   RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}]}], 
                   "}"}]}], "]"}]}], ")"}], ",", "mvC", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}]}], ")"}], 
          "&"}], "/@", 
         RowBox[{"Most", "[", 
          RowBox[{"Most", "[", "dataForDandF", "]"}], "]"}]}], ")"}]}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"dataForhelpD", "=", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"k", "="}], "*)"}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"d_k", "="}], "*)"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", 
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], 
                  ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"mvd", ",", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}]}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"D_k", "="}], "*)"}], 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"mvd", ",", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"theNumberOfNestLevels", "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"mvd", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}]}], ",", "mvd"}], "}"}], ",", 
          RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], ",", 
        RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"answer", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"dataForhelpD", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ")"}], "*", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"dataForhelpD", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "3"}], "]"}], "]"}], "-", 
          RowBox[{"dataForhelpD", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ",", "mvF"}], 
        "]"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[1321]:=",ExpressionUUID->"807d5ecd-b32c-4819-91ed-b8b099ea6cf5"],

Cell["\<\
General dimension case, when taking scalar part is realized with \
gaNonScalarGradeInverse[ ]. This is preferable with symbolic inputs since the \
answer will not contain grade projectors.\
\>", "Text",ExpressionUUID->"aec00b51-cb0e-4f37-aeb9-cb3e23f571d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{
    "mvA_", ",", "mvB_", ",", "mvC_", ",", "theAlgebra_Cl", ",", 
     "\"\<gaNonScalarGradeInverse\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theNumberOfNestLevels", "=", 
        RowBox[{"(", 
         RowBox[{"2", "^", 
          RowBox[{"Ceiling", "[", 
           RowBox[{
            RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], "/",
             "2"}], "]"}]}], ")"}]}], ",", "dataForDandF", ",", "mvd", ",", 
       "mvF", ",", "dataForhelpD", ",", "answer"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dataForDandF", "=", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"k", "="}], "*)"}], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"b_k", "="}], "*)"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}]}], 
                   ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"mvB", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "+", 
                  RowBox[{"gaNonZeroGradeInverse", "[", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"mvB", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "]"}]}], 
                 ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"B_k", "="}], "*)"}], 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"mvB", ",", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "-", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"theNumberOfNestLevels", "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"mvB", "+", 
                 RowBox[{"gaNonZeroGradeInverse", "[", "mvB", "]"}]}], ")"}], 
               "/", "2"}]}], ",", "mvB"}], "}"}], ",", 
           "theNumberOfNestLevels"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mvd", "=", 
       RowBox[{"-", 
        RowBox[{"Expand", "[", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "*", 
                RowBox[{"GeometricProduct", "@@", 
                 RowBox[{"Table", "[", 
                  RowBox[{"mvA", ",", 
                   RowBox[{"{", 
                    RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
               ")"}], "]"}], "&"}], "/@", "dataForDandF"}], ")"}]}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mvF", "=", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"GeometricProduct", "@@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"GeometricProduct", "@@", 
                 RowBox[{"Table", "[", 
                  RowBox[{"mvA", ",", 
                   RowBox[{"{", 
                    RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}]}], 
                    "}"}]}], "]"}]}], ")"}], ",", "mvC", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "-", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}]}], ")"}], 
           "&"}], "/@", 
          RowBox[{"Most", "[", 
           RowBox[{"Most", "[", "dataForDandF", "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"dataForhelpD", "=", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"k", "="}], "*)"}], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"d_k", "="}], "*)"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "/", 
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], 
                   ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"mvd", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "+", 
                  RowBox[{"gaNonZeroGradeInverse", "[", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"mvd", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "]"}]}], 
                 ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"D_k", "="}], "*)"}], 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"mvd", ",", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "-", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"theNumberOfNestLevels", "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"mvB", "+", 
                 RowBox[{"gaNonZeroGradeInverse", "[", "mvB", "]"}]}], ")"}], 
               "/", "2"}]}], ",", "mvd"}], "}"}], ",", 
           RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"dataForhelpD", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "2"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", " ", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", 
           RowBox[{"dataForhelpD", "[", 
            RowBox[{"[", 
             RowBox[{"2", ",", "2"}], "]"}], "]"}]}], "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"dataForhelpD", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"dataForhelpD", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "3"}], "]"}], "]"}], "-", 
             RowBox[{"dataForhelpD", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ",", "mvF"}], 
           "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1322]:=",ExpressionUUID->"44ffa5f5-4460-4526-bfd7-1285b4b5e654"],

Cell["Explicit optimized formulas for dimensions n<=5.", "Text",ExpressionUUID->"c2c48508-6709-4e7f-9ce2-0bc739ee5b22"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{"mvA_", ",", "mvB_", ",", "mvC_", ",", "5"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftMV", "=", "mvA"}], ",", 
       RowBox[{"rightMV", "=", "mvB"}], ",", 
       RowBox[{"freeMV", "=", "mvC"}], ",", "coeffDfor5", ",", "coeffFfor5", 
       ",", "detD"}], "}"}], ",", 
     RowBox[{
      RowBox[{"coeffDfor5", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "leftMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"rightMV", "+", 
             RowBox[{"gaReverse", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
               "3"}], "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
               "3"}], "]"}]}], ")"}]}], "-", 
          RowBox[{"leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
                "3"}], "]"}]}]}], ")"}]}], "+", 
          RowBox[{"rightMV", "\[GeometricProduct]", 
           RowBox[{"gaReverse", "[", "rightMV", "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
             "3"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"coeffFfor5", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "freeMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaReverse", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
               "3"}], "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
               "3"}], "]"}]}], ")"}]}], "-", 
          RowBox[{"freeMV", "\[GeometricProduct]", 
           RowBox[{"gaReverse", "[", "rightMV", "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
             "3"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"detD", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"coeffDfor5", "\[GeometricProduct]", 
          RowBox[{"gaReverse", "[", "coeffDfor5", "]"}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], ",", 
            "3"}], "]"}], "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{"coeffDfor5", "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], 
               ",", "3"}], "]"}]}], ",", "3"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "detD", "]"}], "]"}], "]"}], "]"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", "detD"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", "\"\<Wrong answer, the formula contains error\>\"", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "detD"}], ")"}], "*", 
           RowBox[{"gaReverse", "[", "coeffDfor5", "]"}]}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], ",", 
            "3"}], "]"}], "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{"coeffDfor5", "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], 
               ",", "3"}], "]"}]}], ",", "3"}], "]"}], "\[GeometricProduct]", 
          "coeffFfor5"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1323]:=",ExpressionUUID->"156b6d13-ae86-4a24-9acd-0258ce2011de"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{"mvA_", ",", "mvB_", ",", "mvC_", ",", "4"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftMV", "=", "mvA"}], ",", 
       RowBox[{"rightMV", "=", "mvB"}], ",", 
       RowBox[{"freeMV", "=", "mvC"}], ",", "coeffDfor4", ",", "coeffFfor4", 
       ",", "detD"}], "}"}], ",", 
     RowBox[{
      RowBox[{"coeffDfor4", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "leftMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"rightMV", "+", 
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
              "]"}]}], ")"}]}], "-", 
          RowBox[{"leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
               "]"}]}]}], ")"}]}], "+", 
          RowBox[{"rightMV", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
           "\[GeometricProduct]", 
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"coeffFfor4", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "freeMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
              "]"}]}], ")"}]}], "-", 
          RowBox[{"freeMV", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
           "\[GeometricProduct]", 
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"detD", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"coeffDfor4", "\[GeometricProduct]", 
          RowBox[{"gaCliffordConjugate", "[", "coeffDfor4", "]"}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor4", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor4", "]"}]}], ",", "3"}], 
           "]"}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "detD", "]"}], "]"}], "]"}], "]"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", "detD"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", "\"\<Wrong answer, the formula contains error\>\"", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "detD"}], ")"}], "*", 
           RowBox[{"gaCliffordConjugate", "[", "coeffDfor4", "]"}]}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor4", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor4", "]"}]}], ",", "3"}], 
           "]"}], "\[GeometricProduct]", "coeffFfor4"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1324]:=",ExpressionUUID->"5675d625-6002-4f65-881d-041d21bfb4aa"],

Cell["\<\
Note, that explicit formulas for n=1,2,3 is for equation AX+XB==C,  whereas \
for n=4,5 is for AX-XB==C (the signs!), therefore rightMV=-mvB in order to \
match general call from gaLinearSolve\
\>", "Text",ExpressionUUID->"80f63ccf-7158-487d-9d88-3c6ae67b51bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{"mvA_", ",", "mvB_", ",", "mvC_", ",", 
     RowBox[{"3", "|", "2", "|", "1"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftMV", "=", "mvA"}], ",", 
       RowBox[{"rightMV", "=", 
        RowBox[{"-", "mvB"}]}], ",", 
       RowBox[{"freeMV", "=", "mvC"}], ",", "helpD", ",", "detD", ",", 
       "helpDInverse"}], "}"}], ",", 
     RowBox[{
      RowBox[{"helpD", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{
          RowBox[{"leftMV", "\[GeometricProduct]", "leftMV"}], "+", 
          RowBox[{"rightMV", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], "+", 
          RowBox[{"leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"rightMV", "+", 
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], 
            ")"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"detD", "=", 
       RowBox[{"gaPlainRepresentation", "[", 
        RowBox[{"gaAssociationTogether", "[", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaDeterminantOfMV", "[", "helpD", "]"}], "]"}], "]"}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", "detD", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", "detD"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"helpDInverse", "=", 
          RowBox[{"gaInverse", "[", "helpD", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"helpDInverse", "\[GeometricProduct]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"leftMV", "\[GeometricProduct]", "freeMV"}], "+", 
            RowBox[{"freeMV", "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}]}], 
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\n", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1325]:=",ExpressionUUID->"e134cd94-e06e-474c-8530-47f73a8a8d71"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". All linear equation solvers are wrapped by single command gaLinearSolve[ ]"
}], "Subsubsection",ExpressionUUID->"e0588dfe-52f4-4fd0-b517-25b6647b3a29"],

Cell["\<\
At the moment only Sylvester equation (written in explicit form as \
AX+XB+C==0) can be solved by general method described by D. Shirokov \
\[OpenCurlyDoubleQuote]On basis-free solution to Sylvester equation in \
geometric algebra\[CloseCurlyDoubleQuote] (in print ).\
\>", "Text",ExpressionUUID->"a64dd85f-d558-49ac-adf5-122755a29978"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "::", "Type"}], "=", 
   "\"\<The equation `1` was not recognized as Sylvester equation AX-XB+C==0. \
gaLinearSolve at the moment can solve only this type of equation written in \
the above explicit form.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "::", "SylvesterDimensions"}], "=", 
   "\"\<Explicit formula for algebra of vector space dimension `1` is not \
implemented, will use ExplicitFormula -> \\\"gaGetMV\\\".\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1326]:=",ExpressionUUID->"b294a9c4-4e7f-4701-9335-8a80deab1924"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLinearSolve", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Sylvester\>\"", ",", " ", 
        RowBox[{"ExplicitFormula", "\[Rule]", "True"}]}], "}"}]}], ",", 
     RowBox[{"Expand", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[1328]:=",ExpressionUUID->"005d52ff-aa6e-4166-b157-9c9d58b00584"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "[", 
    RowBox[{
     RowBox[{"eq_Equal", "|", " ", 
      RowBox[{"{", "eq_Equal", "}"}]}], ",", 
     RowBox[{
      RowBox[{"MV", "[", "x_", "]"}], "|", 
      RowBox[{"{", 
       RowBox[{"MV", "[", "x_", "]"}], "}"}]}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theAlgebra", ",", "the", ",", 
       RowBox[{"quiet", "=", 
        RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", 
       RowBox[{"lhs", "=", 
        RowBox[{"Subtract", "@@", "eq"}]}], ",", "freeMV", ",", 
       "termsWithVars", ",", "extractRight", ",", "pureMV", ",", "leftMV", 
       ",", "rightMV"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"theAlgebra", "=", 
       RowBox[{"gaGetAlgebra", "[", "lhs", "]"}]}], ";", 
      RowBox[{
       RowBox[{"the", "[", "Method", "]"}], "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"gaLinearSolve", ",", "Method"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"determine", " ", "Sylvester", " ", "equation", " ", 
         RowBox[{"structure", ":", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"A", " ", 
             RowBox[{"MV", "[", "x", "]"}]}], " ", "-", 
            RowBox[{
             RowBox[{"MV", "[", "x", "]"}], " ", "B"}]}], "\[Equal]", " ", 
           "C"}]}]}], ",", " ", 
        RowBox[{
         RowBox[{"with", " ", "A"}], "=", "leftMV"}], ",", 
        RowBox[{"B", "=", "rightMV"}], ",", 
        RowBox[{"C", "=", "freeMV"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"freeMV", "=", 
       RowBox[{"lhs", "/.", 
        RowBox[{
         RowBox[{"MV", "[", "x", "]"}], "\[RuleDelayed]", "0"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"termsWithVars", "=", 
       RowBox[{"(", 
        RowBox[{"lhs", "-", "freeMV"}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pureMV", "=", 
       RowBox[{"termsWithVars", "/.", 
        RowBox[{"{", 
         RowBox[{"_GeometricProduct", "\[RuleDelayed]", "0"}], "}"}]}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<The free term is \>\"", ",", "freeMV"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<The term with bare (i.e. either side) unknown is \>\"", ",", 
            "pureMV"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"leftMV", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"termsWithVars", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"anyScalar_.", "*", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any__", ",", 
                RowBox[{"MV", "[", "x", "]"}]}], "]"}]}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{
             RowBox[{"anyScalar", "*", 
              RowBox[{"GeometricProduct", "[", "any", "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "any", "}"}], ",", "_MV"}], "]"}]}]}], "}"}]}], 
         ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"_MV", "\[Rule]", "0"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<The LHS MV (with the unknown in the RHS) is \>\"", ",", 
           "leftMV"}], "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"extractRight", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"termsWithVars", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"anyScalar_.", "*", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{
                RowBox[{"MV", "[", "x", "]"}], ",", "any__"}], "]"}]}], "]"}],
             "\[RuleDelayed]", 
            RowBox[{
             RowBox[{"anyScalar", "*", 
              RowBox[{"GeometricProduct", "[", "any", "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "any", "}"}], ",", "_MV"}], "]"}]}]}], "}"}]}], 
         ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"_MV", "\[Rule]", "0"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"join", " ", "terms", " ", "scalar", "*", 
        RowBox[{"MV", "[", "x", "]"}], " ", "to", " ", "right"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rightMV", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"extractRight", "+", "pureMV"}], ")"}], "/.", 
        RowBox[{
         RowBox[{"MV", "[", "x", "]"}], "\[Rule]", "1"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{"quiet", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<The RHS MV (with the unknown in the LHS + bare unknown) is \
\>\"", ",", "extractRight"}], "}"}], "\[IndentingNewLine]", "}"}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "If", " ", "other", " ", "than", " ", "Sylvester", " ", "equation", 
        " ", "is", " ", "provided", " ", "warn", " ", "and", " ", "do", " ", 
        "nothing"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{
                  RowBox[{"MV", "[", "x", "]"}], ",", "rightMV"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"leftMV", ",", 
                  RowBox[{"MV", "[", "x", "]"}]}], "]"}], "+", "freeMV"}], 
               ")"}], "-", "lhs"}], "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{
            RowBox[{"the", "[", "Method", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<Sylvester\>\"", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"ExplicitFormula", "/.", 
              RowBox[{"Rest", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"the", "[", "Method", "]"}], "}"}], ",", "1"}], 
                "]"}], "]"}]}], ")"}], ",", 
            RowBox[{"True", "|", "\"\<True\>\""}], ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"0", "<", 
               RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}], 
               "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"MV", "[", "x", "]"}], "->", 
                RowBox[{"solSylvesterDetFromRight", "[", 
                 RowBox[{"leftMV", ",", 
                  RowBox[{"-", "rightMV"}], ",", 
                  RowBox[{"-", "freeMV"}], ",", 
                  RowBox[{
                  "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaLinearSolve", "::", "SylvesterDimensions"}], ",", 
                 
                 RowBox[{
                 "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
                "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "x", "]"}], "->", 
                 RowBox[{"solSylvesterDetFromRight", "[", 
                  RowBox[{"leftMV", ",", 
                   RowBox[{"-", "rightMV"}], ",", 
                   RowBox[{"-", "freeMV"}], ",", "theAlgebra", ",", 
                   "\"\<gaGetMV\>\""}], "]"}]}], "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"False", "|", "\"\<False\>\"", "|", "\"\<gaGetMV\>\""}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "general", " ", "method", " ", "using", " ", "projector"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"MV", "[", "x", "]"}], "->", 
              RowBox[{"solSylvesterDetFromRight", "[", 
               RowBox[{"leftMV", ",", 
                RowBox[{"-", "rightMV"}], ",", 
                RowBox[{"-", "freeMV"}], ",", "theAlgebra", ",", 
                "\"\<gaGetMV\>\""}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", "\"\<gaNonScalarGradeInverse\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"MV", "[", "x", "]"}], "->", 
              RowBox[{"solSylvesterDetFromRight", "[", 
               RowBox[{"leftMV", ",", 
                RowBox[{"-", "rightMV"}], ",", 
                RowBox[{"-", "freeMV"}], ",", "theAlgebra", ",", 
                "\"\<gaNonScalarGradeInverse\>\""}], "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaLinearSolve", "::", "Type"}], ",", "eq"}], "]"}], ";", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1329]:=",ExpressionUUID->"7907ef6a-cdad-4c37-81f5-af96b87b1e06"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Functions computed by characteristic polynomial formula (gaFunctionOfMV[])"
}], "Subsection",ExpressionUUID->"d12007b8-931e-432b-afa6-3389e91f4650"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Method selection and option determination"
}], "Subsubsection",ExpressionUUID->"f2173d66-86a4-4ad8-8d3e-c340efe42b78"],

Cell[TextData[{
 "Methods which uses matrix representations  ",
 StyleBox["gaCharacteristicPolynomial[] ",
  FontWeight->"Bold"],
 "is implemented after ",
 StyleBox["gaExpOfMV[]",
  FontWeight->"Bold"],
 ", which is defined here. In order to avoid listing of these functions in \
forward definitions section we moved implementation of this methods after "
}], "Text",ExpressionUUID->"4abaca1c-120d-4802-affb-6d86dcc4f8c3"],

Cell["\<\
Algorithm based on characteristic polynomials formally outputs complex \
coefficients, though in fact they are always numerically real. \
\>", "Text",ExpressionUUID->"81ca2e9a-c596-4793-903f-6bd6fb1a298d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaFunctionOfMV", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Expand", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Quiet", "\[Rule]", "False"}], ",", " ", 
      RowBox[{"Method", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<CoordinateFree\>\"", ",", 
         RowBox[{"gaFormula", "->", "\"\<ScalarPartInSum\>\""}]}], "}"}]}], 
      ",", 
      RowBox[{"Inactive", "->", "False"}], ",", 
      RowBox[{"OutputForm", "->", "\"\<RootSum\>\""}], ",", 
      RowBox[{"gaDiagonalizableQ", "->", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "call", " ", "is", " ", "used", " ", "to", 
    " ", "print", " ", "valid", " ", "option", " ", "pattern", " ", "for", 
    " ", "user"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", "\"\<Expand\>\"", "]"}], "=", 
   RowBox[{
   "True", "|", "False", "|", "\"\<Automatic\>\"", "|", "Automatic", "|", 
    "gaProductExpand", "|", "gaPE", "|", "Identity", "|", 
    "\"\<any transformation (i.e with head Function[]) of expression\>\""}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", "\"\<Method\>\"", "]"}], "=", 
   "\"\<CoordinateFree \
(gaFormula->\\\"ScalarPartInSum\\\"|\\\"ScalarPartOutOfSum\\\") | Coordinate \
()\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<CoordinateFree\>\"", ",", "\"\<gaFormula\>\""}], "}"}], 
    "]"}], "=", 
   RowBox[{"HoldForm", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<\\\"CoordinateFree\\\"\>\"", ",", 
      RowBox[{
      "gaFormula", "->", 
       "\"\<\\\"ScalarPartInSum\\\"|\\\"ScalarPartOutOfSum\\\"\>\""}]}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", "\"\<Quiet\>\"", "]"}], "=", 
   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", "\"\<Inactive\>\"", "]"}], "=", 
   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", "\"\<OutputForm\>\"", "]"}], "=", 
   "\"\<Automatic or RootSum or Sum \
(\\\"CoefficientDomain\\\"->Reals|Complexes, \
gaReplaceImaginary->True|False)\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Sum\>\"", ",", "\"\<CoefficientDomain\>\""}], "}"}], "]"}], 
   "=", 
   RowBox[{"Reals", "|", "Complexes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Sum\>\"", ",", "\"\<gaReplaceImaginary\>\""}], "}"}], "]"}],
    "=", 
   RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionFunctionOfMV", "[", "\"\<gaDiagonalizableQ\>\"", "]"}],
     "=", 
    RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "two", " ", "argument", " ", "cal", " ", "is", " ", "used", " ", "for", 
    " ", "actual", " ", "check"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<Expand\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{
     "True", "|", "\"\<Automatic\>\"", "|", "Automatic", "|", 
      "gaProductExpand", "|", "gaPE", "|", "Identity", "|", "_Function"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"\"\<CoordinateFree\>\"", "|", "\"\<Coordinate\>\""}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<CoordinateFree\>\"", "|", "\"\<Coordinate\>\""}], ",", 
         "___Rule"}], "}"}]}], "]"}], "&&", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"Rest", "[", "val", "]"}], ",", 
       RowBox[{
        RowBox[{"testOptionFunctionOfMV", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"val", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ")"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<CoordinateFree\>\"", ",", "\"\<gaFormula\>\""}], "}"}], 
     ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"\"\<ScalarPartInSum\>\"", "|", "\"\<ScalarPartOutOfSum\>\""}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<Inactive\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<OutputForm\>\"", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<RootSum\>\"", ",", "\"\<Sum\>\"", ",", "\"\<Automatic\>\"", ",", 
       "Automatic"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<OutputForm\>\"", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "\"\<RootSum\>\"", "|", "\"\<Sum\>\"", "|", "\"\<Automatic\>\"", "|",
           "Automatic"}], ",", "___Rule"}], "}"}]}], "]"}], "&&", 
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"Rest", "[", "val", "]"}], ",", 
       RowBox[{
        RowBox[{"testOptionFunctionOfMV", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"val", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], ")"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Sum\>\"", ",", "\"\<CoefficientDomain\>\""}], "}"}], ",", 
     "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{"Reals", ",", "Complexes"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Sum\>\"", ",", "\"\<gaReplaceImaginary\>\""}], "}"}], ",", 
     "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionFunctionOfMV", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
   ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "refuse", " ", "to", " ", "accept", " ", "any", " ", "not", " ", 
    "explicitly", " ", "listed", " ", "suboptions"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionFunctionOfMV", "[", 
    RowBox[{"\"\<gaDiagonalizableQ\>\"", ",", "val_"}], "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->
  "In[1330]:=",ExpressionUUID->"4445011d-e7af-493a-9dfa-7c506fbdd622"],

Cell[TextData[{
 "Separate coordinate and coordinate free implementations and option \
handling. ",
 StyleBox["gaFunctionOfMV[ ]",
  FontWeight->"Bold"],
 " calls  ",
 StyleBox["functionOfMVCoordinate",
  FontWeight->"Bold"],
 " or ",
 StyleBox["functionOfMVCoordinateFree",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"4606e918-5999-4e50-af68-ad00bfcc7310"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFunctionOfMV", "::", "method"}], "=", 
   "\"\<Invalid Method `1` specified. Choosing \\\"CoordinateFree\\\".\>\""}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaFunctionOfMV", "::", "CoefficientDomain"}], "=", 
    "\"\<The function `1` seems cannot be made real. CoefficientDomain is set \
to \\\"Complexes\\\".\>\""}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaFunctionOfMV", "::", "ReplaceImaginary"}], "=", 
    "\"\<Attempt to replace imaginary unit by basis element which squares to \
-1 detected! This is dagerous and in many cases yield wrong result.\>\""}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaFunctionOfMV", "::", "nondiagonalizable"}], "=", 
    "\"\<Warning. The MV `1` is nondiagonalizable. Summation inside RootSum \
and Sum will fail. Uses option Inactive->True to investigate.\>\""}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFunctionOfMV", "[", 
    RowBox[{
     RowBox[{"thefunction", ":", 
      RowBox[{"(", 
       RowBox[{"_Function", "|", "_Symbol"}], ")"}]}], ",", "expr_", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"exprExpanded", "=", 
        RowBox[{"gaPE", "[", "expr", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"set", " ", "and", " ", "test", " ", "option", " ", "values"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaFunctionOfMV", ",", "#", ",", "theOption"}], "}"}], ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionFunctionOfMV", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Method", "/.", 
           RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
         RowBox[{"gaFormula", "/.", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ",", 
            "_String"}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Expand", "/.", 
           RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ")"}]}]}], 
       "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Inactive\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Inactive\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Inactive", "/.", 
           RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaDiagonalizableQ\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaDiagonalizableQ\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"gaDiagonalizableQ", "/.", 
           RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"OutputForm", "/.", 
           RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], ")"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
         RowBox[{
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"(", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"OutputForm", "/.", 
                 RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], "}"}], 
               "]"}], ",", "_String"}], "]"}], ")"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"CoefficientDomain", "->", "Complexes"}], "}"}]}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaReplaceImaginary\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaReplaceImaginary\>\"", "]"}], "=", 
         RowBox[{
          RowBox[{"gaReplaceImaginary", "/.", 
           RowBox[{"(", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"OutputForm", "/.", 
                 RowBox[{"Options", "[", "gaFunctionOfMV", "]"}]}], "}"}], 
               "]"}], ",", "_String"}], "]"}], ")"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"gaReplaceImaginary", "->", "False"}], "}"}]}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
          RowBox[{"True", "|", "\"\<Automatic\>\"", "|", "Automatic"}]}], 
         "]"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], ")"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "chech", " ", "if", " ", "suboption", " ", "values", " ", "were", " ",
          "defined"}], ",", " ", 
        RowBox[{"if", " ", "not", " ", "set", " ", "defaults"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], "=", 
         "\"\<ScalarPartInSum\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], "=", 
         "Complexes"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<CoordinateFree\>\"", "|", 
         RowBox[{"{", 
          RowBox[{"\"\<CoordinateFree\>\"", ",", "___"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"functionOfMVCoordinateFree", "[", 
         RowBox[{"thefunction", ",", "exprExpanded", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Inactive\>\"", "]"}], ",", 
              "Inactive", ",", "Identity"}], "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<gaReplaceImaginary\>\"", "]"}], 
            ",", 
            RowBox[{"theOption", "[", "\"\<gaDiagonalizableQ\>\"", "]"}]}], 
           "}"}]}], "]"}], ",", "\[IndentingNewLine]", "\"\<Coordinate\>\"", 
        ",", 
        RowBox[{"functionOfMVCoordinate", "[", 
         RowBox[{"thefunction", ",", "exprExpanded", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
            RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"theOption", "[", "\"\<Inactive\>\"", "]"}], ",", 
              "Inactive", ",", "Identity"}], "]"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaFunctionOfMV", "::", "method"}], ",", 
           RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}]}], "]"}], ";", 
         RowBox[{"functionOfMVCoordinateFree", "[", 
          RowBox[{"thefunction", ",", "exprExpanded", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"theOption", "[", "\"\<Expand\>\"", "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Inactive\>\"", "]"}], ",", 
               "Inactive", ",", "Identity"}], "]"}], ",", 
             RowBox[{"theOption", "[", "\"\<gaFormula\>\"", "]"}], ",", 
             RowBox[{"theOption", "[", "\"\<OutputForm\>\"", "]"}], ",", 
             RowBox[{"theOption", "[", "\"\<CoefficientDomain\>\"", "]"}], 
             ",", 
             RowBox[{"theOption", "[", "\"\<gaReplaceImaginary\>\"", "]"}], 
             ",", 
             RowBox[{"theOption", "[", "\"\<gaDiagonalizableQ\>\"", "]"}]}], 
            "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1352]:=",ExpressionUUID->"a64ba7f4-1fd9-4131-8801-685b54b99736"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Coordinate free implementation of gaFunctionOfMV[] "
}], "Subsubsection",ExpressionUUID->"16400f24-b463-48fa-abff-e9840c7b1995"],

Cell["\<\
Coordinate free implementation. When Minimal polynomial of matrix has \
multiple roots (i.e. in case of nondiagonalizable matrices), answer can be \
wrong. Trick: add small symbolic part, then compute limiting case. The tick \
gives correct results, however, computations are slow and exact answer may \
not be obtained.\
\>", "Text",ExpressionUUID->"32c21a10-4819-4d66-aa80-ae519b4a97f5"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"functionOfMVCoordinateFree", "[", 
     RowBox[{"thefunction_", ",", "exprExpanded_", ",", 
      RowBox[{"{", 
       RowBox[{
       "quiet_", ",", "expandFunction_", ",", "activate_", ",", "formula_", 
        ",", "outputForm_", ",", "coefficientDomain_", ",", 
        "replaceImaginary_", ",", "warnIfNondiagonalizable_"}], "}"}]}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"theAlg", "=", 
         RowBox[{"gaGetAlgebra", "[", "exprExpanded", "]"}]}], ",", 
        "vectorSpaceDim", ",", "dim", ",", "ch", ",", "c1Rules", ",", 
        "theProblemicFactor", ",", "theFormulaCoordinateFree", ",", 
        "rootsOfChPoly", ",", "realTest", ",", "answer", ",", 
        "realRootPositions", ",", "complexRootPositions", ",", "realRoots", 
        ",", "complexRootPairs", ",", "answerRealRoots", ",", 
        "complexRootPairsReIm", ",", "answerComplexRootsComplexExpand", ",", 
        "\[FormalLambda]"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "dimension", " ", "of", " ", "matrix", " ", "representations"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vectorSpaceDim", "=", 
        RowBox[{"gaDimensionOfVectorSpace", "[", "theAlg", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dim", "=", 
        RowBox[{"gaDimensionOfRepresentation", "[", "theAlg", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<Using Method->\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<CoordinateFree\>\"", ",", "formula"}], "}"}]}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Using OutputForm->\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"outputForm", ",", "coefficientDomain"}], "}"}]}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Using Activate->\>\"", ",", "activate"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Degree of characteristic polynomial is d= \>\"", ",", 
             "dim"}], "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Warn", " ", "if", " ", "MV", " ", "is", " ", "not", " ", 
         "diagonalizable"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"warnIfNondiagonalizable", ",", 
           RowBox[{
            RowBox[{"printDetails", "[", 
             RowBox[{"quiet", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<Warning!\>\"", ",", "Red"}], "]"}], ",", 
                 "\"\<Option gaDiagonalizableQ->True involves polynomial \
factorization operation with ExtensionField->Automatic. Factorization time is \
unpredictable (can take very long).\>\""}], "}"}], "}"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", " ", "[", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"gaDiagonalizableQ", "[", "exprExpanded", "]"}], "]"}],
               ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaFunctionOfMV", "::", "nondiagonalizable"}], ",", 
                "exprExpanded"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
          "]"}], ";"}], "*)"}], " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"At", " ", "the", " ", "moment", " ", 
         RowBox[{"gaDiagonalizableQ", "[", 
          RowBox[{"exprExpanded", ",", 
           RowBox[{
           "Method", "->", "\"\<RegularCharacteristicPolynomial\>\""}]}], 
          "]"}], " ", "has", " ", "problems", " ", "with", " ", "symbolic", 
         " ", "inputs"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"warnIfNondiagonalizable", ",", 
         RowBox[{
          RowBox[{"printDetails", "[", 
           RowBox[{"quiet", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "{", "\"\<Checking if MV is diagonalizable: \>\"", "}"}], ",", 
              RowBox[{"If", " ", "[", 
               RowBox[{
                RowBox[{"gaDiagonalizableQ", "[", 
                 RowBox[{"exprExpanded", ",", 
                  RowBox[{"Method", "->", "\"\<MinimalPolynomial\>\""}]}], 
                 "]"}], ",", "True", ",", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaFunctionOfMV", "::", "nondiagonalizable"}], ",",
                    "exprExpanded"}], "]"}], ";", "False"}]}], "]"}]}], 
             "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"c1Rules", "=", 
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"ch", "[", 
                RowBox[{"1", ",", "k"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", "dim"}], "}"}]}], "]"}], ",", 
             RowBox[{"gaCharacteristicPolynomial", "[", 
              RowBox[{"exprExpanded", ",", "All", ",", 
               RowBox[{"Quiet", "->", "True"}]}], "]"}]}], "]"}], "]"}], ",", 
          
          RowBox[{
           RowBox[{"ch", "[", 
            RowBox[{"1", ",", "0"}], "]"}], "->", 
           RowBox[{"-", "1"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"printDetails", "[", "]"}], " ", "automatically", " ", 
          "inverts", " ", "quit", " ", "value"}], ",", " ", 
         RowBox[{"therefore", " ", "here", " ", 
          RowBox[{"is", " ", "!"}], "quiet"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"Format", "[", 
            RowBox[{
             TagBox[
              RowBox[{"ch", "[", 
               RowBox[{"1", ",", "b_"}], "]"}],
              FullForm], ",", "StandardForm"}], "]"}], ":=", 
           RowBox[{"DisplayForm", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"SubscriptBox", "[", 
                RowBox[{"\"\<C\>\"", ",", 
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<(\>\"", ",", 
                    RowBox[{"ToString", "[", "b", "]"}], ",", "\"\<)\>\""}], 
                   "}"}], "]"}]}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"\"\<(\>\"", ",", "\"\<A\>\"", ",", "\"\<)\>\""}], 
                 "}"}], "]"}]}], "}"}], "]"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<Characteristic coefficients of MV, k=1,...d are \
\!\(\*SubscriptBox[\(C\), \((k)\)]\)(A)=\>\"", ",", "c1Rules"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Characteristic polynomial:\>\"", ",", 
             RowBox[{
              RowBox[{"Sum", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ch", "[", 
                   RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
                  RowBox[{"\[FormalLambda]", "^", "i"}]}], ")"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.", 
              "c1Rules"}]}], "}"}]}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"theProblemicFactor", "=", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\[FormalLambda]", "^", 
             RowBox[{"(", "k", ")"}]}], 
            RowBox[{"(", 
             RowBox[{"k", "+", "1"}], ")"}], "*", 
            RowBox[{"ch", "[", 
             RowBox[{"1", ",", 
              RowBox[{"(", 
               RowBox[{"dim", "-", "k", "-", "1"}], ")"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "0", ",", 
             RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}], "/.", "c1Rules"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Denominator polynomial:\>\"", ",", "theProblemicFactor"}], 
           "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Select", " ", "which", " ", "formula", " ", "to", " ", 
         RowBox[{"use", ":", " ", 
          RowBox[{
          "with", " ", "scalar", " ", "inside", " ", "sum", " ", "or", " ", 
           "outside"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"formula", "===", "\"\<ScalarPartOutOfSum\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theFormulaCoordinateFree", "=", 
           RowBox[{
            RowBox[{"thefunction", "[", "\[FormalLambda]", "]"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"1", "/", "dim"}], "+", 
              RowBox[{"(", 
               RowBox[{"Sum", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"Cancel", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalLambda]", "^", "k"}], "*", 
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"(", 
                    RowBox[{"dim", "-", "i", "-", "k", "-", "2"}], ")"}]}], 
                    "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"dim", "-", "i", "-", "2"}]}], "}"}]}], "]"}], "/.",
                     "c1Rules"}], ")"}], "/", "theProblemicFactor"}], "]"}], 
                   ")"}], "*", "\[IndentingNewLine]", 
                  RowBox[{"gaGetMV", "[", 
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{"exprExpanded", ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"i", "+", "1"}]}], "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Range", "[", "vectorSpaceDim", "]"}]}], "]"}]}], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "0", ",", 
                   RowBox[{"dim", "-", "2"}]}], "}"}]}], "]"}], ")"}]}], 
             ")"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"printDetails", "[", 
           RowBox[{"quiet", ",", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Abstract term sum d1*A^1+d2*A^2+d3*A^3+...+d*A^(d-1) with \
replaced coefficients:\>\"", ",", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"Cancel", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalLambda]", "^", "k"}], "*", 
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"(", 
                    RowBox[{"dim", "-", "i", "-", "k", "-", "2"}], ")"}]}], 
                    "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"dim", "-", "i", "-", "2"}]}], "}"}]}], "]"}], "/.",
                     "c1Rules"}], ")"}], "/", "theProblemicFactor"}], "]"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "0", ",", 
                    RowBox[{"dim", "-", "2"}]}], "}"}]}], "]"}], ".", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"\[FormalCapitalA]", "^", 
                   RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}]}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "0", ",", 
                    RowBox[{"dim", "-", "2"}]}], "}"}]}], "]"}]}]}], "}"}], 
             "}"}]}], "]"}]}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theFormulaCoordinateFree", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"thefunction", "[", "\[FormalLambda]", "]"}], "/", 
              "theProblemicFactor"}], ")"}], "*", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Cancel", "[", 
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"\[FormalLambda]", "^", "k"}], " ", "*", 
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "k", "-", "m", "-", "1"}]}], "]"}]}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"dim", "-", "m", "-", "1"}]}], "}"}]}], "]"}], "/.",
                  "c1Rules"}], "]"}], "*", 
               RowBox[{"gaPE", "[", 
                RowBox[{"GeometricProduct", "@@", 
                 RowBox[{"Table", "[", 
                  RowBox[{"exprExpanded", ",", 
                   RowBox[{"{", "m", "}"}]}], "]"}]}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"m", ",", "0", ",", 
                RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"printDetails", "[", 
           RowBox[{"quiet", ",", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Abstract term sum \
d0*A^0+d1*A^1+d2*A^2+d3*A^3+...+d*A^(d-1) with replaced coefficients:\>\"", 
               ",", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"Cancel", "[", 
                   RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalLambda]", "^", "k"}], " ", "*", 
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "k", "-", "m", "-", "1"}]}], "]"}]}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"dim", "-", "m", "-", "1"}]}], "}"}]}], "]"}], "/.",
                     "c1Rules"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"m", ",", "0", ",", 
                    RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}], ".", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"\[FormalCapitalA]", "^", "i"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "0", ",", 
                    RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}]}]}], "}"}], 
             "\[IndentingNewLine]", "}"}]}], "]"}]}]}], "\[IndentingNewLine]",
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"If", " ", "outputForm", " ", "is", " ", "Automatic"}], ",", 
         " ", 
         RowBox[{
         "decide", " ", "which", " ", "form", " ", "is", " ", "suitable", " ",
           "for", " ", "computed", " ", 
          RowBox[{"function", ".", " ", "When"}], " ", "possible", " ", 
          "prefer", " ", 
          RowBox[{"RootSum", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "outputForm", ",", "\"\<RootSum\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"bug", " ", "fix", " ", "of", " ", 
            RowBox[{"RootSum", ":", " ", "https", ":"}]}], "//", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/",
                "questions"}], "/", "269450"}], "/", "constructing"}], "-", 
            "a", "-", "rootsum", "-", "object", "-", "changes", "-", 
            "existing", "-", "internal", "-", "syntax"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"answerWithBug", "=", 
            RowBox[{"Collect", "[", 
             RowBox[{
              RowBox[{"Cancel", "[", "theFormulaCoordinateFree", "]"}], ",", 
              "_bs", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Hold", "[", "RootSum", "]"}], "@@", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"funlambda", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
                    RowBox[{"\[FormalLambda]", "^", "i"}]}], ")"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.",
                     "c1Rules"}], ")"}]}], "}"}], ",", 
                    RowBox[{"Function", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "\[FormalLambda]", "}"}], ",", "funlambda"}],
                     "}"}]}]}], "]"}], ",", 
                    RowBox[{"Function", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "\[FormalLambda]", "}"}], ",", "#"}], 
                    "}"}]}]}], "}"}]}], ")"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Verbatim", "[", "Function", "]"}], "[", 
                    RowBox[{
                    RowBox[{"{", "v_", "}"}], ",", "body_"}], "]"}], ":>", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"body", "/.", " ", 
                    RowBox[{"v", "->", "#"}]}], "]"}], "&"}], ")"}]}], 
                  "}"}]}], ")"}], "&"}]}], "\[IndentingNewLine]", "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"answer", "=", 
            RowBox[{"(", 
             RowBox[{"answerWithBug", "/.", 
              RowBox[{
               RowBox[{"Hold", "[", "RootSum", "]"}], "->", 
               RowBox[{"activate", "[", "RootSum", "]"}]}]}], ")"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
           "Now", " ", "corrected", " ", "by", " ", "replacing", " ", 
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", "body"}], "]"}], " ", "to", " ", 
            RowBox[{"Function", "[", 
             RowBox[{"x", ",", "body"}], "]"}]}]}], "\[IndentingNewLine]", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"answer", "=", 
           RowBox[{"Collect", "[", 
            RowBox[{
             RowBox[{"Cancel", "[", "theFormulaCoordinateFree", "]"}], ",", 
             "_bs", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"activate", "[", "RootSum", "]"}], "@@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"With", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"funlambda", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
                    RowBox[{"\[FormalLambda]", "^", "i"}]}], ")"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.",
                     "c1Rules"}], ")"}]}], "}"}], ",", 
                    RowBox[{"Function", "@@", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", "funlambda"}], "}"}]}]}], 
                   "]"}], ",", 
                  RowBox[{"Function", "@@", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", "#"}], "}"}]}]}], "}"}]}],
                ")"}], "&"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "\"\<Sum\>\"", 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"coefficientDomain", "===", "Reals"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"realTest", "=", 
              RowBox[{"Cancel", "[", 
               RowBox[{"ComplexExpand", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"thefunction", "[", 
                   RowBox[{"\[FormalA]", "+", 
                    RowBox[{"I", "*", "\[FormalB]"}]}], "]"}], 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"\[FormalC]", "+", 
                    RowBox[{"I", "*", "\[FormalD]"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"\[FormalE]", "+", 
                    RowBox[{"I", "*", "\[FormalF]"}]}], ")"}]}]}], "+", 
                 RowBox[{
                  RowBox[{"thefunction", "[", 
                   RowBox[{"\[FormalA]", "-", 
                    RowBox[{"I", "*", "\[FormalB]"}]}], "]"}], 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"\[FormalC]", "-", 
                    RowBox[{"I", "*", "\[FormalD]"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"\[FormalE]", "-", 
                    RowBox[{"I", "*", "\[FormalF]"}]}], ")"}]}]}]}], "]"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"printDetails", "[", 
              RowBox[{"quiet", ",", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<CoefficientDomain is set to \\\"Reals\\\". Testing if \
function can be made real after summing over single complex conjugate pair of \
roots: \>\"", ",", 
                  RowBox[{"FreeQ", "[", 
                   RowBox[{"realTest", ",", "_Complex"}], "]"}]}], "}"}], 
                "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{"realTest", ",", "_Complex"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaFunctionOfMV", "::", "CoefficientDomain"}], ",", 
                  "thefunction"}], "]"}], ";", 
                RowBox[{"coefficientDomain", "===", "Complexes"}]}]}], "]"}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"rootsOfChPoly", "=", 
           RowBox[{"SolveValues", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Sum", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"ch", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
                    RowBox[{"\[FormalLambda]", "^", "i"}]}], ")"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.", 
                "c1Rules"}], ")"}], "==", "0"}], ",", "\[FormalLambda]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "coefficientDomain", ",", "\[IndentingNewLine]", "Complexes", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"answer", "=", 
             RowBox[{"Collect", "[", 
              RowBox[{
               RowBox[{"Cancel", "[", "theFormulaCoordinateFree", "]"}], ",", 
               "_bs", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"activate", "[", "Sum", "]"}], "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", 
                   RowBox[{"\[FormalLambda]", ",", "rootsOfChPoly"}], "}"}]}],
                  "]"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
            "Reals", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "separate", " ", "real", " ", "and", " ", "complex", " ", 
              "roots"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"realRootPositions", "=", 
              RowBox[{"Position", "[", 
               RowBox[{"rootsOfChPoly", ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Element", "[", 
                    RowBox[{"#", ",", "Reals"}], "]"}], "&"}], ")"}]}], ",", 
                "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"complexRootPositions", "=", 
              RowBox[{"List", "/@", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"Range", "[", "dim", "]"}], ",", 
                 RowBox[{"Flatten", "[", "realRootPositions", "]"}]}], 
                "]"}]}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"printDetails", "[", 
              RowBox[{"quiet", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Real nonzero are roots at positions\>\"", ",", 
                   "realRootPositions"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Complex roots are at positions\>\"", ",", 
                   "complexRootPositions"}], "}"}]}], "}"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"realRoots", "=", 
              RowBox[{"Extract", "[", 
               RowBox[{"rootsOfChPoly", ",", "realRootPositions"}], "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"complexRootPairs", "=", 
                RowBox[{"Partition", "[", 
                 RowBox[{
                  RowBox[{"Sort", "[", 
                   RowBox[{"RootReduce", "[", 
                    RowBox[{"Extract", "[", 
                    RowBox[{"rootsOfChPoly", ",", "complexRootPositions"}], 
                    "]"}], "]"}], "]"}], ",", "2"}], "]"}]}], ";"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"complexRootPairs", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"Transpose", "/@", 
                 RowBox[{"Partition", "[", 
                  RowBox[{
                   RowBox[{"Split", "[", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"RootReduce", "[", 
                    RowBox[{"Extract", "[", 
                    RowBox[{"rootsOfChPoly", ",", "complexRootPositions"}], 
                    "]"}], "]"}], "]"}], " ", ",", 
                    RowBox[{
                    RowBox[{"PossibleZeroQ", "[", 
                    RowBox[{"#1", "-", "#2"}], "]"}], "&"}]}], "]"}], ",", 
                   "2"}], "]"}]}], ",", "1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"complexRootPairsReIm", "=", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"RootReduce", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"(", 
                    RowBox[{"Plus", "@@", "#"}], ")"}]}], "]"}], ",", 
                  RowBox[{"RootReduce", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"I", "/", "2"}], ")"}], 
                    RowBox[{"(", 
                    RowBox[{"Subtract", "@@", "#"}], ")"}]}], "]"}]}], "}"}], 
                "&"}], "/@", "complexRootPairs"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"answerRealRoots", "=", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"Cancel", "[", "theFormulaCoordinateFree", "]"}], ",",
                 "_bs", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"activate", "[", "Sum", "]"}], "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", "realRoots"}], "}"}]}], 
                  "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"answerComplexRootsComplexExpand", "=", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"Cancel", "[", "theFormulaCoordinateFree", "]"}], ",",
                 "_bs", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"activate", "[", "Plus", "]"}], "@@", 
                  RowBox[{"Apply", "[", 
                   RowBox[{
                    RowBox[{"Function", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]1", ",", "\[FormalLambda]2"}], 
                    "}"}], ",", 
                    RowBox[{"RootReduce", "[", 
                    RowBox[{"Cancel", "[", 
                    RowBox[{"ComplexExpand", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", 
                    RowBox[{"\[FormalLambda]1", "+", 
                    RowBox[{"I", "*", "\[FormalLambda]2"}]}]}], "}"}]}], 
                    ")"}], "+", 
                    RowBox[{"(", 
                    RowBox[{"#", "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", 
                    RowBox[{"\[FormalLambda]1", "-", 
                    RowBox[{"I", "*", "\[FormalLambda]2"}]}]}], "}"}]}], 
                    ")"}]}], "]"}], "]"}], "]"}]}], "}"}]}], ",", 
                    "complexRootPairsReIm", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "&"}]}], 
               "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"answer", "=", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{
                "answerComplexRootsComplexExpand", "+", "answerRealRoots"}], 
                ",", "_bs"}], "]"}]}]}], ",", "\[IndentingNewLine]", "_", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaVerify", "::", "missing"}], ",", 
               RowBox[{
               "\"\<CoefficientDomain->\>\"", "<>", "coefficientDomain"}], 
               ",", "\"\<functionOfMVCoordinateFree[]\>\""}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaVerify", "::", "missing"}], ",", 
            "\"\<OutputForm->Automatic\>\"", ",", 
            "\"\<functionOfMVCoordinateFree[]\>\""}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{
          "lastly", " ", "attempt", " ", "to", " ", "replace", " ", 
           "imaginary", " ", "unit", " ", "by", " ", "basis", " ", "element", 
           " ", "which", " ", "squares", " ", "to"}], " ", "-", 
          RowBox[{"1.", " ", "This", " ", "is", " ", "dangerous"}]}], ",", 
         " ", 
         RowBox[{"issue", " ", "warning"}]}], "  ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"replaceImaginary", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"gaFunctionOfMV", "::", "ReplaceImaginary"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
             "attempt", " ", "to", " ", "find", " ", "basis", " ", "element", 
              " ", "which", " ", "commutes", " ", "with", " ", "answer", " ", 
              "and", " ", "squares", " ", "to"}], " ", "-", "1"}], ":", " ", 
            RowBox[{"not", " ", "fully", " ", "implemented"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaI", "[", "theAlg", "]"}], "\[GeometricProduct]", 
                RowBox[{"gaI", "[", "theAlg", "]"}]}], "===", 
               RowBox[{"-", "1"}]}], ")"}], "&&", 
             RowBox[{"OddQ", "[", 
              RowBox[{"gaDimensionOfVectorSpace", "[", "theAlg", "]"}], 
              "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "If", " ", "imaginary", " ", "unit", " ", "will", " ", "hide", 
              " ", "inside", " ", "function", " ", "the", " ", "answer", " ", 
              "will", " ", "be", " ", 
              RowBox[{"wrong", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"answer", "=", 
             RowBox[{"Collect", "[", 
              RowBox[{
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{"Collect", "[", 
                  RowBox[{"answer", ",", "_bs", ",", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Complex", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
                    RowBox[{"(", 
                    RowBox[{"a", "+", 
                    RowBox[{
                    RowBox[{"gaI", "[", "theAlg", "]"}], 
                    "\[GeometricProduct]", "b"}]}], ")"}]}], "}"}]}], ")"}], 
                    "&"}]}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"Times", "->", "GeometricProduct"}], "}"}]}], "]"}],
                ",", "_bs"}], "]"}]}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaVerify", "::", "missing"}], ",", 
               "\"\<gaReplaceImaginary->True\>\"", ",", 
               "\"\<functionOfMVCoordinateFree[]\>\""}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "answer"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[1357]:=",ExpressionUUID->"f4150132-9b78-4d38-9adb-0a1a2b501c4d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Coordinate implementation of gaFunctionOfMV[] (not finished, not all \
options implemented, not recommended)"
}], "Subsubsection",ExpressionUUID->"68b81ff1-b0ea-4a73-b098-092859144eb6"],

Cell["\<\
Coordinate implementation. When Minimal polynomial of matrix has multiple \
roots (i.e. in case of nondiagonalizable matrices), answer can be wrong. \
Trick: add small symbolic part, then compute limiting case. The tick gives \
correct results, however, computations are slow and exact answer may not be \
obtained\
\>", "Text",ExpressionUUID->"b5c3b241-ea00-4d62-b3be-61c3f96a531e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"functionOfMVCoordinate", "[", 
   RowBox[{"thefunction_", ",", "exprExpanded_", ",", 
    RowBox[{"{", 
     RowBox[{"quiet_", ",", "expandFunction_", ",", "activate_"}], "}"}]}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theAlg", "=", 
       RowBox[{"gaGetAlgebra", "[", "exprExpanded", "]"}]}], ",", 
      "basisNoUnit", ",", "dim", ",", "prodExpr", ",", "ch", ",", "chv", ",", 
      "chEq", ",", "chEqv", ",", "be", ",", "y", ",", "denominatorAbstract", 
      ",", "numeratorAbstract", ",", "rootsOfCharacteristicEquation", ",", 
      "sumTermMainPart", ",", "canceledFraction", ",", "tempContainer", ",", 
      "denominatorValuesAtRoots", ",", "sumContainer"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "dimension", " ", "of", " ", "matrix", " ", "representations", " ", 
      "and", " ", "basis", " ", "elements", " ", "with", " ", "scalar", " ", 
      "excluded"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dim", "=", 
      RowBox[{"gaDimensionOfRepresentation", "[", "theAlg", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"basisNoUnit", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"gaOrthonormalBasis", "[", "theAlg", "]"}], ",", "1"}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"printDetails", "[", "]"}], " ", "automatically", " ", 
        "inverts", " ", "quit", " ", "value"}], ",", " ", 
       RowBox[{"therefore", " ", "here", " ", 
        RowBox[{"is", " ", "!"}], "quiet"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"note", " ", "different", " ", "meaning", " ", "of", " ", 
         RowBox[{"ch", "[", 
          RowBox[{"1", ",", ".."}], "]"}], " ", "and", " ", 
         RowBox[{"ch", "[", 
          RowBox[{"baseelem", ",", "..."}], "]"}], " ", "under", " ", 
         "similar", " ", "notation"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Format", "[", 
          RowBox[{
           TagBox[
            RowBox[{"ch", "[", 
             RowBox[{"1", ",", "b_"}], "]"}],
            FullForm], ",", "StandardForm"}], "]"}], ":=", 
         RowBox[{"DisplayForm", "[", 
          RowBox[{"RowBox", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<C\>\"", ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"\"\<(\>\"", ",", 
                  RowBox[{"ToString", "[", "b", "]"}], ",", "\"\<)\>\""}], 
                 "}"}], "]"}]}], "]"}], ",", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<(\>\"", ",", "\"\<A\>\"", ",", "\"\<)\>\""}], 
               "}"}], "]"}]}], "}"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Format", "[", 
          RowBox[{
           TagBox[
            RowBox[{"ch", "[", 
             RowBox[{"bb_", ",", "b_"}], "]"}],
            FullForm], ",", "StandardForm"}], "]"}], ":=", 
         RowBox[{"DisplayForm", "[", 
          RowBox[{"RowBox", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<C\>\"", ",", "\"\<(1)\>\""}], "]"}], ",", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<(\>\"", ",", 
                RowBox[{"SubsuperscriptBox", "[", 
                 RowBox[{
                 "\"\<\[DoubleStruckE]\>\"", ",", "\"\<J\>\"", ",", 
                  "\"\<\[Dagger]\>\""}], "]"}], ",", 
                RowBox[{"SuperscriptBox", "[", 
                 RowBox[{"\"\<A\>\"", ",", 
                  RowBox[{"ToString", "[", "b", "]"}]}], "]"}], ",", 
                "\"\<)\>\""}], "}"}], "]"}]}], "}"}], "]"}], "]"}]}], ";"}]}],
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<Using Method->\>\"", ",", "\"\<Coordinate\>\""}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Degree of characteristic polynomial is d= \>\"", ",", "dim"}], 
          "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"multiple", " ", "products", " ", "of", " ", "expr"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"\"\<Computing powers of of MV up to: d-1= \>\"", ",", 
          RowBox[{"dim", "-", "1"}]}], "}"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Set", "@@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"prodExpr", "/@", 
         RowBox[{"Range", "[", 
          RowBox[{"1", ",", "dim"}], "]"}]}], ",", 
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{"#", ",", "exprExpanded"}], "]"}], "]"}], "&"}], ",", 
          "exprExpanded", ",", 
          RowBox[{"dim", "-", "1"}]}], "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "compute", " ", "all", " ", "characteristic", " ", "polynomials", " ", 
       "of", " ", "input", " ", "MV", " ", "in", " ", "advance"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"ClearAll", "[", "chv", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"chv", "[", 
       RowBox[{"1", ",", "0"}], "]"}], "=", 
      RowBox[{"-", "1"}]}], ";", 
     RowBox[{"Set", "@@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"chv", "[", 
           RowBox[{"1", ",", "k"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "dim"}], "}"}]}], "]"}], ",", 
        RowBox[{"gaCharacteristicPolynomial", "[", 
         RowBox[{"exprExpanded", ",", "All", ",", 
          RowBox[{"Quiet", "->", "True"}]}], "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<characteristic coefficients of MV, k=1,...d are \
\!\(\*SubscriptBox[\(C\), \((k)\)]\)(A)=\>\"", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"chv", "[", 
             RowBox[{"1", ",", "k"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "dim"}], "}"}]}], "]"}]}], "}"}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "construction", " ", "of", " ", "characteristic", " ", "equation"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"chEqv", "=", 
      RowBox[{"(", 
       RowBox[{"Function", "@@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "\[FormalLambda]", "}"}], ",", 
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"chv", "[", 
               RowBox[{"1", ",", 
                RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
              RowBox[{
               RowBox[{"(", "\[FormalLambda]", ")"}], "^", "i"}]}], ")"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}]}], "}"}]}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Formal characteristic equation of MV, \
\[Chi](\[FormalLambda])=\>\"", ",", 
          RowBox[{
           RowBox[{"Sum", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"ch", "[", 
                RowBox[{"1", ",", 
                 RowBox[{"dim", "-", "i"}]}], "]"}], "*", 
               RowBox[{
                RowBox[{"(", "\[FormalLambda]", ")"}], "^", "i"}]}], ")"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "0", ",", "dim"}], "}"}]}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ch", "[", 
              RowBox[{"1", ",", "0"}], "]"}], "->", 
             RowBox[{"-", "1"}]}], "}"}]}]}], "}"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<characteristic equation of MV, \[Chi](\[FormalLambda])=\>\"", 
          ",", 
          RowBox[{"chEqv", "[", "\[FormalLambda]", "]"}]}], "}"}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Hermitian", " ", "conjugated", " ", "basis"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Hermitian conjugate basis \!\(\*SuperscriptBox[\(\
\[DoubleStruckE]\), \(J\)]\)=\>\"", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"gaIndexDown", "[", 
             RowBox[{"gaHermitianConjugate", "[", "#", "]"}], "]"}], "&"}], "/@",
            "basisNoUnit"}]}], "}"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "compute", " ", "characteristic", " ", "polynomials", " ", "of", " ", 
       "special", " ", "compination", " ", "in", " ", "advance"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"chv", "[", 
         RowBox[{"be_", ",", "n_Integer"}], "]"}], ":=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"chv", "[", 
           RowBox[{"be", ",", "n"}], "]"}], "=", 
          RowBox[{"gaCharacteristicPolynomial", "[", 
           RowBox[{
            RowBox[{"gaPE", "[", 
             RowBox[{
              RowBox[{"gaIndexDown", "[", 
               RowBox[{"gaHermitianConjugate", "[", "be", "]"}], "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"prodExpr", "[", "n", "]"}]}], "]"}], ",", "1", ",", 
            RowBox[{"Quiet", "->", "True"}]}], "]"}]}], ")"}]}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"the", " ", 
        RowBox[{"chv", "[", 
         RowBox[{"be", ",", "n"}], "]"}], " ", "are", " ", "C_", "1", " ", 
        "coefficients"}], ",", " ", 
       RowBox[{"which", " ", "are", " ", "just", " ", "traces"}], ",", " ", 
       RowBox[{
        RowBox[{"i", ".", "e", ".", " ", "scalar"}], " ", "parts", " ", "of", 
        " ", 
        RowBox[{"MV", ".", " ", "Can"}], " ", "be", " ", "computed", " ", 
        "in", " ", "a", " ", "much", " ", "simpler", " ", "way"}]}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"chv", "[", 
       RowBox[{"be_", ",", "n_Integer"}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"chv", "[", 
         RowBox[{"be", ",", "n"}], "]"}], "=", 
        RowBox[{"dim", "*", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaIndexDown", "[", 
              RowBox[{"gaHermitianConjugate", "[", "be", "]"}], "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"prodExpr", "[", "n", "]"}]}], "]"}], ",", 
           RowBox[{"{", "0", "}"}]}], "]"}]}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Characteristic polynomials for each Hermitian conjugate basis \
\!\(\*SuperscriptBox[\(\[DoubleStruckE]\), \(J\)]\) element and \
k\[Element][1,d-1], \!\(\*SubscriptBox[\(C\), \
\((1)\)]\)(\!\(\*SuperscriptBox[\(\[DoubleStruckE]\), \(J\)]\)\
\[GeometricProduct]\!\(\*SuperscriptBox[\(A\), \(k\)]\))=\>\"", ",", 
          RowBox[{"TableForm", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"chv", "[", 
               RowBox[{"i", ",", "k"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"dim", "-", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "basisNoUnit"}], "}"}]}], "]"}], ",", 
            RowBox[{"TableHeadings", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"\"\<k=\>\"", "<>", "#"}], ")"}], "&"}], "/@", 
                RowBox[{"ToString", "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"dim", "-", "1"}], "]"}]}]}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaIndexDown", "[", 
                  RowBox[{"gaHermitianConjugate", "[", "#", "]"}], "]"}], 
                 "&"}], "/@", "basisNoUnit"}]}], "}"}]}]}], "]"}]}], "}"}], 
        "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Denominator", "'"}], "s", " ", "pure", " ", "function", " ", 
        "of", " ", "variable", " ", "y"}], ",", " ", 
       RowBox[{"compute", " ", "once"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"denominatorAbstract", "=", 
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"i", "+", "1"}], ")"}], "*", 
         RowBox[{"ch", "[", 
          RowBox[{"1", ",", 
           RowBox[{"(", 
            RowBox[{"dim", "-", "i", "-", "1"}], ")"}]}], "]"}], "*", 
         RowBox[{"\[FormalLambda]", "^", "i"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", 
          RowBox[{"dim", "-", "1"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Denominator's pure function : \>\"", ",", 
          "denominatorAbstract"}], "}"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Denominator's pure function with coefficients substituted: \
\>\"", ",", 
          RowBox[{"denominatorAbstract", "/.", 
           RowBox[{"{", 
            RowBox[{"ch", "->", "chv"}], "}"}]}]}], "}"}], "}"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Numerator", "'"}], "s", " ", "pure", " ", "function", " ", 
        "of", " ", "variables", "  ", "y", " ", "and", " ", "be", 
        RowBox[{"(", "!", ")"}]}], ",", " ", 
       RowBox[{"compute", " ", "once"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"numeratorAbstract", "=", 
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ch", "[", 
             RowBox[{"1", ",", "k"}], "]"}], "*", 
            RowBox[{"ch", "[", 
             RowBox[{"be", ",", 
              RowBox[{"dim", "-", "1", "-", "n", "-", "k"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "0", ",", 
             RowBox[{"dim", "-", "2", "-", "n"}]}], "}"}]}], "]"}], "*", 
         RowBox[{"\[FormalLambda]", "^", "n"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "0", ",", 
          RowBox[{"dim", "-", "2"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Numerator's pure function: \>\"", ",", "numeratorAbstract"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Numerator's pure function with some of coefficients \
substituted: \>\"", ",", 
           RowBox[{"numeratorAbstract", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ch", "[", 
               RowBox[{"1", ",", "x_"}], "]"}], ":>", 
              RowBox[{"chv", "[", 
               RowBox[{"1", ",", "x"}], "]"}]}], "}"}]}]}], "}"}]}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"for", " ", "presenting", " ", "in", " ", "tex"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<Numerator's pure function: \>\"", ",", 
            RowBox[{"numeratorAbstract", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ch", "->", "chte"}], ",", 
               RowBox[{"y", ":>", "\[Lambda]1"}]}], "}"}]}]}], "}"}], "}"}]}],
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<Denominator's pure function: \>\"", ",", 
            RowBox[{"denominatorAbstract", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ch", "->", "chte"}], ",", 
               RowBox[{"y", ":>", "\[Lambda]1"}]}], "}"}]}]}], "}"}], "}"}]}],
         "]"}], ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"for", " ", "presenting", " ", "in", " ", "input"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<Numerator's pure function: \>\"", ",", 
            RowBox[{"numeratorAbstract", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ch", "->", "C"}], ",", 
               RowBox[{"y", ":>", "\[FormalLambda]"}], ",", 
               RowBox[{"be", "->", "E"}]}], "}"}]}]}], "}"}], "}"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"printDetails", "[", 
        RowBox[{"quiet", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<Denominator's pure function: \>\"", ",", 
            RowBox[{"denominatorAbstract", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ch", "->", "C"}], ",", 
               RowBox[{"y", ":>", "\[FormalLambda]"}]}], "}"}]}]}], "}"}], 
          "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"rootsOfCharacteristicEquation", "=", 
      RowBox[{"SolveValues", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"chEqv", "[", "\[FormalLambda]", "]"}], "==", "0"}], ",", 
        "\[FormalLambda]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"In", " ", "addition"}], ",", " ", 
       RowBox[{
       "add", " ", "function", " ", "to", " ", "cancel", " ", "common", " ", 
        "factors"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"sumTermMainPart", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Apply", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Function", "@@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"be", ",", "y"}], "}"}], ",", 
                  RowBox[{"tempContainer", "[", 
                   RowBox[{
                   "numeratorAbstract", ",", "denominatorAbstract", ",", 
                    RowBox[{"chEqv", "[", "\[FormalLambda]", "]"}]}], "]"}]}],
                  "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"ch", "->", "chv"}], "}"}]}], ",", 
             RowBox[{"Outer", "[", 
              RowBox[{"List", ",", "basisNoUnit", ",", 
               RowBox[{"{", "\[FormalLambda]", "}"}]}], "]"}], ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], ")"}], "/.", 
          RowBox[{
           RowBox[{"tempContainer", "[", 
            RowBox[{"0", ",", "x__"}], "]"}], ":>", "0"}]}], ")"}], "]"}], "/.", 
       RowBox[{
        RowBox[{"tempContainer", "[", 
         RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
        RowBox[{"RuleCondition", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"canceledFraction", "=", 
            RowBox[{"Cancel", "[", 
             RowBox[{"x1", "/", "x2"}], "]"}]}], ";", 
           RowBox[{"tempContainer", "[", 
            RowBox[{
             RowBox[{"Numerator", "[", "canceledFraction", "]"}], ",", 
             RowBox[{"Denominator", "[", "canceledFraction", "]"}], ",", 
             "x3"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"PolynomialGCD", "[", 
            RowBox[{"x1", ",", "x2"}], "]"}], "=!=", "1"}]}], "]"}]}]}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"tempContainer", "[", 
        RowBox[{"x1_", ",", "x2_", ",", "x3_", ",", "x4_"}], "]"}], ":>", 
       RowBox[{"tempContainer", "[", 
        RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"PolynomialGCD", "[", 
             RowBox[{"x1", ",", "x2", ",", 
              RowBox[{"Extension", "\[Rule]", "Automatic"}]}], "]"}], "===", 
            "1"}], ",", "Identity", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cancel", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Extension", "\[Rule]", "Automatic"}]}], "]"}], "&"}], 
            ")"}]}], "]"}]}]}]}], "*)"}], 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Roots of characteristic polynomial: \>\"", ",", 
           "rootsOfCharacteristicEquation"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Numerator's and denominator's fully substituted: \
{numerator,denominator,CharacteristicPolynomial}\\r\>\"", ",", 
           RowBox[{"List", "@@@", "sumTermMainPart"}]}], "}"}]}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "if", " ", "characteristic", " ", "polynomial", " ", "shares", " ", 
        "common", " ", "root", " ", "with", " ", "formula", " ", 
        "denominator"}], ",", " ", 
       RowBox[{"then", " ", "explicitly", " ", "construct", " ", "sum"}]}], 
      " ", "*)"}], 
     RowBox[{"(*", " ", 
      RowBox[{
      "and", " ", "compute", " ", "limit", " ", "by", " ", "expanding", " ", 
       "numerator", " ", "and", " ", "denominator", " ", "around", " ", 
       "that", " ", "root"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"denominatorValuesAtRoots", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Function", "@@", 
         RowBox[{"{", 
          RowBox[{"\[FormalLambda]", ",", 
           RowBox[{"denominatorAbstract", "/.", 
            RowBox[{"{", 
             RowBox[{"ch", "->", "chv"}], "}"}]}]}], "}"}]}], ")"}], "/@", 
       "rootsOfCharacteristicEquation"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{"quiet", ",", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Denominators values at CharacteristicPolynomial roots: \>\"", 
           ",", "denominatorValuesAtRoots"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"\"\<Abstract term replaced by sumContainer\>\"", ",", 
           RowBox[{"(", 
            RowBox[{"sumTermMainPart", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"tempContainer", "[", 
                RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
               RowBox[{"(", 
                RowBox[{"Plus", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"sumContainer", "[", 
                    RowBox[{"x1", ",", "x2", ",", "#"}], "]"}], "&"}], "/@", 
                   "rootsOfCharacteristicEquation"}], ")"}]}], ")"}]}], 
              "}"}]}], ")"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<sumContainer modified\>\"", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"sumTermMainPart", "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"tempContainer", "[", 
                 RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
                RowBox[{"(", 
                 RowBox[{"Plus", "@@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"sumContainer", "[", 
                    RowBox[{"x1", ",", "x2", ",", "#"}], "]"}], "&"}], "/@", 
                    "rootsOfCharacteristicEquation"}], ")"}]}], ")"}]}], 
               "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"sumContainer", "[", 
                RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
               RowBox[{"RuleCondition", "[", 
                RowBox[{
                 RowBox[{"Residue", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"thefunction", "[", "\[FormalLambda]", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x1", "/", "x2"}], ")"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", "x3"}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"PossibleZeroQ", "[", 
                  RowBox[{"(", 
                   RowBox[{"x2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "x3"}], "}"}]}], ")"}], 
                  "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"sumContainer", "[", 
                RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"thefunction", "[", "x3", "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"x1", "/", "x2"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "x3"}], "}"}]}], ")"}]}],
                 ")"}]}]}], "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
        "\[IndentingNewLine]", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"AnyTrue", "[", 
        RowBox[{"denominatorValuesAtRoots", ",", "PossibleZeroQ"}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"removed", " ", "wrong", " ", "answer", " ", "attempt"}], " ",
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "Print", "[", "\"\<Residue approach: answer can be wrong!\>\"", "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "dim"}], ")"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"RootSum", "@@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Function", "@@", 
                RowBox[{"{", 
                 RowBox[{"\[FormalLambda]", ",", 
                  RowBox[{"chEqv", "[", "\[FormalLambda]", "]"}]}], "}"}]}], 
               ",", "thefunction"}], "}"}]}], ")"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"sumTermMainPart", "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"tempContainer", "[", 
                   RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
                  RowBox[{"(", 
                   RowBox[{"Plus", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sumContainer", "[", 
                    RowBox[{"x1", ",", "x2", ",", "#"}], "]"}], "&"}], "/@", 
                    "rootsOfCharacteristicEquation"}], ")"}]}], ")"}]}], 
                 "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"sumContainer", "[", 
                  RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
                 RowBox[{"RuleCondition", "[", 
                  RowBox[{
                   RowBox[{"Residue", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"thefunction", "[", "\[FormalLambda]", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x1", "/", "x2"}], ")"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", "x3"}], "}"}]}], "]"}], 
                   ",", 
                   RowBox[{"PossibleZeroQ", "[", 
                    RowBox[{"(", 
                    RowBox[{"x2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "x3"}], "}"}]}], ")"}], 
                    "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"sumContainer", "[", 
                    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
                   RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"thefunction", "[", "\[FormalLambda]", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x1", "/", "x2"}], ")"}]}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "x3"}], "}"}]}], ",", 
                    RowBox[{"PossibleZeroQ", "[", 
                    RowBox[{"(", 
                    RowBox[{"x2", "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "x3"}], "}"}]}], ")"}], 
                    "]"}]}], "]"}]}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"sumContainer", "[", 
                  RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"thefunction", "[", "x3", "]"}], "*", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "/", "x2"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", "->", "x3"}], "}"}]}], ")"}]}],
                   ")"}]}]}], "}"}]}], "\[IndentingNewLine]", ")"}], ".", 
            "basisNoUnit"}]}], "\[IndentingNewLine]", ")"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "branch", " ", "for", " ", "diagonalizable", " ", "matrices"}], ",", 
         " ", 
         RowBox[{
          RowBox[{"i", ".", "e", ".", " ", "for"}], " ", "matrices", " ", 
          "when", " ", "MinimalPolynomial", " ", "hs", " ", "no", " ", 
          "repeated", " ", 
          RowBox[{"roots", ":", " ", 
           RowBox[{"SquareFreeQ", "[", "minimalPoly", "]"}]}]}]}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "/", "dim"}], ")"}], "*", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"activate", "[", "RootSum", "]"}], "@@", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Function", "@@", 
               RowBox[{"{", 
                RowBox[{"\[FormalLambda]", ",", 
                 RowBox[{"chEqv", "[", "\[FormalLambda]", "]"}]}], "}"}]}], 
              ",", "thefunction"}], "}"}]}], "+", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"sumTermMainPart", "/.", 
               RowBox[{
                RowBox[{"tempContainer", "[", 
                 RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "]"}], ":>", 
                RowBox[{
                 RowBox[{"activate", "[", "RootSum", "]"}], "@@", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Function", "@@", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", "x3"}], "}"}]}], ",", 
                   RowBox[{"Function", "@@", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalLambda]", ",", 
                    RowBox[{
                    RowBox[{"thefunction", "[", "\[FormalLambda]", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"x1", "/", "x2"}], ")"}]}]}], "}"}]}]}], 
                  "}"}]}]}]}], ")"}], ".", "basisNoUnit"}], ")"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ch", "->", "chv"}], ",", 
            RowBox[{"chEq", "->", "chEqv"}]}], "}"}]}], ")"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CodeAssistOptions->{
 "CodeToolsOptions"-><|
  "CodeInspect" -> <|
    "Tags" -> <|
      "DuplicateKeys" -> <|"ListOfRules" -> <|Enabled -> False|>|>|>|>|>},
 CellLabel->
  "In[1358]:=",ExpressionUUID->"f698fac3-5920-4f6c-81a9-6c37122d0718"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ".  gaExpOfMV[], gaSqrtOf[] using Mathematica\[CloseCurlyQuote]s ",
 StyleBox["MatrixRepresentation",
  FontWeight->"Bold"]
}], "Subsubsection",ExpressionUUID->"4546b0ef-50c2-4b7e-8cb4-7568e13471af"],

Cell["\<\
Mathematica can compute exponents of matrices, so let it do the job. Note, \
argument is gaMatrixRepresentation is Ok, since the symbol is defined in the \
GeometricAlgebra context. If instead  we replaced it by MatrixRepresentation, \
then it will become private and the call from Global` would fail.  Therefore \
it is always best to pass strings as arguments when possible.\
\>", "Text",ExpressionUUID->"37574c98-50c1-4e52-958a-b633584d9a4b"],

Cell["\<\
We moved expOfMV[ ] and sqrtOfMV[ ] gaMatrixRepresentation method, because \
gaDefineMatrixRepresentation[ ] is defined after elementary function \
definitions are provided in sec 7\
\>", "Text",ExpressionUUID->"c733eace-b6de-4728-998c-7d2f6d850e45"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expOfMV", "[", 
   RowBox[{"expr_", ",", "\"\<gaMatrixRepresentation\>\"", ",", "quiet_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theAlg", "=", 
      RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "compute", " ", "matrix", " ", "representation", " ", "of", " ", "the", 
      " ", "algebra", " ", "without", " ", "quaternions"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"gaDefineMatrixRepresentation", "[", 
        RowBox[{"theAlg", ",", 
         RowBox[{"Method", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"ElementaryRepresentations", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"0", ",", "1"}], "]"}], "->", 
                "\"\<Antisymmetric\>\""}], ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], 
               ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"1", ",", "1"}], "]"}], "->", 
                "\"\<Antisymmetric\>\""}], ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
                RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                RowBox[{"{", "\"\<Pauli[3,1]\>\"", "}"}]}]}], "}"}]}]}], 
           "}"}]}], ",", 
         RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], ",", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"IdentityMatrix", "[", "4", "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"gaFromMatrixRepresentation", "[", 
      RowBox[{
       RowBox[{"MatrixExp", "[", 
        RowBox[{"gaToMatrixRepresentation", "[", 
         RowBox[{"expr", ",", "theAlg"}], "]"}], "]"}], ",", "theAlg"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[1359]:=",ExpressionUUID->"524b9a6b-3815-4485-9e71-9c3b1b447efe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sqrtOfMV", "[", 
   RowBox[{"expr_", ",", "\"\<gaMatrixRepresentation\>\"", ",", "quiet_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"theAlg", "=", 
      RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "compute", " ", "matrix", " ", "representation", " ", "of", " ", "the", 
      " ", "algebra", " ", "without", " ", "quaternions"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"gaDefineMatrixRepresentation", "[", 
        RowBox[{"theAlg", ",", 
         RowBox[{"Method", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"ElementaryRepresentations", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"0", ",", "1"}], "]"}], "->", 
                "\"\<Antisymmetric\>\""}], ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], 
               ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"1", ",", "1"}], "]"}], "->", 
                "\"\<Antisymmetric\>\""}], ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
                RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], ",", 
               RowBox[{
                RowBox[{"Cl", "[", 
                 RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                RowBox[{"{", "\"\<Pauli[3,1]\>\"", "}"}]}]}], "}"}]}]}], 
           "}"}]}], ",", 
         RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], ",", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"IdentityMatrix", "[", "4", "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"gaFromMatrixRepresentation", "[", 
      RowBox[{
       RowBox[{"MatrixPower", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "[", 
          RowBox[{"expr", ",", "theAlg"}], "]"}], ",", 
         RowBox[{"1", "/", "2"}]}], "]"}], ",", "theAlg"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[1360]:=",ExpressionUUID->"313f09e5-6633-4f50-8f4a-91de470e3e00"]
}, Closed]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1361]:=",ExpressionUUID->"c50a192a-fdbe-4095-8414-96a18d130267"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Linear transformations"
}], "Section",ExpressionUUID->"397235bf-72f8-40b1-a6e8-1714dd53ba85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTransformation", ",", "ExtendOutermorphismToBasisElements", ",", 
     "gaTransformationMatrix", ",", "gaAdjointTransformation", ",", 
     "gaAdjointTransformationMatrix", ",", "gaAdjointInnerOperation"}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[1362]:=",ExpressionUUID->"8b2f4629-48f3-4237-af66-064a6c4ba886"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[1363]:=",ExpressionUUID->"82366b6b-c0a8-4434-a122-da6f3ba211b6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformation", "::", "usage"}], "=", 
   "\"\<gaTransformation[(any_MV)&] is a container that represents a linear \
operator in GA. The argument any is a pure function, which should include at \
least one expression with head MV[]. For example,  gaTransformation[a1\
\[InnerProduct](MV[#1]\[OuterProduct]b1)&]. When applied to argument it \
returns a value of linear operator value on that argument. For example, \
gaTransformation[a1\[InnerProduct](MV[#1]\[OuterProduct]b1)&][\[DoubleStruckE]\
[1]], will return valid GA expressions, for defined MVs a1,b1 and e[1] of \
some algebra.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtendOutermorphismToBasisElements", "::", "usage"}], "=", 
   "\"\<ExtendOutermorphismToBasisElements->True|False is the option for \
gaTransformation, which instructs to extend the given transormation to basis \
elements of grade>1. Default is False (not to extend).\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1365]:=",ExpressionUUID->"0c339d39-4bba-44cf-99b8-1a9ccc9747b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "::", "usage"}], "=", 
   "\"\<gaTransformation[(any_MV)&][basis_] yields a linear operator matrix \
in the provided basis. For example, gaTransformation[a1\[InnerProduct](MV[#1]\
\[OuterProduct]b1)&][{e1,e2,e3}], will return a 3x3 matrix.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1367]:=",ExpressionUUID->"bef88ed4-c287-4f9f-aabd-895016026f55"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "usage"}], "=", 
   "\"\<gaAdjointTransformation[tr_gaTransformation,mvOfgaTransform_,\
mvOfDualTransform_] yields adjoint transformation of linear operator in GA \
(in basis). The first argument should be gaTransformation[ ] object (a pure \
function, which includes MV[#] somewhere,see gaTransformation[ ]). The second \
argument is a multivector which is to be inserted into given \
gaTransformation[ ], i.e mvOfgaTransform of space V. The third argument is a \
multivector of a adjoint space, i.e mvOfDualTransform is of space U, and the \
transformation tr is a map V->U. In general both vectors are just \
representatives of two different spaces (aka dummy vectors). \>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1368]:=",ExpressionUUID->"f7cb5a2a-ae55-4b94-b323-1269db86b2c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointInnerOperation", "::", "usage"}], "=", 
   "\"\<Option for gaAdjointTransformation, which specify inner operation \
before taking the scalar part. Default is InnerProduct. Other possible values \
LeftContract and RightContract.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1369]:=",ExpressionUUID->"a6ccddc5-a7b1-49a8-aebd-4e01d261b80d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformationMatrix", "::", "usage"}], "=", 
   "\"\<gaAdjointTransformation[tr_gaTransformation][basis_list] yields \
adjoint transformation matrix. \>\""}], ";"}]], "Input",
 CellLabel->
  "In[1370]:=",ExpressionUUID->"95efa299-3dba-43bb-8965-fa3bf42175cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1371]:=",ExpressionUUID->"03729c4b-c216-43d6-8efc-f2d63227e261"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection",ExpressionUUID->"b20fed30-eac9-47c5-9dbc-072b9822d3d8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myUnitize", "[", "any_", "]"}], ":=", 
  RowBox[{"1", "/;", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"any", "===", "0"}], ")"}]}]}]}]], "Input",
 CellLabel->
  "In[1372]:=",ExpressionUUID->"ccd9e822-6499-4f01-9f7e-60dba4c640a8"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linear transformation and its adjoint"
}], "Subsection",ExpressionUUID->"afac6941-9b52-4764-8988-f4b9d01e1bfc"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaTransformation[ ],  gaTransformationMatrix[  ]"
}], "Subsubsection",ExpressionUUID->"6118d800-4e71-455a-b238-4e51e72194d3"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"gaTransformation", ",", "HoldFirst"}], "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"5cb41aba-8dda-4f05-b863-1c645399cf52"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "linearity", " ", "properties", " ", "of", " ", "gaTransformation"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"0", ",", 
        RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_Plus", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{"c_", ",", "d__"}], "]"}], ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"c", "*", 
       RowBox[{
        RowBox[{"gaTransformation", "[", "any", "]"}], "[", 
        RowBox[{
         RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"outermorphism", " ", "property", " ", "not", " ", "needed"}], 
    ",", " ", 
    RowBox[{
    "since", "  ", "transformation", " ", "itself", " ", "should", " ", 
     "include", " ", "all", " ", 
     RowBox[{"arguments", "!"}], " ", "Nevetherless", " ", "we", " ", "keep", 
     " ", "it", " ", "a", " ", "while"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_OuterProduct", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], 
    ";"}], "*)"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[1373]:=",ExpressionUUID->"8a74037e-8c93-4975-be93-42a00b0a7fa8"],

Cell["\<\
Include also option how to handle outermorphism extension in basis elements\
\>", "Text",ExpressionUUID->"9283aa3a-b4dd-4859-9040-1120727a141d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "testOptionTransformation", "[", 
    "\"\<ExtendOutermorphismToBasisElements\>\"", "]"}], "=", 
   "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionTransformation", "[", 
    RowBox[{"\"\<ExtendOutermorphismToBasisElements\>\"", ",", "val_"}], 
    "]"}], ":=", 
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1374]:=",ExpressionUUID->"921a41a5-9c43-4874-8350-021f71f021fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaTransformation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ExtendOutermorphismToBasisElements", "\[Rule]", "False"}], 
    "}"}]}], ";", 
  RowBox[{
   RowBox[{"gaTransformation", "::", "arg"}], "=", 
   "\"\<The transformation argument `1` on which acts the transformation `2` \
is a sequence. Don't know how to extend outermorphism in this case.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1376]:=",ExpressionUUID->"d7f6760c-39c1-4e65-bd17-32c28c41e51d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaTransformation", "[", 
     RowBox[{"transform_Function", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", 
        RowBox[{"{", "gaTransformation", "}"}], "]"}]}]}], "]"}], "[", 
    "arggs___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", "optDefault", ",", "op"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "opts", "}"}], "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"optDefault", "=", 
         RowBox[{"Options", "[", "gaTransformation", "]"}]}], ",", 
        RowBox[{"optDefault", "=", 
         RowBox[{"{", "opts", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaTransformation", ",", "#", ",", "theOption"}], "}"}], 
          ",", 
          RowBox[{
           RowBox[{"gaOptionCheck", "[", "testOptionTransformation", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}]}], "\[IndentingNewLine]", "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", "optDefault"}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{
        "theOption", "[", "\"\<ExtendOutermorphismToBasisElements\>\"", "]"}],
         ",", "\[IndentingNewLine]", "False", ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"transform", "[", "arggs", "]"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}], 
           "}"}]}], ")"}], ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"{", "arggs", "}"}], "]"}], "===", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"bs", "=", 
              RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], 
             "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "first", " ", "dealth", " ", "with", " ", "down", " ", 
               "indices"}], ",", " ", 
              RowBox[{"then", " ", "with", " ", "up"}]}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "expand", " ", "argss", " ", "to", " ", "prevent", " ", 
               "complication", " ", "when", " ", "combination", " ", 
               "ExtendOutermorphismToBasisElements"}], "\[Rule]", 
              RowBox[{
              "True", " ", "is", " ", "set", " ", "and", " ", "arggs", " ", 
               "is", " ", "in", " ", "outer", " ", "product", " ", "form", 
               " ", 
               RowBox[{"a", "^", 
                RowBox[{"b", "^", "c"}]}]}]}], " ", "*)"}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"gaPE", "[", "arggs", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"di_List", ",", "du_List"}], "]"}], ",", "al_", 
                    ",", "other___"}], "]"}], "\[RuleDelayed]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"transform", "/@", 
                    RowBox[{"(", 
                    RowBox[{"op", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", "du"}], "]"}], ",", "al", 
                    ",", "other"}], "]"}], "&"}], "/@", "di"}], ")"}]}], 
                    ")"}]}], "/.", 
                    RowBox[{"op", "\[Rule]", "OuterProduct"}]}], ")"}], "/;", 
                    
                    RowBox[{
                    RowBox[{"Length", "[", "di", "]"}], ">=", "1"}]}]}], 
                  "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"di_List", ",", "du_List"}], "]"}], ",", "al_", 
                   ",", "other___"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"transform", "/@", 
                    RowBox[{"(", 
                    RowBox[{"op", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"di", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", "al", ",", 
                    "other"}], "]"}], "&"}], "/@", "du"}], ")"}]}], ")"}]}], "/.", 
                    RowBox[{"op", "\[Rule]", "OuterProduct"}]}], ")"}], "/;", 
                  
                  RowBox[{
                   RowBox[{"Length", "[", "du", "]"}], ">=", "1"}]}]}], 
                "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}], 
              "}"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaTransformation", "::", "arg"}], ",", 
             RowBox[{"{", "arggs", "}"}], ",", "transform"}], "]"}], ";", 
           "$Failed"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1377]:=",ExpressionUUID->"851f43f1-4f60-45bc-9dc4-db59809db0b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformation", "[", "transform_Function", "]"}], "[", 
   "arggs___", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"transform", "[", "arggs", "]"}], ")"}], "/.", 
    RowBox[{
     RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}]}], 
   ")"}]}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabel->
  "In[934]:=",ExpressionUUID->"12866bff-0485-46c7-a737-62b49d1a7b5d"],

Cell["\<\
Checking  for number of arguments is too restrictive, suspended\
\>", "Text",ExpressionUUID->"d83483cf-b1bb-49e8-9187-4b8966d68d54"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformation", "[", "transform_Function", "]"}], "[", 
   "arggs___", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"transform", "[", "arggs", "]"}], ")"}], "/.", 
     RowBox[{
      RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}]}], ")"}], 
   "/;", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"{", "arggs", "}"}], "]"}], "===", 
    RowBox[{"Count", "[", 
     RowBox[{
      RowBox[{"Hold", "[", "transform", "]"}], ",", "MV", ",", "Infinity", 
      ",", 
      RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"0a69fca7-d2b6-4798-a203-bca2f47ce90e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "[", "expr_gaTransformation", "]"}], "[",
    "theElements_List", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"(", 
   RowBox[{"Outer", "[", 
    RowBox[{"InnerProduct", ",", 
     RowBox[{"gaIndexDown", "/@", 
      RowBox[{"(", 
       RowBox[{"gaHermitianConjugate", "/@", "theElements"}], ")"}]}], ",", 
     RowBox[{"(", 
      RowBox[{"expr", "/@", "theElements"}], ")"}]}], "]"}], ")"}]}]], "Input",\

 CellLabel->
  "In[1378]:=",ExpressionUUID->"c9771b53-0a04-4d0c-91de-47c1c64bd486"],

Cell["\<\
One attempts to write transformation matrix from it action on symbolic MV.  \
Note different (two argument) syntax. That might not work in general(?) and \
is suppressed\
\>", "Text",ExpressionUUID->"d8586ddd-ef21-4822-a845-3165b02c1ccb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "::", "testMVForm"}], "=", 
   "\"\<The test MV `1` on which acted the transformation `2` is not of the \
form x[1] e[1] +x[2] e[2]+..., where all  x[i] are different symbolic \
coefficients.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1379]:=",ExpressionUUID->"b2618cb0-e034-4f86-a94d-716446240a3e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaTransformationMatrix", "[", 
       RowBox[{
       "transformationActionOnTestMV_", ",", "testMVforTransformation_"}], 
       "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"componentsFromTestMV", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"gaComponentList", "[", 
              RowBox[{"testMVforTransformation", ",", 
               RowBox[{
               "gaNonCommutativeMonomialOrder", "\[Rule]", 
                "\"\<InvDeg[Lex]\>\""}]}], "]"}], ",", "0"}], "]"}]}], ",", 
          "extractedBasisFromTestMV", ",", "testCoefficients", ",", 
          "symbolicCoefficientsOfTestMV"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"extractedBasisFromTestMV", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"Collect", "[", 
             RowBox[{"#", ",", "_bs", ",", "myUnitize"}], "]"}], "&"}], "/@", 
           "componentsFromTestMV"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "test", " ", "MV", " ", "contains", " ", "simple", " ",
              "symbolic", " ", "coefficients"}], ",", " ", 
            RowBox[{
            "we", " ", "can", " ", "try", " ", "to", " ", "restore", " ", 
             "action"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"testCoefficients", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"(", 
                RowBox[{"gaVariables", "/@", "componentsFromTestMV"}], ")"}], 
               "]"}]}], "]"}], "===", 
            RowBox[{"Length", "[", 
             RowBox[{"gaVariables", "[", "testMVforTransformation", "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"symbolicCoefficientsOfTestMV", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{"#", ",", "testCoefficients", ",", "myUnitize"}], 
               "]"}], "&"}], "/@", "componentsFromTestMV"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaTransformationMatrix", "::", "testMVForm"}], ",", 
              "testMVforTransformation", ",", 
              "transformationActionOnTestMV"}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "use", " ", "one", " ", "dual", " ", "basis", " ", "for", " ", 
           "non", " ", "Euclidean", " ", 
           RowBox[{"algebras", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Outer", "[", 
           RowBox[{"InnerProduct", ",", 
            RowBox[{"gaIndexDown", "/@", 
             RowBox[{"(", 
              RowBox[{
              "gaHermitianConjugate", "/@", "extractedBasisFromTestMV"}], 
              ")"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Coefficient", "[", 
               RowBox[{"transformationActionOnTestMV", ",", "#"}], "]"}], 
              "&"}], "/@", "symbolicCoefficientsOfTestMV"}]}], "]"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Outer", "[", 
          RowBox[{"InnerProduct", ",", "extractedBasisFromTestMV", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Coefficient", "[", 
              RowBox[{"transformationActionOnTestMV", ",", "#"}], "]"}], 
             "&"}], "/@", "symbolicCoefficientsOfTestMV"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[1380]:=",ExpressionUUID->"c9b7cc93-81bf-4706-9712-6176b5af33d3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaAdjointTransformation[ ] and gaAdjointTransformationMatrix[  ]"
}], "Subsubsection",ExpressionUUID->"eea5c0f7-93e5-4687-86c9-a8ce4acfa181"],

Cell["\<\
Realization of Adjoint transformation using SolveAlways[ ] and using direct \
formula for vectors \
\>", "Text",ExpressionUUID->"4cbe82e4-c001-4714-9c23-1cb7334c051f"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "linearity", " ", "properties", " ", "of", " ", "gaTransformation"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"0", ",", 
        RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_Plus", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaAdjointTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{"c_", ",", "d__"}], "]"}], ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"c", "*", 
       RowBox[{
        RowBox[{"gaAdjointTransformation", "[", "any", "]"}], "[", 
        RowBox[{
         RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"outermorphism", " ", "property", " ", "not", " ", "needed"}], 
      ",", " ", 
      RowBox[{
      "since", "  ", "transformation", " ", "itself", " ", "should", " ", 
       "include", " ", "all", " ", 
       RowBox[{"arguments", "!"}], " ", "Nevetherless", " ", "we", " ", 
       "keep", " ", "it", " ", "a", " ", "while"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_OuterProduct", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaAdjointTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], 
    ";"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[1381]:=",ExpressionUUID->"b0b2a43f-6892-462b-9ed0-82451615c5e4"],

Cell[TextData[{
 "This is ",
 StyleBox["preferable way: to be improved yet, ",
  FontColor->RGBColor[0, 1, 0]],
 " to pass options to all commands.   gaAdjointTransformation has methods \
\[OpenCurlyDoubleQuote]SolveAlways\[CloseCurlyDoubleQuote] and  \
\[OpenCurlyDoubleQuote]Vector\[CloseCurlyDoubleQuote]. Needs to add automatic \
help of possible values of options, special option for option->Automatic \
value handling, etc"
}], "Text",ExpressionUUID->"89dc981a-f71c-457f-9825-da04e158cf8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaAdjointTransformation", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<SolveAlways\>\"", ",", 
        RowBox[{"gaGradesOnly", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"gaAdjointInnerOperation", "\[Rule]", "GeometricProduct"}]}], 
       "}"}]}], "}"}]}], ";"}], " "}]], "Input",
 CellLabel->
  "In[1382]:=",ExpressionUUID->"feefbd14-6b63-4f07-9dd7-5a4f1a7d3002"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "::", "notvector"}], "=", 
   "\"\<The Method `1` can be applied only vector transformations on vector \
argument (in orthonormal basis). Try Method->\\\"SolveAlways\\\".\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "noSolution"}], "=", 
   "\"\<SolveAlways was unable to solve a system `1` with respect to \
variables `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "noSolution1"}], "=", 
   "\"\<Unable to solve a system `1` with respect to variables `2` obtained \
form a solution from SolveAlways.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "notvector"}], "=", 
   "\"\<Grade of  `1` is not vector grade {1}.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "nonhomogeneousMV"}], "=", 
   "\"\<The argument has grades `1`. For pair product you use `2` product and \
not GeometricProduct. Hope your know what your are doing.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1383]:=",ExpressionUUID->"35e116a3-ec36-4223-9a81-6a74851b2285"],

Cell["\<\
Next we provide test functions to test values for each of option. If option \
has suboptions, then define two test functions, one without suboptions, the \
other with suboptions\
\>", "Text",ExpressionUUID->"25b20d6d-773b-4ebe-b3ec-c74cb68d46ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "single", " ", "argument", " ", "syntax", " ", "is", " ", "for", " ", 
    "message"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", "\"\<Method\>\"", "]"}], 
     "=", 
     RowBox[{"\"\<SolveAlways\>\"", "|", "\"\<Vector\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<SolveAlways\>\"", ",", "\"\<gaGradesOnly\>\""}], "}"}], 
      "]"}], "=", 
     RowBox[{"All", "|", "Automatic", "|", "\"\<Positive integer\>\""}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{"{", 
       RowBox[{
       "\"\<SolveAlways\>\"", ",", "\"\<gaAdjointInnerOperation\>\""}], "}"}],
       "]"}], "=", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
       "GeometricProduct"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "two", " ", "argument", " ", "syntax", " ", "is", " ", "actual", " ", 
     RowBox[{"check", ":", " ", 
      RowBox[{
      "important", " ", "for", " ", "complex", " ", "method", " ", "pattern", 
       " ", "should", " ", "be", " ", 
       RowBox[{"val_String", "!"}], " ", 
       RowBox[{"do", "'"}], "t", " ", 
       RowBox[{"forget", "!"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_String"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"\"\<SolveAlways\>\"", "|", "\"\<Vector\>\""}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{"\"\<Method\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"val", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<SolveAlways\>\"", "|", "\"\<Vector\>\""}], ",", 
           "___Rule"}], "}"}]}], "]"}], "&&", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"testOptionAdjointTransformation", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"val", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
      ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<SolveAlways\>\"", ",", "\"\<gaGradesOnly\>\""}], "}"}], 
       ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{"All", ",", "\"\<Automatic\>\"", ",", "Automatic", ",", 
         RowBox[{"{", 
          RowBox[{"__Integer", "?", "Positive"}], "}"}]}], "]"}]}], "]"}]}], 
    ";", 
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<SolveAlways\>\"", ",", "\"\<gaAdjointInnerOperation\>\""}], 
        "}"}], ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"Alternatives", "[", 
        RowBox[{
        "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
         "GeometricProduct"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionAdjointTransformation", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", "_"}], "]"}], ":=", "False"}], 
    ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellLabel->
  "In[1388]:=",ExpressionUUID->"8858a1ef-e05e-45c6-aa3e-b5c261cf436d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAdjointTransformation", "[", 
     RowBox[{"tr_gaTransformation", ",", 
      RowBox[{"op", ":", 
       RowBox[{"OptionsPattern", "[", 
        RowBox[{"{", "gaAdjointTransformation", "}"}], "]"}]}]}], "]"}], "[", 
    "mvOfDualTransform_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "mvOfDualTransform", "]"}]}], ",", 
       "theScalarProductOnArgOfgaTransform", ",", "thetransformationGrade", 
       ",", "theEq", ",", "y", ",", "yMV", ",", "sol", ",", "playMV", ",", 
       "mvName", ",", "theArgumentGrade", ",", "solPlay", ",", 
       RowBox[{"mvOfDualTransformExpanded", "=", 
        RowBox[{"gaPE", "[", "mvOfDualTransform", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "expand", " ", "mvOfDualTransform", " ", "to", " ", "prevent", " ", 
        "complications", " ", "when", " ", "combination", " ", 
        "ExtendOutermorphismToBasisElements"}], "\[Rule]", 
       RowBox[{
       "True", " ", "in", " ", "gaTransformation", " ", "is", " ", "given", 
        " ", "and", " ", "mvOfDualTransform", " ", "is", " ", "in", " ", 
        "outer", " ", "product", " ", "form", " ", 
        RowBox[{"a", "^", 
         RowBox[{"b", "^", "c"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaAdjointTransformation", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionAdjointTransformation", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"ensure", " ", "that", " ", "method", " ", "was", " ", "set"}],
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], "=", 
         "\"\<SolveAlways\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "generate", " ", "formal", " ", "MV", " ", "which", " ", "has", " ", 
         "the", " ", "same", " ", "grades", " ", "as", "  ", "argument", " ", 
         "of", " ", "dual", " ", "transform", " ", 
         RowBox[{"vOfDualTransform", ":", " ", 
          RowBox[{"this", " ", "is", " ", "hypothesis"}]}]}], ",", " ", 
        RowBox[{
        "needs", " ", "rethinking", " ", "for", " ", "more", " ", "general", 
         " ", "case"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"theArgumentGrade", "=", 
       RowBox[{"gaGradeList", "[", "mvOfDualTransformExpanded", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"thetransformationGrade", "=", 
       RowBox[{"gaGradeList", "[", 
        RowBox[{"tr", "[", "mvOfDualTransformExpanded", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "warn", " ", "when", " ", "using", " ", "true", " ", "inner", " ", 
         "product", " ", "with", " ", "argument", " ", "of", " ", "grade", 
         " ", "higher", " ", "than", " ", "2", " ", "or", " ", 
         "inhomogeneous", " ", "MV"}], ",", " ", 
        RowBox[{"since", " ", "in", " ", "this", " ", "case", " ", 
         RowBox[{"(", 
          RowBox[{"only", "?"}], ")"}], " ", "GeometricProduct", " ", "makes",
          " ", "sence"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "theArgumentGrade", "]"}], ">", "1"}], 
            ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"Max", "[", 
             RowBox[{"theArgumentGrade", ">", "2"}], "]"}], ")"}]}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaAdjointInnerOperation\>\"", "]"}],
            "=!=", "GeometricProduct"}], ")"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAdjointTransformation", "::", "nonhomogeneousMV"}], ",", 
          "theArgumentGrade", ",", 
          RowBox[{
          "theOption", "[", "\"\<gaAdjointInnerOperation\>\"", "]"}]}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Method\>\"", "]"}], ",", 
        "\"\<SolveAlways\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "that", " ", "subotions", " ", "have", " ", "values"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], "=", 
            "Automatic"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{
             "theOption", "[", "\"\<gaAdjointInnerOperation\>\"", "]"}], 
             "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<gaAdjointInnerOperation\>\"", "]"}], "=", 
            "GeometricProduct"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "if", " ", "agument", " ", "is", " ", "a", " ", "scalar"}], ",", 
             " ", 
             RowBox[{
             "we", " ", "should", " ", "extend", " ", "playMV", " ", "to", 
              " ", "larger", " ", "MV", " ", "than", " ", "just", " ", 
              "scalar"}], ",", " ", 
             RowBox[{"take", " ", "full", " ", "MV"}], ",", " ", 
             RowBox[{"for", " ", "example"}]}], "*)"}], "\[IndentingNewLine]",
            "Automatic", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theArgumentGrade", "=!=", 
              RowBox[{"{", "0", "}"}]}], ",", 
             RowBox[{"playMV", "=", 
              RowBox[{"gaGeneralMultivector", "[", 
               RowBox[{"mvName", ",", "theAlgebra", ",", "theArgumentGrade"}],
                "]"}]}], ",", 
             RowBox[{"playMV", "=", 
              RowBox[{"gaGeneralMultivector", "[", 
               RowBox[{"mvName", ",", "theAlgebra"}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", "All", ",", 
           RowBox[{"playMV", "=", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"mvName", ",", "theAlgebra"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"__Integer", "?", "Positive"}], "}"}], ",", " ", 
           RowBox[{"playMV", "=", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"mvName", ",", "theAlgebra", ",", 
              RowBox[{"theOption", "[", "\"\<gaGradesOnly\>\"", "]"}]}], 
             "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theScalarProductOnArgOfgaTransform", "=", 
          RowBox[{"tr", "[", "playMV", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"yMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"y", ",", "theAlgebra", ",", 
            RowBox[{"gaGradeList", "[", "playMV", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "The", " ", "eauations", " ", "are", " ", "obtained", " ", 
            "taking", " ", "in", " ", "addition", " ", "grade"}], "-", 
           RowBox[{"0", " ", "part", " ", "of", " ", "inner", " ", 
            RowBox[{"product", ".", " ", "One"}], " ", "may", " ", "want", 
            " ", "to", " ", "replace", " ", "inner", " ", "product", " ", 
            "with", " ", "left", " ", "or", " ", "right", " ", 
            "contraction"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"theEq", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{
                 "theOption", "[", "\"\<gaAdjointInnerOperation\>\"", "]"}], 
                 "[", 
                 RowBox[{
                 "theScalarProductOnArgOfgaTransform", ",", 
                  "mvOfDualTransformExpanded"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", "0", "}"}]}], "]"}], "==", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{
                 "theOption", "[", "\"\<gaAdjointInnerOperation\>\"", "]"}], 
                 "[", 
                 RowBox[{"playMV", ",", "yMV"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", "0", "}"}]}], "]"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"SolveAlways", "[", 
           RowBox[{"theEq", ",", 
            RowBox[{"gaVariables", "[", "playMV", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "sol", "]"}], "===", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solPlay", "=", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sol", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/.", 
                 RowBox[{"Rule", "\[Rule]", "Equal"}]}], ")"}], ",", 
               RowBox[{"gaVariables", "[", "yMV", "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "solPlay", "]"}], "===", "1"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"yMV", "/.", 
                RowBox[{"solPlay", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaAdjointTransformation", "::", "noSolution1"}], 
                 ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"sol", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", 
                   RowBox[{"Rule", "\[Rule]", "Equal"}]}], ")"}], " ", ",", 
                 RowBox[{"gaVariables", "[", "yMV", "]"}]}], "]"}], ";", 
               RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaAdjointTransformation", "::", "noSolution"}], ",", 
              "theEq", " ", ",", 
              RowBox[{"gaVariables", "[", "playMV", "]"}]}], "]"}], ";", 
            RowBox[{"{", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        "\"\<Vector\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"theArgumentGrade", ",", "thetransformationGrade"}], 
              "}"}], "]"}], "]"}], "===", 
           RowBox[{"{", "1", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"bs", "=", 
              RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mvOfDualTransformExpanded", "\[InnerProduct]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"tr", "[", 
                   RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "i", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}], 
                   "]"}], "/.", 
                  RowBox[{
                   RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", 
                   "opar"}]}], ")"}]}], "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "i", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{
                "gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], 
               "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaAdjointTransformation", "::", "notvector"}], ",", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"theArgumentGrade", ",", "thetransformationGrade"}], 
                "}"}], "]"}], "]"}]}], " ", "]"}], ";", 
           RowBox[{"{", "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", "_", 
        ",", "$Failed"}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1395]:=",ExpressionUUID->"6b74d658-c12b-4eae-9ba1-08882ba5b125"],

Cell["\<\
For non Euclidean algebras this formula is wrong! Besides transposition one \
needs other involutions\
\>", "Text",ExpressionUUID->"321c499b-ff89-4187-ba66-0092226b331b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaAdjointTransformationMatrix", "[", "expr_gaTransformation", "]"}], "[",
     "theElements_List", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
     "Print", "[", 
      "\"\<WARNING: for non Euclidian algebras yields wrong rezults!!! More \
involutions are required.\>\"", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Outer", "[", 
       RowBox[{"InnerProduct", ",", 
        RowBox[{"gaIndexDown", "/@", 
         RowBox[{"(", 
          RowBox[{"gaHermitianConjugate", "/@", "theElements"}], ")"}]}], ",", 
        RowBox[{"(", 
         RowBox[{"expr", "/@", "theElements"}], ")"}]}], "]"}], "]"}]}], 
    ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[1396]:=",ExpressionUUID->"cb2f9407-a8d3-4976-ab9f-8794dd3e8dc7"]
}, Closed]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1397]:=",ExpressionUUID->"1534fbd9-3e62-4bb5-a925-823469dd8ece"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector derivatives"
}], "Section",ExpressionUUID->"d1020224-a87c-4194-bcbb-343658ee0d0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "mvD", ",", "gaDefinePositionVector", ",", "gaExpandFunctions", ",", 
     "gaDefineCoordinateChart", ",", "gaCoordinateChart", ",", 
     "gaRunningCoordinateChart", ",", "gaRunningPatch", ",", 
     "gaRunningCoordinateChartVars", ",", "gaCoordinateChartNameOfAlgebra", 
     ",", "gaGetCoordinateChartName", ",", "gaPropertiesToCompute", ",", 
     "gaDirectionalDerivative", ",", "gaDerivativeExpand", ",", "gaDE", ",", 
     "gaChristoffelSymbol", ",", "gaFlatSpaceQ", ",", 
     "gaConnectionCoefficient", ",", "gaLieBracketCoefficient", ",", 
     "gaVectorDerivative", ",", "gaExteriorDerivative", ",", 
     "gaMultivectorDerivative", ",", "gaToDirectionalDerivative", ",", 
     "gaDerivativeArgument", ",", "gaPlotCoordinateSystem"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"76b19b6a-530c-4f85-9015-36b88e8a0c04"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"17fb9689-2ea6-45d8-b7e5-4f42dcf733a0"],

Cell["Coordinate chart related functions", "Text",
 CellChangeTimes->{{3.849170592748632*^9, 3.849170632444778*^9}, {
  3.8491706881909723`*^9, 
  3.8491707259327717`*^9}},ExpressionUUID->"12981c60-e3c2-4acb-bab2-\
d88437bb3ee4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCoordinateChartNameOfAlgebra", "::", "usage"}], "=", 
   "\"\<gaCoordinateChartNameOfAlgebra[Cl[p_,q_]] returns the chart name \
which will be used for computations (it will be included in almost all frame \
related objects, including basis frame elements, connection coefficient, etc) \
with the algebra in the argument. The value of \
gaCoordinateChartNameOfAlgebra[Cl[p_,q_]] is automatically defined by \
gaDefineCoordinateChart[ ] command. Since we try to use most of Mathematica's \
functionality for algebras with q=0, the returned name value will coincide \
with first entry (or the entry element) of one defined coordinate systems \
provided by CoordinateChartData[All]. For example, \
gaCoordinateChartNameOfAlgebra[Cl[2,0]] can return \\\"Cartesian\\\" or \
\\\"Bipolar\\\". For q>0 at the moment the only available name would look \
like ToString[\\\"Orthonormal\\\"].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "::", "usage"}], "=", 
   "\"\<gaDefineCoordinateChart[Cl[p_,q_], \
fullFormCoordinateChartData_List,varName_List] explicitly sets coordinate \
chart used by various types of derivatives. For possible chart data \
fullFormCoordinateChartData (for q=0) see CoordinateChartData[All]. For \
example, for positive signature orthonormal frame (for example, p=2, q=0)) it \
can be set by \
gaDefineCoordinateChart[Cl[2,0],{\\\"Cartesian\\\",\\\"Euclidean\\\",2},{x,y}]\
. When q>0 at the moment only orthonormal frame is available. It can be set \
by gaDefineCoordinateChart[Cl[p,q],{ToString[\\\"Orthonormal\\\"],\\\"\
Euclidean\\\"},{x__}].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCoordinateChart", "::", "usage"}], "=", 
   "\"\<gaCoordinateChart[name] is a container which keeps current setting of \
full chart data and its variables (stored data can be exended during \
implementation process).\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPropertiesToCompute", "::", "usage"}], "=", 
   "\"\<Option which list of available properties which will be automatically \
computed during definition of coordinate chart.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningPatch", "::", "usage"}], "=", 
   "\"\<The patch name (String \\\"Patch1\\\",\\\"Patch2\\\", etc.) defined \
by gaDefineCoordinateChart[ ] command which will be used in all subsequent \
computations\>\""}], ";"}]}], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"4e149649-919a-43ef-a710-45841f6b8c5c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefinePositionVector", "::", "usage"}], "=", 
   "\"\<gaPositionVector[name_String, theFormula_Piecewise, varNames_List, \
paramList:{}] is a container where position vector is expressed using GA \
orthonormal basis elements. For example \
gaPositionVector[\\\"Polar\\\",Piecewise[{{\[Rho]\[GeometricProduct]\
\[DoubleStruckE][1]\[GeometricProduct]Exp[\[DoubleStruckE][1,2]\
\[GeometricProduct]\[CurlyPhi]],(\[Rho]>=0)&&(0<=\[CurlyPhi]<2*Pi)}},False],{\
\[Rho],\[CurlyPhi]}] defines polar coordinate system (see Joot book page 91).\
\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExpandFunctions", "::", "usage"}], "=", 
   "\"\<Option for gaPositionvector, which contains list of functions for \
which we want to compute gaFunctionOfMV[].\>\""}], ";", 
  RowBox[{
   RowBox[{"gaPositionVector", "::", "usage"}], "=", 
   "\"\<gaPositionVector[manifoldName_String] returns data, which were \
computed with gaDefinePositionVector[manifoldName,... ].\>\""}], 
  ";"}]}], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"49915694-6ebe-4d71-b93c-282ccda25f63"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetCoordinateChartName", "::", "usage"}], "=", 
   "\"\<gaGetCoordinateChartName[expr] should return string, which is a name \
of coordinate system name present in expr.\>\""}], ";"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"541d6909-44dc-4b0d-8dc8-f0044b2cf6b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "::", "usage"}], "=", 
   "\"\<mvD[expr,var_Symbol], computes derivative of expr with respect to \
symbol var. It is low level derivative, which is used in other types of \
derivatives as a final step. In general it is not intended for user directly, \
who should use gaDirectionalDerivative[ ] (shortcut gaDD[ ]).\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"47bf64e9-51c5-4ac8-9c9a-fbaff015a3fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDirectionalDerivative", "::", "usage"}], "=", 
   "\"\<gaDirectionalDerivative[expr,vec_?VectorQ], computes derivative of \
expr with respect to vector vec. Vector is expanded in down index basis \
mvDownUp[{ind_Integer?Positive},{}]. The variables, therefore with up \
indices.\>\""}], ";"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"a5073ee0-9703-4514-92a1-f55663b4f1fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDerivativeExpand", "::", "usage"}], "=", 
   "\"\<gaDerivativeExpand[expr] expands(computes) gaDirectionalDerivative[] \
and mvD[ ].....\>\""}], ";"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"8eb68274-3824-45d1-939c-265d2b634415"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaChristoffelSymbol", "::", "usage"}], "=", 
   "\"\<gaChristoffelSymbol[mvDownUp[{theInd1},{}],mvDownUp[{theInd2},{}],\
mvDownUp[{freeInd},{}],coordSysName_String][mvPoint[vars_List]] and \
gaChristoffelSymbol[mvDownUp[{},{theInd1}],mvDownUp[{theInd2},{}],mvDownUp[{\
freeInd},{}],coordSysName_String][mvPoint[vars_List]] represents connection \
coefficients of the first and the second kind, respectivelly (see \
https://en.wikipedia.org/wiki/Christoffel_symbols). The name \
\\\"ChristoffelSymbol\\\" is reserved for coordinate basis (holonomic) only, \
i.e. they are torsion free (symmetric) connection coefficients. \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaConnectionCoefficient", "::", "usage"}], "=", 
   "\"\<gaConnectionCoefficient[mvDownUp[{theInd1},{}],mvDownUp[{theInd2},{}],\
mvDownUp[{freeInd},{}],coordSysName_String][mvPoint[vars_List]] represents \
connection coefficients in the coordinate system coordSysName.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFlatSpaceQ", "::", "usage"}], "=", 
   "\"\<gaFlatSpaceQ[coordSysName_String] returns True if all computed \
Christoffel symbols of coordSysName are zeroes, i.e. space is Euclidean or \
psedo Euclidean. The value is computed along with christoffel symbols.\>\""}],
   ";"}]}], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"a5e3ab25-e033-4db5-aeee-aafb725935e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLieBracketCoefficient", "::", "usage"}], "=", 
   "\"\<gaLieBracketCoefficient[mvDownUp[{theInd1},{}],mvDownUp[{theInd2},{}],\
mvDownUp[{freeInd},{}],coordSysName_String][mvPoint[vars_List]] represents \
Lie bracket coefficients in the coordinate system coordSysName.\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"95571141-5dbf-45e2-89fb-60df08c4c975"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorDerivative", "::", "usage"}], "=", 
   "\"\<gaVectorDerivative[expr,var] of expr with respect to vector vec is \
defined as \[Sum]\!\(\*SuperscriptBox[\(\[DoubleStruckE]\), \
\(i\)]\).gaDirectionalDerivative[expr,\!\(\*SubscriptBox[\(\[DoubleStruckE]\),\
 \(i\)]\)] Vector is expanded in down index basis \
mvDownUp[{ind_Integer?Positive},{}]. The variables, therefore with up \
indices....\>\""}], ";"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"7a4d0828-d136-4810-9210-6a89954a81ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExteriorDerivative", "::", "usage"}], "=", 
   "\"\<gaExteriorDerivative[expr,var] of expr with respect to vector vec is \
defined as \[Sum]\!\(\*SuperscriptBox[\(\[DoubleStruckE]\), \
\(i\)]\)\[Wedge]gaDirectionalDerivative[expr,,\!\(\*SubscriptBox[\(\
\[DoubleStruckE]\), \(i\)]\)] Vector is expanded in down index basis \
mvDownUp[{ind_Integer?Positive},{}]. The variables, therefore with up \
indices....\>\""}], ";"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"196d2900-dbb8-4410-95a5-1ed5675180c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMultivectorDerivative", "::", "usage"}], "=", 
   "\"\<gaMultivectorDerivative[expr,mv,no_Integer] NEBAIGTA!!!! of expr with \
respect to vector vec is defined as \[Sum]\!\(\*SuperscriptBox[\(\
\[DoubleStruckE]\), \(i\)]\).gaDirectionalDerivative[expr,] Vector is \
expanded in down index basis mvDownUp[{ind_Integer?Positive},{}]. The \
variables, therefore with up indices....\>\""}], ";"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"b9772be3-f4f0-44f6-bf93-295e94b81e76"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDerivativeArgument", "::", "usage"}], "=", 
   "\"\<gaDerivativeArgument[expr_, mvId[{__},_Style:Bold]] denotes argument \
for GA differentiation operators gaMultivectorDerivative[].  Here expr is the \
expression to be differentiated by differential operator which has unique \
identification label mvId[_,_]. First Arguments of mvId[_,_] is a label can \
be can be symbols, strings or integers, and should match those provided in \
the differentiation operator in hand. After differentiation was performed the \
corresponding id mark is removed from mvId[{},style] arguments. \
gaDerivativeArgument[expr, gaDerivativeId[ ]] with no gaDerivativeId[ ] \
arguments are replaced by expression itself. Alias is gaDA[ ].\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDA", "::", "usage"}], "=", 
   "\"\<Alias for gaDerivativeArgument[ ].\>\""}], ";"}]}], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"66856cfa-a4fb-4a16-8183-9d2b86d86569"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToDirectionalDerivative", "::", "usage"}], "=", 
   "\"\<gaToDirectionalDerivative[expr] rewrites gaExteriorDerivative, \
gaMultivectorDerivative,...  in terms of gaDirectionalDerivative, \
mvD,...\>\""}], ";"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"1219f464-3e89-4cfe-b562-3dd46dd600bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPlotCoordinateSystem", "::", "usage"}], "=", 
   "\"\<gaPlotCoordinateSystem[chartName_String,{u,\\\"All\\\"},{v,-1,1},\\\"\
ParameterValueList\\\"->{a->1},PlotStyle->Opacity[0.5],\\\"TangentVectors\\\"-\
>{mvPoint[{1,0}],mvPoint[{1,1}]},\\\"NormalVector\\\"->mvPoint[{1,0}],\\\"\
TangentVectorStyle\\\"->{{Red,Thick},{Blue,Thick}}] plots coordinate surface \
(function is to be extended to 3D subcoordinates later), along with tangent \
vector at points {mvPoint[{1,0}],mvPoint[{1,1}]},  (i.e. (u=1,v=0 and \
u=1,v=1)) and one normals at point u=1,v=0. Plot style of tangent vectors si \
provided by option \\\"TangentVectorStyle\\\" and for normal vectors by \
option \\\"NormalVectorStyle\\\".... \>\""}], ";"}]], "Input",
 CellLabel->
  "In[1422]:=",ExpressionUUID->"134b235e-7e77-48c5-88c5-8237dd1ffb66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1423]:=",ExpressionUUID->"37868607-6d77-4531-9a8a-74400b7c8a4a"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notations for derivatives"
}], "Subsection",ExpressionUUID->"65cd77b9-8f64-4077-b850-4db75f2b6e38"],

Cell["\<\
Since we introduce a number of notations here, we don\[CloseCurlyQuote]t want \
to forward all these symbols. Therefore we define them here\
\>", "Text",ExpressionUUID->"171a8f65-ebe7-4733-b24e-d1a4780e36b5"],

Cell["\<\
Single mvD derivative  make boxes (its name is changed as mvDHelp), and it \
has an argument identification string. \
\>", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"4d9eeb08-8ef3-419f-bc68-008fe3cd311c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"mvDHelp", "[", "id_String", "]"}], "[", "scalarVar_", "]"}], 
     ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theColor", "=", 
       RowBox[{
        RowBox[{"gaNotation", "[", "id", "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TemplateBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"scalarVar", ",", "sf"}], "]"}], ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"id", ",", "sf"}], "]"}]}], "}"}], ",", "\"\<mvDHelp\>\"", 
       ",", 
       RowBox[{"DisplayFunction", ":>", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"RowBox", "[", 
           RowBox[{"{", 
            RowBox[{"SubscriptBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<\[PartialD]\>\"", ",", "theColor"}], "]"}], ",", 
              "#1"}], "]"}], "}"}], "]"}], "&"}], ")"}]}], ",", 
       RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
       RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1424]:=",ExpressionUUID->"3e5467d9-c39f-4c48-b0cd-291aaf42e6fa"],

Cell["Directional derivative  make boxes. ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"1d2d3748-442a-4c53-9205-7c3544281c90"],

Cell["\<\
Note, that if vector space dimension do not match number of the arguments of \
the form, formatting is not applied. This is intentional (at least at this \
development stage), since can help to catch some errors. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d0859635-64e5-4934-9830-6e998c588649"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dfsN", "=", "directionalDerivativeSymbolName"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"gaDirectionalDerivative", "[", 
        RowBox[{"expr_", ",", "vector_"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"TemplateBox", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"expr", ",", "sf"}], "]"}], ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"vector", ",", "sf"}], "]"}]}], "}"}], ",", "dfsN", ",", 
        RowBox[{"DisplayFunction", ":>", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"RowBox", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"SubscriptBox", "[", 
               RowBox[{"dfsN", ",", "#2"}], "]"}], ",", "\"\<[\>\"", ",", 
              "#1", ",", "\"\<]\>\""}], "}"}], "]"}], "&"}], ")"}]}], ",", 
        RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
        RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}], "/;", 
      RowBox[{"AllTrue", "[", 
       RowBox[{
        RowBox[{"Cases", "[", 
         RowBox[{"vector", ",", "_mvDownUp", ",", "Infinity", ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "_", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Set", "@@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ToExpression", "[", 
      RowBox[{"Symbol", "[", "directionalDerivativeSymbolName", "]"}], "]"}], 
     ",", "gaDirectionalDerivative"}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[1425]:=",ExpressionUUID->"f3e157ac-6cb8-4754-827e-6f04bc9ffc99"],

Cell["gaDerivativeArgument  make boxes  ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"9a959831-b5fd-41b8-b7ce-29a4629f6786"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "mark", " ", "the", " ", "argument", " ", "for", " ", "which", " ", 
    "differentiation", " ", "operator", " ", "is", " ", "applied", " ", 
    "with", " ", 
    RowBox[{"style", ":", " ", 
     RowBox[{"Bold", "+", 
      RowBox[{"specified", " ", "color"}]}]}]}], "*)"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaDerivativeArgument", "[", "id_String", "]"}], "[", "expr_",
         "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gaDefineNotation", "[", "id", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"theColor", "=", 
           RowBox[{
            RowBox[{"gaNotation", "[", "id", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"id", ",", "sf"}], "]"}], ",", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"expr", ",", "sf"}], "]"}]}], "}"}], ",", 
           "\"\<gaDerivativeArgument\>\"", ",", 
           RowBox[{"DisplayFunction", ":>", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"StyleBox", "[", 
                 RowBox[{"\"\<(\>\"", ",", 
                  RowBox[{"FontWeight", "->", "Bold"}], ",", "theColor"}], 
                 "]"}], ",", "#2", ",", 
                RowBox[{"StyleBox", "[", 
                 RowBox[{"\"\<)\>\"", ",", 
                  RowBox[{"FontWeight", "->", "Bold"}], ",", "theColor"}], 
                 "]"}]}], "}"}], "]"}], "]"}]}], ",", 
           RowBox[{"InterpretationFunction", ":>", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<gaDerivativeArgument\>\"", ",", "\"\<[\>\"", ",", "#1",
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "id"}]}], "]"}]}], "]"}]}], ")"}]}], 
    ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellLabel->
  "In[1427]:=",ExpressionUUID->"3f07bf63-9ce6-4570-924e-883fc5dfb803"],

Cell["\<\
Vector/Multivector derivative  make boxes (EmptyDownTriangle). \
\>", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"35a83cac-8021-4430-9af3-3882033a9171"],

Cell["\<\
Note, that if vector space dimension do not match number of the arguments of \
the form, formatting is not applied. This is intentional (at least at this \
development stage), since can help to catch some errors. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"2a2df0af-9875-4bf3-96ad-4b4a1bc5ddda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"At", " ", "the", " ", "moment", " ", "use", " ", "symbol", " ", 
    RowBox[{"\\[", "EmptyDownTriangle", " ", "]"}], " ", "since", " ", 
    RowBox[{"\\[", "Del", " ", "]"}], " ", "is", " ", "operator", " ", 
    "without", " ", "built", " ", "in", " ", "meaning"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dfsN", "=", "\"\<\[EmptyDownTriangle]\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaMultivectorDerivative", "[", "id_String", "]"}], "[", 
          "basismultivectorelements_List", "]"}], ",", 
         RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaDefineNotation", "[", "id", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"compactBasisElems", "=", 
               RowBox[{"(", 
                RowBox[{"basismultivectorelements", "/.", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                   "gaCoordinateChart", "[", "gaRunningCoordinateChart", 
                    "]"}], "[", "gaRunningPatch", "]"}], "[", 
                  "\"\<FullBasis\>\"", "]"}]}], ")"}]}], ",", 
              RowBox[{"theColor", "=", 
               RowBox[{
                RowBox[{"gaNotation", "[", "id", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"TemplateBox", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"MakeBoxes", "[", 
                 RowBox[{"id", ",", "sf"}], "]"}], ",", 
                RowBox[{"MakeBoxes", "[", 
                 RowBox[{"basismultivectorelements", ",", "sf"}], "]"}], ",", 
                
                RowBox[{"MakeBoxes", "[", 
                 RowBox[{"compactBasisElems", ",", "sf"}], "]"}]}], "}"}], 
              ",", "dfsN", ",", 
              RowBox[{"DisplayFunction", ":>", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"SubscriptBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"dfsN", ",", 
                    RowBox[{"FontWeight", "->", "Bold"}], ",", "theColor"}], 
                    "]"}], ",", "#3"}], "]"}], "}"}], "]"}], "&"}], ")"}]}], 
              ",", 
              RowBox[{"InterpretationFunction", ":>", 
               RowBox[{"Function", "[", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<gaMultivectorDerivative\>\"", ",", "\"\<[\>\"", ",", 
                    "#1", ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", 
                   ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}], ",", 
              
              RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
              RowBox[{"Tooltip", "\[Rule]", "id"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], "/;", 
          RowBox[{"AllTrue", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
             "basismultivectorelements", ",", "_mvDownUp", ",", "Infinity", 
              ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{"#", ",", 
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "__", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}]}]}], 
        ")"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Set", "@@", 
     RowBox[{"{", 
      RowBox[{"\[EmptyDownTriangle]", ",", "gaMultivectorDerivative"}], 
      "}"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1428]:=",ExpressionUUID->"b61f11b3-b797-4534-8a2a-34ec6c5b60ec"],

Cell["Connection coefficient (Christoffel symbol)  make boxes. ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"81e3b4b6-6e6b-4e6d-b65b-ab27a877c6ae"],

Cell["\<\
Use double struck letter :213e   Other  possible variants would be 1D6AA    \
1D6E4   1D71E   1D758  1D792  (see https://www.compart.com/en/unicode/U+213E )\
\>", "Text",ExpressionUUID->"d2b27650-5048-45fe-a8b5-8dc72ffbc24a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"dfsN", "=", "\"\<\:213e\>\""}], ",", 
      RowBox[{"dfs", "=", 
       RowBox[{"Symbol", "[", "\"\<\:213e\>\"", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"don", "'"}], "t", " ", "use", " ", 
       RowBox[{"h", ":", 
        RowBox[{"(", 
         RowBox[{"dfs", "|", "gaConnectionCoefficient"}], ")"}]}]}], ",", " ", 
      RowBox[{"since", " ", "at", " ", "the", " ", "moment", " ", "we", " ", 
       RowBox[{"dont", "'"}], "t", " ", "want", " ", "to", " ", "add", " ", 
       "this", " ", "char", " ", "to", " ", "Mma", " ", 
       RowBox[{"unicodecharacters", ".", "tr"}]}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"MakeBoxes", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaConnectionCoefficient", "[", 
          RowBox[{
          "ind1_mvDownUp", ",", "ind2_mvDownUp", ",", "ind3_mvDownUp", ",", 
           "name_String"}], "]"}], "[", "point_mvPoint", "]"}], ",", 
        RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pfd", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"StyleBox", "[", 
             RowBox[{
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"dfsN", ",", "#1", ",", "#2", ",", "#3"}], "}"}], 
                  "]"}], ",", "\"\<[\>\"", ",", "#5", ",", "\"\<]\>\""}], 
                "}"}], "]"}], ",", 
              RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
              RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"pfi", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<gaConnectionCoefficient\>\"", ",", "\"\<[\>\"", ",", 
                  "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                  "#3", ",", "\"\<,\>\"", ",", "name", ",", "\"\<]\>\""}], 
                 "}"}], "]"}], ",", "\"\<[\>\"", ",", "#5", ",", 
               "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], "}"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"ind1", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"ind2", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"ind3", ",", "sf"}], "]"}], ",", "name", ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"point", ",", "sf"}], "]"}]}], "}"}], ",", "dfsN", ",", 
          RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
          RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
          RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "to", " ", "distinguish", " ", "between", " ", "torsion", " ", "free", 
        " ", 
        RowBox[{"(", "symmetric", ")"}], " ", "connection", " ", 
        "coefficient", " ", 
        RowBox[{"(", "ChristoffelSymbol", ")"}], " ", "and", " ", "general", 
        " ", "connection", " ", "coefficient"}], ",", " ", 
       RowBox[{"make", " ", "the", " ", "Christoffel", " ", "bold"}]}], 
      "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MakeBoxes", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaChristoffelSymbol", "[", 
          RowBox[{
          "ind1_mvDownUp", ",", "ind2_mvDownUp", ",", "ind3_mvDownUp", ",", 
           "name_String"}], "]"}], "[", "point_mvPoint", "]"}], ",", 
        RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pfd", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"StyleBox", "[", 
             RowBox[{
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"dfsN", ",", "Bold"}], "]"}], ",", "#1", ",", 
                    "#2", ",", "#3"}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                 "#5", ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
              RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
              RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"pfi", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<gaChristoffelSymbol\>\"", ",", "\"\<[\>\"", ",", "#1", 
                  ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", "#3", 
                  ",", "\"\<,\>\"", ",", "name", ",", "\"\<]\>\""}], "}"}], 
                "]"}], ",", "\"\<[\>\"", ",", "#5", ",", "\"\<]\>\""}], "}"}],
              "]"}], "]"}]}]}], "}"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"ind1", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"ind2", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"ind3", ",", "sf"}], "]"}], ",", "name", ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"point", ",", "sf"}], "]"}]}], "}"}], ",", "dfsN", ",", 
          RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
          RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
          RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[1430]:=",ExpressionUUID->"62fc98d1-eb4f-49ba-a0bb-116f2a6483b7"],

Cell["Lie bracket coefficient  make boxes. ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"0eeece22-ca4d-4a08-af51-2841d9668c10"],

Cell["Use double struck capital L: \[DoubleStruckCapitalL]", "Text",ExpressionUUID->"8306781a-b0e8-4753-85d2-ffdabdd14438"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"dfsN", "=", "\"\<\[DoubleStruckCapitalL]\>\""}], ",", 
      RowBox[{"dfs", "=", 
       RowBox[{"Symbol", "[", "\"\<\[DoubleStruckCapitalL]\>\"", "]"}]}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaLieBracketCoefficient", "[", 
         RowBox[{
         "ind1_mvDownUp", ",", "ind2_mvDownUp", ",", "ind3_mvDownUp", ",", 
          "name_String"}], "]"}], "[", "point_mvPoint", "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pfd", "=", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"dfsN", ",", "#1", ",", "#2", ",", "#3"}], "}"}], 
                 "]"}], ",", "\"\<[\>\"", ",", "#5", ",", "\"\<]\>\""}], 
               "}"}], "]"}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"pfi", "=", 
          RowBox[{"Function", "[", 
           RowBox[{"RowBox", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "\"\<gaConnectionCoefficient\>\"", ",", "\"\<[\>\"", ",", 
                 "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                 "#3", ",", "\"\<,\>\"", ",", "name", ",", "\"\<]\>\""}], 
                "}"}], "]"}], ",", "\"\<[\>\"", ",", "#5", ",", "\"\<]\>\""}],
              "}"}], "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ind1", ",", "sf"}], "]"}], ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ind2", ",", "sf"}], "]"}], ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ind3", ",", "sf"}], "]"}], ",", "name", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"point", ",", "sf"}], "]"}]}], "}"}], ",", "dfsN", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[1431]:=",ExpressionUUID->"a9ea2ed0-a991-4a30-bbca-cd15b1eb45f8"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Extension for main products to work on fiber bundle"
}], "Subsection",ExpressionUUID->"4994267d-57fd-4038-ada1-8c115acebbdc"],

Cell[TextData[{
 "In arbitrary coordinate system we implement how to multiply two basis \
elements in a very inefficient way. In particular once we detect that  the  \
product (geometric, outer, inner, etc...) contains a pair of basis elements \
which can be multiplied, we replace these basis elements  in terms of \
orthonormal basis using (computed  in ",
 StyleBox["gaDefineCoordinateChart[ ] )",
  FontWeight->"Bold"],
 " rules ",
 StyleBox["gaCoordinateChart[coordName][gaRunningPatch][\
\[OpenCurlyDoubleQuote]FullBasis\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 ". Then expand the product. After that use make back substitution using ",
 StyleBox["gaCoordinateChart[coordName][gaRunningPatch][\
\[OpenCurlyDoubleQuote]ToBasisElementRules\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 " and expand again. The procedure increase complexity of answer in each \
step, which then needs to be simplified by user.  When MV has upper indices \
(reciprocal elements), multiplication is performed using down indices and \
then rising corresponding indices with \[OpenCurlyDoubleQuote]InverseMetric\
\[CloseCurlyDoubleQuote] matrix. In the latter case we separate simpler code \
for case of diagonal and more involved non-diagonal metric case.\nNeeds \
careful testing. "
}], "Text",ExpressionUUID->"b3b80d2f-2828-4964-84b3-90366aee4ea5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}], "[", "_", "]"}], 
      "]"}], "=", "1"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1432]:=",ExpressionUUID->"0eee3491-a38e-43e3-9c73-f3c2dd6847d9"],

Cell["\<\
GeometricProduct, up and down indices can be present. Both for diagonal and  \
non-diagonal metric, we use  gaIndexDown[ ] to go to primary basis, then \
multiply. Answers are given in all down indices. After multiplication of two \
basis elements on a manifold we hope that flat space components should always \
disappear. Therefore after expansion we collect _bs terms (that of flat \
space) and try to simplify. Seems this results in considerable speedup \
(despite of Simplify!). Limitation: when particular coordinates are \
substituted, product is not computed in order to avoid infinite recursion. \
This happens, because \[OpenCurlyDoubleQuote]ToBasisElementRules\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]FullBasis\
\[CloseCurlyDoubleQuote] and other rules explicitly contains \
\[OpenCurlyDoubleQuote]StandardCoordinateNames\[CloseCurlyDoubleQuote].  \
Therefore \
bm===mvPoint[gaCoordinateChart[coordName][\[OpenCurlyDoubleQuote]\
StandardCoordinateNames\[CloseCurlyDoubleQuote]]] is included\
\>", "Text",ExpressionUUID->"ca137dd1-151f-404f-8042-d5b906d390cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"any1___", ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am1d_", ",", "am1u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am2d_", ",", "am2u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", "any2___"}], 
       "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"GeometricProduct", "@@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"any1", ",", 
           RowBox[{"Collect", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaProductExpand", "[", 
               RowBox[{"GeometricProduct", "@@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaIndexDown", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am1d", ",", "am1u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am1u", ",", 
                    "gaRunningPatch"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"gaIndexDown", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am2d", ",", "am2u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am2u", ",", 
                    "gaRunningPatch"}], "]"}]}], "}"}], "/.", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[",
                     "gaRunningPatch", "]"}], "[", "\"\<FullBasis\>\"", 
                   "]"}]}], "\[IndentingNewLine]", ")"}]}], "]"}], "/.", 
              RowBox[{
               RowBox[{
                RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
                "gaRunningPatch", "]"}], "[", "\"\<ToBasisElementRules\>\"", 
               "]"}]}], ",", "_bs", ",", 
             RowBox[{
              RowBox[{"Simplify", "[", 
               RowBox[{"Together", "[", "#", "]"}], "]"}], "&"}]}], "]"}], 
           ",", "any2"}], "}"}], "]"}]}], "]"}], "/;", 
      RowBox[{"bm", "===", 
       RowBox[{"mvPoint", "[", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
         "\"\<StandardCoordinateNames\>\"", "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1433]:=",ExpressionUUID->"d93903ba-ed54-45c2-9b34-03d1de1fa24c"],

Cell["OuterProduct, mixed indices, non-diagonal metric", "Text",ExpressionUUID->"c2f70ea0-038e-44a7-8d3d-f60c0e363953"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"any1___", ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am1d_", ",", "am1u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am2d_", ",", "am2u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", "any2___"}], 
       "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"(", 
        RowBox[{"OuterProduct", "@@", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"any1", ",", 
            RowBox[{"Collect", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"gaProductExpand", "[", 
                RowBox[{"OuterProduct", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaIndexDown", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am1d", ",", "am1u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am1u", ",", 
                    "gaRunningPatch"}], "]"}], ",", 
                    RowBox[{"gaIndexDown", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am2d", ",", "am2u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am2u", ",", 
                    "gaRunningPatch"}], "]"}]}], "}"}], "/.", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[",
                     "gaRunningPatch", "]"}], "[", "\"\<FullBasis\>\"", 
                    "]"}]}], ")"}]}], "]"}], "/.", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
                 "gaRunningPatch", "]"}], "[", "\"\<ToBasisElementRules\>\"", 
                "]"}]}], ",", "_bs", ",", 
              RowBox[{
               RowBox[{"Simplify", "[", 
                RowBox[{"Together", "[", "#", "]"}], "]"}], "&"}]}], "]"}], 
            ",", "any2"}], "}"}], "]"}]}], ")"}], "]"}], "/;", 
      RowBox[{"bm", "===", 
       RowBox[{"mvPoint", "[", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
         "\"\<StandardCoordinateNames\>\"", "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1434]:=",ExpressionUUID->"d4fdc029-b996-448e-988a-22c8bab5dbee"],

Cell["\<\
Inner products (InnerProduct, LeftContract and RightContract) and \
contractions can have only two arguments.\
\>", "Text",ExpressionUUID->"99837650-b518-4571-a3a6-486172e7c131"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am1d_", ",", "am1u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am2d_", ",", "am2u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"InnerProduct", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaIndexDown", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am1d", ",", "am1u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am1u", ",", 
                 "gaRunningPatch"}], "]"}], ",", 
               RowBox[{"gaIndexDown", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am2d", ",", "am2u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am2u", ",", 
                 "gaRunningPatch"}], "]"}]}], "}"}], "/.", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
               "gaRunningPatch", "]"}], "[", "\"\<FullBasis\>\"", "]"}]}], 
            ")"}]}], "]"}], "/.", 
         RowBox[{
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
           "gaRunningPatch", "]"}], "[", "\"\<ToBasisElementRules\>\"", 
          "]"}]}], ",", "_bs", ",", 
        RowBox[{
         RowBox[{"Simplify", "[", 
          RowBox[{"Together", "[", "#", "]"}], "]"}], "&"}]}], "]"}], "/;", 
      RowBox[{"bm", "===", 
       RowBox[{"mvPoint", "[", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
         "\"\<StandardCoordinateNames\>\"", "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1435]:=",ExpressionUUID->"e8444d82-f924-4b89-8b88-993a9ff2e2b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"LeftContract", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am1d_", ",", "am1u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am2d_", ",", "am2u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"LeftContract", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaIndexDown", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am1d", ",", "am1u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am1u", ",", 
                 "gaRunningPatch"}], "]"}], ",", 
               RowBox[{"gaIndexDown", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am2d", ",", "am2u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am2u", ",", 
                 "gaRunningPatch"}], "]"}]}], "}"}], "/.", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
               "gaRunningPatch", "]"}], "[", "\"\<FullBasis\>\"", "]"}]}], 
            ")"}]}], "]"}], "/.", 
         RowBox[{
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
           "gaRunningPatch", "]"}], "[", "\"\<ToBasisElementRules\>\"", 
          "]"}]}], ",", "_bs", ",", 
        RowBox[{
         RowBox[{"Simplify", "[", 
          RowBox[{"Together", "[", "#", "]"}], "]"}], "&"}]}], "]"}], "/;", 
      RowBox[{"bm", "===", 
       RowBox[{"mvPoint", "[", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
         "\"\<StandardCoordinateNames\>\"", "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1436]:=",ExpressionUUID->"c1c404af-c187-41c2-9751-b583e0a4474b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"RightContract", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am1d_", ",", "am1u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}], ",", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"am2d_", ",", "am2u_"}], "]"}], ",", "al_", ",", 
           "coordName_String"}], "]"}], "[", "bm_", "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"RightContract", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaIndexDown", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am1d", ",", "am1u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am1u", ",", 
                 "gaRunningPatch"}], "]"}], ",", 
               RowBox[{"gaIndexDown", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"am2d", ",", "am2u"}], "]"}], ",", "al", ",", 
                    "coordName"}], "]"}], "[", "bm", "]"}], ",", "am2u", ",", 
                 "gaRunningPatch"}], "]"}]}], "}"}], "/.", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
               "gaRunningPatch", "]"}], "[", "\"\<FullBasis\>\"", "]"}]}], 
            ")"}]}], "]"}], "/.", 
         RowBox[{
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
           "gaRunningPatch", "]"}], "[", "\"\<ToBasisElementRules\>\"", 
          "]"}]}], ",", "_bs", ",", 
        RowBox[{
         RowBox[{"Simplify", "[", 
          RowBox[{"Together", "[", "#", "]"}], "]"}], "&"}]}], "]"}], "/;", 
      RowBox[{"bm", "===", 
       RowBox[{"mvPoint", "[", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "coordName", "]"}], "[", 
         "\"\<StandardCoordinateNames\>\"", "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1437]:=",ExpressionUUID->"db8afdfd-34c1-43c5-a83a-c143f9fefec5"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Extension of some functions on fiber bundle, etc"
}], "Subsection",ExpressionUUID->"d935d195-551c-4986-950a-c61e052b9b8f"],

Cell[TextData[{
 "We want that some of previously defined commands would work in the same way \
as for flat basis elements. These commands are put in the list \
commandListThatExtendsToCurvilinearElements. Seems that this is only valid \
for \[OpenCurlyDoubleQuote]Orthonormal\[CloseCurlyDoubleQuote] (i.e. flat \
with arbitrary signature) ( ",
 StyleBox["gaReverse[] produced wrong answers in \
\[OpenCurlyDoubleQuote]Toroidal\[CloseCurlyDoubleQuote]  coordinate system",
  FontColor->RGBColor[1, 0, 0]],
 "). "
}], "Text",ExpressionUUID->"dc8736b7-5b2b-4168-b48b-62845647b182"],

Cell[BoxData[
 RowBox[{
  RowBox[{"commandListThatExtendsToCurvilinearElements", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaGradeNegate", ",", "gaReverse", ",", "gaGradeInverse", ",", 
     "gaNonZeroGradeInverse", ",", "gaCliffordConjugate", ",", 
     "gaBinomialConjugate", ",", "gaHomogeneusGradeQ", ",", 
     "gaComponentCoefficientList", ",", "gaGetMV"}], "}"}]}], ";"}]], "Input",\

 CellLabel->
  "In[1438]:=",ExpressionUUID->"f0cd2160-7542-4eb9-b7bf-8536865b4809"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"bs", "[", "indAlgCoord__", "]"}], "[", 
            RowBox[{"mvPoint", "[", 
             RowBox[{"{", "allVars__Symbol", "}"}], "]"}], "]"}], ",", 
           "restArgs___"}], "]"}], ":=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "[", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{"indAlgCoord", ",", 
                RowBox[{"mvPoint", "[", 
                 RowBox[{"{", "allVars", "}"}], "]"}]}], "]"}], ",", 
              "restArgs"}], "]"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{"indAlgCoordGeneral__", ",", 
               RowBox[{"mvPoint", "[", 
                RowBox[{"{", "allVars", "}"}], "]"}]}], "]"}], ":>", 
             RowBox[{
              RowBox[{"bs", "[", "indAlgCoordGeneral", "]"}], "[", 
              RowBox[{"mvPoint", "[", 
               RowBox[{"{", "allVars", "}"}], "]"}], "]"}]}], "}"}]}], 
          ")"}]}], ")"}], ")"}], "&"}], "/@", 
     "commandListThatExtendsToCurvilinearElements"}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellLabel->
  "In[1439]:=",ExpressionUUID->"0ef36d0f-7152-4b64-be84-4324d99bed5c"],

Cell["\<\
On manifold index lowering/rising is performed summing with metric or inverse \
metric when metric is diagonal.  Otherwise multiply vectors in corresponding \
order (slow)\
\>", "Text",ExpressionUUID->"a1cdfc29-f5cf-41d0-b7e2-e00b3eec9fe2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexDown", "[", 
    RowBox[{"basisElement_", ",", 
     RowBox[{"{", "}"}], ",", "__"}], "]"}], ":=", "basisElement"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "if", " ", "basis", " ", "element", " ", "has", " ", "no", " ", "the", 
      " ", "index", " ", "to", " ", "lower"}], ",", " ", 
     RowBox[{"we", " ", "finished"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaIndexDown", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "amd___", "}"}], ",", 
            RowBox[{"{", "amu__", "}"}]}], "]"}], ",", "alg_", ",", 
          "chartName_String"}], "]"}], "[", 
        RowBox[{"mvPoint", "[", "bm_", "]"}], "]"}], ",", 
       RowBox[{"{", "ind__Integer", "}"}], ",", "patchName_String", ",", 
       RowBox[{"theOperation_", ":", "GeometricProduct"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "amd", "}"}], ",", 
           RowBox[{"{", "amu", "}"}]}], "]"}], ",", "alg", ",", "chartName"}],
         "]"}], "[", 
       RowBox[{"mvPoint", "[", "bm", "]"}], "]"}], "/;", 
      RowBox[{"ContainsNone", "[", 
       RowBox[{
        RowBox[{"{", "amu", "}"}], ",", 
        RowBox[{"{", "ind", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"We", " ", "have", " ", "index", " ", "to", " ", 
      RowBox[{"lower", ".", " ", "Case"}], " ", "of", " ", "diagonal", " ", 
      "metric", " ", "is", " ", 
      RowBox[{"simple", ".", " ", "Nondiagonal"}], " ", "metric", " ", "is", 
      " ", "hard"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaIndexDown", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "amd___", "}"}], ",", 
            RowBox[{"{", "amu__", "}"}]}], "]"}], ",", "alg_", ",", 
          "chartName_String"}], "]"}], "[", 
        RowBox[{"mvPoint", "[", "bm_", "]"}], "]"}], ",", 
       RowBox[{"{", "ind__Integer", "}"}], ",", "patchName_String", ",", 
       RowBox[{"theOperation_", ":", "GeometricProduct"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"uniqueSumVars", ",", "svch", ",", "g", ",", 
          RowBox[{"inverseMetric", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
             "patchName", "]"}], "[", "\"\<InverseMetric\>\"", "]"}]}], ",", 
          RowBox[{"indToLower", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "ind", "}"}], ",", 
             RowBox[{"{", "amu", "}"}]}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"theOperation", "@@", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"inverseMetric", "[", 
                RowBox[{"[", 
                 RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
              "indToLower"}], ",", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"Sort", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "amd", "}"}], ",", "indToLower"}], "]"}], 
                   "]"}], ",", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"{", "amu", "}"}], ",", "indToLower"}], "]"}]}], 
                 "]"}], ",", "alg", ",", "chartName"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "bm", "]"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], ",", "1"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{
       RowBox[{"ContainsAny", "[", 
        RowBox[{
         RowBox[{"{", "amu", "}"}], ",", 
         RowBox[{"{", "ind", "}"}]}], "]"}], "&&", 
       RowBox[{"DiagonalMatrixQ", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
          "patchName", "]"}], "[", "\"\<InverseMetric\>\"", "]"}], 
        "]"}]}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Non", "-", 
       RowBox[{
       "diagonal", " ", "metric", " ", "case", " ", "requires", " ", 
        "summation"}]}], ",", " ", 
      RowBox[{
      "hovewer", " ", "how", " ", "to", " ", "keep", " ", "index", " ", 
       RowBox[{"ordering", "?", " ", "Not"}], " ", "clear"}], ",", " ", 
      "commented", ",", " ", 
      RowBox[{"since", " ", "wrong"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"gaIndexDown", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "amd___", "}"}], ",", 
            RowBox[{"{", "amu__", "}"}]}], "]"}], ",", "alg_", ",", 
          "chartName_String"}], "]"}], "[", 
        RowBox[{"mvPoint", "[", "bm_", "]"}], "]"}], ",", 
       RowBox[{"{", "ind__Integer", "}"}], ",", "patchName_String"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"indToLower", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "ind", "}"}], ",", 
             RowBox[{"{", "amu", "}"}]}], "]"}]}], ",", "elementsToMultiply", 
          ",", "upVectorIdicesThatRemains", ",", 
          "outerProductOfDownVectors"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Sort", " ", "indices"}], ",", " ", 
          RowBox[{
          "then", " ", "replace", " ", "down", " ", "indec", " ", "groups", 
           " ", "by", " ", "elements", " ", "of", " ", "FullBasis", " ", 
           "and", " ", "single", " ", "up", " ", "indices", " ", "by", " ", 
           "reciprocal", " ", "vector", " ", "expressions"}], ",", " ", 
          RowBox[{"then", " ", "multiply"}]}], " ", "*)"}], " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"elementsToMultiply", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"SplitBy", "[", 
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "\"\<BasisVectors\>\""}], "}"}], "&"}], 
                    "/@", 
                    RowBox[{"{", "amd", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    "\"\<ReciprocalVectors\>\""}], "}"}], "&"}], "/@", 
                    "indToLower"}]}], "]"}], "]"}], ",", "Last"}], "]"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"col", ":", 
                    RowBox[{"{", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "\"\<BasisVectors\>\""}], "}"}], 
                    ".."}], ")"}], "}"}]}], ":>", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"First", "/@", "col"}], ",", 
                    "\"\<BasisVectors\>\""}], "}"}], "}"}]}], "}"}]}], ",", 
                  "1"}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"dwnindlist_List", ",", "\"\<BasisVectors\>\""}], 
                    "}"}], ":>", 
                   RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"dwnindlist", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "alg", ",", 
                    "chartName"}], "]"}], "[", 
                    RowBox[{"mvPoint", "[", "bm", "]"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    "upindlist_List", ",", "\"\<ReciprocalVectors\>\""}], 
                    "}"}], ":>", 
                   RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "upindlist"}], "]"}], ",", "alg",
                     ",", "chartName"}], "]"}], "[", 
                    RowBox[{"mvPoint", "[", "bm", "]"}], "]"}]}]}], "}"}]}], 
               ")"}], "/.", 
              RowBox[{
               RowBox[{
                RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
                "patchName", "]"}], "[", "\"\<FullBasis\>\"", "]"}]}], ")"}], 
            "/.", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
              "patchName", "]"}], "[", "\"\<ReciprocalVectors\>\"", "]"}]}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "select", " ", "up", " ", "indices", " ", "which", " ", "we", " ", 
           RowBox[{"don", "'"}], "t", " ", "lower", " ", "and", " ", "outer", 
           " ", "multiply", " ", "the", " ", "rest", " ", "and", " ", 
           "convert", " ", "back", " ", "to", " ", "curvilinear", " ", 
           "basis"}], " ", "*)"}], "  ", "\[IndentingNewLine]", 
         RowBox[{"upVectorIdicesThatRemains", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{
            RowBox[{"{", "amu", "}"}], ",", "indToLower"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"outerProductOfDownVectors", "=", 
          RowBox[{
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"OuterProduct", "@@", "elementsToMultiply"}], "]"}], "/.", 
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
             "patchName", "]"}], "[", "\"\<ToBasisElementRules\>\"", 
            "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", "  ", 
          RowBox[{
          "append", " ", "up", " ", "indices", " ", "that", " ", "remained", 
           " ", "untouched"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{"outerProductOfDownVectors", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "doinds__", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "al_", ",", "chartN_"}], 
              "]"}], "[", 
             RowBox[{"mvPoint", "[", "bmm_", "]"}], "]"}], ":>", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "doinds", "}"}], ",", 
                  "upVectorIdicesThatRemains"}], "]"}], ",", "al", ",", 
                "chartN"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "bmm", "]"}], "]"}], "/;", 
             RowBox[{
              RowBox[{"Length", "[", "upVectorIdicesThatRemains", "]"}], ">", 
              "0"}]}]}], "}"}]}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{
       RowBox[{"ContainsAny", "[", 
        RowBox[{
         RowBox[{"{", "amu", "}"}], ",", 
         RowBox[{"{", "ind", "}"}]}], "]"}], "&&", 
       RowBox[{"MatrixQ", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
          "patchName", "]"}], "[", "\"\<InverseMetric\>\"", "]"}], 
        "]"}]}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Once", " ", "we", " ", "know", " ", "how", " ", "to", " ", "operate", 
       " ", "on", " ", "basis", " ", "element"}], ",", " ", 
      RowBox[{"extend", " ", "this", " ", "to", " ", "any", " ", 
       RowBox[{"expression", ".", " ", "Similarly"}], " ", "as", " ", "in", 
       " ", "flat", " ", "space", " ", "lower", " ", "all", " ", "up", " ", 
       "indices", " ", "by", " ", "default"}]}], " ", "*)"}], " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaIndexDown", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"orthogonalBasisElements", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{"_bs", "[", "_", "]"}], ",", "Infinity"}], "]"}], 
            "]"}]}], ",", "replRules"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"replRules", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "->", 
              RowBox[{"gaIndexDown", "[", 
               RowBox[{"#", ",", 
                RowBox[{
                 RowBox[{"Head", "[", "#", "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
                "gaRunningPatch"}], "]"}]}], ")"}], "&"}], "/@", 
           "orthogonalBasisElements"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
       "]"}], "/;", 
      RowBox[{"Not", "[", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"_bs", "[", "_", "]"}]}], "]"}], "]"}]}]}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[1440]:=",ExpressionUUID->"6e52a8ae-9b80-4192-830d-46ee8754a7b5"],

Cell["Rising of indices (to do)", "Text",ExpressionUUID->"9ae671e5-6664-4f23-a9b7-93bd560cd984"],

Cell["Extract coordinate chart name from given expression", "Text",ExpressionUUID->"08812370-441f-4b78-bcab-c44c1ab914ae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGetCoordinateChartName", "::", "absent"}], "=", 
   "\"\<Expression `1` don't include chart name. Will output \
gaRunningCoordinateChart.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetCoordinateChartName", "::", "multiple"}], "=", 
   "\"\<Expression `1` contains multiple chart names. This should never \
happen.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGetCoordinateChartName", "::", "unable"}], "=", 
    "\"\<Not intended answer when extracting chart name from `1`.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaGetCoordinateChartName", "[", "expr_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "foundChNames", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", "expr", "}"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"bs", "[", "__", "]"}], "[", "_mvPoint", "]"}], "|", 
              RowBox[{"bs", "[", "__", "]"}]}], ",", "Infinity", ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}], "]"}], "&"}], 
            ")"}]}]}], "]"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"only", " ", "regular", " ", 
         RowBox[{"syntax", ":", " ", 
          RowBox[{
           RowBox[{"don", "'"}], "t", " ", "look", " ", "at", " ", "mv", " ", 
           "without", " ", "_mvPoint"}]}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"foundChNames", "=", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Extract", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "3"}], "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{
               RowBox[{"bs", "[", "__", "]"}], "[", "_mvPoint", "]"}], ",", 
              "Infinity", ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"foundChNames", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaGetCoordinateChartName", "::", "absent"}], ",", 
             "expr"}], "]"}], ";", "gaRunningCoordinateChart"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", "_String", "}"}], ",", 
          RowBox[{"foundChNames", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "__String", "}"}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaGetCoordinateChartName", "::", "multiple"}], ",", 
             "expr"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}], ",", "\[IndentingNewLine]", "_", 
          ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaGetCoordinateChartName", "::", "unable"}], ",", 
             "expr"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1442]:=",ExpressionUUID->"dca564f8-66c1-4b1b-a1d4-a2959eb59015"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Coordinate chart functions"
}], "Subsection",ExpressionUUID->"681aef10-cc49-4942-b832-efc2d9d134e0"],

Cell[TextData[{
 "There are few possible ways to define coordinate chart. At the moment it is \
not clear which way is most perspective. \n\n",
 StyleBox["1. The first way tries to use coordinate system and transformation \
functionality defined in Mathematica itself.  This form requires only pair of \
names: ",
  FontColor->GrayLevel[0.5]],
 StyleBox["gaDefineCoordinateChart[algebra,{coordinateName, metricName} \
,variableList] ",
  FontWeight->"Bold",
  FontColor->GrayLevel[0.5]],
 StyleBox["(see CoordinateChartData[All]). Unfortunately at the moment only \
two types of metric are available \[OpenCurlyDoubleQuote]Euclidean\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Sphere\
\[CloseCurlyDoubleQuote]. It also has possibility to introduce \
\[OpenCurlyDoubleQuote]Orthonormal\[CloseCurlyDoubleQuote] coordinate system \
for pseudo-Riemann space.  Adding additional metric would be proper way, \
however it will require much more intervention into the internals (we prefer \
to avoid doing this).  Therefore  we use oxymoron construction chartInfo[\
\[OpenCurlyDoubleQuote]Euclidean\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Minkowski\[CloseCurlyDoubleQuote]].  Before starting \
to modify we have to load CoordinateChartData[] definitions into the kernel.",
  
  FontColor->GrayLevel[0.5]],
 "\n\n2. The second form requires ",
 StyleBox["gaDefineCoordinateChart[algebra, {coordinateName, \
gaPositionVector[formula]},{vars_List,parameters_List}]",
  FontWeight->"Bold"],
 ". It don\[CloseCurlyQuote]t use Mathematica internals. Example of  position \
vector is (see Peeter Joot book, page 89) x=\[Rho] \[DoubleStruckE][1]\
\[GeometricProduct]Exp[\[DoubleStruckE][1,2]\[GeometricProduct]\[CurlyPhi]] \
for polar coordinates.  \n\n",
 StyleBox["3.The third way to define coordinate system has a classical form ",
  
  FontColor->GrayLevel[0.5]],
 StyleBox["gaDefineCoordinateChart[algebra, {coordinateName, \
gaMappingTransformation[mapping_List]},{vars_List,parameters_List}]",
  FontWeight->"Bold",
  FontColor->GrayLevel[0.5]],
 StyleBox[". MappingTransformation provides coordinate mapping from \
orthonormal to defined coordinate system.... later. gaDefineCoordinateChart \
compute various quantities and output is an Association object with listed \
computed/defined properties.",
  FontColor->GrayLevel[0.5]]
}], "Text",ExpressionUUID->"d8293756-f7d8-4c0d-85da-6feb4f36e6a2"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". The first way. The form with Mathematica\[CloseCurlyQuote]s internal \
coordinate system [",
 StyleBox["suspended, needs integration",
  FontColor->RGBColor[1, 0, 0]],
 "]"
}], "Subsubsection",ExpressionUUID->"4b257a48-7f86-4126-ab61-06f074177074"],

Cell["\<\
For a while we inactivate this syntax, since method 2) is developed\
\>", "Text",ExpressionUUID->"422a18d2-4df8-4587-881e-f2c8bd455e06"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_", ",", "q_", ",", "r_"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"charName", ":", 
        RowBox[{"(", 
         RowBox[{"_String", "|", "_List"}], ")"}]}], ",", "metricName_String",
        ",", "dimension___"}], "}"}], ",", "varName_List", ",", 
     RowBox[{"op", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", "\[IndentingNewLine]", 
       RowBox[{"chartdim", "=", 
        RowBox[{"p", "+", "q", "+", "r"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"charName", ",", "\[IndentingNewLine]", "_String", ",", 
        RowBox[{
         RowBox[{"gaCoordinateChartNameOfAlgebra", "[", 
          RowBox[{"Cl", "[", 
           RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "=", "charName"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"_String", ",", "__"}], "}"}], ",", 
        RowBox[{
         RowBox[{"gaCoordinateChartNameOfAlgebra", "[", 
          RowBox[{"Cl", "[", 
           RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "=", 
         RowBox[{"charName", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", "__", "}"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineCoordinateChart", " ", "::", "badChartName"}], 
           ",", "charName"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaDefineCoordinateChart", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionDefineCoordinateChart", "]"}], 
           "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "all", " ", "provided", " ", "dimensions", 
        " ", "are", " ", "consistent"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"SameQ", "[", 
         RowBox[{"chartdim", ",", 
          RowBox[{"Length", "[", "varName", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "dimension", "}"}], "=!=", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"SameQ", "[", 
              RowBox[{"chartdim", ",", "dimension"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaDefineCoordinateChart", " ", "::", "dimension"}], 
               ",", "varName", ",", 
               RowBox[{"Cl", "[", 
                RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineCoordinateChart", " ", "::", "dimension"}], ",", 
           "varName", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Different", " ", "approach", " ", "to", " ", "Euclidean", " ", "and", 
        " ", "non", " ", "Euclidean", " ", "GAs"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"p", ",", "q", ",", "r"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "for", " ", "Euclidean", " ", "GAs", " ", "use", " ", "already", 
           " ", "implemented", " ", "charts"}], ",", " ", 
          RowBox[{
          "if", " ", "algebra", " ", "dimension", " ", "is", " ", "higher", 
           " ", "than", " ", "10"}], ",", " ", 
          RowBox[{
          "extend", " ", "dimensions", " ", "which", " ", "are", " ", "shown",
            " ", "by", " ", "default"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Cl", "[", 
         RowBox[{
          RowBox[{"_", "?", "Positive"}], ",", "0", ",", "0"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"p", ">", "10"}], ",", 
           RowBox[{
           "SymbolicTensors`CoordinateChartDataDump`$DimensionsToShow", "=", 
            "p"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"CoordinateChartData", "[", "All", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"charName", ",", "metricName", ",", "chartdim"}], 
              "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "Give", " ", "name", " ", "to", " ", "Cartesian", " ", 
             "Euclidean", " ", "coordinate", " ", "system"}], "  ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaCoordinateChart", "[", "charName", "]"}], "=", 
            RowBox[{"Association", "[", 
             RowBox[{
              RowBox[{"\"\<Name\>\"", "->", "charName"}], ",", 
              RowBox[{"\"\<MetricName\>\"", "->", "metricName"}], ",", 
              RowBox[{"\"\<Dimension\>\"", "->", "chartdim"}], ",", 
              RowBox[{"\"\<Variables\>\"", "->", "varName"}]}], "]"}]}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaDefineCoordinateChart", " ", "::", 
               "notInCoordinateChartData"}], ",", 
              RowBox[{"Cl", "[", 
               RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "for", " ", "non", " ", "Euclidean", " ", "GAs", " ", "define", " ", 
          "Cartesian", " ", "coordinate", " ", "system", " ", "by", " ", 
          "mofifying", " ", "internal", " ", 
          RowBox[{"CoordinateChartData", "[", " ", "]"}], " ", "functions"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "not", " ", "yet", " ", "clear", " ", "how", " ", "to", " ", 
          "define", " ", "curvilinear", " ", "coordinate", " ", "systems", 
          " ", "for", " ", "these", " ", "algebras"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"explicitly", " ", "call", " ", 
          RowBox[{"CoordinateChartData", "[", "All", "]"}], " ", "in", " ", 
          "order", " ", "to", " ", "load", " ", "needed", " ", "context"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Cl", "[", 
         RowBox[{"_", ",", 
          RowBox[{"_", "?", "Positive"}], ",", "_"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"CoordinateChartData", "[", "All", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}], ",", 
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Noneuclidean metric. CoordinateChart[] internals will \
be modified!!\>\"", "]"}], "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "below", " ", "are", " ", "names", " ", "of", " ", "internal", " ", 
           "functions", " ", 
           RowBox[{"(", 
            RowBox[{
            "with", " ", "context", " ", 
             "SymbolicTensors`CoordinateChartDataDump`"}], ")"}], " ", 
           "which", " ", "are", " ", 
           RowBox[{"modified", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "$AllMetricChartPairs", ",", "$AllowedNameOnlyCharts", ",", 
           "$NameOnlyChartsImpliedDimensionRules", ",", "knownMetricQ", ",", 
           "repeatedSubscripts"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SymbolicTensors`CoordinateChartDataDump`chartInfo", "[", 
           RowBox[{"\"\<Euclidean\>\"", ",", "charName"}], "]"}], ":=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<Metric\>\"", "\[Rule]", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"dim", ",", "vars"}], "}"}], ",", 
               RowBox[{"SymbolicTensors`Tensor", "[", 
                RowBox[{
                 RowBox[{"DiagonalMatrix", "[", 
                  RowBox[{"Join", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "p", "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"{", "q", "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", "r", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"SymbolicTensors`CotangentBasis", "@", "vars"}], 
                   ",", 
                   RowBox[{"SymbolicTensors`CotangentBasis", "@", "vars"}]}], 
                  "}"}]}], "]"}]}], "]"}]}], ",", 
            RowBox[{"\"\<LeviCivitaConnect\>\"", "\[Rule]", "\"\<Zero\>\""}], 
            ",", 
            RowBox[{"\"\<RiemannTensor\>\"", "\[Rule]", "\"\<Zero\>\""}], ",", 
            RowBox[{"\"\<CoordinateRangeAssumptions\>\"", "\[Rule]", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"dim", ",", "vars"}], "}"}], ",", 
               RowBox[{"Apply", "[", 
                RowBox[{"And", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Element", "[", 
                    RowBox[{"#", ",", "Reals"}], "]"}], "&"}], ",", "vars"}], 
                  "]"}]}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<RepresentativeDimensions\>\"", " ", "\[Rule]", 
             RowBox[{"{", "chartdim", "}"}]}], ",", 
            RowBox[{"\"\<AlternateCoordinateNames\>\"", "\[Rule]", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "dim", "}"}], ",", 
               RowBox[{"Switch", "[", 
                RowBox[{"dim", ",", 
                 RowBox[{"2", "|", "3"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "SymbolicTensors`CoordinateChartDataDump`\
repeatedSubscripts", "[", 
                   RowBox[{"\"\<x\>\"", ",", "dim"}], "]"}], "}"}], ",", "_", 
                 ",", 
                 RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ",", 
            RowBox[{"\"\<StandardCoordinateNames\>\"", "\[Rule]", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", "dim", "}"}], ",", 
               RowBox[{"Switch", "[", 
                RowBox[{"dim", ",", "1", ",", 
                 RowBox[{"{", "\"\<x\>\"", "}"}], ",", "2", ",", 
                 RowBox[{"{", 
                  RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}], ",", "3", 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], 
                  "}"}], ",", "_", ",", 
                 RowBox[{
                 "SymbolicTensors`CoordinateChartDataDump`repeatedSubscripts",
                   "[", 
                  RowBox[{"\"\<x\>\"", ",", "dim"}], "]"}]}], "]"}]}], 
              "]"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "SymbolicTensors`CoordinateChartDataDump`$AllMetricChartPairs", 
            ",", "SymbolicTensors`CoordinateChartDataDump`$\
AllowedNameOnlyCharts", ",", 
            "SymbolicTensors`CoordinateChartDataDump`$\
NameOnlyChartsImpliedDimensionRules"}], "}"}], "=", 
          RowBox[{"DeleteDuplicates", "/@", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{
              "SymbolicTensors`CoordinateChartDataDump`$AllMetricChartPairs", 
               ",", 
               RowBox[{"{", 
                RowBox[{"\"\<Euclidean\>\"", ",", "charName"}], "}"}]}], 
              "]"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{
              "SymbolicTensors`CoordinateChartDataDump`$\
AllowedNameOnlyCharts", ",", "charName"}], "]"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{
              "SymbolicTensors`CoordinateChartDataDump`$\
NameOnlyChartsImpliedDimensionRules", ",", 
               RowBox[{"charName", "\[Rule]", "chartdim"}]}], "]"}]}], 
            "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "SymbolicTensors`CoordinateChartDataDump`knownChartQ", "[", 
           "charName", "]"}], ":=", "True"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"CoordinateChartData", "[", "All", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"charName", ",", "metricName", ",", "chartdim"}], "}"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "charName", "]"}], "=", 
         RowBox[{"Association", "[", 
          RowBox[{
           RowBox[{"\"\<CoordinateChartName\>\"", "->", "charName"}], ",", 
           RowBox[{"\"\<CoordinateChartMetricName\>\"", "->", "metricName"}], 
           ",", 
           RowBox[{"\"\<CoordinateChartDimension\>\"", "->", "chartdim"}], 
           ",", 
           RowBox[{"\"\<CoordinateChartVariables\>\"", "->", "varName"}]}], 
          "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaDefineCoordinateChart", " ", "::", "notInCoordinateChartData"}],
            ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "]"}], ";", 
         "$Failed"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"gaRunningCoordinateChart", "=", "charName"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "after", " ", "setting", " ", "coordinate", " ", "system", " ", "also",
         " ", "add", " ", "autoreplacements", " ", "and", " ", "$Pre", " ", 
        "rules", " ", "to", " ", "input", " ", "basis", " ", "elements"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "When", " ", "we", " ", "include", " ", "autoreplacement", " ", "here",
         " ", "the", " ", "result", " ", "is", " ", 
        "GeometricAlgebra`\[DoubleStruckF]", " ", "instead", " ", "of", " ", 
        "just", " ", 
        RowBox[{"\[DoubleStruckF]", ".", " ", "Therefore"}], " ", "we", " ", 
        "modify", " ", "InputAutoreplacement", " ", "in", " ", 
        "gaDefineOrthonormalBasis"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "may", " ", "be", " ", "the", " ", "problem", " ", "will", " ", 
        "dissapear", " ", "after", " ", "moving", " ", "the", " ", "part", 
        " ", "to", " ", "inside", " ", "package"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"SetOptions", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
          RowBox[{"InputAutoReplacements", "->", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"CurrentValue", "[", 
              RowBox[{
               RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
               "InputAutoReplacements"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"generalBasisSymbolInputA", "\[Rule]", "fs"}], "}"}]}], 
            "]"}]}]}], "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"gaCoordinateChart", "[", "charName", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[1396]:=",ExpressionUUID->"4c3bae21-b5ab-4e67-91ea-7d432d7038bf"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". The second way. The form with ",
 StyleBox["gaPositionVector[ ]",
  FontWeight->"Bold"]
}], "Subsubsection",ExpressionUUID->"c35bfb36-32aa-410f-9f91-e50064cbc804"],

Cell["\<\
Position vector output main information, which is needed to further construct \
coordinate chars\
\>", "Text",ExpressionUUID->"8927ab86-5e81-4c1c-a4f0-7aa12a6d1273"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"syntax", " ", "declaration"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefinePositionVector", "[", "\"\<gaExpandFunctions\>\"", 
      "]"}], "=", 
     "\"\<Names of functions for which we attempt to compute gaFunctionOfMV[ \
]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", "\"\<Quiet\>\"", "]"}], 
     "=", "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefinePositionVector", "[", "\"\<gaRunningPatch\>\"", "]"}], 
     "=", "\"\<Positive integer less or equal to the number of patches\>\""}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefinePositionVector", "[", 
      "\"\<ParameterRangeAssumptions\>\"", "]"}], "=", 
     "\"\<Any conditions on coordinate system parameters suitable for \
Assuming[ ]. For example, Element[R,Reals], or R>0\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", "\"\<Simplify\>\"", "]"}],
      "=", 
     RowBox[{
     "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
      "\"\<any transformation (i.e with head Function[]) of \
expression\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"actual", " ", "test"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", 
      RowBox[{"\"\<gaExpandFunctions\>\"", ",", "val_List"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{"{", "___String", "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", 
      RowBox[{"\"\<gaRunningPatch\>\"", ",", "no_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"IntegerQ", "[", "no", "]"}], "&&", 
      RowBox[{"Positive", "[", "no", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", 
      RowBox[{"\"\<ParameterRangeAssumptions\>\"", ",", "val_"}], "]"}], ":=",
      "True"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefinePositionVector", "[", 
      RowBox[{"\"\<Simplify\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
        "_Function"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1446]:=",ExpressionUUID->"955fdcdc-3e03-449e-934f-2352fa1d9578"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefinePositionVector", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaExpandFunctions", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"\"\<ParameterRangeAssumptions\>\"", "->", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"\"\<gaRunningPatch\>\"", "->", "1"}], ",", 
     RowBox[{"Simplify", "->", "False"}], ",", 
     RowBox[{"Quiet", "->", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaDefinePositionVector", ",", 
    RowBox[{"{", "HoldAll", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefinePositionVector", " ", "::", "parameters"}], "=", 
   "\"\<Inconsistency in coordinate parameters definitions. Make sure that \
you provided \\\"ParameterRangeAssumptions\\\"->assumptions for parameters \
`1` or remove \\\"ParameterRangeAssumptions\\\" option if you don't have \
them.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefinePositionVector", "::", "vars"}], "=", 
   "\"\<Coordinates `1` should match {__Symbol}.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefinePositionVector", "::", "algebradimension"}], "=", 
   "\"\<Vector space dimension of the declared algebra `1` is less than the \
number of vectors in the manifold definition `2`! You know what you are \
doing.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaDefinePositionVector", "[", 
   RowBox[{"manifoldName_String", ",", 
    RowBox[{"formulaAndCoordinateRangeAssumptions", ":", 
     RowBox[{"Piecewise", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_", ",", "_"}], "}"}], ".."}], "}"}], ",", "_"}], "]"}]}], 
    ",", "varName_List", ",", "paramName_List", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "theOption", ",", "rawData", ",", "numberOfPatches", ",", "patchData", 
      ",", "coordRangeAssumps", ",", "formulaBody", ",", " ", "theFormula", 
      ",", "theAlgebra"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"gaSetNamedOptionValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gaDefinePositionVector", ",", "#", ",", "theOption"}], 
          "}"}], ",", 
         RowBox[{
          RowBox[{
          "gaOptionCheck", "[", "testOptionDefinePositionVector", "]"}], "[", 
          
          RowBox[{"(", 
           RowBox[{
            RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
             "}"}]}], ")"}], "]"}], ",", 
         RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", "]"}],
        "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "[", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"coordRangeAssumps", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{"formula", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1", ",", "2"}], "]"}], "]"}], "}"}], "]"}], 
          ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Alternatives", "@@", "varName"}]}], "]"}], "&"}], 
            ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"paramRangeAssumps", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{"formula", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1", ",", "2"}], "]"}], "]"}], "}"}], "]"}], 
          ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"#", ",", 
                RowBox[{"Alternatives", "@@", "paramName"}]}], "]"}], "]"}], 
             "&"}], ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"formulaBody", "=", 
        RowBox[{"formula", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1", ",", "1"}], "]"}], "]"}]}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "unevaluated", " ", "is", " ", "required", " ", "to", " ", "prevent", 
        " ", "evaluation", " ", "of", " ", "Piecewise"}], ",", " ", 
       RowBox[{
       "which", " ", "attempts", " ", "to", " ", "simplify", " ", 
        "internals"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"rawData", "=", 
      RowBox[{"List", "@@", 
       RowBox[{
       "Unevaluated", "[", "formulaAndCoordinateRangeAssumptions", "]"}]}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "count", " ", "of", " ", "how", " ", "many", " ", "patches", " ", 
        "the", " ", "corodinate", " ", "system", " ", 
        RowBox[{"consist", ".", " ", "If"}], " ", "more", " ", "than", " ", 
        "one"}], ",", " ", 
       RowBox[{"then", " ", "start", " ", "enumeration"}]}], " ", "*)"}], " ",
      "\[IndentingNewLine]", 
     RowBox[{"numberOfPatches", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"rawData", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"Options", "[", "gaDefinePositionVector", "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<gaRunningPatch\>\"", "]"}], "]"}], "===",
         "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaRunningPatch\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<gaRunningPatch\>\"", "/.", 
            RowBox[{"Options", "[", "gaDefinePositionVector", "]"}]}], ")"}], 
          "/.", 
          RowBox[{"{", 
           RowBox[{"\"\<gaRunningPatch\>\"", "->", "1"}], "}"}]}], ")"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===", 
        "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Simplify", "/.", 
          RowBox[{"Options", "[", "gaDefinePositionVector", "]"}]}], 
         ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<ParameterRangeAssumptions\>\"", "]"}],
          "]"}], "===", "theOption"}], ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<ParameterRangeAssumptions\>\"", "]"}], 
        "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<ParameterRangeAssumptions\>\"", "/.", 
            RowBox[{"Options", "[", "gaDefinePositionVector", "]"}]}], ")"}], 
          "/.", 
          RowBox[{"\"\<ParameterRangeAssumptions\>\"", "->", 
           RowBox[{"{", "}"}]}]}], ")"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<ParameterRangeAssumptions\>\"", "]"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{"paramName", "===", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<ParameterRangeAssumptions\>\"", "]"}], "===", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{"paramName", "=!=", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaDefinePositionVector", " ", "::", "parameters"}], ",", 
         "paramName"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], ",", "True", ",", 
       
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
        "Simplify"}], ",", "False", ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
        "Identity"}], ",", "FullSimplify", ",", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
        "FullSimplify"}], ",", " ", "_", ",", 
       RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "]"}], 
        "===", "theOption"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"gaExpandFunctions", "/.", 
           RowBox[{"Options", "[", "gaDefinePositionVector", "]"}]}], "}"}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Correction", ":", " ", 
          RowBox[{
          "we", " ", "want", " ", "List", " ", "of", " ", "functions", " ", 
           "here"}]}], ",", " ", 
         RowBox[{
         "but", " ", "obtain", " ", "single", " ", "element", " ", "from", 
          " ", "list", " ", "of", " ", "one", " ", 
          RowBox[{"element", ".", " ", "Probably"}], " ", "shortcomming", " ",
           "of", " ", "gaSetNamedOptionValue"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "}"}],
          "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"theAlgebra", "=", 
      RowBox[{"gaGetAlgebra", "[", 
       RowBox[{"rawData", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"varName", ",", 
          RowBox[{"{", "__Symbol", "}"}]}], "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaDefinePositionVector", "::", "vars"}], ",", "varName"}], 
         "]"}], ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{"formulaAndCoordinateRangeAssumptions", ",", 
            RowBox[{
             RowBox[{
             "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
              "]"}], "[", 
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "_", "}"}], ",", "_"}], "]"}], ",", "__"}], 
             "]"}], ",", "Infinity"}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
             "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
              "]"}], "[", 
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "ind_", "}"}], ",", "_"}], "]"}], ",", "__"}], 
             "]"}], ":>", "ind"}], "}"}]}], "]"}], ">", 
        RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaDefinePositionVector", "::", "algebradimension"}], ",", 
          "theAlgebra", ",", "formulaAndCoordinateRangeAssumptions"}], "]"}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"\"\<The GA of manifold is  \>\"", ",", "theAlgebra"}], 
         "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Number of patches in the specified coordinate system\>\"", ",", 
          "numberOfPatches"}], "}"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "then", " ", "attach", "  ", "some", " ", "of", " ", "properties", " ", 
       "with", " ", "the", " ", "patch", " ", "number"}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"coordRangeAssumps", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"rawData", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "#", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", 
       RowBox[{"Range", "[", "numberOfPatches", "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"printDetails", "[", 
      RowBox[{
       RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Assumptions about coordinate variables\>\"", ",", 
           "coordRangeAssumps"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Assumptions about parameters\>\"", ",", 
           RowBox[{
           "theOption", "[", "\"\<ParameterRangeAssumptions\>\"", "]"}]}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"\"\<Compute functions of MV\>\"", ",", 
           RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}]}], 
          "}"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"theFormula", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "===", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"theFormula", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"rawData", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "It", " ", "is", " ", "useful", " ", "to", " ", "expand", " ", 
             "functions", " ", "of", " ", "MV"}], ",", " ", 
            RowBox[{
            "since", " ", "final", " ", "expressions", " ", "then", " ", 
             "considerably", " ", "simplifies"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"start", " ", "from", " ", "exponent", " ", "function"}], 
            ",", " ", 
            RowBox[{
            "since", " ", "it", " ", "can", " ", "be", " ", "represented", 
             " ", "in", " ", "a", " ", "different", " ", "form", " ", "as", 
             " ", 
             RowBox[{"E", "^", "mv_"}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], 
               ",", "\"\<Exp\>\""}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"formulaBody", "=", 
              RowBox[{
               RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{"Simplify", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"rawData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"bs", "=", 
                    RowBox[{
                    "Symbol", "[", 
                    "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Power", "[", 
                    RowBox[{"E", ",", "someMV_"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"gaFunctionOfMV", "[", 
                    RowBox[{"Exp", ",", "someMV", ",", 
                    RowBox[{"Quiet", "->", 
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}]}]}], 
                    "]"}], "/;", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"someMV", ",", "bs", ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}]}]}], 
                    "]"}], "\[IndentingNewLine]", "}"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"coordRangeAssumps", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{
                    "theOption", "[", "\"\<ParameterRangeAssumptions\>\"", 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
                "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<The result after replacing E^MV \>\"", ",", 
                "formulaBody"}], "}"}], "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"expand", " ", "other", " ", "functions"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"formulaBody", "=", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "[", 
             RowBox[{"gaPE", "[", 
              RowBox[{"Simplify", "[", 
               RowBox[{
                RowBox[{"formulaBody", "/.", "\[IndentingNewLine]", 
                 RowBox[{"Table", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"bs", "=", 
                    RowBox[{
                    "Symbol", "[", 
                    "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "[", "someMV_", 
                    "]"}], ":>", 
                    RowBox[{
                    RowBox[{"gaFunctionOfMV", "[", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "someMV"}], 
                    "]"}], "/;", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"someMV", ",", "bs", ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}]}]}], 
                    "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "theOption", "[", "\"\<gaExpandFunctions\>\"", "]"}], 
                    "]"}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}], 
                "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"coordRangeAssumps", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                   RowBox[{
                   "theOption", "[", "\"\<ParameterRangeAssumptions\>\"", 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
              "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"printDetails", "[", 
            RowBox[{
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<The result after computing other functions \>\"", ",", 
                "formulaBody"}], "}"}], "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", "formulaBody"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numberOfPatches"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"patchData", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\"\<Patch\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}]}], ")"}], "->", 
         RowBox[{"Association", "[", 
          RowBox[{
           RowBox[{"\"\<PointVector\>\"", "->", 
            RowBox[{"theFormula", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", 
           RowBox[{"\"\<CoordinateRangeAssumptions\>\"", "->", 
            RowBox[{"coordRangeAssumps", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numberOfPatches"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Use", " ", "\"\<StandardCoordinateNames\>\"", " ", "to", " ", "match", 
       " ", "the", " ", 
       RowBox[{"Mathematica", "'"}], "s", " ", "internal", " ", "chart", " ", 
       "naming"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaPositionVector", "[", "manifoldName", "]"}], "=", 
      RowBox[{"(", 
       RowBox[{"Association", "@@", 
        RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ManifoldName\>\"", "->", "manifoldName"}], ",", 
           RowBox[{"\"\<GA\>\"", "->", "theAlgebra"}], ",", 
           RowBox[{"\"\<Dimension\>\"", "->", 
            RowBox[{"Length", "[", "varName", "]"}]}], ",", 
           RowBox[{"\"\<Patches\>\"", "->", "numberOfPatches"}], ",", 
           RowBox[{"\"\<gaRunningPatch\>\"", "->", 
            RowBox[{"(", 
             RowBox[{"\"\<Patch\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"theOption", "[", "\"\<gaRunningPatch\>\"", "]"}], 
               "]"}]}], ")"}]}], ",", 
           RowBox[{"\"\<ParameterRangeAssumptions\>\"", "->", 
            RowBox[{
            "theOption", "[", "\"\<ParameterRangeAssumptions\>\"", "]"}]}], 
           ",", 
           RowBox[{"\"\<Parameters\>\"", "->", "paramName"}], ",", 
           RowBox[{"\"\<StandardCoordinateNames\>\"", "->", "varName"}], ",", 
           "patchData"}], "}"}], "\[IndentingNewLine]", "]"}]}], ")"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->
  "In[1456]:=",ExpressionUUID->"25c91f0d-8594-4050-82e2-2f2a21de572f"],

Cell["Messages of gaDefineCoordinateChart[]", "Text",ExpressionUUID->"2da56098-37ea-4c91-b18e-c4fd1deec552"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineCoordinateChart", " ", "::", "dimension"}], "=", 
    "\"\<Info. Length of variable list `1` does not match the geometric \
algebra `2` dimension. Assuming surface in a higher dimension space, setting \
flag surfaceCase=True.\>\""}], ";"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"gaDefineCoordinateChart", " ", "::", "chartDimension"}], "=", 
     "\"\<The dimension of the algebra `1` is not consistent with dimension \
set by the coordinate chart `2`.\>\""}], ";"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", " ", "::", "notInCoordinateChartData"}],
    "=", "\"\<The coordinate system for algebra `1` is not present in \
CoordinateChartData[All].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", " ", "::", "badChartName"}], "=", 
   "\"\<The coordinate system data entry `1` should be of the form \
{chartName:(_String|{_String, parameterList_List}), \
metric:(\\\"Euclidean\\\"|\\\"Sphere\\\"), dimension}. See \
CoordinateChartData[All] for possible chartName values when q=0. \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "::", "vars"}], "=", 
   "\"\<Not enought coordinates `2` in the position vector `1`. Coordinate \
should be _Symbol.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "::", "inconsistency"}], "=", 
   "\"\<Warning. Possible inconsistency in `1`.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", " ", "::", "NoData"}], "=", 
   "\"\<The provided data is not sufficient to compute the property \
`1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "::", "inverse"}], "=", 
   "\"\<Multivectors present in the expression. Might unable to compute the \
property `1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "::", "property"}], "=", 
   "\"\<Computation of property `1` requires computation of properties `2` as \
well.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineCoordinateChart", "::", "patchdata"}], "=", 
   "\"\<Passed in \\\"PatchData\\\" property `1` is inconsistent with \
dimension.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[1462]:=",ExpressionUUID->"dd31c61c-5601-4ccf-bd69-52db3d81b6da"],

Cell["\<\
List of potential properties, which can be computed. ToDoPropertyList:  {\
\[OpenCurlyDoubleQuote]ReciprocalBasisVectors\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]ConnectionCoefficients\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]LieBracketCoefficients\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]ContorsionCoefficients\[CloseCurlyDoubleQuote]}
ImplementedPropertiesList={\[OpenCurlyDoubleQuote]BasisVectors\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Metric\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]ScaleFactors\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]VolumeFactor\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]InverseMetric\
\[CloseCurlyDoubleQuote]}\
\>", "Text",ExpressionUUID->"a71cf7c0-65e3-4512-872b-5e77862264d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"availableProperties", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<BasisVectors\>\"", ",", "\"\<Metric\>\"", ",", 
     "\"\<ScaleFactors\>\"", ",", "\"\<VolumeFactor\>\"", ",", 
     "\"\<InverseMetric\>\"", ",", "\"\<ReciprocalVectors\>\"", ",", 
     "\"\<FullBasis\>\"", ",", "\"\<ToBasisElementRules\>\"", ",", 
     "\"\<NormalToSurface\>\"", ",", 
     "\"\<ChristoffelSymbolsOfSecondKind\>\""}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[1471]:=",ExpressionUUID->"1aa32fb6-a355-49a1-93e5-5196fb9bd4a3"],

Cell["Option check.", "Text",ExpressionUUID->"e7daae4e-1fab-4bdf-8cd1-fab68540490b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"syntax", " ", "declaration"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineCoordinateChart", "[", "\"\<Quiet\>\"", "]"}], 
     "=", 
     RowBox[{"\"\<True\>\"", "|", "\"\<False\>\""}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineCoordinateChart", "[", "\"\<gaPropertiesToCompute\>\"", 
      "]"}], "=", 
     RowBox[{"\"\<List which contains a subset of strings: \>\"", "<>", 
      RowBox[{"(", 
       RowBox[{"StringJoin", "@@", 
        RowBox[{"Riffle", "[", 
         RowBox[{"availableProperties", ",", "\"\<,\>\""}], "]"}]}], 
       ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineCoordinateChart", "[", "\"\<PatchData\>\"", "]"}], "=", 
     "\"\<Pass properties directly instead of computing inside the function. \
Should have form \
\\\"PatchData\\\"->{\\\"Patch1\\\"->{\\\"BasisVectors\\\"->{__}, ... }, \
\\\"Patch2\\\"->{\\\"BasisVectors\\\"->{__}, ... }, ... }. To work in non \
coordinate basis only \\\"BasisVectors\\\"->{__} can be needed. Other data \
are computed from passed BasisVector. Neither correctness nor consistency for \
this option is checked.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineCoordinateChart", "[", "\"\<Simplify\>\"", "]"}], "=", 
     RowBox[{
     "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
      "\"\<TODO: any transformation (i.e with head Function[]) of \
expression\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionDefineCoordinateChart", "[", 
      "\"\<SimplifyToBasisElementRules\>\"", "]"}], "=", 
     RowBox[{
     "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
      "\"\<TODO: any transformation (i.e with head Function[]) of \
expression\>\""}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"actual", " ", "test"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineCoordinateChart", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineCoordinateChart", "[", 
      RowBox[{"\"\<gaPropertiesToCompute\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Intersection", "[", 
       RowBox[{"val", ",", "availableProperties"}], "]"}], "===", 
      RowBox[{"Sort", "[", "val", "]"}]}]}], ";", 
    RowBox[{
     RowBox[{"testOptionDefineCoordinateChart", "[", 
      RowBox[{"\"\<PatchData\>\"", ",", "val_"}], "]"}], ":=", "True"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineCoordinateChart", "[", 
      RowBox[{"\"\<Simplify\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
        "_Function"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionDefineCoordinateChart", "[", 
      RowBox[{"\"\<SimplifyToBasisElementRules\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"val", ",", 
       RowBox[{
       "True", "|", "False", "|", "FullSimplify", "|", "Identity", "|", 
        "_Function"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1472]:=",ExpressionUUID->"e0d4fc7b-a347-4e17-8443-44fc694f9828"],

Cell["\<\
Computation of listed properties.  Coordinate system name in general could \
not match the ManifoldName given when defining PointVector. The later defines \
the manifold, whereas coordinate system defines the coordinate system, which \
can be coordinate and non-coordinate. Also the coordinate system basis \
vectors sometimes can be relatively rotated (for example in case of sphere \
surface) with respect to manifold vectors, etc. So we can have few different \
coordinate systems for the same manifold (surface). Therefore we need a new \
name.\
\>", "Text",ExpressionUUID->"0a0b58ac-c151-4dd6-89b2-03eacc7d3515"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
      RowBox[{"gaPropertiesToCompute", "->", "availableProperties"}], ",", 
      RowBox[{"Simplify", "->", "True"}], ",", 
      RowBox[{"\"\<SimplifyToBasisElementRules\>\"", "->", "False"}], ",", 
      RowBox[{"\"\<PatchData\>\"", "->", 
       RowBox[{"{", "}"}]}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Shifrin", "'"}], "s", " ", "advise"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{"gaDefineCoordinateChart", "[", 
        RowBox[{"in", " ", "___"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"out", "=", 
           RowBox[{"iDefineCoordinateChart", "@", 
            RowBox[{"{", "in", "}"}]}]}], "}"}], ",", 
         RowBox[{"out", "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"out", ",", 
            RowBox[{"iDefineCoordinateChart", "|", "$Failed"}]}], "]"}]}]}], 
        "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"gaDefineCoordinateChart", "[", 
      RowBox[{
      "chartName_String", ",", "dataForChartConstruction_Association", ",", 
       RowBox[{"op", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "theOption", ",", "theAlgebra", ",", "algebraDim", ",", "chartdim", 
          ",", "vars", ",", 
          RowBox[{"patchLength", "=", 
           RowBox[{
           "dataForChartConstruction", "[", "\"\<Patches\>\"", "]"}]}], ",", 
          "thePatchName", ",", "thePatchNameList", ",", " ", 
          "thePassedPatchOptions", ",", "thePropertyList", ",", 
          "coordAssumpt", ",", "computedProperties", ",", 
          RowBox[{"surfaceCase", "=", "False"}], ",", "propertyRequires", ",",
           "chartBasisVectors", ",", "chartBasisVectorsRules", ",", 
          "metricMatrix", ",", "scaleFactors", ",", "volumeFactor", ",", 
          "inverseMetricMatrix", ",", "reciprocalVectors", ",", 
          "reciprocalVectorsRules", ",", "fullBasisRules", ",", 
          "elementsLaterToSolve", ",", "solutionFullBasisRules", ",", 
          "toBasisElementRules", ",", "computedDataForPatch", ",", 
          "normalToSurface", ",", "gaChristoffelSymbolsOfSecondKind"}], "}"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theAlgebra", "=", 
          RowBox[{"dataForChartConstruction", "[", "\"\<GA\>\"", "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"algebraDim", "=", 
          RowBox[{"gaDimensionOfVectorSpace", "[", "theAlgebra", "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"gaSetNamedOptionValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"gaDefineCoordinateChart", ",", "#", ",", "theOption"}],
               "}"}], ",", 
             RowBox[{
              RowBox[{
              "gaOptionCheck", "[", "testOptionDefineCoordinateChart", "]"}], 
              "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
                 "}"}]}], ")"}], "]"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", 
            RowBox[{"First", "/@", 
             RowBox[{"{", "op", "}"}]}], "]"}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
            "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Quiet", "/.", 
              RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{"Simplify", "/.", 
              RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], ",", "True", 
           ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
            "Simplify"}], ",", "False", ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
            "Identity"}], ",", "FullSimplify", ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "=", 
            "FullSimplify"}], ",", " ", "_", ",", 
           RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "Separate", " ", "simplification", " ", "for", " ", 
            "ToBasisElementRules"}], ",", " ", 
           RowBox[{
           "since", " ", "here", " ", "it", " ", "takes", " ", "too", " ", 
            "long"}]}], "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{
             "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}], 
             "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}], 
            "=", 
            RowBox[{"(", 
             RowBox[{"\"\<SimplifyToBasisElementRules\>\"", "/.", 
              RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{
           "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}], 
           ",", "True", ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}], 
            "=", "Simplify"}], ",", "False", ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}], 
            "=", "Identity"}], ",", "FullSimplify", ",", 
           RowBox[{
            RowBox[{
            "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}], 
            "=", "FullSimplify"}], ",", " ", "_", ",", 
           RowBox[{
           "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"which", " ", "properties", " ", "to", " ", "compute"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}],
              "]"}], "===", "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
            "=", 
            RowBox[{"(", 
             RowBox[{"gaPropertiesToCompute", "/.", 
              RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}]}], 
             ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "running", " ", "coordinate", " ", "chart", " ", "name",
            " ", "and", " ", "compute", " ", "all", " ", "needed", " ", 
           "properties"}], "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{"gaRunningCoordinateChart", "=", "chartName"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaCoordinateChartNameOfAlgebra", "[", "theAlgebra", "]"}], 
          "=", "gaRunningCoordinateChart"}], ";", "\[IndentingNewLine]", 
         RowBox[{"gaRunningPatch", "=", 
          RowBox[{
          "dataForChartConstruction", "[", "\"\<gaRunningPatch\>\"", "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"minimal", " ", "data", " ", "consistency", " ", "check"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"thePatchNameList", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"\"\<Patch\>\"", "<>", 
               RowBox[{"ToString", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
            RowBox[{"Range", "[", "patchLength", "]"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{
             RowBox[{"vars", "=", 
              RowBox[{
              "dataForChartConstruction", "[", 
               "\"\<StandardCoordinateNames\>\"", "]"}]}], ",", 
             RowBox[{"{", "__Symbol", "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "length", " ", "of", " ", "algebra", " ", "vectors", " ", 
             "mismatch", " ", "dimension", " ", "of", " ", "coordinate", " ", 
             "chart"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"SameQ", "[", 
                RowBox[{"algebraDim", ",", 
                 RowBox[{"chartdim", "=", 
                  RowBox[{"Length", "[", "vars", "]"}]}]}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"surfaceCase", "=", "True"}], ";", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaDefineCoordinateChart", " ", "::", "dimension"}], 
                 ",", "vars", ",", "theAlgebra"}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"provided", " ", "formula", " ", 
              RowBox[{"don", "'"}], "t", " ", "include", " ", "all", " ", 
              "vars"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"Intersection", "[", 
                   RowBox[{"vars", ",", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataForChartConstruction", "[", "#", "]"}], "[", 
                    "\"\<PointVector\>\"", "]"}], ",", "_Symbol", ",", 
                    "Infinity"}], "]"}], ",", 
                    RowBox[{"bs", "|", "MV"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], ",", 
                    RowBox[{
                    "dataForChartConstruction", "[", "\"\<Parameters\>\"", 
                    "]"}]}], "]"}]}], "]"}], "]"}], "=!=", "chartdim"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaDefineCoordinateChart", "::", "vars"}], ",", 
                   "#", ",", "vars"}], "]"}], ";", 
                 RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", 
               "]"}], "&"}], "/@", "thePatchNameList"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"gaRunningCoordinateChartVars", "=", "vars"}]}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineCoordinateChart", "::", "vars"}], ",", 
              RowBox[{
              "dataForChartConstruction", "[", 
               "\"\<StandardCoordinateNames\>\"", "]"}], ",", "vars"}], "]"}],
             ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"test", " ", "coordinate", " ", "assumtions"}], " ", "*)"}],
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"And", ",", "Or", ",", "List", ",", "Element"}], 
                 "}"}], ",", 
                RowBox[{"Head", "[", 
                 RowBox[{
                  RowBox[{"dataForChartConstruction", "[", "#", "]"}], "[", 
                  "\"\<CoordinateRangeAssumptions\>\"", "]"}], "]"}]}], "]"}],
               "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaDefineCoordinateChart", "::", "inconsistency"}], 
               ",", 
               RowBox[{
                RowBox[{"dataForChartConstruction", "[", "#", "]"}], "[", 
                "\"\<CoordinateRangeAssumptions\>\"", "]"}]}], "]"}]}], "]"}],
            "&"}], "/@", "thePatchNameList"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Check", " ", "what", " ", "properties", " ", "were", " ", "passed",
            " ", "directly"}], "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"theOption", "[", "\"\<PatchData\>\"", "]"}], "]"}], "===",
             "theOption"}], ",", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<PatchData\>\"", "]"}], "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"\"\<PatchData\>\"", "/.", 
                RowBox[{"Options", "[", "gaDefineCoordinateChart", "]"}]}], 
               ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"\"\<PatchData\>\"", "->", 
                RowBox[{"{", "}"}]}], "}"}]}], ")"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"thePassedPatchOptions", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"theOption", "[", "\"\<PatchData\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", "->", 
                RowBox[{"{", "}"}]}], ")"}], "&"}], "/@", 
             RowBox[{"Complement", "[", 
              RowBox[{"thePatchNameList", ",", 
               RowBox[{"First", "/@", 
                RowBox[{"theOption", "[", "\"\<PatchData\>\"", "]"}]}]}], 
              "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "Now", " ", "compute", " ", "some", " ", "properties", " ", "from",
             " ", "provided", " ", "data"}], ",", " ", 
           RowBox[{
           "depending", " ", "on", " ", "options", " ", "what", " ", "to", 
            " ", "compute"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "computedProperties", " ", "are", " ", "computed", " ", 
            "depending", " ", "on", " ", "opion"}], ",", " ", 
           RowBox[{
           "since", " ", "they", " ", "can", " ", "take", " ", "some", " ", 
            "time"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"curvilinear", " ", "basis", " ", "vectors", " ", 
           RowBox[{"(", 
            RowBox[{"down", " ", "index"}], ")"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Compute", " ", "for", " ", "each", " ", "patch", " ", "inside", 
           " ", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", "thePatchName", "}"}], ",", "..."}], "]"}]}], 
          "*)"}], "   ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"computedDataForPatch", "=", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", "thePatchName", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "for", " ", "each", " ", "patch", " ", "assumptions", " ", 
               "about", " ", "coordinates", " ", "and", " ", "parameters"}], 
              " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"coordAssumpt", "=", 
               RowBox[{"And", "@@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "dataForChartConstruction", "[", "thePatchName", "]"}], 
                    "[", "\"\<CoordinateRangeAssumptions\>\"", "]"}], ")"}], 
                   ",", 
                   RowBox[{
                   "dataForChartConstruction", "[", 
                    "\"\<ParameterRangeAssumptions\>\"", "]"}]}], "}"}], 
                 "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"printDetails", "[", 
               RowBox[{
                RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Computing the property:\>\"", ",", 
                   "\"\<BasisVectors\>\""}], "}"}], "}"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"chartBasisVectorsRules", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<BasisVectors\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Switch", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"theOption", "[", "\"\<BasisVectors\>\"", "]"}], 
                   "=", 
                   RowBox[{"(", 
                    RowBox[{"\"\<BasisVectors\>\"", "/.", 
                    RowBox[{"(", 
                    RowBox[{"thePatchName", "/.", "thePassedPatchOptions"}], 
                    ")"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
                  "\"\<BasisVectors\>\"", ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"chartBasisVectorsRules", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RuleDelayed", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra", ",", 
                    "chartName"}], "]"}], "[", 
                    RowBox[{"mvPoint", "[", "vars", "]"}], "]"}], ",", 
                    RowBox[{"mvD", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "dataForChartConstruction", "[", "thePatchName", "]"}], 
                    "[", "\"\<PointVector\>\"", "]"}], ",", 
                    RowBox[{"vars", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}]}]}], "}"}]}], 
                    "&"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"1", ",", "chartdim"}], "]"}]}], ")"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"chartBasisVectors", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", 
                    "chartBasisVectorsRules"}], ")"}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", "__", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"theOption", "[", "\"\<BasisVectors\>\"", "]"}], 
                    "]"}], "===", "chartdim"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"chartBasisVectorsRules", "=", 
                    RowBox[{"RuleDelayed", "@@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra", ",", 
                    "chartName"}], "]"}], "[", 
                    RowBox[{"mvPoint", "[", "vars", "]"}], "]"}], "&"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"1", ",", "chartdim"}], "]"}]}], ")"}], ",", 
                    RowBox[{"theOption", "[", "\"\<BasisVectors\>\"", "]"}]}],
                     "}"}], "]"}]}]}], ";", 
                    RowBox[{"chartBasisVectors", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", 
                    "chartBasisVectorsRules"}], ")"}]}]}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "patchdata"}], 
                    ",", 
                    RowBox[{"\"\<BasisVectors\>\"", "->", 
                    RowBox[{
                    "theOption", "[", "\"\<BasisVectors\>\"", "]"}]}]}], 
                    "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", 
                   "]"}], ",", "\[IndentingNewLine]", "_", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "patchdata"}], 
                    ",", 
                    RowBox[{"\"\<BasisVectors\>\"", "->", 
                    RowBox[{
                    "theOption", "[", "\"\<BasisVectors\>\"", "]"}]}]}], 
                    "]"}], ";", 
                   RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", 
                 "]"}]}], 
               RowBox[{"(*", 
                RowBox[{"*", "end", " ", "switch"}], "*)"}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"metric", " ", "matrix", " ", 
                 RowBox[{"(", 
                  RowBox[{"down", " ", "indices"}], ")"}]}], ",", " ", 
                RowBox[{"output", " ", "list", " ", "form"}], ",", " ", 
                RowBox[{"no", " ", "optimization"}], ",", " ", 
                RowBox[{
                "can", " ", "compare", " ", "with", " ", "Christoffel", " ", 
                 "symbol", " ", "approach"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"metricMatrix", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<Metric\>\""}], "]"}], ",", "\[IndentingNewLine]", 
                
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", "\"\<BasisVectors\>\"", "}"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "metric", " ", "computation", " ", "requires", " ", 
                   "\"\<BasisVectors\>\""}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing and simplifying the property:\>\"", ",", 
                    "\"\<Metric\>\""}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"metricMatrix", "=", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Simplify\>\"", "]"}], "[", 
                    
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    "InnerProduct", ",", "chartBasisVectors", ",", 
                    "chartBasisVectors"}], "]"}], "]"}], "]"}], "]"}]}]}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<Metric\>\"", ",", "propertyRequires"}], "]"}]}],
                   "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", "ScaleFactors", " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"scaleFactors", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<ScaleFactors\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", 
                   RowBox[{"\"\<BasisVectors\>\"", ",", "\"\<Metric\>\""}], 
                   "}"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing and simplifying the property:\>\"", ",", 
                    "\"\<ScaleFactors\>\""}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"scaleFactors", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "#", "]"}], ",", "coordAssumpt"}], 
                    "]"}], "&"}], "/@", 
                    RowBox[{"Diagonal", "[", "metricMatrix", "]"}]}]}], ";"}],
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<ScaleFactors\>\"", ",", "propertyRequires"}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", "VolumeFactor", " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"volumeFactor", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<VolumeFactor\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", "\"\<BasisVectors\>\"", "}"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"volumeFactor", "=", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"OuterProduct", "@@", "chartBasisVectors"}], 
                    "]"}], ",", "coordAssumpt"}], "]"}]}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<VolumeFactor\>\"", ",", "propertyRequires"}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"inverse", " ", "metric", " ", "matrix", " ", 
                RowBox[{"(", 
                 RowBox[{"up", " ", "indices"}], ")"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"inverseMetricMatrix", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<InverseMetric\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", 
                   RowBox[{"\"\<BasisVectors\>\"", ",", "\"\<Metric\>\""}], 
                   "}"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"metricMatrix", ",", 
                    RowBox[{"bs", "|", "MV"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing the property:\>\"", ",", 
                    "\"\<InverseMetric\>\""}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"inverseMetricMatrix", "=", 
                    RowBox[{"Inverse", "[", "metricMatrix", "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "inverse"}], 
                    ",", "\"\<InverseMetric\>\""}], "]"}], ";", 
                    RowBox[{"inverseMetricMatrix", "=", 
                    RowBox[{"Inverse", "[", "metricMatrix", "]"}]}]}]}], 
                    "]"}], ";"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<InverseMetric\>\"", ",", "propertyRequires"}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"reciprocalVectorsRules", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<ReciprocalVectors\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<BasisVectors\>\"", ",", "\"\<Metric\>\"", ",", 
                    "\"\<InverseMetric\>\""}], "}"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{" ", 
                    RowBox[{"reciprocal", " ", 
                    RowBox[{"vectors", ".", " ", "Two"}], " ", "ways", " ", 
                    "to", " ", "compute", " ", "1"}], ")"}], " ", "with", " ",
                     "gaReciprocalVectors", " ", "or", " ", "2"}], ")"}], " ",
                    "with", " ", "inverse", " ", "Metric"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"if", " ", "inverse", " ", "metric", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "contain", " ", "MV"}], 
                   ",", " ", 
                   RowBox[{"then", " ", "use", " ", "it"}], ",", " ", 
                   RowBox[{"otherwise", " ", "general", " ", "formula"}]}], 
                  " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"metricMatrix", ",", 
                    RowBox[{"bs", "|", "MV"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing the property:\>\"", ",", 
                    "\"\<ReciprocalVectors\>\""}], "}"}], "}"}]}], "]"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"reciprocalVectors", "=", "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"gaGeometricMatrixProduct", "[", 
                    RowBox[{"inverseMetricMatrix", ",", 
                    RowBox[{"(", 
                    RowBox[{"List", "/@", "chartBasisVectors"}], ")"}]}], 
                    "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"reciprocalVectors", "=", 
                    RowBox[{
                    "gaReciprocalVectors", "[", "chartBasisVectors", "]"}]}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"reciprocalVectorsRules", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RuleDelayed", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", "theAlgebra", ",", 
                    "chartName"}], "]"}], "[", 
                    RowBox[{"mvPoint", "[", "vars", "]"}], "]"}], ",", 
                    RowBox[{"reciprocalVectors", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}]}], "&"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"1", ",", "chartdim"}], "]"}]}], ")"}]}], ";"}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<ReciprocalVectors\>\"", ",", 
                    "propertyRequires"}], "]"}]}], "\[IndentingNewLine]", 
                  "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"Full", " ", "down", " ", "basis"}], " ", "*)"}], " ", 
              "\[IndentingNewLine]", 
              RowBox[{"fullBasisRules", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<FullBasis\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", "\"\<BasisVectors\>\"", "}"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing and simplifying the property:\>\"", ",", 
                    "\"\<FullBasis\>\""}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"sbs", "=", 
                    RowBox[{"Rest", "[", 
                    RowBox[{"Subsets", "[", "chartBasisVectorsRules", "]"}], 
                    "]"}]}], ",", "bea", ",", "beares"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "At", " ", "this", " ", "moment", " ", "OuterProduct", 
                    " ", 
                    RowBox[{"don", "'"}], "t", " ", "yet", " ", "have", " ", 
                    "rules", " ", "to", " ", "compute", " ", "on", " ", 
                    "coordinate", " ", "patch"}], "  ", "*)"}], " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"bea", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"elementsLaterToSolve", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"OuterProduct", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{"ind_", ",", "alg_", ",", "ignoreme___"}], "]"}], 
                    "[", "bm__", "]"}], ":>", 
                    RowBox[{"bs", "[", 
                    RowBox[{"ind", ",", "alg"}], "]"}]}], "}"}]}], ")"}]}], 
                    ")"}], "&"}], "@@@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{"First", ",", "sbs", ",", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "All"}], "}"}]}], "]"}]}], ")"}]}], 
                    ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{"ind_", ",", "alg_"}], "]"}], ":>", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{"ind", ",", "alg", ",", "chartName"}], "]"}], "[", 
                    RowBox[{"mvPoint", "[", "vars", "]"}], "]"}], ")"}]}], 
                    "}"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"beares", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{"Last", ",", "sbs", ",", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "All"}], "}"}]}], "]"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fullBasisRules", "=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"bea", ",", "beares"}], "]"}], "]"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<FullBasis\>\"", ",", "propertyRequires"}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"To", " ", "basis", " ", "element", " ", "rules"}], 
                ",", " ", 
                RowBox[{
                "try", " ", "to", " ", "solve", " ", "the", " ", "same", " ", 
                 "basis", " ", "elements", " ", "in", " ", "the", " ", 
                 "cases", " ", "of", " ", "surface"}]}], "  ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"toBasisElementRules", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<ToBasisElementRules\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", 
                   RowBox[{"\"\<BasisVectors\>\"", ",", "\"\<FullBasis\>\""}],
                    "}"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing the property:\>\"", ",", 
                    "\"\<ToBasisElementRules\>\""}], "}"}], "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"solutionFullBasisRules", "=", 
                    RowBox[{
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Equal", "@@@", "fullBasisRules"}], ")"}], ",", 
                    "elementsLaterToSolve"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Applying simplify function in ToBasisElementRules:\>\
\"", ",", 
                    RowBox[{
                    "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", 
                    "]"}]}], "}"}], "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Assuming", "[", 
                    RowBox[{"coordAssumpt", ",", "\[IndentingNewLine]", 
                    RowBox[{"toBasisElementRules", "=", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<SimplifyToBasisElementRules\>\"", 
                    "]"}], "[", "#", "]"}], "&"}], ",", 
                    "solutionFullBasisRules", ",", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<ToBasisElementRules\>\"", ",", 
                    "propertyRequires"}], "]"}]}], "\[IndentingNewLine]", 
                  "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "For", " ", "surface", " ", "case", " ", "compute", " ", 
                "normal", " ", "to", " ", "the", " ", "surface", " ", "in", 
                " ", "outer", " ", "space"}], "  ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"normalToSurface", "=", "$Failed"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{
                   RowBox[{
                   "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                   ",", "\"\<NormalToSurface\>\""}], "]"}], "&&", 
                 "surfaceCase"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", "\"\<BasisVectors\>\"", "}"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing normal to the surface in outer space:\>\"",
                     ",", "\"\<NormalToSurface\>\""}], "}"}], "}"}]}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"normalToSurface", "=", 
                    RowBox[{"gaNormalize", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"OuterProduct", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Reverse", "[", "chartBasisVectors", "]"}], 
                    ")"}]}], ")"}], ",", 
                    RowBox[{"gaI", "[", "theAlgebra", "]"}]}], "]"}], "]"}], 
                    "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<NormalToSurface\>\"", ",", "propertyRequires"}],
                     "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Christoffel", " ", "symbols", " ", 
                 RowBox[{"(", "symmetric", ")"}], " ", "of", " ", "the", " ", 
                 "second", " ", "kind"}], ",", " ", 
                RowBox[{
                 RowBox[{"i", ".", "e", ".", " ", "torsion"}], " ", "free", 
                 " ", "connection"}], ",", " ", 
                RowBox[{
                 RowBox[{"see", " ", 
                  RowBox[{"https", ":"}]}], "//", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", 
                   "wiki"}], "/", "Christoffel_symbols"}]}]}], "*)"}], " ", 
              RowBox[{"(*", " ", 
               RowBox[{"also", " ", "Snygg", " ", 
                RowBox[{"book", " ", "'"}], "A", " ", "new", " ", "approach", 
                " ", "to", " ", "differential", " ", "geometry", " ", "using",
                 "  ", "Clifford", " ", "geometric", " ", 
                RowBox[{"algebra", "'"}], " ", 
                RowBox[{"p", ".", " ", "135"}], " ", "formula", " ", 
                RowBox[{"(", "5.31", ")"}]}], "   ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "The", " ", "name", " ", "ChristoffelSymbol", " ", "reserved", 
                " ", "for", " ", "holonomic", " ", 
                RowBox[{"(", 
                 RowBox[{"aka", " ", "coordinate"}], ")"}], "  ", "basis", 
                " ", 
                RowBox[{"only", "."}]}], " ", "*)"}], " ", 
              "\[IndentingNewLine]", 
              RowBox[{"gaChristoffelSymbolsOfSecondKind", "=", "$Failed"}], 
              ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{
                  "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                  ",", "\"\<ChristoffelSymbolsOfSecondKind\>\""}], "]"}], ",",
                 "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"propertyRequires", "=", 
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<BasisVectors\>\"", ",", "\"\<Metric\>\"", ",", 
                    "\"\<InverseMetric\>\""}], "}"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"ContainsAll", "[", 
                    RowBox[{
                    RowBox[{
                    "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}], 
                    ",", "propertyRequires"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"printDetails", "[", 
                    RowBox[{
                    RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Computing all symmetric (torsion free) Christoffel \
symbols of the second kind: \>\"", ",", 
                    "\"\<ChristoffelSymbolsOfSecondKind\>\""}], "}"}], 
                    "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"gaChristoffelSymbolsOfSecondKind", "=", 
                    RowBox[{"SymmetrizedArray", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "to", " ", "save", " ", "space", " ", "replace", " ", 
                    "all", " ", "not", " ", "explicitly", " ", "listed", " ", 
                    "elements", " ", "to", " ", "zero"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"up1", ",", "do1", ",", "do2"}], "}"}], "->", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"inverseMetricMatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"up1", ",", "contrInd"}], "]"}], "]"}], 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"D", "[", 
                    RowBox[{
                    RowBox[{"metricMatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"do1", ",", "contrInd"}], "]"}], "]"}], ",", 
                    RowBox[{"vars", "[", 
                    RowBox[{"[", "do2", "]"}], "]"}]}], "]"}], "+", 
                    RowBox[{"D", "[", 
                    RowBox[{
                    RowBox[{"metricMatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"contrInd", ",", "do2"}], "]"}], "]"}], ",", 
                    RowBox[{"vars", "[", 
                    RowBox[{"[", "do1", "]"}], "]"}]}], "]"}], "-", 
                    RowBox[{"D", "[", 
                    RowBox[{
                    RowBox[{"metricMatrix", "[", 
                    RowBox[{"[", 
                    RowBox[{"do2", ",", "do1"}], "]"}], "]"}], ",", 
                    RowBox[{"vars", "[", 
                    RowBox[{"[", "contrInd", "]"}], "]"}]}], "]"}]}], ")"}]}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"contrInd", ",", "chartdim"}], "}"}]}], "]"}]}]}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"up1", ",", "chartdim"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"do1", ",", "chartdim"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"do2", ",", "do1", ",", "chartdim"}], "}"}]}], 
                    "]"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"_List", "->", "0"}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_"}], "}"}], "->", "0"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"chartdim", ",", "chartdim", ",", "chartdim"}], 
                    "}"}], ",", 
                    RowBox[{"Symmetric", "[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], ";"}], 
                   "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDefineCoordinateChart", "::", "property"}], 
                    ",", "\"\<ChristoffelSymbolsOfSecondKind\>\"", ",", 
                    "propertyRequires"}], "]"}]}], "\[IndentingNewLine]", 
                  "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{
                "If", " ", "all", " ", "gaChristoffelSymbols", " ", "are", 
                 " ", "zeroes"}], ",", " ", 
                RowBox[{
                "mark", " ", "coordinate", " ", "system", " ", "as", " ", 
                 "\"\<Flat\>\""}], ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"i", ".", "e", ".", " ", "set"}], " ", 
                  RowBox[{"gaFlatSpaceQ", "[", "chartName", "]"}]}], "=", 
                 "True"}]}], "  ", "*)"}], " ", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                "gaChristoffelSymbolsOfSecondKind", "===", "$Failed"}], ",", 
                RowBox[{
                 RowBox[{"gaFlatSpaceQ", "[", "chartName", "]"}], "=", 
                 "$Failed"}], ",", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Union", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Last", "/@", 
                    RowBox[{
                    "ArrayRules", "[", "gaChristoffelSymbolsOfSecondKind", 
                    "]"}]}], "]"}], "]"}], "===", 
                   RowBox[{"{", "0", "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"gaFlatSpaceQ", "[", "chartName", "]"}], "=", 
                   "True"}], ",", 
                  RowBox[{
                   RowBox[{"gaFlatSpaceQ", "[", "chartName", "]"}], "=", 
                   "False"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{
                "collect", " ", "all", " ", "computed", " ", "properties", 
                 " ", "into", " ", "data", " ", 
                 RowBox[{"structure", ":", " ", "TODO"}]}], ",", " ", 
                RowBox[{
                "needs", " ", "to", " ", "remove", " ", "properties"}], ",", 
                " ", 
                RowBox[{"which", " ", "were", " ", "not", " ", "computed"}]}],
                " ", "*)"}], "  ", "\[IndentingNewLine]", 
              RowBox[{"computedProperties", "=", 
               RowBox[{"KeyTake", "[", 
                RowBox[{
                 RowBox[{"Association", "@@", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    "\"\<BasisVectors\>\"", "->", "chartBasisVectorsRules"}], 
                    ",", 
                    RowBox[{"\"\<Metric\>\"", "->", "metricMatrix"}], ",", 
                    RowBox[{"\"\<ScaleFactors\>\"", "->", "scaleFactors"}], 
                    ",", 
                    RowBox[{"\"\<VolumeFactor\>\"", "->", "volumeFactor"}], 
                    ",", 
                    RowBox[{
                    "\"\<InverseMetric\>\"", "->", "inverseMetricMatrix"}], 
                    ",", 
                    RowBox[{
                    "\"\<ReciprocalVectors\>\"", "->", 
                    "reciprocalVectorsRules"}], ",", 
                    RowBox[{"\"\<FullBasis\>\"", "->", "fullBasisRules"}], 
                    ",", 
                    RowBox[{
                    "\"\<ToBasisElementRules\>\"", "->", 
                    "toBasisElementRules"}], ",", 
                    RowBox[{
                    "\"\<NormalToSurface\>\"", "->", "normalToSurface"}], ",", 
                    RowBox[{
                    "\"\<ChristoffelSymbolsOfSecondKind\>\"", "->", 
                    "gaChristoffelSymbolsOfSecondKind"}]}], "}"}]}], ",", 
                 RowBox[{
                 "theOption", "[", "\"\<gaPropertiesToCompute\>\"", "]"}]}], 
                "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"thePatchName", "->", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Association", "[", 
                  RowBox[{
                   RowBox[{"\"\<PointVector\>\"", "->", 
                    RowBox[{
                    RowBox[{
                    "dataForChartConstruction", "[", "thePatchName", "]"}], 
                    "[", "\"\<PointVector\>\"", "]"}]}], ",", 
                   RowBox[{"\"\<CoordinateRangeAssumptions\>\"", "->", 
                    RowBox[{
                    RowBox[{
                    "dataForChartConstruction", "[", "thePatchName", "]"}], 
                    "[", "\"\<CoordinateRangeAssumptions\>\"", "]"}]}]}], 
                  "]"}], ",", "computedProperties"}], "]"}]}]}]}], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], "/@", 
           "thePatchNameList"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "end", " ", "of", " ", "Function", " ", "for", " ", "each", " ", 
           "patch"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Association", "[", 
           RowBox[{"dataForChartConstruction", ",", "computedProperties"}], 
           "]"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "output", " ", "computed", " ", "and", " ", "initial", " ", 
           "properties"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"<|", 
             RowBox[{"\"\<ChartName\>\"", "->", "chartName"}], "|>"}], ",", 
            RowBox[{"KeyDrop", "[", 
             RowBox[{"dataForChartConstruction", ",", "thePatchNameList"}], 
             "]"}], ",", 
            RowBox[{"Association", "@@", "computedDataForPatch"}]}], 
           "]"}]}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"KeyExistsQ", "[", 
            RowBox[{"dataForChartConstruction", ",", 
             RowBox[{"(", 
              RowBox[{"\"\<Patch\>\"", "<>", 
               RowBox[{"ToString", "[", "#", "]"}]}], ")"}]}], "]"}], "&"}], "/@", 
          RowBox[{"Range", "[", 
           RowBox[{"dataForChartConstruction", "[", "\"\<Patches\>\"", "]"}], 
           "]"}]}], ")"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[1481]:=",ExpressionUUID->"2eaaa28e-a9dd-46b1-8dd6-8343cdfa3dcc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCoordinateChart", "[", "\"\<Properties\>\"", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<ManifoldName\>\"", ",", "\"\<GA\>\"", ",", "\"\<Dimension\>\"", ",", 
     "\"\<Patches\>\"", ",", "\"\<gaRunningPatch\>\"", ",", 
     "\"\<ParameterRangeAssumptions\>\"", ",", "\"\<Parameters\>\"", ",", 
     "\"\<StandardCoordinateNames\>\"", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"ToString", "[", "gaRunningPatch", "]"}], ")"}], "@@", 
      "availableProperties"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[1483]:=",ExpressionUUID->"d517ca30-ff08-4414-97bf-eb945f4a19e1"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Derivatives of MV"
}], "Subsection",ExpressionUUID->"442e6594-bb0f-4563-808f-1cfe5f2e85b9"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". mvD[expr_, var_Symbol] (automatic computation, like D[])"
}], "Subsubsection",ExpressionUUID->"0096699d-d5bf-4563-acb1-3f07cfd61799"],

Cell["\<\
Implementation of derivative with respect to variable. It could be used by \
other types of derivatives.
Holding of all arguments causes many problems, in particular even in the step \
of construction form TemplateBox. Try to avoid it\
\>", "Text",ExpressionUUID->"df828b95-4edf-4b2c-9da5-1286e0e6619d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "::", "arg"}], "=", 
   "\"\<mvD command fail for expression is `1` and differentiation variable \
`2`. Corrdinate variable might have multiple dependencies.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[1484]:=",ExpressionUUID->"d0469727-46a8-4ade-95ec-917462bc7f35"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "[", 
    RowBox[{"expr_", ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"0", "/;", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", "var"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "[", 
    RowBox[{"var_Symbol", ",", "var_Symbol"}], "]"}], ":=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "if", " ", "var", " ", "is", " ", "not", " ", "coordinate", " ", 
       "variable"}], ",", " ", 
      RowBox[{"simply", " ", "differentiate"}]}], " ", "*)"}], " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvD", "[", 
       RowBox[{"expr_", ",", "var_Symbol"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{"expr", ",", "var"}], "]"}], "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"gaRunningCoordinateChartVars", "=!=", 
          RowBox[{"{", "}"}]}], ")"}], "&&", 
        RowBox[{"Not", "[", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"gaRunningCoordinateChartVars", ",", "var"}], "]"}], "]"}], 
        "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"MV", "|", "bs"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"when", " ", "var", " ", "is", " ", "a", " ", "coordinate"}], 
       ",", " ", 
       RowBox[{"use", " ", "additional", " ", "specific", " ", "rules"}]}], 
      " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvD", "[", 
       RowBox[{"expr_", ",", "var_Symbol"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{"expr", ",", "var"}], "]"}], "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"gaRunningCoordinateChartVars", "=!=", 
          RowBox[{"{", "}"}]}], ")"}], "&&", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"gaRunningCoordinateChartVars", ",", "var"}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"MV", "|", "bs"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
        RowBox[{"(", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"var", "[", "__", "]"}]}], "]"}], ")"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvD", "[", 
       RowBox[{"expr_", ",", "var_Symbol"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"alldvars", "=", 
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", "_var", ",", "Infinity"}], 
              "]"}], "]"}]}], ",", "dvar"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "alldvars", "]"}], "=!=", "1"}], ",", 
            RowBox[{"dvar", "=", 
             RowBox[{"alldvars", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"mvD", "::", "arg"}], ",", "expr", ",", "var"}], "]"}],
              ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"D", "[", 
           RowBox[{"expr", ",", "dvar"}], "]"}]}]}], "\[IndentingNewLine]", 
        "]"}], "/;", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"gaRunningCoordinateChartVars", "=!=", 
          RowBox[{"{", "}"}]}], ")"}], "&&", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"gaRunningCoordinateChartVars", ",", "var"}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"MV", "|", "bs"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
        RowBox[{"(", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "var", ",", 
           RowBox[{"Heads", "->", "False"}]}], "]"}], ")"}], "&&", 
        RowBox[{"(", 
         RowBox[{"!", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "var", ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}], ")"}]}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[1485]:=",ExpressionUUID->"442fb855-1f7e-4bdc-9459-d801ba264e33"],

Cell[TextData[{
 "Above rules are tricky, since tries to account both mvD[x,x]->1 and \
mvD[x[t],x]->1. The last syntax allow coordinate be a function of scalar \
parameter t. ",
 StyleBox["Unintended behaviour can occur if expression mixes x and x[t]",
  FontColor->RGBColor[1, 0.5, 0]],
 "!  Differentiate x[t] with respect to x is useful for scalar function of \
vector \\vector{v(t)}={x[t],y[t],z[t]}. "
}], "Text",ExpressionUUID->"44bb557f-48c6-4c32-875b-6fd72794ecca"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Map", " ", "over", " ", "Plus", " ", "keeping", " ", "arguments", " ", 
    "unevaluated"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"mvD", "[", 
     RowBox[{
      RowBox[{"Plus", "[", "args__", "]"}], ",", "var_Symbol"}], "]"}], "]"}],
    ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"x", ",", 
        RowBox[{"mvD", "[", 
         RowBox[{"x", ",", "var"}], "]"}], ",", "HoldAll"}], "]"}], "/@", 
      RowBox[{"Unevaluated", "[", 
       RowBox[{"{", "args", "}"}], "]"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.87213668837321*^9, 3.872136706015373*^9}, {
  3.872136928796255*^9, 3.872136938505748*^9}, {3.872137108394985*^9, 
  3.872137144097966*^9}, {3.872137259333537*^9, 3.872137264057434*^9}, {
  3.872137377041214*^9, 3.872137381406454*^9}, {3.872137506263226*^9, 
  3.8721375128475733`*^9}, {3.8721376063715553`*^9, 3.8721376982793617`*^9}, {
  3.87213779579703*^9, 3.8721378075179377`*^9}, {3.872137881770049*^9, 
  3.872137914970777*^9}, {3.872137967816741*^9, 3.87213796972613*^9}, {
  3.872140477169536*^9, 3.8721404786326513`*^9}, {3.87499261002627*^9, 
  3.8749926457008266`*^9}},
 CellLabel->
  "In[1488]:=",ExpressionUUID->"6285164b-e236-4853-8f20-fb9fb8a6dfb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Inside", " ", "products", " ", "differentiate", " ", "each", " ", "of", 
     " ", "terms"}], ",", " ", 
    RowBox[{"then", " ", "add", " ", "the", " ", "result"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"mvD", "[", 
    RowBox[{
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "_Times", "|", "_GeometricProduct", "|", "_OuterProduct", "|", 
        "_InnerProduct", "|", "_LeftContract", "|", "_RightContract"}], 
       ")"}]}], ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Unevaluated", "[", "h", "]"}], ",", 
          RowBox[{"i", "->", 
           RowBox[{"Extract", "[", 
            RowBox[{
             RowBox[{"Unevaluated", "[", "h", "]"}], ",", "i", ",", 
             RowBox[{"Function", "[", 
              RowBox[{"x", ",", 
               RowBox[{"mvD", "[", 
                RowBox[{"x", ",", "var"}], "]"}], ",", "HoldAll"}], "]"}]}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"Unevaluated", "[", "h", "]"}], "]"}]}], "}"}]}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8523645832559032`*^9, 3.8523646402546864`*^9}, {
   3.852713416757958*^9, 3.852713420505012*^9}, {3.8527136696100407`*^9, 
   3.852713671910633*^9}, 3.852714433188876*^9, {3.8527145129005823`*^9, 
   3.8527145214388103`*^9}, {3.8527152746862497`*^9, 3.852715335670731*^9}, {
   3.852715376850504*^9, 3.8527153785633583`*^9}, {3.852715447031077*^9, 
   3.852715486957108*^9}, {3.852715565252099*^9, 3.8527155676686583`*^9}, {
   3.874992659924038*^9, 3.874992729213477*^9}, {3.8751571545480328`*^9, 
   3.875157162768341*^9}},
 CellLabel->
  "In[1489]:=",ExpressionUUID->"466c9756-aed4-4c5e-8a59-ba2e768a7079"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "expression", " ", "is", " ", "neither", " ", "basis", " ", 
     "element", " ", "nor", " ", "one", " ", "of", " ", "product"}], ",", " ", 
    RowBox[{
    "differentiate", " ", "the", " ", "expression", " ", "with", " ", 
     RowBox[{"D", "[", "]"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvD", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{"Except", "[", 
            RowBox[{"GeometricProduct", "|", 
             RowBox[{"bs", "[", "__", "]"}], "|", "OuterProduct", "|", 
             "InnerProduct", "|", "LeftContract", "|", "RightContract"}], 
            "]"}], ")"}]}], ")"}], "[", "argg1_", "]"}], ",", "var_Symbol"}], 
      "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"ReplaceAll", "[", 
           RowBox[{
            RowBox[{"D", "[", 
             RowBox[{
              RowBox[{"h", "[", "x", "]"}], ",", "x"}], "]"}], ",", 
            RowBox[{"x", "->", 
             RowBox[{"(", 
              RowBox[{"Unevaluated", "[", "argg1", "]"}], ")"}]}]}], "]"}], 
          ",", 
          RowBox[{"mvD", "[", 
           RowBox[{"argg1", ",", "var"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"Not", "[", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "argg1", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"ae53a78d-1e5a-4ae0-a786-97918879d23c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Separate", " ", "rule", " ", "for", " ", "power"}], ",", " ", 
    RowBox[{"since", " ", "it", " ", "has", " ", "two", " ", 
     RowBox[{"arguments", ".", " ", "First"}], " ", "argument", " ", "should",
      " ", "be", " ", "not", " ", 
     RowBox[{"MV", ":", " ", 
      RowBox[{"logarithmic", " ", "differentiation", " ", "rule"}]}]}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvD", "[", 
      RowBox[{
       RowBox[{"Power", "[", 
        RowBox[{"argnomv_", ",", "argg1_"}], "]"}], ",", "var_Symbol"}], 
      "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "differentiated", " ", "argument", " ", "into", " ", "first", " ", 
           "position"}], ",", " ", 
          RowBox[{"function", " ", "moved", " ", "to", " ", "end"}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"mvD", "[", 
           RowBox[{
            RowBox[{"argg1", "\[GeometricProduct]", 
             RowBox[{"Log", "[", "argnomv", "]"}]}], ",", "var"}], "]"}], ",", 
          RowBox[{"Power", "[", 
           RowBox[{"argnomv", ",", "argg1"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{"argnomv", ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "argg1", "}"}], ",", 
          RowBox[{"MV", "|", "bs"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.875186973334867*^9, 3.8751871535294857`*^9}, {
  3.875187258385586*^9, 3.875187274493149*^9}, {3.875187309923122*^9, 
  3.875187345410994*^9}, {3.8751874124048223`*^9, 3.87518747221065*^9}, {
  3.8751878546394157`*^9, 3.875187950710267*^9}},
 CellLabel->
  "In[1490]:=",ExpressionUUID->"261669dc-95d0-48fc-af59-26f0e7c766ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Coordinate", " ", "specific", " ", "rules", " ", "for", " ", "basis", " ",
     "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"mvD", " ", "of", " ", "basis", " ", "element", " ", 
    RowBox[{"(", 
     RowBox[{"with", " ", "and", " ", "without", " ", "_mvPoint"}], ")"}], 
    " ", "are", " ", "assumed", " ", "to", " ", "be", " ", 
    RowBox[{"zero", ".", " ", "Only"}], " ", "directional", " ", "derivative",
     " ", "can", " ", "be", " ", 
    RowBox[{"nonzero", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"mvD", "[", 
        RowBox[{"bs", "[", "indAlgMark__", "]"}], "]"}], ":=", "0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvD", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"bs", "[", "indAlgMark__", "]"}], "[", "_mvPoint", "]"}], 
         ",", "var_Symbol"}], "]"}], ":=", "0"}]}]}], "\[IndentingNewLine]", 
    "]"}], ";"}]}]], "Input",
 CellLabel->
  "In[1491]:=",ExpressionUUID->"24dff860-69b2-4ea2-af6a-c6927890d790"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaDirectionalDerivative[ expr, var_?VectorQ] and related \
gaDerivativeExpand[]"
}], "Subsubsection",ExpressionUUID->"202bc665-492a-4eb9-8d7c-6e09f9a9842a"],

Cell[TextData[{
 "Implementation of directional derivative with respect to VECTOR. The real \
computations starts after asking to expand the expression with ",
 StyleBox["gaDerivativeExpand[]",
  FontWeight->"Bold"],
 " (shortcut ",
 StyleBox["gaDD[ ]",
  FontWeight->"Bold"],
 "). Use FixedPoint+Replace[,All].  maxIter is set to 50 for development, \
since value 10 was exceeded for quite simple input."
}], "Text",ExpressionUUID->"2308fa30-61c8-4e2d-b87e-cbecf01889bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDerivativeExpand", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"maxIter_", ":", "50"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theDERules", "=", "deRules"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FixedPoint", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{"#", ",", "theDERules", ",", "All"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"derivativeExpandHelp", "[", "\[IndentingNewLine]", 
         RowBox[{"Replace", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaToDirectionalDerivative", "[", "expr", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaDirectionalDerivative", "[", 
              RowBox[{"ex_", ",", "ar_"}], "]"}], ":>", 
             RowBox[{"derivativeExpandHelp", "[", 
              RowBox[{"gaDirectionalDerivative", "[", 
               RowBox[{"ex", ",", "ar"}], "]"}], "]"}]}], "}"}], ",", "All"}],
           "]"}], "\[IndentingNewLine]", "]"}], ",", "maxIter"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", "gaDerivativeExpand"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",ExpressionUUID->"a89810da-\
f8e5-4747-b2ca-2648917efa05"],

Cell["\<\
Linearity with respect to the argument expression:
1)Nothing to do when there are no derivatives. 
2) Map over Plus arguments 
3)  linearity in the field argument: D[A+B,a]=D[A,a]+D[B,a]\
\>", "Text",ExpressionUUID->"e266808c-af50-4f3b-b38d-1adaf8540a7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deLinearityArgumentRules", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", "expr_", "]"}], "]"}], ":>", 
        RowBox[{"expr", "/;", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "gaDirectionalDerivative"}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"c_", ",", "expr__"}], "]"}], "]"}], "]"}], ":>", 
        RowBox[{
         RowBox[{"c", "*", 
          RowBox[{"derivativeExpandHelp", "[", 
           RowBox[{"Times", "[", "expr", "]"}], "]"}]}], "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "c", "}"}], ",", 
             RowBox[{"Join", "[", 
              RowBox[{"MV", "|", "bs"}], "]"}], ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
            "]"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", "expr_Plus", "]"}], "]"}], ":>", 
        RowBox[{
         RowBox[{"derivativeExpandHelp", "/@", "expr"}], "/;", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
          "]"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", 
          RowBox[{"gaDirectionalDerivative", "[", 
           RowBox[{"expr_Plus", ",", "arg_"}], "]"}], "]"}], "]"}], ":>", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"derivativeExpandHelp", "[", 
             RowBox[{"gaDirectionalDerivative", "[", 
              RowBox[{"#", ",", "arg"}], "]"}], "]"}], "&"}], "/@", "expr"}], 
          ")"}], "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaVectorQ", "[", "arg", "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
            "]"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1493]:=",ExpressionUUID->"fed6cf06-6277-4460-ad25-2580d3240fe4"],

Cell["\<\
Linearity with respect to the direction expression:
1) Map over Plus arguments in direction argument
 2) Factor out of derivative expression if direction don\[CloseCurlyQuote]t \
have MVs or vars\
\>", "Text",ExpressionUUID->"469cecfe-781a-47d0-87e7-5422e47050bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deLinearityDirectionRules", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", 
          RowBox[{"gaDirectionalDerivative", "[", 
           RowBox[{"expr_", ",", "arg_Plus"}], "]"}], "]"}], "]"}], ":>", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"derivativeExpandHelp", "[", 
             RowBox[{"gaDirectionalDerivative", "[", 
              RowBox[{"expr", ",", "#"}], "]"}], "]"}], "&"}], "/@", "arg"}], 
          ")"}], "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaVectorQ", "[", "arg", "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
            "]"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", 
          RowBox[{"gaDirectionalDerivative", "[", 
           RowBox[{"expr_", ",", 
            RowBox[{"Times", "[", 
             RowBox[{"c_", ",", "arg__"}], "]"}]}], "]"}], "]"}], "]"}], ":>", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"thechartName", "=", 
            RowBox[{"gaGetCoordinateChartName", "[", 
             RowBox[{"Times", "[", 
              RowBox[{"c", ",", "arg"}], "]"}], "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"c", "*", 
            RowBox[{"derivativeExpandHelp", "[", 
             RowBox[{"gaDirectionalDerivative", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Times", "[", "arg", "]"}]}], "]"}], "]"}]}], "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{"MV", "|", "bs"}], "]"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
             RowBox[{"FreeQ", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
              "]"}]}], ")"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1494]:=",ExpressionUUID->"71a67902-ef44-42dd-a54f-a6ac3abae107"],

Cell["\<\
Argument product rules:
1) Go inside products (Note, the brackets around h are important. Otherwise \
procedure will go wrong).
2) differentiate each product term and sum a result\
\>", "Text",ExpressionUUID->"48ced844-91e8-451e-be35-4682225ec6f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deArgumentProductRules", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"derivativeExpandHelp", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], "[", 
        "arg1__", "]"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"derivativeExpandHelp", "/@", 
        RowBox[{"h", "[", "arg1", "]"}]}], "/;", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "arg1", "}"}], ",", "gaDirectionalDerivative"}], 
          "]"}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "arg1", "}"}], ",", 
          RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
         "]"}]}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"derivativeExpandHelp", "[", 
        RowBox[{"gaDirectionalDerivative", "[", 
         RowBox[{
          RowBox[{"expr", ":", 
           RowBox[{"(", 
            RowBox[{
            "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
             "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
          "arg_"}], "]"}], "]"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"Plus", "@@", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"ReplacePart", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"i", "->", 
             RowBox[{"derivativeExpandHelp", "[", 
              RowBox[{"gaDirectionalDerivative", "[", 
               RowBox[{
                RowBox[{"expr", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "arg"}], "]"}], 
              "]"}]}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "expr", "]"}]}], "}"}]}], "]"}]}], "/;", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "expr", "]"}], ">", "1"}], ")"}], "&&", 
         RowBox[{"gaVectorQ", "[", "arg", "]"}], "&&", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"derivativeExpandHelp", "|", "gaDerivativeExpand"}]}], 
          "]"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1495]:=",ExpressionUUID->"1006a229-b22b-4cf7-bbdc-44000428c8bc"],

Cell["\<\
Differentiation of scalar:
1) pass known case to mvD: gaDD for scalar should return a scalar.
2) If we have scalar multiplied by MV, differentiate the scalar with mvD.\
\>", "Text",ExpressionUUID->"6334fec6-4046-4161-a901-b7e0b94bb708"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deScalarRules", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", 
          RowBox[{"gaDirectionalDerivative", "[", 
           RowBox[{"expr_", ",", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "theInd_Integer", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "args1__"}], "]"}], "[", 
             RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}]}], "]"}], 
          "]"}], "]"}], ":>", 
        RowBox[{
         RowBox[{"mvD", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"vars", "[", 
            RowBox[{"[", "theInd", "]"}], "]"}]}], "]"}], "/;", 
         RowBox[{
          RowBox[{"gaGradeList", "[", "expr", "]"}], "===", 
          RowBox[{"{", "0", "}"}]}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"derivativeExpandHelp", "[", 
          RowBox[{"gaDirectionalDerivative", "[", 
           RowBox[{
            RowBox[{"Times", "[", 
             RowBox[{"c_", ",", "expr__"}], "]"}], ",", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "theInd_Integer", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "args1__"}], "]"}], "[", 
             RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}]}], "]"}], 
          "]"}], "]"}], ":>", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Times", "[", 
            RowBox[{
             RowBox[{"mvD", "[", 
              RowBox[{"c", ",", 
               RowBox[{"vars", "[", 
                RowBox[{"[", "theInd", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"Times", "[", "expr", "]"}]}], "]"}], "+", 
           RowBox[{"c", "*", 
            RowBox[{"derivativeExpandHelp", "[", 
             RowBox[{"gaDirectionalDerivative", "[", 
              RowBox[{
               RowBox[{"Times", "[", "expr", "]"}], ",", 
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "theInd", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "args1"}], "]"}], "[", 
                RowBox[{"mvPoint", "[", "vars", "]"}], "]"}]}], "]"}], 
             "]"}]}]}], ")"}], "/;", 
         RowBox[{
          RowBox[{"gaGradeList", "[", "c", "]"}], "===", 
          RowBox[{"{", "0", "}"}]}]}]}]}], "\[IndentingNewLine]", "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1496]:=",ExpressionUUID->"c263e3f6-5f9b-472e-8f96-6bd8319b854a"],

Cell["\<\
Differentiation of vector.
Different  definitions for flat and curved spaces! Coordinate system is flat \
when gaFlatSpaceQ[name]=True
1) directional derivative of down vector with respect to down vector (only \
index can differ)\
\>", "Text",ExpressionUUID->"7baa0486-00d4-4bf7-8191-347fd860103a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"deVectorRules", "=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{
        "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
         "]"}]}], "}"}], ",", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"flat", " ", "space", " ", "rule", " ", "first"}], ",", " ", 
         
         RowBox[{
         "zero", " ", "when", " ", "differentiate", " ", "any", " ", "basis", 
          " ", "element", " ", "along", " ", "direction", " ", "of", " ", 
          "any", " ", 
          RowBox[{"(", "nonscalar", ")"}], " ", "basis", " ", "element"}]}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"derivativeExpandHelp", "[", 
           RowBox[{"gaDirectionalDerivative", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
               "mvIndExpr_mvDownUp", ",", "al_Cl", ",", 
                "coordSysName_String"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
               "mvIndDirection_mvDownUp", ",", "al_Cl", ",", 
                "coordSysName_String"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}]}], "]"}], 
           "]"}], "]"}], ":>", 
         RowBox[{"0", "/;", 
          RowBox[{
           RowBox[{"gaFlatSpaceQ", "[", "coordSysName", "]"}], "&&", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"Join", "@@", "mvIndDirection"}], "]"}], "]"}], ">", 
             "0"}], ")"}]}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "curved", " ", "space", " ", "rules", " ", "are", " ", "much", " ", 
           "more", " ", "complex"}], ",", " ", 
          RowBox[{"therefore", " ", "the", " ", "separation"}]}], " ", "*)"}],
         " ", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"indices", " ", "down", " ", "rule"}], " ", "*)"}], 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"derivativeExpandHelp", "[", 
           RowBox[{"gaDirectionalDerivative", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "doInds___", "}"}], ",", 
                  RowBox[{"{", "uInds__", "}"}]}], "]"}], ",", "al_Cl", ",", 
                "coordSysName_String"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "alongDirection_Integer", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "al_Cl", ",", 
                "coordSysName_String"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}]}], "]"}], 
           "]"}], "]"}], ":>", 
         RowBox[{
          RowBox[{"derivativeExpandHelp", "[", 
           RowBox[{"gaDirectionalDerivative", "[", 
            RowBox[{
             RowBox[{"gaIndexDown", "[", 
              RowBox[{
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "doInds", "}"}], ",", 
                   RowBox[{"{", "uInds", "}"}]}], "]"}], ",", "al", ",", 
                 "coordSysName"}], "]"}], "[", 
               RowBox[{"mvPoint", "[", "vars", "]"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "alongDirection", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "al", ",", 
                "coordSysName"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars", "]"}], "]"}]}], "]"}], "]"}], "/;", 
          RowBox[{"Not", "[", 
           RowBox[{"gaFlatSpaceQ", "[", "coordSysName", "]"}], "]"}]}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"basis", " ", "vector", " ", "differentiation"}], "*)"}], 
        " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"derivativeExpandHelp", "[", 
           RowBox[{"gaDirectionalDerivative", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "whatToD_Integer", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "al_Cl", ",", 
                "coordSysName_String"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "alongDirection_Integer", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "al_Cl", ",", 
                "coordSysName_String"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}]}], "]"}], 
           "]"}], "]"}], ":>", 
         RowBox[{
          RowBox[{"Sum", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"gaChristoffelSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "dummyInd", "}"}]}], "]"}], ",", 
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "whatToD", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", 
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "alongDirection", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "coordSysName"}], "]"}], 
              "[", 
              RowBox[{"mvPoint", "[", "vars", "]"}], "]"}], "*", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "dummyInd", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "al", ",", 
                "coordSysName"}], "]"}], "[", 
              RowBox[{"mvPoint", "[", "vars", "]"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"dummyInd", ",", 
              RowBox[{"Length", "[", "vars", "]"}]}], "}"}]}], "]"}], "/;", 
          RowBox[{"Not", "[", 
           RowBox[{"gaFlatSpaceQ", "[", "coordSysName", "]"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",ExpressionUUID->"fe8429c0-a156-43db-972f-\
f9c61434630d"],

Cell["\<\
If after application of all these rules derivativeExpandHelp[] function \
appears in the answer, it will mean that rule set is not complete and we have \
to add more rules. \
\>", "Text",ExpressionUUID->"1591ae89-a36e-4083-b39f-647161a153b9"],

Cell["\<\
Now merge above rules, which will be applied matching depth first until \
result will not change\
\>", "Text",ExpressionUUID->"cc032bda-1fa5-4bed-9172-4c1bf760c896"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deRules", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
    "deLinearityArgumentRules", ",", "deLinearityDirectionRules", ",", 
     "deArgumentProductRules", ",", "deScalarRules", ",", "deVectorRules"}], 
    "]"}]}], ";"}]], "Input",ExpressionUUID->"ee08f588-511c-4817-96bb-\
fcce066d60cd"],

Cell[TextData[{
 "After we defined how all types of derivatives should be expanded we make a \
shortcut for  ",
 StyleBox["gaDerivativeExpand[]",
  FontWeight->"Bold"],
 " "
}], "Text",ExpressionUUID->"29af3438-a432-436c-af17-ef224a6c4e7f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDE", "=", "gaDerivativeExpand"}], ";"}]], "Input",
 CellLabel->
  "In[1500]:=",ExpressionUUID->"fc83f51e-1ebf-457a-bf4a-90e0a3e9ba76"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Derivative with respect to multivector/vector and \
gaToDirectionalDerivative[ ]."
}], "Subsubsection",ExpressionUUID->"ef6dc708-c10c-407b-9d9f-daf6d73632da"],

Cell["\<\
Vector derivative (gaMultivectorDerivative[_,_?VectorQ], gaExternalDerivative \
[ ] and most general gaMultivectorDerivative with respect to any basis \
elements is based on gaDirectionalDerivative. The peculiarity is that here we \
have explicitly indicate which of arguments is differentiated in the case if \
the argument is geometric, outer or inner product. Therefore we have multiple \
definitions. First, make vector derivative a particular case of multivector \
derivative, i.e. vector derivative is the same as multivector derivative with \
respect to vector basis elements. New name allows to avoid  specification of \
vector (which is convenient).\
\>", "Text",ExpressionUUID->"54f94747-9047-4dee-9dff-92b44a95e2b7"],

Cell[TextData[{
 "Since gaMultivectorDerivative can act on different side of expression, say ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         OverscriptBox[
          StyleBox["a", "TI"], "."], 
         OverscriptBox["\[Del]", "."]}], TraditionalForm], "errors" -> {}, 
     "input" -> "\\dot{a}\\dot{\\nabla}", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "06cb7ae9-37f0-4fd5-a948-0637d3f04e7b"],
 ", we have to introduce gaDerivativeArgument[expr_,id_] help function, which \
pairs gaMultivectorDerivative noncommutative part with the differentiation \
operator.  Though arguments of gaDerivativeArgument[] can commute,  we made \
gaDerivativeArgument[] noncommutative in order to reduce a number of \
replacement rules. First, introduce syntax, which is more convenient to use \
in most cases. Note, that this input is immediately rewrites into standard \
one, where the operator (which contains non-commuting elements) and argument \
on which acts the differential operator is separated. This is necessary step \
if we want to include action of differential operator on the argument which \
stand on the left hand side. "
}], "Text",ExpressionUUID->"f05fe1b7-59a5-4f64-8477-760ed8769206"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Setting", " ", "argument", " ", "as", " ", "noncommutative", " ", 
    "reduces", " ", "number", " ", "of", " ", "cases", " ", "in", " ", "the", 
    " ", 
    RowBox[{"gaMultivectorDerivativeExpand", "[", "]"}], " ", "expansion"}], 
   "  ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaCommutativeAllQ", "[", 
       RowBox[{
        RowBox[{"gaDerivativeArgument", "[", "_", "]"}], "[", "__", "]"}], 
       "]"}], "]"}], ":=", "False"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaCommutativeAllQ", "[", 
       RowBox[{"FixProduct", "[", "__", "]"}], "]"}], "]"}], ":=", "False"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"don", "'"}], "t", " ", "set", " ", "gaMultivectorDerivative", 
      " ", "noncommutative"}], ",", " ", 
     RowBox[{
     "since", " ", "we", " ", "want", " ", "it", " ", "to", " ", "float", " ",
       "when", " ", "basis", " ", "elements", " ", "are", " ", "absent"}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutativeAllQ", "[", 
        RowBox[{
         RowBox[{"gaMultivectorDerivative", "[", "_", "]"}], "[", "__", "]"}],
         "]"}], "]"}], ":=", "False"}], ";"}], "*)"}]}]}]], "Input",
 CellLabel->
  "In[1501]:=",ExpressionUUID->"260433e6-143f-4d34-86ad-e2a25ca0d4a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorDerivative", "[", "expr_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theVector", "=", 
        RowBox[{"First", "/@", 
         RowBox[{
          RowBox[{
           RowBox[{
           "gaCoordinateChart", "[", "gaRunningCoordinateChart", "]"}], "[", 
           "gaRunningPatch", "]"}], "[", "\"\<BasisVectors\>\"", "]"}]}]}], 
       ",", 
       RowBox[{"theId", "=", 
        RowBox[{"ToString", "[", 
         RowBox[{"Unique", "[", "\"\<D\>\"", "]"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaMultivectorDerivative", "[", "theId", "]"}], "[", 
        "theVector", "]"}], ",", 
       RowBox[{
        RowBox[{"gaDerivativeArgument", "[", "theId", "]"}], "[", "expr", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1503]:=",ExpressionUUID->"62c6626d-86f7-4a90-ba49-77ec0eb99d55"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExteriorDerivative", "[", "expr_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theVector", "=", 
        RowBox[{"First", "/@", 
         RowBox[{
          RowBox[{
           RowBox[{
           "gaCoordinateChart", "[", "gaRunningCoordinateChart", "]"}], "[", 
           "gaRunningPatch", "]"}], "[", "\"\<BasisVectors\>\"", "]"}]}]}], 
       ",", 
       RowBox[{"theId", "=", 
        RowBox[{"ToString", "[", 
         RowBox[{"Unique", "[", "\"\<D\>\"", "]"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"OuterProduct", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaMultivectorDerivative", "[", "theId", "]"}], "[", 
        "theVector", "]"}], ",", 
       RowBox[{
        RowBox[{"gaDerivativeArgument", "[", "theId", "]"}], "[", "expr", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1504]:=",ExpressionUUID->"6d4b95ed-5712-40c8-b228-4b0db966fb7c"],

Cell["\<\
There are three syntax forms of gaMultivectorDerivative[ ]: 
1) gaMultivectorDerivative[expr, basisElem_List] is rewritten as a pair \
gaMultivectorDerivative[id][basisElem_List]\[GeometricProduct]\
gaDerivativeArgument[theId][expr]. 
2) someProduct[any, gaMultivectorDerivative[id][basisElem_List]] is expanded \
into Sum[FixProduct[someProduct[ any, basisElem[[i]] ] \
gaMultivectorDerivative[id][var_Symbol[[i]] ] ], {i, number of basis Elements \
present in _List}],\
\>", "Text",ExpressionUUID->"85057e8c-b403-4b3d-9b3e-54c01dbd00d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMultivectorDerivative", "[", 
    RowBox[{"expr_GeometricProduct", ",", "basismultivectorelements_List"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theId", "=", 
        RowBox[{"ToString", "[", 
         RowBox[{"Unique", "[", "\"\<D\>\"", "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaMultivectorDerivative", "[", "theId", "]"}], "[", 
         "basismultivectorelements", "]"}], ",", 
        RowBox[{
         RowBox[{"gaDerivativeArgument", "[", "theId", "]"}], "[", "expr", 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"AllTrue", "[", 
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{
       "basismultivectorelements", ",", "_mvDownUp", ",", "Infinity", ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "__", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1505]:=",ExpressionUUID->"bd42e3b6-a256-4253-81a5-495aeff29384"],

Cell["\<\
Further manipulate with the separated syntax. All this transformations are \
associated with gaMultivectorDerivativeExpand[ ] function, which should \
rewrite multivector derivative in terms of directional derivative. First, \
simple case, when only single pair operator-argument exists\
\>", "Text",ExpressionUUID->"69cb818f-9c9f-4593-816f-dafdb13bac9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToDirectionalDerivative", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"maxIter_", ":", "10"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"#", ",", "toDirectionalDerivativeRules", ",", "All"}], "]"}],
        "&"}], ",", "expr", ",", "maxIter"}], "]"}], "/;", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", "gaToDirectionalDerivative"}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[1506]:=",ExpressionUUID->"c4a36c67-916f-40ba-8d54-d365298f9520"],

Cell["\<\
Simple rules applies when nabla is not inside inner or outer product (which \
should take precedence). Then, when everything is inside geometric product, \
we simply split multivector derivative into directional derivative operator \
and argument function. Note that external derivative automatically occurs in \
OuterProduct.  \
\>", "Text",ExpressionUUID->"5421def1-31ca-4931-ad09-1df8b2c9b76b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rulesInsideGeometricProduct", "=", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], "[", 
       RowBox[{"args1___", ",", 
        RowBox[{
         RowBox[{"gaMultivectorDerivative", "[", "id_", "]"}], "[", "basis_", 
         "]"}], ",", "args3___", ",", 
        RowBox[{"partWithDerivativeArgument_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"#", ",", 
              RowBox[{
               RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", "_", 
               "]"}]}], "]"}], "]"}], "&"}], ")"}]}], ",", "args5___"}], 
       "]"}], ":>", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"h", "[", 
           RowBox[{"args1", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"basis", "[", 
               RowBox[{"[", "ipart", "]"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"ind_mvDownUp", ":>", 
                RowBox[{"Reverse", "[", "ind", "]"}]}], "}"}]}], ")"}], ",", 
            "args3", ",", 
            RowBox[{"(", 
             RowBox[{"partWithDerivativeArgument", "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaDerivativeArgument", "[", "id", "]"}], "[", 
                 "theDArg_", "]"}], ":>", 
                RowBox[{"gaDirectionalDerivative", "[", 
                 RowBox[{"theDArg", ",", 
                  RowBox[{"basis", "[", 
                   RowBox[{"[", "ipart", "]"}], "]"}]}], "]"}]}], "}"}]}], 
             ")"}], ",", "args5"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"ipart", ",", "1", ",", 
            RowBox[{"Length", "[", "basis", "]"}]}], "}"}]}], "]"}], ")"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"args1", ",", "args3", ",", "args5"}], "}"}], ",", "id", 
         ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], "[", 
       RowBox[{"args1___", ",", 
        RowBox[{"partWithDerivativeArgument_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"#", ",", 
              RowBox[{
               RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", "_", 
               "]"}]}], "]"}], "]"}], "&"}], ")"}]}], ",", "args3___", ",", 
        RowBox[{
         RowBox[{"gaMultivectorDerivative", "[", "id_", "]"}], "[", "basis_", 
         "]"}], ",", "args5___"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"h", "[", 
           RowBox[{"args1", ",", 
            RowBox[{"(", 
             RowBox[{"partWithDerivativeArgument", "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaDerivativeArgument", "[", "id", "]"}], "[", 
                 "theDArg_", "]"}], ":>", 
                RowBox[{"gaDirectionalDerivative", "[", 
                 RowBox[{"theDArg", ",", 
                  RowBox[{"basis", "[", 
                   RowBox[{"[", "ipart", "]"}], "]"}]}], "]"}]}], "}"}]}], 
             ")"}], ",", "args3", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"basis", "[", 
               RowBox[{"[", "ipart", "]"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"ind_mvDownUp", ":>", 
                RowBox[{"Reverse", "[", "ind", "]"}]}], "}"}]}], ")"}], ",", 
            "args5"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"ipart", ",", "1", ",", 
            RowBox[{"Length", "[", "basis", "]"}]}], "}"}]}], "]"}], ")"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"args1", ",", "args3", ",", "args5"}], "}"}], ",", "id", 
         ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Getrid", " ", "of", " ", "help", " ", "product"}], ",", " ", 
       RowBox[{"which", " ", "should", " ", 
        RowBox[{"disolve", ".", " ", "Needs"}], " ", "full", " ", "expansion",
         " ", "for", " ", "other", " ", "rules", " ", "to", " ", "match"}]}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"arg1___", ",", 
         RowBox[{"FixProduct", "[", "arg2__", "]"}], ",", "arg3___"}], "]"}], 
       "]"}], ":>", 
      RowBox[{"Expand", "[", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{"arg1", ",", "arg2", ",", "arg3"}], "]"}], "]"}], "]"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"replace", " ", "mvDHelp", " ", "to", " ", "true", " ", "mvD"}],
       " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], "[", 
       RowBox[{"args1___", ",", 
        RowBox[{
         RowBox[{"mvdHelp", "[", "id_", "]"}], "[", 
         "varThatMatchBasisElem_Symbol", "]"}], ",", "args3___", ",", 
        RowBox[{
         RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", "exprDiff_", 
         "]"}], ",", "args5___"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"h", "[", 
         RowBox[{"args1", ",", "args3", ",", 
          RowBox[{"mvD", "[", 
           RowBox[{"exprDiff", ",", "varThatMatchBasisElem"}], "]"}], ",", 
          "args5"}], "]"}], ")"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"args1", ",", "args3", ",", "args5"}], "}"}], ",", "id", 
         ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"Times", "[", 
        RowBox[{"any1___", ",", 
         RowBox[{
          RowBox[{"mvDHelp", "[", "id_", "]"}], "[", 
          "varThatMatchBasisElem_Symbol", "]"}], ",", "any2___", ",", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"arg1___", ",", 
           RowBox[{
            RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", 
            "exprDiff_", "]"}], ",", "arg2___"}], "]"}], ",", "any3___"}], 
        "]"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"Times", "[", 
        RowBox[{"any1", ",", "any2", ",", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"arg1", ",", 
           RowBox[{"mvD", "[", 
            RowBox[{"exprDiff", ",", "varThatMatchBasisElem"}], "]"}], ",", 
           "arg2"}], "]"}], ",", "any3"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "any1", ",", "any2", ",", "arg1", ",", "arg2", ",", "any3"}], "}"}],
          ",", "id", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"Times", "[", 
        RowBox[{"any1___", ",", 
         RowBox[{
          RowBox[{"mvDHelp", "[", "id_", "]"}], "[", 
          "varThatMatchBasisElem_Symbol", "]"}], ",", "any2___", ",", 
         RowBox[{
          RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", "exprDiff_",
           "]"}], ",", "any3___"}], "]"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"Times", "[", 
        RowBox[{"any1", ",", "any2", ",", 
         RowBox[{"mvD", "[", 
          RowBox[{"exprDiff", ",", "varThatMatchBasisElem"}], "]"}], ",", 
         "any3"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any1", ",", "any2", ",", "any3"}], "}"}], ",", "id", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[1507]:=",ExpressionUUID->"72907df6-7acb-4ed9-b5fe-03c4b6b634aa"],

Cell["\<\

Pakeisti bendresnem \
\>", "Text",ExpressionUUID->"91e63f7e-b423-488a-9843-e699b5b779c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], "[", 
    RowBox[{"args1___", ",", 
     RowBox[{
      RowBox[{"gaMultivectorDerivative", "[", "id_", "]"}], "[", "basis_", 
      "]"}], ",", "args3___", ",", 
     RowBox[{
      RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", "exprDiff_", 
      "]"}], ",", "args5___"}], "]"}], ":>", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"h", "[", 
        RowBox[{"args1", ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"basis", "[", 
            RowBox[{"[", "ipart", "]"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"ind_mvDownUp", ":>", 
             RowBox[{"Reverse", "[", "ind", "]"}]}], "}"}]}], ")"}], ",", 
         "args3", ",", 
         RowBox[{"gaDirectionalDerivative", "[", 
          RowBox[{"exprDiff", ",", 
           RowBox[{"basis", "[", 
            RowBox[{"[", "ipart", "]"}], "]"}]}], "]"}], ",", "args5"}], 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"ipart", ",", "1", ",", 
         RowBox[{"Length", "[", "basis", "]"}]}], "}"}]}], "]"}], ")"}], "/;", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"args1", ",", "args3", ",", "args5"}], "}"}], ",", "id", ",", 
      RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], "[", 
    RowBox[{"args1___", ",", 
     RowBox[{
      RowBox[{"gaDerivativeArgument", "[", "id_", "]"}], "[", "exprDiff_", 
      "]"}], ",", "args3___", ",", 
     RowBox[{
      RowBox[{"gaMultivectorDerivative", "[", "id_", "]"}], "[", "basis_", 
      "]"}], ",", "args5___"}], "]"}], ":>", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"h", "[", 
        RowBox[{"args1", ",", 
         RowBox[{"gaDirectionalDerivative", "[", 
          RowBox[{"exprDiff", ",", 
           RowBox[{"basis", "[", 
            RowBox[{"[", "ipart", "]"}], "]"}]}], "]"}], ",", "args3", ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"basis", "[", 
            RowBox[{"[", "ipart", "]"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"ind_mvDownUp", ":>", 
             RowBox[{"Reverse", "[", "ind", "]"}]}], "}"}]}], ")"}], ",", 
         "args5"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"ipart", ",", "1", ",", 
         RowBox[{"Length", "[", "basis", "]"}]}], "}"}]}], "]"}], ")"}], "/;", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"args1", ",", "args3", ",", "args5"}], "}"}], ",", "id", ",", 
      RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ","}]], "Input",
 Evaluatable->False,ExpressionUUID->"f2f480f2-ca70-48d4-9294-6e8fb4d08113"],

Cell[TextData[{
 "When vector nabla is inside Inner product (or outer product) with some \
vector (the rule assumes that the ",
 StyleBox["number of variables is equal to number of basis vectors",
  FontColor->RGBColor[1, 0.5, 0]],
 " (and basis vectors depend on all vars, i.e., not tested how it will work \
on hyper surface)). "
}], "Text",ExpressionUUID->"9a12deff-0b83-4374-b6a8-3ed5da874452"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rulesInsideInnerAndOuterProduct", "=", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{"any1___", ",", 
         RowBox[{
          RowBox[{"gaMultivectorDerivative", "[", "id_String", "]"}], "[", 
          "basis_List", "]"}], ",", "any3___"}], "]"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"FixProduct", "[", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"Times", "[", 
           RowBox[{
            RowBox[{"InnerProduct", "[", 
             RowBox[{"any1", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"basis", "[", 
                 RowBox[{"[", "ipart", "]"}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"ind_mvDownUp", ":>", 
                  RowBox[{"Reverse", "[", "ind", "]"}]}], "}"}]}], ")"}], ",",
               "any3"}], "]"}], ",", 
            RowBox[{
             RowBox[{"mvDHelp", "[", "id", "]"}], "[", 
             RowBox[{"gaRunningCoordinateChartVars", "[", 
              RowBox[{"[", "ipart", "]"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"ipart", ",", "1", ",", 
            RowBox[{"Length", "[", "basis", "]"}]}], "}"}]}], "]"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"basis", ",", "_mvDownUp", ",", "Infinity", ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{"#", ",", 
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "__", "}"}], ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", "basis", "]"}], "===", 
          RowBox[{"Length", "[", "gaRunningCoordinateChartVars", "]"}]}]}], 
        ")"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"any1___", ",", 
         RowBox[{
          RowBox[{"gaMultivectorDerivative", "[", "id_String", "]"}], "[", 
          "basis_List", "]"}], ",", "any3___"}], "]"}], "]"}], ":>", 
      RowBox[{
       RowBox[{"FixProduct", "[", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"Times", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", 
             RowBox[{"any1", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"basis", "[", 
                 RowBox[{"[", "ipart", "]"}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"ind_mvDownUp", ":>", 
                  RowBox[{"Reverse", "[", "ind", "]"}]}], "}"}]}], ")"}], ",",
               "any3"}], "]"}], ",", 
            RowBox[{
             RowBox[{"mvDHelp", "[", "id", "]"}], "[", 
             RowBox[{"gaRunningCoordinateChartVars", "[", 
              RowBox[{"[", "ipart", "]"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"ipart", ",", "1", ",", 
            RowBox[{"Length", "[", "basis", "]"}]}], "}"}]}], "]"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"basis", ",", "_mvDownUp", ",", "Infinity", ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{"#", ",", 
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "__", "}"}], ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", "basis", "]"}], "===", 
          RowBox[{"Length", "[", "gaRunningCoordinateChartVars", "]"}]}]}], 
        ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"FixProduct", "[", "anyCommutative_", "]"}], ":>", 
      RowBox[{"anyCommutative", "/;", 
       RowBox[{"gaCommutativeAllQ", "[", 
        RowBox[{"Expand", "[", 
         RowBox[{"gaPE", "[", "anyCommutative", "]"}], "]"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[1508]:=",ExpressionUUID->"03241815-2347-4768-9e76-7115b0ae6a19"],

Cell[BoxData[
 RowBox[{
  RowBox[{"toDirectionalDerivativeRules", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
    "rulesInsideGeometricProduct", ",", "rulesInsideInnerAndOuterProduct"}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1509]:=",ExpressionUUID->"add97cf4-b782-46db-bb40-d23c75023d8f"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Connection and Lie bracket properties, summation procedure (",
 StyleBox["to implement",
  FontColor->RGBColor[1, 0, 0],
  Background->RGBColor[1, 0.9, 0.8]],
 ")"
}], "Subsection",ExpressionUUID->"ee6a9dbb-17f3-487c-bc49-3a8892ee6d00"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Connection coefficient (Christoffel ) symbol, ",
 StyleBox["to edit",
  FontColor->RGBColor[1, 0, 0]]
}], "Subsubsection",ExpressionUUID->"29c19afd-19b8-40af-8c45-d430a91caf44"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "ChristoffelSymbolsOfSecondKind", " ", "were", " ", 
     "computed"}], ",", " ", 
    RowBox[{
    "then", " ", "enable", " ", "user", " ", "to", " ", "extract", " ", 
     "single", " ", "coefficient", " ", "from", " ", "the", " ", "computed", 
     " ", "structure"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"gaChristoffelSymbol", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "lambda_Integer", "}"}]}], "]"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "alpha_Integer", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "nu_Integer", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ",", "chartName_String"}], "]"}], "[", 
      
      RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
         "gaRunningPatch", "]"}], "[", 
        "\"\<ChristoffelSymbolsOfSecondKind\>\"", "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"lambda", ",", "alpha", ",", "nu"}], "]"}], "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SameQ", "[", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
             "gaRunningPatch", "]"}], "[", 
            "\"\<ChristoffelSymbolsOfSecondKind\>\"", "]"}], "]"}], ",", " ", 
          "SymmetrizedArray"}], "]"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
           "\"\<StandardCoordinateNames\>\"", "]"}], "===", "vars"}], ")"}]}],
        ")"}]}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Christoffel", " ", "symbol", " ", "of", " ", "the", " ", "first", " ", 
     "kind", " ", "can", " ", "be", " ", "computed", " ", "from", " ", 
     "second", " ", "type", " ", "simply", " ", "summing", " ", "with", " ", 
     "metric", " ", "g_ij", " ", 
     RowBox[{"G", "^", "j_mn"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"gaChristoffelSymbol", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "lambda_Integer", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "alpha_Integer", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "nu_Integer", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ",", "chartName_String"}], "]"}], "[", 
      
      RowBox[{"mvPoint", "[", "vars_List", "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
            "gaRunningPatch", "]"}], "[", "\"\<Metric\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"lambda", ",", "sumind"}], "]"}], "]"}], "*", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
            "gaRunningPatch", "]"}], "[", 
           "\"\<ChristoffelSymbolsOfSecondKind\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"sumind", ",", "alpha", ",", "nu"}], "]"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"sumind", ",", 
          RowBox[{"Length", "[", "vars", "]"}]}], "}"}]}], "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SameQ", "[", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
             "gaRunningPatch", "]"}], "[", 
            "\"\<ChristoffelSymbolsOfSecondKind\>\"", "]"}], "]"}], ",", " ", 
          "SymmetrizedArray"}], "]"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "chartName", "]"}], "[", 
           "\"\<StandardCoordinateNames\>\"", "]"}], "===", "vars"}], ")"}]}],
        ")"}]}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[1510]:=",ExpressionUUID->"010ccd17-dd50-41e0-b5dd-4538a9d96572"],

Cell["\<\
In \[OpenCurlyDoubleQuote]Orthonormal\[CloseCurlyDoubleQuote] system \
(Cartesian with various signatures) all connection coefficients are zeroes.\
\>", "Text",ExpressionUUID->"af027539-abf8-4af0-84f9-b77d0ab183e0"],

Cell["\<\
To do: below just idea (see Schindler article) and reminder which functions \
have to be implemented\
\>", "Text",ExpressionUUID->"e31ec3f4-3907-4787-8f3f-94459668745d"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaMetricCompatibleSystemQ", "[", "coordSysName_String", "]"}], ":=", 
    RowBox[{"AllTrue", "[", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaConnectionCoefficient", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "dii", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "dij", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "dik", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "coordSysName"}], "]"}], "[", 
          "_mvPoint", "]"}], "+", 
         RowBox[{
          RowBox[{"gaConnectionCoefficient", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "dii_Integer", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "dik_Integer", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "dij_Integer", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "coordSysName"}], "]"}], "[", 
          "_mvPoint", "]"}], "-", 
         RowBox[{"gaDirectionalDerivative", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "coordSysName", "]"}], "[", 
             "\"\<Metric\>\"", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"dij", ",", "dik"}], "]"}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "dii_Integer", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", "..."}], "]"}]}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", "dii", "}"}], ",", 
        RowBox[{"{", "dij", "}"}], ",", 
        RowBox[{"{", "dik", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
      "PossibleZeroQ"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"11187544-5ceb-47e3-b365-302c7abb02e3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Lie bracket coefficient symbol (",
 StyleBox["to implement",
  FontColor->RGBColor[1, 0, 0],
  Background->RGBColor[1, 0.9, 0.8]],
 ")"
}], "Subsubsection",ExpressionUUID->"26897cce-2bd3-4d80-ae77-8acecc9938ce"],

Cell["\<\
In \[OpenCurlyDoubleQuote]Orthonormal\[CloseCurlyDoubleQuote] system \
(Cartesian with various signatures) all connection coefficients are zeroes.\
\>", "Text",ExpressionUUID->"b07f4fa0-d213-498b-8343-a6e045b32d83"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLieBracketCoefficient", "[", 
    RowBox[{"__mvDownUp", ",", "\"\<Orthonormal\>\""}], "]"}], "[", 
   "_mvPoint", "]"}], ":=", "0"}]], "Input",
 Evaluatable->False,ExpressionUUID->"d8aae2ff-4508-488e-a280-4112d80465fd"],

Cell["\<\
To do: below just idea (see Schindler article) and reminder which functions \
have to be implemented\
\>", "Text",ExpressionUUID->"68a7547a-a163-49ac-8b3c-b29ae13e7b65"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaTorsionFeeSystemQ", "[", "coordSysName_String", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"gaConnectionCoefficient", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "dii", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "dij", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "dik", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "coordSysName"}], "]"}], "[", 
    "_mvPoint", "]"}], "+", 
   RowBox[{
    RowBox[{"gaConnectionCoefficient", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "dii_Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "dik_Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "dij_Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "coordSysName"}], "]"}], "[", 
    "_mvPoint", "]"}], "-", 
   RowBox[{"gaLieBracketCoefficient", "[", 
    RowBox[{"di", ",", "dj", ",", "dk"}], "]"}]}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"309a664c-d531-420f-9d8f-543ba065abcd"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Coordinate system visualization"
}], "Subsection",ExpressionUUID->"5d824e79-c55f-49c6-bead-f0984948a956"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"8dfb7478-a5e0-48ee-aa01-52401357d60c"],

Cell["\<\
Function, which attempt (when possible) to determine coordinate range values.\
\
\>", "Text",ExpressionUUID->"b02da92a-d174-49c2-bec1-e6b2c7ce473f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"determineVarRange", "[", 
    RowBox[{"\"\<All\>\"", ",", "coordChartName_String", ",", "var_Symbol"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theRangeValue", "=", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
            "gaRunningPatch", "]"}], "[", 
           "\"\<CoordinateRangeAssumptions\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"#", ",", "var"}], "]"}], "]"}], "&"}]}], "]"}]}], ",", 
       "theRangeList", ",", "theRange"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"theRangeList", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"LogicalExpand", "[", "theRangeValue", "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"And", "->", "List"}], "}"}]}], "}"}], ",", "1"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"Length", "[", "theRangeList", "]"}], ",", 
        "\[IndentingNewLine]", "2", ",", 
        RowBox[{"theRange", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{"theRangeList", "/.", 
           RowBox[{
            RowBox[{"_", "[", 
             RowBox[{"___", ",", 
              RowBox[{"rng_", "?", "NumericQ"}], ",", "___"}], "]"}], ":>", 
            "rng"}]}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaPlotCoordinateSystem", " ", "::", "coordinateRange"}], 
           ",", "var"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"var", ",", "theRange"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1512]:=",ExpressionUUID->"665c120f-0db6-4324-b7fa-630108fc35e7"],

Cell["\<\
Function, which plots tangent vectors at given point mvPoint[ ]\
\>", "Text",ExpressionUUID->"08fae564-b69e-47eb-b02a-d7da93b9d70d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tangentVectors", "[", 
    RowBox[{"coordChartName_String", ",", 
     RowBox[{"mvPoint", "[", 
      RowBox[{"{", 
       RowBox[{"coord__", "?", "NumericQ"}], "}"}], "]"}], ",", 
     "parametersRules_List", ",", "optsTangentopts_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"thePoint", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
          "gaRunningPatch", "]"}], "[", "\"\<PointVector\>\"", "]"}]}], ",", 
       RowBox[{"basisVectors", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
          "gaRunningPatch", "]"}], "[", "\"\<BasisVectors\>\"", "]"}]}], ",", 
       
       RowBox[{"basisVectorsCartes", "=", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{"gaRunningAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
       RowBox[{"theVarNames", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
          "\"\<StandardCoordinateNames\>\"", "]"}], ")"}]}], ",", 
       "thePointComponents", ",", "varToNumbersRules"}], "}"}], ",", 
     RowBox[{
      RowBox[{"varToNumbersRules", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{"theVarNames", ",", 
            RowBox[{"N", "[", 
             RowBox[{"{", "coord", "}"}], "]"}]}], "]"}], "]"}], ",", 
         "parametersRules"}], "]"}]}], ";", 
      RowBox[{"thePointComponents", "=", 
       RowBox[{"gaComponentCoefficientList", "[", 
        RowBox[{
         RowBox[{"thePoint", "/.", "varToNumbersRules"}], ",", 
         "basisVectorsCartes"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Graphics3D", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"optsTangentopts", ",", 
          RowBox[{"Thread", "[", 
           RowBox[{"Tooltip", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Arrow", "[", 
                RowBox[{"{", 
                 RowBox[{"thePointComponents", ",", 
                  RowBox[{"gaComponentCoefficientList", "[", 
                   RowBox[{"#", ",", "basisVectorsCartes"}], "]"}]}], "}"}], 
                "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"List", "@@", 
                 RowBox[{"(", 
                  RowBox[{"Plus", "@@", 
                   RowBox[{"{", 
                    RowBox[{"thePoint", ",", 
                    RowBox[{"(", 
                    RowBox[{"Last", "/@", "basisVectors"}], ")"}]}], "}"}]}], 
                  ")"}]}], "/.", "varToNumbersRules"}], ")"}]}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"First", "/@", "basisVectors"}], ")"}], "/.", 
              "varToNumbersRules"}]}], "]"}], "]"}]}], "\[IndentingNewLine]", 
         "}"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"20213100-fc7d-40d4-9cbd-882a15987720"],

Cell["Function, which plots normal to surface at given point.", "Text",ExpressionUUID->"47413901-ee93-4894-9893-f4b04fdd5aac"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"normalVector", "[", 
    RowBox[{"coordChartName_String", ",", 
     RowBox[{"mvPoint", "[", 
      RowBox[{"{", 
       RowBox[{"coord__", "?", "NumericQ"}], "}"}], "]"}], ",", 
     "parametersRules_List", ",", "optsNormalopts_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"thePoint", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
          "gaRunningPatch", "]"}], "[", "\"\<PointVector\>\"", "]"}]}], ",", 
       RowBox[{"normalVector", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
           "gaRunningPatch", "]"}], "[", "\"\<NormalToSurface\>\"", "]"}], 
         "}"}]}], ",", 
       RowBox[{"basisVectorsCartes", "=", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{"gaRunningAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
       RowBox[{"theVarNames", "=", 
        RowBox[{
         RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
         "\"\<StandardCoordinateNames\>\"", "]"}]}], ",", 
       "thePointComponents", ",", "varToNumbersRules"}], "}"}], ",", 
     RowBox[{
      RowBox[{"varToNumbersRules", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{"theVarNames", ",", 
            RowBox[{"N", "[", 
             RowBox[{"{", "coord", "}"}], "]"}]}], "]"}], "]"}], ",", 
         "parametersRules"}], "]"}]}], ";", 
      RowBox[{"thePointComponents", "=", 
       RowBox[{"gaComponentCoefficientList", "[", 
        RowBox[{
         RowBox[{"thePoint", "/.", "varToNumbersRules"}], ",", 
         "basisVectorsCartes"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Graphics3D", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"optsNormalopts", ",", 
          RowBox[{"Thread", "[", 
           RowBox[{"Tooltip", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Arrow", "[", 
                RowBox[{"{", 
                 RowBox[{"thePointComponents", ",", 
                  RowBox[{"gaComponentCoefficientList", "[", 
                   RowBox[{"#", ",", "basisVectorsCartes"}], "]"}]}], "}"}], 
                "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"List", "@@", 
                 RowBox[{"(", 
                  RowBox[{"Plus", "@@", 
                   RowBox[{"{", 
                    RowBox[{"thePoint", ",", "normalVector"}], "}"}]}], 
                  ")"}]}], "/.", "varToNumbersRules"}], ")"}]}], ",", 
             RowBox[{"{", "\"\<N\>\"", "}"}]}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "}"}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1514]:=",ExpressionUUID->"ecb24898-4aea-4801-a811-47f0c69b3555"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaPlotCoordinateSystem[ ]"
}], "Subsubsection",ExpressionUUID->"f16d61bd-58a2-4633-a5c9-8c7c6f07ffa1"],

Cell["\<\
gaPlotCoordinateSystem[ ] attempts to plot surface in 3D. Can show tangent \
vectors and normal vectors. Needs to extend to nD space to plot selected 3 \
components. Also to include visualization of 2D coordinate system\
\>", "Text",ExpressionUUID->"215f4d03-912b-4fa1-8f8d-aeeb48fdff85"],

Cell["Messages and options test functions.", "Text",ExpressionUUID->"a9b80360-4cca-4314-86a9-5b79e7e91502"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPlotCoordinateSystem", " ", "::", "coordinateRange"}], "=", 
   "\"\<Unable to generate coordinate ranges for coordinate `1` with keyword \
\\\"All\\\".\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPlotCoordinateSystem", " ", "::", "coordinateRangeSyntax"}], 
   "=", "\"\<Coordinate range for coordinate `1` is not of the form {x, xMin, \
xMax}.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPlotCoordinateSystem", " ", "::", "parameters"}], "=", 
   "\"\<Not all of parameters `1` of coordinate system `2` have numerical \
values for visualisation. Set them using \
\\\"ParameterValueList\\\"->{theParameter->theValue} option.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPlotCoordinateSystem", " ", "::", "failed"}], "=", 
   "\"\<Basis vectors `1` returned $Failed. Will not attempt to plot.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPlotCoordinateSystem", " ", "::", "nonnumerical"}], "=", 
   "\"\<Input `1` contains other symbols beside coordinates. Not suitable for \
ParametricPlot3D.\>\""}], ";"}]}], "Input",ExpressionUUID->"e713641a-4399-\
4d2d-a301-beb3267c9aef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"syntax", " ", "declaration"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPlotCoordinateSystem", "[", "\"\<ParameterValueList\>\"", 
      "]"}], "=", 
     "\"\<A list of rules, which should provides numerical values for \
symbolic parameters gaCoordinateChart[coordChartName][\\\"Parameters\\\"] \
\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPlotCoordinateSystem", "[", "\"\<Quiet\>\"", "]"}], 
     "=", "\"\<True|False\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPlotCoordinateSystem", "[", "\"\<TangentVector\>\"", "]"}], 
     "=", "\"\<List of {mvPoint[{x_,y_}]...} at which tangent vectors are \
generated\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPlotCoordinateSystem", "[", "\"\<TangentVectorStyle\>\"", 
      "]"}], "=", "\"\<PlotStyle values applied to tangent vectors\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPlotCoordinateSystem", "[", "\"\<NormalVector\>\"", "]"}], 
     "=", "\"\<List of {mvPoint[{x_,y_}]...} at which normal to the surface \
vectors are generated\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "testOptionPlotCoordinateSystem", "[", "\"\<NormalVectorStyle\>\"", 
      "]"}], "=", "\"\<Graphics3D options applied to normal vectors\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"actual", " ", "test"}], " ", "*)"}], 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPlotCoordinateSystem", "[", 
      RowBox[{"\"\<ParameterValueList\>\"", ",", 
       RowBox[{"{", "val___Rule", "}"}]}], "]"}], ":=", 
     RowBox[{"MatchQ", "[", 
      RowBox[{
       RowBox[{"{", "val", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                 "gaCoordinateChart", "[", "gaRunningCoordinateChart", "]"}], 
                 "[", "\"\<Parameters\>\"", "]"}], ",", "#"}], "]"}], "&"}], 
             ")"}]}], "->", 
           RowBox[{"_", "?", "NumericQ"}]}], ")"}], "..."}], "}"}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPlotCoordinateSystem", "[", 
      RowBox[{"\"\<Quiet\>\"", ",", "val_"}], "]"}], ":=", 
     RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPlotCoordinateSystem", "[", 
      RowBox[{
       RowBox[{"\"\<TangentVector\>\"", "|", "\"\<NormalVector\>\""}], ",", 
       RowBox[{"pt_", ":", 
        RowBox[{"(", 
         RowBox[{"mvPoint", "|", 
          RowBox[{"{", "__mvPoint", "}"}], "|", 
          RowBox[{"{", "}"}]}], ")"}]}]}], "]"}], ":=", 
     RowBox[{"Or", "[", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", "pt", "}"}], "]"}], ",", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", 
            RowBox[{"mvPoint", "[", 
             RowBox[{"{", 
              RowBox[{"__", "?", "NumericQ"}], "}"}], "]"}]}], "]"}], "&"}]}],
         "]"}], ",", 
       RowBox[{"pt", "===", 
        RowBox[{"{", "}"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "There", " ", "seems", " ", "to", " ", "be", " ", "problem", " ", "how", 
      " ", "to", " ", "elegantly", " ", "validate", " ", "PlotStyle", " ", 
      "options", " ", 
      RowBox[{"(", 
       RowBox[{"not", " ", "cheking"}], ")"}]}], ",", " ", 
     RowBox[{
      RowBox[{"see", "\[IndentingNewLine]", 
       RowBox[{"https", ":"}]}], "//", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
          "questions"}], "/", "95190"}], "/", "how"}], "-", "to", "-", 
       "check", "-", "the", "-", "validity", "-", "of", "-", "the", "-", 
       "value", "-", "of", "-", "plotstyle", "-", "option", "-", "for", "-", 
       RowBox[{"2", "d"}], "-", "graph"}]}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testOptionPlotCoordinateSystem", "[", 
      RowBox[{
       RowBox[{
       "\"\<TangentVectorStyle\>\"", "|", "\"\<NormalVectorStyle\>\""}], ",", 
       "val_"}], "]"}], ":=", "True"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"First", "/@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "val", "}"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"First", "/@", 
           RowBox[{"{", 
            RowBox[{"??", 
             RowBox[{"??", "??"}]}], "}"}]}], ",", "#"}], "]"}], "&"}]}], 
      "]"}], ";"}], "*)"}], " ", "\[IndentingNewLine]"}]}]], "Input",Expressio\
nUUID->"13425cc7-ef83-400d-8108-c9d5d5f35bd1"],

Cell["The main function", "Text",ExpressionUUID->"879cb1a0-9548-4b02-b8ed-f87dbb849981"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<ParameterValueList\>\"", "->", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"Quiet", "->", "False"}], ",", 
      RowBox[{"\"\<TangentVector\>\"", "->", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"\"\<TangentVectorStyle\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"Black", ",", " ", "Thick"}], "}"}], "}"}]}], ",", 
      RowBox[{"\"\<NormalVector\>\"", "->", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"\"\<NormalVectorStyle\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"Red", ",", " ", "Thick"}], "}"}], "}"}]}]}], "}"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaPlotCoordinateSystem", "[", 
   RowBox[{"coordChartName_String", ",", 
    RowBox[{"{", 
     RowBox[{"var1_", ",", "range1__"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"var2_", ",", "range2__"}], "}"}], ",", 
    RowBox[{"fixedvars", ":", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_Symbol", ",", 
         RowBox[{"_", "?", "NumericQ"}]}], "}"}], "..."}], ")"}]}], ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaPlotCoordinateSystem", ",", "ParametricPlot3D"}], "}"}], 
      "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theOption", ",", 
       RowBox[{"fixedvarsRules", "=", 
        RowBox[{"(", 
         RowBox[{"Rule", "@@@", 
          RowBox[{"{", "fixedvars", "}"}]}], ")"}]}], ",", 
       RowBox[{"op", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], "]"}]}], 
       ",", 
       RowBox[{"optDetected", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "ParametricPlot3D", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"thePointVector", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
          "gaRunningPatch", "]"}], "[", "\"\<PointVector\>\"", "]"}]}], ",", 
       "\[IndentingNewLine]", "theRange1", ",", "theRange2", ",", "csSurface",
        ",", "tanVectGraphicsList", ",", "tangentVectorPointList", ",", 
       "tangentVectorStyleList", ",", "normalVectorPointList", ",", 
       "normalVectorStyleList", ",", "normalVectorGraphicsList", ",", 
       "parametricPlot3DInput"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"set", " ", "options"}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"gaSetNamedOptionValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaPlotCoordinateSystem", ",", "#", ",", "theOption"}], 
           "}"}], ",", 
          RowBox[{
           RowBox[{
           "gaOptionCheck", "[", "testOptionPlotCoordinateSystem", "]"}], "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"OptionValue", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"s_Symbol", ",", "y___Rule"}], "}"}], ":>", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ToString", "[", "s", "]"}], ",", "y"}], "}"}]}], 
              "}"}]}], ")"}], "]"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "[", 
         RowBox[{"First", "/@", "op"}], "]"}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<ParameterValueList\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<ParameterValueList\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"\"\<ParameterValueList\>\"", "/.", 
           RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"MatchQ", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
              "\"\<Parameters\>\"", "]"}], "/.", 
             RowBox[{"theOption", "[", "\"\<ParameterValueList\>\"", "]"}]}], 
            ")"}], ",", 
           RowBox[{"{", 
            RowBox[{"___", "?", "NumericQ"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaPlotCoordinateSystem", " ", "::", "parameters"}], ",", 
          RowBox[{
           RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
           "\"\<Parameters\>\"", "]"}], ",", "coordChartName"}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<TangentVector\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<TangentVector\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"\"\<TangentVector\>\"", "/.", 
           RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<TangentVectorStyle\>\"", "]"}], 
          "]"}], "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<TangentVectorStyle\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"\"\<TangentVectorStyle\>\"", "/.", 
           RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<NormalVector\>\"", "]"}], "]"}], "===",
          "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<NormalVector\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"\"\<NormalVector\>\"", "/.", 
           RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<NormalVectorStyle\>\"", "]"}], "]"}],
          "===", "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<NormalVectorStyle\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"\"\<NormalVectorStyle\>\"", "/.", 
           RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "plot", " ", "ranges"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "]"}], "===", 
         "theOption"}], ",", 
        RowBox[{
         RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"Options", "[", "gaPlotCoordinateSystem", "]"}]}], 
          ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"compute", " ", "plot", " ", "range"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"theRange1", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"{", "range1", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<All\>\"", "|", "All"}], "}"}], ",", 
         RowBox[{"determineVarRange", "[", 
          RowBox[{"\"\<All\>\"", ",", "coordChartName", ",", "var1"}], "]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"_", "?", "NumericQ"}], ",", 
           RowBox[{"_", "?", "NumericQ"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"var1", ",", "range1"}], "}"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"{", "___", "}"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaPlotCoordinateSystem", " ", "::", "coordinateRangeSyntax"}], 
            ",", "var1"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"theRange2", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"{", "range2", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<All\>\"", "|", "All"}], "}"}], ",", 
         RowBox[{"determineVarRange", "[", 
          RowBox[{"\"\<All\>\"", ",", "coordChartName", ",", "var2"}], "]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"_", "?", "NumericQ"}], ",", 
           RowBox[{"_", "?", "NumericQ"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"var2", ",", "range2"}], "}"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"{", "___", "}"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaPlotCoordinateSystem", " ", "::", "coordinateRangeSyntax"}], 
            ",", "var2"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "there", " ", "are", " ", "no", " ", 
        "redundant", " ", "symbols"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"parametricPlot3DInput", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{
            "gaComponentCoefficientList", "[", "thePointVector", "]"}], ",", 
            "0"}], "]"}], "/.", 
          RowBox[{"theOption", "[", "\"\<ParameterValueList\>\"", "]"}]}], 
         ")"}], "/.", "fixedvarsRules"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<Fixed coordinates values\>\"", ",", "fixedvarsRules"}],
           "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Options for ParametricPlot3D\>\"", ",", "optDetected"}], "}"}],
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Surface parametrization \>\"", ",", "parametricPlot3DInput"}], 
          "}"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"parametricPlot3DInput", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"theRange1", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "->", 
               RowBox[{"RandomReal", "[", 
                RowBox[{"Rest", "[", "theRange1", "]"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"theRange2", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "->", 
               RowBox[{"RandomReal", "[", 
                RowBox[{"Rest", "[", "theRange2", "]"}], "]"}]}]}], "}"}]}], 
           ",", "NumericQ"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaPlotCoordinateSystem", " ", "::", "nonnumerical"}], ",",
            "parametricPlot3DInput"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"csSurface", "=", 
       RowBox[{"ParametricPlot3D", "@@", 
        RowBox[{"{", 
         RowBox[{"parametricPlot3DInput", ",", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"{", 
            RowBox[{"theRange1", ",", "theRange2"}], "}"}]}], ",", 
          RowBox[{"Sequence", "@@", "optDetected"}]}], "}"}]}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "objects", " ", "to", " ", "plot"}], "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Plot", " ", "TangentVector"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<TangentVector\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<TangentVector\>\"", "|", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"tanVectGraphicsList", "=", "Nothing"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"_mvPoint", "|", 
         RowBox[{"{", "__mvPoint", "}"}]}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
             "gaRunningPatch", "]"}], "[", "\"\<BasisVectors\>\"", "]"}], "=!=",
            "$Failed"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"tangentVectorPointList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"theOption", "[", "\"\<TangentVector\>\"", "]"}], "}"}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"tangentVectorStyleList", "=", 
            RowBox[{"PadRight", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"Length", "[", "tangentVectorPointList", "]"}], ",", 
              RowBox[{"theOption", "[", "\"\<TangentVectorStyle\>\"", "]"}]}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"tanVectGraphicsList", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"tangentVectors", "[", 
               RowBox[{"coordChartName", ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"theOption", "[", "\"\<ParameterValueList\>\"", "]"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"optDetected", "=", 
               RowBox[{"Thread", "[", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "tangentVectorPointList", ",", "tangentVectorStyleList"}], 
                 "]"}], "]"}]}], ")"}]}]}]}], "\[IndentingNewLine]", ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaPlotCoordinateSystem", " ", "::", "failed"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[",
                "gaRunningPatch", "]"}], "[", "\"\<BasisVectors\>\"", "]"}]}],
             "]"}], ";", 
           RowBox[{"tanVectGraphicsList", "=", "Nothing"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Not expected content of \\\"TangentVector\\\"] option (command \
gaPlotCoordinateSystem[])\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Options for \\\"TangentVector\\\" and \\\"TangentVectorStyle\\\
\" \>\"", ",", "optDetected"}], "}"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"theOption", "[", "\"\<NormalVector\>\"", "]"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Normal", " ", "to", " ", "surface", " ", "vector"}], " ", 
       "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<NormalVector\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<NormalVector\>\"", "|", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"normalVectorGraphicsList", "=", "Nothing"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"_mvPoint", "|", 
         RowBox[{"{", "__mvPoint", "}"}]}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaCoordinateChart", "[", "coordChartName", "]"}], "[", 
             "gaRunningPatch", "]"}], "[", "\"\<NormalToSurface\>\"", "]"}], "=!=",
            "$Failed"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"normalVectorPointList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"theOption", "[", "\"\<NormalVector\>\"", "]"}], "}"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"normalVectorStyleList", "=", 
            RowBox[{"PadRight", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"Length", "[", "normalVectorPointList", "]"}], ",", 
              RowBox[{"theOption", "[", "\"\<NormalVectorStyle\>\"", "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"normalVectorGraphicsList", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"normalVector", "[", 
               RowBox[{"coordChartName", ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"theOption", "[", "\"\<ParameterValueList\>\"", "]"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"optDetected", "=", 
               RowBox[{"Thread", "[", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "normalVectorPointList", ",", "normalVectorStyleList"}], 
                 "]"}], "]"}]}], ")"}]}]}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"normalVectorGraphicsList", "=", "Nothing"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "_", ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Not expected content of \\\"NormalVector\\\"] option  (command \
gaPlotCoordinateSystem[])\>\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"printDetails", "[", 
       RowBox[{
        RowBox[{"theOption", "[", "\"\<Quiet\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Options for \\\"NormalVector\\\" and \\\"NormalVectorStyle\\\" \
\>\"", ",", "optDetected"}], "}"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Collect", " ", "all", " ", "elements", " ", "into", " ", "single", 
        " ", "graphics"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"Show", "@@", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
         "csSurface", ",", "tanVectGraphicsList", ",", 
          "normalVectorGraphicsList"}], "}"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Or", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"{", "range1", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"_", "?", "NumericQ"}], ",", 
           RowBox[{"_", "?", "NumericQ"}]}], "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"{", "range1", "}"}], "===", 
        RowBox[{"{", "\"\<All\>\"", "}"}]}]}], "]"}], "&&", 
     RowBox[{"Or", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"{", "range2", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"_", "?", "NumericQ"}], ",", 
           RowBox[{"_", "?", "NumericQ"}]}], "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"{", "range2", "}"}], "===", 
        RowBox[{"{", "\"\<All\>\"", "}"}]}]}], "]"}]}], ")"}]}]}]}], "Input",E\
xpressionUUID->"ea11410c-81e7-4fc0-a90b-41f66cc91dd8"]
}, Open  ]],

Cell["End subsubsection", "Text",ExpressionUUID->"7e9d6dbc-2ac6-4423-b0e6-7cfb71b88923"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1533]:=",ExpressionUUID->"f49cb877-1220-4d1c-af35-f8f9a95845a1"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Close Package"
}], "Section",ExpressionUUID->"a0ee7a7a-e0cc-4e37-a81a-b39acd14152a"],

Cell["\<\
Execute this section in order to test if all functions are defined in proper \
order\
\>", "Text",ExpressionUUID->"0b6639ef-2ba6-4ef7-ab51-640fec59e455"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1534]:=",ExpressionUUID->"388eac7b-da56-4046-b97e-c7bfae0c6704"],

Cell[BoxData[
 RowBox[{
  RowBox[{"heads", " ", "=", " ", 
   RowBox[{"MissingForwardDeclarations", "[", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[1535]:=",ExpressionUUID->"f50ee0c9-9a57-415f-827e-b347dbe032b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"heads", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{"a", " ", "nice", " ", "development", " ", "aid"}], " ", "*)"}], 
    "  ", 
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<ERROR, need forwards, or make calls only from private context:\\n\>\
\"", " ", "<>", "  ", 
      RowBox[{"StringListPrintableString", "[", "heads", "]"}]}], "]"}]}], 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[1536]:=",ExpressionUUID->"4a3af236-8b0b-4e19-9e71-6e9b00be3778"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "heads", "]"}], ";"}], " "}]], "Input",
 CellLabel->
  "In[1537]:=",ExpressionUUID->"719e4bdb-7aed-4d01-b068-3cf999752d08"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1538]:=",ExpressionUUID->"d7b751f8-e824-460f-a29b-532c4c400823"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaPackageHasBeenLoaded", " ", "=", " ", "True"}], ";"}]], "Input",\

 CellLabel->
  "In[1539]:=",ExpressionUUID->"bc7a9c03-3fa3-432c-946a-bc0fcf2b5c0e"],

Cell["\<\
No need for EndPackage[]?, because End[] was used in DeclareIntoContext[]??? \
Seems we need it.\
\>", "Text",ExpressionUUID->"24aab53d-ad7f-41c8-bb1f-fd481c77fd4f"],

Cell["\<\
Adjust Out[ ] labels that they start from 1 in a calling notebook.\
\>", "Text",ExpressionUUID->"6b8a9e60-56b1-4523-bcd3-e973fb2d3468"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Unprotect", "[", "Out", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1540]:=",ExpressionUUID->"ba40136d-2ef2-4141-934b-94b725bd9466"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "Out", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1541]:=",ExpressionUUID->"1df6d245-f656-476e-88e1-5b45197f27c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", "Out", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1542]:=",ExpressionUUID->"9beba473-7230-405d-aa56-98479428718a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[1543]:=",ExpressionUUID->"e04a551f-a51a-48a5-b449-4e60ee9932e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackageContext", "<>", " ", "\"\<*\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[1544]:=",ExpressionUUID->"10f6f9b5-2df3-40fb-8123-cb11a494f0b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BaseVectorAlgebra\"\>", ",", "\<\"BasisVectorsMultipliers\"\>",
    ",", "\<\"BasisVectorsReordering\"\>", ",", "\<\"BeginPrivate\"\>", 
   ",", "\<\"Blade\"\>", ",", "\<\"Cl\"\>", 
   ",", "\<\"CoefficientFunction\"\>", ",", "\<\"CollectCoefficients\"\>", 
   ",", "\<\"DeclareIntoContext\"\>", ",", "\<\"DorstProduct\"\>", 
   ",", "\<\"DP\"\>", ",", "\<\"ElementaryRepresentations\"\>", 
   ",", "\<\"EndPrivate\"\>", ",", "\<\"Evaluation\"\>", 
   ",", "\<\"ExplicitFormula\"\>", 
   ",", "\<\"ExtendOutermorphismToBasisElements\"\>", 
   ",", "\<\"gaAdjointInnerOperation\"\>", 
   ",", "\<\"gaAdjointTransformation\"\>", 
   ",", "\<\"gaAdjointTransformationMatrix\"\>", 
   ",", "\<\"gaAlgebraMultiplicationTable\"\>", 
   ",", "\<\"gaAntiCommutator\"\>", ",", "\<\"gaArcCoshOfMV\"\>", 
   ",", "\<\"gaArcCoshSeries\"\>", ",", "\<\"gaArcCosOfMV\"\>", 
   ",", "\<\"gaArcCosSeries\"\>", ",", "\<\"gaArcCothOfMV\"\>", 
   ",", "\<\"gaArcCothSeries\"\>", ",", "\<\"gaArcCotOfMV\"\>", 
   ",", "\<\"gaArcCotSeries\"\>", ",", "\<\"gaArcSinhOfMV\"\>", 
   ",", "\<\"gaArcSinhSeries\"\>", ",", "\<\"gaArcSinOfMV\"\>", 
   ",", "\<\"gaArcSinSeries\"\>", ",", "\<\"gaArcTanhOfMV\"\>", 
   ",", "\<\"gaArcTanhSeries\"\>", ",", "\<\"gaArcTanOfMV\"\>", 
   ",", "\<\"gaArcTanSeries\"\>", ",", "\<\"gaAssociationRepresentation\"\>", 
   ",", "\<\"gaAssociationTogether\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeries\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeriesData\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffTermLogarithm\"\>", 
   ",", "\<\"gaBCHSeries\"\>", ",", "\<\"gaBilinearForm\"\>", 
   ",", "\<\"gaBinomialConjugate\"\>", ",", "\<\"gaBladeFactor\"\>", 
   ",", "\<\"gaBladeQ\"\>", ",", "\<\"gaBladeToSumOfVersors\"\>", 
   ",", "\<\"gaCasimir\"\>", ",", "\<\"gaCE\"\>", 
   ",", "\<\"gaCharacteristicPolynomial\"\>", 
   ",", "\<\"gaChristoffelSymbol\"\>", ",", "\<\"gaCliffordConjugate\"\>", 
   ",", "\<\"gaCliffordDecomposableQ\"\>", ",", "\<\"gaCliffordDecompose\"\>",
    ",", "\<\"gaCommutativeAllQ\"\>", 
   ",", "\<\"gaCommutativeMonomialOrder\"\>", ",", "\<\"gaCommutativeQ\"\>", 
   ",", "\<\"gaCommutator\"\>", ",", "\<\"gaCommutatorExpand\"\>", 
   ",", "\<\"gaCompactAssociationRepresentation\"\>", 
   ",", "\<\"gaCompactPlainRepresentation\"\>", 
   ",", "\<\"gaComplexCliffordConjugate\"\>", 
   ",", "\<\"gaComplexConjugate\"\>", ",", "\<\"gaComplexSymbols\"\>", 
   ",", "\<\"gaComponentCoefficientAndBasisList\"\>", 
   ",", "\<\"gaComponentCoefficientList\"\>", ",", "\<\"gaComponentList\"\>", 
   ",", "\<\"gaConnectionCoefficient\"\>", ",", "\<\"gaCoordinateChart\"\>", 
   ",", "\<\"gaCoordinateChartNameOfAlgebra\"\>", ",", "\<\"gaCoshOfMV\"\>", 
   ",", "\<\"gaCoshSeries\"\>", ",", "\<\"gaCosOfMV\"\>", 
   ",", "\<\"gaCosSeries\"\>", ",", "\<\"gaCothOfMV\"\>", 
   ",", "\<\"gaCothSeries\"\>", ",", "\<\"gaCotOfMV\"\>", 
   ",", "\<\"gaCotSeries\"\>", ",", "\<\"gaDA\"\>", ",", "\<\"gaDD\"\>", 
   ",", "\<\"gaDE\"\>", 
   ",", "\<\"gaDefineAssociationRepresentationKeyOrder\"\>", 
   ",", "\<\"gaDefineCoordinateChart\"\>", ",", "\<\"gaDefineInput\"\>", 
   ",", "\<\"gaDefineMatrixRepresentation\"\>", 
   ",", "\<\"gaDefineNotation\"\>", ",", "\<\"gaDefineOrthonormalBasis\"\>", 
   ",", "\<\"gaDefinePositionVector\"\>", ",", "\<\"gaDerivativeArgument\"\>",
    ",", "\<\"gaDerivativeExpand\"\>", ",", "\<\"gaDeterminantFormula\"\>", 
   ",", "\<\"gaDeterminantOfMV\"\>", ",", "\<\"gaDiagonalizableQ\"\>", 
   ",", "\<\"gaDimensionOfMatrixRepresentation\"\>", 
   ",", "\<\"gaDimensionOfRepresentation\"\>", 
   ",", "\<\"gaDimensionOfVectorSpace\"\>", 
   ",", "\<\"gaDirectionalDerivative\"\>", ",", "\<\"gaDoubleSidedIdeal\"\>", 
   ",", "\<\"gaDynkinFactor\"\>", ",", "\<\"gaEliminateGrade\"\>", 
   ",", "\<\"gaExpand\"\>", ",", "\<\"gaExpandedQ\"\>", 
   ",", "\<\"gaExpandFunctions\"\>", ",", "\<\"gaExpOfMV\"\>", 
   ",", "\<\"gaExpSeries\"\>", ",", "\<\"gaExteriorDerivative\"\>", 
   ",", "\<\"gaFactorTerm\"\>", ",", "\<\"gaFieldFactor\"\>", 
   ",", "\<\"gaFlatSpaceQ\"\>", ",", "\<\"gaFormula\"\>", 
   ",", "\<\"gaFromMatrixRepresentation\"\>", 
   ",", "\<\"gaFromTensorProduct\"\>", ",", "\<\"gaFunctionOfMV\"\>", 
   ",", "\<\"gaGeneralMultivector\"\>", 
   ",", "\<\"gaGeometricMatrixProduct\"\>", 
   ",", "\<\"gaGeometricProductSeries\"\>", ",", "\<\"gaGetAlgebra\"\>", 
   ",", "\<\"gaGetCoordinateChartName\"\>", ",", "\<\"gaGetMV\"\>", 
   ",", "\<\"gaGetMVComponents\"\>", ",", "\<\"gaGetSignature\"\>", 
   ",", "\<\"gaGPMatrixPower\"\>", ",", "\<\"gaGPPower\"\>", 
   ",", "\<\"gaGradeInverse\"\>", ",", "\<\"gaGradeList\"\>", 
   ",", "\<\"gaGradeNegate\"\>", ",", "\<\"gaGradesOnly\"\>", 
   ",", "\<\"gaHermitianConjugate\"\>", ",", "\<\"gaHermitianQ\"\>", 
   ",", "\<\"gaHodgeDual\"\>", ",", "\<\"gaHomogeneusGradeQ\"\>", 
   ",", "\<\"gaHomogeneusSubspaceBasis\"\>", ",", "\<\"gaI\"\>", 
   ",", "\<\"gaIdealBasisMultipliers\"\>", 
   ",", "\<\"gaIdealBasisReordering\"\>", 
   ",", "\<\"\
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\"\>", 
   ",", "\<\"gaIdempotentQ\"\>", ",", "\<\"gaIncludeFreeMV\"\>", 
   ",", "\<\"gaIndexDown\"\>", ",", "\<\"gaIndexList\"\>", 
   ",", "\<\"gaIndexSort\"\>", ",", "\<\"gaIndexUp\"\>", 
   ",", "\<\"gaInnerMatrixProduct\"\>", ",", "\<\"gaInverse\"\>", 
   ",", "\<\"gaInvertibleQ\"\>", ",", "\<\"gaIsomorphicGAsQ\"\>", 
   ",", "\<\"gaKillingMetric\"\>", ",", "\<\"gaLeftIdeal\"\>", 
   ",", "\<\"gaLeftIdealBasis\"\>", ",", "\<\"gaLieBracketCoefficient\"\>", 
   ",", "\<\"gaLinearQ\"\>", ",", "\<\"gaLinearSolve\"\>", 
   ",", "\<\"gaListDefinedElementaryRepresentations\"\>", 
   ",", "\<\"gaLogOfMV\"\>", ",", "\<\"gaLogSeries\"\>", 
   ",", "\<\"gaMakeAlias\"\>", ",", "\<\"gaMatrixRepresentation\"\>", 
   ",", "\<\"gaMetric\"\>", ",", "\<\"gaMinimalPolynomial\"\>", 
   ",", "\<\"gaMultivectorDerivative\"\>", 
   ",", "\<\"gaMultivectorParityCheck\"\>", ",", "\<\"gaMVDE\"\>", 
   ",", "\<\"gaNegativeSignatureIndexList\"\>", 
   ",", "\<\"gaNonCommutativeMonomialOrder\"\>", 
   ",", "\<\"gaNonZeroGradeInverse\"\>", 
   ",", "\<\"gaNorm2CliffordConjugateSigned\"\>", 
   ",", "\<\"gaNorm2ReverseSigned\"\>", ",", "\<\"gaNormalize\"\>", 
   ",", "\<\"gaNormCliffordConjugateAbs\"\>", 
   ",", "\<\"gaNormDeterminant\"\>", ",", "\<\"gaNormHermitian\"\>", 
   ",", "\<\"gaNormOfCoefficients\"\>", ",", "\<\"gaNormReverseAbs\"\>", 
   ",", "\<\"gaNotation\"\>", ",", "\<\"gaOPMatrixPower\"\>", 
   ",", "\<\"gaOPPower\"\>", ",", "\<\"gaOptionCheck\"\>", 
   ",", "\<\"gaOrderedQ\"\>", ",", "\<\"gaOrdering\"\>", 
   ",", "\<\"gaOrthogonalize\"\>", ",", "\<\"gaOrthonormalBasis\"\>", 
   ",", "\<\"gaOuterMatrixProduct\"\>", ",", "\<\"gaParameterSeries\"\>", 
   ",", "\<\"gaPE\"\>", ",", "\<\"gaPlainRepresentation\"\>", 
   ",", "\<\"gaPlotCoordinateSystem\"\>", ",", "\<\"gaPositionVector\"\>", 
   ",", "\<\"gaPrimitiveIdempotent\"\>", ",", "\<\"gaPrincipalInvolution\"\>",
    ",", "\<\"gaProductExpand\"\>", ",", "\<\"gaProductPairExpand\"\>", 
   ",", "\<\"gaPropertiesToCompute\"\>", 
   ",", "\<\"gaQuaternionGradeIsZero\"\>", 
   ",", "\<\"gaQuaternionicConjugate\"\>", 
   ",", "\<\"gaRadonHurwitzNumber\"\>", ",", "\<\"gaRandomBasis\"\>", 
   ",", "\<\"gaRandomMultivector\"\>", 
   ",", "\<\"gaRandomNonDiagonalizableMV\"\>", 
   ",", "\<\"gaReciprocalBasis\"\>", ",", "\<\"gaReciprocalVectors\"\>", 
   ",", "\<\"gaReplaceDivisionRing\"\>", ",", "\<\"gaReplaceImaginary\"\>", 
   ",", "\<\"gaReverse\"\>", ",", "\<\"gaRunningAlgebra\"\>", 
   ",", "\<\"gaRunningCoordinateChart\"\>", 
   ",", "\<\"gaRunningCoordinateChartVars\"\>", 
   ",", "\<\"gaRunningOrdering\"\>", ",", "\<\"gaRunningPatch\"\>", 
   ",", "\<\"gaSemisimpleAlgebraExtension\"\>", 
   ",", "\<\"gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\"\>", 
   ",", "\<\"gaSeries\"\>", ",", "\<\"gaSeriesData\"\>", 
   ",", "\<\"gaSetCommutative\"\>", ",", "\<\"gaSetLinear\"\>", 
   ",", "\<\"gaSetNamedOptionValue\"\>", ",", "\<\"gaSetNonCommutative\"\>", 
   ",", "\<\"gaSinhOfMV\"\>", ",", "\<\"gaSinhSeries\"\>", 
   ",", "\<\"gaSinOfMV\"\>", ",", "\<\"gaSinSeries\"\>", 
   ",", "\<\"gaSort\"\>", ",", "\<\"gaSpinor\"\>", 
   ",", "\<\"gaSpinorIdempotent\"\>", 
   ",", "\<\"gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\"\>", 
   ",", "\<\"gaSqrt\"\>", ",", "\<\"gaSqrtOfMV\"\>", 
   ",", "\<\"gaStructureConstant\"\>", ",", "\<\"gaTanhOfMV\"\>", 
   ",", "\<\"gaTanhSeries\"\>", ",", "\<\"gaTanOfMV\"\>", 
   ",", "\<\"gaTanSeries\"\>", ",", "\<\"gaTensorProduct\"\>", 
   ",", "\<\"gaTestIndexOrdering\"\>", 
   ",", "\<\"gaToDirectionalDerivative\"\>", 
   ",", "\<\"gaToMatrixRepresentation\"\>", ",", "\<\"gaToTensorProduct\"\>", 
   ",", "\<\"gaTransformation\"\>", ",", "\<\"gaTransformationMatrix\"\>", 
   ",", "\<\"gaVariables\"\>", ",", "\<\"gaVectorDerivative\"\>", 
   ",", "\<\"gaVectorQ\"\>", ",", "\<\"gaVectorSpaceDimension\"\>", 
   ",", "\<\"gaVerify\"\>", ",", "\<\"gaVersorQ\"\>", 
   ",", "\<\"gaVersorToSumOfBlades\"\>", 
   ",", "\<\"gaZassenhausCoefficient\"\>", ",", "\<\"gaZassenhausSeries\"\>", 
   ",", "\<\"gaZassenhausSeriesData\"\>", ",", "\<\"gbLeadingCoefficient\"\>",
    ",", "\<\"gbLeadingMonomial\"\>", ",", "\<\"gbLeadingTerm\"\>", 
   ",", "\<\"GeometricProduct\"\>", ",", "\<\"GP\"\>", 
   ",", "\<\"HermitianOnly\"\>", ",", "\<\"InnerProduct\"\>", 
   ",", "\<\"InvolutionPosition\"\>", ",", "\<\"Involutions\"\>", 
   ",", "\<\"IP\"\>", ",", "\<\"JordanForm\"\>", ",", "\<\"LC\"\>", 
   ",", "\<\"LeftContract\"\>", ",", "\<\"MatrixOuterProductOrder\"\>", 
   ",", "\<\"MissingForwardDeclarations\"\>", ",", "\<\"MV\"\>", 
   ",", "\<\"mvD\"\>", ",", "\<\"mvDownUp\"\>", ",", "\<\"mvPoint\"\>", 
   ",", "\<\"mvZeroGradeQ\"\>", ",", "\<\"NextVector\"\>", 
   ",", "\<\"NumberOfPrimitiveFactors\"\>", ",", "\<\"OmitGrades\"\>", 
   ",", "\<\"OP\"\>", ",", "\<\"OuterProduct\"\>", ",", "\<\"OutputType\"\>", 
   ",", "\<\"QuaternionIsomorphismRules\"\>", ",", "\<\"RC\"\>", 
   ",", "\<\"ReductionOrder\"\>", ",", "\<\"RightContract\"\>", 
   ",", "\<\"SignChangeGrades\"\>", ",", "\<\"StartingElement\"\>", 
   ",", "\<\"StringListPrintableString\"\>", ",", "\<\"TargetMatrices\"\>", 
   ",", "\<\"TheContextSymbolList\"\>", ",", "\<\"ZeroTolerance\"\>", 
   ",", "\<\"\[DoubleStruckCapitalD]\"\>", ",", "\<\"\[DoubleStruckE]\"\>", 
   ",", "\<\"$GAPackageContext\"\>", ",", "\<\"$gaPackageHasBeenLoaded\"\>", 
   ",", "\<\"$GAPackageInputAliases\"\>", 
   ",", "\<\"$GAPackageOnlyContextPath\"\>", ",", "\<\"$gaPackageOptions\"\>",
    ",", "\<\"$GAPackagePrivateContext\"\>", 
   ",", "\<\"$GAUnprotectionList\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[1544]=",ExpressionUUID->"7fcc0040-8fa5-471c-afda-a3059dddc7df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackagePrivateContext", "<>", " ", "\"\<*\>\""}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[1545]:=",ExpressionUUID->"eb3e8177-ef22-4af0-a3c5-b7103cf3d8f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\:213e\"\>", ",", "\<\"\[FormalLambda]1\"\>", 
   ",", "\<\"\[FormalLambda]2\"\>", ",", "\<\"a\"\>", ",", "\<\"a0\"\>", 
   ",", "\<\"a0$\"\>", ",", "\<\"a1\"\>", ",", "\<\"a1$\"\>", 
   ",", "\<\"a2\"\>", ",", "\<\"a2$\"\>", ",", "\<\"a3\"\>", 
   ",", "\<\"a3$\"\>", ",", "\<\"a7\"\>", ",", "\<\"a7$\"\>", 
   ",", "\<\"aa\"\>", ",", "\<\"aAlgebra\"\>", ",", "\<\"aAlgebra$\"\>", 
   ",", "\<\"aa$\"\>", ",", "\<\"aB\"\>", ",", "\<\"aB$\"\>", 
   ",", "\<\"accepted\"\>", ",", "\<\"acl\"\>", ",", "\<\"acl$\"\>", 
   ",", "\<\"activate\"\>", ",", "\<\"activate$\"\>", 
   ",", "\<\"additionalTestFunction\"\>", ",", "\<\"addVectorList\"\>", 
   ",", "\<\"addVectorList$\"\>", ",", "\<\"aJF\"\>", ",", "\<\"aJF$\"\>", 
   ",", "\<\"al\"\>", ",", "\<\"al1\"\>", ",", "\<\"al1$\"\>", 
   ",", "\<\"al2\"\>", ",", "\<\"al2$\"\>", ",", "\<\"alB\"\>", 
   ",", "\<\"alB$\"\>", ",", "\<\"alc\"\>", ",", "\<\"alc$\"\>", 
   ",", "\<\"alg\"\>", ",", "\<\"algA\"\>", ",", "\<\"algAp\"\>", 
   ",", "\<\"algAp$\"\>", ",", "\<\"algAq\"\>", ",", "\<\"algAq$\"\>", 
   ",", "\<\"algB\"\>", ",", "\<\"algBp\"\>", ",", "\<\"algBp$\"\>", 
   ",", "\<\"algBq\"\>", ",", "\<\"algBq$\"\>", ",", "\<\"algebra\"\>", 
   ",", "\<\"algebraBase\"\>", ",", "\<\"algebraDim\"\>", 
   ",", "\<\"algebraDim$\"\>", ",", "\<\"algebraSeq\"\>", 
   ",", "\<\"algebraSeq$\"\>", ",", "\<\"algebra$\"\>", ",", "\<\"algIso\"\>",
    ",", "\<\"algIso$\"\>", ",", "\<\"algRep\"\>", ",", "\<\"algRepRules\"\>",
    ",", "\<\"algRepRules$\"\>", ",", "\<\"algRep$\"\>", ",", "\<\"algTP\"\>",
    ",", "\<\"algTP$\"\>", ",", "\<\"algTrueMinusAlgHelp\"\>", 
   ",", "\<\"algTrueMinusAlgHelp$\"\>", ",", "\<\"alg$\"\>", 
   ",", "\<\"aliasName\"\>", ",", "\<\"aliasReplacementRul\"\>", 
   ",", "\<\"all\"\>", ",", "\<\"allBlades\"\>", ",", "\<\"allBlades$\"\>", 
   ",", "\<\"allDefineOrthonormalBasisOptions\"\>", 
   ",", "\<\"allDefineOrthonormalBasisOptions$\"\>", ",", "\<\"alldvars\"\>", 
   ",", "\<\"alldvars$\"\>", ",", "\<\"allGrades\"\>", 
   ",", "\<\"allGrades$\"\>", ",", "\<\"allMatrices\"\>", 
   ",", "\<\"allMatrices$\"\>", ",", "\<\"allNonScalars\"\>", 
   ",", "\<\"allNonScalars$\"\>", ",", "\<\"allNonTrivialPairs\"\>", 
   ",", "\<\"allNonTrivialPairs$\"\>", ",", "\<\"allObtained\"\>", 
   ",", "\<\"allObtained$\"\>", ",", "\<\"allPrimitiveIdempotentOptions\"\>", 
   ",", "\<\"allPrimitiveIdempotentOptions$\"\>", 
   ",", "\<\"allProductPairExpandOptions\"\>", 
   ",", "\<\"allProductPairExpandOptions$\"\>", ",", "\<\"allScalars\"\>", 
   ",", "\<\"allScalars$\"\>", ",", "\<\"allTable\"\>", 
   ",", "\<\"allTable$\"\>", ",", "\<\"allVars\"\>", ",", "\<\"allVars$\"\>", 
   ",", "\<\"allZeroTest\"\>", ",", "\<\"alongDirection\"\>", 
   ",", "\<\"alongDirection$\"\>", ",", "\<\"alout\"\>", 
   ",", "\<\"alout$\"\>", ",", "\<\"alP\"\>", ",", "\<\"alpha\"\>", 
   ",", "\<\"alpha$\"\>", ",", "\<\"alposition\"\>", 
   ",", "\<\"alposition$\"\>", ",", "\<\"alP$\"\>", 
   ",", "\<\"alreadyCalculatedProducts\"\>", 
   ",", "\<\"alreadyCalculatedProductsAdoptedToSingle\"\>", 
   ",", "\<\"alreadyPrintedList\"\>", ",", "\<\"alreadyUsedColors\"\>", 
   ",", "\<\"alsty\"\>", ",", "\<\"alsty$\"\>", ",", "\<\"alvectors\"\>", 
   ",", "\<\"alvectors$\"\>", ",", "\<\"al$\"\>", ",", "\<\"am1d\"\>", 
   ",", "\<\"am1d$\"\>", ",", "\<\"am1u\"\>", ",", "\<\"am1u$\"\>", 
   ",", "\<\"am2d\"\>", ",", "\<\"am2d$\"\>", ",", "\<\"am2u\"\>", 
   ",", "\<\"am2u$\"\>", ",", "\<\"amd\"\>", ",", "\<\"amd$\"\>", 
   ",", "\<\"aMethod\"\>", ",", "\<\"aMethod$\"\>", ",", "\<\"amu\"\>", 
   ",", "\<\"amu$\"\>", ",", "\<\"ansRaw\"\>", ",", "\<\"ansRaw$\"\>", 
   ",", "\<\"answer\"\>", ",", "\<\"answerComplexRootsComplexExpand\"\>", 
   ",", "\<\"answerComplexRootsComplexExpand$\"\>", ",", "\<\"answerFin\"\>", 
   ",", "\<\"answerFin$\"\>", ",", "\<\"answerRealRoots\"\>", 
   ",", "\<\"answerRealRoots$\"\>", ",", "\<\"answerWithoutFreeVars\"\>", 
   ",", "\<\"answerWithoutFreeVars$\"\>", ",", "\<\"answer$\"\>", 
   ",", "\<\"any\"\>", ",", "\<\"any1\"\>", ",", "\<\"any1$\"\>", 
   ",", "\<\"any2\"\>", ",", "\<\"any2$\"\>", ",", "\<\"any3\"\>", 
   ",", "\<\"any3$\"\>", ",", "\<\"anycoef\"\>", ",", "\<\"anyCoef1\"\>", 
   ",", "\<\"anyCoef1$\"\>", ",", "\<\"anyCoef2\"\>", 
   ",", "\<\"anyCoef2$\"\>", ",", "\<\"anycoef$\"\>", 
   ",", "\<\"anyCommutative\"\>", ",", "\<\"anyScalar\"\>", 
   ",", "\<\"anyScalar$\"\>", ",", "\<\"any$\"\>", ",", "\<\"aP\"\>", 
   ",", "\<\"ap1\"\>", ",", "\<\"ap1$\"\>", ",", "\<\"ap2\"\>", 
   ",", "\<\"ap2$\"\>", ",", "\<\"applyQuaternionIsomorphismRule\"\>", 
   ",", "\<\"aP$\"\>", ",", "\<\"ar\"\>", ",", "\<\"arep\"\>", 
   ",", "\<\"arep$\"\>", ",", "\<\"arg\"\>", ",", "\<\"arg0\"\>", 
   ",", "\<\"arg0$\"\>", ",", "\<\"arg1\"\>", ",", "\<\"arg1$\"\>", 
   ",", "\<\"arg2\"\>", ",", "\<\"arg2$\"\>", ",", "\<\"arg3\"\>", 
   ",", "\<\"argDown\"\>", ",", "\<\"argDown$\"\>", ",", "\<\"argg1\"\>", 
   ",", "\<\"argg1$\"\>", ",", "\<\"argg2\"\>", ",", "\<\"argg2$\"\>", 
   ",", "\<\"argggs\"\>", ",", "\<\"argggs$\"\>", ",", "\<\"arggs\"\>", 
   ",", "\<\"arggs$\"\>", ",", "\<\"argh\"\>", ",", "\<\"argh$\"\>", 
   ",", "\<\"argnomv\"\>", ",", "\<\"argnomv$\"\>", ",", "\<\"args\"\>", 
   ",", "\<\"args1\"\>", ",", "\<\"args1$\"\>", ",", "\<\"args3\"\>", 
   ",", "\<\"args5\"\>", ",", "\<\"argsa\"\>", ",", "\<\"argsa$\"\>", 
   ",", "\<\"args$\"\>", ",", "\<\"argUp\"\>", ",", "\<\"argUp$\"\>", 
   ",", "\<\"arg$\"\>", ",", "\<\"aRules\"\>", ",", "\<\"aRules$\"\>", 
   ",", "\<\"ar$\"\>", ",", "\<\"as\"\>", ",", "\<\"aS\"\>", 
   ",", "\<\"as1\"\>", ",", "\<\"as1$\"\>", ",", "\<\"as2\"\>", 
   ",", "\<\"as2$\"\>", ",", "\<\"aSqrtM\"\>", ",", "\<\"aSqrtM$\"\>", 
   ",", "\<\"aSqrtP\"\>", ",", "\<\"aSqrtP$\"\>", ",", "\<\"assoc\"\>", 
   ",", "\<\"associationForm\"\>", ",", "\<\"associationForm$\"\>", 
   ",", "\<\"associationKeySortRules\"\>", ",", "\<\"as$\"\>", 
   ",", "\<\"aS$\"\>", ",", "\<\"aTemp\"\>", ",", "\<\"aTrasf\"\>", 
   ",", "\<\"aTrasf$\"\>", ",", "\<\"aV\"\>", 
   ",", "\<\"availableProperties\"\>", ",", "\<\"aVB\"\>", 
   ",", "\<\"aVB$\"\>", ",", "\<\"aV$\"\>", ",", "\<\"a$\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"base\"\>", ",", "\<\"baseBivectors\"\>", 
   ",", "\<\"baseElementInverse\"\>", ",", "\<\"baseElemsOfEachCoeff\"\>", 
   ",", "\<\"baseElemsOfEachCoeff$\"\>", ",", "\<\"baseProd\"\>", 
   ",", "\<\"baseProd$\"\>", ",", "\<\"baseSymbol\"\>", 
   ",", "\<\"baseSymbolN\"\>", ",", "\<\"baseSymbol$\"\>", 
   ",", "\<\"baseVectorRepresentation\"\>", 
   ",", "\<\"baseVectorRepresentation$\"\>", ",", "\<\"baseVectors\"\>", 
   ",", "\<\"baseVectors$\"\>", ",", "\<\"basis\"\>", 
   ",", "\<\"basisElement\"\>", ",", "\<\"basismultivectorelements\"\>", 
   ",", "\<\"basismultivectorelements$\"\>", ",", "\<\"basisNoUnit\"\>", 
   ",", "\<\"basisNoUnit$\"\>", ",", "\<\"basisSymbol\"\>", 
   ",", "\<\"basisSymbol$\"\>", ",", "\<\"basisVectors\"\>", 
   ",", "\<\"basisVectorsCartes\"\>", ",", "\<\"basisVectorsCartes$\"\>", 
   ",", "\<\"basisVectors$\"\>", ",", "\<\"basis$\"\>", ",", "\<\"bb\"\>", 
   ",", "\<\"bb$\"\>", ",", "\<\"bCCb0\"\>", ",", "\<\"bCCb0$\"\>", 
   ",", "\<\"bCCbI0\"\>", ",", "\<\"bCCbI0$\"\>", ",", "\<\"be\"\>", 
   ",", "\<\"bea\"\>", ",", "\<\"beares\"\>", ",", "\<\"beares$\"\>", 
   ",", "\<\"bea$\"\>", ",", "\<\"belem\"\>", ",", "\<\"belem$\"\>", 
   ",", "\<\"be$\"\>", ",", "\<\"bii\"\>", ",", "\<\"bii$\"\>", 
   ",", "\<\"bivectorsOfSpecialAlgebra\"\>", ",", "\<\"blade\"\>", 
   ",", "\<\"bladeVectors\"\>", ",", "\<\"bladeVectors$\"\>", 
   ",", "\<\"blade$\"\>", ",", "\<\"blockMatrixList\"\>", 
   ",", "\<\"blockMatrixListLength\"\>", 
   ",", "\<\"blockMatrixListLength$\"\>", ",", "\<\"blockMatrixList$\"\>", 
   ",", "\<\"bm\"\>", ",", "\<\"bM\"\>", ",", "\<\"bmm\"\>", 
   ",", "\<\"bmm$\"\>", ",", "\<\"bm$\"\>", ",", "\<\"bM$\"\>", 
   ",", "\<\"bP\"\>", ",", "\<\"bP$\"\>", ",", "\<\"bs\"\>", 
   ",", "\<\"bs$\"\>", ",", "\<\"bTemp\"\>", ",", "\<\"b$\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"c1\"\>", ",", "\<\"c1Name\"\>", 
   ",", "\<\"c1Name$\"\>", ",", "\<\"c1Rules\"\>", ",", "\<\"c1Rules$\"\>", 
   ",", "\<\"c1$\"\>", ",", "\<\"c2\"\>", ",", "\<\"c2Name\"\>", 
   ",", "\<\"c2Name$\"\>", ",", "\<\"c2$\"\>", ",", "\<\"c3\"\>", 
   ",", "\<\"c3$\"\>", ",", "\<\"canceledFraction\"\>", 
   ",", "\<\"canceledFraction$\"\>", ",", "\<\"candidateForUnit\"\>", 
   ",", "\<\"candidateForUnit$\"\>", ",", "\<\"candidates\"\>", 
   ",", "\<\"cas\"\>", ",", "\<\"cas$\"\>", ",", "\<\"catch\"\>", 
   ",", "\<\"catch$\"\>", ",", "\<\"cc\"\>", ",", "\<\"cc$\"\>", 
   ",", "\<\"cfs\"\>", ",", "\<\"cfsRules\"\>", ",", "\<\"cfsRules$\"\>", 
   ",", "\<\"cfs$\"\>", ",", "\<\"ch\"\>", 
   ",", "\<\"characteristicPolynomialFormulaByLeftNest\"\>", 
   ",", "\<\"charCoefficients\"\>", ",", "\<\"charCoefficients$\"\>", 
   ",", "\<\"chartBasisVectors\"\>", ",", "\<\"chartBasisVectorsRules\"\>", 
   ",", "\<\"chartBasisVectorsRules$\"\>", ",", "\<\"chartBasisVectors$\"\>", 
   ",", "\<\"chartdim\"\>", ",", "\<\"chartdim$\"\>", ",", "\<\"chartN\"\>", 
   ",", "\<\"chartName\"\>", ",", "\<\"chartName$\"\>", 
   ",", "\<\"chartN$\"\>", ",", "\<\"checkAssociationRepresentation\"\>", 
   ",", "\<\"checkFunction\"\>", ",", "\<\"chEq\"\>", ",", "\<\"chEqv\"\>", 
   ",", "\<\"chEqv$\"\>", ",", "\<\"chEq$\"\>", ",", "\<\"chopTol\"\>", 
   ",", "\<\"chopTol$\"\>", ",", "\<\"chv\"\>", ",", "\<\"chv$\"\>", 
   ",", "\<\"ch$\"\>", ",", "\<\"cl\"\>", ",", "\<\"cleanEvenPiInPlus\"\>", 
   ",", "\<\"cleanEvenPiInPlus$\"\>", ",", "\<\"cleanRCHList\"\>", 
   ",", "\<\"co\"\>", ",", "\<\"code\"\>", ",", "\<\"code$\"\>", 
   ",", "\<\"coef\"\>", ",", "\<\"coeffDfor4\"\>", ",", "\<\"coeffDfor4$\"\>",
    ",", "\<\"coeffDfor5\"\>", ",", "\<\"coeffDfor5$\"\>", 
   ",", "\<\"coeffFfor4\"\>", ",", "\<\"coeffFfor4$\"\>", 
   ",", "\<\"coeffFfor5\"\>", ",", "\<\"coeffFfor5$\"\>", 
   ",", "\<\"coeffFunc\"\>", ",", "\<\"coefficientDomain\"\>", 
   ",", "\<\"coefficientDomain$\"\>", ",", "\<\"coefficientFreedom\"\>", 
   ",", "\<\"coefficientReplacementRules\"\>", 
   ",", "\<\"coefficientReplacementRules$\"\>", ",", "\<\"coeffs\"\>", 
   ",", "\<\"coeffs$\"\>", ",", "\<\"coefName\"\>", ",", "\<\"coef$\"\>", 
   ",", "\<\"col\"\>", ",", "\<\"collectOnDemand\"\>", 
   ",", "\<\"collectQ\"\>", ",", "\<\"colorDistanceFunction\"\>", 
   ",", "\<\"col$\"\>", 
   ",", "\<\"commandListThatExtendsToCurvilinearElements\"\>", 
   ",", "\<\"commandName\"\>", ",", "\<\"commutingPositiveBlades\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree\"\>", 
   ",", "\<\"commutingPositiveBladesProductFreeTransformed\"\>", 
   ",", "\<\"commutingPositiveBladesProductFreeTransformed$\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree$\"\>", 
   ",", "\<\"commutingPositiveBlades$\"\>", ",", "\<\"commutingWithAll\"\>", 
   ",", "\<\"commutingWithAllPos\"\>", ",", "\<\"commutingWithAllPos$\"\>", 
   ",", "\<\"commutingWithAll$\"\>", ",", "\<\"commutingWithElement\"\>", 
   ",", "\<\"comOrd\"\>", ",", "\<\"comOrdMod\"\>", ",", "\<\"comOrdMod$\"\>",
    ",", "\<\"comOrd$\"\>", ",", "\<\"compactBasisElems\"\>", 
   ",", "\<\"compactBasisElems$\"\>", 
   ",", "\<\"compactRepresentationReplacementRules\"\>", 
   ",", "\<\"CompileTo\"\>", ",", "\<\"complexRootPairs\"\>", 
   ",", "\<\"complexRootPairsReIm\"\>", ",", "\<\"complexRootPairsReIm$\"\>", 
   ",", "\<\"complexRootPairs$\"\>", ",", "\<\"complexRootPositions\"\>", 
   ",", "\<\"complexRootPositions$\"\>", ",", "\<\"complexSubOptionList\"\>", 
   ",", "\<\"complexSubOptionList$\"\>", ",", "\<\"complexSymb\"\>", 
   ",", "\<\"complexSymb$\"\>", 
   ",", "\<\"componentCoefficientAndBasisListHelp\"\>", 
   ",", "\<\"componentsFromTestMV\"\>", ",", "\<\"componentsFromTestMV$\"\>", 
   ",", "\<\"componentsWithoutscalar\"\>", 
   ",", "\<\"componentsWithoutscalar$\"\>", 
   ",", "\<\"computedDataForPatch\"\>", ",", "\<\"computedDataForPatch$\"\>", 
   ",", "\<\"computedProperties\"\>", ",", "\<\"computedProperties$\"\>", 
   ",", "\<\"confirmed\"\>", ",", "\<\"confirmed$\"\>", 
   ",", "\<\"containerName\"\>", ",", "\<\"contr\"\>", 
   ",", "\<\"contrInd\"\>", ",", "\<\"coord\"\>", ",", "\<\"coordAssumpt\"\>",
    ",", "\<\"coordAssumpt$\"\>", ",", "\<\"coordChartName\"\>", 
   ",", "\<\"coordName\"\>", ",", "\<\"coordName$\"\>", 
   ",", "\<\"coordRangeAssumps\"\>", ",", "\<\"coordRangeAssumps$\"\>", 
   ",", "\<\"coordSys\"\>", ",", "\<\"coordSysEx\"\>", 
   ",", "\<\"coordSysEx$\"\>", ",", "\<\"coordSysName\"\>", 
   ",", "\<\"coordSysName$\"\>", ",", "\<\"coordSys$\"\>", 
   ",", "\<\"coord$\"\>", ",", "\<\"counter\"\>", ",", "\<\"counter$\"\>", 
   ",", "\<\"co$\"\>", ",", "\<\"csSurface\"\>", ",", "\<\"csSurface$\"\>", 
   ",", "\<\"c$\"\>", ",", "\<\"d\"\>", ",", "\<\"dat\"\>", 
   ",", "\<\"dat1\"\>", ",", "\<\"dat2\"\>", ",", "\<\"data\"\>", 
   ",", "\<\"dataForChartConstruction\"\>", 
   ",", "\<\"dataForChartConstruction$\"\>", ",", "\<\"dataForDandF\"\>", 
   ",", "\<\"dataForDandF$\"\>", ",", "\<\"dataForhelpD\"\>", 
   ",", "\<\"dataForhelpD$\"\>", ",", "\<\"data$\"\>", 
   ",", "\<\"deArgumentProductRules\"\>", ",", "\<\"decomposableMV\"\>", 
   ",", "\<\"decomposableMV$\"\>", ",", "\<\"decomposibleMV\"\>", 
   ",", "\<\"def\"\>", ",", "\<\"definedGrades\"\>", 
   ",", "\<\"definedGrades$\"\>", ",", "\<\"definedReps\"\>", 
   ",", "\<\"definedReps$\"\>", 
   ",", "\<\"defineMatrixRepresentationIdealBasisMethod\"\>", 
   ",", "\<\"defineMatrixRepresentationTensorProductMethod\"\>", 
   ",", "\<\"deLinearityArgumentRules\"\>", 
   ",", "\<\"deLinearityDirectionRules\"\>", ",", "\<\"denom\"\>", 
   ",", "\<\"denominator\"\>", ",", "\<\"denominatorAbstract\"\>", 
   ",", "\<\"denominatorAbstract$\"\>", 
   ",", "\<\"denominatorValuesAtRoots\"\>", 
   ",", "\<\"denominatorValuesAtRoots$\"\>", ",", "\<\"denominator$\"\>", 
   ",", "\<\"denom$\"\>", ",", "\<\"derivativeExpandHelp\"\>", 
   ",", "\<\"derivativeSymbol\"\>", ",", "\<\"derivativeSymbolInputA\"\>", 
   ",", "\<\"derivativeSymbolInputA$\"\>", ",", "\<\"derivativeSymbol$\"\>", 
   ",", "\<\"deRules\"\>", ",", "\<\"deScalarRules\"\>", ",", "\<\"det\"\>", 
   ",", "\<\"detCExpl\"\>", ",", "\<\"detD\"\>", ",", "\<\"detD$\"\>", 
   ",", "\<\"detectedMatrixRepresentation\"\>", 
   ",", "\<\"detectedMatrixRepresentation$\"\>", 
   ",", "\<\"determinableSubOptions\"\>", 
   ",", "\<\"determinableSubOptions$\"\>", 
   ",", "\<\"determinantFormulaByLeftNest\"\>", 
   ",", "\<\"determinantFormulaByRightNest\"\>", 
   ",", "\<\"determineVarRange\"\>", ",", "\<\"detOfMV\"\>", 
   ",", "\<\"detOfMV$\"\>", ",", "\<\"detSqrt\"\>", ",", "\<\"detSqrt$\"\>", 
   ",", "\<\"detSRec\"\>", ",", "\<\"detU\"\>", ",", "\<\"det$\"\>", 
   ",", "\<\"deVectorRules\"\>", ",", "\<\"dfs\"\>", ",", "\<\"dfsN\"\>", 
   ",", "\<\"dfsN$\"\>", ",", "\<\"di\"\>", 
   ",", "\<\"diagonalizableExperimentalCharPoly\"\>", ",", "\<\"diff\"\>", 
   ",", "\<\"diff$\"\>", ",", "\<\"dim\"\>", ",", "\<\"dimensionalFactor\"\>",
    ",", "\<\"dimensionalFactor$\"\>", ",", "\<\"dimensionFactor\"\>", 
   ",", "\<\"dimensionFactor$\"\>", ",", "\<\"dimMR\"\>", 
   ",", "\<\"dimMR$\"\>", ",", "\<\"dim$\"\>", 
   ",", "\<\"directionalDerivativeInputAlias\"\>", 
   ",", "\<\"directionalDerivativeSymbolName\"\>", 
   ",", "\<\"directLogTempMatrix\"\>", ",", "\<\"divisionRing\"\>", 
   ",", "\<\"divisionRingA\"\>", ",", "\<\"divisionRingA$\"\>", 
   ",", "\<\"divisionRingB\"\>", ",", "\<\"divisionRingB$\"\>", 
   ",", "\<\"divisionRingPrecomp\"\>", ",", "\<\"divisionRingPrecomp$\"\>", 
   ",", "\<\"divisionRing$\"\>", ",", "\<\"di$\"\>", ",", "\<\"do\"\>", 
   ",", "\<\"do1\"\>", ",", "\<\"do2\"\>", ",", "\<\"doinds\"\>", 
   ",", "\<\"doInds\"\>", ",", "\<\"doinds$\"\>", ",", "\<\"doInds$\"\>", 
   ",", "\<\"downIndexBase\"\>", ",", "\<\"do$\"\>", ",", "\<\"du\"\>", 
   ",", "\<\"du1\"\>", ",", "\<\"du1$\"\>", ",", "\<\"du2\"\>", 
   ",", "\<\"du2$\"\>", ",", "\<\"dummyInd\"\>", ",", "\<\"duu\"\>", 
   ",", "\<\"duu$\"\>", ",", "\<\"du$\"\>", ",", "\<\"dvar\"\>", 
   ",", "\<\"dvar$\"\>", ",", "\<\"dwnindlist\"\>", 
   ",", "\<\"dwnindlist$\"\>", ",", "\<\"dynkinFactor\"\>", 
   ",", "\<\"dynkinFactor$\"\>", ",", "\<\"d$\"\>", ",", "\<\"el\"\>", 
   ",", "\<\"elem\"\>", ",", "\<\"elementaryTPAlgebras\"\>", 
   ",", "\<\"elementaryVRep\"\>", ",", "\<\"elementsLaterToSolve\"\>", 
   ",", "\<\"elementsLaterToSolve$\"\>", ",", "\<\"elementsToMultiply\"\>", 
   ",", "\<\"elementsToMultiply$\"\>", ",", "\<\"el$\"\>", ",", "\<\"eq\"\>", 
   ",", "\<\"eq$\"\>", ",", "\<\"ex\"\>", ",", "\<\"exceptHeads\"\>", 
   ",", "\<\"exceptHeads$\"\>", ",", "\<\"exExCC\"\>", ",", "\<\"exExCC$\"\>",
    ",", "\<\"exists\"\>", ",", "\<\"exists$\"\>", ",", "\<\"exp\"\>", 
   ",", "\<\"expand\"\>", ",", "\<\"expandedBlade\"\>", 
   ",", "\<\"expandedBlade$\"\>", ",", "\<\"expandedExpr\"\>", 
   ",", "\<\"expandedExpr$\"\>", ",", "\<\"expandFunction\"\>", 
   ",", "\<\"expandFunction$\"\>", ",", "\<\"expandZasExp\"\>", 
   ",", "\<\"expansion\"\>", ",", "\<\"expansionOrder\"\>", 
   ",", "\<\"expansionOrder$\"\>", ",", "\<\"expansion$\"\>", 
   ",", "\<\"expArgs\"\>", ",", "\<\"expArgs$\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotentsAutomatic\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotentsAutomatic$\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents$\"\>", 
   ",", "\<\"expinv\"\>", ",", "\<\"expinv$\"\>", ",", "\<\"expOfMV\"\>", 
   ",", "\<\"expr\"\>", ",", "\<\"exprBeforeExpansion\"\>", 
   ",", "\<\"exprDiff\"\>", ",", "\<\"expression\"\>", 
   ",", "\<\"exprExpanded\"\>", ",", "\<\"exprExpanded$\"\>", 
   ",", "\<\"exprInput\"\>", ",", "\<\"exprInput$\"\>", 
   ",", "\<\"exprList\"\>", ",", "\<\"exprList$\"\>", ",", "\<\"exprs\"\>", 
   ",", "\<\"exprSeparatedByFreeCoeffs\"\>", 
   ",", "\<\"exprSeparatedByFreeCoeffs$\"\>", ",", "\<\"exprToFactor\"\>", 
   ",", "\<\"exprToFactor$\"\>", ",", "\<\"exprtotest\"\>", 
   ",", "\<\"exprtotest$\"\>", ",", "\<\"expr$\"\>", ",", "\<\"exp$\"\>", 
   ",", "\<\"extractedBasisFromTestMV\"\>", 
   ",", "\<\"extractedBasisFromTestMV$\"\>", ",", "\<\"extractRight\"\>", 
   ",", "\<\"extractRight$\"\>", ",", "\<\"ex$\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"factorIndex\"\>", ",", "\<\"factorIndex$\"\>", 
   ",", "\<\"factors\"\>", ",", "\<\"factors$\"\>", ",", "\<\"factorTerm\"\>",
    ",", "\<\"fc\"\>", ",", "\<\"fc$\"\>", ",", "\<\"fe\"\>", 
   ",", "\<\"feature\"\>", ",", "\<\"fe$\"\>", ",", "\<\"ff\"\>", 
   ",", "\<\"FFGGm1\"\>", ",", "\<\"FFGGm1$\"\>", ",", "\<\"fictiveVars\"\>", 
   ",", "\<\"fictiveVars$\"\>", ",", "\<\"field\"\>", 
   ",", "\<\"fieldFactor\"\>", ",", "\<\"fieldFactor$\"\>", 
   ",", "\<\"fieldOnly\"\>", ",", "\<\"fieldReplacementRules\"\>", 
   ",", "\<\"fieldReplacementRulesGradeInversed\"\>", 
   ",", "\<\"fieldReplacementRulesGradeInversed$\"\>", 
   ",", "\<\"fieldReplacementRules$\"\>", ",", "\<\"filterNumbers\"\>", 
   ",", "\<\"fin\"\>", ",", "\<\"FixProduct\"\>", ",", "\<\"fLimit\"\>", 
   ",", "\<\"fLimit$\"\>", ",", "\<\"formalMV\"\>", ",", "\<\"formalMV$\"\>", 
   ",", "\<\"formula\"\>", 
   ",", "\<\"formulaAndCoordinateRangeAssumptions\"\>", 
   ",", "\<\"formulaAndCoordinateRangeAssumptions$\"\>", 
   ",", "\<\"formulaBody\"\>", ",", "\<\"formulaBody$\"\>", 
   ",", "\<\"formula$\"\>", ",", "\<\"found\"\>", 
   ",", "\<\"foundAlgebras\"\>", ",", "\<\"foundAlgebras$\"\>", 
   ",", "\<\"foundChNames\"\>", ",", "\<\"foundChNames$\"\>", 
   ",", "\<\"found$\"\>", ",", "\<\"freeB\"\>", ",", "\<\"freeB$\"\>", 
   ",", "\<\"freeM\"\>", ",", "\<\"freeMV\"\>", ",", "\<\"freeMV$\"\>", 
   ",", "\<\"freeM$\"\>", ",", "\<\"freeVars\"\>", ",", "\<\"freeVars$\"\>", 
   ",", "\<\"fullBase\"\>", ",", "\<\"fullBasisRules\"\>", 
   ",", "\<\"fullBasisRules$\"\>", ",", "\<\"fun\"\>", 
   ",", "\<\"funcRules\"\>", ",", "\<\"funcRules$\"\>", 
   ",", "\<\"functionOfMVCoordinate\"\>", 
   ",", "\<\"functionOfMVCoordinateFree\"\>", 
   ",", "\<\"functionShortcutList\"\>", ",", "\<\"funlambda\"\>", 
   ",", "\<\"funlambda$\"\>", ",", "\<\"f$\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"gaAdjointForZassenhaus\"\>", 
   ",", "\<\"gaAlwaysTestInputIndexOrdering\"\>", 
   ",", "\<\"gaAssociationRepresentationClean\"\>", 
   ",", "\<\"gaChristoffelSymbolsOfSecondKind\"\>", 
   ",", "\<\"gaChristoffelSymbolsOfSecondKind$\"\>", 
   ",", "\<\"gaCliffordConjugateGrades\"\>", ",", "\<\"gaCom\"\>", 
   ",", "\<\"gaCompleteBellPolynomial\"\>", 
   ",", "\<\"gaDefaultMatrixRepresentationData\"\>", 
   ",", "\<\"gaDefineExpandedPairProduct\"\>", 
   ",", "\<\"gaDefineOrthonormalBasisMain\"\>", 
   ",", "\<\"gaDirectionalDerivativeInputAlias\"\>", 
   ",", "\<\"gaDirectionalDerivativeSymbolName\"\>", 
   ",", "\<\"gaElementaryAlgebraToMatrixRepresentationRules\"\>", 
   ",", "\<\"gaff\"\>", 
   ",", "\<\"gaFromMatrixRepresentationSparseNoQuaternions\"\>", 
   ",", "\<\"gaGetGrade\"\>", ",", "\<\"gaGetIndex\"\>", 
   ",", "\<\"gaGradeInverseGrades\"\>", 
   ",", "\<\"gaInternalMultivectorRepresentation\"\>", 
   ",", "\<\"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ\"\>", 
   ",", "\<\"gaMemoizeBasisElementProduct\"\>", 
   ",", "\<\"gaOrthonormalBasisSymbolInputAlias\"\>", 
   ",", "\<\"gaOrthonormalBasisSymbolName\"\>", ",", "\<\"gap\"\>", 
   ",", "\<\"gaPrecomputedPairProduct\"\>", ",", "\<\"gaPureLinearity\"\>", 
   ",", "\<\"gap$\"\>", ",", "\<\"gaq\"\>", ",", "\<\"gaq$\"\>", 
   ",", "\<\"gar\"\>", ",", "\<\"gaRA\"\>", ",", "\<\"gaRA$\"\>", 
   ",", "\<\"gaRCS\"\>", ",", "\<\"gaRCS$\"\>", 
   ",", "\<\"gaReverseGrades\"\>", ",", "\<\"gaRunninOrdering\"\>", 
   ",", "\<\"gar$\"\>", ",", "\<\"gaTensorProductI\"\>", 
   ",", "\<\"gaValidVersionQ\"\>", ",", "\<\"gaZeroSignatureIndexList\"\>", 
   ",", "\<\"gblt\"\>", ",", "\<\"gblt$\"\>", 
   ",", "\<\"generalDefaultMatrixRepresentationSetting\"\>", 
   ",", "\<\"generalMV\"\>", ",", "\<\"generalMVexpanded\"\>", 
   ",", "\<\"generalMVexpanded$\"\>", ",", "\<\"generalOpts\"\>", 
   ",", "\<\"generalOpts$\"\>", ",", "\<\"generateCommutatorForm\"\>", 
   ",", "\<\"genMVb\"\>", ",", "\<\"genMVb$\"\>", ",", "\<\"genParam\"\>", 
   ",", "\<\"genParam$\"\>", ",", "\<\"genVec\"\>", ",", "\<\"genVec$\"\>", 
   ",", "\<\"getBase\"\>", ",", "\<\"getGradeHelp\"\>", 
   ",", "\<\"getRCHFactor\"\>", 
   ",", "\<\"globalpickNextColorMessageCounter\"\>", ",", "\<\"gp\"\>", 
   ",", "\<\"gp$\"\>", ",", "\<\"gr\"\>", ",", "\<\"grade\"\>", 
   ",", "\<\"gradeList\"\>", ",", "\<\"gradeParityCheck\"\>", 
   ",", "\<\"grades\"\>", ",", "\<\"grades$\"\>", ",", "\<\"grade$\"\>", 
   ",", "\<\"gro\"\>", ",", "\<\"grOnly\"\>", ",", "\<\"groupByGrade\"\>", 
   ",", "\<\"grouping\"\>", ",", "\<\"grouping$\"\>", ",", "\<\"gro$\"\>", 
   ",", "\<\"grRequested\"\>", ",", "\<\"gr$\"\>", ",", "\<\"g$\"\>", 
   ",", "\<\"h\"\>", ",", "\<\"h14\"\>", ",", "\<\"h14$\"\>", 
   ",", "\<\"h4h4\"\>", ",", "\<\"h4h4$\"\>", ",", "\<\"half1\"\>", 
   ",", "\<\"half1$\"\>", ",", "\<\"hcn\"\>", ",", "\<\"hcn$\"\>", 
   ",", "\<\"hd\"\>", ",", "\<\"hd$\"\>", ",", "\<\"helpD\"\>", 
   ",", "\<\"helpDInverse\"\>", ",", "\<\"helpDInverse$\"\>", 
   ",", "\<\"helpD$\"\>", ",", "\<\"helpV\"\>", ",", "\<\"helpVScalars\"\>", 
   ",", "\<\"helpVScalars$\"\>", ",", "\<\"helpV$\"\>", ",", "\<\"hh\"\>", 
   ",", "\<\"hh$\"\>", ",", "\<\"homogeneusElements\"\>", 
   ",", "\<\"homogeneusElements$\"\>", ",", "\<\"HyperbolicUnit\"\>", 
   ",", "\<\"hyperbolicUnits\"\>", ",", "\<\"hyperbolicUnits$\"\>", 
   ",", "\<\"h$\"\>", ",", "\<\"i\"\>", ",", "\<\"i1\"\>", ",", "\<\"i1$\"\>",
    ",", "\<\"i2\"\>", ",", "\<\"i2$\"\>", ",", "\<\"id\"\>", 
   ",", "\<\"idealBasis\"\>", ",", "\<\"idealBasisA\"\>", 
   ",", "\<\"idealBasisAUnordered\"\>", ",", "\<\"idealBasisAUnordered$\"\>", 
   ",", "\<\"idealBasisA$\"\>", ",", "\<\"idealBasisB\"\>", 
   ",", "\<\"idealBasisBUnordered\"\>", ",", "\<\"idealBasisBUnordered$\"\>", 
   ",", "\<\"idealBasisB$\"\>", ",", "\<\"idealBasis$\"\>", 
   ",", "\<\"idempotent\"\>", ",", "\<\"idempotentList\"\>", 
   ",", "\<\"idempotentList$\"\>", ",", "\<\"idempotent$\"\>", 
   ",", "\<\"idMatrix\"\>", ",", "\<\"idMatrix$\"\>", ",", "\<\"id$\"\>", 
   ",", "\<\"ifPrint\"\>", ",", "\<\"ignoreme\"\>", ",", "\<\"ignoreMe\"\>", 
   ",", "\<\"ignoreme$\"\>", ",", "\<\"ignoreMe$\"\>", ",", "\<\"iI\"\>", 
   ",", "\<\"imaginaryIReplacement\"\>", 
   ",", "\<\"imaginaryIReplacement$\"\>", ",", "\<\"imaginaryUnits\"\>", 
   ",", "\<\"imaginaryUnits$\"\>", ",", "\<\"in\"\>", ",", "\<\"inc\"\>", 
   ",", "\<\"includeExplicitOptionValues\"\>", 
   ",", "\<\"includeExplicitOptionValues$\"\>", ",", "\<\"includeFree\"\>", 
   ",", "\<\"includeFree$\"\>", ",", "\<\"inc$\"\>", ",", "\<\"ind\"\>", 
   ",", "\<\"ind1\"\>", ",", "\<\"ind1$\"\>", ",", "\<\"ind2\"\>", 
   ",", "\<\"ind2$\"\>", ",", "\<\"ind3\"\>", ",", "\<\"ind3$\"\>", 
   ",", "\<\"indAlgCoord\"\>", ",", "\<\"indAlgCoordGeneral\"\>", 
   ",", "\<\"indAlgCoordGeneral$\"\>", ",", "\<\"indAlgCoord$\"\>", 
   ",", "\<\"indAlgMark\"\>", ",", "\<\"indAlgMark$\"\>", ",", "\<\"indd\"\>",
    ",", "\<\"indD\"\>", ",", "\<\"indd$\"\>", ",", "\<\"indD$\"\>", 
   ",", "\<\"index2Repl\"\>", ",", "\<\"index2Repl$\"\>", 
   ",", "\<\"indexCases\"\>", ",", "\<\"indexCases$\"\>", 
   ",", "\<\"indexList\"\>", ",", "\<\"indexList$\"\>", 
   ",", "\<\"indexPairs\"\>", ",", "\<\"indexPairs$\"\>", 
   ",", "\<\"indexRange\"\>", ",", "\<\"indexRange$\"\>", 
   ",", "\<\"indices\"\>", ",", "\<\"indices$\"\>", ",", "\<\"indown\"\>", 
   ",", "\<\"indown$\"\>", ",", "\<\"indRange\"\>", ",", "\<\"indRange$\"\>", 
   ",", "\<\"indSet\"\>", ",", "\<\"indSetReplRul\"\>", 
   ",", "\<\"indToList\"\>", ",", "\<\"indToLower\"\>", 
   ",", "\<\"indToLower$\"\>", ",", "\<\"indu\"\>", ",", "\<\"indU\"\>", 
   ",", "\<\"indu$\"\>", ",", "\<\"indU$\"\>", ",", "\<\"ind$\"\>", 
   ",", "\<\"inEx\"\>", ",", "\<\"inEx$\"\>", ",", "\<\"inf0\"\>", 
   ",", "\<\"infn\"\>", ",", "\<\"initialSeq\"\>", ",", "\<\"initialSeq$\"\>",
    ",", "\<\"inpOpt\"\>", ",", "\<\"inpOpt$\"\>", 
   ",", "\<\"intesectionIJ\"\>", ",", "\<\"intesectionIJ$\"\>", 
   ",", "\<\"inup\"\>", ",", "\<\"inup$\"\>", 
   ",", "\<\"invdeglexIndexList\"\>", ",", "\<\"inversedMV\"\>", 
   ",", "\<\"inversedMV$\"\>", ",", "\<\"inversedRules\"\>", 
   ",", "\<\"inversedTheBlade\"\>", ",", "\<\"inversedTheBlade$\"\>", 
   ",", "\<\"inverseKillingMetric\"\>", ",", "\<\"inverseKillingMetric$\"\>", 
   ",", "\<\"inverseMetric\"\>", ",", "\<\"inverseMetricMatrix\"\>", 
   ",", "\<\"inverseMetricMatrix$\"\>", ",", "\<\"inverseMetric$\"\>", 
   ",", "\<\"inversePseudoscalar\"\>", ",", "\<\"inversePseudoscalar$\"\>", 
   ",", "\<\"involutionDet\"\>", ",", "\<\"involutionInverse\"\>", 
   ",", "\<\"invz\"\>", ",", "\<\"invz$\"\>", ",", "\<\"in$\"\>", 
   ",", "\<\"iP\"\>", ",", "\<\"ipart\"\>", ",", "\<\"iP$\"\>", 
   ",", "\<\"isomorphismPreRules\"\>", ",", "\<\"isomorphismRules\"\>", 
   ",", "\<\"iterators\"\>", ",", "\<\"iterators$\"\>", 
   ",", "\<\"iterRange\"\>", ",", "\<\"iterRange$\"\>", ",", "\<\"i$\"\>", 
   ",", "\<\"j\"\>", ",", "\<\"j1\"\>", ",", "\<\"j1$\"\>", ",", "\<\"j2\"\>",
    ",", "\<\"j2$\"\>", ",", "\<\"jJ\"\>", ",", "\<\"jordanFactor\"\>", 
   ",", "\<\"jordanFactor$\"\>", ",", "\<\"j$\"\>", ",", "\<\"k\"\>", 
   ",", "\<\"keyMV\"\>", ",", "\<\"keyMV$\"\>", ",", "\<\"keyReplace\"\>", 
   ",", "\<\"keyReplaceAndSort\"\>", ",", "\<\"keysB\"\>", ",", "\<\"kM2\"\>",
    ",", "\<\"kM2$\"\>", ",", "\<\"knownfactor\"\>", 
   ",", "\<\"knownFactor\"\>", ",", "\<\"knownfactor$\"\>", 
   ",", "\<\"knownFactor$\"\>", ",", "\<\"kP2\"\>", ",", "\<\"kP2$\"\>", 
   ",", "\<\"k$\"\>", ",", "\<\"l\"\>", ",", "\<\"lambda\"\>", 
   ",", "\<\"lambda$\"\>", ",", "\<\"largestAbsCoef\"\>", 
   ",", "\<\"largestAbsCoef$\"\>", ",", "\<\"lastMVProduct\"\>", 
   ",", "\<\"lastMVProduct$\"\>", ",", "\<\"leftideal\"\>", 
   ",", "\<\"leftIdeal\"\>", ",", "\<\"leftIdeal$\"\>", ",", "\<\"leftMV\"\>",
    ",", "\<\"leftMV$\"\>", ",", "\<\"len\"\>", ",", "\<\"lena1\"\>", 
   ",", "\<\"lena1$\"\>", ",", "\<\"lena2\"\>", ",", "\<\"lena2$\"\>", 
   ",", "\<\"lengthOfDivisionRing\"\>", ",", "\<\"lengthOfDivisionRing$\"\>", 
   ",", "\<\"lengthOfIdealBasis\"\>", ",", "\<\"lengthOfIdealBasis$\"\>", 
   ",", "\<\"lengthOfMutuallyAnihilatingIdempotents\"\>", 
   ",", "\<\"lengthOfMutuallyAnihilatingIdempotents$\"\>", 
   ",", "\<\"len$\"\>", ",", "\<\"lhs\"\>", ",", "\<\"lhs$\"\>", 
   ",", "\<\"log\"\>", ",", "\<\"logOfMV\"\>", ",", "\<\"logTempMatrix\"\>", 
   ",", "\<\"log$\"\>", ",", "\<\"ls\"\>", ",", "\<\"m\"\>", 
   ",", "\<\"m2VoB\"\>", ",", "\<\"m2VoB$\"\>", 
   ",", "\<\"makeContractionPairsForVersorBlade\"\>", 
   ",", "\<\"makeProductTerm\"\>", ",", "\<\"makeReplRule\"\>", 
   ",", "\<\"makeRule\"\>", ",", "\<\"makeTermForBlade2Versor\"\>", 
   ",", "\<\"makeTermForVersor2Blade\"\>", ",", "\<\"manifoldName\"\>", 
   ",", "\<\"manifoldName$\"\>", ",", "\<\"mark\"\>", ",", "\<\"markEx\"\>", 
   ",", "\<\"markEx$\"\>", ",", "\<\"marks\"\>", ",", "\<\"marks$\"\>", 
   ",", "\<\"mark$\"\>", ",", "\<\"mat\"\>", ",", "\<\"matrix\"\>", 
   ",", "\<\"matrixMinimalPolynomialPrimitive\"\>", 
   ",", "\<\"matrixOuterProductOrder\"\>", 
   ",", "\<\"matrixOuterProductOrder$\"\>", 
   ",", "\<\"matrixRepresentation\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsA\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsANorepl\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsANorepl$\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsA$\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsB\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsB$\"\>", ",", "\<\"matrProd\"\>", 
   ",", "\<\"matrProd$\"\>", ",", "\<\"mat$\"\>", ",", "\<\"max\"\>", 
   ",", "\<\"maxCoef\"\>", ",", "\<\"maxCoef$\"\>", ",", "\<\"maxGrade\"\>", 
   ",", "\<\"maxGrade$\"\>", ",", "\<\"maxiter\"\>", ",", "\<\"maxIter\"\>", 
   ",", "\<\"maxIter$\"\>", ",", "\<\"maxOrder\"\>", ",", "\<\"maxOrder$\"\>",
    ",", "\<\"maxPolyDegree\"\>", ",", "\<\"maxPolyDegree$\"\>", 
   ",", "\<\"max$\"\>", ",", "\<\"mBsPlusdetSqrt\"\>", 
   ",", "\<\"mBsPlusdetSqrt1\"\>", ",", "\<\"mBsPlusdetSqrt1$\"\>", 
   ",", "\<\"mBsPlusdetSqrt$\"\>", ",", "\<\"memoizeProducts\"\>", 
   ",", "\<\"method\"\>", ",", "\<\"methodOpts\"\>", 
   ",", "\<\"methodOpts$\"\>", ",", "\<\"method$\"\>", 
   ",", "\<\"metricMatrix\"\>", ",", "\<\"metricMatrix$\"\>", 
   ",", "\<\"mnm\"\>", ",", "\<\"mnm$\"\>", ",", "\<\"msg\"\>", 
   ",", "\<\"msgHelp\"\>", ",", "\<\"msgHelp$\"\>", ",", "\<\"msg$\"\>", 
   ",", "\<\"mult\"\>", ",", "\<\"multIndex\"\>", ",", "\<\"multIndex$\"\>", 
   ",", "\<\"multipleApplyQuaternionIsomorphismRules\"\>", 
   ",", "\<\"mult$\"\>", ",", "\<\"mutuallyAnihilatingIdempotents\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotentsFull\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotentsFull$\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotents$\"\>", ",", "\<\"mv\"\>", 
   ",", "\<\"mvA\"\>", ",", "\<\"mvAntisymmetricProductSignatureMapC\"\>", 
   ",", "\<\"mvB\"\>", ",", "\<\"mvC\"\>", ",", "\<\"mvd\"\>", 
   ",", "\<\"mvdHelp\"\>", ",", "\<\"mvDHelp\"\>", 
   ",", "\<\"mvDownUpToAssociationRules\"\>", ",", "\<\"mvd$\"\>", 
   ",", "\<\"mvF\"\>", ",", "\<\"mvF$\"\>", ",", "\<\"mvIndDirection\"\>", 
   ",", "\<\"mvIndDirection$\"\>", ",", "\<\"mvIndExpr\"\>", 
   ",", "\<\"mvIndExpr$\"\>", 
   ",", "\<\"mvIndexToBinaryLikeRepresentationC\"\>", 
   ",", "\<\"mvInvDegLexSortedIndexList\"\>", ",", "\<\"mvIPmOP\"\>", 
   ",", "\<\"mvIPmOP0\"\>", ",", "\<\"mvIPmOP0$\"\>", ",", "\<\"mvIPmOP$\"\>",
    ",", "\<\"mvIPpOP\"\>", ",", "\<\"mvIPpOP0\"\>", ",", "\<\"mvIPpOP0$\"\>",
    ",", "\<\"mvIPpOP$\"\>", ",", "\<\"mvMu\"\>", ",", "\<\"mvMuS\"\>", 
   ",", "\<\"mvName\"\>", ",", "\<\"mvName$\"\>", 
   ",", "\<\"mvNonCommutativeDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvLexC\"\>", 
   ",", "\<\"mvNonCommutativeInvRevLexC\"\>", 
   ",", "\<\"mvNonCommutativeLexC\"\>", 
   ",", "\<\"mvNonCommutativeRevLexC\"\>", ",", "\<\"mvNorm\"\>", 
   ",", "\<\"mvNorm1\"\>", ",", "\<\"mvNorm12\"\>", ",", "\<\"mvNorm12$\"\>", 
   ",", "\<\"mvNorm1$\"\>", ",", "\<\"mvNorm$\"\>", 
   ",", "\<\"mvOfDualTransform\"\>", ",", "\<\"mvOfDualTransformExpanded\"\>",
    ",", "\<\"mvOfDualTransformExpanded$\"\>", 
   ",", "\<\"mvOfDualTransform$\"\>", ",", "\<\"mvProductSignatureMapC\"\>", 
   ",", "\<\"mvSetSymmetricDifference\"\>", 
   ",", "\<\"mvSignatureOfIncreasingPermutation\"\>", ",", "\<\"mv$\"\>", 
   ",", "\<\"myexressions\"\>", ",", "\<\"myStrings\"\>", 
   ",", "\<\"mySum\"\>", ",", "\<\"mySum$\"\>", ",", "\<\"myTable\"\>", 
   ",", "\<\"myTable$\"\>", ",", "\<\"myUnitize\"\>", ",", "\<\"m$\"\>", 
   ",", "\<\"n\"\>", ",", "\<\"name\"\>", ",", "\<\"name$\"\>", 
   ",", "\<\"negativeQ\"\>", ",", "\<\"nestedQuaternionIsomorphismRule\"\>", 
   ",", "\<\"nestNumber\"\>", ",", "\<\"nestNumber$\"\>", 
   ",", "\<\"newAl\"\>", ",", "\<\"newAl$\"\>", ",", "\<\"newColor\"\>", 
   ",", "\<\"newColor$\"\>", ",", "\<\"newGenOpts\"\>", 
   ",", "\<\"newGenOpts$\"\>", ",", "\<\"newpair\"\>", 
   ",", "\<\"newRange\"\>", ",", "\<\"newRange$\"\>", ",", "\<\"newRep\"\>", 
   ",", "\<\"newRep$\"\>", ",", "\<\"nextAccept\"\>", ",", "\<\"no\"\>", 
   ",", "\<\"nonCommutingQuaternionLike\"\>", 
   ",", "\<\"nonCommutingQuaternionLike$\"\>", 
   ",", "\<\"nonCommutingWithFirstList\"\>", 
   ",", "\<\"nonCommutingWithFirstList$\"\>", ",", "\<\"nonNegativeQ\"\>", 
   ",", "\<\"nonPositiveQ\"\>", ",", "\<\"nonQuaternions\"\>", 
   ",", "\<\"nonQuaternions$\"\>", ",", "\<\"nonScalarMatrixPart\"\>", 
   ",", "\<\"nonScalarMatrixPart$\"\>", ",", "\<\"nonScalars\"\>", 
   ",", "\<\"nonScalarsFin\"\>", ",", "\<\"nonScalarsFin$\"\>", 
   ",", "\<\"nonScalars$\"\>", ",", "\<\"nontrivialEntries\"\>", 
   ",", "\<\"nontrivialEntries$\"\>", ",", "\<\"nonzeroQ\"\>", 
   ",", "\<\"normalizedBlade\"\>", ",", "\<\"normalizedBlade$\"\>", 
   ",", "\<\"normalToSurface\"\>", ",", "\<\"normalToSurface$\"\>", 
   ",", "\<\"normalVector\"\>", ",", "\<\"normalVectorGraphicsList\"\>", 
   ",", "\<\"normalVectorGraphicsList$\"\>", 
   ",", "\<\"normalVectorPointList\"\>", 
   ",", "\<\"normalVectorPointList$\"\>", 
   ",", "\<\"normalVectorStyleList\"\>", 
   ",", "\<\"normalVectorStyleList$\"\>", ",", "\<\"normalVector$\"\>", 
   ",", "\<\"notOption\"\>", ",", "\<\"nRange\"\>", ",", "\<\"nRange$\"\>", 
   ",", "\<\"nsq\"\>", ",", "\<\"nsq$\"\>", ",", "\<\"nu\"\>", 
   ",", "\<\"nullSpace\"\>", ",", "\<\"nullSpaceCandidateVectors\"\>", 
   ",", "\<\"nullSpaceCandidateVectors$\"\>", ",", "\<\"nullSpaceCoeffs\"\>", 
   ",", "\<\"nullSpaceCoeffs$\"\>", ",", "\<\"nullSpace$\"\>", 
   ",", "\<\"num\"\>", ",", "\<\"numberConjugate\"\>", 
   ",", "\<\"numberConjugate$\"\>", ",", "\<\"numberOfPatches\"\>", 
   ",", "\<\"numberOfPatches$\"\>", 
   ",", "\<\"numberOfPrimitiveIdempotents\"\>", ",", "\<\"numerat\"\>", 
   ",", "\<\"numerator\"\>", ",", "\<\"numeratorAbstract\"\>", 
   ",", "\<\"numeratorAbstract$\"\>", 
   ",", "\<\"numeratorNotZeroDenominatorZeroQ\"\>", ",", "\<\"numerator$\"\>",
    ",", "\<\"numerat$\"\>", ",", "\<\"num$\"\>", ",", "\<\"nu$\"\>", 
   ",", "\<\"n$\"\>", ",", "\<\"o\"\>", ",", "\<\"oldMatrixRep\"\>", 
   ",", "\<\"oldMatrixRep$\"\>", ",", "\<\"omitGrades\"\>", 
   ",", "\<\"omitGrades$\"\>", ",", "\<\"oneGradeRule\"\>", 
   ",", "\<\"oneStepCliffordDecompose\"\>", ",", "\<\"op\"\>", 
   ",", "\<\"oP\"\>", ",", "\<\"opar\"\>", ",", "\<\"opar$\"\>", 
   ",", "\<\"opConj\"\>", ",", "\<\"opConj$\"\>", ",", "\<\"opElement\"\>", 
   ",", "\<\"opElement$\"\>", ",", "\<\"opHC\"\>", ",", "\<\"opHC$\"\>", 
   ",", "\<\"opMatrix\"\>", ",", "\<\"opMatrix$\"\>", 
   ",", "\<\"opProductPairExpand\"\>", ",", "\<\"opProductPairExpand$\"\>", 
   ",", "\<\"optArcCoshOfMV\"\>", ",", "\<\"optArcCoshOfMV$\"\>", 
   ",", "\<\"optArcCosOfMV\"\>", ",", "\<\"optArcCosOfMV$\"\>", 
   ",", "\<\"optArcSinhOfMV\"\>", ",", "\<\"optArcSinhOfMV$\"\>", 
   ",", "\<\"optArcSinOfMV\"\>", ",", "\<\"optArcSinOfMV$\"\>", 
   ",", "\<\"optDefault\"\>", ",", "\<\"optDefault$\"\>", 
   ",", "\<\"optExpOfMV\"\>", ",", "\<\"optExpOfMV$\"\>", 
   ",", "\<\"optimizedMultiplicationOrder\"\>", 
   ",", "\<\"optimizedMultiplicationOrder$\"\>", ",", "\<\"optionName\"\>", 
   ",", "\<\"optionValue\"\>", ",", "\<\"optLogOfMV\"\>", 
   ",", "\<\"optLogOfMV$\"\>", ",", "\<\"opts\"\>", 
   ",", "\<\"optsNormalopts\"\>", ",", "\<\"optsPass\"\>", 
   ",", "\<\"optsPass$\"\>", ",", "\<\"optSqrtOfMV\"\>", 
   ",", "\<\"optSqrtOfMV$\"\>", ",", "\<\"optsTangentopts\"\>", 
   ",", "\<\"opts$\"\>", ",", "\<\"op$\"\>", ",", "\<\"oP$\"\>", 
   ",", "\<\"ord\"\>", ",", "\<\"order\"\>", 
   ",", "\<\"orderedQCommutative\"\>", ",", "\<\"orderedQNoncommutative\"\>", 
   ",", "\<\"ordering\"\>", ",", "\<\"order$\"\>", ",", "\<\"ord$\"\>", 
   ",", "\<\"orthogonalBaseElements\"\>", 
   ",", "\<\"orthogonalBaseElements$\"\>", 
   ",", "\<\"orthogonalBasisElements\"\>", 
   ",", "\<\"orthogonalizeGramSchmidt\"\>", 
   ",", "\<\"orthogonalizeMetric\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputA\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputA$\"\>", 
   ",", "\<\"orthonormalBasisSymbolInputAlias\"\>", 
   ",", "\<\"orthonormalBasisSymbolName\"\>", ",", "\<\"other\"\>", 
   ",", "\<\"other1\"\>", ",", "\<\"other1$\"\>", ",", "\<\"other2\"\>", 
   ",", "\<\"other2$\"\>", ",", "\<\"other$\"\>", ",", "\<\"outerCtx\"\>", 
   ",", "\<\"outerP\"\>", ",", "\<\"outerProductOfDownVectors\"\>", 
   ",", "\<\"outerProductOfDownVectors$\"\>", ",", "\<\"outputForm\"\>", 
   ",", "\<\"outputForm$\"\>", ",", "\<\"outputVectors\"\>", 
   ",", "\<\"outputVectors$\"\>", ",", "\<\"o$\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"pair\"\>", ",", "\<\"pairs\"\>", ",", "\<\"param\"\>", 
   ",", "\<\"parametersRules\"\>", ",", "\<\"paramName\"\>", 
   ",", "\<\"paramName$\"\>", ",", "\<\"param$\"\>", 
   ",", "\<\"partWithDerivativeArgument\"\>", ",", "\<\"patchData\"\>", 
   ",", "\<\"patchData$\"\>", ",", "\<\"patchLength\"\>", 
   ",", "\<\"patchLength$\"\>", ",", "\<\"patchName\"\>", 
   ",", "\<\"patchName$\"\>", ",", "\<\"pbMSquared\"\>", 
   ",", "\<\"pbMSquared$\"\>", ",", "\<\"pbPSquared\"\>", 
   ",", "\<\"pbPSquared$\"\>", ",", "\<\"pBsMinusdetSqrt\"\>", 
   ",", "\<\"pBsMinusdetSqrt1\"\>", ",", "\<\"pBsMinusdetSqrt1$\"\>", 
   ",", "\<\"pBsMinusdetSqrt$\"\>", ",", "\<\"pBsPlusdetSqrt\"\>", 
   ",", "\<\"pBsPlusdetSqrt1\"\>", ",", "\<\"pBsPlusdetSqrt1$\"\>", 
   ",", "\<\"pBsPlusdetSqrt$\"\>", ",", "\<\"pfd\"\>", 
   ",", "\<\"pfdProto\"\>", ",", "\<\"pfdProto$\"\>", ",", "\<\"pfd$\"\>", 
   ",", "\<\"pfi\"\>", ",", "\<\"pfiProto\"\>", ",", "\<\"pfiProto$\"\>", 
   ",", "\<\"pfi$\"\>", ",", "\<\"phaseFactorBlade2Versor\"\>", 
   ",", "\<\"phaseFactorVersor2Blade\"\>", ",", "\<\"phaseVersorBlade\"\>", 
   ",", "\<\"pickNextColor\"\>", ",", "\<\"pickNextRandomColor\"\>", 
   ",", "\<\"playMV\"\>", ",", "\<\"playMV$\"\>", ",", "\<\"pMinusQMod8\"\>", 
   ",", "\<\"pMinusQMod8$\"\>", ",", "\<\"po\"\>", ",", "\<\"poEx\"\>", 
   ",", "\<\"poEx$\"\>", ",", "\<\"point\"\>", ",", "\<\"point$\"\>", 
   ",", "\<\"positiveBlades\"\>", ",", "\<\"positiveBlades$\"\>", 
   ",", "\<\"positiveQ\"\>", ",", "\<\"possiblyBadSols\"\>", 
   ",", "\<\"possiblyBadSols$\"\>", ",", "\<\"po$\"\>", ",", "\<\"pp\"\>", 
   ",", "\<\"precomputedProductComponents\"\>", 
   ",", "\<\"precomputedProductComponents$\"\>", 
   ",", "\<\"predefinedColorList\"\>", ",", "\<\"preReadMessage\"\>", 
   ",", "\<\"prevRules\"\>", ",", "\<\"prevRules$\"\>", 
   ",", "\<\"printDetails\"\>", ",", "\<\"printSqrtDetail\"\>", 
   ",", "\<\"privateCtx\"\>", ",", "\<\"prod\"\>", ",", "\<\"prodExpr\"\>", 
   ",", "\<\"prodExpr$\"\>", ",", "\<\"productAlgebra\"\>", 
   ",", "\<\"productIndex\"\>", ",", "\<\"productMatrices\"\>", 
   ",", "\<\"productMatrices$\"\>", ",", "\<\"productSignatureMap\"\>", 
   ",", "\<\"productsOfFound\"\>", ",", "\<\"productsOfFound$\"\>", 
   ",", "\<\"prod$\"\>", ",", "\<\"propertyRequires\"\>", 
   ",", "\<\"propertyRequires$\"\>", ",", "\<\"prototypes\"\>", 
   ",", "\<\"prototypes$\"\>", ",", "\<\"ps\"\>", ",", "\<\"pseudoscalar\"\>",
    ",", "\<\"pseudoscalarMagnitude\"\>", 
   ",", "\<\"pseudoscalarMagnitude$\"\>", ",", "\<\"pseudoscalar$\"\>", 
   ",", "\<\"pseudoTerm\"\>", ",", "\<\"pseudoTerm$\"\>", ",", "\<\"psM\"\>", 
   ",", "\<\"psM$\"\>", ",", "\<\"psP\"\>", ",", "\<\"psP$\"\>", 
   ",", "\<\"ps$\"\>", ",", "\<\"pt\"\>", ",", "\<\"ptr\"\>", 
   ",", "\<\"ptr$\"\>", ",", "\<\"pureMV\"\>", ",", "\<\"pureMV$\"\>", 
   ",", "\<\"p$\"\>", ",", "\<\"q\"\>", ",", "\<\"q2\"\>", ",", "\<\"q2$\"\>",
    ",", "\<\"qp\"\>", ",", "\<\"qr\"\>", ",", "\<\"qthpower\"\>", 
   ",", "\<\"qthpower$\"\>", ",", "\<\"qu\"\>", 
   ",", "\<\"quaternionFreeMatrix\"\>", ",", "\<\"quaternionFreeMatrix$\"\>", 
   ",", "\<\"quaternionReplacement\"\>", 
   ",", "\<\"quaternionReplacement$\"\>", ",", "\<\"quaternionUnits\"\>", 
   ",", "\<\"quaternionUnits$\"\>", ",", "\<\"quiet\"\>", 
   ",", "\<\"quiet$\"\>", ",", "\<\"qu$\"\>", ",", "\<\"q$\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"ra\"\>", ",", "\<\"raEx\"\>", 
   ",", "\<\"raEx$\"\>", ",", "\<\"randomJordanBlock\"\>", 
   ",", "\<\"rang\"\>", ",", "\<\"range\"\>", ",", "\<\"range1\"\>", 
   ",", "\<\"range2\"\>", ",", "\<\"rawAnswer\"\>", ",", "\<\"rawAnswer$\"\>",
    ",", "\<\"rawData\"\>", ",", "\<\"rawData$\"\>", ",", "\<\"ra$\"\>", 
   ",", "\<\"realRootPositions\"\>", ",", "\<\"realRootPositions$\"\>", 
   ",", "\<\"realRoots\"\>", ",", "\<\"realRoots$\"\>", 
   ",", "\<\"realTest\"\>", ",", "\<\"realTest$\"\>", 
   ",", "\<\"reciprocalBase\"\>", ",", "\<\"reciprocalBase$\"\>", 
   ",", "\<\"reciprocalVectors\"\>", ",", "\<\"reciprocalVectorsRules\"\>", 
   ",", "\<\"reciprocalVectorsRules$\"\>", ",", "\<\"reciprocalVectors$\"\>", 
   ",", "\<\"reciprocVec\"\>", ",", "\<\"reciprocVec$\"\>", 
   ",", "\<\"recoprocalBaseBivectors\"\>", ",", "\<\"reductionAlgebras\"\>", 
   ",", "\<\"reductionInstructionNo00\"\>", 
   ",", "\<\"reductionInstructionNo00$\"\>", ",", "\<\"reductionOrder\"\>", 
   ",", "\<\"reductionOrder$\"\>", ",", "\<\"relevantPairs\"\>", 
   ",", "\<\"relevantPairs$\"\>", ",", "\<\"rem\"\>", 
   ",", "\<\"remaining\"\>", ",", "\<\"remaining$\"\>", 
   ",", "\<\"removeElems\"\>", ",", "\<\"removeElems$\"\>", 
   ",", "\<\"removeFunctionRules\"\>", 
   ",", "\<\"removeProductsOfElements\"\>", ",", "\<\"removeVectorList\"\>", 
   ",", "\<\"removeVectorList$\"\>", ",", "\<\"rep\"\>", 
   ",", "\<\"replaceFieldElement\"\>", ",", "\<\"replaceImaginary\"\>", 
   ",", "\<\"replaceImaginary$\"\>", ",", "\<\"replaceTensorProducts\"\>", 
   ",", "\<\"replaceTensorProducts$\"\>", ",", "\<\"replRules\"\>", 
   ",", "\<\"replRules$\"\>", ",", "\<\"repMatrix\"\>", 
   ",", "\<\"repMatrix$\"\>", ",", "\<\"repNames\"\>", 
   ",", "\<\"repNames$\"\>", ",", "\<\"repRules\"\>", 
   ",", "\<\"repRules$\"\>", ",", "\<\"repRuls\"\>", ",", "\<\"repRuls$\"\>", 
   ",", "\<\"rep$\"\>", ",", "\<\"requiredVersion\"\>", 
   ",", "\<\"requireOrdering\"\>", ",", "\<\"res\"\>", 
   ",", "\<\"restArgs\"\>", ",", "\<\"restArgs$\"\>", 
   ",", "\<\"restBasisParameters\"\>", ",", "\<\"restBasisParameters$\"\>", 
   ",", "\<\"restElems\"\>", ",", "\<\"restElems$\"\>", 
   ",", "\<\"restGrades\"\>", ",", "\<\"restGrades$\"\>", 
   ",", "\<\"restOpts\"\>", ",", "\<\"restOpts1\"\>", 
   ",", "\<\"restOpts1$\"\>", ",", "\<\"restOptsEval\"\>", 
   ",", "\<\"restOptsEval$\"\>", ",", "\<\"restOpts$\"\>", 
   ",", "\<\"restoredList\"\>", ",", "\<\"restoredList$\"\>", 
   ",", "\<\"restoreMatrixRepresentation\"\>", 
   ",", "\<\"restoreMatrixRepresentation$\"\>", ",", "\<\"resul\"\>", 
   ",", "\<\"resultWithoutQuaternionRepl\"\>", 
   ",", "\<\"resultWithoutQuaternionRepl$\"\>", 
   ",", "\<\"resultWithQuaternionReplButWithoutIRepl\"\>", 
   ",", "\<\"resultWithQuaternionReplButWithoutIRepl$\"\>", 
   ",", "\<\"resul$\"\>", ",", "\<\"res$\"\>", 
   ",", "\<\"reverseCompactRepresentationReplacementRules\"\>", 
   ",", "\<\"rezult\"\>", ",", "\<\"rezult$\"\>", ",", "\<\"rightMV\"\>", 
   ",", "\<\"rightMV$\"\>", ",", "\<\"rng\"\>", ",", "\<\"rng$\"\>", 
   ",", "\<\"rootMultiplicityList\"\>", ",", "\<\"rootMultiplicityList$\"\>", 
   ",", "\<\"roots\"\>", ",", "\<\"rootsOfCharacteristicEquation\"\>", 
   ",", "\<\"rootsOfCharacteristicEquation$\"\>", 
   ",", "\<\"rootsOfChPoly\"\>", ",", "\<\"rootsOfChPoly$\"\>", 
   ",", "\<\"rootsToCheck\"\>", ",", "\<\"rootsToCheck$\"\>", 
   ",", "\<\"roots$\"\>", ",", "\<\"rule\"\>", ",", "\<\"ruleListList\"\>", 
   ",", "\<\"rules\"\>", ",", "\<\"rulesInsideGeometricProduct\"\>", 
   ",", "\<\"rulesInsideInnerAndOuterProduct\"\>", 
   ",", "\<\"rulesMultScalarAssociation\"\>", 
   ",", "\<\"rulesPlusIntoAssociation\"\>", 
   ",", "\<\"rulesPlusMultScalarAssociation\"\>", 
   ",", "\<\"rulesScalarInsidePlusIntoAssociation\"\>", 
   ",", "\<\"rulesScalarIntoAssociation\"\>", ",", "\<\"r$\"\>", 
   ",", "\<\"s\"\>", ",", "\<\"S\"\>", ",", "\<\"s1\"\>", ",", "\<\"s1$\"\>", 
   ",", "\<\"s2\"\>", ",", "\<\"s2pS2\"\>", ",", "\<\"s2pS2$\"\>", 
   ",", "\<\"s2$\"\>", ",", "\<\"sa\"\>", ",", "\<\"sameTestForUnion\"\>", 
   ",", "\<\"sa$\"\>", ",", "\<\"sb\"\>", ",", "\<\"sbs\"\>", 
   ",", "\<\"sbs$\"\>", ",", "\<\"sC\"\>", ",", "\<\"scalarPart\"\>", 
   ",", "\<\"scalarPart$\"\>", ",", "\<\"scalarPos\"\>", 
   ",", "\<\"scalarPos$\"\>", ",", "\<\"scalars\"\>", ",", "\<\"scalars$\"\>",
    ",", "\<\"scalarTerms\"\>", ",", "\<\"scalarTerms$\"\>", 
   ",", "\<\"scalarVar\"\>", ",", "\<\"scaleFactors\"\>", 
   ",", "\<\"scaleFactors$\"\>", ",", "\<\"scM\"\>", ",", "\<\"scM$\"\>", 
   ",", "\<\"scP\"\>", ",", "\<\"scP$\"\>", ",", "\<\"scWm\"\>", 
   ",", "\<\"scWm$\"\>", ",", "\<\"sC$\"\>", ",", "\<\"sd\"\>", 
   ",", "\<\"sd$\"\>", ",", "\<\"sel\"\>", ",", "\<\"selectedBE\"\>", 
   ",", "\<\"selectedBE$\"\>", ",", "\<\"selVector\"\>", 
   ",", "\<\"selVector$\"\>", ",", "\<\"semisimpleClAlgebraQ\"\>", 
   ",", "\<\"semisimpleQ\"\>", ",", "\<\"semisimpleQ$\"\>", 
   ",", "\<\"sEOM\"\>", ",", "\<\"seriesType\"\>", ",", "\<\"seriesType$\"\>",
    ",", "\<\"setSymDiff4TP\"\>", ",", "\<\"setSymDiff4TP$\"\>", 
   ",", "\<\"sf\"\>", ",", "\<\"sf$\"\>", 
   ",", "\<\"signatureSplittedSortedVectors\"\>", 
   ",", "\<\"signatureSplittedSortedVectors$\"\>", 
   ",", "\<\"signatureSplittedVectors\"\>", 
   ",", "\<\"signatureSplittedVectors$\"\>", ",", "\<\"signProdSigMap4TP\"\>",
    ",", "\<\"signProdSigMap4TP$\"\>", ",", "\<\"simplify\"\>", 
   ",", "\<\"simplify$\"\>", ",", "\<\"singleCoefficientSolve\"\>", 
   ",", "\<\"singleElementOuterMultiply\"\>", ",", "\<\"singlet\"\>", 
   ",", "\<\"singleton\"\>", ",", "\<\"singlet$\"\>", ",", "\<\"sLog\"\>", 
   ",", "\<\"sLog$\"\>", ",", "\<\"sm1\"\>", ",", "\<\"sm1$\"\>", 
   ",", "\<\"smartColors\"\>", ",", "\<\"sol\"\>", ",", "\<\"solAns\"\>", 
   ",", "\<\"solAns$\"\>", ",", "\<\"solBothsSZero\"\>", 
   ",", "\<\"solBothsSZero$\"\>", ",", "\<\"solFree2Negative\"\>", 
   ",", "\<\"solFree2Negative$\"\>", ",", "\<\"solFree2Positive\"\>", 
   ",", "\<\"solFree2Positive$\"\>", ",", "\<\"solPlay\"\>", 
   ",", "\<\"solPlay$\"\>", ",", "\<\"solRegular\"\>", 
   ",", "\<\"solRegular$\"\>", ",", "\<\"solSylvesterDetFromRight\"\>", 
   ",", "\<\"solsZero\"\>", ",", "\<\"solsZero$\"\>", 
   ",", "\<\"solTemplate\"\>", ",", "\<\"solTemplate$\"\>", 
   ",", "\<\"solutionFullBasisRules\"\>", 
   ",", "\<\"solutionFullBasisRules$\"\>", ",", "\<\"sol$\"\>", 
   ",", "\<\"someMV\"\>", ",", "\<\"someMV$\"\>", ",", "\<\"sortedAnswer\"\>",
    ",", "\<\"sortedAnswer$\"\>", ",", "\<\"sp1\"\>", ",", "\<\"sp1$\"\>", 
   ",", "\<\"specAlgebra\"\>", ",", "\<\"specAlgebra$\"\>", 
   ",", "\<\"spinorCoeffs\"\>", ",", "\<\"spinorCoeffs$\"\>", 
   ",", "\<\"sqrtOfMV\"\>", ",", "\<\"sS\"\>", ",", "\<\"ssd\"\>", 
   ",", "\<\"ssd$\"\>", ",", "\<\"sSRulesGeneric\"\>", 
   ",", "\<\"sSRulesGenerict0\"\>", ",", "\<\"sSRulesGenerict0Negative\"\>", 
   ",", "\<\"sSRulesGenerict0Negative$\"\>", 
   ",", "\<\"sSRulesGenerict0Positive\"\>", 
   ",", "\<\"sSRulesGenerict0Positive$\"\>", ",", "\<\"sSRulesGenerict0$\"\>",
    ",", "\<\"sSRulesGeneric$\"\>", ",", "\<\"sSRulesNegative\"\>", 
   ",", "\<\"sSRulesNegative$\"\>", ",", "\<\"sSRulesPositive\"\>", 
   ",", "\<\"sSRulesPositive$\"\>", ",", "\<\"sSSqrt\"\>", 
   ",", "\<\"sSSqrt$\"\>", ",", "\<\"sS$\"\>", ",", "\<\"startEl\"\>", 
   ",", "\<\"startElement\"\>", ",", "\<\"startElement$\"\>", 
   ",", "\<\"step\"\>", ",", "\<\"stepRev\"\>", ",", "\<\"stringNames\"\>", 
   ",", "\<\"stringNames$\"\>", ",", "\<\"stringValuepair\"\>", 
   ",", "\<\"stS\"\>", ",", "\<\"stS$\"\>", ",", "\<\"sty\"\>", 
   ",", "\<\"sty$\"\>", ",", "\<\"suggest\"\>", ",", "\<\"suggest$\"\>", 
   ",", "\<\"sum\"\>", ",", "\<\"sumContainer\"\>", 
   ",", "\<\"sumContainer$\"\>", ",", "\<\"sumind\"\>", 
   ",", "\<\"sumTermMainPart\"\>", ",", "\<\"sumTermMainPart$\"\>", 
   ",", "\<\"sum$\"\>", ",", "\<\"surfaceCase\"\>", 
   ",", "\<\"surfaceCase$\"\>", ",", "\<\"svch\"\>", ",", "\<\"svch$\"\>", 
   ",", "\<\"sym\"\>", ",", "\<\"symbolicCoefficientsOfTestMV\"\>", 
   ",", "\<\"symbolicCoefficientsOfTestMV$\"\>", ",", "\<\"symbolName\"\>", 
   ",", "\<\"symbolName$\"\>", ",", "\<\"synm\"\>", ",", "\<\"synm$\"\>", 
   ",", "\<\"s$\"\>", ",", "\<\"S$\"\>", ",", "\<\"t\"\>", ",", "\<\"tag\"\>",
    ",", "\<\"tag$\"\>", ",", "\<\"tangentVectorPointList\"\>", 
   ",", "\<\"tangentVectorPointList$\"\>", ",", "\<\"tangentVectors\"\>", 
   ",", "\<\"tangentVectorStyleList\"\>", 
   ",", "\<\"tangentVectorStyleList$\"\>", ",", "\<\"tanVectGraphicsList\"\>",
    ",", "\<\"tanVectGraphicsList$\"\>", ",", "\<\"temp\"\>", 
   ",", "\<\"tempC\"\>", ",", "\<\"tempContainer\"\>", 
   ",", "\<\"tempContainer$\"\>", ",", "\<\"tempC$\"\>", 
   ",", "\<\"tempvar\"\>", ",", "\<\"tempvar$\"\>", ",", "\<\"temp$\"\>", 
   ",", "\<\"tensorProductIsomorphicToAlgebra\"\>", ",", "\<\"term\"\>", 
   ",", "\<\"termsToTake\"\>", ",", "\<\"termsToTake$\"\>", 
   ",", "\<\"termsWithVars\"\>", ",", "\<\"termsWithVars$\"\>", 
   ",", "\<\"term$\"\>", ",", "\<\"test\"\>", ",", "\<\"testCoefficients\"\>",
    ",", "\<\"testCoefficients$\"\>", ",", "\<\"testFunction\"\>", 
   ",", "\<\"testIndexUnion\"\>", ",", "\<\"testList\"\>", 
   ",", "\<\"testMV\"\>", ",", "\<\"testMVforTransformation\"\>", 
   ",", "\<\"testMVforTransformation$\"\>", ",", "\<\"testMV$\"\>", 
   ",", "\<\"testOptionAdjointTransformation\"\>", 
   ",", "\<\"testOptionBladeQ\"\>", 
   ",", "\<\"testOptionBladeToSumOfVersors\"\>", 
   ",", "\<\"testOptionCharacteristicPolynomial\"\>", 
   ",", "\<\"testOptionComponentCoefficientAndBasisList\"\>", 
   ",", "\<\"testOptionDefineCoordinateChart\"\>", 
   ",", "\<\"testOptionDefineMatrixRepresentation\"\>", 
   ",", "\<\"testOptionDefineOrthonormalBasis\"\>", 
   ",", "\<\"testOptionDefinePositionVector\"\>", 
   ",", "\<\"testOptionDeterminantOfMV\"\>", 
   ",", "\<\"testOptionDiagonalizableQ\"\>", 
   ",", "\<\"testOptionDimensionOfMatrixRepresentation\"\>", 
   ",", "\<\"testOptionDoubleSidedIdeal\"\>", 
   ",", "\<\"testOptionExpOfMV\"\>", 
   ",", "\<\"testOptionForsetNamedOptionValue\"\>", 
   ",", "\<\"testOptionFromMatrixRepresentation\"\>", 
   ",", "\<\"testOptionFunctionOfMV\"\>", 
   ",", "\<\"testOptiongaArcCoshOfMV\"\>", 
   ",", "\<\"testOptiongaArcCosOfMV\"\>", 
   ",", "\<\"testOptiongaArcSinhOfMV\"\>", 
   ",", "\<\"testOptiongaArcSinOfMV\"\>", 
   ",", "\<\"testOptionGeometricProductSeries\"\>", 
   ",", "\<\"testOptionGetAlgebra\"\>", 
   ",", "\<\"testOptionHermitianConjugate\"\>", 
   ",", "\<\"testOptionInverse\"\>", ",", "\<\"testOptionLeftIdeal\"\>", 
   ",", "\<\"testOptionLeftIdealBasis\"\>", ",", "\<\"testOptionLogOfMV\"\>", 
   ",", "\<\"testOptionMinimalPolynomial\"\>", 
   ",", "\<\"testOptionNormalize\"\>", 
   ",", "\<\"testOptionNormDeterminant\"\>", 
   ",", "\<\"testOptionNormReverseAbs\"\>", 
   ",", "\<\"testOptionOrthogonalize\"\>", 
   ",", "\<\"testOptionPlotCoordinateSystem\"\>", 
   ",", "\<\"testOptionPrimitiveIdempotent\"\>", 
   ",", "\<\"testOptionProductExpand\"\>", 
   ",", "\<\"testOptionProductPairExpand\"\>", 
   ",", "\<\"testOptionRandomBasis\"\>", 
   ",", "\<\"testOptionRandomMultivector\"\>", 
   ",", "\<\"testOptionRandomNonDiagonalizableMV\"\>", 
   ",", "\<\"testOptionSpinor\"\>", ",", "\<\"testOptionSqrtOfMV\"\>", 
   ",", "\<\"testOptionToTensorProduct\"\>", 
   ",", "\<\"testOptionTransformation\"\>", 
   ",", "\<\"testOptionVersorToSumOfBlades\"\>", ",", "\<\"testResult\"\>", 
   ",", "\<\"testResult$\"\>", ",", "\<\"testTrigonometric\"\>", 
   ",", "\<\"test$\"\>", ",", "\<\"the\"\>", ",", "\<\"theAlg\"\>", 
   ",", "\<\"theAlgBasis\"\>", ",", "\<\"theAlgBasis$\"\>", 
   ",", "\<\"theAlgebra\"\>", ",", "\<\"theAlgebraList\"\>", 
   ",", "\<\"theAlgebraList$\"\>", ",", "\<\"theAlgebraMarks\"\>", 
   ",", "\<\"theAlgebraMarks$\"\>", ",", "\<\"theAlgebra$\"\>", 
   ",", "\<\"theAlg$\"\>", ",", "\<\"theAnswer\"\>", 
   ",", "\<\"theAnswer$\"\>", ",", "\<\"theArgumentGrade\"\>", 
   ",", "\<\"theArgumentGrade$\"\>", ",", "\<\"theAssociationFunction\"\>", 
   ",", "\<\"theAssociationFunction$\"\>", ",", "\<\"theBasis\"\>", 
   ",", "\<\"theBasis$\"\>", ",", "\<\"theBivectors\"\>", 
   ",", "\<\"theBivectors$\"\>", ",", "\<\"theBlade\"\>", 
   ",", "\<\"theBlade$\"\>", ",", "\<\"theBody\"\>", ",", "\<\"theBody$\"\>", 
   ",", "\<\"thechartName\"\>", ",", "\<\"thechartName$\"\>", 
   ",", "\<\"theCoef\"\>", ",", "\<\"theCoeff\"\>", ",", "\<\"theCoeff$\"\>", 
   ",", "\<\"theCoef$\"\>", ",", "\<\"theColor\"\>", ",", "\<\"theColor$\"\>",
    ",", "\<\"theDArg\"\>", ",", "\<\"theDERules\"\>", 
   ",", "\<\"theDERules$\"\>", ",", "\<\"theDet\"\>", ",", "\<\"theDet$\"\>", 
   ",", "\<\"theDirection\"\>", ",", "\<\"theDirection$\"\>", 
   ",", "\<\"theDiscriminantFunction\"\>", 
   ",", "\<\"theDiscriminantFunction$\"\>", ",", "\<\"theDomain\"\>", 
   ",", "\<\"theElement\"\>", ",", "\<\"theElements\"\>", 
   ",", "\<\"theElement$\"\>", ",", "\<\"theEq\"\>", ",", "\<\"theEqLHS\"\>", 
   ",", "\<\"theEqLHS$\"\>", ",", "\<\"theEq$\"\>", 
   ",", "\<\"theExpandFunction\"\>", ",", "\<\"theExpandFunction$\"\>", 
   ",", "\<\"theFieldAndName\"\>", ",", "\<\"theFieldAndName$\"\>", 
   ",", "\<\"theFormula\"\>", ",", "\<\"TheFormula\"\>", 
   ",", "\<\"theFormulaCoordinateFree\"\>", 
   ",", "\<\"theFormulaCoordinateFree$\"\>", ",", "\<\"theFormula$\"\>", 
   ",", "\<\"thefunction\"\>", ",", "\<\"thefunction$\"\>", 
   ",", "\<\"theGenericDenominator\"\>", 
   ",", "\<\"theGenericDenominator$\"\>", 
   ",", "\<\"theGenericNumeratorTruncated\"\>", 
   ",", "\<\"theGenericNumeratorTruncated$\"\>", ",", "\<\"theGrade\"\>", 
   ",", "\<\"theGradesToExtract\"\>", ",", "\<\"theGradesToExtract$\"\>", 
   ",", "\<\"theGrade$\"\>", ",", "\<\"theId\"\>", 
   ",", "\<\"theIdempotent\"\>", ",", "\<\"theIdempotentSetting\"\>", 
   ",", "\<\"theIdempotentSetting$\"\>", ",", "\<\"theIdempotent$\"\>", 
   ",", "\<\"theIdentityMatrix\"\>", ",", "\<\"theIdentityMatrix$\"\>", 
   ",", "\<\"theId$\"\>", ",", "\<\"theImaginaryIReplacementRules\"\>", 
   ",", "\<\"theImaginaryIReplacementRules$\"\>", ",", "\<\"theInd\"\>", 
   ",", "\<\"theInd$\"\>", ",", "\<\"theInternalMVRepresentation\"\>", 
   ",", "\<\"theLeftMinimaIdealBasisA\"\>", 
   ",", "\<\"theLeftMinimaIdealBasisA$\"\>", ",", "\<\"theMatrix\"\>", 
   ",", "\<\"theMatrixDet\"\>", ",", "\<\"theMatrixDet$\"\>", 
   ",", "\<\"theMatrixSize\"\>", ",", "\<\"theMatrixSize$\"\>", 
   ",", "\<\"theMatrix$\"\>", ",", "\<\"theMethod\"\>", 
   ",", "\<\"theMethod$\"\>", ",", "\<\"theMetric\"\>", 
   ",", "\<\"theMetric$\"\>", ",", "\<\"theMVPowersTruncated\"\>", 
   ",", "\<\"theMVPowersTruncated$\"\>", ",", "\<\"theNumberOfNestLevels\"\>",
    ",", "\<\"theNumberOfNestLevels$\"\>", ",", "\<\"theOperation\"\>", 
   ",", "\<\"theOperation$\"\>", ",", "\<\"theOption\"\>", 
   ",", "\<\"theOption$\"\>", ",", "\<\"theOrdering\"\>", 
   ",", "\<\"theOrderingRules\"\>", ",", "\<\"theOrderingRules$\"\>", 
   ",", "\<\"theOrdering$\"\>", ",", "\<\"theOtherOptions\"\>", 
   ",", "\<\"theOtherOptions$\"\>", ",", "\<\"thePassedPatchOptions\"\>", 
   ",", "\<\"thePassedPatchOptions$\"\>", ",", "\<\"thePatchName\"\>", 
   ",", "\<\"thePatchNameList\"\>", ",", "\<\"thePatchNameList$\"\>", 
   ",", "\<\"thePatchName$\"\>", ",", "\<\"thePoint\"\>", 
   ",", "\<\"thePointComponents\"\>", ",", "\<\"thePointComponents$\"\>", 
   ",", "\<\"thePointVector\"\>", ",", "\<\"thePointVector$\"\>", 
   ",", "\<\"thePoint$\"\>", ",", "\<\"theProblemicFactor\"\>", 
   ",", "\<\"theProblemicFactor$\"\>", ",", "\<\"thePropertyList\"\>", 
   ",", "\<\"thePropertyList$\"\>", ",", "\<\"theProprocessingRules\"\>", 
   ",", "\<\"thePseudoFactor\"\>", ",", "\<\"thePseudoFactor$\"\>", 
   ",", "\<\"theQuaternionReplacementRules\"\>", 
   ",", "\<\"theQuaternionReplacementRules$\"\>", ",", "\<\"theRange\"\>", 
   ",", "\<\"theRange1\"\>", ",", "\<\"theRange1$\"\>", 
   ",", "\<\"theRange2\"\>", ",", "\<\"theRange2$\"\>", 
   ",", "\<\"theRangeList\"\>", ",", "\<\"theRangeList$\"\>", 
   ",", "\<\"theRangeValue\"\>", ",", "\<\"theRangeValue$\"\>", 
   ",", "\<\"theRange$\"\>", ",", "\<\"theReciprocalBivectors\"\>", 
   ",", "\<\"theReciprocalBivectors$\"\>", ",", "\<\"theRest\"\>", 
   ",", "\<\"theRest$\"\>", ",", "\<\"theResult\"\>", 
   ",", "\<\"theResultFunction\"\>", ",", "\<\"theResultFunction$\"\>", 
   ",", "\<\"theResult$\"\>", ",", "\<\"theroot\"\>", ",", "\<\"theroot$\"\>",
    ",", "\<\"theRule\"\>", ",", "\<\"theScalarFunction\"\>", 
   ",", "\<\"theScalarFunction$\"\>", 
   ",", "\<\"theScalarProductOnArgOfgaTransform\"\>", 
   ",", "\<\"theScalarProductOnArgOfgaTransform$\"\>", 
   ",", "\<\"theSortedField\"\>", ",", "\<\"theSortedField$\"\>", 
   ",", "\<\"theStructureConstants\"\>", 
   ",", "\<\"theStructureConstantsSummedWithMetric\"\>", 
   ",", "\<\"theStructureConstantsSummedWithMetric$\"\>", 
   ",", "\<\"theStructureConstants$\"\>", ",", "\<\"theTransformation\"\>", 
   ",", "\<\"thetransformationGrade\"\>", 
   ",", "\<\"thetransformationGrade$\"\>", ",", "\<\"theTransformation$\"\>", 
   ",", "\<\"theTransfrom\"\>", ",", "\<\"theVarNames\"\>", 
   ",", "\<\"theVarNames$\"\>", ",", "\<\"theVector\"\>", 
   ",", "\<\"theVectorBasis\"\>", ",", "\<\"theVectorBasis$\"\>", 
   ",", "\<\"theVectorSpaceDimension\"\>", 
   ",", "\<\"theVectorSpaceDimension$\"\>", ",", "\<\"theVector$\"\>", 
   ",", "\<\"theVerify\"\>", ",", "\<\"theVerify$\"\>", ",", "\<\"the$\"\>", 
   ",", "\<\"thisBase\"\>", ",", "\<\"thisBase$\"\>", ",", "\<\"thisRep\"\>", 
   ",", "\<\"thisRep$\"\>", ",", "\<\"toBasisElementRules\"\>", 
   ",", "\<\"toBasisElementRules$\"\>", ",", "\<\"tocheck\"\>", 
   ",", "\<\"toDirectionalDerivativeRules\"\>", ",", "\<\"toKeep\"\>", 
   ",", "\<\"toKeep$\"\>", ",", "\<\"toModify\"\>", ",", "\<\"toModify$\"\>", 
   ",", "\<\"toRCHFactors\"\>", ",", "\<\"tr\"\>", ",", "\<\"transform\"\>", 
   ",", "\<\"transformationActionOnTestMV\"\>", 
   ",", "\<\"transformationActionOnTestMV$\"\>", 
   ",", "\<\"transformationBlock\"\>", ",", "\<\"transformationFactor\"\>", 
   ",", "\<\"transformationFactorNoTest\"\>", 
   ",", "\<\"transformationFactorNoTest$\"\>", 
   ",", "\<\"transformationFactor$\"\>", ",", "\<\"transform$\"\>", 
   ",", "\<\"triangularNumber\"\>", ",", "\<\"trueHeads\"\>", 
   ",", "\<\"trueHeadsBlanks\"\>", ",", "\<\"trueHeadsBlanks$\"\>", 
   ",", "\<\"trueHeadsHeads\"\>", ",", "\<\"trueHeadsHeads$\"\>", 
   ",", "\<\"trueHeads$\"\>", ",", "\<\"tr$\"\>", ",", "\<\"tTRules\"\>", 
   ",", "\<\"tTRulesGeneric\"\>", ",", "\<\"tTRulesGeneric0\"\>", 
   ",", "\<\"tTRulesGeneric0$\"\>", ",", "\<\"tTRulesGenericMinus\"\>", 
   ",", "\<\"tTRulesGenericMinus$\"\>", ",", "\<\"tTRulesGenericPlus\"\>", 
   ",", "\<\"tTRulesGenericPlus$\"\>", ",", "\<\"tTRulesGeneric$\"\>", 
   ",", "\<\"tTRules$\"\>", ",", "\<\"type\"\>", ",", "\<\"t$\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"u1\"\>", ",", "\<\"u2a\"\>", 
   ",", "\<\"u2b\"\>", ",", "\<\"u3\"\>", ",", "\<\"uexp\"\>", 
   ",", "\<\"uInds\"\>", ",", "\<\"uInds$\"\>", ",", "\<\"uMVec\"\>", 
   ",", "\<\"uniqueMaskForArbitraryAlgebra\"\>", 
   ",", "\<\"uniqueMaskForSpecAlgebra\"\>", ",", "\<\"uniqueSumVars\"\>", 
   ",", "\<\"uniqueSumVars$\"\>", ",", "\<\"uniqueSymbolsB\"\>", 
   ",", "\<\"uniqueSymbolsB$\"\>", ",", "\<\"uniqueSymbolsC\"\>", 
   ",", "\<\"uniqueSymbolsC$\"\>", ",", "\<\"unitElement\"\>", 
   ",", "\<\"unitPosition\"\>", ",", "\<\"unitPosition$\"\>", 
   ",", "\<\"up\"\>", ",", "\<\"up1\"\>", ",", "\<\"up1$\"\>", 
   ",", "\<\"up2\"\>", ",", "\<\"up2$\"\>", ",", "\<\"updateInputAlias\"\>", 
   ",", "\<\"upindlist\"\>", ",", "\<\"upindlist$\"\>", 
   ",", "\<\"upVectorIdicesThatRemains\"\>", 
   ",", "\<\"upVectorIdicesThatRemains$\"\>", ",", "\<\"up$\"\>", 
   ",", "\<\"u$\"\>", ",", "\<\"v\"\>", ",", "\<\"V\"\>", 
   ",", "\<\"V1RulesNegative\"\>", ",", "\<\"V1RulesNegative$\"\>", 
   ",", "\<\"V1RulesPositive\"\>", ",", "\<\"V1RulesPositive$\"\>", 
   ",", "\<\"val\"\>", ",", "\<\"validBasisVectorsReordering\"\>", 
   ",", "\<\"value\"\>", ",", "\<\"value$\"\>", ",", "\<\"val$\"\>", 
   ",", "\<\"var\"\>", ",", "\<\"var1\"\>", ",", "\<\"var2\"\>", 
   ",", "\<\"variants\"\>", ",", "\<\"variants$\"\>", ",", "\<\"varName\"\>", 
   ",", "\<\"varName$\"\>", ",", "\<\"vars\"\>", ",", "\<\"varsWithMarks\"\>",
    ",", "\<\"varsWithMarks$\"\>", ",", "\<\"vars$\"\>", 
   ",", "\<\"varThatMatchBasisElem\"\>", ",", "\<\"varToNumbersRules\"\>", 
   ",", "\<\"varToNumbersRules$\"\>", ",", "\<\"var$\"\>", 
   ",", "\<\"vbArctan\"\>", ",", "\<\"vbArctan$\"\>", ",", "\<\"vBIP\"\>", 
   ",", "\<\"vBIP$\"\>", ",", "\<\"vbLog\"\>", ",", "\<\"vbLog$\"\>", 
   ",", "\<\"vbM\"\>", ",", "\<\"vbM$\"\>", ",", "\<\"vBOPI\"\>", 
   ",", "\<\"vBOPI$\"\>", ",", "\<\"vbP\"\>", ",", "\<\"vbP$\"\>", 
   ",", "\<\"vC\"\>", ",", "\<\"vC$\"\>", ",", "\<\"VdVpBdB\"\>", 
   ",", "\<\"VdVpBdB$\"\>", ",", "\<\"vec\"\>", ",", "\<\"vecBase\"\>", 
   ",", "\<\"vecBase$\"\>", ",", "\<\"vecBivect\"\>", 
   ",", "\<\"vecBivect$\"\>", ",", "\<\"vector\"\>", 
   ",", "\<\"vectorBase\"\>", ",", "\<\"vectorMatrices\"\>", 
   ",", "\<\"vectorMatricesFin\"\>", ",", "\<\"vectorMatricesFin$\"\>", 
   ",", "\<\"vectorMatrices$\"\>", ",", "\<\"vectors\"\>", 
   ",", "\<\"vectorsOfArbitraryAlgebra\"\>", 
   ",", "\<\"vectorsOfSpecialAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebraMetricSorted\"\>", 
   ",", "\<\"vectorSpaceDim\"\>", ",", "\<\"vectorSpaceDim$\"\>", 
   ",", "\<\"vectors$\"\>", ",", "\<\"vector$\"\>", ",", "\<\"verify\"\>", 
   ",", "\<\"verify$\"\>", ",", "\<\"volumeFactor\"\>", 
   ",", "\<\"volumeFactor$\"\>", ",", "\<\"vRep\"\>", ",", "\<\"vsdim\"\>", 
   ",", "\<\"vsdim$\"\>", ",", "\<\"vVRules\"\>", ",", "\<\"vVRules00\"\>", 
   ",", "\<\"vVRules00$\"\>", ",", "\<\"vVRulesGeneric\"\>", 
   ",", "\<\"vVRulesGeneric$\"\>", ",", "\<\"vVRulesNegative\"\>", 
   ",", "\<\"vVRulesNegative$\"\>", ",", "\<\"vVRulesPositive\"\>", 
   ",", "\<\"vVRulesPositive$\"\>", ",", "\<\"vVRules$\"\>", 
   ",", "\<\"v$\"\>", ",", "\<\"V$\"\>", ",", "\<\"w\"\>", 
   ",", "\<\"warnIfNondiagonalizable\"\>", 
   ",", "\<\"warnIfNondiagonalizable$\"\>", ",", "\<\"what\"\>", 
   ",", "\<\"whatToD\"\>", ",", "\<\"whatToD$\"\>", ",", "\<\"whi\"\>", 
   ",", "\<\"whi$\"\>", ",", "\<\"wrap\"\>", ",", "\<\"wrapArg\"\>", 
   ",", "\<\"wrapCliffordConjugate\"\>", ",", "\<\"wrapHead\"\>", 
   ",", "\<\"wrappedSelVector\"\>", 
   ",", "\<\"wrappedSelVectorSignedMagnitudeSquare\"\>", 
   ",", "\<\"wrappedSelVectorSignedMagnitudeSquare$\"\>", 
   ",", "\<\"wrappedSelVector$\"\>", ",", "\<\"wrappingBlade\"\>", 
   ",", "\<\"wrap$\"\>", ",", "\<\"w$\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"x1\"\>", ",", "\<\"x1$\"\>", ",", "\<\"x2\"\>", 
   ",", "\<\"x2$\"\>", ",", "\<\"x3\"\>", ",", "\<\"x3$\"\>", 
   ",", "\<\"xlists\"\>", ",", "\<\"x$\"\>", ",", "\<\"y\"\>", 
   ",", "\<\"y1\"\>", ",", "\<\"y2\"\>", ",", "\<\"yMV\"\>", 
   ",", "\<\"yMV$\"\>", ",", "\<\"y$\"\>", ",", "\<\"z\"\>", 
   ",", "\<\"zeroGradeQ\"\>", ",", "\<\"zeroQ\"\>", ",", "\<\"z$\"\>", 
   ",", "\<\"\[DoubleStruckCapitalL]\"\>", ",", "\<\"\[CurlyPhi]\"\>", 
   ",", "\<\"\[EmptyDownTriangle]\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[1545]=",ExpressionUUID->"734e5e5c-533e-4a7c-be6a-68d0c535ab82"]
}, Open  ]],

Cell["\<\
Check if global context remains clear . {args,dims} are generated by paclet? \
See, https://mathematica.stackexchange.com/questions/202841/why-does-args-\
symbol-exist-in-a-fresh-kernel\
\>", "Text",ExpressionUUID->"e56e9ed7-be98-44f8-8648-f968bde76cc3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Names", "[", 
      RowBox[{"\"\<Global`\>\"", "<>", "\"\<*\>\""}], "]"}], "=!=", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{"GeometricAlgebra`p`printDetails", "[", 
     RowBox[{"False", ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<The global context is not clear!\>\"", ",", 
         RowBox[{"Names", "[", 
          RowBox[{"\"\<Global`\>\"", "<>", "\"\<*\>\""}], "]"}]}], "}"}], 
       "}"}]}], "]"}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[1546]:=",ExpressionUUID->"375fc3fd-513a-46c7-8e6e-e73d53013289"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CurrentValue", "[", 
    RowBox[{
     RowBox[{"Cells", "[", "]"}], ",", "CellChangeTimes"}], "]"}], "=", 
   "Inherited"}], ";"}]], "Input",
 Evaluatable->False,
 CellLabel->"In[1]:=",ExpressionUUID->"1d24a5e1-25e1-4fae-bac2-02dadb8d60de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Notes, drawbacks, future plans"
}], "Section",ExpressionUUID->"64646392-2c84-44bd-8289-d306a45113a6"],

Cell[TextData[{
 "End notes, drawbacks. Everything listed here is intended to serve as ",
 StyleBox["personal reminder",
  FontWeight->"Bold"],
 ". Last modified: 2023-03-15"
}], "Text",ExpressionUUID->"bab34d23-1b76-4352-b58e-022940b57c10"],

Cell["\<\
Implement calculation of derivatives, orthonormal base first. Priority:  very \
high (we want to add minimal differentiation in GA)\
\>", "ItemNumbered",ExpressionUUID->"edc93c61-5bf3-47aa-9c2a-ba336d3c3af5"],

Cell["\<\
Implement gaBilinearForm. MV[name, mvDownUp, algebra, bilinearForm]. + Rules \
which would allow to go from more general bilinear forms to more specific \
(when compatible). Notation in MV then should include not only algebra \
itself,  but also  bilinear form, since otherwise it will be unclear what \
objects MV[] we are dealing with. Priority: very low (not clear if the \
feature would be useful at all)\
\>", "ItemNumbered",ExpressionUUID->"a957301b-6425-4254-9412-560333ab750c"],

Cell["\<\
Implement Groebner basis for outer product, then for whole Clifford algebra \
(in orthonormal basis). Priority: low (seems that not much can be done here?)\
\
\>", "ItemNumbered",ExpressionUUID->"bd38d81d-58e6-42f1-88dd-1468ffb6ce67"],

Cell["\<\
Think about Miroslav Josipovic (3D Euclidean space article, pages 46-50) \
spectral decomposition. Also Sobczyk: \[OpenCurlyDoubleQuote]The missing \
spectral basis in algebra and number theory\[CloseCurlyDoubleQuote] American \
Mathematical Monthly, Vol 108, No4, 2001, p336-346. Is it implementable? How \
useful? Priority: medium\
\>", "ItemNumbered",ExpressionUUID->"03218293-40f4-4783-a018-beb9f502602e"],

Cell[TextData[{
 "Make some experiments with ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SuperscriptBox[
          StyleBox["S", "TI"], "-1"], 
         SubscriptBox[
          StyleBox["e", "TI"], 
          RowBox[{
            StyleBox["i", "TI"], ",", 
            StyleBox["j", "TI"]}]], 
         StyleBox["S", "TI"]}], TraditionalForm], "errors" -> {}, "input" -> 
     "S^{-1}e_{i,j}S", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "d6f1a3d3-83bd-4971-a71f-ac053dc6bfea"],
 " transformation of blades which make idempotent. What that transformation \
means. See also Lounesto spinoriality transformation (p 170). Priority: low"
}], "ItemNumbered",ExpressionUUID->"288a5ee6-b87d-4141-b713-123c4025be9e"],

Cell["\<\
Write down rules to write down operator spinors for complex algebras dim 5-12 \
(much was done, to remember) Priority: medium\
\>", "ItemNumbered",ExpressionUUID->"f9824e06-9310-4687-8eb9-0e10c777c7f6"],

Cell["\<\
To introduce gaClassicalSpinor, gaOperatorSpinor, gaAlgebraicSpinor? Now \
gaSpinor means gaAlgebraicSpinor. Can be easily done for Minkowski space. For \
other dimensions the other concepts remains very  unclear. To read more. \
Priority: low\
\>", "ItemNumbered",ExpressionUUID->"9c1bd693-9e81-4167-9fb7-3c598a174eef"],

Cell["\<\
Make function to make Hestenes spinors (modes general and single, both differ \
on how handle equation: grade by grade or all in once) Priority: medium\
\>", "ItemNumbered",ExpressionUUID->"358ba56e-ef33-43e4-812a-3b2f648226a3"],

Cell["\<\
How to construct complex conjugation according to Vaz 4.7 example? Also Vaz p \
120 exercise (1). Is it possible to extend that trick to all H matrices? \
Priority: low\
\>", "ItemNumbered",ExpressionUUID->"e59c505a-6eb6-4e79-a5ec-ee6d20164ab1"],

Cell["\<\
Vaz p. 120 exercise 2, Weil spinors can be obtained using different \
idempotents. To check. P 68, Mayorana representations: to check. Priority: low\
\>", "ItemNumbered",ExpressionUUID->"c0d89406-f1ee-4110-8e7e-3f004893a70c"],

Cell[TextData[{
 "Vaz p167 give  two definitions of spinor scalar product ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         OverscriptBox["\[Psi]", "~"], "\[Psi]"}], TraditionalForm], 
     "errors" -> {}, "input" -> "\\tilde \\psi \\psi", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "febe992c-e527-4bc2-a5e7-a2f058ad7cd9"],
 " and ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["e", "TI"], "5"], 
         OverscriptBox["\[Psi]", "_"], "\[Psi]"}], TraditionalForm], 
     "errors" -> {}, "input" -> "e_5 \\bar \\psi \\psi", "state" -> "Boxes"|>,
    
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "40cba137-0480-46a7-93ab-daa8cf7f5481"],
 " . We use ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SuperscriptBox["\[Psi]", 
          StyleBox["a", "TI"]], 
         SubscriptBox["\[Psi]", 
          StyleBox["a", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\psi^a \\psi_a", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "e6a3a547-b860-4d53-b044-0393ace78a6d"],
 ". How it relates with Vaz and how to define the other. Priority: medium"
}], "ItemNumbered",ExpressionUUID->"893d4ca1-2a42-4a18-8a1d-110489ff99ca"],

Cell["\<\
Vaz p112, 4.5 example. Do commuting idempotents always related by similarity \
transformation? To experiment, think. Priority: low\
\>", "ItemNumbered",ExpressionUUID->"ba3d32b5-3508-40ce-8cc7-b0fa47c68331"],

Cell["Vaz, 4.7 example, to investigate. Priority: low", "ItemNumbered",ExpressionUUID->"04959529-edc2-43d5-ad94-f4aa3f002594"],

Cell["\<\
Vaz p120 exercise 1. When (1+e0) is replaced by (1+I e12) H representation is \
replaced by C(4). Can replace all H? To investigate. Priority: low\
\>", "ItemNumbered",ExpressionUUID->"75bc2962-7980-45cf-bdb4-46c6cd7d118e"],

Cell["\<\
Vaz p120 exercise 2. Seems that Weyl spinors can be obtained using different \
idempotents: to check, And p 68, Cl(3,1) Mayorana representations to \
construct. Priority: low\
\>", "ItemNumbered",ExpressionUUID->"bdffc49c-12ca-4d19-9c8a-48d3c34129ec"],

Cell["\<\
Vaz, p147 writes about even subalgebra of spinors, related to even grade \
idempotents. To compute, experiment. See also Lounesto p228 footnote.  \
Slightly differs: splints into even and odd parts.  Finish computation Doran \
Lasenby replacement rules for all algebras. Priority: medium\
\>", "ItemNumbered",ExpressionUUID->"32da8fb4-71cb-44a2-abf7-241c547a6851"],

Cell["\<\
Vaz 66+67 (p 120) and p146 in \[OpenCurlyDoubleQuote]Illustrated handbook\
\[CloseCurlyDoubleQuote]  compare answers.  Priority: low\
\>", "ItemNumbered",ExpressionUUID->"14d3f1b7-b9f2-4c7e-9583-3145637b9c78"],

Cell[TextData[{
 "Sqrt in n=3 can be related to spinors ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SuperscriptBox[
          StyleBox["p", "TI"], "2"], "\[LongEqual]", 
         SuperscriptBox[
          StyleBox["m", "TI"], "2"]}], TraditionalForm], "errors" -> {}, 
     "input" -> "p^2=m^2", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "027d3178-6aa6-46b1-ac63-fe6ab561f201"],
 " We know how to compute sqrt in n=3. Can it find application here? Priority \
low"
}], "ItemNumbered",ExpressionUUID->"903534b0-041c-45d7-852b-c1df01b9c301"],

Cell["\<\
Martin Roelfs and Steven de Keninck in \[OpenCurlyDoubleQuote]Graded symmetry \
groups: plane an simple\[CloseCurlyDoubleQuote] provide invariant \
decompositions of bivectors, rotors. Also gives interesting real matrix \
representation. Try to implement. Priority: medium.\
\>", "ItemNumbered",ExpressionUUID->"e9929ecb-571c-4180-9698-41d74f37ddf4"],

Cell["To compute Joot formula (2.8) in page 77. Priority: medium", \
"ItemNumbered",ExpressionUUID->"01cd46fa-7d57-4a99-88d7-82227c345333"],

Cell["Implement MV factorization into blades. Priority: medium", \
"ItemNumbered",ExpressionUUID->"13eaf6d7-b18b-4b99-8a46-fa79e2d0874b"],

Cell["\<\
How to construct general representation for SO(p,q) and Spin groups. \
Lounesto, p221-p225 provides some ideas. See Lounesto p 228 exercises and \
that section. Shirokow  gives formula for Cl(3,0). To think. Priority: medium\
\
\>", "ItemNumbered",ExpressionUUID->"ab0533eb-394f-41ee-a549-0f3027f4a861"],

Cell["gaDifferentialFormValue[] Priority: medium", "ItemNumbered",ExpressionUUID->"cdc1d72c-3b04-4cf8-9bbf-c1583678d602"],

Cell["\<\
gaCoordinateFreeForm[]: function which attempt to rewrite coordinate \
expression in a coordinate free form: a) collect by grades, b) detect max \
allowed grades, c) make combinations inner, outer, geometric products \
(hypotheses) d) Attempt to solve with SolveAlways? Priority: medium/low\
\>", "ItemNumbered",ExpressionUUID->"11ab00c1-a89d-4a3e-aeab-82a5b4c6ed49"],

Cell["\<\
for n=5 from 38 terms by replacement A\\tilde A to attempt obtain compact \
determinant expression for n=7.\
\>", "ItemNumbered",ExpressionUUID->"5da1b6e3-bcb0-4f9f-8861-9b815d300011"],

Cell["\<\
Make order in determinant/characteristic polynomial computation section (too \
many similar names, many junks, etc.) Also, when MV  contains real numbers \
properly choose automatic method, In particular, one should chose \
Method->{Involutions, gaFormula->Explicit}. Since otherwise non scalar parts \
appear due to computation error (and we want determinant and determinant norm \
to be scalar).  Add here gaTr[ ] command for trace of MV (simple). Priority: \
high\
\>", "ItemNumbered",ExpressionUUID->"3e8c9e43-9221-4fd2-af31-5dd57131ed66"],

Cell["\<\
Make gaVariable[] work inside functions. Priority: when needed\
\>", "ItemNumbered",ExpressionUUID->"530adebd-2e99-4a34-ac7a-dec3dba5eade"],

Cell["\<\
Try to simplify Log spec condition for Cl(21) in method \
\[OpenCurlyDoubleQuote]LowDimension\[CloseCurlyDoubleQuote]. It is similar to \
condition for Cl(20). Priority: medium\
\>", "ItemNumbered",ExpressionUUID->"c0d20b12-b94d-4e2b-afd9-f5b161f1cbc7"],

Cell["\<\
Try universal formula when Residue works and fails. Try to find conditions \
when fails. Output {expr, roots, Residue, series, with symbolic disturbance}. \
If pattern for which result is good can be established,  compute that \
coefficients with using Residue. Priority: very high\
\>", "ItemNumbered",ExpressionUUID->"92253a5f-788e-4fbe-9f2b-39c0c63977f2"]
}, Open  ]]
},
CellGrouping->Manual,
WindowSize->{993.75, 1122.},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowSelection->True,
ShowCellTags->True,
TrackCellChangeTimes->False,
CodeAssistOptions->{"CodeToolsOptions"-><|
 "CodeInspect" -> <|
   "Tags" -> <|
     "UnexpectedLetterlikeCharacter" -> <|Enabled -> False|>|>|>|>},
FrontEndVersion->"13.2 for Linux x86 (64-bit) (December 7, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b2e34cb7-41f4-490f-838e-cf4fa00019f1"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "references"->{
  Cell[3846, 116, 4094, 61, 785, "Text",ExpressionUUID->"fdcddf3a-5c67-4f6c-942b-58d193f3ebb3",
   CellTags->"references"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"references", 3728533, 92333}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 98, "Title",ExpressionUUID->"9afea453-cc25-4c79-a71c-e5dfbdd1d324",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[743, 27, 308, 6, 60, "Text",ExpressionUUID->"615112f4-db50-4aab-b1c6-f617fbb0d2d1",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1054, 35, 187, 4, 36, "Text",ExpressionUUID->"4e44f443-be07-4aab-b2e3-346b3c4e2be1",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[1278, 44, 165, 4, 68, "Section",ExpressionUUID->"d8cfecff-afda-4dd1-b50c-05b0a8572010"],
Cell[1446, 50, 310, 7, 104, "Text",ExpressionUUID->"c5ddf8d2-d89f-4a90-8cbb-9616b54633e9"],
Cell[CellGroupData[{
Cell[1781, 61, 173, 7, 54, "Subsection",ExpressionUUID->"5ab1a0e8-d419-4628-8b9e-2ebe95d67c7b"],
Cell[1957, 70, 747, 13, 70, "Text",ExpressionUUID->"97123780-4ced-4e59-a65d-76df0236e407"],
Cell[2707, 85, 929, 17, 70, "Text",ExpressionUUID->"7c683e00-8827-40be-8e7d-038ae45de9ca"]
}, Closed]],
Cell[CellGroupData[{
Cell[3673, 107, 170, 7, 38, "Subsection",ExpressionUUID->"df23ec16-d2a7-4dbe-82f7-821dafb79d59"],
Cell[3846, 116, 4094, 61, 785, "Text",ExpressionUUID->"fdcddf3a-5c67-4f6c-942b-58d193f3ebb3",
 CellTags->"references"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7989, 183, 138, 4, 68, "Section",ExpressionUUID->"246089b4-9667-4177-8ba9-b641a2c1b982"],
Cell[8130, 189, 268, 4, 58, "Text",ExpressionUUID->"e45fff8b-d694-4e96-824b-c0d2bc44d02d"],
Cell[CellGroupData[{
Cell[8423, 197, 212, 7, 54, "Subsection",ExpressionUUID->"2610ed77-853f-41eb-98ea-89584ea30de3"],
Cell[8638, 206, 356, 9, 70, "Text",ExpressionUUID->"69f6482c-edd1-4cb9-a59b-819ce1daf925"],
Cell[CellGroupData[{
Cell[9019, 219, 133, 1, 70, "Input",ExpressionUUID->"c03170e6-d233-4851-9c4d-82d02f5c2293",
 Evaluatable->False],
Cell[9155, 222, 185, 2, 70, "Output",ExpressionUUID->"583bcd21-ee4f-4cab-b611-6e1486539603"]
}, Open  ]],
Cell[9355, 227, 206, 3, 70, "Text",ExpressionUUID->"0468086a-a29a-4898-8577-261219699f2b"],
Cell[CellGroupData[{
Cell[9586, 234, 375, 8, 70, "Input",ExpressionUUID->"1d8df92f-1bbd-4d47-bcbd-2c20a1c3a58b",
 Evaluatable->False],
Cell[9964, 244, 523, 7, 70, "Print",ExpressionUUID->"9384fc44-5ea3-4a7f-89cc-998ee6fa7169"]
}, Open  ]],
Cell[10502, 254, 266, 4, 70, "Text",ExpressionUUID->"f5afd523-ac2a-47b2-810f-166ed32d6a48"],
Cell[10771, 260, 259, 5, 70, "Input",ExpressionUUID->"f36a0a7f-b7a3-4027-95e8-bf37fd6ede29",
 Evaluatable->False],
Cell[11033, 267, 252, 5, 70, "Text",ExpressionUUID->"9b29f7bf-0560-475a-b323-3f7b8af8d744"],
Cell[CellGroupData[{
Cell[11310, 276, 111, 0, 70, "Subsubsection",ExpressionUUID->"904f0503-da29-4f1a-b4a0-869b5316e2c9"],
Cell[11424, 278, 1444, 22, 70, "Text",ExpressionUUID->"316209da-babf-4b86-9d9b-13ce12580169"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[12917, 306, 224, 7, 38, "Subsection",ExpressionUUID->"8d974aa8-a064-47d5-ae02-89ce99d96779"],
Cell[13144, 315, 351, 9, 70, "Text",ExpressionUUID->"d38dbf2a-4a2a-4d6f-8be4-b9934d77054e"],
Cell[13498, 326, 3044, 58, 70, "Text",ExpressionUUID->"2ff29d69-c109-424c-b7d0-796fe49bccc2"],
Cell[16545, 386, 441, 13, 70, "Input",ExpressionUUID->"8351f0c5-2162-4e7c-b33d-57f9728b1c5f",
 Evaluatable->False],
Cell[16989, 401, 601, 8, 70, "Text",ExpressionUUID->"ad1c4e6c-0e36-4471-8d1c-a7c7b20fcd6f"],
Cell[17593, 411, 443, 6, 70, "Text",ExpressionUUID->"3de50969-e4e5-49c7-bc8b-0712109c3114"],
Cell[18039, 419, 1869, 47, 70, "Input",ExpressionUUID->"45a0b0a1-0b54-4bab-aeb2-e3c97f729186",
 Evaluatable->False],
Cell[19911, 468, 192, 3, 70, "Input",ExpressionUUID->"05ff0ea3-e078-42bf-9da6-2875b3b1b48d",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[20140, 476, 209, 7, 38, "Subsection",ExpressionUUID->"a0a93512-3275-4b9a-99e6-70411fd0e935"],
Cell[20352, 485, 1037, 24, 70, "Text",ExpressionUUID->"719e9c23-5f02-41fd-9a19-8cbbf7325690"],
Cell[CellGroupData[{
Cell[21414, 513, 131, 0, 70, "Subsubsection",ExpressionUUID->"f596c1eb-5661-4b9f-93dc-9f17f2b7924f"],
Cell[21548, 515, 327, 5, 70, "Text",ExpressionUUID->"077012fb-06af-4966-824e-7c5c8f3a4365"],
Cell[CellGroupData[{
Cell[21900, 524, 180, 3, 70, "Input",ExpressionUUID->"450d29ef-22b3-4209-a631-e5451cefccd6",
 Evaluatable->False],
Cell[22083, 529, 842, 19, 70, "Output",ExpressionUUID->"f59ea091-020a-4f64-887f-5ecb9ce435c0"]
}, Open  ]],
Cell[22940, 551, 187, 3, 70, "Text",ExpressionUUID->"ba762656-3b4a-4adc-a874-2da7fe0b9836"],
Cell[CellGroupData[{
Cell[23152, 558, 341, 9, 70, "Input",ExpressionUUID->"64e2981c-ef8f-4568-8f83-65bbf03cf794",
 Evaluatable->False],
Cell[23496, 569, 1391, 36, 70, "Output",ExpressionUUID->"3d65e147-31c2-4018-aa40-99e6cfb48e51"]
}, Open  ]],
Cell[24902, 608, 568, 8, 70, "Text",ExpressionUUID->"da9b4a89-255e-4b88-85ab-899b50aa0aac"],
Cell[CellGroupData[{
Cell[25495, 620, 388, 10, 70, "Input",ExpressionUUID->"a0537915-cf9e-43f9-a4fb-b42cce4b9205",
 Evaluatable->False],
Cell[25886, 632, 452, 10, 70, "Output",ExpressionUUID->"2f6a2498-cb86-4b10-82e4-1fa3ea6bc3b1"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[26399, 649, 189, 7, 38, "Subsection",ExpressionUUID->"50f8bc01-2789-4fac-82fa-e8778037a4cc"],
Cell[26591, 658, 207, 3, 70, "Text",ExpressionUUID->"0e5b73d3-1786-42c2-bd01-d8f7bb285509"],
Cell[26801, 663, 737, 12, 70, "Text",ExpressionUUID->"635b9c7c-44f1-462d-8dac-28a8f0c190db"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[27587, 681, 131, 4, 68, "Section",ExpressionUUID->"2153a712-150f-4eab-9c82-4673c6899f50"],
Cell[27721, 687, 178, 4, 35, "Text",ExpressionUUID->"4ed2df02-7f07-4f85-b67a-c2615b4ed048"],
Cell[CellGroupData[{
Cell[27924, 695, 170, 7, 54, "Subsection",ExpressionUUID->"8d836bc1-612a-4ef7-bf7d-d3cc6865c1f5"],
Cell[28097, 704, 563, 9, 70, "Text",ExpressionUUID->"3e980c74-baf4-4688-b2c4-a6e143f018d9"],
Cell[28663, 715, 602, 15, 70, "Input",ExpressionUUID->"2ea5594d-cdde-4f43-b954-38dce8511373"],
Cell[29268, 732, 188, 4, 70, "Input",ExpressionUUID->"c7472096-2977-471b-a66b-7007ac37d9d0"],
Cell[29459, 738, 806, 21, 70, "Input",ExpressionUUID->"efdd2539-df2c-4265-9c81-b8c06d5390ad"],
Cell[30268, 761, 3451, 93, 70, "Input",ExpressionUUID->"6490e68b-4e3b-4310-85a0-8dff46ae47dc"],
Cell[33722, 856, 1188, 31, 70, "Input",ExpressionUUID->"3de305cf-bdc9-436e-96dd-36d4ca81524d"]
}, Closed]],
Cell[CellGroupData[{
Cell[34947, 892, 191, 7, 38, "Subsection",ExpressionUUID->"886b8993-5e4a-450e-8746-a36a2ff6b3b7"],
Cell[35141, 901, 382, 8, 70, "Input",ExpressionUUID->"9bde0319-c8e3-4153-adfc-0a0bcc9765ea"],
Cell[35526, 911, 85, 0, 70, "Text",ExpressionUUID->"209148b3-5465-4f8e-9b16-31b478270ba0"],
Cell[35614, 913, 725, 12, 70, "Input",ExpressionUUID->"689131d9-e6ae-4d7f-93c1-8251ee7378ce"],
Cell[36342, 927, 690, 11, 70, "Input",ExpressionUUID->"969608d4-b7a2-4f47-b859-ea4c3faafe00"],
Cell[37035, 940, 318, 6, 70, "Input",ExpressionUUID->"ff8edc3e-cbe9-4e2e-b189-db2ceb438dac"],
Cell[37356, 948, 361, 7, 70, "Input",ExpressionUUID->"d940baa7-7825-4b2a-8348-8edf4674876b"],
Cell[37720, 957, 157, 3, 70, "Input",ExpressionUUID->"e905e4d5-32c9-47a1-856d-3be2a433605a"],
Cell[37880, 962, 249, 6, 70, "Input",ExpressionUUID->"b08516fc-b2c7-439f-9d29-4458bfd5217d"],
Cell[CellGroupData[{
Cell[38154, 972, 251, 10, 70, "Subsubsection",ExpressionUUID->"00842a3b-eb89-4e00-95a1-b8b3c52ae039"],
Cell[38408, 984, 286, 4, 70, "Text",ExpressionUUID->"f06c4c80-376a-4c26-8dbb-338391a84f4d"],
Cell[38697, 990, 1147, 29, 70, "Input",ExpressionUUID->"98f71124-f634-4b49-9a2e-191c82343783"],
Cell[39847, 1021, 676, 11, 70, "Text",ExpressionUUID->"c802f3d0-0110-4e58-bff7-7d0112d2846d"],
Cell[40526, 1034, 548, 8, 70, "Text",ExpressionUUID->"234b8e39-659c-446d-8ce7-2b5a83ec26dc"],
Cell[41077, 1044, 629, 9, 70, "Text",ExpressionUUID->"fc5dae69-f1a1-4b2d-859f-69175461b3b4"],
Cell[41709, 1055, 336, 5, 70, "Text",ExpressionUUID->"21671e90-11ac-43fa-b7f3-43d4fab8c985"],
Cell[42048, 1062, 323, 5, 70, "Text",ExpressionUUID->"59d3ff1a-9d5a-483f-9024-0532d2d57226"],
Cell[42374, 1069, 508, 7, 70, "Text",ExpressionUUID->"462f1179-ebf5-4160-94f9-2a4b0671d595"],
Cell[42885, 1078, 566, 8, 70, "Text",ExpressionUUID->"2da9675f-c36c-4843-bc6f-fc8dd434b7b9"],
Cell[43454, 1088, 354, 8, 70, "Text",ExpressionUUID->"321e54c4-b843-4749-b258-7582a9b3e8a2"],
Cell[43811, 1098, 803, 19, 70, "Input",ExpressionUUID->"362f1c82-2248-4ec9-894e-99f37161f8e8"],
Cell[44617, 1119, 404, 8, 70, "Text",ExpressionUUID->"e0635e1e-ecb9-45a4-856e-914ccc3eee12"],
Cell[45024, 1129, 1218, 31, 70, "Input",ExpressionUUID->"0d7fe44c-ecd9-4d11-bffa-9cc051abc80a"]
}, Closed]],
Cell[CellGroupData[{
Cell[46279, 1165, 222, 10, 70, "Subsubsection",ExpressionUUID->"f6a096a7-1425-4c6f-8d23-dbbea21e4ac5"],
Cell[46504, 1177, 577, 9, 70, "Text",ExpressionUUID->"ba37dffc-0dc2-404e-ac1e-fc8db397ae3b"]
}, Closed]],
Cell[CellGroupData[{
Cell[47118, 1191, 239, 10, 70, "Subsubsection",ExpressionUUID->"5096be12-ace0-44fa-b8a3-9de2ef62f20e"],
Cell[47360, 1203, 260, 4, 70, "Text",ExpressionUUID->"96238029-9e09-4af6-82f1-9ee6c686782a"],
Cell[47623, 1209, 810, 22, 70, "Input",ExpressionUUID->"e16f7d9f-daa4-4d48-b697-87f357b8e236"],
Cell[48436, 1233, 105, 0, 70, "Text",ExpressionUUID->"a0ca8ad7-47ac-45ff-bbb0-1210c8f8d74b"],
Cell[48544, 1235, 1286, 34, 70, "Input",ExpressionUUID->"ae356dac-09c2-43e0-8723-ff5e6a3afd97"],
Cell[49833, 1271, 249, 4, 70, "Text",ExpressionUUID->"fab87387-fbd1-4864-bccf-1e217a792418"],
Cell[50085, 1277, 1367, 36, 70, "Input",ExpressionUUID->"b377dce3-2b6c-497c-8ef5-3d897d908b7c"],
Cell[51455, 1315, 213, 4, 70, "Text",ExpressionUUID->"ee6e59a7-2576-4efc-b346-e0f22834402a"],
Cell[51671, 1321, 4073, 99, 70, "Input",ExpressionUUID->"ea50a7fc-e727-42c7-ae57-a2ae490e087a"],
Cell[55747, 1422, 1613, 26, 70, "Text",ExpressionUUID->"417ba510-da07-4e45-87a1-7f6f904789a4"],
Cell[57363, 1450, 7396, 176, 70, "Input",ExpressionUUID->"ab9fc598-2b64-4d63-bca3-4e9df4d4155b"],
Cell[64762, 1628, 105, 1, 70, "Input",ExpressionUUID->"8ca3371e-a1b9-4bfd-8029-b24ddccc344c"],
Cell[64870, 1631, 732, 11, 70, "Text",ExpressionUUID->"3df23eac-ddb3-4df8-823a-18ff99fad35a"],
Cell[65605, 1644, 572, 14, 70, "Input",ExpressionUUID->"8eef5456-5c8f-4b15-8a01-d74290a5c1be",
 Evaluatable->False],
Cell[66180, 1660, 5939, 157, 70, "Input",ExpressionUUID->"1f352330-e1b0-4e2d-9663-2b2ca3edf519",
 Evaluatable->False],
Cell[72122, 1819, 118, 0, 70, "Text",ExpressionUUID->"f8f9d239-e452-4002-856e-98589d10fdf2"],
Cell[72243, 1821, 1429, 38, 70, "Input",ExpressionUUID->"cca45989-e797-4375-b5ce-b4868ab2502a",
 Evaluatable->False],
Cell[73675, 1861, 232, 3, 70, "Text",ExpressionUUID->"e8d60444-43a0-4619-b21f-309ec1cce6c8"],
Cell[73910, 1866, 406, 11, 70, "Input",ExpressionUUID->"62479c4e-6300-4734-abf3-c75c2ad30ad8",
 Evaluatable->False],
Cell[74319, 1879, 148, 2, 70, "Text",ExpressionUUID->"61f866fe-d482-457b-899f-32b26a02df12"],
Cell[74470, 1883, 664, 21, 70, "Input",ExpressionUUID->"176d2bfa-2718-434f-b6cc-a57882833bfc"],
Cell[75137, 1906, 124, 0, 70, "Text",ExpressionUUID->"c59f6e9b-fbfa-422c-85ad-17695fa60deb"],
Cell[75264, 1908, 462, 11, 70, "Input",ExpressionUUID->"0b1a7995-cc1c-438a-8d56-2c046b10dcd9"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[75775, 1925, 163, 7, 38, "Subsection",ExpressionUUID->"ca56193e-0ba3-4dce-b13c-b55cbbada6f2"],
Cell[75941, 1934, 329, 5, 70, "Text",ExpressionUUID->"9ce94b90-a686-4389-845f-903099a323aa"],
Cell[76273, 1941, 830, 21, 70, "Text",ExpressionUUID->"99ec54da-9587-461e-b217-9fc9885edc68"],
Cell[77106, 1964, 155, 3, 70, "Input",ExpressionUUID->"7a3e4512-ad6f-4c43-8978-a4236ff4b828"],
Cell[77264, 1969, 209, 4, 70, "Input",ExpressionUUID->"f198b81e-89e0-458b-a801-f0606d52083a"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77522, 1979, 194, 5, 68, "Section",ExpressionUUID->"d373e055-74a0-4e3d-a30c-88ebbd8d41d2"],
Cell[77719, 1986, 317, 6, 58, "Text",ExpressionUUID->"d80b2b4e-d28d-44ca-98cc-040c244ce09a"],
Cell[78039, 1994, 1420, 24, 195, "Input",ExpressionUUID->"00dbf0b9-27f4-4d3d-8a2f-67d8c132381b"],
Cell[79462, 2020, 304, 5, 29, "Input",ExpressionUUID->"046ba6a5-0d69-44bf-a93d-407098ab79f6"],
Cell[79769, 2027, 85, 0, 35, "Text",ExpressionUUID->"d0948ae5-2b71-4371-8bb1-6e52adbba70e"],
Cell[79857, 2029, 482, 9, 94, "Input",ExpressionUUID->"d08ad10e-f0be-4189-b482-588b253e92d6"],
Cell[80342, 2040, 462, 8, 94, "Input",ExpressionUUID->"9acbf8b2-cf52-4115-afce-ad1aa345db21"],
Cell[80807, 2050, 366, 7, 51, "Input",ExpressionUUID->"fa9d863d-a079-48d9-9b18-7fa6b71394c4"],
Cell[81176, 2059, 606, 15, 51, "Input",ExpressionUUID->"f64c5108-a8b9-40db-819a-ba603303f8a4"],
Cell[81785, 2076, 379, 7, 72, "Input",ExpressionUUID->"4f3e3998-2990-430a-9853-2f45a85fd723"],
Cell[82167, 2085, 599, 10, 94, "Input",ExpressionUUID->"d99ece2b-d78f-4194-a6a5-3768a0d86550"],
Cell[82769, 2097, 491, 9, 94, "Input",ExpressionUUID->"d58bce33-3cc2-48af-bddd-e6d7e5406aa0"],
Cell[83263, 2108, 317, 7, 32, "Input",ExpressionUUID->"76ebcf02-c23b-48d2-bc48-439f67e686f5"],
Cell[83583, 2117, 315, 6, 32, "Input",ExpressionUUID->"1bb27943-b18c-48ef-8958-15354bf96edb"],
Cell[83901, 2125, 1441, 22, 221, "Input",ExpressionUUID->"19ef61f1-a9ea-4553-b9ca-c21746df2272"],
Cell[85345, 2149, 353, 7, 51, "Input",ExpressionUUID->"45b93db7-3f74-42b0-9eb1-2b294050391b"],
Cell[85701, 2158, 863, 14, 115, "Input",ExpressionUUID->"9d6e1a9f-5a54-4665-8a7e-b08d21740e87"],
Cell[86567, 2174, 656, 10, 94, "Input",ExpressionUUID->"aec74edf-7862-4675-80f0-a71125a7912a"],
Cell[87226, 2186, 243, 6, 32, "Input",ExpressionUUID->"f74e8daa-730b-4ad3-b780-3f9fed38d3d7"],
Cell[87472, 2194, 350, 7, 51, "Input",ExpressionUUID->"d90cd20d-f281-477a-97e2-7d4c8b1375f0"],
Cell[87825, 2203, 354, 7, 51, "Input",ExpressionUUID->"7bb06143-1a49-4c36-b4f6-a18cbd10dcb9"],
Cell[88182, 2212, 364, 8, 51, "Input",ExpressionUUID->"f4e33292-dfce-4ce8-8c67-fba4131bc8a3"],
Cell[88549, 2222, 375, 7, 72, "Input",ExpressionUUID->"4263cef4-73b4-4158-aded-a9ee4a2a1f8e"],
Cell[88927, 2231, 337, 7, 32, "Input",ExpressionUUID->"0990dc1f-a39b-41de-bc74-8378983549f4"],
Cell[89267, 2240, 671, 11, 94, "Input",ExpressionUUID->"2dd93f57-82ea-412c-bf27-adc1246f5ffa"],
Cell[89941, 2253, 201, 5, 29, "Input",ExpressionUUID->"76637aad-cf78-4bbe-96fa-01430e35fe5e"],
Cell[90145, 2260, 875, 15, 136, "Input",ExpressionUUID->"444e41b8-8a9c-47fb-8999-ee70ab13bc93"],
Cell[91023, 2277, 262, 6, 32, "Input",ExpressionUUID->"aea22571-b444-4683-9209-781394b7b30d"],
Cell[91288, 2285, 489, 11, 53, "Input",ExpressionUUID->"c6492878-05ab-4836-9178-3d3b8c83534f"],
Cell[91780, 2298, 330, 7, 32, "Input",ExpressionUUID->"a3466567-27dd-4318-8ec2-d5c7fed5e695"],
Cell[92113, 2307, 570, 10, 94, "Input",ExpressionUUID->"144790d8-c40a-412a-a1e8-f0c1369d8173"],
Cell[92686, 2319, 264, 6, 32, "Input",ExpressionUUID->"1d253ce2-0b3f-4399-b487-c24478f63206"],
Cell[92953, 2327, 256, 6, 32, "Input",ExpressionUUID->"cd5ec600-4fe6-4392-94f7-1a1d8229041b"],
Cell[93212, 2335, 403, 8, 72, "Input",ExpressionUUID->"97c8bcce-6b8f-48ed-b8ee-79e4fea19e0a"],
Cell[93618, 2345, 461, 8, 53, "Input",ExpressionUUID->"1ecb4567-8071-4285-93b8-cf2e01c34dd4"],
Cell[94082, 2355, 377, 7, 72, "Input",ExpressionUUID->"72eab6d7-a2ee-4ed2-9274-9a2db3d6c9ed"],
Cell[94462, 2364, 438, 8, 72, "Input",ExpressionUUID->"b231e4ab-2317-4e77-bae3-d0a56f812e37"],
Cell[94903, 2374, 607, 10, 93, "Input",ExpressionUUID->"d5a35528-e299-46de-b45a-95f3881b11c9"],
Cell[95513, 2386, 260, 4, 35, "Text",ExpressionUUID->"77917a17-4851-402a-b60b-2b5b66a4097b"],
Cell[95776, 2392, 229, 5, 32, "Input",ExpressionUUID->"c64278f2-0725-4ed8-9173-115917a6f24e"],
Cell[96008, 2399, 157, 3, 29, "Input",ExpressionUUID->"9b2388e2-395c-42f6-9c10-0fd1072d4e1e"],
Cell[CellGroupData[{
Cell[96190, 2406, 182, 7, 54, "Subsection",ExpressionUUID->"575a4778-1d41-4eb0-a884-bb2a8a6d44a6"],
Cell[CellGroupData[{
Cell[96397, 2417, 210, 10, 45, "Subsubsection",ExpressionUUID->"9f5198d3-924b-4335-87c2-d9497bfbb414"],
Cell[96610, 2429, 317, 7, 70, "Text",ExpressionUUID->"46576a84-e290-4998-b543-ca390eef2ea8",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[96930, 2438, 705, 18, 70, "Input",ExpressionUUID->"d150b294-1328-4def-a4e5-e1bcaf5ffe9d",
 Evaluatable->False],
Cell[97638, 2458, 94, 0, 70, "Text",ExpressionUUID->"982d5351-e9bb-44e4-a815-d0776200de1d"],
Cell[97735, 2460, 182, 4, 70, "Input",ExpressionUUID->"aa960293-0ff2-4507-a694-1a26181880b3"],
Cell[97920, 2466, 189, 5, 70, "Text",ExpressionUUID->"50699e74-a9e3-4262-95e3-a427a6b04eec"],
Cell[98112, 2473, 1597, 41, 70, "Input",ExpressionUUID->"24c4d90d-45ad-4fb0-82ec-75761d9b8c4e"],
Cell[99712, 2516, 131, 2, 70, "Text",ExpressionUUID->"97fbaf5d-6474-46f4-bf40-03598db3439b"],
Cell[99846, 2520, 536, 11, 70, "Text",ExpressionUUID->"bfb4a716-d01c-46b6-a382-a3fdbb4d9f8f"],
Cell[100385, 2533, 198, 5, 70, "Text",ExpressionUUID->"21937f38-b479-494e-947c-952383679990"],
Cell[100586, 2540, 6419, 161, 70, "Input",ExpressionUUID->"60455b28-a2ec-4c1e-a7d8-30622a7fd8d4"],
Cell[107008, 2703, 131, 2, 70, "Text",ExpressionUUID->"50c373e7-fc5a-49fa-a936-c06fd2cafff0"],
Cell[107142, 2707, 386, 6, 70, "Text",ExpressionUUID->"c4830ec1-fd76-4d0d-9834-e97bfe72d90b"],
Cell[107531, 2715, 1275, 32, 70, "Input",ExpressionUUID->"0de20e67-fe79-4994-b468-cf99d0d4982a"],
Cell[108809, 2749, 161, 3, 70, "Text",ExpressionUUID->"2393b299-a3ec-4801-9c5f-891709a4b530"],
Cell[108973, 2754, 1190, 31, 70, "Input",ExpressionUUID->"a6cf4b69-de2f-45f4-afba-ca55c9be78b4"],
Cell[110166, 2787, 5585, 136, 70, "Input",ExpressionUUID->"c51d0f53-2390-4054-857d-d4dd787b7f35"],
Cell[115754, 2925, 244, 4, 70, "Text",ExpressionUUID->"2d76b753-c54e-444b-8a93-8d28a00c6316"],
Cell[116001, 2931, 9947, 229, 70, "Input",ExpressionUUID->"cf67761d-740a-4230-b849-812662090eee"],
Cell[125951, 3162, 174, 3, 70, "Text",ExpressionUUID->"848cdddc-1819-4413-8827-9bd8a15aa6b2"],
Cell[126128, 3167, 563, 16, 70, "Input",ExpressionUUID->"fd8be902-4eeb-447b-997a-a40e584f8d94"],
Cell[126694, 3185, 175, 4, 70, "Text",ExpressionUUID->"4de7e83f-1926-44aa-9587-82222c3bcda5"],
Cell[126872, 3191, 811, 15, 70, "Text",ExpressionUUID->"cf55662e-7e87-45ba-b87e-85232764dd15"],
Cell[127686, 3208, 476, 10, 70, "Text",ExpressionUUID->"98b8bce6-162c-408c-a832-517713d52368"],
Cell[128165, 3220, 580, 13, 70, "Input",ExpressionUUID->"66b24610-a2fc-4ad2-9487-c48051bd23f9"],
Cell[128748, 3235, 3375, 87, 70, "Input",ExpressionUUID->"dd0fd207-8b82-46cc-b663-036cb8769c5b"],
Cell[132126, 3324, 209, 3, 70, "Text",ExpressionUUID->"9aa7f018-416a-4d25-a81f-6c737aeb1ccb"],
Cell[132338, 3329, 353, 11, 70, "Input",ExpressionUUID->"2bc1a2f2-bce4-44e7-a36d-a47ec8f70844"]
}, Closed]],
Cell[CellGroupData[{
Cell[132728, 3345, 229, 11, 37, "Subsubsection",ExpressionUUID->"e65b5705-e5f5-4a7f-af30-64b28ac054fc"],
Cell[132960, 3358, 121, 2, 70, "Text",ExpressionUUID->"aafc3bc8-bc13-475d-89a1-3cbbaa6d0222"],
Cell[133084, 3362, 255, 6, 70, "Text",ExpressionUUID->"ee6454dc-99ee-428d-951f-1b08348379c0",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[133342, 3370, 290, 8, 70, "Input",ExpressionUUID->"09eb6667-043c-4487-a35c-1cfac1fb086e",
 CellID->1126827235],
Cell[133635, 3380, 174, 3, 70, "Text",ExpressionUUID->"89d084f4-4ec1-48de-9f1b-3d08c7af00e6",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[133812, 3385, 2791, 72, 70, "Input",ExpressionUUID->"f0674546-8c57-4c57-8ef2-5f23bb0f9f76"],
Cell[136606, 3459, 119, 2, 70, "Text",ExpressionUUID->"2fb28224-3a32-4c41-87e0-0934940fc98d"],
Cell[136728, 3463, 906, 26, 70, "Text",ExpressionUUID->"cdaf6078-668a-40e6-83f2-2e6f9c259342",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[137637, 3491, 308, 4, 70, "Text",ExpressionUUID->"08d2ba17-10dc-439e-9f4c-7b08a57d86b7"],
Cell[137948, 3497, 1120, 18, 70, "Text",ExpressionUUID->"904f9925-3fac-4e0b-8d39-48b210a2ce7d"],
Cell[CellGroupData[{
Cell[139093, 3519, 350, 7, 70, "Text",ExpressionUUID->"4a6e11a8-20c4-43b3-980f-903d53923693",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[139446, 3528, 1877, 53, 70, "Text",ExpressionUUID->"b941d9ce-16da-4bbb-832f-1590bb457d0e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[141338, 3584, 5561, 137, 70, "Input",ExpressionUUID->"26b68dd9-b24d-4adc-a1c6-32b1ebcfcba8"],
Cell[146902, 3723, 230, 4, 70, "Text",ExpressionUUID->"9aca7a27-9cca-431d-9195-df4d5219f35d"],
Cell[147135, 3729, 3156, 78, 70, "Input",ExpressionUUID->"1bf757b5-7416-42f6-afa4-f22ede33f7a1"],
Cell[150294, 3809, 234, 6, 70, "Text",ExpressionUUID->"4c6bc7ca-c397-4508-81c5-393c84211952",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[150531, 3817, 2103, 62, 70, "Input",ExpressionUUID->"0260a9ad-0110-4768-bd70-055f3af9cb12"],
Cell[152637, 3881, 143, 2, 70, "Text",ExpressionUUID->"c5204a6a-0225-4cc8-91b5-74bddca7f436"],
Cell[152783, 3885, 2045, 48, 70, "Input",ExpressionUUID->"1f53ee80-41f3-4df8-a4e8-bab5fcaf9829"],
Cell[154831, 3935, 179, 3, 70, "Text",ExpressionUUID->"141420c7-b8ea-457a-ba63-68425c5159c4"],
Cell[155013, 3940, 469, 12, 70, "Input",ExpressionUUID->"c7a7198d-9844-4d88-8629-fe276363fb8c"]
}, Closed]],
Cell[CellGroupData[{
Cell[155519, 3957, 317, 12, 37, "Subsubsection",ExpressionUUID->"3c75efe5-cff0-400d-855c-5e1ea4f8d304"],
Cell[155839, 3971, 688, 17, 70, "Text",ExpressionUUID->"8f0b1dba-e885-4c6f-adc0-24d3d599fda7",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[156530, 3990, 2915, 75, 70, "Input",ExpressionUUID->"c2cf8625-8c29-4a4b-b689-9ec5714f4ee1"],
Cell[159448, 4067, 153, 2, 70, "Text",ExpressionUUID->"9bbbebc6-f998-478e-9139-2a3a355e9966"],
Cell[159604, 4071, 3711, 92, 70, "Input",ExpressionUUID->"7a1342dd-4a69-4a8d-8430-b38e8494db85"],
Cell[163318, 4165, 141, 2, 70, "Text",ExpressionUUID->"06c8788e-fede-42bc-be23-fb77d06d8300"],
Cell[163462, 4169, 2976, 74, 70, "Input",ExpressionUUID->"8cd5315f-5b76-49b7-b876-281431f52969"],
Cell[166441, 4245, 140, 2, 70, "Text",ExpressionUUID->"f299dd7c-0e27-4ac0-b1ef-28e7c1325a88"],
Cell[166584, 4249, 310, 8, 70, "Text",ExpressionUUID->"982f37f6-d845-4f00-8abb-0f9df2a05ae1",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[166897, 4259, 6413, 153, 70, "Input",ExpressionUUID->"3733995d-f379-477d-8bc0-b765819a346d"],
Cell[173313, 4414, 152, 2, 70, "Text",ExpressionUUID->"9d2bbeca-200f-40fa-8ef2-a31bb63a2bcb"],
Cell[173468, 4418, 621, 14, 70, "Text",ExpressionUUID->"952e2f0c-5092-44cd-b803-146352e13bcd",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[174092, 4434, 1570, 45, 70, "Input",ExpressionUUID->"18803abb-da1d-417e-9db0-45e5560c28fc"]
}, Closed]],
Cell[CellGroupData[{
Cell[175699, 4484, 319, 14, 37, "Subsubsection",ExpressionUUID->"d4882fb5-f621-4b24-8f62-ead97d7ff155"],
Cell[176021, 4500, 236, 4, 70, "Text",ExpressionUUID->"53338077-23cc-42b6-8f35-1213cf10944a"],
Cell[176260, 4506, 2926, 75, 70, "Input",ExpressionUUID->"ecab1246-33bf-42fd-9efd-adfa732c965e"],
Cell[179189, 4583, 201, 7, 70, "Text",ExpressionUUID->"4f14947a-5c8d-403e-9859-c7ad7fd6c7b8"],
Cell[179393, 4592, 819, 26, 70, "Text",ExpressionUUID->"dc9b7870-2767-421a-80a3-eeed2d488801"],
Cell[180215, 4620, 351, 8, 70, "Input",ExpressionUUID->"a5625491-4e89-4c8a-b49a-6e6b01f26fd7"],
Cell[180569, 4630, 38622, 799, 70, "Input",ExpressionUUID->"bf02247b-d677-4f12-9775-0548653185ff"],
Cell[219194, 5431, 408, 8, 70, "Text",ExpressionUUID->"a215171a-d865-40bb-9058-9f62d26c451b"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[219651, 5445, 207, 7, 54, "Subsection",ExpressionUUID->"8ebdc9e3-b1e6-49fc-a3b6-be8285d6f741"],
Cell[CellGroupData[{
Cell[219883, 5456, 222, 10, 45, "Subsubsection",ExpressionUUID->"a45c58c1-8a12-438d-8f9c-8ef477ef3f8e"],
Cell[220108, 5468, 284, 6, 70, "Text",ExpressionUUID->"f44a03f6-60f2-46e1-8d73-126fdb53c0f5",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[220395, 5476, 595, 16, 70, "Input",ExpressionUUID->"4f9d55b1-3ba1-40f9-be18-c0a05c8894b6",
 Evaluatable->False],
Cell[220993, 5494, 1786, 48, 70, "Input",ExpressionUUID->"32d0b600-1f15-474d-ad3b-f0523618fb95"],
Cell[CellGroupData[{
Cell[222804, 5546, 147, 3, 70, "Item",ExpressionUUID->"355b6c00-ac2e-4250-932a-92aa4739dafe",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[222954, 5551, 640, 19, 70, "Text",ExpressionUUID->"c0732ef1-c401-426b-aa1f-bcc5268842cb",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[223597, 5572, 1277, 37, 70, "Input",ExpressionUUID->"79394e91-c038-45f9-a338-56c57ae3bbc6",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[224877, 5611, 897, 19, 70, "Text",ExpressionUUID->"3d2ffe28-8ccb-4398-8c76-af639ed61f4a",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[225777, 5632, 4320, 105, 70, "Input",ExpressionUUID->"addeb727-b8e6-4b77-ba2c-a9a92ca0e760",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[230100, 5739, 647, 19, 70, "Text",ExpressionUUID->"458fccd4-1973-4a13-b7b1-95fb2250fa1d",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[230750, 5760, 1279, 37, 70, "Input",ExpressionUUID->"a6829ea1-b2d9-49fc-9701-89c3c692948d",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[232032, 5799, 937, 21, 70, "Text",ExpressionUUID->"240b7621-241f-4814-a3f6-024c7ad7648b",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[232972, 5822, 4350, 107, 70, "Input",ExpressionUUID->"81684214-4201-4ff5-883a-2c81dade93e1",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[237325, 5931, 647, 19, 70, "Text",ExpressionUUID->"2ff79d8d-5be9-458d-a385-8dc54813b925",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[237975, 5952, 1279, 37, 70, "Input",ExpressionUUID->"6c9081ba-f5d8-4994-8ed8-7b67bf972ac6",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[239257, 5991, 4190, 104, 70, "Input",ExpressionUUID->"e7faed67-141f-4926-bb46-f89604974415",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[243450, 6097, 651, 19, 70, "Text",ExpressionUUID->"f39303db-d1db-410f-b754-44684e92d74b",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[244104, 6118, 1306, 37, 70, "Input",ExpressionUUID->"75441b51-d6c5-44bb-9e51-a6cea373e038",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[245413, 6157, 937, 21, 70, "Text",ExpressionUUID->"017a87be-074f-4bb0-8b4d-2e0933902804",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[246353, 6180, 4359, 107, 70, "Input",ExpressionUUID->"66fe8a24-2571-40f4-876c-7dd369d90036",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[250749, 6292, 155, 3, 70, "Item",ExpressionUUID->"00768868-8bf6-4399-bd6b-90126ec3154f",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[250907, 6297, 164, 3, 70, "Text",ExpressionUUID->"9626474e-f5da-41a1-82ea-4fec3498faa4",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[251074, 6302, 824, 22, 70, "Input",ExpressionUUID->"9912a0d6-e726-4395-9d85-8c930c75443d",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[251901, 6326, 779, 16, 70, "Text",ExpressionUUID->"442d8e11-1ab9-4cc4-bbda-f911327bd915",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[252683, 6344, 16263, 398, 70, "Input",ExpressionUUID->"bebf2a99-d950-4ae3-a828-9ce4bd97e569",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[268983, 6747, 163, 3, 70, "Item",ExpressionUUID->"8b4ba894-5f95-496a-a32a-2214c0214e4d",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[269149, 6752, 164, 3, 70, "Text",ExpressionUUID->"359c28d6-a497-4b9a-8034-76c605ca0f4a",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[269316, 6757, 798, 21, 70, "Input",ExpressionUUID->"03793bac-a42e-424e-b255-789a7264e5f1",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[270117, 6780, 16241, 398, 70, "Input",ExpressionUUID->"1d65b70e-be39-47ca-8a60-0195eb77e1b2",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[286361, 7180, 901, 17, 70, "Text",ExpressionUUID->"3301732d-7446-466c-bc73-99b95d191cc5",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[287299, 7202, 223, 6, 70, "Item",ExpressionUUID->"5a5f425b-3309-483f-aad1-c6edac30e3b3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[287525, 7210, 220, 6, 70, "Text",ExpressionUUID->"307e8066-5055-457b-ab05-69b06ce856e6",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[287748, 7218, 10383, 266, 70, "Input",ExpressionUUID->"64d5f5c5-2aaa-4d95-9595-238133080adb",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[298134, 7486, 3198, 76, 70, "Input",ExpressionUUID->"8eef9ec3-b209-4dce-8a8f-bc488687b41a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[301335, 7564, 2836, 76, 70, "Input",ExpressionUUID->"d4a4408c-3db7-4304-abd4-3e662989cbce",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[304174, 7642, 1504, 42, 70, "Input",ExpressionUUID->"424892f9-44de-4517-8210-b7556db67f9f",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[305681, 7686, 1505, 42, 70, "Input",ExpressionUUID->"7d499801-7707-470a-b17b-62f52a80733b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[307189, 7730, 830, 18, 70, "Text",ExpressionUUID->"fdaf5c03-1347-47a4-ba28-af9098c137ae",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[308022, 7750, 1259, 34, 70, "Input",ExpressionUUID->"447a6565-d17f-4815-a1ac-db6008a2e5b5",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[309284, 7786, 1676, 45, 70, "Input",ExpressionUUID->"42e4153a-ae53-4955-96a9-90c9a59c29e3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[310963, 7833, 2377, 62, 70, "Input",ExpressionUUID->"1324cd74-5edb-497d-9883-a75e299b6560",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[313343, 7897, 809, 17, 70, "Text",ExpressionUUID->"439390e9-0bfb-4562-89bc-7e7e04d18f0b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[314155, 7916, 1268, 35, 70, "Input",ExpressionUUID->"522bf9aa-61cc-4df3-8e76-02d86f2c1771",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[315426, 7953, 1658, 45, 70, "Input",ExpressionUUID->"a5bfbbba-7abc-4705-b018-de5b373bd5d1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[317087, 8000, 2358, 62, 70, "Input",ExpressionUUID->"0e12fbb5-4861-43c6-a3a0-1692f5aeb132",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[319448, 8064, 460, 12, 70, "Text",ExpressionUUID->"bffa6eab-6128-47e3-a941-21a4d5d221f3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[319911, 8078, 1436, 37, 70, "Input",ExpressionUUID->"7d7ee2cc-7599-49d1-b8f0-4d296dbe707e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[321350, 8117, 256, 6, 70, "Text",ExpressionUUID->"fb84627e-5356-4d4b-ad85-fc761581c067",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[321609, 8125, 1954, 54, 70, "Input",ExpressionUUID->"3e4b9f1c-899b-4dc6-95e1-c1f98a6c80af",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[323566, 8181, 553, 13, 70, "Text",ExpressionUUID->"7101ff3f-c272-497f-8b43-0c126c1f8c2d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[324122, 8196, 1379, 38, 70, "Input",ExpressionUUID->"eeafc362-b1a2-4501-a3f5-1405692a6781",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[325504, 8236, 343, 10, 70, "Text",ExpressionUUID->"00f31b6e-df08-4082-940c-fd0bba862c8a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[325850, 8248, 955, 28, 70, "Input",ExpressionUUID->"fb57f780-cc6a-4a45-ad46-56323795d1e2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[326808, 8278, 168, 3, 70, "Text",ExpressionUUID->"d6b30169-d098-4738-9689-0bf2d9efa5cd",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[326979, 8283, 4388, 112, 70, "Input",ExpressionUUID->"9017cb67-e252-44f4-8043-67b55ea001ff",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[331370, 8397, 1039, 24, 70, "Text",ExpressionUUID->"58e1d979-4c15-4e97-a74d-ef60bc1a1a6d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[332446, 8426, 390, 8, 70, "Item",ExpressionUUID->"0be1fbab-1dec-4f1a-b929-25d65090157b",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[332839, 8436, 449, 11, 70, "Text",ExpressionUUID->"bfad9668-b459-4757-aab2-88f5969b0d50",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[333291, 8449, 1274, 36, 70, "Input",ExpressionUUID->"8bb530dc-95aa-4b6a-8019-f4ee2256ac74",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[334568, 8487, 2959, 72, 70, "Input",ExpressionUUID->"cb1a5e06-d6dd-45fe-ba9e-be34aa0cf8a8",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[337576, 8565, 245, 10, 37, "Subsubsection",ExpressionUUID->"e2a96baa-47f0-4f92-bf63-74067dd81ef8"],
Cell[337824, 8577, 416, 11, 70, "Text",ExpressionUUID->"92a19aa5-4a51-410d-ad5c-aa36f3a43068",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[338243, 8590, 27679, 650, 70, "Input",ExpressionUUID->"18bb5eec-fbd6-4a59-bf3e-88fd4576ad9d"],
Cell[365925, 9242, 261, 6, 70, "Text",ExpressionUUID->"22f3e9c8-f094-4909-9d84-8f7b93d0633f",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[366189, 9250, 529, 14, 70, "Input",ExpressionUUID->"963855c4-541e-4962-a13e-6cd0fd3db19c"],
Cell[366721, 9266, 486, 15, 70, "Text",ExpressionUUID->"3bf21853-2a3c-425b-975a-66491ac3c9cb",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[367210, 9283, 3194, 79, 70, "Input",ExpressionUUID->"2e867d9e-b84d-44df-b321-752805289dec"],
Cell[370407, 9364, 246, 6, 70, "Text",ExpressionUUID->"d0f46017-df4c-4e74-adfc-24cc842507cf",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[370656, 9372, 2094, 53, 70, "Input",ExpressionUUID->"891e92eb-0e8f-4778-b80e-0726d2bdd370"],
Cell[372753, 9427, 388, 8, 70, "Text",ExpressionUUID->"de712913-f2e9-46aa-a0d6-3935ff236d1f",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[373144, 9437, 1054, 29, 70, "Input",ExpressionUUID->"0cbdb0de-81c5-4f15-a297-5aba9bf92b1f"],
Cell[374201, 9468, 235, 6, 70, "Text",ExpressionUUID->"f16f3342-1ae9-422b-86ef-3db5eea94953",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[374439, 9476, 804, 22, 70, "Input",ExpressionUUID->"4cc8fd4a-8df5-41ec-bab6-77b2a0f8c40b"],
Cell[375246, 9500, 304, 8, 70, "Input",ExpressionUUID->"8961b14f-de07-4c5b-863a-23681ba40b32"],
Cell[375553, 9510, 6153, 151, 70, "Input",ExpressionUUID->"d171401d-1cc5-451a-b673-d54f8189f23b"]
}, Closed]],
Cell[CellGroupData[{
Cell[381743, 9666, 221, 10, 37, "Subsubsection",ExpressionUUID->"b7167849-e29f-4adb-b633-7d62b9f2acf5"],
Cell[381967, 9678, 409, 8, 70, "Text",ExpressionUUID->"52d4e086-26ba-4e5c-b802-26ca6d77afe7",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[382379, 9688, 291, 4, 70, "Text",ExpressionUUID->"77a4d372-f3de-4fb6-a8ac-3b0360093a29"],
Cell[382673, 9694, 581, 10, 70, "Text",ExpressionUUID->"930e2f45-aa74-492c-bddb-51ea41f22bb0"],
Cell[383257, 9706, 111, 0, 70, "Text",ExpressionUUID->"615e2e5e-1158-44d3-ae93-14baac1f2249"],
Cell[383371, 9708, 7886, 211, 70, "Input",ExpressionUUID->"f17c5dca-4d8f-464d-9fb8-dee3be310239"]
}, Closed]],
Cell[CellGroupData[{
Cell[391294, 9924, 250, 10, 37, "Subsubsection",ExpressionUUID->"678624ab-5cd1-4468-a812-34f05aac1122"],
Cell[391547, 9936, 455, 10, 70, "Text",ExpressionUUID->"5647c695-e310-4afc-b287-bedd7e8cb38c",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[392005, 9948, 521, 16, 70, "Input",ExpressionUUID->"37eee292-7004-4ffd-a5f0-59a1bd2bb2a2"],
Cell[392529, 9966, 6240, 160, 70, "Input",ExpressionUUID->"a9324bd4-cf17-4377-8267-91d6b66ce402"],
Cell[398772, 10128, 386, 11, 70, "Input",ExpressionUUID->"29322bb0-1061-49be-a19d-3f168a8beac0"],
Cell[399161, 10141, 277, 6, 70, "Text",ExpressionUUID->"4c898f74-0efd-484d-a8f0-4d0bb03ac6bf",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[399441, 10149, 424, 10, 70, "Input",ExpressionUUID->"dfb27d82-fd59-4521-b786-57075af8ae74"],
Cell[399868, 10161, 162, 3, 70, "Text",ExpressionUUID->"083c9b66-babf-4219-946d-3dd5d8a7a275",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[400033, 10166, 1168, 33, 70, "Input",ExpressionUUID->"12a78ab1-a7c7-4c33-b26c-5f6c2b7f6881"],
Cell[401204, 10201, 386, 11, 70, "Input",ExpressionUUID->"a664e352-b281-4ecd-9b0f-507a41fe2fe3"],
Cell[401593, 10214, 274, 4, 70, "Text",ExpressionUUID->"a597b444-f8d8-46f3-9342-16293deb9f93"],
Cell[401870, 10220, 159, 4, 70, "Input",ExpressionUUID->"84181645-666d-4bbb-a3da-362a3bd0e096"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[402090, 10231, 140, 4, 68, "Section",ExpressionUUID->"94c9fa84-bdb6-442c-a5ee-d807e475d8b6"],
Cell[402233, 10237, 417, 7, 58, "Text",ExpressionUUID->"2689dbbd-e650-448b-9602-cff530178fa6"],
Cell[402653, 10246, 1637, 31, 139, "Input",ExpressionUUID->"9a2c2391-ceee-499a-b866-8da8b79af742"],
Cell[404293, 10279, 409, 9, 51, "Input",ExpressionUUID->"4fb5f8c7-76ef-42b6-a8e7-1218b29d146c"],
Cell[404705, 10290, 85, 0, 35, "Text",ExpressionUUID->"7c389cbc-04be-44b6-b532-be981c4a0f38"],
Cell[404793, 10292, 192, 5, 35, "Text",ExpressionUUID->"079f0941-ea2f-40ea-84ea-5d0e245b88d7"],
Cell[404988, 10299, 546, 11, 58, "Text",ExpressionUUID->"fa4f22a7-e1ec-460a-be5c-68894c0fef32"],
Cell[405537, 10312, 290, 7, 32, "Input",ExpressionUUID->"382ceea2-835b-4689-846a-4d7f7a06c67a"],
Cell[405830, 10321, 284, 7, 32, "Input",ExpressionUUID->"276b40a7-5ee4-41c3-9cc9-1efff3b5e528"],
Cell[406117, 10330, 285, 7, 32, "Input",ExpressionUUID->"b0f86863-a141-42cb-af65-ee645befd0b5"],
Cell[406405, 10339, 275, 7, 32, "Input",ExpressionUUID->"619bd5f9-aeca-4a9c-b6eb-358ff2cd95a1"],
Cell[406683, 10348, 493, 10, 72, "Input",ExpressionUUID->"c8662328-e4ed-4e92-9f3d-f0206af5add6"],
Cell[407179, 10360, 366, 11, 35, "Text",ExpressionUUID->"11439d0f-cdff-4fba-ae18-3ac42b8fb419"],
Cell[407548, 10373, 910, 16, 115, "Input",ExpressionUUID->"54aa302b-5363-4520-a4c2-8e02b738e841"],
Cell[408461, 10391, 216, 6, 32, "Input",ExpressionUUID->"cde335d4-f84d-4f98-af43-3dda2d30a506"],
Cell[408680, 10399, 1008, 18, 117, "Input",ExpressionUUID->"cacefd1b-9c65-4bea-ad17-1894d26f74da"],
Cell[409691, 10419, 212, 6, 32, "Input",ExpressionUUID->"bf26f563-ee7a-4ca2-9c2b-e7cd9eb80618"],
Cell[409906, 10427, 1090, 18, 138, "Input",ExpressionUUID->"f632f8ba-8df1-45aa-9fcb-087a04a665ea"],
Cell[410999, 10447, 212, 6, 32, "Input",ExpressionUUID->"b2e9e164-7893-4ec7-93df-9639fdb7f30a"],
Cell[411214, 10455, 257, 6, 35, "Text",ExpressionUUID->"5cfd98e0-5b33-4cba-91ed-f6a7eef4b381"],
Cell[411474, 10463, 1113, 19, 138, "Input",ExpressionUUID->"25d12f0b-193b-4dda-9018-55f5b5c5350b"],
Cell[412590, 10484, 212, 6, 32, "Input",ExpressionUUID->"78bddc09-a55d-42b7-bd0a-93e412724c92"],
Cell[412805, 10492, 1118, 19, 138, "Input",ExpressionUUID->"19610402-6577-4a88-a56e-6a14d59fbaab"],
Cell[413926, 10513, 213, 6, 32, "Input",ExpressionUUID->"4c9368d7-9c75-41db-b42d-dfe2a262006e"],
Cell[414142, 10521, 1102, 19, 138, "Input",ExpressionUUID->"8ba322de-68c1-4533-9dee-5bebada78e8e"],
Cell[415247, 10542, 212, 6, 32, "Input",ExpressionUUID->"4ca1862a-2051-42e8-a19d-aba51db598be"],
Cell[415462, 10550, 194, 3, 35, "Text",ExpressionUUID->"8de6acdf-886e-4d48-89a5-8e1f949a83ba"],
Cell[415659, 10555, 331, 7, 32, "Input",ExpressionUUID->"6244ddc6-32c0-4c53-8d69-e3f15d48baaa",
 Evaluatable->False],
Cell[415993, 10564, 359, 7, 72, "Input",ExpressionUUID->"d4efee08-5c33-490f-aa4b-e3676f2ec224",
 Evaluatable->False],
Cell[416355, 10573, 459, 8, 72, "Input",ExpressionUUID->"e576a8f3-5f9a-4bf5-a487-90530cc1c5bf",
 Evaluatable->False],
Cell[416817, 10583, 423, 8, 72, "Input",ExpressionUUID->"2c7588cd-daa2-4ae4-b955-398e750eb8b0",
 Evaluatable->False],
Cell[417243, 10593, 311, 6, 32, "Input",ExpressionUUID->"818295e0-afaa-4c16-a920-a5b8c34faed1",
 Evaluatable->False],
Cell[417557, 10601, 98, 0, 35, "Text",ExpressionUUID->"fe6d1f4e-70ad-48d9-a714-01f426bdacb8"],
Cell[417658, 10603, 2332, 39, 347, "Input",ExpressionUUID->"bd8baedf-512f-4065-a614-d91ddeef8e2a"],
Cell[419993, 10644, 1645, 27, 242, "Input",ExpressionUUID->"43efd9c9-8ba3-4ca5-a2cb-0a263cd8103f"],
Cell[421641, 10673, 222, 6, 32, "Input",ExpressionUUID->"60ddf78d-0917-4f73-aa31-734071e535cd"],
Cell[421866, 10681, 259, 7, 32, "Input",ExpressionUUID->"8051c5e2-dbe7-4c14-9ed4-10c564d00d4a"],
Cell[422128, 10690, 338, 8, 32, "Input",ExpressionUUID->"7fb7b715-f418-4107-8bce-b2959ec56081"],
Cell[422469, 10700, 362, 8, 51, "Input",ExpressionUUID->"ab5f453b-c100-42e7-a900-d2e252603db3"],
Cell[422834, 10710, 324, 8, 32, "Input",ExpressionUUID->"bad5055a-8f4b-4cc2-bb63-9a9c63f63a31"],
Cell[423161, 10720, 359, 8, 51, "Input",ExpressionUUID->"d1ae9238-23a8-40a9-bfda-9fab45e9ab7d"],
Cell[423523, 10730, 381, 8, 51, "Input",ExpressionUUID->"262e5730-f1ac-4982-99b2-6421312f69c7"],
Cell[423907, 10740, 369, 8, 51, "Input",ExpressionUUID->"97da4b43-9336-4e74-89f4-6ca4de750221"],
Cell[424279, 10750, 369, 8, 51, "Input",ExpressionUUID->"67229e72-1ff1-4c5d-9a00-9ebaa5da759f"],
Cell[424651, 10760, 849, 14, 115, "Input",ExpressionUUID->"d13c1d7a-f43c-4b53-80b8-a8d5f11ece9c"],
Cell[425503, 10776, 839, 18, 93, "Input",ExpressionUUID->"f8c87548-a7e8-450e-8550-38af95f59cd4"],
Cell[426345, 10796, 429, 9, 72, "Input",ExpressionUUID->"ade821c9-0118-4c3f-b1b5-900b916ca986"],
Cell[426777, 10807, 472, 9, 72, "Input",ExpressionUUID->"641c5424-2cf6-4635-8177-76013c468bbe"],
Cell[427252, 10818, 1092, 22, 136, "Input",ExpressionUUID->"b27850dd-40d0-404c-b013-d330db6787df"],
Cell[428347, 10842, 549, 10, 94, "Input",ExpressionUUID->"0e023f4d-15c7-4116-8afa-39d964b58fcd"],
Cell[428899, 10854, 603, 11, 94, "Input",ExpressionUUID->"cc7660da-f93a-4b11-98b7-294a8745ff3b"],
Cell[429505, 10867, 161, 4, 29, "Input",ExpressionUUID->"ae83877f-7cbd-4270-93d0-66d35f040385"],
Cell[CellGroupData[{
Cell[429691, 10875, 227, 7, 54, "Subsection",ExpressionUUID->"84a94e28-33d9-4608-9ab2-3fba6764580b"],
Cell[429921, 10884, 274, 8, 70, "Text",ExpressionUUID->"7f3389da-126f-43d9-9036-906ee06b1009"],
Cell[430198, 10894, 1196, 38, 70, "Text",ExpressionUUID->"e77a1ef4-dc24-4e58-b49e-b1082062ee07"],
Cell[431397, 10934, 2829, 80, 70, "Input",ExpressionUUID->"d231b95c-c852-4d7b-8515-f1ba20bcb4b6"],
Cell[434229, 11016, 116, 0, 70, "Text",ExpressionUUID->"602a1fe4-1181-4333-983b-75d21ac46128"],
Cell[434348, 11018, 1368, 38, 70, "Input",ExpressionUUID->"7c656424-e49d-41fb-b7c5-184c4a404fcb"],
Cell[435719, 11058, 116, 0, 70, "Text",ExpressionUUID->"c14d5ef7-579f-4e65-9966-850bc9bbd4b3"],
Cell[435838, 11060, 262, 7, 70, "Input",ExpressionUUID->"228e3b1f-9bf9-486b-83ac-3b8160bc593f"],
Cell[436103, 11069, 566, 14, 70, "Text",ExpressionUUID->"c9725c37-2783-4ca1-a0ab-48ae74b865da"],
Cell[436672, 11085, 1073, 31, 70, "Input",ExpressionUUID->"bc9e2474-ae35-44e6-b03e-12d73e0fe706"],
Cell[437748, 11118, 371, 10, 70, "Input",ExpressionUUID->"fdc642c3-5ee6-4e9f-93f8-07493a8e4713"]
}, Closed]],
Cell[CellGroupData[{
Cell[438156, 11133, 203, 7, 38, "Subsection",ExpressionUUID->"c4a8e051-e144-4158-b2de-282d927fc285"],
Cell[CellGroupData[{
Cell[438384, 11144, 234, 10, 70, "Subsubsection",ExpressionUUID->"8d2c1f00-591b-4b6d-bce1-3979b151deba"],
Cell[438621, 11156, 264, 6, 70, "Text",ExpressionUUID->"33d1fd10-1528-43a7-a3cc-6765debe4dea",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[438888, 11164, 6802, 183, 70, "Input",ExpressionUUID->"31099284-9089-4878-b327-9dc5d024f9b7"],
Cell[445693, 11349, 202, 3, 70, "Text",ExpressionUUID->"56696ba8-544a-453f-85ad-b4720fa5974a"],
Cell[445898, 11354, 1313, 36, 70, "Input",ExpressionUUID->"c192329a-426f-4703-acf6-304e74fa50a5"],
Cell[447214, 11392, 177, 3, 70, "Text",ExpressionUUID->"5dd01ae6-8476-4293-8b60-30b6406fab22",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[447394, 11397, 404, 11, 70, "Input",ExpressionUUID->"40dede22-7242-4794-9a65-1e0b70e708b3"]
}, Closed]],
Cell[CellGroupData[{
Cell[447835, 11413, 218, 10, 70, "Subsubsection",ExpressionUUID->"c536075c-62a4-487c-8311-242064e6ecfb"],
Cell[448056, 11425, 481, 12, 70, "Text",ExpressionUUID->"b3cb14e0-eae7-4a61-92f5-005007cdf060"],
Cell[448540, 11439, 356, 8, 70, "Text",ExpressionUUID->"aa4d26bf-8478-4974-85df-1cb202f726d8"],
Cell[448899, 11449, 230, 3, 70, "Text",ExpressionUUID->"73339649-8df3-4d46-8c39-6bdaab3888f3"],
Cell[449132, 11454, 805, 22, 70, "Input",ExpressionUUID->"1f8a9c8e-170e-490c-8138-411ae589c5b9",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[449974, 11481, 250, 10, 70, "Subsubsection",ExpressionUUID->"9ca6c5e4-41b7-43e3-83c6-3953203d92f9"],
Cell[450227, 11493, 88, 0, 70, "Text",ExpressionUUID->"1f6c4d24-4f45-43a1-a7c6-50ed0a917256"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[450364, 11499, 183, 7, 38, "Subsection",ExpressionUUID->"a62900ed-b279-404b-81d8-85f9b651fb39"],
Cell[CellGroupData[{
Cell[450572, 11510, 270, 13, 45, "Subsubsection",ExpressionUUID->"0a543b84-2e7f-434c-b124-a6be086d30ff"],
Cell[450845, 11525, 291, 6, 70, "Text",ExpressionUUID->"9094dc92-145d-45cd-aa4f-848ea85d5830"],
Cell[451139, 11533, 3056, 78, 70, "Input",ExpressionUUID->"d85816dd-3d3a-4cf1-b21b-b92016e63bad"],
Cell[454198, 11613, 260, 4, 70, "Text",ExpressionUUID->"e56b2386-5abf-432e-9968-b774c655fe62"],
Cell[454461, 11619, 5526, 147, 70, "Input",ExpressionUUID->"d082948a-1fd2-4ddf-92fe-e85f46d3e628"],
Cell[459990, 11768, 102, 0, 70, "Text",ExpressionUUID->"94a1a76b-c4d8-4d69-9b42-bcaae70300eb"],
Cell[460095, 11770, 1148, 35, 70, "Input",ExpressionUUID->"34801117-5e83-4a45-8694-4522fc882b5e"],
Cell[461246, 11807, 1296, 37, 70, "Input",ExpressionUUID->"98902828-a1f8-441c-b9ac-5d5efdd3a09c"],
Cell[462545, 11846, 125, 0, 70, "Text",ExpressionUUID->"87e20aac-b4e0-4478-b9cd-428798323f78"],
Cell[462673, 11848, 584, 18, 70, "Input",ExpressionUUID->"2f999dd2-eaba-410a-900a-557f15bab918"],
Cell[463260, 11868, 1276, 39, 70, "Input",ExpressionUUID->"64a44bcd-e25a-47e7-a838-0d4b5bf79efc"],
Cell[464539, 11909, 206, 3, 70, "Text",ExpressionUUID->"f7d2ad1e-e704-4011-aded-ed43a0a04307"],
Cell[464748, 11914, 2074, 58, 70, "Input",ExpressionUUID->"72a59e0c-b446-4a14-b983-25b0993e5cf2"],
Cell[466825, 11974, 2368, 64, 70, "Input",ExpressionUUID->"26d193fc-3b02-4df0-b311-f19935f59b91"],
Cell[469196, 12040, 106, 0, 70, "Text",ExpressionUUID->"cf41bda3-7b88-4d6d-b5eb-d6a8f7d26924"],
Cell[469305, 12042, 613, 18, 70, "Input",ExpressionUUID->"6dd52d31-2b03-438a-af8b-7767510b45f8"],
Cell[469921, 12062, 776, 13, 70, "Text",ExpressionUUID->"9816a67c-1d44-4372-a9d7-a7aeb863ddf5"],
Cell[470700, 12077, 1963, 53, 70, "Input",ExpressionUUID->"793d6210-451c-46d4-b23d-1995a2bf428f"]
}, Closed]],
Cell[CellGroupData[{
Cell[472700, 12135, 271, 11, 37, "Subsubsection",ExpressionUUID->"4cf3f2c0-5917-4164-bf4f-cdca7c184238"],
Cell[472974, 12148, 235, 6, 35, "Text",ExpressionUUID->"85a73e5b-737b-413b-a7a1-f34be40bed0c",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[473212, 12156, 6564, 160, 671, "Input",ExpressionUUID->"7ff7de9a-27be-4c16-9e79-58f552a61628",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[479779, 12318, 322, 9, 35, "Text",ExpressionUUID->"20558c36-3664-40ab-b33b-7d7965b3b445",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[480104, 12329, 1380, 30, 70, "Input",ExpressionUUID->"38bdbeb0-6e29-4c00-97f1-2f29b190a8b0"],
Cell[481487, 12361, 253, 6, 35, "Text",ExpressionUUID->"fc5dc490-4cc8-408a-bc8c-011993c08b60",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[481743, 12369, 2466, 59, 260, "Input",ExpressionUUID->"ab23e240-4b87-43d1-84f6-3c3c8b4a0528"],
Cell[484212, 12430, 449, 11, 29, "Input",ExpressionUUID->"69967c07-ef71-4430-8a81-d8a21805200a"],
Cell[484664, 12443, 15080, 364, 1099, "Input",ExpressionUUID->"344452f5-3aa0-49ac-835f-edec00c70776"],
Cell[499747, 12809, 353, 7, 35, "Text",ExpressionUUID->"d1150aa4-425e-465f-864e-dd167a73aedf",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[500103, 12818, 5509, 141, 427, "Input",ExpressionUUID->"ab14d7eb-a447-4c47-ae59-27b306ea11dc"],
Cell[505615, 12961, 233, 6, 35, "Text",ExpressionUUID->"c8c3e373-71e7-4b43-b30e-0ac149b1bde3",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[505851, 12969, 8875, 220, 621, "Input",ExpressionUUID->"fe8e12e2-fee0-4c9b-9f8d-576c546c53e5"],
Cell[514729, 13191, 412, 11, 29, "Input",ExpressionUUID->"2c6574a6-2249-44a0-8b5d-d87aa01a6193"],
Cell[515144, 13204, 146, 2, 35, "Text",ExpressionUUID->"14e022eb-419f-4509-9d8a-745b2bae8553"],
Cell[515293, 13208, 1403, 38, 113, "Input",ExpressionUUID->"05ab888f-c9f5-4dc7-a95b-d1b35f444164"],
Cell[516699, 13248, 756, 19, 71, "Input",ExpressionUUID->"b135bbfa-a494-4dde-9870-ea077e9b4c84"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[517504, 13273, 255, 8, 54, "Subsection",ExpressionUUID->"c9df98d3-ca60-4eb2-b344-c657f5b39844"],
Cell[517762, 13283, 703, 12, 70, "Text",ExpressionUUID->"5c4c0480-ee81-45db-bdc4-93b9d8e5eda1"],
Cell[518468, 13297, 569, 14, 70, "Input",ExpressionUUID->"8bb1937b-98d2-48aa-baab-e617ca9245d1"],
Cell[CellGroupData[{
Cell[519062, 13315, 212, 10, 70, "Subsubsection",ExpressionUUID->"967dea32-c1d9-41f3-a1ae-c0ce942bab83"],
Cell[519277, 13327, 5525, 172, 70, "Input",ExpressionUUID->"8323b868-11c1-4316-bdce-c335d8396994"],
Cell[524805, 13501, 684, 14, 70, "Text",ExpressionUUID->"c71efdac-cd74-4b33-9ce3-7fab5f8e64a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[525526, 13520, 206, 10, 70, "Subsubsection",ExpressionUUID->"b0bfdbb7-d6c0-41b6-bb13-66b36655b036"],
Cell[525735, 13532, 1272, 26, 70, "Text",ExpressionUUID->"9c3003ed-0b98-437c-aa4d-040c08e607f1"],
Cell[527010, 13560, 115, 0, 70, "Text",ExpressionUUID->"242d8632-58b1-4351-83b9-99ae75242b04"],
Cell[527128, 13562, 6825, 200, 70, "Input",ExpressionUUID->"54a536bc-217a-4d36-81f3-c20796f2b279"],
Cell[533956, 13764, 113, 0, 70, "Text",ExpressionUUID->"f4d9b477-3367-4439-88d9-dce9708e5327"],
Cell[534072, 13766, 4106, 117, 70, "Input",ExpressionUUID->"bb7771a4-d74f-488f-8c5a-6ae12f746956"],
Cell[538181, 13885, 3874, 114, 70, "Input",ExpressionUUID->"b62a3453-aabf-4042-b007-24514f30e4ee"],
Cell[542058, 14001, 3790, 114, 70, "Input",ExpressionUUID->"36192cb6-8adb-4232-9aa7-50a863e14e09"],
Cell[545851, 14117, 3668, 110, 70, "Input",ExpressionUUID->"37f7fd2c-a502-416a-b3a3-da396df64a9a"],
Cell[549522, 14229, 3731, 110, 70, "Input",ExpressionUUID->"26b6263b-cfd6-429e-8f4b-918eeda80b37"],
Cell[553256, 14341, 3147, 92, 70, "Input",ExpressionUUID->"bd21d5f9-d937-47b5-a43c-f66bc7c77cc9"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[556452, 14439, 280, 9, 38, "Subsection",ExpressionUUID->"a8aceff9-a87b-42e5-8dfc-a90c786d9977"],
Cell[556735, 14450, 302, 8, 70, "Text",ExpressionUUID->"5330e783-1866-4883-ae54-1ef2a1ca93d2"],
Cell[557040, 14460, 2113, 56, 70, "Input",ExpressionUUID->"83e5cb03-21f4-4caf-9e70-ca3ba5de882d"],
Cell[559156, 14518, 516, 14, 70, "Text",ExpressionUUID->"ccd3f2e7-9148-4ecd-8fb4-712e2e5e0c70"],
Cell[559675, 14534, 1062, 21, 70, "Text",ExpressionUUID->"b0a42307-735a-4360-a53a-761934847ac2"],
Cell[560740, 14557, 2448, 67, 70, "Input",ExpressionUUID->"96f86582-6adb-4250-a80f-9bc25d05acf5"],
Cell[563191, 14626, 269, 5, 70, "Text",ExpressionUUID->"252d3d30-e0a6-4528-880d-d5796471fdb1"],
Cell[563463, 14633, 794, 23, 70, "Text",ExpressionUUID->"92e30106-00ff-47f0-99fd-a4df8bec1d5a"],
Cell[564260, 14658, 219, 5, 70, "Text",ExpressionUUID->"81b9dc61-8531-4e06-960b-3c6cbf234918"],
Cell[564482, 14665, 2315, 69, 70, "Input",ExpressionUUID->"358a07af-05de-4b55-9ffe-86a8abc9074c"],
Cell[566800, 14736, 2308, 69, 70, "Input",ExpressionUUID->"0b5b3de3-17d5-46a1-a471-da7eb1565938"],
Cell[569111, 14807, 340, 9, 70, "Text",ExpressionUUID->"0f74d4ad-5b8d-498a-a244-85d3981dcd46"],
Cell[569454, 14818, 1622, 48, 70, "Input",ExpressionUUID->"5e89b10f-1684-48ab-81bc-fd567460ae6b"]
}, Closed]],
Cell[CellGroupData[{
Cell[571113, 14871, 217, 7, 38, "Subsection",ExpressionUUID->"7695be57-3f3b-44a9-8a8b-5c23e4b265a4"],
Cell[571333, 14880, 255, 6, 70, "Text",ExpressionUUID->"4a350b32-9138-4aa9-84a0-a5b38f27dec1"],
Cell[571591, 14888, 265, 7, 70, "Input",ExpressionUUID->"9a64fc49-d22e-4a1c-a972-af4534f920c6"],
Cell[571859, 14897, 2150, 59, 70, "Input",ExpressionUUID->"8a86b558-6cec-48be-bbf1-3bf037f613fb"],
Cell[574012, 14958, 696, 20, 70, "Input",ExpressionUUID->"48207d98-fe2d-4efd-b855-fe98cce579b0"],
Cell[574711, 14980, 696, 20, 70, "Input",ExpressionUUID->"da4c9882-8db7-4db2-b10b-e9267325ce2c"]
}, Closed]],
Cell[CellGroupData[{
Cell[575444, 15005, 239, 8, 38, "Subsection",ExpressionUUID->"85654450-a970-4086-9d91-06c19b83cdcb"],
Cell[CellGroupData[{
Cell[575708, 15017, 311, 11, 70, "Subsubsection",ExpressionUUID->"e2f24493-7542-43db-b94b-2ea51686d25b"],
Cell[576022, 15030, 199, 3, 70, "Text",ExpressionUUID->"6c119003-b38f-4dd8-af42-f61c17389d9c"],
Cell[CellGroupData[{
Cell[576246, 15037, 180, 3, 70, "Input",ExpressionUUID->"00654b36-7ee8-4f6d-a8a8-430e98085f71",
 Evaluatable->False],
Cell[576429, 15042, 842, 19, 70, "Output",ExpressionUUID->"d2ca4bfe-e20f-4e6a-9da7-b4ff1e1b74a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[577308, 15066, 463, 12, 70, "Input",ExpressionUUID->"8338534b-f278-44c8-9dd1-65b24649a503",
 Evaluatable->False],
Cell[577774, 15080, 824, 12, 70, "Print",ExpressionUUID->"7c9d16fb-0a14-4446-b80a-ad96e4c9da0b"],
Cell[578601, 15094, 12469, 277, 70, "Output",ExpressionUUID->"92fa9612-8704-42c7-85e4-4c1f8f86a731"]
}, Open  ]],
Cell[591085, 15374, 488, 14, 70, "Input",ExpressionUUID->"d70f5406-c802-46fa-afee-be23e606e6f7",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[591610, 15393, 221, 10, 70, "Subsubsection",ExpressionUUID->"14de2333-5152-4197-8ae7-ee605722393c"],
Cell[591834, 15405, 585, 12, 70, "Text",ExpressionUUID->"3ea69762-6a84-442f-aa16-e4c99563a62c"],
Cell[592422, 15419, 2921, 78, 70, "Input",ExpressionUUID->"056a8a0d-d52a-47d2-ad44-57e1bdc00726"],
Cell[595346, 15499, 188, 3, 70, "Text",ExpressionUUID->"86b48b07-c41b-4d00-b0e6-a1b21633887e"],
Cell[595537, 15504, 3264, 87, 70, "Input",ExpressionUUID->"6587a7b3-fa74-4469-aa5b-8d243aff74b0",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[598838, 15596, 342, 14, 70, "Subsubsection",ExpressionUUID->"5d97638b-a6bc-47bf-9962-cc2d1685e6f6"],
Cell[CellGroupData[{
Cell[599205, 15614, 205, 5, 70, "Item",ExpressionUUID->"829aad39-3e08-4363-9dcf-ec9c2acbb933",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[599413, 15621, 268, 6, 70, "Text",ExpressionUUID->"db996de3-b64e-401e-ab90-6069c72cc9da",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[599684, 15629, 630, 11, 70, "Text",ExpressionUUID->"854dba88-575b-4965-b734-24f13664aeea",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[600317, 15642, 411, 8, 70, "Text",ExpressionUUID->"212b8c4d-3c6d-431f-b34c-ee6befc4f4af",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[600731, 15652, 895, 19, 70, "Text",ExpressionUUID->"28a4ab7c-01b8-49ad-a117-886d302f6f89",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[601629, 15673, 11071, 284, 70, "Input",ExpressionUUID->"2866123b-71e6-4500-b680-c8de0c7f06e8",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[612703, 15959, 191, 3, 70, "Text",ExpressionUUID->"c4568d30-c21f-4b9f-b6aa-cc0a49d0cb45"],
Cell[612897, 15964, 1099, 28, 70, "Input",ExpressionUUID->"06dc5628-111e-4101-beea-b872d1160f1b"],
Cell[613999, 15994, 1106, 29, 70, "Input",ExpressionUUID->"0325b2ad-41d0-4a9e-ab18-2ddde716dc81"]
}, Closed]],
Cell[CellGroupData[{
Cell[615142, 16028, 189, 3, 70, "Item",ExpressionUUID->"109455b9-911c-4e1f-b69c-d50257d10caf",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[615334, 16033, 659, 11, 70, "Text",ExpressionUUID->"a5a7ae99-b472-431b-b5fc-af5d2723292d",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[615996, 16046, 5919, 161, 70, "Input",ExpressionUUID->"6d028b5e-1c98-46aa-9585-1fa40f4fdde1",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]],
Cell[CellGroupData[{
Cell[621952, 16212, 205, 5, 70, "Item",ExpressionUUID->"052cb297-b77a-40dd-b62c-5b90d4bc3c2e",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[622160, 16219, 463, 9, 70, "Text",ExpressionUUID->"3a1e7fed-422f-4667-90a1-42b708a91152",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[622626, 16230, 5327, 146, 70, "Input",ExpressionUUID->"a4521bb2-27fb-4506-9791-910a06308c07",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[627956, 16378, 191, 3, 70, "Text",ExpressionUUID->"bb635bfe-d382-4941-8012-b3395590a9cd"],
Cell[628150, 16383, 1118, 30, 70, "Input",ExpressionUUID->"8784d2a7-f062-422f-8810-d68d587f3ca1"],
Cell[629271, 16415, 1115, 29, 70, "Input",ExpressionUUID->"5c35e9e1-2974-4e22-b01f-83077ce9558a"]
}, Closed]],
Cell[CellGroupData[{
Cell[630423, 16449, 218, 6, 70, "Item",ExpressionUUID->"0c5ad0b3-e3c8-446a-b8d2-79ee3aa2bac6",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[630644, 16457, 240, 6, 70, "Text",ExpressionUUID->"ab5525bb-473a-453b-a6af-611a68d264e6",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[630887, 16465, 1384, 40, 70, "Input",ExpressionUUID->"4ff53f18-931f-4943-a2ee-2e61287e832b",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[632274, 16507, 1385, 40, 70, "Input",ExpressionUUID->"2bd666eb-a136-4743-b578-5f29dbea0975",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[633662, 16549, 352, 7, 70, "Text",ExpressionUUID->"a3ccd934-a7a1-473f-9443-b28f5f2e1345",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[634017, 16558, 2663, 76, 70, "Input",ExpressionUUID->"d1bf0dc2-8754-4186-896a-dfc276665fc2",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[636683, 16636, 191, 3, 70, "Text",ExpressionUUID->"c107d3a7-65aa-48be-8ff8-a5894333eaaf"],
Cell[636877, 16641, 1190, 31, 70, "Input",ExpressionUUID->"3322879b-e4a9-41a1-88dc-55a832950a43"],
Cell[638070, 16674, 1199, 32, 70, "Input",ExpressionUUID->"7c60e1fb-9cd9-4a98-8744-f9473ebb8a57"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[639318, 16712, 229, 10, 70, "Subsubsection",ExpressionUUID->"d81635c8-8de8-4f33-852f-7a9068b7c98e"],
Cell[639550, 16724, 548, 13, 70, "Text",ExpressionUUID->"fa1e69b3-e8a8-4369-aef7-ad50a1b71c85",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[640101, 16739, 479, 13, 70, "Input",ExpressionUUID->"ec2a8ef9-4a7f-4273-9768-a0fe524c1905"],
Cell[640583, 16754, 594, 18, 70, "Text",ExpressionUUID->"51c92034-3f12-496f-8730-5abe2aef0613",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[641180, 16774, 899, 26, 70, "Input",ExpressionUUID->"89e1f5cd-7dae-4686-a83b-10e0fc105b6b"],
Cell[642082, 16802, 910, 28, 70, "Input",ExpressionUUID->"672d679c-6efa-424d-97e9-db1031d0c155"],
Cell[642995, 16832, 414, 10, 70, "Text",ExpressionUUID->"c445d15b-00b3-41f5-8443-ca5c4567a6cc",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[643412, 16844, 1406, 40, 70, "Input",ExpressionUUID->"45c72040-5346-4b64-b018-29c845039c75"],
Cell[644821, 16886, 171, 3, 70, "Text",ExpressionUUID->"53cc7b76-4d21-480c-afd5-0e02ebf6664a",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[644995, 16891, 585, 17, 70, "Input",ExpressionUUID->"aa89f28e-74a9-432a-a7d5-dac1c5802503"],
Cell[645583, 16910, 235, 6, 70, "Text",ExpressionUUID->"be1e035c-5046-4245-b654-b9ce10d4a12a",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[645821, 16918, 1044, 30, 70, "Input",ExpressionUUID->"4bc3a8f9-2ddd-40d6-a190-970e7b0e7be2"],
Cell[646868, 16950, 1046, 30, 70, "Input",ExpressionUUID->"15f3191a-397d-41cc-bcdf-ee744a75761f"],
Cell[647917, 16982, 212, 5, 70, "Text",ExpressionUUID->"acd7f983-37e6-4cdc-9347-c16819a9548d",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[648132, 16989, 591, 16, 70, "Input",ExpressionUUID->"88397326-d5b5-43ee-98b4-024e9d1c3f02"],
Cell[648726, 17007, 185, 3, 70, "Text",ExpressionUUID->"c0b5bac7-3af4-4c8c-9b40-2c8e306b9105"],
Cell[648914, 17012, 1610, 42, 70, "Input",ExpressionUUID->"d470ece5-6b9a-4a11-9b64-1aca2636c05b"],
Cell[650527, 17056, 1607, 41, 70, "Input",ExpressionUUID->"6ffb0be9-e434-4c53-8aeb-388557aa7851"]
}, Closed]],
Cell[CellGroupData[{
Cell[652171, 17102, 236, 10, 70, "Subsubsection",ExpressionUUID->"602ab620-c63f-46ce-9af1-a8bfe920b639"],
Cell[652410, 17114, 248, 6, 70, "Text",ExpressionUUID->"5374b4dd-68e0-4c86-933e-9d5c2ef7c3f9"],
Cell[652661, 17122, 645, 9, 70, "Text",ExpressionUUID->"38a71231-42fd-4520-8561-f2d1697414a7"],
Cell[653309, 17133, 2212, 57, 70, "Input",ExpressionUUID->"2d82903a-0ba8-452a-b1b3-679e3df9d3e0"]
}, Closed]],
Cell[CellGroupData[{
Cell[655558, 17195, 232, 10, 70, "Subsubsection",ExpressionUUID->"81c4db85-e744-436d-8d84-2fda9df44134"],
Cell[655793, 17207, 308, 9, 70, "Text",ExpressionUUID->"4936ce43-ec1a-44ff-90c6-864dd3ea56f9",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[656104, 17218, 1880, 49, 70, "Input",ExpressionUUID->"5ed0c813-9ace-4b35-8b74-6f28c6db4842"]
}, Closed]],
Cell[CellGroupData[{
Cell[658021, 17272, 259, 10, 70, "Subsubsection",ExpressionUUID->"b29d3395-8734-48c6-9de1-f8d0b643401b"],
Cell[658283, 17284, 105, 0, 70, "Text",ExpressionUUID->"ccfb5ffa-9966-4f3c-8517-6ffa8d38153d"],
Cell[658391, 17286, 378, 6, 70, "Text",ExpressionUUID->"c3aebbbd-4044-4685-a57d-c7979dba5547"],
Cell[658772, 17294, 1155, 32, 70, "Input",ExpressionUUID->"6c42c073-88d0-4689-87db-1403aaabba28"],
Cell[659930, 17328, 1439, 38, 70, "Input",ExpressionUUID->"e2e5cce5-5a33-4928-85ee-0a6fa49aaabd"],
Cell[661372, 17368, 106, 0, 70, "Text",ExpressionUUID->"a7781fed-513f-40d4-82aa-1ec259a79744"],
Cell[661481, 17370, 1391, 37, 70, "Input",ExpressionUUID->"dc0fd9f1-4764-4a15-89a3-97c72bc5181a"],
Cell[662875, 17409, 111, 0, 70, "Text",ExpressionUUID->"b2efd4b9-771c-45a8-a5f5-f6a08af68345"],
Cell[662989, 17411, 1653, 45, 70, "Input",ExpressionUUID->"af1d9480-3ea8-4624-b40d-bbe6bf7f46fa"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[664691, 17462, 208, 7, 38, "Subsection",ExpressionUUID->"9842db4f-7771-4a2c-a368-bdec5ed23ca8"],
Cell[CellGroupData[{
Cell[664924, 17473, 338, 13, 45, "Subsubsection",ExpressionUUID->"f6a2b87b-9402-467a-b60e-fe0f7dfa7061"],
Cell[665265, 17488, 483, 7, 70, "Text",ExpressionUUID->"4e6b59c2-fcdc-4a5c-b25a-af456f2b083b"],
Cell[665751, 17497, 590, 14, 70, "Text",ExpressionUUID->"73149cf0-6e09-4b6d-bf54-aab072a074f4"],
Cell[666344, 17513, 733, 22, 70, "Text",ExpressionUUID->"cbcd8db5-7c82-4d01-88aa-1b9b8ac5656a"],
Cell[667080, 17537, 293, 4, 70, "Text",ExpressionUUID->"b5e59ea4-41e0-41a2-968b-32cb72b2341e"],
Cell[667376, 17543, 1492, 39, 70, "Input",ExpressionUUID->"0816fdb1-96f7-4f58-8044-ee9d607f3349"],
Cell[668871, 17584, 14327, 357, 70, "Input",ExpressionUUID->"02152d0f-2b6b-41f1-a651-59ee93ed1e6f"],
Cell[683201, 17943, 2238, 54, 70, "Input",ExpressionUUID->"67cdfe79-40b5-4e7c-bb22-03845676cf70"],
Cell[685442, 17999, 4562, 112, 70, "Input",ExpressionUUID->"cbd76819-f105-4990-9107-7ab949c2d90f"],
Cell[690007, 18113, 113, 0, 70, "Text",ExpressionUUID->"0b8f8200-ccb8-4657-a4a8-fe4649c6320a"],
Cell[690123, 18115, 243, 6, 70, "Input",ExpressionUUID->"290fb7ad-9f0f-4027-9282-7a2a02646b29"],
Cell[690369, 18123, 4769, 114, 70, "Input",ExpressionUUID->"db931ce1-4bd9-4d5d-83df-9f0ede84065f"],
Cell[695141, 18239, 157, 4, 70, "Text",ExpressionUUID->"b4115f39-a5b7-4d49-a710-78e12006cc0b"],
Cell[695301, 18245, 7240, 171, 70, "Input",ExpressionUUID->"574324eb-148e-418e-8ba1-487c9b513fb7"]
}, Closed]],
Cell[CellGroupData[{
Cell[702578, 18421, 273, 11, 37, "Subsubsection",ExpressionUUID->"17ae3335-b69b-4bb5-b4f1-e5d1687609de"],
Cell[702854, 18434, 194, 3, 70, "Text",ExpressionUUID->"a947def1-2ad1-4bc4-b3a3-7fa50f24d621"],
Cell[703051, 18439, 1067, 29, 70, "Input",ExpressionUUID->"14097973-5ad2-4ea7-b26c-c7da8aec6148"],
Cell[704121, 18470, 1169, 30, 70, "Input",ExpressionUUID->"e3268b0f-229b-4de3-9621-2c0ccb1b2016"],
Cell[705293, 18502, 220, 3, 70, "Text",ExpressionUUID->"1c127f23-d111-42ea-bb5e-6415f7355ac2"],
Cell[705516, 18507, 539, 13, 70, "Input",ExpressionUUID->"cd3339ae-76e7-4b9d-931b-aee3b237170c"],
Cell[706058, 18522, 2471, 62, 70, "Input",ExpressionUUID->"19ce5d1d-44e8-45d2-9510-94b7333574ea"],
Cell[708532, 18586, 617, 18, 70, "Input",ExpressionUUID->"efdcc58f-59cd-47b1-9df9-3cc10e5eade8"],
Cell[709152, 18606, 326, 5, 70, "Text",ExpressionUUID->"db2bd680-bda6-472e-acc0-a77a1d86df47"],
Cell[709481, 18613, 2879, 69, 70, "Input",ExpressionUUID->"3ff442c9-bf3a-4d9c-b9cc-d184f5cacc3a"]
}, Closed]],
Cell[CellGroupData[{
Cell[712397, 18687, 313, 12, 37, "Subsubsection",ExpressionUUID->"7de73374-6b0e-4e13-8ec8-67af26590139"],
Cell[712713, 18701, 771, 12, 70, "Text",ExpressionUUID->"eb022f9b-2a73-471a-9dce-3e348671d79a"],
Cell[713487, 18715, 280, 4, 70, "Text",ExpressionUUID->"59a7ab7d-5468-47f1-b4f0-aa2dd2f02609"],
Cell[713770, 18721, 335, 6, 70, "Text",ExpressionUUID->"8b45b7fb-0dff-4562-b64e-ff16627455e0"],
Cell[714108, 18729, 354, 5, 70, "Text",ExpressionUUID->"1f21934a-fc66-47cf-8a5c-b051ab6e2a6c"],
Cell[714465, 18736, 7243, 177, 70, "Input",ExpressionUUID->"2db5830f-d9e3-4506-af23-5d4b86900887"],
Cell[721711, 18915, 101, 0, 70, "Text",ExpressionUUID->"659a8a8b-0ebe-4028-96f4-61e544744378"],
Cell[721815, 18917, 11612, 292, 70, "Input",ExpressionUUID->"8338cf14-14ad-4b34-b82b-2cb758692385"]
}, Closed]],
Cell[CellGroupData[{
Cell[733464, 19214, 328, 11, 37, "Subsubsection",ExpressionUUID->"0ab3eab8-1d3d-4100-ab71-593cb6967f53"],
Cell[733795, 19227, 116, 0, 70, "Text",ExpressionUUID->"c17f9827-9e68-4a89-81dc-945548272c56"],
Cell[733914, 19229, 837, 22, 70, "Input",ExpressionUUID->"d3f1a89d-1d67-4bd6-a36a-87d29a129c69",
 Evaluatable->False],
Cell[734754, 19253, 799, 12, 70, "Text",ExpressionUUID->"d07db8b5-9a91-46b0-a681-f6458df91498"],
Cell[735556, 19267, 5732, 141, 70, "Input",ExpressionUUID->"cad7ea13-aa65-4b5c-90a0-8b0cb4061885"],
Cell[741291, 19410, 557, 8, 70, "Text",ExpressionUUID->"64826dfe-4eb3-4d29-a918-2e2b4cd371cd"],
Cell[741851, 19420, 534, 17, 70, "Input",ExpressionUUID->"81655319-0de5-41aa-9142-7b1bc0f6c689"],
Cell[742388, 19439, 1006, 14, 70, "Text",ExpressionUUID->"eb1b614d-343d-4727-9e24-af8d8fe0fbfb"],
Cell[743397, 19455, 4409, 106, 70, "Input",ExpressionUUID->"7327d958-2540-4a40-b762-dcbceaf5ea55"],
Cell[747809, 19563, 248, 4, 70, "Text",ExpressionUUID->"0902450e-f99e-4893-a317-b94c0d031684"],
Cell[748060, 19569, 1417, 21, 70, "Text",ExpressionUUID->"138424f0-bd1d-4c98-9a21-b3b210d0eb48"],
Cell[749480, 19592, 859, 14, 70, "Text",ExpressionUUID->"55b4e479-795d-41f7-be66-9d4f48376c44"],
Cell[750342, 19608, 6600, 178, 70, "Input",ExpressionUUID->"f9085a54-4b3d-492b-881d-9890607272e1"],
Cell[756945, 19788, 821, 16, 70, "Input",ExpressionUUID->"98b41fa9-f08e-444c-aef4-f2c860d29212"],
Cell[757769, 19806, 341, 5, 70, "Text",ExpressionUUID->"b2e09b0e-55ec-4936-b10d-fbb2f1999dfc"],
Cell[758113, 19813, 11053, 269, 70, "Input",ExpressionUUID->"4d56f0d6-284d-40f5-be73-3639f37cd201"],
Cell[769169, 20084, 4107, 100, 70, "Input",ExpressionUUID->"56c24d79-99ea-4a2a-92ba-6559d6ddc16b"],
Cell[773279, 20186, 8132, 183, 70, "Input",ExpressionUUID->"c827b010-68f7-4325-94f6-e8f815412710"],
Cell[781414, 20371, 1347, 34, 70, "Input",ExpressionUUID->"748d627b-a57d-4bef-9782-47769cb58cdd"],
Cell[782764, 20407, 9804, 232, 70, "Input",ExpressionUUID->"61e46c38-c5fa-4a1c-9d6d-95a2b84aac44"]
}, Closed]],
Cell[CellGroupData[{
Cell[792605, 20644, 224, 10, 37, "Subsubsection",ExpressionUUID->"0448ac83-0765-4982-82c1-39f9ead2d5e1"],
Cell[792832, 20656, 1015, 17, 70, "Text",ExpressionUUID->"7c2ee06b-a5f5-419a-97dc-d7e8c1cd7a4e"],
Cell[793850, 20675, 676, 10, 70, "Text",ExpressionUUID->"eb9a7399-6043-4267-9511-a938f5857789"],
Cell[794529, 20687, 677, 14, 70, "Input",ExpressionUUID->"aafc5dec-8485-4a90-9d7d-5eb97ef83702"],
Cell[795209, 20703, 2096, 58, 70, "Input",ExpressionUUID->"021bc6fa-42d9-4670-9d1d-2362e05b6cda"],
Cell[797308, 20763, 110, 0, 70, "Text",ExpressionUUID->"c76fc2cf-e657-4549-bffb-c4396730ae65"],
Cell[797421, 20765, 614, 18, 70, "Input",ExpressionUUID->"1fa16ea5-5c31-4d18-b975-749311e3e226"],
Cell[798038, 20785, 236, 4, 70, "Text",ExpressionUUID->"cc58b865-aec2-4022-87dc-3185c8c3eacd"],
Cell[798277, 20791, 26769, 603, 70, "Input",ExpressionUUID->"13c4ae59-d5a1-4a31-b988-77d9db68979c"],
Cell[825049, 21396, 346, 5, 70, "Text",ExpressionUUID->"1b491b00-38e7-4122-9007-d010877959c9"],
Cell[825398, 21403, 498, 13, 70, "Input",ExpressionUUID->"55d8dedd-d467-4c3b-b177-c2c5317c633b",
 Evaluatable->False],
Cell[825899, 21418, 534, 15, 70, "Input",ExpressionUUID->"20d29dc6-79a7-4ecf-bb08-55c5fdbfb895",
 Evaluatable->False],
Cell[826436, 21435, 353, 5, 70, "Text",ExpressionUUID->"e32028d4-92b2-43e3-b8ec-81c78a10cc57"],
Cell[826792, 21442, 1504, 42, 70, "Input",ExpressionUUID->"14405df8-7d0e-4e46-9d5f-35206c4b48ec"]
}, Closed]],
Cell[CellGroupData[{
Cell[828333, 21489, 209, 10, 37, "Subsubsection",ExpressionUUID->"e9852e09-3768-4c6e-b64d-bf2bf6152f36"],
Cell[828545, 21501, 236, 5, 70, "Text",ExpressionUUID->"ef793601-d00d-43c0-aa04-7e819fefb9c2"],
Cell[828784, 21508, 1375, 36, 70, "Input",ExpressionUUID->"f28afc16-3269-4c4f-a2b9-80319a23d6f0"],
Cell[830162, 21546, 1600, 40, 70, "Input",ExpressionUUID->"a1b1155a-56f9-4926-b7ae-dddaf5faf899"],
Cell[831765, 21588, 525, 12, 70, "Text",ExpressionUUID->"d11091e8-0c4d-4efc-9d9a-fb5df010a8ad"],
Cell[832293, 21602, 1410, 37, 70, "Input",ExpressionUUID->"d8b591fb-d604-47ae-aea8-9889b4f309ab"],
Cell[833706, 21641, 1588, 40, 70, "Input",ExpressionUUID->"f89425b2-664c-4cb7-a8c9-7eec6569a3c5"]
}, Closed]],
Cell[CellGroupData[{
Cell[835331, 21686, 276, 11, 37, "Subsubsection",ExpressionUUID->"8b7e22b4-3ee7-4a88-b0c3-6670cd5a9840"],
Cell[835610, 21699, 307, 4, 70, "Text",ExpressionUUID->"15609a48-176c-4b5b-be51-8872e9ad0be6"],
Cell[835920, 21705, 1460, 39, 70, "Input",ExpressionUUID->"f4b307cc-d22c-47fe-bf48-a08eafb31869"],
Cell[837383, 21746, 4443, 110, 70, "Input",ExpressionUUID->"6968128c-9b02-4473-985d-f47f22ebb6ec"],
Cell[841829, 21858, 826, 20, 70, "Input",ExpressionUUID->"d67e1b25-f760-4e84-a226-740454f5b515"],
Cell[842658, 21880, 2760, 74, 70, "Input",ExpressionUUID->"2be4857a-b924-40e5-9a10-3fb636b00bef"],
Cell[845421, 21956, 159, 4, 70, "Input",ExpressionUUID->"bd5d123f-28d6-42e3-be00-8b3c31286653"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[845641, 21967, 175, 4, 68, "Section",ExpressionUUID->"4ab2a7de-c546-41d1-8323-9e22cf95d22f"],
Cell[845819, 21973, 86, 0, 35, "Text",ExpressionUUID->"a19554e5-b070-4348-818f-75d5881618a9"],
Cell[845908, 21975, 323, 9, 29, "Input",ExpressionUUID->"cac0dba3-af78-423c-9ff3-d8f5cbe1fc52"],
Cell[846234, 21986, 409, 9, 51, "Input",ExpressionUUID->"5a53a32b-db79-4b6b-b474-2ebb16d38fa1"],
Cell[846646, 21997, 85, 0, 35, "Text",ExpressionUUID->"c6a88457-c242-4231-b9df-496a4d350c30"],
Cell[846734, 21999, 719, 13, 114, "Input",ExpressionUUID->"b284e6cc-34e9-4ef2-ac37-67e0ddadf05b"],
Cell[847456, 22014, 638, 12, 93, "Input",ExpressionUUID->"498fbaa8-87d1-416b-bce1-12e135b724a4"],
Cell[848097, 22028, 572, 11, 94, "Input",ExpressionUUID->"9eb3812d-a392-414e-93b4-91d2f63db6cd"],
Cell[848672, 22041, 584, 11, 94, "Input",ExpressionUUID->"c3eb2f0a-5849-4e15-93ab-16c52f163801"],
Cell[849259, 22054, 593, 11, 94, "Input",ExpressionUUID->"32458326-dcd6-43a5-80e4-90a391ddb388"],
Cell[849855, 22067, 161, 4, 29, "Input",ExpressionUUID->"b35f5199-a110-430f-b087-037131104cfa"],
Cell[CellGroupData[{
Cell[850041, 22075, 183, 7, 54, "Subsection",ExpressionUUID->"b6561516-a159-44f7-b06a-b5d67a310748"],
Cell[850227, 22084, 333, 7, 70, "Text",ExpressionUUID->"c3ea3536-4405-4b03-93be-17d807aa1710"],
Cell[850563, 22093, 340, 9, 70, "Input",ExpressionUUID->"66234a28-0812-40f6-87a1-9562fb888996"]
}, Closed]],
Cell[CellGroupData[{
Cell[850940, 22107, 175, 7, 38, "Subsection",ExpressionUUID->"b118506b-84ea-4b48-80f1-482afa798ea4"],
Cell[851118, 22116, 386, 6, 70, "Text",ExpressionUUID->"50dd7adb-330e-428e-8822-72e1906a7f5f"],
Cell[851507, 22124, 6524, 144, 70, "Input",ExpressionUUID->"85c32c5d-3f91-482c-9ac3-4eeda7931393"],
Cell[858034, 22270, 251, 4, 70, "Text",ExpressionUUID->"87e938b2-1eb8-49f8-b371-35dbcfb60051"],
Cell[858288, 22276, 1125, 29, 70, "Input",ExpressionUUID->"e7b16c75-933a-40cf-9092-e3b6c8fde391",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[859416, 22307, 111, 0, 70, "Text",ExpressionUUID->"c3555e1b-7746-432b-b852-1cf08df5994b"],
Cell[859530, 22309, 4089, 95, 70, "Input",ExpressionUUID->"b694e195-62ce-4ce9-a848-7a47c89dde3d"],
Cell[863622, 22406, 217, 3, 70, "Text",ExpressionUUID->"662d848b-727d-419d-b9e4-93c8a07a6e97"],
Cell[863842, 22411, 1313, 37, 70, "Input",ExpressionUUID->"b4274ece-80bb-4cf5-8fbd-6e9ba4e39573"]
}, Closed]],
Cell[CellGroupData[{
Cell[865192, 22453, 209, 7, 38, "Subsection",ExpressionUUID->"c634a8cb-e675-4382-85b2-fadcea828263"],
Cell[865404, 22462, 2269, 38, 70, "Text",ExpressionUUID->"70b1ba68-52a1-434d-962b-3bafdab513ed"],
Cell[867676, 22502, 1104, 33, 70, "Input",ExpressionUUID->"9fa3df2c-46dd-403a-9a0b-2957debe925d"],
Cell[868783, 22537, 1166, 34, 70, "Input",ExpressionUUID->"fd3ae217-7046-419e-a796-2cf5864b5537"],
Cell[869952, 22573, 1275, 36, 70, "Input",ExpressionUUID->"21235549-6f81-4d20-9857-024ea390f5fc"]
}, Closed]],
Cell[CellGroupData[{
Cell[871264, 22614, 166, 7, 38, "Subsection",ExpressionUUID->"6706b0e2-401f-4048-8445-0c1b6126600c"],
Cell[871433, 22623, 159, 4, 29, "Input",ExpressionUUID->"4fb56c53-a0e3-4f0c-96fd-9417e209296b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[871641, 22633, 171, 4, 68, "Section",ExpressionUUID->"60614cca-24a6-49cb-92b4-25008c1bebb7"],
Cell[871815, 22639, 226, 3, 70, "Text",ExpressionUUID->"f2fd5974-1777-4119-8d78-63f518bd19a5"],
Cell[872044, 22644, 488, 10, 70, "Input",ExpressionUUID->"aa7bd4fa-7417-4ad6-ac87-5ff03b84eac6"],
Cell[872535, 22656, 1646, 31, 70, "Input",ExpressionUUID->"b0301431-7e33-45f7-b611-76bf5cd3a1d8"],
Cell[874184, 22689, 409, 9, 70, "Input",ExpressionUUID->"585bae98-0c4c-4892-933a-80a72f2361d7"],
Cell[874596, 22700, 295, 7, 70, "Input",ExpressionUUID->"3fe60f9f-e6e4-4949-b077-b61a735bb2bf"],
Cell[874894, 22709, 193, 3, 70, "Text",ExpressionUUID->"d597e3be-ab15-4a42-a8e2-b20d6c8a9059"],
Cell[875090, 22714, 268, 7, 70, "Input",ExpressionUUID->"1c371f64-8a8d-4d31-bf4d-8fd5d661e1e6"],
Cell[875361, 22723, 286, 7, 70, "Input",ExpressionUUID->"4feaa52d-8c0a-4ca0-aa42-f19630b7f5bc"],
Cell[875650, 22732, 283, 7, 70, "Input",ExpressionUUID->"09daab01-931a-4deb-ac00-3c4d8321a640"],
Cell[875936, 22741, 600, 11, 70, "Input",ExpressionUUID->"c129ccd2-d6b3-450d-8b91-509ace1ab821"],
Cell[876539, 22754, 454, 9, 70, "Input",ExpressionUUID->"e6c7fa0a-3c9f-4ffb-a3c6-5da322637076"],
Cell[876996, 22765, 642, 14, 70, "Input",ExpressionUUID->"fcd8fab9-6709-46fb-aba0-785db6374489"],
Cell[877641, 22781, 372, 8, 70, "Input",ExpressionUUID->"9e3d0343-866e-4310-9157-a84ae33507e7"],
Cell[878016, 22791, 887, 15, 70, "Input",ExpressionUUID->"adb2a710-8839-4238-b5a2-499d788c1bac"],
Cell[878906, 22808, 287, 7, 70, "Input",ExpressionUUID->"9e78862b-52a4-4df8-b2d4-539cf5e8ef51"],
Cell[879196, 22817, 641, 15, 70, "Input",ExpressionUUID->"0c0a2ce7-0c6c-4efd-a115-f118831f7224"],
Cell[879840, 22834, 451, 9, 70, "Input",ExpressionUUID->"ad960b19-b171-4f7f-a026-4a690360db70"],
Cell[880294, 22845, 241, 6, 70, "Input",ExpressionUUID->"62758656-7ac9-4083-93f5-3e4633f743db"],
Cell[880538, 22853, 1158, 21, 70, "Input",ExpressionUUID->"ba3b4aa9-06eb-416c-92d0-3e0e216ab39a"],
Cell[881699, 22876, 425, 9, 70, "Input",ExpressionUUID->"1b896655-3298-4781-acf8-5103b3e486bc"],
Cell[882127, 22887, 1077, 21, 70, "Input",ExpressionUUID->"861ce4db-13c5-4c7e-94a6-7b3f35ef7cae"],
Cell[883207, 22910, 806, 16, 70, "Input",ExpressionUUID->"84ebfeb6-7030-4797-afa4-a79e6a54a0f2"],
Cell[884016, 22928, 192, 3, 70, "Text",ExpressionUUID->"dc829381-e197-4d16-aed5-88c3aa7ca1d5"],
Cell[884211, 22933, 1070, 28, 70, "Input",ExpressionUUID->"630f8183-c17a-40d7-a156-84f87c95fe91"],
Cell[885284, 22963, 441, 12, 70, "Input",ExpressionUUID->"e384b261-2123-4b8d-88e9-c6cb6e5f2b75"],
Cell[885728, 22977, 487, 12, 70, "Input",ExpressionUUID->"692a523b-9d93-418f-9e67-bffdf19172a5"],
Cell[886218, 22991, 1348, 26, 70, "Input",ExpressionUUID->"aa99f970-4d97-4bc5-ab98-c0d524c38a57"],
Cell[887569, 23019, 504, 12, 70, "Input",ExpressionUUID->"db452ee5-75a9-48f9-99e9-4067d5988622"],
Cell[888076, 23033, 1367, 29, 70, "Input",ExpressionUUID->"04758cf9-aabd-4db6-9456-fd14a71f8b01"],
Cell[889446, 23064, 220, 3, 70, "Text",ExpressionUUID->"03fe94e2-656c-403d-be3d-24c0bbaa516d"],
Cell[889669, 23069, 734, 15, 70, "Input",ExpressionUUID->"76d8a988-8e94-420a-a49c-b1af16deeda4"],
Cell[890406, 23086, 617, 14, 70, "Input",ExpressionUUID->"d7979fb3-6c46-4916-a96f-7e193434b793"],
Cell[891026, 23102, 1404, 32, 70, "Input",ExpressionUUID->"54bd9b14-4b7b-42fc-987f-59585985064a"],
Cell[892433, 23136, 161, 4, 70, "Input",ExpressionUUID->"9bc1bbf6-00c7-4426-9b76-917704014ddb"],
Cell[CellGroupData[{
Cell[892619, 23144, 170, 7, 70, "Subsection",ExpressionUUID->"c5c60def-87c3-4330-baa1-b293dc3443c3"],
Cell[CellGroupData[{
Cell[892814, 23155, 210, 10, 70, "Subsubsection",ExpressionUUID->"1edec70e-eee8-4931-919e-8773f9ffca82"],
Cell[893027, 23167, 184, 4, 70, "Text",ExpressionUUID->"fdf572c0-d401-4a53-950c-68c52f128df5"],
Cell[893214, 23173, 2830, 75, 70, "Input",ExpressionUUID->"4e40f4f3-5c87-4696-8725-0f10d9147e6c"],
Cell[896047, 23250, 499, 11, 70, "Text",ExpressionUUID->"9bb42de4-6b10-4feb-8031-ba4df2929e47"],
Cell[896549, 23263, 1449, 44, 70, "Input",ExpressionUUID->"c50dc0b5-0ee1-43c0-b42f-cf51fbabd09f"]
}, Closed]],
Cell[CellGroupData[{
Cell[898035, 23312, 236, 10, 70, "Subsubsection",ExpressionUUID->"cbda8825-46d2-4dbc-bf15-a559fedee625"],
Cell[CellGroupData[{
Cell[898296, 23326, 229, 7, 70, "Item",ExpressionUUID->"3a4c7849-eff5-42dd-ae60-6e3be65eafac",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[898528, 23335, 414, 12, 70, "Text",ExpressionUUID->"9a33b4ac-7379-4e62-8a40-385bcdfde8eb",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[898945, 23349, 217, 5, 70, "Text",ExpressionUUID->"03cdbebb-2295-4f14-bfc4-2ee415357226",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[899165, 23356, 1631, 44, 70, "Input",ExpressionUUID->"ab2733b9-263f-486f-af2a-d9a0d85c61d9",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[900799, 23402, 277, 6, 70, "Text",ExpressionUUID->"13175fdd-adbc-4931-bbe0-0a9afa5b1ef2",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[901079, 23410, 2191, 57, 70, "Input",ExpressionUUID->"e73be8c6-9995-4b89-a428-2ea47cba4c0d",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[903307, 23472, 468, 16, 70, "Item",ExpressionUUID->"4d438efb-1de9-48d5-8d50-93f50cf53c5d",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[903778, 23490, 355, 8, 70, "Input",ExpressionUUID->"46cdf012-fc66-4328-a4a8-3e6de087afc1"],
Cell[904136, 23500, 217, 5, 70, "Text",ExpressionUUID->"f7a609c8-8365-4b8a-b896-14ab4fd2011d",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[904356, 23507, 5240, 129, 70, "Input",ExpressionUUID->"af74f7b8-709e-475c-93c3-aa5551fbe212",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[909599, 23638, 1636, 46, 70, "Text",ExpressionUUID->"d61ff425-67ff-4709-bef3-1219df3ea905",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[911238, 23686, 163, 3, 70, "Text",ExpressionUUID->"57d8ab61-daeb-47ab-a058-2df7846e1814",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[911404, 23691, 585, 17, 70, "Input",ExpressionUUID->"19244310-2bd4-4d5a-a02e-5199645dd295",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[911992, 23710, 188, 3, 70, "Text",ExpressionUUID->"96dd64e1-c224-475e-8c93-7725f3a00a70",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[912183, 23715, 9402, 231, 70, "Input",ExpressionUUID->"6eb1d731-c1c1-4d40-8986-5c937894cdf8",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[921588, 23948, 1069, 34, 70, "Text",ExpressionUUID->"95c9b705-3ceb-41e5-bdc9-98bf2fb1c942",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[922660, 23984, 744, 21, 70, "Input",ExpressionUUID->"9d449d9b-c0a0-441e-bc03-a9b0edff5cfc",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[923407, 24007, 1335, 38, 70, "Input",ExpressionUUID->"1d45e7e8-9e92-49ba-b747-5bc56d42637c",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[924745, 24047, 903, 25, 70, "Input",ExpressionUUID->"3c10bbe2-b02a-4c26-bfec-d7da6017e539",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[925685, 24077, 362, 10, 70, "Item",ExpressionUUID->"c1d34d6c-d454-4342-8916-a5fd0473bed1",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[926050, 24089, 238, 6, 70, "Text",ExpressionUUID->"4fdfe02a-e14c-46f9-a550-2baae2c5cfbe",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[926291, 24097, 300, 7, 70, "Text",ExpressionUUID->"5b2f92e0-4bae-402b-ab3a-ff9711bece93",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[926594, 24106, 2124, 55, 70, "Input",ExpressionUUID->"39ef3650-16ff-4a15-9eff-7245f94114d9",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[928721, 24163, 351, 9, 70, "Input",ExpressionUUID->"90b2f013-84d7-49b9-8afd-cb53b7651a4d",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[929075, 24174, 1038, 28, 70, "Input",ExpressionUUID->"00761f48-ca41-4d5e-9496-8c4ac7ad1a0f",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[930116, 24204, 957, 16, 70, "Text",ExpressionUUID->"e6a02e8c-c72f-4132-bd2d-0ab60754f5c6",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[931076, 24222, 397, 11, 70, "Input",ExpressionUUID->"ba5b3748-0948-43cb-b209-c925280af2ac"],
Cell[931476, 24235, 1636, 41, 70, "Input",ExpressionUUID->"d6dee8c1-3ad1-4e79-bacd-3b91ffdd28fc"],
Cell[933115, 24278, 684, 10, 70, "Text",ExpressionUUID->"a4d94896-bf4d-47af-87fd-33f775a9997b"],
Cell[933802, 24290, 16336, 377, 70, "Input",ExpressionUUID->"3d0276be-571d-41b5-abef-0f57665610c5",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[950141, 24669, 788, 21, 70, "Text",ExpressionUUID->"cadde639-c713-40c2-a319-1de3ec620ab6",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[950932, 24692, 3813, 98, 70, "Input",ExpressionUUID->"6fca29bd-360b-4a0e-a67b-a12034875a5f",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[954748, 24792, 164, 3, 70, "Text",ExpressionUUID->"e9a8d41a-5b40-42f0-a972-ee81bb3bcd54",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[954915, 24797, 511, 14, 70, "Input",ExpressionUUID->"0e0ef88b-f054-48c2-a0d1-4897ad906fa2",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],
Cell[CellGroupData[{
Cell[955463, 24816, 222, 7, 70, "Item",ExpressionUUID->"ed478fd6-8b0c-4e38-9cea-8c84931c9dee",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[955688, 24825, 1003, 27, 70, "Text",ExpressionUUID->"58ebd07a-a708-4c7b-8344-229c8660fce4",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[956694, 24854, 3803, 96, 70, "Input",ExpressionUUID->"0dec8b13-bba0-4c2c-acbc-e8e9bc93f1bb",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[960558, 24957, 183, 7, 70, "Subsection",ExpressionUUID->"da217918-c99d-4ce2-ae95-92ce0cf52804"],
Cell[960744, 24966, 688, 11, 70, "Text",ExpressionUUID->"524991a5-98a9-40d1-8894-9ca3befe4624"],
Cell[CellGroupData[{
Cell[961457, 24981, 241, 10, 70, "Subsubsection",ExpressionUUID->"4752c398-43a4-45e3-97b3-28112bde453f"],
Cell[961701, 24993, 169, 3, 70, "Text",ExpressionUUID->"58de283e-5610-4dc9-8dc9-070c4976700d"],
Cell[CellGroupData[{
Cell[961895, 25000, 167, 3, 70, "Item",ExpressionUUID->"32c12529-7849-486e-89a9-69ba227b5a1b",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[962065, 25005, 257, 6, 70, "Text",ExpressionUUID->"da55144c-e239-4b4e-86fb-a8ada20f2f60"],
Cell[962325, 25013, 2168, 65, 70, "Input",ExpressionUUID->"6ba575bd-3dc4-4764-852b-5b5f1f4f7d66"],
Cell[964496, 25080, 102, 0, 70, "Text",ExpressionUUID->"8e85606c-98e6-4a9f-a1ea-cc1e37528bf2"],
Cell[964601, 25082, 6879, 185, 70, "Input",ExpressionUUID->"65a9a9f9-35b3-47d5-b12f-f38b963c2d94"],
Cell[971483, 25269, 11873, 278, 70, "Input",ExpressionUUID->"70d2f162-3ea0-4055-9439-6e8392d544c8"],
Cell[983359, 25549, 145, 2, 70, "Text",ExpressionUUID->"58ccba73-06f7-42b4-9dda-3ca5231ed05f"],
Cell[983507, 25553, 442, 12, 70, "Input",ExpressionUUID->"2f433aeb-9ead-4086-9079-d441fa7e5c19"]
}, Closed]],
Cell[CellGroupData[{
Cell[983986, 25570, 83, 0, 70, "Item",ExpressionUUID->"e0bb99f1-b6b2-4fae-be26-6d65ff645b34"],
Cell[984072, 25572, 238, 5, 70, "Text",ExpressionUUID->"f15cd4c4-e2ee-49a1-9730-bc0241cb1cda"],
Cell[984313, 25579, 16944, 399, 70, "Input",ExpressionUUID->"a274ed24-af08-4143-be06-7065d7b56779"]
}, Closed]],
Cell[CellGroupData[{
Cell[1001294, 25983, 83, 0, 70, "Item",ExpressionUUID->"8ab08e55-bec0-44d6-b19f-ec3f874690e3"],
Cell[1001380, 25985, 238, 5, 70, "Text",ExpressionUUID->"b54cfefd-098f-40c1-8b63-af3e0b6e8831"],
Cell[1001621, 25992, 15777, 369, 70, "Input",ExpressionUUID->"d380c725-79da-4c39-a043-ebaeebcfca24"]
}, Closed]],
Cell[CellGroupData[{
Cell[1017435, 26366, 83, 0, 70, "Item",ExpressionUUID->"5489a124-a492-4370-89c2-8bea07b23fcc"],
Cell[1017521, 26368, 238, 5, 70, "Text",ExpressionUUID->"cd825a33-3f7d-409b-87f0-fcc0dbd210ea"],
Cell[1017762, 26375, 21175, 499, 70, "Input",ExpressionUUID->"7d6c06dc-6c74-4f9b-9f45-a21d72ca6754"]
}, Closed]],
Cell[CellGroupData[{
Cell[1038974, 26879, 123, 0, 70, "Item",ExpressionUUID->"328d4f1e-abf1-46c3-adff-d0b4b0b9d828"],
Cell[1039100, 26881, 238, 5, 70, "Text",ExpressionUUID->"56186a26-55fc-40e4-84dd-c85e97a28b4a"],
Cell[1039341, 26888, 20189, 476, 70, "Input",ExpressionUUID->"1bf9d479-8964-4297-b123-a07c4e928c3f"]
}, Closed]],
Cell[CellGroupData[{
Cell[1059567, 27369, 83, 0, 70, "Item",ExpressionUUID->"797bfead-0439-49d6-891f-45f3f52db796"],
Cell[1059653, 27371, 238, 5, 70, "Text",ExpressionUUID->"bbc884e7-a355-4ed5-a649-931f6ec2fa75"],
Cell[1059894, 27378, 20575, 484, 70, "Input",ExpressionUUID->"d8c8ca2d-14f6-408b-88aa-4bf29e42caa9"]
}, Closed]],
Cell[CellGroupData[{
Cell[1080506, 27867, 83, 0, 70, "Item",ExpressionUUID->"bfe6d47a-c8fe-4120-a368-9b9f9f8ad02f"],
Cell[1080592, 27869, 358, 8, 70, "Text",ExpressionUUID->"291c3347-6a13-405a-b688-fad01c2216ad"],
Cell[1080953, 27879, 51003, 1166, 70, "Input",ExpressionUUID->"672bf2e8-50e0-4a91-8a4d-b71360d94d86",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[1131993, 29050, 83, 0, 70, "Item",ExpressionUUID->"64049c0c-c575-4904-a093-abd750ee256f"],
Cell[1132079, 29052, 361, 8, 70, "Text",ExpressionUUID->"711b2484-3bd8-4979-b093-938cde8f5a7e"],
Cell[1132443, 29062, 127374, 2920, 70, "Input",ExpressionUUID->"52dd8d37-0c97-4ab9-83fe-d726ada7b15b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[1259854, 31987, 123, 0, 70, "Item",ExpressionUUID->"74f8001e-15e4-4704-8e61-b6f416fbfeb2"],
Cell[1259980, 31989, 358, 8, 70, "Text",ExpressionUUID->"c2c0ae8c-b23f-4284-9b5e-1950037a65bb"],
Cell[1260341, 31999, 50703, 1159, 70, "Input",ExpressionUUID->"5da4619e-32e5-4e30-8409-fd193f8327bc",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[1311081, 33163, 83, 0, 70, "Item",ExpressionUUID->"3d0c09a2-0346-4269-b483-eccb54055148"],
Cell[1311167, 33165, 361, 8, 70, "Text",ExpressionUUID->"81e7a131-d5ec-4bc0-8bad-f85d21304616"],
Cell[1311531, 33175, 104433, 2425, 70, "Input",ExpressionUUID->"35093b7f-d077-4887-8841-c8f4b97c59bc",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1416013, 35606, 229, 10, 70, "Subsubsection",ExpressionUUID->"58f56edb-2bec-45c1-bd30-50164c9d6a59"],
Cell[1416245, 35618, 164, 3, 70, "Text",ExpressionUUID->"8f8c7b86-f6c7-48ed-9f65-f8b7bd09673f"],
Cell[CellGroupData[{
Cell[1416434, 35625, 163, 3, 70, "Item",ExpressionUUID->"a34bb1cb-87bb-4ab1-bea9-c7793428e6cc",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1416600, 35630, 384, 9, 70, "Text",ExpressionUUID->"b43a949c-c273-40b7-824a-bc22d23f0857"],
Cell[1416987, 35641, 206, 5, 70, "Input",ExpressionUUID->"147e4281-de5e-4499-a642-2295fa100ccc"],
Cell[1417196, 35648, 674, 18, 70, "Input",ExpressionUUID->"b337e2bb-9521-4776-94a6-c0539926b568"],
Cell[1417873, 35668, 5494, 141, 70, "Input",ExpressionUUID->"f4ab4fdc-9b40-40e9-9829-7659e18c971d"],
Cell[1423370, 35811, 331, 6, 70, "Text",ExpressionUUID->"f38b0ed2-72b4-4bf8-b9ab-1f26135ec89d"],
Cell[1423704, 35819, 11421, 260, 70, "Input",ExpressionUUID->"647c7c4f-ca1d-4017-94ad-3a2ce0a5b5cd"],
Cell[1435128, 36081, 405, 15, 70, "Text",ExpressionUUID->"b62bc844-0d13-48a9-85e3-24327548dfa4"]
}, Closed]],
Cell[CellGroupData[{
Cell[1435570, 36101, 83, 0, 70, "Item",ExpressionUUID->"7d2f5add-3d68-4046-8ead-dcf0847648f4"],
Cell[1435656, 36103, 2864, 78, 70, "Input",ExpressionUUID->"33e53d47-0cd1-43a7-83e4-2d96251fcfc0"]
}, Closed]],
Cell[CellGroupData[{
Cell[1438557, 36186, 83, 0, 70, "Item",ExpressionUUID->"1ff7fec4-f62e-43f7-9787-38e4034370b0"],
Cell[1438643, 36188, 2929, 80, 70, "Input",ExpressionUUID->"e4aeba2a-3a7d-4fa1-868b-7deed73926e9"]
}, Closed]],
Cell[CellGroupData[{
Cell[1441609, 36273, 96, 0, 70, "Item",ExpressionUUID->"0c41eea3-6307-4c37-a732-4f50e8ed38ba"],
Cell[1441708, 36275, 4387, 116, 70, "Input",ExpressionUUID->"42e4ba9c-61d7-431f-ad79-1c1f1a83f13b"]
}, Closed]],
Cell[CellGroupData[{
Cell[1446132, 36396, 83, 0, 70, "Item",ExpressionUUID->"0915d439-e5f4-47c1-bd13-8999a38ee46f"],
Cell[1446218, 36398, 2514, 67, 70, "Input",ExpressionUUID->"ceae32b3-f7d2-4eee-a217-5f9b57a35945"]
}, Closed]],
Cell[CellGroupData[{
Cell[1448769, 36470, 83, 0, 70, "Item",ExpressionUUID->"f3a3a3a1-abc2-46c6-b075-bdfc03b0d506"],
Cell[1448855, 36472, 166, 3, 70, "Text",ExpressionUUID->"69d3590d-8efe-4cca-85f1-94f6aa9aef5a"],
Cell[1449024, 36477, 28153, 670, 70, "Input",ExpressionUUID->"162d1289-00f8-4acb-8a96-0f480d98c2ec"],
Cell[1477180, 37149, 15074, 358, 70, "Input",ExpressionUUID->"d8a5f201-b3bb-47be-811f-620090e464e2"]
}, Closed]],
Cell[CellGroupData[{
Cell[1492291, 37512, 83, 0, 70, "Item",ExpressionUUID->"acae5680-df3e-4c4c-bd56-5bae0bda4716"],
Cell[1492377, 37514, 283, 4, 70, "Text",ExpressionUUID->"5d2df381-65a7-4782-81ef-6d61fa23ab4f"],
Cell[1492663, 37520, 34194, 803, 70, "Input",ExpressionUUID->"e0951e2c-0e96-44ae-9e87-f18d5eb8a508"],
Cell[1526860, 38325, 26628, 661, 70, "Input",ExpressionUUID->"2a24c64f-b59e-4725-9257-7ff12090708b"]
}, Closed]],
Cell[CellGroupData[{
Cell[1553525, 38991, 83, 0, 70, "Item",ExpressionUUID->"6d0de974-7b3c-4182-9587-c634d6e689ac"],
Cell[1553611, 38993, 143, 2, 70, "Text",ExpressionUUID->"9dfc86b3-9ef4-4c76-9588-32d827176342"],
Cell[1553757, 38997, 28161, 671, 70, "Input",ExpressionUUID->"94891363-cba0-4ab2-9ffd-0b466fae0ee0"],
Cell[1581921, 39670, 121, 0, 70, "Text",ExpressionUUID->"0122351d-769b-4aea-9840-a03ec4d4a200"]
}, Closed]],
Cell[CellGroupData[{
Cell[1582079, 39675, 83, 0, 70, "Item",ExpressionUUID->"b0a4572a-fa87-4f01-a401-caa119f23d88"],
Cell[1582165, 39677, 166, 3, 70, "Text",ExpressionUUID->"decd9032-fe82-4f2b-9dc0-e75a3c8c072a"],
Cell[1582334, 39682, 22881, 556, 70, "Input",ExpressionUUID->"314ca94c-b2a3-4c0d-9fc8-47216d59ee64"],
Cell[1605218, 40240, 12424, 317, 70, "Input",ExpressionUUID->"e3b3e5b9-d90d-4ea7-8734-2ab58b30b147"]
}, Closed]],
Cell[CellGroupData[{
Cell[1617679, 40562, 152, 2, 70, "Item",ExpressionUUID->"9b618885-a195-4e6d-b13c-a025e3976e72"],
Cell[1617834, 40566, 325, 6, 70, "Text",ExpressionUUID->"7b23d737-0ba0-4195-ae5d-565d8737c460"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1618208, 40578, 230, 10, 70, "Subsubsection",ExpressionUUID->"13784c72-3261-4855-9709-93d600f27eff"],
Cell[CellGroupData[{
Cell[1618463, 40592, 163, 3, 70, "Item",ExpressionUUID->"21ae957b-c02a-420c-a463-d86ee9245db1",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1618629, 40597, 102, 0, 70, "Text",ExpressionUUID->"ba5cd739-745a-4e60-85fa-fde866f4b6d5"],
Cell[1618734, 40599, 1028, 26, 70, "Input",ExpressionUUID->"9e6d28a2-667d-4688-bc25-746caf0e9c39"],
Cell[1619765, 40627, 5434, 145, 70, "Input",ExpressionUUID->"6f22605e-c1cd-4d2a-abde-30e6fb1467b3"],
Cell[1625202, 40774, 10673, 255, 70, "Input",ExpressionUUID->"600a2ff8-18bc-4c32-8205-dee11ac1caf2"],
Cell[1635878, 41031, 407, 15, 70, "Text",ExpressionUUID->"c1a142a7-0882-42db-a426-8ec9aec17f7a"]
}, Closed]],
Cell[CellGroupData[{
Cell[1636322, 41051, 83, 0, 70, "Item",ExpressionUUID->"30a495d0-7bed-4de3-886e-3adbc7f7eb8e"],
Cell[1636408, 41053, 7858, 186, 70, "Input",ExpressionUUID->"906056a3-aeca-4e76-b806-67e54494ac7c"]
}, Closed]],
Cell[CellGroupData[{
Cell[1644303, 41244, 83, 0, 70, "Item",ExpressionUUID->"8d090290-ff69-4787-b705-566a4d93abc7"],
Cell[1644389, 41246, 9106, 223, 70, "Input",ExpressionUUID->"d148f88f-a123-4342-a911-4c34f9068246"]
}, Closed]],
Cell[CellGroupData[{
Cell[1653532, 41474, 96, 0, 70, "Item",ExpressionUUID->"59cd01ff-0579-4aa3-bfaf-b3f7db2dcd06"],
Cell[1653631, 41476, 32666, 744, 70, "Input",ExpressionUUID->"c9264fe8-20be-4978-84d1-cdff82749767"]
}, Closed]],
Cell[CellGroupData[{
Cell[1686334, 42225, 83, 0, 70, "Item",ExpressionUUID->"e194850f-51ef-427e-9079-e9c44acb138f"],
Cell[1686420, 42227, 212, 3, 70, "Text",ExpressionUUID->"75b35f19-b015-4b7b-8011-afae68125e3b"],
Cell[1686635, 42232, 11735, 286, 70, "Input",ExpressionUUID->"1ba5129e-70db-44ff-b750-7b7466c86110"]
}, Closed]],
Cell[CellGroupData[{
Cell[1698407, 42523, 97, 0, 70, "Item",ExpressionUUID->"52142dde-db20-43e6-9c36-57ddf3b3cc4e"],
Cell[1698507, 42525, 232, 3, 70, "Text",ExpressionUUID->"a86c594d-f0fb-4950-b9dc-b1487d5cc002"],
Cell[1698742, 42530, 57459, 1319, 70, "Input",ExpressionUUID->"5dce2e8b-bcb0-4e3b-abfc-658c5a25f842"]
}, Closed]],
Cell[CellGroupData[{
Cell[1756238, 43854, 84, 0, 70, "Item",ExpressionUUID->"cf635b82-ffc8-4d7b-b0f9-cdfc2c94cded"],
Cell[1756325, 43856, 138, 1, 70, "Text",ExpressionUUID->"c699fa05-0e72-4bb9-93e6-87467d0581f1"],
Cell[1756466, 43859, 104365, 2385, 70, "Input",ExpressionUUID->"6313a33a-f864-4289-821c-f06efcd4b0be"]
}, Closed]],
Cell[CellGroupData[{
Cell[1860868, 46249, 83, 0, 70, "Item",ExpressionUUID->"97ab2961-5209-43cd-8484-1135962a33d8"],
Cell[1860954, 46251, 231, 3, 70, "Text",ExpressionUUID->"9e2d4190-7cae-475a-98c9-fd9373b21d9c"],
Cell[1861188, 46256, 38225, 882, 70, "Input",ExpressionUUID->"c1758dd0-3917-4594-b9d4-d7de6dffc688"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1899462, 47144, 263, 10, 70, "Subsubsection",ExpressionUUID->"1aa47735-205c-4213-9b50-5c49cb3b22e4"],
Cell[1899728, 47156, 263, 4, 70, "Text",ExpressionUUID->"4ec7fec8-157e-478a-aa45-e980b658cb8a"],
Cell[CellGroupData[{
Cell[1900016, 47164, 208, 7, 70, "Item",ExpressionUUID->"027b3048-c1e8-4969-bafa-778bbb8be97d",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1900227, 47173, 538, 17, 70, "Text",ExpressionUUID->"7627b75d-a77f-497b-8f53-b6ac03ecce12"],
Cell[1900768, 47192, 4042, 105, 70, "Input",ExpressionUUID->"8b0f30ac-7308-46ab-afd0-3417f16ca904"],
Cell[1904813, 47299, 2302, 59, 70, "Input",ExpressionUUID->"59f6bd81-6ceb-47ef-b2af-930c13e26ebf"]
}, Closed]],
Cell[CellGroupData[{
Cell[1907152, 47363, 109, 0, 70, "Item",ExpressionUUID->"592b0731-4eec-4cfa-84cc-13a437aabd99"],
Cell[1907264, 47365, 12949, 337, 70, "Input",ExpressionUUID->"998d7cda-cb64-4246-bdd8-c174d01f66f9"]
}, Closed]],
Cell[CellGroupData[{
Cell[1920250, 47707, 117, 0, 70, "Item",ExpressionUUID->"628eef7b-aded-4520-b54e-f0cc85c710d3"],
Cell[1920370, 47709, 47695, 1118, 70, "Input",ExpressionUUID->"f47b9e36-5b06-4578-a4f7-a5ca803e8014"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1968126, 48834, 162, 7, 70, "Subsection",ExpressionUUID->"428fe170-9580-456c-92aa-566a8eacd33a"],
Cell[CellGroupData[{
Cell[1968313, 48845, 218, 10, 70, "Subsubsection",ExpressionUUID->"1840d34c-5c9e-4787-ac73-64c3e404248d"],
Cell[1968534, 48857, 347, 9, 70, "Text",ExpressionUUID->"3efa313c-07df-41f7-9f58-5daf56b3abd0"],
Cell[1968884, 48868, 209, 5, 70, "Input",ExpressionUUID->"fc729999-dc29-4fc4-bbe3-601d7ec6c95d"],
Cell[1969096, 48875, 400, 8, 70, "Input",ExpressionUUID->"be3a10ac-ba3f-42ff-9baa-71cc64b90efd"],
Cell[1969499, 48885, 7105, 191, 70, "Input",ExpressionUUID->"f0a8dcf1-f632-4be3-91e1-ed081f37fe44"],
Cell[1976607, 49078, 788, 26, 70, "Text",ExpressionUUID->"6f185173-1f5b-4652-9017-be5ad3b694c0"],
Cell[1977398, 49106, 484, 14, 70, "Input",ExpressionUUID->"0f46725f-b604-44e7-ba5b-d068ae0b010a"],
Cell[1977885, 49122, 743, 22, 70, "Input",ExpressionUUID->"fe399153-f549-477a-9372-0204e9af6bc6"],
Cell[1978631, 49146, 208, 4, 70, "Text",ExpressionUUID->"fd2cfa14-fe02-4313-8577-1ee919c17602"],
Cell[1978842, 49152, 1528, 40, 70, "Input",ExpressionUUID->"26431bf5-2b4a-4c87-b885-e9bee719ef70"],
Cell[1980373, 49194, 228, 5, 70, "Text",ExpressionUUID->"412613fa-9e0f-47b1-af2c-4daf1a856d97"],
Cell[1980604, 49201, 928, 27, 70, "Input",ExpressionUUID->"014c3035-e3e4-4d75-92d3-df5e3db128ea"],
Cell[1981535, 49230, 950, 27, 70, "Input",ExpressionUUID->"34e6ef61-dd02-41b8-b80b-66a94cf34452"],
Cell[1982488, 49259, 404, 11, 70, "Text",ExpressionUUID->"3482516d-dae2-425e-b53d-a7ef6a487c38"],
Cell[1982895, 49272, 3070, 79, 70, "Input",ExpressionUUID->"3d393635-e47b-43b9-b113-09576e728d50"],
Cell[1985968, 49353, 661, 17, 70, "Input",ExpressionUUID->"10819bd1-abd8-417c-80a9-b79fcf7dfffc"],
Cell[1986632, 49372, 215, 5, 70, "Text",ExpressionUUID->"9f01afff-5d82-4eae-b3d3-a2e4b4e781ef"],
Cell[1986850, 49379, 1372, 43, 70, "Input",ExpressionUUID->"74113379-1f94-4f8a-b951-50602255ec72"],
Cell[1988225, 49424, 8169, 247, 70, "Input",ExpressionUUID->"7e8ec40a-8163-4512-a57c-833691e36d4c"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1996443, 49677, 221, 7, 70, "Subsection",ExpressionUUID->"f0ffaedd-c797-495c-a4a1-46bccc4f47f7"],
Cell[CellGroupData[{
Cell[1996689, 49688, 210, 10, 70, "Subsubsection",ExpressionUUID->"09a7d234-0784-49e3-9839-c5ce1f546c10"],
Cell[1996902, 49700, 115, 0, 70, "Text",ExpressionUUID->"85136167-d851-4998-925f-0fc4adec8faa"],
Cell[1997020, 49702, 2965, 79, 70, "Input",ExpressionUUID->"3f4cf023-ab0f-4097-8543-aff9cc43f02a"],
Cell[1999988, 49783, 285, 6, 70, "Text",ExpressionUUID->"de59bf16-7d4c-4c2f-9ade-324a1c0ca78d"],
Cell[2000276, 49791, 2938, 77, 70, "Input",ExpressionUUID->"eca5b081-d731-4791-9cb9-30e68802f9b7",
 Evaluatable->False],
Cell[2003217, 49870, 3109, 81, 70, "Input",ExpressionUUID->"139c3cbf-c9d9-48a8-a98b-8c19d4fe948b",
 Evaluatable->False],
Cell[2006329, 49953, 108, 0, 70, "Text",ExpressionUUID->"20e9f64c-3c09-41e2-8372-dfb95c80af9b"],
Cell[2006440, 49955, 3359, 90, 70, "Input",ExpressionUUID->"15741003-769c-46be-bb35-dbf39c515240"]
}, Closed]],
Cell[CellGroupData[{
Cell[2009836, 50050, 213, 10, 70, "Subsubsection",ExpressionUUID->"7ddc9247-79aa-40c5-a85f-35ca34778aa8"],
Cell[2010052, 50062, 431, 6, 70, "Text",ExpressionUUID->"bfe9fefa-af6b-4e2e-8262-41892805098a"],
Cell[2010486, 50070, 1697, 47, 70, "Input",ExpressionUUID->"148073d1-ddc9-47f5-8e03-4863df33a9cc"],
Cell[2012186, 50119, 339, 5, 70, "Text",ExpressionUUID->"4c8ec0f2-20a5-49a7-af21-9cb377cb30dd"],
Cell[2012528, 50126, 213, 4, 70, "Input",ExpressionUUID->"cd7be513-d8d2-441d-82c2-8174c5cf2c2b",
 Evaluatable->False],
Cell[2012744, 50132, 97, 0, 70, "Text",ExpressionUUID->"c990bdbb-1c95-406a-9a7a-76d02b96c725"],
Cell[2012844, 50134, 259, 7, 70, "Input",ExpressionUUID->"07fedce7-d4fc-46a9-9d8f-0638d489408b"],
Cell[2013106, 50143, 483, 9, 70, "Text",ExpressionUUID->"2ccc7200-5cac-454b-a51f-f81d3bd25e31"],
Cell[2013592, 50154, 3783, 116, 70, "Input",ExpressionUUID->"a8694b99-dadd-413f-9c65-eac31f0fbc1a"],
Cell[2017378, 50272, 619, 17, 70, "Text",ExpressionUUID->"fd1ded1c-7cff-41d3-bc12-c5520ef4b4ac"],
Cell[2018000, 50291, 4483, 114, 70, "Input",ExpressionUUID->"de5c5767-c327-4ee3-91e3-2422209110e1"],
Cell[2022486, 50407, 125, 0, 70, "Text",ExpressionUUID->"0f0b3a26-ee76-425e-9768-41fad4df86d0"],
Cell[2022614, 50409, 548, 16, 70, "Input",ExpressionUUID->"f6d9b3ef-502c-4134-b775-9edb1be9c7db"],
Cell[2023165, 50427, 2503, 73, 70, "Input",ExpressionUUID->"bcc2d301-6d80-40d2-8037-d985b676f7d1"],
Cell[2025671, 50502, 1941, 53, 70, "Input",ExpressionUUID->"8cdff088-68a8-413b-b549-25dfce854577"],
Cell[2027615, 50557, 2003, 55, 70, "Input",ExpressionUUID->"d8baf1de-e919-4a37-8b7f-c61eef64bdb4"],
Cell[2029621, 50614, 238, 6, 70, "Input",ExpressionUUID->"e6eeb7f0-9348-44b4-922f-04bcd9ccf8f4"],
Cell[2029862, 50622, 389, 9, 70, "Input",ExpressionUUID->"df7fb41f-53b7-4247-86f4-96f4c33a704a"]
}, Closed]],
Cell[CellGroupData[{
Cell[2030288, 50636, 206, 10, 70, "Subsubsection",ExpressionUUID->"000b37fb-664f-4af7-afdd-f24b1ea3233b"],
Cell[2030497, 50648, 530, 10, 70, "Text",ExpressionUUID->"c4379cdf-d7ab-4471-a7b3-5bbe481cf4a2"],
Cell[2031030, 50660, 2648, 75, 70, "Input",ExpressionUUID->"5ce5bc77-f81e-4b55-acf3-375f8c27c69a"],
Cell[2033681, 50737, 1392, 41, 70, "Input",ExpressionUUID->"13c3de3e-0894-437f-b8f3-6a797057a1a1"],
Cell[2035076, 50780, 362, 5, 70, "Text",ExpressionUUID->"7c359209-ca67-4feb-9719-69c071d09068"],
Cell[2035441, 50787, 10943, 262, 70, "Input",ExpressionUUID->"1563b761-d0db-4a86-9b22-b5ae328c4170"],
Cell[2046387, 51051, 781, 20, 70, "Input",ExpressionUUID->"e231240a-fd8f-4565-aaf4-20afc5c120e0"],
Cell[2047171, 51073, 452, 8, 70, "Text",ExpressionUUID->"2e2035f8-a7b6-4ab8-8a88-96692c364e2e"],
Cell[2047626, 51083, 2865, 77, 70, "Input",ExpressionUUID->"0d060885-f303-4d8d-9efc-e4281e06c289"],
Cell[2050494, 51162, 226, 3, 70, "Text",ExpressionUUID->"efc77767-2f0b-4b4c-b4b5-610c13dca05e"],
Cell[2050723, 51167, 7415, 172, 70, "Input",ExpressionUUID->"4d9e015e-2e9b-42a5-ad38-8ed8f0916c59"],
Cell[2058141, 51341, 192, 5, 70, "Input",ExpressionUUID->"d3a28ee5-b273-4243-be10-f8ea3d1ebe22"],
Cell[2058336, 51348, 151, 2, 70, "Text",ExpressionUUID->"d8d3f85b-cbd2-44fc-bbb7-565847e558f9"],
Cell[2058490, 51352, 1137, 35, 70, "Input",ExpressionUUID->"df422bb9-8104-444a-8290-a94f4eb40263"],
Cell[2059630, 51389, 2803, 69, 70, "Input",ExpressionUUID->"7ffce8e8-82a8-451d-a517-0291f62bf414"],
Cell[2062436, 51460, 430, 10, 70, "Input",ExpressionUUID->"34ff6798-e968-442e-9cb8-75a76e0c10e1"],
Cell[2062869, 51472, 159, 4, 70, "Input",ExpressionUUID->"470f0de9-b2ec-45d8-9dc3-536959d1ac05"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2063089, 51483, 172, 4, 54, "Section",ExpressionUUID->"2e36cfc7-e28c-4536-a20a-ba3dfeac0510"],
Cell[2063264, 51489, 646, 13, 70, "Input",ExpressionUUID->"306c1950-971e-4a4e-8e3d-674f810a521f"],
Cell[2063913, 51504, 409, 9, 70, "Input",ExpressionUUID->"c3d91181-805f-4fd5-96a2-7de5fb0baaf1"],
Cell[2064325, 51515, 455, 9, 70, "Input",ExpressionUUID->"ff94e806-3f01-45dc-9d7e-f9672972e47a"],
Cell[2064783, 51526, 304, 7, 70, "Input",ExpressionUUID->"cf3e33b3-d97b-4ed7-aa7f-82d92b3da953"],
Cell[2065090, 51535, 2073, 37, 70, "Input",ExpressionUUID->"172f6040-d1dd-492e-92c2-9c473efc2b13"],
Cell[2067166, 51574, 500, 10, 70, "Input",ExpressionUUID->"4aaebdad-35b3-4d80-a1c1-d20c6841d897"],
Cell[2067669, 51586, 495, 10, 70, "Input",ExpressionUUID->"2cd03471-40b9-47da-9e3c-76715c4977bf"],
Cell[2068167, 51598, 2084, 43, 70, "Input",ExpressionUUID->"e50347d4-aa81-4418-ae98-8994f84276e2"],
Cell[2070254, 51643, 161, 4, 70, "Input",ExpressionUUID->"301c3ead-b153-4915-acd8-588bfe8bfdf1"],
Cell[CellGroupData[{
Cell[2070440, 51651, 166, 7, 70, "Subsection",ExpressionUUID->"31776a9e-5c60-4496-bc16-0f75cd878c1d"],
Cell[CellGroupData[{
Cell[2070631, 51662, 210, 10, 70, "Subsubsection",ExpressionUUID->"8b4c3182-a2f4-4e23-9a93-b47e438f7335"],
Cell[2070844, 51674, 608, 11, 70, "Text",ExpressionUUID->"956d7a27-bc80-4788-a8f9-055d6169aba7"],
Cell[2071455, 51687, 1479, 40, 70, "Input",ExpressionUUID->"7c234573-da53-4378-8a59-137fa5129077"],
Cell[2072937, 51729, 495, 8, 70, "Text",ExpressionUUID->"b43165da-3bb3-4990-9a15-452bd9be7baf"],
Cell[2073435, 51739, 921, 25, 70, "Input",ExpressionUUID->"11687818-5d43-4ccb-9b1a-a386bf876164"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2074393, 51769, 248, 10, 70, "Subsubsection",ExpressionUUID->"ec6d0a04-6d38-4937-aef3-02991cb05389"],
Cell[2074644, 51781, 607, 17, 70, "Text",ExpressionUUID->"d6a06861-cd56-42fe-b285-42345f351971"],
Cell[2075254, 51800, 2936, 76, 70, "Input",ExpressionUUID->"576e9621-987d-4255-b1f8-d245a5568d5e"],
Cell[2078193, 51878, 568, 8, 70, "Text",ExpressionUUID->"4b5e3860-c016-4497-bfb8-c0da48d267d6"],
Cell[2078764, 51888, 2722, 80, 70, "Input",ExpressionUUID->"ba594d6f-3819-4f8f-b211-d5a6f3f99bbe"],
Cell[2081489, 51970, 554, 10, 70, "Text",ExpressionUUID->"d78be527-b83c-43cc-ada5-5e64c2484c1d"],
Cell[2082046, 51982, 1276, 28, 70, "Input",ExpressionUUID->"dea4a981-3a46-4c32-877c-b2fed5b7e6be"],
Cell[2083325, 52012, 4356, 119, 70, "Input",ExpressionUUID->"f1dbfac5-3bc5-4a54-9728-af0dce47d881"],
Cell[2087684, 52133, 24122, 552, 70, "Input",ExpressionUUID->"1097e10a-28ac-46c1-9265-70117b5e0929"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2111855, 52691, 161, 7, 70, "Subsection",ExpressionUUID->"3a3abbe5-3902-4336-b5da-2902681c5259"],
Cell[CellGroupData[{
Cell[2112041, 52702, 210, 10, 70, "Subsubsection",ExpressionUUID->"7f955be0-4edd-4113-a5e6-96bceb7668ca"],
Cell[2112254, 52714, 242, 4, 70, "Text",ExpressionUUID->"9f7c5c94-ac60-4997-be1e-58bb6e38fc3d"],
Cell[2112499, 52720, 1612, 35, 70, "Input",ExpressionUUID->"c5c128cf-b607-4545-b4a2-b8ea79224d4c"],
Cell[2114114, 52757, 202, 3, 70, "Text",ExpressionUUID->"622a898b-b5e4-4494-8eee-2463f4c1f24d"],
Cell[2114319, 52762, 356, 10, 70, "Input",ExpressionUUID->"fce54413-8de9-4eb3-bcd0-0193015afbb5"],
Cell[2114678, 52774, 123, 0, 70, "Text",ExpressionUUID->"a1348cc7-3f8f-45a0-929e-c63d8f27d257"],
Cell[2114804, 52776, 602, 18, 70, "Input",ExpressionUUID->"fc1e8314-e5af-48e0-aaa3-6e5d02f80c37"],
Cell[2115409, 52796, 5258, 128, 70, "Input",ExpressionUUID->"eef13236-ee54-441a-aed0-2a91d14eb097"],
Cell[2120670, 52926, 192, 3, 70, "Text",ExpressionUUID->"cfbeb5c6-3cae-455f-bd53-56b06eb6c0ac"],
Cell[2120865, 52931, 256, 7, 70, "Input",ExpressionUUID->"d22e8443-b5f0-4761-aa0a-f4708e768ab8"],
Cell[2121124, 52940, 11961, 277, 70, "Input",ExpressionUUID->"c494daba-d1ca-41e9-bd03-0e1b250c38fe"],
Cell[2133088, 53219, 1129, 33, 70, "Input",ExpressionUUID->"55730541-4165-4dc0-9be5-83864a153d7b"],
Cell[2134220, 53254, 902, 25, 70, "Input",ExpressionUUID->"b3e532d1-2d13-4932-9d9d-6f5b59bf635f"],
Cell[2135125, 53281, 1843, 57, 70, "Input",ExpressionUUID->"07e42029-8425-4d9c-a50e-eec83346d934"]
}, Closed]],
Cell[CellGroupData[{
Cell[2137005, 53343, 207, 10, 70, "Subsubsection",ExpressionUUID->"72150ce5-87ae-4aa2-a8d3-dccee38e5126"],
Cell[2137215, 53355, 249, 5, 70, "Text",ExpressionUUID->"a3025936-6284-43e5-9d45-9672198d3380"],
Cell[2137467, 53362, 1763, 49, 70, "Input",ExpressionUUID->"6c7c9df7-3c4d-4c07-a925-e1aa17d74f58"],
Cell[2139233, 53413, 8229, 202, 70, "Input",ExpressionUUID->"d1a54c89-0c5c-47bd-a0f6-05ae4a5c9a94"],
Cell[2147465, 53617, 810, 19, 70, "Input",ExpressionUUID->"9ccab754-5c14-490c-af12-d97668f0c73f"]
}, Closed]],
Cell[CellGroupData[{
Cell[2148312, 53641, 226, 10, 70, "Subsubsection",ExpressionUUID->"96041e09-1730-4586-a599-a2b3e68ceeda"],
Cell[2148541, 53653, 2276, 61, 70, "Input",ExpressionUUID->"2132d6b2-c08d-4339-82a2-a15e76083af0"],
Cell[2150820, 53716, 246, 4, 70, "Text",ExpressionUUID->"d4b0fd2f-3f55-4121-a87b-e462b32139de"],
Cell[2151069, 53722, 10221, 254, 70, "Input",ExpressionUUID->"a53f6062-30fe-437d-b029-bac818bfe878"]
}, Closed]],
Cell[CellGroupData[{
Cell[2161327, 53981, 212, 10, 70, "Subsubsection",ExpressionUUID->"cc1c688a-a953-4ad1-8c00-207a00d3d390"],
Cell[2161542, 53993, 1806, 49, 70, "Input",ExpressionUUID->"d8204356-31ec-41bf-85a3-329d71af5919"],
Cell[2163351, 54044, 5976, 142, 70, "Input",ExpressionUUID->"4515f70e-fd90-4284-90ae-48aaaefc5f59"],
Cell[2169330, 54188, 2984, 72, 70, "Input",ExpressionUUID->"0bc372bd-4879-41a1-9608-420aebbe9d76"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2172363, 54266, 162, 7, 70, "Subsection",ExpressionUUID->"9da2536e-5255-40c8-9d5f-6c80a71c9ba9"],
Cell[2172528, 54275, 1582, 39, 70, "Input",ExpressionUUID->"51869ead-39dc-4326-b16e-f284363edc72"],
Cell[2174113, 54316, 5365, 128, 70, "Input",ExpressionUUID->"ef405b22-30c8-406c-860d-1121402f3ade"],
Cell[2179481, 54446, 30281, 713, 70, "Input",ExpressionUUID->"0e8a08fa-b6e2-47b2-9ddc-c88669648bb5"],
Cell[2209765, 55161, 159, 4, 70, "Input",ExpressionUUID->"96bf7a12-2465-47ed-a4c0-1ee77155c9c0"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2209973, 55171, 169, 4, 54, "Section",ExpressionUUID->"1a5eceee-b69b-4f22-96c7-8e73e72a41a3"],
Cell[2210145, 55177, 1063, 19, 70, "Input",ExpressionUUID->"94c59a73-0d0a-4e85-9324-d6b5a0a0358c"],
Cell[2211211, 55198, 409, 9, 70, "Input",ExpressionUUID->"b3f75340-83d6-4f56-84d9-1dce12ac7c2d"],
Cell[2211623, 55209, 276, 7, 70, "Input",ExpressionUUID->"3c0352af-5991-4289-8f2d-bdcef561871f"],
Cell[2211902, 55218, 378, 8, 70, "Input",ExpressionUUID->"05536d25-65ec-49d0-bf5d-5596468379be"],
Cell[2212283, 55228, 772, 14, 70, "Input",ExpressionUUID->"0e8a696a-6c76-4943-bb77-2ae201723d80"],
Cell[2213058, 55244, 383, 8, 70, "Input",ExpressionUUID->"4e18438a-e695-4fe8-a9f1-b92ee04def53"],
Cell[2213444, 55254, 3709, 74, 70, "Input",ExpressionUUID->"995b814d-9fd4-4556-82a2-9bdf37627324"],
Cell[2217156, 55330, 386, 9, 70, "Input",ExpressionUUID->"fdfce7ad-9182-480b-beae-bb4def33a27c"],
Cell[2217545, 55341, 452, 9, 70, "Input",ExpressionUUID->"09693627-693f-4657-b33a-7711891b5fb4"],
Cell[2218000, 55352, 1347, 24, 70, "Input",ExpressionUUID->"81617218-c397-44be-9d25-b20f16782d70"],
Cell[2219350, 55378, 471, 10, 70, "Input",ExpressionUUID->"dde496ea-e0b5-48c9-8d9d-f7b1d801b65d"],
Cell[2219824, 55390, 1626, 37, 70, "Input",ExpressionUUID->"892e04a4-7d31-4b14-bba7-020fbe603504"],
Cell[2221453, 55429, 395, 8, 70, "Input",ExpressionUUID->"09695fee-f810-4506-85b2-1e4e97bd6dd3"],
Cell[2221851, 55439, 326, 8, 70, "Text",ExpressionUUID->"84c69218-171a-41bc-8219-ed60ff00aca1",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2222180, 55449, 161, 4, 70, "Input",ExpressionUUID->"e47b49c9-e5e0-4a21-b4a5-fe8e39628986"],
Cell[2222344, 55455, 358, 7, 70, "Text",ExpressionUUID->"e748c0f3-df64-42d6-87f5-28272dacc2b8",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[CellGroupData[{
Cell[2222727, 55466, 201, 7, 70, "Subsection",ExpressionUUID->"b421c4a5-f9af-45e4-9e55-e86c4b1f2173"],
Cell[2222931, 55475, 188, 3, 70, "Text",ExpressionUUID->"8509469b-763c-4992-80f7-fb7f7ab67d70",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2223122, 55480, 1872, 53, 70, "Input",ExpressionUUID->"65d7920f-0960-4943-8dc3-4c868e2d9d62"],
Cell[2224997, 55535, 571, 10, 70, "Text",ExpressionUUID->"6ede69b5-9cd3-40d6-8030-7f30f6e16e45",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2225571, 55547, 755, 19, 70, "Input",ExpressionUUID->"273fc9e5-4892-4c47-ac83-c973251d10b4"],
Cell[2226329, 55568, 345, 7, 70, "Text",ExpressionUUID->"cd8887d5-0efb-43b3-a6e5-97861e3d7a46",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2226677, 55577, 7615, 193, 70, "Input",ExpressionUUID->"b59a1153-301d-49aa-97ad-72b8c17149dd"],
Cell[2234295, 55772, 216, 3, 70, "Text",ExpressionUUID->"dec5b4a7-2680-4dcf-b3ca-f415baa0d684"],
Cell[2234514, 55777, 7577, 180, 70, "Input",ExpressionUUID->"1c7c3caf-7ab3-4ba1-9303-8f735c3074af"],
Cell[2242094, 55959, 184, 3, 70, "Text",ExpressionUUID->"96468a92-9280-4668-9fd6-d8b45ffcae1c"],
Cell[2242281, 55964, 7776, 187, 70, "Input",ExpressionUUID->"d6c4b3fa-068f-4426-8cfb-03cc135e9999"],
Cell[2250060, 56153, 89, 0, 70, "Text",ExpressionUUID->"d07f32ca-e009-4c97-9ef5-2d2d35fca7f1"],
Cell[2250152, 56155, 1251, 27, 70, "Input",ExpressionUUID->"2683869c-5a0d-4f99-8163-03e3e6c6e4c1"],
Cell[2251406, 56184, 147, 1, 70, "Text",ExpressionUUID->"722a37c4-a4d0-4b05-8bf8-9c366eb6f46e"],
Cell[2251556, 56187, 645, 14, 70, "Input",ExpressionUUID->"f5015e46-e498-4b07-a0ac-d75b53617e72"],
Cell[2252204, 56203, 149, 1, 70, "Text",ExpressionUUID->"c8c68ec7-03ea-4e29-ba44-3015f200f85e"],
Cell[2252356, 56206, 2377, 47, 70, "Input",ExpressionUUID->"3106667a-11eb-4780-926d-baf2b5d3a0e2"]
}, Closed]],
Cell[CellGroupData[{
Cell[2254770, 56258, 204, 7, 70, "Subsection",ExpressionUUID->"f1dbc753-d435-4a6d-b4c7-d4c5d80e2489"],
Cell[2254977, 56267, 336, 5, 70, "Text",ExpressionUUID->"8a59d881-3445-4f2a-b48e-5e32bf7183ce"],
Cell[2255316, 56274, 974, 28, 70, "Input",ExpressionUUID->"1f01aab2-4378-445b-a72d-37d60be47253"],
Cell[2256293, 56304, 2904, 80, 70, "Input",ExpressionUUID->"d314e179-4bbc-4d98-b9e4-7873d470a5b4"],
Cell[2259200, 56386, 1441, 35, 70, "Input",ExpressionUUID->"945fa8de-0371-4ec8-8bf9-5b2ba32db6e7"],
Cell[2260644, 56423, 6311, 164, 70, "Input",ExpressionUUID->"023308e1-8b04-439e-9d4d-b8f941e0409b"],
Cell[2266958, 56589, 56781, 1312, 70, "Input",ExpressionUUID->"ae1065c1-9835-4724-90da-fb0ca984691d"]
}, Closed]],
Cell[CellGroupData[{
Cell[2323776, 57906, 207, 7, 70, "Subsection",ExpressionUUID->"55d41403-b71f-4712-8945-0b997fc3e9fc"],
Cell[CellGroupData[{
Cell[2324008, 57917, 210, 10, 70, "Subsubsection",ExpressionUUID->"290be3bd-6cd6-42a9-b0b4-2daac816a3f7"],
Cell[2324221, 57929, 790, 18, 70, "Text",ExpressionUUID->"447f1ff7-f6f1-4b68-b225-18d5b84df69c"],
Cell[2325014, 57949, 263, 7, 70, "Input",ExpressionUUID->"2abdcb7e-a329-4c28-89a4-c0712a671e8c"],
Cell[2325280, 57958, 292, 6, 70, "Text",ExpressionUUID->"48a2f804-bb3f-4b96-8514-12623bf46dd2"],
Cell[2325575, 57966, 3326, 85, 70, "Input",ExpressionUUID->"81285ccd-5c79-4ca6-a5bb-962031654f49"],
Cell[2328904, 58053, 153, 3, 70, "Text",ExpressionUUID->"bf79b8e3-b266-4a1c-85d1-49546d42b6d5",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2329060, 58058, 787, 24, 70, "Input",ExpressionUUID->"f0cb170a-4656-43f9-8752-10329083bf70"],
Cell[2329850, 58084, 221, 6, 70, "Text",ExpressionUUID->"3fc1bac3-6a2c-4450-ad3d-e56bb8f6e756",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2330074, 58092, 1829, 49, 70, "Input",ExpressionUUID->"9350bb9e-aefc-4ba0-b2e9-da8e7c773415"],
Cell[2331906, 58143, 307, 7, 70, "Text",ExpressionUUID->"7e7b5344-f3aa-4ff7-9a93-655aa5981cdd",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2332216, 58152, 4127, 105, 70, "Input",ExpressionUUID->"608773a7-0343-4a33-a275-7d15ebd221ff"],
Cell[2336346, 58259, 453, 11, 70, "Text",ExpressionUUID->"8ed856c5-c355-4898-b1c2-bef1edda5791",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[2336802, 58272, 6497, 175, 70, "Input",ExpressionUUID->"f707761b-1ad8-4aa9-b776-21942ab6643e"],
Cell[2343302, 58449, 852, 14, 70, "Text",ExpressionUUID->"cbedef98-4127-444b-9ee9-ffb4bed25228"],
Cell[2344157, 58465, 5093, 143, 70, "Input",ExpressionUUID->"cc8e3ff8-7076-4368-a895-c8519c248787"],
Cell[2349253, 58610, 205, 3, 70, "Text",ExpressionUUID->"290d4de5-edb6-48e9-a5ee-3203345f1630"],
Cell[2349461, 58615, 2427, 67, 70, "Input",ExpressionUUID->"f1733125-50d5-4e28-9553-72408846e6bd"]
}, Closed]],
Cell[CellGroupData[{
Cell[2351925, 58687, 205, 10, 70, "Subsubsection",ExpressionUUID->"55b41415-b87f-45d6-ae5e-aca2435e11de"],
Cell[2352133, 58699, 119, 0, 70, "Text",ExpressionUUID->"0885b392-b2fd-4780-9903-0fbd5a195227"],
Cell[2352255, 58701, 3380, 86, 70, "Input",ExpressionUUID->"c7254d77-2d03-49be-839d-bfdbbe6b49bc"],
Cell[2355638, 58789, 362, 8, 70, "Text",ExpressionUUID->"1e2561e4-ffc8-4f67-b3fe-5c4746621e15"],
Cell[2356003, 58799, 510, 15, 70, "Input",ExpressionUUID->"428ff97f-47b8-45c6-9353-57dd5f0c65f4"]
}, Closed]],
Cell[CellGroupData[{
Cell[2356550, 58819, 251, 10, 70, "Subsubsection",ExpressionUUID->"81d67273-9b26-414a-a5f0-80d08ea001b8"],
Cell[2356804, 58831, 572, 9, 70, "Text",ExpressionUUID->"ce4ea755-2d49-4d31-a237-73868146b97e"],
Cell[2357379, 58842, 4613, 113, 70, "Input",ExpressionUUID->"0268e5a1-685a-4320-8297-c39e08915f9f"],
Cell[2361995, 58957, 599, 17, 70, "Text",ExpressionUUID->"9221967a-f63c-4744-988c-c5f303490c92"],
Cell[2362597, 58976, 1874, 48, 70, "Input",ExpressionUUID->"698ff176-71ea-4237-8313-e6913c60ad17",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[2364508, 59029, 253, 10, 70, "Subsubsection",ExpressionUUID->"d1fab53a-de07-48f1-93f0-70bc5cde1457"],
Cell[2364764, 59041, 733, 10, 70, "Text",ExpressionUUID->"dc6837e1-787c-442c-80cd-520333ce3f5f"],
Cell[2365500, 59053, 532, 12, 70, "Text",ExpressionUUID->"e8c0dde9-119e-450e-a13c-b7bbc49d9f1f"],
Cell[2366035, 59067, 2678, 70, 70, "Input",ExpressionUUID->"6bb5f098-1b81-4ff9-8347-a41be479755a"],
Cell[2368716, 59139, 250, 8, 70, "Text",ExpressionUUID->"cff90433-d8ab-476a-ad2c-1532a1f446d2"],
Cell[2368969, 59149, 28637, 668, 70, "Input",ExpressionUUID->"17491090-7169-444d-b2da-af5b9d96d2d9"],
Cell[2397609, 59819, 641, 13, 70, "Input",ExpressionUUID->"f72f2ae8-e5ad-4b2e-8d85-c74a81e34d37",
 Evaluatable->False],
Cell[2398253, 59834, 277, 7, 70, "Text",ExpressionUUID->"2004339b-a5ed-4d7c-b973-c688b4490b2b"],
Cell[2398533, 59843, 949, 28, 70, "Input",ExpressionUUID->"7c51d151-19a1-417a-95a4-dd52acd99d83"],
Cell[2399485, 59873, 471, 9, 70, "Text",ExpressionUUID->"0dc33902-e4f9-45e2-992f-be3c58c2bc19"],
Cell[2399959, 59884, 9680, 251, 70, "Input",ExpressionUUID->"f0cac43a-a5b5-414c-9ba9-84c76d1035cb"],
Cell[2409642, 60137, 297, 6, 70, "Text",ExpressionUUID->"05bf773e-bea5-4d74-8f4a-bfdbd69f354f"],
Cell[2409942, 60145, 4585, 137, 70, "Input",ExpressionUUID->"e2b95f55-d196-4acd-946c-7969f350f8e6"],
Cell[2414530, 60284, 242, 4, 70, "Text",ExpressionUUID->"a44a8f39-8078-43d6-8469-d67e5178d3b6"],
Cell[2414775, 60290, 1164, 38, 70, "Input",ExpressionUUID->"2e03cc5f-3e40-447c-a7ab-d9d15462853c"],
Cell[2415942, 60330, 529, 16, 70, "Input",ExpressionUUID->"16fbb544-26f0-494c-85d5-878560147981"]
}, Closed]],
Cell[CellGroupData[{
Cell[2416508, 60351, 239, 10, 70, "Subsubsection",ExpressionUUID->"6b939310-0ac4-4f83-be43-f67d5d5a528e"],
Cell[2416750, 60363, 569, 8, 70, "Text",ExpressionUUID->"5e04349c-e89b-4453-bdf9-a0c8881e0241"],
Cell[2417322, 60373, 508, 16, 70, "Input",ExpressionUUID->"cc91ff43-d28b-482a-be73-3ba36c80c350"],
Cell[2417833, 60391, 188, 3, 70, "Text",ExpressionUUID->"2d39579c-cb56-4b14-97e8-b5a458470a2b"],
Cell[2418024, 60396, 1204, 38, 70, "Input",ExpressionUUID->"eb8a3752-a219-4986-8081-23da3b90344f"],
Cell[2419231, 60436, 84, 0, 70, "Text",ExpressionUUID->"1158ca6d-7a2b-4078-832c-c1c5afb310fb"],
Cell[2419318, 60438, 1080, 33, 70, "Input",ExpressionUUID->"58f6f4ea-7bc7-409c-a237-5e64d7f13d66"],
Cell[2420401, 60473, 84, 0, 70, "Text",ExpressionUUID->"b38a2216-04d4-4e65-8628-b4f0c0bbbf33"],
Cell[2420488, 60475, 9333, 269, 70, "Input",ExpressionUUID->"2b946737-44b6-451d-9d2e-6e6d73d49ef9"],
Cell[2429824, 60746, 84, 0, 70, "Text",ExpressionUUID->"2c5fdd3a-19a6-4dce-bd2e-97d71e72f516"],
Cell[2429911, 60748, 9515, 273, 70, "Input",ExpressionUUID->"cb52c7bd-0855-49a8-859e-4de8a9ef6df0"],
Cell[2439429, 61023, 84, 0, 70, "Text",ExpressionUUID->"3bef303a-2d39-473f-83a0-e62c7ff49610"],
Cell[2439516, 61025, 14955, 404, 70, "Input",ExpressionUUID->"0328597e-8fe7-4b0d-92f9-a316bbe443df"],
Cell[2454474, 61431, 8148, 220, 70, "Input",ExpressionUUID->"ab6bea84-001b-4b02-9aa9-6b8fb29d0ba7"],
Cell[2462625, 61653, 868, 25, 70, "Text",ExpressionUUID->"8b74032a-596c-4fee-b8ce-04141b63b542"],
Cell[2463496, 61680, 4231, 112, 70, "Input",ExpressionUUID->"554103e6-a29b-4723-9efd-93a40e169911"],
Cell[2467730, 61794, 152, 2, 70, "Text",ExpressionUUID->"47be6f27-a1e2-4cb4-a3be-3ca2063d46e3"],
Cell[2467885, 61798, 5963, 162, 70, "Input",ExpressionUUID->"d673cd2d-15a8-4500-b2c4-5a6883ae1b9f"],
Cell[2473851, 61962, 258, 4, 70, "Text",ExpressionUUID->"9962236f-dfbf-487d-aa34-55b0ca8cecff"],
Cell[2474112, 61968, 30069, 784, 70, "Input",ExpressionUUID->"af198689-fe63-473c-952c-2aa5f912deba"],
Cell[2504184, 62754, 347, 8, 70, "Text",ExpressionUUID->"2444e767-719e-43aa-bcf8-ac696b7ebc2b"],
Cell[2504534, 62764, 4104, 114, 70, "Input",ExpressionUUID->"c92ebfe4-be39-406a-9c4e-556bcfdb6856"],
Cell[2508641, 62880, 223, 5, 70, "Text",ExpressionUUID->"25567cf3-ccfa-4176-a986-2401bfb33078"],
Cell[2508867, 62887, 12835, 287, 70, "Input",ExpressionUUID->"e15179ba-0719-4a98-a6c6-9518331698c8"],
Cell[2521705, 63176, 1176, 20, 70, "Text",ExpressionUUID->"cb6f7345-5eaa-463d-8231-cb699aa451e1"],
Cell[2522884, 63198, 853, 22, 70, "Input",ExpressionUUID->"6217af8e-f291-4a5f-a58d-8f82e1c54e27"],
Cell[2523740, 63222, 146, 2, 70, "Text",ExpressionUUID->"2c3ab399-4e9f-4e2a-8d99-3660d335853f"],
Cell[2523889, 63226, 1050, 28, 70, "Input",ExpressionUUID->"9bbc0161-7f45-4686-bd06-988971ddfd73"],
Cell[2524942, 63256, 6743, 165, 70, "Input",ExpressionUUID->"4261481c-03f8-4baf-9b2b-8456163a5723"],
Cell[2531688, 63423, 22203, 515, 70, "Input",ExpressionUUID->"d4890554-90e0-42a9-86f4-1d2a82521921"],
Cell[2553894, 63940, 155, 2, 70, "Text",ExpressionUUID->"6af371d5-cdce-42d3-9d00-718c673adabd"],
Cell[2554052, 63944, 5322, 129, 70, "Input",ExpressionUUID->"020ae9ac-d0ef-4107-9b7a-be91adf56222"],
Cell[2559377, 64075, 57578, 1362, 70, "Input",ExpressionUUID->"857d310c-9b2c-4477-b16e-d7de6f6b376e"],
Cell[2616958, 65439, 451, 7, 70, "Text",ExpressionUUID->"47037364-9723-4221-935c-8aebf6fdf2b6"],
Cell[2617412, 65448, 2318, 61, 70, "Input",ExpressionUUID->"5dd2c4d8-520c-4852-829b-8d525069cb08"]
}, Closed]],
Cell[CellGroupData[{
Cell[2619767, 65514, 225, 10, 70, "Subsubsection",ExpressionUUID->"103fede3-7523-4d11-b213-d85f23cf729b"],
Cell[2619995, 65526, 168, 3, 70, "Text",ExpressionUUID->"b0a4a4db-d801-48f0-8aab-b04a6133df77"],
Cell[2620166, 65531, 758, 21, 70, "Input",ExpressionUUID->"b02ea6a8-ef58-4136-9ce4-e0a6d6be6cde"],
Cell[2620927, 65554, 551, 9, 70, "Text",ExpressionUUID->"ad4dec47-a002-415e-a4a5-6916aa5fd1a4"],
Cell[2621481, 65565, 421, 11, 70, "Input",ExpressionUUID->"3079c51e-3f79-47ce-a638-aec09bde9b3b"],
Cell[2621905, 65578, 1818, 50, 70, "Input",ExpressionUUID->"8f3e3a30-ed23-48ba-a50c-1d2287fa14fb"],
Cell[2623726, 65630, 326, 5, 70, "Text",ExpressionUUID->"20d3877f-ed51-4b81-aebd-1ae658cddb64"],
Cell[2624055, 65637, 2472, 65, 70, "Input",ExpressionUUID->"4375d677-282c-447e-b74f-7ac12ff1df5b"],
Cell[2626530, 65704, 8421, 209, 70, "Input",ExpressionUUID->"b843e462-9dfd-499b-842d-5565bf7e505a"],
Cell[2634954, 65915, 321, 5, 70, "Text",ExpressionUUID->"5ce43845-2468-4e8a-b2d3-e30f3c09302a"],
Cell[2635278, 65922, 686, 11, 70, "Text",ExpressionUUID->"193e1a05-11a4-4e74-a26e-16179a029270"],
Cell[2635967, 65935, 384, 9, 70, "Text",ExpressionUUID->"02c3bac8-40ad-4d2e-963e-4379fbcf843f"],
Cell[2636354, 65946, 170, 3, 70, "Text",ExpressionUUID->"ef4f3899-ff66-40e2-9dbd-b2e162e19d53"],
Cell[2636527, 65951, 3670, 92, 70, "Input",ExpressionUUID->"52dd6b39-b977-4b09-b4ef-47ceafdaa18c"],
Cell[2640200, 66045, 419, 11, 70, "Input",ExpressionUUID->"bcbbcaba-6734-4d31-ba43-694f14007431"],
Cell[2640622, 66058, 12090, 286, 70, "Input",ExpressionUUID->"e0e1b13c-5566-4bc9-9dae-6a9d1044b10d"],
Cell[2652715, 66346, 160, 4, 70, "Input",ExpressionUUID->"b3bd9c2f-ff11-4018-ab02-e9be1a13e50e"]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2652936, 66357, 398, 9, 132, "Section",ExpressionUUID->"ad8cc3f7-6a4a-450d-b8fa-5c494d1a4c52"],
Cell[2653337, 66368, 303, 5, 70, "Text",ExpressionUUID->"a5d2a1c8-1acc-4371-a78f-446ab0a15ad9"],
Cell[2653643, 66375, 1404, 24, 70, "Input",ExpressionUUID->"6e81be12-42b0-46a0-bbc1-929a9df266d3"],
Cell[2655050, 66401, 243, 4, 70, "Text",ExpressionUUID->"518d11be-b6ce-48c5-8544-7e6b65a05fcb"],
Cell[2655296, 66407, 410, 9, 70, "Input",ExpressionUUID->"6e77c918-e972-442c-8856-24ff3f70a33d"],
Cell[2655709, 66418, 745, 15, 70, "Input",ExpressionUUID->"ec6ba39a-9e84-47f4-aa64-4f781899963e"],
Cell[2656457, 66435, 450, 9, 70, "Input",ExpressionUUID->"bf9010a6-3cd6-4ec3-832a-5dd15604e12c"],
Cell[2656910, 66446, 228, 6, 70, "Input",ExpressionUUID->"39b7f38c-330c-4df2-8301-f3f6a30c9def"],
Cell[2657141, 66454, 1176, 24, 70, "Input",ExpressionUUID->"a1337e2d-f168-48bc-a6d7-e7b1f36d9ba9"],
Cell[2658320, 66480, 234, 6, 70, "Input",ExpressionUUID->"28e24135-f389-4678-972c-67ea4b45fb0a"],
Cell[2658557, 66488, 251, 6, 70, "Input",ExpressionUUID->"754235ca-845b-4266-bf05-f180d1449716"],
Cell[2658811, 66496, 248, 6, 70, "Input",ExpressionUUID->"7703a856-ace5-4f1d-a927-380606f4b4b2"],
Cell[2659062, 66504, 803, 19, 70, "Input",ExpressionUUID->"0afea192-e094-4eb6-a9d9-8a3fd4768973"],
Cell[2659868, 66525, 827, 14, 70, "Input",ExpressionUUID->"d6e72a7a-93df-4d0a-9eb5-406e94e664f9"],
Cell[2660698, 66541, 494, 10, 70, "Input",ExpressionUUID->"92960c84-eff0-47ef-be15-1312655ea2cf"],
Cell[2661195, 66553, 411, 8, 70, "Input",ExpressionUUID->"46ec411f-65b8-459d-8bd8-68740977287d"],
Cell[2661609, 66563, 292, 7, 70, "Input",ExpressionUUID->"ce70a08f-62ea-47b9-b6b6-6b6a9c2a3e81"],
Cell[2661904, 66572, 293, 7, 70, "Input",ExpressionUUID->"45f86e9b-62a2-4eaf-a40e-79682206084b"],
Cell[2662200, 66581, 288, 7, 70, "Input",ExpressionUUID->"0eab2c32-15eb-446f-bef3-732c13a0fc2c"],
Cell[2662491, 66590, 386, 8, 70, "Input",ExpressionUUID->"fecca069-d895-44fe-b82f-9d39a316f333"],
Cell[2662880, 66600, 272, 7, 70, "Input",ExpressionUUID->"b953d84b-7e50-4a17-ac88-788223a98417"],
Cell[2663155, 66609, 726, 13, 70, "Input",ExpressionUUID->"8e651f5e-364c-451d-ad9a-f629cb3dd5b9"],
Cell[2663884, 66624, 333, 8, 70, "Input",ExpressionUUID->"c52028b0-7b3f-4a86-a9ce-426845494f03"],
Cell[2664220, 66634, 347, 8, 70, "Input",ExpressionUUID->"df9cef97-9ac7-40f4-bedf-f7efc5d28b6f"],
Cell[2664570, 66644, 465, 10, 70, "Input",ExpressionUUID->"f2e72c64-73db-40d1-99fa-90e9427adfd9"],
Cell[2665038, 66656, 414, 9, 70, "Input",ExpressionUUID->"b9b35ec4-7176-45cb-b538-949a6b741942"],
Cell[2665455, 66667, 272, 7, 70, "Input",ExpressionUUID->"edc0e87c-f6f7-4217-b581-ffa1160b4094"],
Cell[2665730, 66676, 454, 9, 70, "Input",ExpressionUUID->"6bdc207a-e012-4d00-b1fd-79db51396307"],
Cell[2666187, 66687, 292, 7, 70, "Input",ExpressionUUID->"12619815-3228-42a2-8d89-7269ac4ad49e"],
Cell[2666482, 66696, 497, 10, 70, "Input",ExpressionUUID->"6f4a2303-236e-4946-879c-8f85ce698b85"],
Cell[2666982, 66708, 384, 8, 70, "Input",ExpressionUUID->"339161dc-6228-4b0a-9e68-3490f6dd1020"],
Cell[2667369, 66718, 376, 8, 70, "Input",ExpressionUUID->"ed238c6d-e570-4607-af71-367633facbde"],
Cell[2667748, 66728, 407, 9, 70, "Input",ExpressionUUID->"598c2736-42c5-4a71-b2da-4bb7cc904f0a"],
Cell[2668158, 66739, 876, 17, 70, "Input",ExpressionUUID->"89be4443-1bf5-4b2d-80b6-b5fb9fe04e1b"],
Cell[2669037, 66758, 467, 10, 70, "Input",ExpressionUUID->"d8c98c29-5d7a-4ceb-8d9b-09c232d3f989"],
Cell[2669507, 66770, 631, 11, 70, "Input",ExpressionUUID->"bb9f700d-1117-4f9e-a968-488d37cc240a"],
Cell[2670141, 66783, 295, 7, 70, "Input",ExpressionUUID->"f2b46a5c-61a6-4136-87b6-ada2502b7b48"],
Cell[2670439, 66792, 753, 16, 70, "Input",ExpressionUUID->"a34aba8d-0767-4781-a074-bc35c658c13f"],
Cell[2671195, 66810, 423, 9, 70, "Input",ExpressionUUID->"488d7394-ba80-407c-86a4-3403cb32162c"],
Cell[CellGroupData[{
Cell[2671643, 66823, 646, 13, 70, "Input",ExpressionUUID->"d3861336-6938-4835-bb44-e2db0db02173"],
Cell[2672292, 66838, 231, 3, 70, "Output",ExpressionUUID->"a57b380f-0c4e-4da5-a2e7-86bd6a921f3f"]
}, Open  ]],
Cell[2672538, 66844, 162, 4, 70, "Input",ExpressionUUID->"ab7c6c8e-f4cf-434e-b920-24939b0fb2cd"],
Cell[CellGroupData[{
Cell[2672725, 66852, 282, 8, 70, "Subsection",ExpressionUUID->"2e0a9323-c2a9-4d92-a4c3-d72783be4955"],
Cell[CellGroupData[{
Cell[2673032, 66864, 210, 10, 70, "Subsubsection",ExpressionUUID->"609fedae-f0a6-4e20-8d3a-a7d69b794a56"],
Cell[2673245, 66876, 147, 2, 70, "Text",ExpressionUUID->"693a8320-1a64-4d03-84d1-6d88534d36f1"],
Cell[2673395, 66880, 267, 7, 70, "Input",ExpressionUUID->"74826a15-5714-480d-a45b-c7829612f1d9"],
Cell[2673665, 66889, 1007, 29, 70, "Input",ExpressionUUID->"e9dc2406-c012-4fe7-9b57-de9f063df025"],
Cell[2674675, 66920, 318, 5, 70, "Text",ExpressionUUID->"b34db859-bf61-46b9-a121-cec6a5d200b6"],
Cell[2674996, 66927, 2858, 74, 70, "Input",ExpressionUUID->"b177e3f5-1cee-448a-a74c-ed2fee12b8b0"],
Cell[2677857, 67003, 116, 0, 70, "Text",ExpressionUUID->"0fd7087d-0361-43e0-b5c0-f209cbbdb4d6"],
Cell[2677976, 67005, 14624, 336, 70, "Input",ExpressionUUID->"63d04127-4c3f-452e-8c7e-95f882607677"],
Cell[2692603, 67343, 10344, 240, 70, "Input",ExpressionUUID->"96ef3f93-9b5a-45db-98bf-4dab7e9770f6"],
Cell[2702950, 67585, 8752, 205, 70, "Input",ExpressionUUID->"14d362b8-803f-419e-9729-cb1cd8ce8578"],
Cell[2711705, 67792, 7858, 188, 70, "Input",ExpressionUUID->"e00fc2cf-f759-4e7b-af04-d4082c9f4c59"],
Cell[2719566, 67982, 6620, 161, 70, "Input",ExpressionUUID->"1b6e5568-5fd2-43ec-a11e-cc317d935eb6"],
Cell[2726189, 68145, 6469, 157, 70, "Input",ExpressionUUID->"d0c37fb4-3b6f-46dd-877e-88e6cffd3559"],
Cell[2732661, 68304, 221, 3, 70, "Text",ExpressionUUID->"4ebf6a85-149d-434e-b7fd-0cf5479293ac"],
Cell[2732885, 68309, 1736, 55, 70, "Input",ExpressionUUID->"f632001d-c1a4-43b6-88dd-30e0fd929656"],
Cell[2734624, 68366, 246, 4, 70, "Text",ExpressionUUID->"e69f5364-a095-4719-b486-26c543943f1f"],
Cell[2734873, 68372, 2193, 56, 70, "Input",ExpressionUUID->"f5e61b77-eeed-4dab-b50c-8696615498c0"],
Cell[2737069, 68430, 2149, 56, 70, "Input",ExpressionUUID->"d7cda6df-f2c8-4d4f-b57c-8fbffbd14289"],
Cell[2739221, 68488, 236, 4, 70, "Text",ExpressionUUID->"30aaddc1-929b-40e8-9547-4bfa1b3d7d31"],
Cell[2739460, 68494, 1997, 64, 70, "Input",ExpressionUUID->"c471a59e-c8d7-4854-a9a1-94f2c05b4fb6"],
Cell[2741460, 68560, 120, 0, 70, "Text",ExpressionUUID->"7c04917a-3907-409b-bcf7-dba6a5299c66"],
Cell[2741583, 68562, 2280, 61, 70, "Input",ExpressionUUID->"d7a66c65-0e40-4d5f-96e5-803b84a1b684"]
}, Closed]],
Cell[CellGroupData[{
Cell[2743900, 68628, 311, 11, 70, "Subsubsection",ExpressionUUID->"b13efc83-bc7c-46ab-9a4a-914c637b0c2d"],
Cell[2744214, 68641, 241, 4, 70, "Text",ExpressionUUID->"5b2efb92-da2e-4f90-a75c-ec537b3c7c89"],
Cell[2744458, 68647, 24497, 567, 70, "Input",ExpressionUUID->"8ce879f3-043c-464a-8920-b1037d5dd40f"],
Cell[2768958, 69216, 1441, 23, 70, "Text",ExpressionUUID->"d1d20f09-1cfd-43fd-861a-226c7cee16f4"],
Cell[2770402, 69241, 42297, 955, 70, "Input",ExpressionUUID->"bf9d8ccb-5d8e-410f-85bf-2e85e8bc6690"],
Cell[2812702, 70198, 398, 6, 70, "Text",ExpressionUUID->"8821b710-7077-4005-9e9b-d5fdea06ead8"],
Cell[2813103, 70206, 2104, 53, 70, "Input",ExpressionUUID->"d0a1c123-9fc1-40c0-9474-d7135866213c"],
Cell[2815210, 70261, 6503, 155, 70, "Input",ExpressionUUID->"c6ab9df0-685c-4ad7-9c52-434dc34a3837"],
Cell[2821716, 70418, 2549, 66, 70, "Input",ExpressionUUID->"0aa770b1-4cf8-4c69-ae65-99f96ff18d08"],
Cell[2824268, 70486, 304, 4, 70, "Text",ExpressionUUID->"505f6280-e11b-4249-b445-4d9527b6ab1f"],
Cell[2824575, 70492, 6727, 180, 70, "Input",ExpressionUUID->"aaa2297f-a405-4c78-a15d-eb6e18b1ef23"],
Cell[2831305, 70674, 226, 3, 70, "Text",ExpressionUUID->"12bb01e1-7cc3-41e3-82b1-b942f425763e"],
Cell[2831534, 70679, 1618, 41, 70, "Input",ExpressionUUID->"afdddfe0-ede8-4324-883d-a66451a32cdf"],
Cell[2833155, 70722, 239, 4, 70, "Text",ExpressionUUID->"83ab81e6-38b1-4aa8-95c1-d1ea9002d684"],
Cell[2833397, 70728, 269, 7, 70, "Input",ExpressionUUID->"e1ba8907-8e86-44ba-970b-a38009264399"],
Cell[2833669, 70737, 23183, 518, 70, "Input",ExpressionUUID->"d7ce1dd1-f605-4de1-a2f3-23db25cf218a"],
Cell[2856855, 71257, 302, 4, 70, "Text",ExpressionUUID->"34f70a63-a954-4ce0-b9ff-90db6a2fb653"],
Cell[2857160, 71263, 843, 17, 70, "Input",ExpressionUUID->"c543a897-34ab-4514-9622-99ff9eedede6"],
Cell[2858006, 71282, 2393, 62, 70, "Input",ExpressionUUID->"86a103a3-bb5e-4619-8130-8c353af86727"],
Cell[2860402, 71346, 625, 12, 70, "Text",ExpressionUUID->"9a066bfc-ba84-41f8-91b4-5deb5b308fa8"],
Cell[2861030, 71360, 1915, 53, 70, "Input",ExpressionUUID->"70c6cef6-f8d8-4b03-9635-9218b45474cc"],
Cell[2862948, 71415, 13786, 327, 70, "Input",ExpressionUUID->"8317240c-44f3-4026-8244-5a773c19913a"]
}, Closed]],
Cell[CellGroupData[{
Cell[2876771, 71747, 270, 10, 70, "Subsubsection",ExpressionUUID->"39131aca-cd52-4547-ba78-1a1d1f0c6c7e"],
Cell[2877044, 71759, 486, 7, 70, "Text",ExpressionUUID->"9ada5e68-285d-47f8-9de4-aa2f1b2b835c"],
Cell[2877533, 71768, 1131, 16, 70, "Text",ExpressionUUID->"f8f6792b-a4fc-4abc-a4fc-7e0856b1fed4"],
Cell[2878667, 71786, 274, 4, 70, "Text",ExpressionUUID->"107f9e9f-2184-4dcf-9f00-eef688e089c6"],
Cell[2878944, 71792, 4700, 112, 70, "Input",ExpressionUUID->"11bf145b-47c9-413a-add6-c35083224044"],
Cell[2883647, 71906, 16261, 382, 70, "Input",ExpressionUUID->"bc8d55cb-7c40-4b77-bc87-3a1852a4c115"],
Cell[2899911, 72290, 1553, 41, 70, "Input",ExpressionUUID->"4f11ef07-f534-49c3-b8c9-6ab1fb3d24a2"],
Cell[2901467, 72333, 7669, 179, 70, "Input",ExpressionUUID->"d23ef709-aaa2-49f3-b212-8db62977295f"],
Cell[2909139, 72514, 381, 7, 70, "Text",ExpressionUUID->"b059d313-a2ca-4808-8ed1-eaf4c47a5ae7"],
Cell[2909523, 72523, 2156, 59, 70, "Input",ExpressionUUID->"5c2fdc0e-be43-4a35-8eac-fd92e00e9062"],
Cell[2911682, 72584, 5515, 142, 70, "Input",ExpressionUUID->"a56881a1-9453-452d-9824-f272214fc514"],
Cell[2917200, 72728, 1311, 29, 70, "Input",ExpressionUUID->"5d9add77-aa7f-4cb2-a042-03afd0d64c2f"],
Cell[2918514, 72759, 13513, 320, 70, "Input",ExpressionUUID->"68a1269a-f754-4d34-9646-dc1f621e169d"]
}, Closed]],
Cell[CellGroupData[{
Cell[2932064, 73084, 246, 10, 70, "Subsubsection",ExpressionUUID->"f5e4679a-51f2-4f30-a4a6-39a186a4006a"],
Cell[2932313, 73096, 523, 13, 70, "Text",ExpressionUUID->"a63eafb2-f5c5-4388-9bce-3aa6994c6dd3"],
Cell[2932839, 73111, 625, 12, 70, "Text",ExpressionUUID->"033eda36-7d45-4fef-82bd-9fab1b89348d"],
Cell[CellGroupData[{
Cell[2933489, 73127, 200, 6, 70, "Item",ExpressionUUID->"4cc22a17-6e08-4600-94b5-8895e582b4f0"],
Cell[2933692, 73135, 1157, 33, 70, "Input",ExpressionUUID->"d6ff4e1c-0345-46f4-ac37-67cf4d377f65"],
Cell[2934852, 73170, 247, 4, 70, "Text",ExpressionUUID->"f56b90ca-9305-463d-b1cb-05676de050c4"],
Cell[2935102, 73176, 1166, 29, 70, "Input",ExpressionUUID->"d38c3062-cd4b-4bbd-be63-569b36c7b5cb"],
Cell[2936271, 73207, 1706, 41, 70, "Input",ExpressionUUID->"ca6a0f7b-34d3-4997-bfa0-db72f91ca664"],
Cell[2937980, 73250, 7292, 175, 70, "Input",ExpressionUUID->"c7975247-3d58-421c-bcce-1b286d5a4ef6"]
}, Closed]],
Cell[CellGroupData[{
Cell[2945309, 73430, 207, 6, 70, "Item",ExpressionUUID->"7fd57813-76f4-4624-a0ef-9f010a40e535"],
Cell[2945519, 73438, 120, 0, 70, "Text",ExpressionUUID->"9cbf9e04-51c1-4680-9faa-42bbb7dc4750"],
Cell[2945642, 73440, 321, 9, 70, "Input",ExpressionUUID->"5b066951-cbd9-40a6-8b8b-2ba5239821be"],
Cell[2945966, 73451, 267, 4, 70, "Text",ExpressionUUID->"382de8fa-0b4e-46d2-acf0-849cacaf7801"],
Cell[2946236, 73457, 6159, 153, 70, "Input",ExpressionUUID->"a9e194d9-db80-4282-ad33-34ac121154fc"]
}, Closed]],
Cell[CellGroupData[{
Cell[2952432, 73615, 227, 6, 70, "Item",ExpressionUUID->"6b585bd4-bcf6-4930-938e-b3ad9f37ee03"],
Cell[2952662, 73623, 343, 9, 70, "Input",ExpressionUUID->"c0b50bab-b314-4bee-9b70-b689f9e7bbbd"],
Cell[2953008, 73634, 278, 4, 70, "Text",ExpressionUUID->"f09509cc-5b23-4ded-a3b2-756166317ed3"],
Cell[2953289, 73640, 5645, 138, 70, "Input",ExpressionUUID->"9c60d8a2-6960-42ec-818e-d2d8f685bd08"]
}, Closed]],
Cell[CellGroupData[{
Cell[2958971, 73783, 142, 4, 70, "Item",ExpressionUUID->"b7d090f9-7727-4901-936f-47cda74c93ee"],
Cell[2959116, 73789, 162, 3, 70, "Text",ExpressionUUID->"47ae94ea-e54a-4bad-bde8-7c30c3d4bcf4"],
Cell[2959281, 73794, 524, 13, 70, "Input",ExpressionUUID->"81104d6f-8d51-4074-ac69-a11b7d7cf551"],
Cell[2959808, 73809, 4279, 104, 70, "Input",ExpressionUUID->"f2bfe04c-57de-4b26-8524-64e6182075d1"],
Cell[2964090, 73915, 114, 0, 70, "Text",ExpressionUUID->"7f64cc47-0e6b-4c90-8277-f66c712868c2"],
Cell[2964207, 73917, 912, 24, 70, "Input",ExpressionUUID->"28aabb57-1710-4c06-a6c3-c5519111a91f"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2965180, 73948, 226, 7, 70, "Subsection",ExpressionUUID->"e83bcc65-c8fc-497f-8060-6331473310c2"],
Cell[CellGroupData[{
Cell[2965431, 73959, 210, 10, 70, "Subsubsection",ExpressionUUID->"55b37984-e8cf-48d8-8415-dacb11869c71"],
Cell[2965644, 73971, 180, 3, 70, "Text",ExpressionUUID->"52b99a4f-4433-405b-a330-39a386374be6"],
Cell[2965827, 73976, 6401, 168, 70, "Input",ExpressionUUID->"57371974-8cea-485c-bdb4-080b6b8cda5a"]
}, Closed]],
Cell[CellGroupData[{
Cell[2972265, 74149, 229, 10, 70, "Subsubsection",ExpressionUUID->"974bbbe1-0bdf-40b6-a835-c9d90bda2266"],
Cell[2972497, 74161, 265, 4, 70, "Text",ExpressionUUID->"d3a15c70-bd0b-4607-b4cb-4a2a0bdf27b7"],
Cell[2972765, 74167, 5027, 130, 70, "Input",ExpressionUUID->"4b829deb-360d-4c32-b0e3-60aee7b2dfc1"],
Cell[2977795, 74299, 223, 4, 70, "Text",ExpressionUUID->"e755e141-998c-44cb-ae4a-ef5eade99fd8"],
Cell[2978021, 74305, 540, 14, 70, "Input",ExpressionUUID->"14447705-1254-45ba-82d1-3e185e6839bb"],
Cell[2978564, 74321, 120, 0, 70, "Text",ExpressionUUID->"349dfad9-45f4-4db5-938f-a3753cdd0a02"],
Cell[2978687, 74323, 2755, 72, 70, "Input",ExpressionUUID->"fb2db81e-fa4c-40c7-add6-628f75ec57b6"]
}, Closed]],
Cell[CellGroupData[{
Cell[2981479, 74400, 277, 11, 70, "Subsubsection",ExpressionUUID->"d37128c4-0f6b-4e8e-9a83-e1c102c447d6"],
Cell[2981759, 74413, 482, 7, 70, "Text",ExpressionUUID->"26d3c6ca-c90a-40b5-a20c-5733e617020e"],
Cell[2982244, 74422, 1333, 38, 70, "Input",ExpressionUUID->"a29f11e7-1801-4317-9284-6d97263cd49b"],
Cell[2983580, 74462, 2146, 56, 70, "Text",ExpressionUUID->"7695d990-bbc8-49b0-b14c-c49e950c787f"],
Cell[2985729, 74520, 1923, 54, 70, "Input",ExpressionUUID->"89caa8c2-a89a-47e7-b5f9-99161efb5310"],
Cell[2987655, 74576, 302, 5, 70, "Text",ExpressionUUID->"50cab821-cde1-4aab-b197-cfbcdf25dc14"],
Cell[2987960, 74583, 597, 13, 70, "Text",ExpressionUUID->"9b1ee343-2dc8-4864-beaf-3685354f2a59"],
Cell[2988560, 74598, 7574, 180, 70, "Input",ExpressionUUID->"06c5696b-2d5a-46f3-9aa8-067e9ac1cb1a"],
Cell[CellGroupData[{
Cell[2996159, 74782, 281, 6, 70, "Text",ExpressionUUID->"7e939409-fed8-49a4-a9c0-48f82a1abac2",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[2996443, 74790, 6003, 147, 70, "Input",ExpressionUUID->"6e8f9dac-25bf-41cb-866e-364cd0b1ba14",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[3002461, 74940, 479, 7, 70, "Text",ExpressionUUID->"2a3f16db-e620-4876-bc07-b5beff4182b0"],
Cell[3002943, 74949, 288, 8, 70, "Input",ExpressionUUID->"edf1561c-7ae3-4a91-aa59-f949141bf133"],
Cell[3003234, 74959, 6135, 148, 70, "Input",ExpressionUUID->"9995e218-5bed-4a6e-8674-45488a6abd78"],
Cell[3009372, 75109, 250, 4, 70, "Text",ExpressionUUID->"3046382d-6c11-480e-9258-dcecff12adc8"],
Cell[3009625, 75115, 704, 19, 70, "Input",ExpressionUUID->"bfa7b7be-bebf-4a74-9c09-e7af6d6a46d5"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3010378, 75140, 192, 7, 70, "Subsection",ExpressionUUID->"1b9f7abf-8765-4fae-9d0f-70fe33580228"],
Cell[CellGroupData[{
Cell[3010595, 75151, 278, 11, 70, "Subsubsection",ExpressionUUID->"d66323cc-d3bd-4d9f-b606-d464679436a2"],
Cell[3010876, 75164, 99, 0, 70, "Text",ExpressionUUID->"14dd85b8-7d43-454e-aa92-91777034d6bd"],
Cell[3010978, 75166, 1153, 30, 70, "Input",ExpressionUUID->"e78aa264-a06f-4ab4-afb3-5d06b373e7b7"],
Cell[3012134, 75198, 1931, 50, 70, "Input",ExpressionUUID->"d4d7fc55-bf6b-42d1-8a0d-c06edd481337"],
Cell[3014068, 75250, 262, 5, 70, "Text",ExpressionUUID->"ebe71984-d4d8-443f-a870-69cbe52d137a"],
Cell[3014333, 75257, 801, 16, 70, "Text",ExpressionUUID->"646d3284-4920-4b7a-834e-6bd4e44a4e13"],
Cell[3015137, 75275, 349, 8, 70, "Input",ExpressionUUID->"e708f6f5-2e20-4929-a8ac-15d731355c39"],
Cell[3015489, 75285, 4228, 101, 70, "Input",ExpressionUUID->"6ccb1b19-a494-480d-83e0-9946b48cdf99"]
}, Closed]],
Cell[CellGroupData[{
Cell[3019754, 75391, 219, 10, 70, "Subsubsection",ExpressionUUID->"1d3235a4-3b8f-4c32-afd4-1fb53e2e4d39"],
Cell[3019976, 75403, 157, 2, 70, "Text",ExpressionUUID->"9a3e8745-803b-4717-be54-0b20100bcce0"],
Cell[3020136, 75407, 582, 15, 70, "Text",ExpressionUUID->"39968301-8ed4-4ea5-9b43-796bfb5fd05a"],
Cell[3020721, 75424, 665, 17, 70, "Input",ExpressionUUID->"88006b3c-8976-40a1-956f-624b2afa906d"],
Cell[3021389, 75443, 346, 5, 70, "Text",ExpressionUUID->"520ff151-457d-4d62-afd3-fc43642b387a"],
Cell[3021738, 75450, 4580, 112, 70, "Input",ExpressionUUID->"555b31e7-67b4-45fd-b4c0-79e74b2b81e9"],
Cell[3026321, 75564, 166, 3, 70, "Text",ExpressionUUID->"5f7590fe-66b2-4ddd-b4b7-e36d7e001e8a"],
Cell[3026490, 75569, 2939, 74, 70, "Input",ExpressionUUID->"f96a4f9f-f0d9-4338-b2f6-045b28b9b240"]
}, Closed]],
Cell[CellGroupData[{
Cell[3029466, 75648, 225, 10, 70, "Subsubsection",ExpressionUUID->"febb48c3-948a-454c-9e8c-e77d907052e2"],
Cell[3029694, 75660, 419, 9, 70, "Text",ExpressionUUID->"ba9dc594-c6ec-4895-8707-1cfec3d233d7"],
Cell[3030116, 75671, 473, 10, 70, "Input",ExpressionUUID->"9319a5b5-e257-4ca8-ab6e-c9bb819de7a4"],
Cell[3030592, 75683, 1224, 36, 70, "Input",ExpressionUUID->"2d5e4afa-7584-4ecd-8821-a3590b737c99"],
Cell[3031819, 75721, 16337, 370, 70, "Input",ExpressionUUID->"d87499b4-82a3-47f8-84ea-ff8267f5a1f7"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[3048205, 76097, 181, 7, 38, "Subsection",ExpressionUUID->"da778ee9-3516-4215-a7f0-0dfb8240a529"],
Cell[CellGroupData[{
Cell[3048411, 76108, 232, 10, 45, "Subsubsection",ExpressionUUID->"20753717-d784-4393-9387-3ea09072cc8e"],
Cell[3048646, 76120, 884, 22, 85, "Text",ExpressionUUID->"1c34fd9c-65d4-4942-ab3b-bae6e6633225"],
Cell[3049533, 76144, 358, 9, 51, "Input",ExpressionUUID->"d5eeb054-5508-4cfb-adbf-80d3f0b790ac"],
Cell[3049894, 76155, 1508, 44, 92, "Input",ExpressionUUID->"e2139db2-c3f4-43d6-acf4-20a1dfb2af86"],
Cell[3051405, 76201, 3471, 105, 236, "Input",ExpressionUUID->"7ba2dc29-220a-4248-a842-4497827ba3e5"],
Cell[3054879, 76308, 2825, 82, 216, "Input",ExpressionUUID->"1a1b5c9d-fc59-4813-af59-18a40f0cbbb1"],
Cell[3057707, 76392, 2255, 38, 58, "Text",ExpressionUUID->"a73f2d00-6670-4285-876e-9627039d1d23"],
Cell[3059965, 76432, 1274, 34, 137, "Input",ExpressionUUID->"8ce9d379-0662-44cf-b4e9-87ab921b03ad"],
Cell[3061242, 76468, 236, 4, 58, "Text",ExpressionUUID->"f3e4c698-2c4d-48a5-b346-a394e6b312e0"],
Cell[3061481, 76474, 558, 16, 51, "Input",ExpressionUUID->"64fbc418-15b7-4a50-be95-2f76d6508a69"],
Cell[3062042, 76492, 170, 3, 35, "Text",ExpressionUUID->"16eb29ba-e3bf-472b-a93a-5774c5e50ace"],
Cell[3062215, 76497, 9955, 233, 832, "Input",ExpressionUUID->"c27640a3-0488-41d7-8159-f6fd1dc3c8f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3072207, 76735, 247, 10, 45, "Subsubsection",ExpressionUUID->"ee7ba460-0963-42d8-b7a6-ebe38c6eab0e"],
Cell[3072457, 76747, 884, 22, 70, "Text",ExpressionUUID->"3d8a73fa-b39d-45e8-b7d8-36193ae27a2a"],
Cell[3073344, 76771, 5077, 128, 70, "Input",ExpressionUUID->"cf74ba3a-4062-48e6-bd0d-877ce7e5e5de"]
}, Closed]],
Cell[CellGroupData[{
Cell[3078458, 76904, 235, 10, 37, "Subsubsection",ExpressionUUID->"d17ecdfd-8880-484e-845d-2aa96e0c11fc"],
Cell[3078696, 76916, 607, 15, 70, "Input",ExpressionUUID->"5bc7d203-d8aa-4a4b-acad-cd5c832c085d"],
Cell[3079306, 76933, 1924, 42, 70, "Input",ExpressionUUID->"09fd1339-92f0-4cfa-9947-e5027b07456a"],
Cell[3081233, 76977, 8229, 194, 70, "Input",ExpressionUUID->"735ee708-19bb-48d2-97d2-3768b197d6b4"],
Cell[3089465, 77173, 502, 13, 70, "Input",ExpressionUUID->"2c3d5b66-90f2-46fe-adc5-e41bc63f311a"],
Cell[3089970, 77188, 812, 21, 70, "Input",ExpressionUUID->"4758c58f-4bf4-482d-bb0a-f56e00ffa1ba"],
Cell[3090785, 77211, 5186, 131, 70, "Input",ExpressionUUID->"18bd291e-6378-49a5-853a-ecd758f95173"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3096020, 77348, 188, 7, 54, "Subsection",ExpressionUUID->"073d5952-6f70-40f1-a78a-cc5a0652eb92"],
Cell[3096211, 77357, 981, 14, 70, "Text",ExpressionUUID->"9cb114dc-d077-445d-a421-c10ea22e760e"],
Cell[3097195, 77373, 1549, 40, 70, "Input",ExpressionUUID->"400f5190-4006-47f3-abf7-147f016425b1"],
Cell[3098747, 77415, 2937, 81, 70, "Input",ExpressionUUID->"d8f8748e-424d-4696-b00a-66f5b0670c57"],
Cell[3101687, 77498, 2088, 49, 70, "Input",ExpressionUUID->"28edb509-5468-4482-8c54-f255fd558add"],
Cell[3103778, 77549, 2235, 58, 70, "Input",ExpressionUUID->"f604c933-3d5a-4b10-8e06-b62f2aee4b7b"],
Cell[3106016, 77609, 6522, 164, 70, "Input",ExpressionUUID->"4fc3c0a8-cafc-4cbd-a0b9-d43131079d3d"]
}, Closed]],
Cell[CellGroupData[{
Cell[3112575, 77778, 179, 7, 38, "Subsection",ExpressionUUID->"f9892ec5-e908-4215-a4cf-0a7f89fa3b11"],
Cell[CellGroupData[{
Cell[3112779, 77789, 223, 10, 45, "Subsubsection",ExpressionUUID->"261a7080-1915-4a2e-9da0-5a68060c863f"],
Cell[3113005, 77801, 266, 4, 70, "Text",ExpressionUUID->"9a565e42-1531-417c-a796-88935052ed37"],
Cell[3113274, 77807, 318, 7, 70, "Input",ExpressionUUID->"0909644d-152d-426a-94af-e734fd27572e"],
Cell[3113595, 77816, 201, 3, 70, "Text",ExpressionUUID->"7d137e0b-63b1-46e2-9911-fe5111ff955d"],
Cell[3113799, 77821, 7831, 204, 70, "Input",ExpressionUUID->"807d5ecd-b32c-4819-91ed-b8b099ea6cf5"],
Cell[3121633, 78027, 267, 4, 70, "Text",ExpressionUUID->"aec00b51-cb0e-4f37-aeb9-cb3e23f571d6"],
Cell[3121903, 78033, 9753, 244, 70, "Input",ExpressionUUID->"44ffa5f5-4460-4526-bfd7-1285b4b5e654"],
Cell[3131659, 78279, 119, 0, 70, "Text",ExpressionUUID->"c2c48508-6709-4e7f-9ce2-0bc739ee5b22"],
Cell[3131781, 78281, 10966, 248, 70, "Input",ExpressionUUID->"156b6d13-ae86-4a24-9acd-0258ce2011de"],
Cell[3142750, 78531, 9762, 222, 70, "Input",ExpressionUUID->"5675d625-6002-4f65-881d-041d21bfb4aa"],
Cell[3152515, 78755, 271, 4, 70, "Text",ExpressionUUID->"80f63ccf-7158-487d-9d88-3c6ae67b51bd"],
Cell[3152789, 78761, 2435, 59, 70, "Input",ExpressionUUID->"e134cd94-e06e-474c-8530-47f73a8a8d71"]
}, Closed]],
Cell[CellGroupData[{
Cell[3155261, 78825, 270, 10, 37, "Subsubsection",ExpressionUUID->"e0588dfe-52f4-4fd0-b517-25b6647b3a29"],
Cell[3155534, 78837, 346, 5, 70, "Text",ExpressionUUID->"a64dd85f-d558-49ac-adf5-122755a29978"],
Cell[3155883, 78844, 623, 14, 70, "Input",ExpressionUUID->"b294a9c4-4e7f-4701-9335-8a80deab1924"],
Cell[3156509, 78860, 507, 13, 70, "Input",ExpressionUUID->"005d52ff-aa6e-4166-b157-9c9d58b00584"],
Cell[3157019, 78875, 10583, 251, 70, "Input",ExpressionUUID->"7907ef6a-cdad-4c37-81f5-af96b87b1e06"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3167651, 79132, 229, 7, 54, "Subsection",ExpressionUUID->"d12007b8-931e-432b-afa6-3389e91f4650"],
Cell[CellGroupData[{
Cell[3167905, 79143, 237, 10, 45, "Subsubsection",ExpressionUUID->"f2173d66-86a4-4ad8-8d3e-c340efe42b78"],
Cell[3168145, 79155, 423, 9, 70, "Text",ExpressionUUID->"4abaca1c-120d-4802-affb-6d86dcc4f8c3"],
Cell[3168571, 79166, 215, 3, 70, "Text",ExpressionUUID->"81ca2e9a-c596-4793-903f-6bd6fb1a298d"],
Cell[3168789, 79171, 8632, 238, 70, "Input",ExpressionUUID->"4445011d-e7af-493a-9dfa-7c506fbdd622"],
Cell[3177424, 79411, 369, 12, 70, "Text",ExpressionUUID->"4606e918-5999-4e50-af68-ad00bfcc7310"],
Cell[3177796, 79425, 12428, 302, 70, "Input",ExpressionUUID->"a64ba7f4-1fd9-4131-8801-685b54b99736"]
}, Closed]],
Cell[CellGroupData[{
Cell[3190261, 79732, 247, 10, 37, "Subsubsection",ExpressionUUID->"16400f24-b463-48fa-abff-e9840c7b1995"],
Cell[3190511, 79744, 399, 6, 70, "Text",ExpressionUUID->"32c21a10-4819-4d66-aa80-ae519b4a97f5"],
Cell[3190913, 79752, 37279, 855, 70, "Input",ExpressionUUID->"f4150132-9b78-4d38-9adb-0a1a2b501c4d"]
}, Closed]],
Cell[CellGroupData[{
Cell[3228229, 80612, 304, 11, 63, "Subsubsection",ExpressionUUID->"68b81ff1-b0ea-4a73-b098-092859144eb6"],
Cell[3228536, 80625, 393, 6, 70, "Text",ExpressionUUID->"b5c3b241-ea00-4d62-b3be-61c3f96a531e"],
Cell[3228932, 80633, 34404, 845, 70, "Input",ExpressionUUID->"f698fac3-5920-4f6c-81a9-6c37122d0718"]
}, Closed]],
Cell[CellGroupData[{
Cell[3263373, 81483, 315, 12, 37, "Subsubsection",ExpressionUUID->"4546b0ef-50c2-4b7e-8cb4-7568e13471af"],
Cell[3263691, 81497, 455, 6, 70, "Text",ExpressionUUID->"37574c98-50c1-4e52-958a-b633584d9a4b"],
Cell[3264149, 81505, 260, 4, 70, "Text",ExpressionUUID->"c733eace-b6de-4728-998c-7d2f6d850e45"],
Cell[3264412, 81511, 2357, 59, 70, "Input",ExpressionUUID->"524b9a6b-3815-4485-9e71-9c3b1b447efe"],
Cell[3266772, 81572, 2418, 61, 70, "Input",ExpressionUUID->"313f09e5-6633-4f50-8f4a-91de470e3e00"]
}, Closed]]
}, Open  ]],
Cell[3269217, 81637, 160, 4, 29, "Input",ExpressionUUID->"c50a192a-fdbe-4095-8414-96a18d130267"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3269414, 81646, 139, 4, 68, "Section",ExpressionUUID->"397235bf-72f8-40b1-a6e8-1714dd53ba85"],
Cell[3269556, 81652, 422, 10, 70, "Input",ExpressionUUID->"8b2f4629-48f3-4237-af66-064a6c4ba886"],
Cell[3269981, 81664, 410, 9, 70, "Input",ExpressionUUID->"82366b6b-c0a8-4434-a122-da6f3ba211b6"],
Cell[3270394, 81675, 1090, 20, 70, "Input",ExpressionUUID->"0c339d39-4bba-44cf-99b8-1a9ccc9747b9"],
Cell[3271487, 81697, 423, 9, 70, "Input",ExpressionUUID->"bef88ed4-c287-4f9f-aabd-895016026f55"],
Cell[3271913, 81708, 864, 15, 70, "Input",ExpressionUUID->"f7cb5a2a-ae55-4b94-b323-1269db86b2c2"],
Cell[3272780, 81725, 392, 8, 70, "Input",ExpressionUUID->"a6ccddc5-a7b1-49a8-aebd-4e01d261b80d"],
Cell[3273175, 81735, 316, 7, 70, "Input",ExpressionUUID->"95efa299-3dba-43bb-8965-fa3bf42175cd"],
Cell[3273494, 81744, 162, 4, 70, "Input",ExpressionUUID->"03729c4b-c216-43d6-8efc-f2d63227e261"],
Cell[CellGroupData[{
Cell[3273681, 81752, 183, 7, 70, "Subsection",ExpressionUUID->"b20fed30-eac9-47c5-9dbc-072b9822d3d8"],
Cell[3273867, 81761, 271, 8, 70, "Input",ExpressionUUID->"ccd9e822-6499-4f01-9f7e-60dba4c640a8"]
}, Closed]],
Cell[CellGroupData[{
Cell[3274175, 81774, 192, 7, 70, "Subsection",ExpressionUUID->"afac6941-9b52-4764-8988-f4b9d01e1bfc"],
Cell[CellGroupData[{
Cell[3274392, 81785, 244, 10, 70, "Subsubsection",ExpressionUUID->"6118d800-4e71-455a-b238-4e51e72194d3"],
Cell[3274639, 81797, 188, 3, 70, "Input",ExpressionUUID->"5cb41aba-8dda-4f05-b863-1c645399cf52",
 Evaluatable->False],
Cell[3274830, 81802, 2878, 79, 70, "Input",ExpressionUUID->"8a74037e-8c93-4975-be93-42a00b0a7fa8"],
Cell[3277711, 81883, 154, 2, 70, "Text",ExpressionUUID->"9283aa3a-b4dd-4859-9040-1120727a141d"],
Cell[3277868, 81887, 509, 14, 70, "Input",ExpressionUUID->"921a41a5-9c43-4874-8350-021f71f021fe"],
Cell[3278380, 81903, 525, 13, 70, "Input",ExpressionUUID->"d7f6760c-39c1-4e65-bd17-32c28c41e51d"],
Cell[3278908, 81918, 6821, 169, 70, "Input",ExpressionUUID->"851f43f1-4f60-45bc-9dc4-db59809db0b8"],
Cell[3285732, 82089, 469, 15, 70, "Input",ExpressionUUID->"12866bff-0485-46c7-a737-62b49d1a7b5d",
 Evaluatable->False],
Cell[3286204, 82106, 142, 2, 70, "Text",ExpressionUUID->"d83483cf-b1bb-49e8-9187-4b8966d68d54"],
Cell[3286349, 82110, 717, 21, 70, "Input",ExpressionUUID->"0a69fca7-d2b6-4798-a203-bca2f47ce90e",
 Evaluatable->False],
Cell[3287069, 82133, 567, 15, 70, "Input",ExpressionUUID->"c9771b53-0a04-4d0c-91de-47c1c64bd486"],
Cell[3287639, 82150, 248, 4, 70, "Text",ExpressionUUID->"d8586ddd-ef21-4822-a845-3165b02c1ccb"],
Cell[3287890, 82156, 372, 8, 70, "Input",ExpressionUUID->"b2618cb0-e034-4f86-a94d-716446240a3e"],
Cell[3288265, 82166, 4143, 98, 70, "Input",ExpressionUUID->"c9b7cc93-81bf-4706-9712-6176b5af33d3"]
}, Closed]],
Cell[CellGroupData[{
Cell[3292445, 82269, 260, 10, 70, "Subsubsection",ExpressionUUID->"eea5c0f7-93e5-4687-86c9-a8ce4acfa181"],
Cell[3292708, 82281, 177, 3, 70, "Text",ExpressionUUID->"4cbe82e4-c001-4714-9c23-1cb7334c051f"],
Cell[3292888, 82286, 2913, 78, 70, "Input",ExpressionUUID->"b0b2a43f-6892-462b-9ed0-82451615c5e4"],
Cell[3295804, 82366, 496, 9, 70, "Text",ExpressionUUID->"89dc981a-f71c-457f-9825-da04e158cf8c"],
Cell[3296303, 82377, 507, 13, 70, "Input",ExpressionUUID->"feefbd14-6b63-4f07-9dd7-5a4f1a7d3002"],
Cell[3296813, 82392, 1238, 29, 70, "Input",ExpressionUUID->"35e116a3-ec36-4223-9a81-6a74851b2285"],
Cell[3298054, 82423, 256, 4, 70, "Text",ExpressionUUID->"25b20d6d-773b-4ebe-b3ec-c74cb68d46ee"],
Cell[3298313, 82429, 4248, 114, 70, "Input",ExpressionUUID->"8858a1ef-e05e-45c6-aa3e-b5c261cf436d"],
Cell[3302564, 82545, 15198, 353, 70, "Input",ExpressionUUID->"6b74d658-c12b-4eae-9ba1-08882ba5b125"],
Cell[3317765, 82900, 180, 3, 70, "Text",ExpressionUUID->"321c499b-ff89-4187-ba66-0092226b331b"],
Cell[3317948, 82905, 836, 23, 70, "Input",ExpressionUUID->"cb2f9407-a8d3-4976-ab9f-8794dd3e8dc7"]
}, Closed]]
}, Open  ]],
Cell[3318811, 82932, 160, 4, 70, "Input",ExpressionUUID->"1534fbd9-3e62-4bb5-a925-823469dd8ece"]
}, Closed]],
Cell[CellGroupData[{
Cell[3319008, 82941, 140, 4, 54, "Section",ExpressionUUID->"d1020224-a87c-4194-bcbb-343658ee0d0b"],
Cell[3319151, 82947, 951, 17, 133, "Input",ExpressionUUID->"76b19b6a-530c-4f85-9015-36b88e8a0c04"],
Cell[3320105, 82966, 405, 8, 92, "Input",ExpressionUUID->"17fb9689-2ea6-45d8-b7e5-4f42dcf733a0"],
Cell[3320513, 82976, 229, 4, 35, "Text",ExpressionUUID->"12981c60-e3c2-4acb-bab2-d88437bb3ee4"],
Cell[3320745, 82982, 2590, 47, 579, "Input",ExpressionUUID->"4e149649-919a-43ef-a710-45841f6b8c5c"],
Cell[3323338, 83031, 1133, 22, 136, "Input",ExpressionUUID->"49915694-6ebe-4d71-b93c-282ccda25f63"],
Cell[3324474, 83055, 322, 6, 32, "Input",ExpressionUUID->"541d6909-44dc-4b0d-8dc8-f0044b2cf6b2"],
Cell[3324799, 83063, 474, 9, 72, "Input",ExpressionUUID->"47bf64e9-51c5-4ac8-9c9a-fbaff015a3fb"],
Cell[3325276, 83074, 431, 8, 72, "Input",ExpressionUUID->"a5073ee0-9703-4514-92a1-f55663b4f1fa"],
Cell[3325710, 83084, 289, 6, 32, "Input",ExpressionUUID->"8eb68274-3824-45d1-939c-265d2b634415"],
Cell[3326002, 83092, 1455, 27, 241, "Input",ExpressionUUID->"a5e3ab25-e033-4db5-aeee-aafb725935e7"],
Cell[3327460, 83121, 423, 8, 72, "Input",ExpressionUUID->"95571141-5dbf-45e2-89fb-60df08c4c975"],
Cell[3327886, 83131, 549, 10, 72, "Input",ExpressionUUID->"7a4d0828-d136-4810-9210-6a89954a81ab"],
Cell[3328438, 83143, 561, 10, 72, "Input",ExpressionUUID->"196d2900-dbb8-4410-95a5-1ed5675180c6"],
Cell[3329002, 83155, 531, 9, 72, "Input",ExpressionUUID->"b9772be3-f4f0-44f6-bf93-295e94b81e76"],
Cell[3329536, 83166, 1019, 18, 157, "Input",ExpressionUUID->"66856cfa-a4fb-4a16-8183-9d2b86d86569"],
Cell[3330558, 83186, 350, 7, 51, "Input",ExpressionUUID->"1219f464-3e89-4cfe-b562-3dd46dd600bc"],
Cell[3330911, 83195, 858, 14, 136, "Input",ExpressionUUID->"134b235e-7e77-48c5-88c5-8237dd1ffb66"],
Cell[3331772, 83211, 162, 4, 29, "Input",ExpressionUUID->"37868607-6d77-4531-9a8a-74400b7c8a4a"],
Cell[CellGroupData[{
Cell[3331959, 83219, 180, 7, 54, "Subsection",ExpressionUUID->"65cd77b9-8f64-4077-b850-4db75f2b6e38"],
Cell[3332142, 83228, 218, 3, 70, "Text",ExpressionUUID->"171a8f65-ebe7-4733-b24e-d1a4780e36b5"],
Cell[3332363, 83233, 229, 5, 70, "Text",ExpressionUUID->"4d9eeb08-8ef3-419f-bc68-008fe3cd311c"],
Cell[3332595, 83240, 1455, 40, 70, "Input",ExpressionUUID->"3e5467d9-c39f-4c48-b0cd-291aaf42e6fa"],
Cell[3334053, 83282, 141, 2, 70, "Text",ExpressionUUID->"1d2d3748-442a-4c53-9205-7c3544281c90"],
Cell[3334197, 83286, 352, 7, 70, "Text",ExpressionUUID->"d0859635-64e5-4934-9830-6e998c588649",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[3334552, 83295, 2057, 54, 70, "Input",ExpressionUUID->"f3e157ac-6cb8-4754-827e-6f04bc9ffc99"],
Cell[3336612, 83351, 139, 2, 70, "Text",ExpressionUUID->"9a959831-b5fd-41b8-b7ce-29a4629f6786"],
Cell[3336754, 83355, 2783, 70, 70, "Input",ExpressionUUID->"3f07bf63-9ce6-4570-924e-883fc5dfb803"],
Cell[3339540, 83427, 176, 4, 70, "Text",ExpressionUUID->"35a83cac-8021-4430-9af3-3882033a9171"],
Cell[3339719, 83433, 352, 7, 70, "Text",ExpressionUUID->"2a2df0af-9875-4bf3-96ad-4b4a1bc5ddda",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[3340074, 83442, 4352, 105, 70, "Input",ExpressionUUID->"b61f11b3-b797-4534-8a2a-34ec6c5b60ec"],
Cell[3344429, 83549, 162, 2, 70, "Text",ExpressionUUID->"81e3b4b6-6e6b-4e6d-b65b-ab27a877c6ae"],
Cell[3344594, 83553, 235, 3, 70, "Text",ExpressionUUID->"d2b27650-5048-45fe-a8b5-8dc72ffbc24a"],
Cell[3344832, 83558, 6725, 157, 70, "Input",ExpressionUUID->"62fc98d1-eb4f-49ba-a0bb-116f2a6483b7"],
Cell[3351560, 83717, 142, 2, 70, "Text",ExpressionUUID->"0eeece22-ca4d-4a08-af51-2841d9668c10"],
Cell[3351705, 83721, 123, 0, 70, "Text",ExpressionUUID->"8306781a-b0e8-4753-85d2-ffdabdd14438"],
Cell[3351831, 83723, 2941, 71, 70, "Input",ExpressionUUID->"a9ea2ed0-a991-4a30-bbca-cd15b1eb45f8"]
}, Closed]],
Cell[CellGroupData[{
Cell[3354809, 83799, 206, 7, 38, "Subsection",ExpressionUUID->"4994267d-57fd-4038-ada1-8c115acebbdc"],
Cell[3355018, 83808, 1348, 23, 70, "Text",ExpressionUUID->"b3b80d2f-2828-4964-84b3-90366aee4ea5"],
Cell[3356369, 83833, 648, 20, 70, "Input",ExpressionUUID->"0eee3491-a38e-43e3-9c73-f3c2dd6847d9"],
Cell[3357020, 83855, 1090, 16, 70, "Text",ExpressionUUID->"ca137dd1-151f-404f-8042-d5b906d390cd"],
Cell[3358113, 83873, 3280, 80, 70, "Input",ExpressionUUID->"d93903ba-ed54-45c2-9b34-03d1de1fa24c"],
Cell[3361396, 83955, 119, 0, 70, "Text",ExpressionUUID->"c2f70ea0-038e-44a7-8d3d-f60c0e363953"],
Cell[3361518, 83957, 3275, 81, 70, "Input",ExpressionUUID->"d4fdc029-b996-448e-988a-22c8bab5dbee"],
Cell[3364796, 84040, 188, 3, 70, "Text",ExpressionUUID->"99837650-b518-4571-a3a6-486172e7c131"],
Cell[3364987, 84045, 2819, 73, 70, "Input",ExpressionUUID->"e8444d82-f924-4b89-8b88-993a9ff2e2b7"],
Cell[3367809, 84120, 2819, 73, 70, "Input",ExpressionUUID->"c1c404af-c187-41c2-9751-b583e0a4474b"],
Cell[3370631, 84195, 2821, 73, 70, "Input",ExpressionUUID->"db8afdfd-34c1-43c5-a83a-c143f9fefec5"]
}, Closed]],
Cell[CellGroupData[{
Cell[3373489, 84273, 203, 7, 38, "Subsection",ExpressionUUID->"d935d195-551c-4986-950a-c61e052b9b8f"],
Cell[3373695, 84282, 579, 10, 70, "Text",ExpressionUUID->"dc8736b7-5b2b-4168-b48b-62845647b182"],
Cell[3374277, 84294, 474, 11, 70, "Input",ExpressionUUID->"f0cd2160-7542-4eb9-b7bf-8536865b4809"],
Cell[3374754, 84307, 1640, 45, 70, "Input",ExpressionUUID->"0ef36d0f-7152-4b64-be84-4324d99bed5c"],
Cell[3376397, 84354, 250, 4, 70, "Text",ExpressionUUID->"a1cdfc29-f5cf-41d0-b7e2-e00b3eec9fe2"],
Cell[3376650, 84360, 14912, 363, 70, "Input",ExpressionUUID->"6e52a8ae-9b80-4192-830d-46ee8754a7b5"],
Cell[3391565, 84725, 96, 0, 70, "Text",ExpressionUUID->"9ae671e5-6664-4f23-a9b7-93bd560cd984"],
Cell[3391664, 84727, 122, 0, 70, "Text",ExpressionUUID->"08812370-441f-4b78-bcab-c44c1ab914ae"],
Cell[3391789, 84729, 4168, 103, 70, "Input",ExpressionUUID->"dca564f8-66c1-4b1b-a1d4-a2959eb59015"]
}, Closed]],
Cell[CellGroupData[{
Cell[3395994, 84837, 181, 7, 38, "Subsection",ExpressionUUID->"681aef10-cc49-4942-b832-efc2d9d134e0"],
Cell[3396178, 84846, 2407, 44, 311, "Text",ExpressionUUID->"d8293756-f7d8-4c0d-85da-6feb4f36e6a2"],
Cell[CellGroupData[{
Cell[3398610, 84894, 367, 14, 45, "Subsubsection",ExpressionUUID->"4b257a48-7f86-4126-ab61-06f074177074"],
Cell[3398980, 84910, 146, 2, 70, "Text",ExpressionUUID->"422a18d2-4df8-4587-881e-f2c8bd455e06"],
Cell[3399129, 84914, 19221, 441, 70, "Input",ExpressionUUID->"4c3bae21-b5ab-4e67-91ea-7d432d7038bf",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[3418387, 85360, 282, 12, 37, "Subsubsection",ExpressionUUID->"c35bfb36-32aa-410f-9f91-e50064cbc804"],
Cell[3418672, 85374, 175, 3, 70, "Text",ExpressionUUID->"8927ab86-5e81-4c1c-a4f0-7aa12a6d1273"],
Cell[3418850, 85379, 2934, 76, 70, "Input",ExpressionUUID->"955fdcdc-3e03-449e-934f-2352fa1d9578"],
Cell[3421787, 85457, 25264, 607, 1976, "Input",ExpressionUUID->"25c91f0d-8594-4050-82e2-2f2a21de572f"],
Cell[3447054, 86066, 108, 0, 35, "Text",ExpressionUUID->"2da56098-37ea-4c91-b18e-c4fd1deec552"],
Cell[3447165, 86068, 2503, 58, 287, "Input",ExpressionUUID->"dd31c61c-5601-4ccf-bd69-52db3d81b6da"],
Cell[3449671, 86128, 780, 12, 58, "Text",ExpressionUUID->"a71cf7c0-65e3-4512-872b-5e77862264d1"],
Cell[3450454, 86142, 548, 12, 51, "Input",ExpressionUUID->"1aa32fb6-a355-49a1-93e5-5196fb9bd4a3"],
Cell[3451005, 86156, 84, 0, 35, "Text",ExpressionUUID->"e7daae4e-1fab-4bdf-8cd1-fab68540490b"],
Cell[3451092, 86158, 3617, 88, 332, "Input",ExpressionUUID->"e0d4fc7b-a347-4e17-8443-44fc694f9828"],
Cell[3454712, 86248, 627, 9, 81, "Text",ExpressionUUID->"0a0b58ac-c151-4dd6-89b2-03eacc7d3515"],
Cell[3455342, 86259, 66832, 1431, 5387, "Input",ExpressionUUID->"2eaaa28e-a9dd-46b1-8dd6-8343cdfa3dcc"],
Cell[3522177, 87692, 646, 15, 51, "Input",ExpressionUUID->"d517ca30-ff08-4414-97bf-eb945f4a19e1"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3522872, 87713, 172, 7, 54, "Subsection",ExpressionUUID->"442e6594-bb0f-4563-808f-1cfe5f2e85b9"],
Cell[CellGroupData[{
Cell[3523069, 87724, 252, 10, 45, "Subsubsection",ExpressionUUID->"0096699d-d5bf-4563-acb1-3f07cfd61799"],
Cell[3523324, 87736, 313, 5, 70, "Text",ExpressionUUID->"df828b95-4edf-4b2c-9da5-1286e0e6619d"],
Cell[3523640, 87743, 322, 8, 70, "Input",ExpressionUUID->"d0469727-46a8-4ade-95ec-917462bc7f35"],
Cell[3523965, 87753, 4750, 129, 70, "Input",ExpressionUUID->"442fb855-1f7e-4bdc-9459-d801ba264e33"],
Cell[3528718, 87884, 474, 8, 70, "Text",ExpressionUUID->"44bb557f-48c6-4c32-875b-6fd72794ecca"],
Cell[3529195, 87894, 1373, 31, 70, "Input",ExpressionUUID->"6285164b-e236-4853-8f20-fb9fb8a6dfb2"],
Cell[3530571, 87927, 2095, 50, 70, "Input",ExpressionUUID->"466c9756-aed4-4c5e-8a59-ba2e768a7079"],
Cell[3532669, 87979, 2063, 55, 70, "Input",ExpressionUUID->"ae53a78d-1e5a-4ae0-a786-97918879d23c",
 Evaluatable->False],
Cell[3534735, 88036, 2451, 61, 70, "Input",ExpressionUUID->"261669dc-95d0-48fc-af59-26f0e7c766ec"],
Cell[3537189, 88099, 1360, 35, 70, "Input",ExpressionUUID->"24dff860-69b2-4ea2-af6a-c6927890d790"]
}, Closed]],
Cell[CellGroupData[{
Cell[3538586, 88139, 275, 11, 37, "Subsubsection",ExpressionUUID->"202bc665-492a-4eb9-8d7c-6e09f9a9842a"],
Cell[3538864, 88152, 472, 10, 58, "Text",ExpressionUUID->"2308fa30-61c8-4e2d-b87e-cbecf01889bd"],
Cell[3539339, 88164, 1366, 33, 154, "Input",ExpressionUUID->"a89810da-f8e5-4747-b2ca-2648917efa05"],
Cell[3540708, 88199, 265, 5, 104, "Text",ExpressionUUID->"e266808c-af50-4f3b-b38d-1adaf8540a7b"],
Cell[3540976, 88206, 2822, 71, 175, "Input",ExpressionUUID->"fed6cf06-6277-4460-ad25-2580d3240fe4"],
Cell[3543801, 88279, 274, 5, 81, "Text",ExpressionUUID->"469cecfe-781a-47d0-87e7-5422e47050bb"],
Cell[3544078, 88286, 2635, 66, 154, "Input",ExpressionUUID->"71a67902-ef44-42dd-a54f-a6ac3abae107"],
Cell[3546716, 88354, 258, 5, 81, "Text",ExpressionUUID->"48ced844-91e8-451e-be35-4682225ec6f7"],
Cell[3546977, 88361, 2582, 68, 154, "Input",ExpressionUUID->"1006a229-b22b-4cf7-bbdc-44000428c8bc"],
Cell[3549562, 88431, 246, 4, 81, "Text",ExpressionUUID->"6334fec6-4046-4161-a901-b7e0b94bb708"],
Cell[3549811, 88437, 3094, 79, 154, "Input",ExpressionUUID->"c263e3f6-5f9b-472e-8f96-6bd8319b854a"],
Cell[3552908, 88518, 308, 6, 81, "Text",ExpressionUUID->"7baa0486-00d4-4bf7-8191-347fd860103a"],
Cell[3553219, 88526, 7317, 174, 387, "Input",ExpressionUUID->"fe8429c0-a156-43db-972f-f9c61434630d"],
Cell[3560539, 88702, 252, 4, 35, "Text",ExpressionUUID->"1591ae89-a36e-4083-b39f-647161a153b9"],
Cell[3560794, 88708, 175, 3, 35, "Text",ExpressionUUID->"cc032bda-1fa5-4bed-9172-4c1bf760c896"],
Cell[3560972, 88713, 325, 8, 29, "Input",ExpressionUUID->"ee08f588-511c-4817-96bb-fcce066d60cd"],
Cell[3561300, 88723, 240, 6, 35, "Text",ExpressionUUID->"29af3438-a432-436c-af17-ef224a6c4e7f"],
Cell[3561543, 88731, 171, 4, 29, "Input",ExpressionUUID->"fc83f51e-1ebf-457a-bf4a-90e0a3e9ba76"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3561751, 88740, 277, 11, 45, "Subsubsection",ExpressionUUID->"ef6dc708-c10c-407b-9d9f-daf6d73632da"],
Cell[3562031, 88753, 737, 10, 104, "Text",ExpressionUUID->"54f94747-9047-4dee-9dff-92b44a95e2b7"],
Cell[3562771, 88765, 1278, 22, 105, "Text",ExpressionUUID->"f05fe1b7-59a5-4f64-8477-760ed8769206"],
Cell[3564052, 88789, 1575, 41, 115, "Input",ExpressionUUID->"260433e6-143f-4d34-86ad-e2a25ca0d4a6"],
Cell[3565630, 88832, 1051, 29, 71, "Input",ExpressionUUID->"62c6626d-86f7-4a90-ba49-77ec0eb99d55"],
Cell[3566684, 88863, 1049, 29, 71, "Input",ExpressionUUID->"6d4b95ed-5712-40c8-b228-4b0db966fb7c"],
Cell[3567736, 88894, 549, 9, 104, "Text",ExpressionUUID->"85057e8c-b403-4b3d-9b3e-54c01dbd00d7"],
Cell[3568288, 88905, 1328, 37, 71, "Input",ExpressionUUID->"bd42e3b6-a256-4253-81a5-495aeff29384"],
Cell[3569619, 88944, 365, 5, 58, "Text",ExpressionUUID->"69cb818f-9c9f-4593-816f-dafdb13bac9e"],
Cell[3569987, 88951, 604, 17, 29, "Input",ExpressionUUID->"c4a36c67-916f-40ba-8d54-d365298f9520"],
Cell[3570594, 88970, 407, 6, 58, "Text",ExpressionUUID->"5421def1-31ca-4931-ad09-1df8b2c9b76b"],
Cell[3571004, 88978, 8768, 222, 427, "Input",ExpressionUUID->"72907df6-7acb-4ed9-b5fe-03c4b6b634aa"],
Cell[3579775, 89202, 100, 3, 58, "Text",ExpressionUUID->"91e63f7e-b423-488a-9843-e699b5b779c7"],
Cell[3579878, 89207, 3163, 86, 175, "Input",ExpressionUUID->"f2f480f2-ca70-48d4-9294-6e8fb4d08113",
 Evaluatable->False],
Cell[3583044, 89295, 398, 7, 58, "Text",ExpressionUUID->"9a12deff-0b83-4374-b6a8-3ed5da874452"],
Cell[3583445, 89304, 4429, 109, 236, "Input",ExpressionUUID->"03241815-2347-4768-9e76-7115b0ae6a19"],
Cell[3587877, 89415, 301, 8, 29, "Input",ExpressionUUID->"add97cf4-b782-46db-bb40-d23c75023d8f"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3588227, 89429, 317, 11, 54, "Subsection",ExpressionUUID->"ee6a9dbb-17f3-487c-bc49-3a8892ee6d00"],
Cell[CellGroupData[{
Cell[3588569, 89444, 296, 12, 45, "Subsubsection",ExpressionUUID->"29c19afd-19b8-40af-8c45-d430a91caf44"],
Cell[3588868, 89458, 4656, 123, 267, "Input",ExpressionUUID->"010ccd17-dd50-41e0-b5dd-4538a9d96572"],
Cell[3593527, 89583, 225, 3, 35, "Text",ExpressionUUID->"af027539-abf8-4af0-84f9-b77d0ab183e0"],
Cell[3593755, 89588, 179, 3, 35, "Text",ExpressionUUID->"e31ec3f4-3907-4787-8f3f-94459668745d"],
Cell[3593937, 89593, 2621, 66, 174, "Input",ExpressionUUID->"11187544-5ceb-47e3-b365-302c7abb02e3",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[3596595, 89664, 330, 14, 37, "Subsubsection",ExpressionUUID->"26897cce-2bd3-4d80-ae77-8acecc9938ce"],
Cell[3596928, 89680, 225, 3, 70, "Text",ExpressionUUID->"b07f4fa0-d213-498b-8343-a6e045b32d83"],
Cell[3597156, 89685, 268, 6, 70, "Input",ExpressionUUID->"d8aae2ff-4508-488e-a280-4112d80465fd",
 Evaluatable->False],
Cell[3597427, 89693, 179, 3, 70, "Text",ExpressionUUID->"68a7547a-a163-49ac-8b3c-b29ae13e7b65"],
Cell[3597609, 89698, 1368, 38, 70, "Input",ExpressionUUID->"309a664c-d531-420f-9d8f-543ba065abcd",
 Evaluatable->False]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3599026, 89742, 186, 7, 54, "Subsection",ExpressionUUID->"5d824e79-c55f-49c6-bead-f0984948a956"],
Cell[CellGroupData[{
Cell[3599237, 89753, 210, 10, 45, "Subsubsection",ExpressionUUID->"8dfb7478-a5e0-48ee-aa01-52401357d60c"],
Cell[3599450, 89765, 158, 3, 35, "Text",ExpressionUUID->"b02da92a-d174-49c2-bec1-e6b2c7ce473f"],
Cell[3599611, 89770, 2181, 57, 205, "Input",ExpressionUUID->"665c120f-0db6-4324-b7fa-630108fc35e7"],
Cell[3601795, 89829, 142, 2, 35, "Text",ExpressionUUID->"08fae564-b69e-47eb-b02a-d7da93b9d70d"],
Cell[3601940, 89833, 3256, 79, 257, "Input",ExpressionUUID->"20213100-fc7d-40d4-9cbd-882a15987720"],
Cell[3605199, 89914, 126, 0, 35, "Text",ExpressionUUID->"47413901-ee93-4894-9893-f4b04fdd5aac"],
Cell[3605328, 89916, 3092, 76, 278, "Input",ExpressionUUID->"ecb24898-4aea-4801-a811-47f0c69b3555"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3608457, 89997, 221, 10, 45, "Subsubsection",ExpressionUUID->"f16d61bd-58a2-4633-a5c9-8c7c6f07ffa1"],
Cell[3608681, 90009, 298, 4, 58, "Text",ExpressionUUID->"215f4d03-912b-4fa1-8f8d-aeeb48fdff85"],
Cell[3608982, 90015, 107, 0, 35, "Text",ExpressionUUID->"a9b80360-4cca-4314-86a9-5b79e7e91502"],
Cell[3609092, 90017, 1233, 28, 138, "Input",ExpressionUUID->"e713641a-4399-4d2d-a301-beb3267c9aef"],
Cell[3610328, 90047, 5217, 140, 389, "Input",ExpressionUUID->"13425cc7-ef83-400d-8108-c9d5d5f35bd1"],
Cell[3615548, 90189, 88, 0, 35, "Text",ExpressionUUID->"879cb1a0-9548-4b02-b8ed-f87dbb849981"],
Cell[3615639, 90191, 21554, 520, 1851, "Input",ExpressionUUID->"ea11410c-81e7-4fc0-a90b-41f66cc91dd8"]
}, Open  ]],
Cell[3637208, 90714, 88, 0, 35, "Text",ExpressionUUID->"7e9d6dbc-2ac6-4423-b0e6-7cfb71b88923"],
Cell[3637299, 90716, 160, 4, 29, "Input",ExpressionUUID->"f49cb877-1220-4d1c-af35-f8f9a95845a1"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3637508, 90726, 130, 4, 68, "Section",ExpressionUUID->"a0ee7a7a-e0cc-4e37-a81a-b39acd14152a"],
Cell[3637641, 90732, 163, 3, 35, "Text",ExpressionUUID->"0b6639ef-2ba6-4ef7-ab51-640fec59e455"],
Cell[3637807, 90737, 162, 4, 29, "Input",ExpressionUUID->"388eac7b-da56-4046-b97e-c7bfae0c6704"],
Cell[3637972, 90743, 214, 5, 32, "Input",ExpressionUUID->"f50ee0c9-9a57-415f-827e-b347dbe032b6"],
Cell[3638189, 90750, 607, 17, 33, "Input",ExpressionUUID->"4a3af236-8b0b-4e19-9e71-6e9b00be3778"],
Cell[3638799, 90769, 184, 5, 32, "Input",ExpressionUUID->"719e4bdb-7aed-4d01-b068-3cf999752d08"],
Cell[3638986, 90776, 160, 4, 29, "Input",ExpressionUUID->"d7b751f8-e824-460f-a29b-532c4c400823"],
Cell[3639149, 90782, 188, 5, 32, "Input",ExpressionUUID->"bc7a9c03-3fa3-432c-946a-bc0fcf2b5c0e"],
Cell[3639340, 90789, 175, 3, 35, "Text",ExpressionUUID->"24aab53d-ad7f-41c8-bb1f-fd481c77fd4f"],
Cell[3639518, 90794, 145, 2, 35, "Text",ExpressionUUID->"6b8a9e60-56b1-4523-bcd3-e973fb2d3468"],
Cell[3639666, 90798, 166, 4, 29, "Input",ExpressionUUID->"ba40136d-2ef2-4141-934b-94b725bd9466"],
Cell[3639835, 90804, 162, 4, 29, "Input",ExpressionUUID->"1df6d245-f656-476e-88e1-5b45197f27c1"],
Cell[3640000, 90810, 164, 4, 29, "Input",ExpressionUUID->"9beba473-7230-405d-aa56-98479428718a"],
Cell[3640167, 90816, 160, 4, 29, "Input",ExpressionUUID->"e04a551f-a51a-48a5-b449-4e60ee9932e4"],
Cell[CellGroupData[{
Cell[3640352, 90824, 371, 10, 33, "Input",ExpressionUUID->"10f6f9b5-2df3-40fb-8123-cb11a494f0b8"],
Cell[3640726, 90836, 10757, 175, 756, "Output",ExpressionUUID->"7fcc0040-8fa5-471c-afda-a3059dddc7df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3651520, 91016, 382, 11, 33, "Input",ExpressionUUID->"eb3e8177-ef22-4af0-a3c5-b7103cf3d8f0"],
Cell[3651905, 91029, 64429, 1008, 5730, "Output",ExpressionUUID->"734e5e5c-533e-4a7c-be6a-68d0c535ab82"]
}, Open  ]],
Cell[3716349, 92040, 264, 4, 58, "Text",ExpressionUUID->"e56e9ed7-be98-44f8-8648-f968bde76cc3"],
Cell[3716616, 92046, 628, 17, 54, "Input",ExpressionUUID->"375fc3fd-513a-46c7-8e6e-e73d53013289"],
Cell[3717247, 92065, 287, 8, 29, "Input",ExpressionUUID->"1d24a5e1-25e1-4fae-bac2-02dadb8d60de",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[3717571, 92078, 147, 4, 68, "Section",ExpressionUUID->"64646392-2c84-44bd-8289-d306a45113a6"],
Cell[3717721, 92084, 241, 5, 35, "Text",ExpressionUUID->"bab34d23-1b76-4352-b58e-022940b57c10"],
Cell[3717965, 92091, 218, 3, 32, "ItemNumbered",ExpressionUUID->"edc93c61-5bf3-47aa-9c2a-ba336d3c3af5"],
Cell[3718186, 92096, 495, 7, 74, "ItemNumbered",ExpressionUUID->"a957301b-6425-4254-9412-560333ab750c"],
Cell[3718684, 92105, 244, 4, 53, "ItemNumbered",ExpressionUUID->"bd38d81d-58e6-42f1-88dd-1468ffb6ce67"],
Cell[3718931, 92111, 419, 6, 74, "ItemNumbered",ExpressionUUID->"03218293-40f4-4783-a018-beb9f502602e"],
Cell[3719353, 92119, 800, 19, 55, "ItemNumbered",ExpressionUUID->"288a5ee6-b87d-4141-b713-123c4025be9e"],
Cell[3720156, 92140, 212, 3, 32, "ItemNumbered",ExpressionUUID->"f9824e06-9310-4687-8eb9-0e10c777c7f6"],
Cell[3720371, 92145, 330, 5, 53, "ItemNumbered",ExpressionUUID->"9c1bd693-9e81-4167-9fb7-3c598a174eef"],
Cell[3720704, 92152, 238, 3, 53, "ItemNumbered",ExpressionUUID->"358ba56e-ef33-43e4-812a-3b2f648226a3"],
Cell[3720945, 92157, 255, 4, 53, "ItemNumbered",ExpressionUUID->"e59c505a-6eb6-4e79-a5ec-ee6d20164ab1"],
Cell[3721203, 92163, 235, 3, 53, "ItemNumbered",ExpressionUUID->"c0d89406-f1ee-4110-8e7e-3f004893a70c"],
Cell[3721441, 92168, 1398, 35, 54, "ItemNumbered",ExpressionUUID->"893d4ca1-2a42-4a18-8a1d-110489ff99ca"],
Cell[3722842, 92205, 217, 3, 32, "ItemNumbered",ExpressionUUID->"ba3d32b5-3508-40ce-8cc7-b0fa47c68331"],
Cell[3723062, 92210, 126, 0, 32, "ItemNumbered",ExpressionUUID->"04959529-edc2-43d5-ad94-f4aa3f002594"],
Cell[3723191, 92212, 233, 3, 32, "ItemNumbered",ExpressionUUID->"75bc2962-7980-45cf-bdb4-46c6cd7d118e"],
Cell[3723427, 92217, 261, 4, 53, "ItemNumbered",ExpressionUUID->"bdffc49c-12ca-4d19-9c8a-48d3c34129ec"],
Cell[3723691, 92223, 374, 5, 74, "ItemNumbered",ExpressionUUID->"32da8fb4-71cb-44a2-abf7-241c547a6851"],
Cell[3724068, 92230, 219, 3, 32, "ItemNumbered",ExpressionUUID->"14d3f1b7-b9f2-4c7e-9583-3145637b9c78"],
Cell[3724290, 92235, 631, 15, 33, "ItemNumbered",ExpressionUUID->"903534b0-041c-45d7-852b-c1df01b9c301"],
Cell[3724924, 92252, 360, 5, 53, "ItemNumbered",ExpressionUUID->"e9929ecb-571c-4180-9698-41d74f37ddf4"],
Cell[3725287, 92259, 139, 1, 32, "ItemNumbered",ExpressionUUID->"01cd46fa-7d57-4a99-88d7-82227c345333"],
Cell[3725429, 92262, 137, 1, 32, "ItemNumbered",ExpressionUUID->"13eaf6d7-b18b-4b99-8a46-fa79e2d0874b"],
Cell[3725569, 92265, 313, 5, 53, "ItemNumbered",ExpressionUUID->"ab0533eb-394f-41ee-a549-0f3027f4a861"],
Cell[3725885, 92272, 121, 0, 32, "ItemNumbered",ExpressionUUID->"cdc1d72c-3b04-4cf8-9bbf-c1583678d602"],
Cell[3726009, 92274, 377, 5, 74, "ItemNumbered",ExpressionUUID->"11ab00c1-a89d-4a3e-aeab-82a5b4c6ed49"],
Cell[3726389, 92281, 194, 3, 32, "ItemNumbered",ExpressionUUID->"5da1b6e3-bcb0-4f9f-8861-9b815d300011"],
Cell[3726586, 92286, 553, 8, 95, "ItemNumbered",ExpressionUUID->"3e8c9e43-9221-4fd2-af31-5dd57131ed66"],
Cell[3727142, 92296, 149, 2, 32, "ItemNumbered",ExpressionUUID->"530adebd-2e99-4a34-ac7a-dec3dba5eade"],
Cell[3727294, 92300, 263, 4, 32, "ItemNumbered",ExpressionUUID->"c0d20b12-b94d-4e2b-afd9-f5b161f1cbc7"],
Cell[3727560, 92306, 368, 5, 53, "ItemNumbered",ExpressionUUID->"92253a5f-788e-4fbe-9f2b-39c0c63977f2"]
}, Open  ]]
}
]
*)

