(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2548176,      61846]
NotebookOptionsPosition[   2411097,      60040]
NotebookOutlinePosition[   2411765,      60066]
CellTagsIndexPosition[   2411688,      60061]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Geometric Algebra & Calculus", "Title",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"9afea453-cc25-4c79-a71c-e5dfbdd1d324"],

Cell[TextData[StyleBox["initialization, products, orthogonal base, main \
operations (involutions, grade manipulation, magnitude...), matrix \
representations",
 FontSize->16]], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"615112f4-db50-4aab-b1c6-f617fbb0d2d1"],

Cell[TextData[StyleBox["Version 0.2.0.3 (2020-06-16) ",
 FontSize->16]], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"4e44f443-be07-4aab-b2e3-346b3c4e2be1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".Copyright,  License, credit, references and notes"
}], "Section",ExpressionUUID->"d8cfecff-afda-4dd1-b50c-05b0a8572010"],

Cell["\<\
GeometricAlgebra&Calculus:  Software for calculation with Clifford \
multivectors.
Copyright, 2019  A. Acus (arturas.acus@tfai.vu.lt) ,  A. Dargys \
(adolfas.dargys@ftmc.lt)

This file is part of Geometric Algebra&Calculus package.\
\>", "Text",ExpressionUUID->"c5ddf8d2-d89f-4a90-8cbb-9616b54633e9"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". License and credit"
}], "Subsection",ExpressionUUID->"5ab1a0e8-d419-4628-8b9e-2ebe95d67c7b"],

Cell["\<\
GeometricAlgebra&Calculus is free software:  you can redistribute it and/or \
modify it under the terms of the GNU Affero General Public License as \
published by the Free Software Foundation, either version 3 of the License, \
or (at your option) any later version.

GeometricAlgebra is distributed in the hope that it will be useful, but \
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or \
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License \
for more details.

You should have received a copy of the GNU Affero General Public License \
along with GeometricAlgebra.  If not, see <http://www.gnu.org/licenses/>.\
\>", "Text",ExpressionUUID->"97123780-4ced-4e59-a65d-76df0236e407"],

Cell["\<\
Ideas of efficient implementation of geometric algebra multiplication of  \
orthogonal base vectors were borrowed form G. Stacey Staples articles and \
programming packages CliffMath11, CliffOC11, CliffSymNil11. ( \
http://www.siue.edu/~sstaple/index_files/research.htm).

A number of important functions were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). We \
also much like it general structure, test and  development solutions. 

Improved product precedence was implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

A lot of other sources was used to implement Clifford algebra and calculus \
algorithms (see references for more details).\
\>", "Text",ExpressionUUID->"7c683e00-8827-40be-8e7d-038ae45de9ca"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". References"
}], "Subsection",ExpressionUUID->"df23ec16-d2a7-4dbe-82f7-821dafb79d59"],

Cell[TextData[{
 "[DH-STAx.y ]\t   Hastenes, David \"Space-time algebra\", 1966 (third \
printing 1992), D. Reidel Publishing Company, Dordrecht Holland,  \n\
[DH-CA2GCx.y]    Hastenes, David \"Clifford algebra to geometric calculus\", \
1987, D. Reidel Publishing Company, Dordrecht Holland,  \n[CHAL-GA4Px.y]  \
Chris Doran, Anthony Lasenby \"Geometric Algebra for physicists\" Cambridge \
University, 2003\n[AB-I2GA&C]\t   Bromborsky, Alan \"An Introduction to \
Geometric Algebra and Calculus\", version of December 11, 2011 \n\
[KG-HFinP&Sp]   Klaus Gurlebeck, Klaus Habetha, Wolfgang Sprossib, \
\"Holomorphics functions in the plane and n-dimensional space\", Springer, \
2008\n[EH-VDC]\t  Eckhard MS Hitzer, \"Vector differential calculus\" Mem. \
Fac. Eng. Fukui., Vol 50 No1, 2002\n[EH-MDC] \t  Eckhard MS Hitzer, \
\"Multivector differential calculus\", Advances in Applied Clifford Algebras \
12(2) pp. 135-182, 2002\n[ECh-GA]\t  Eric Chisolm \"Geometric Algebra\" , \
arXiv 1205.5935v1\n[SS-OCICAS]\tRene Schott, G Stacey Staples \"Operator \
calculus and invertible Clifford Appel systems: theory and applications to \
n-particle fermion algebra\" and other same authors articles\n[WCS-TAGA]     \
William C. Schulz  \[OpenCurlyDoubleQuote]Theory and application of Grassmann \
Algebra\[CloseCurlyDoubleQuote], 2011, Vienna\n[RA-CoNCGBinG&CA]     Rafal \
Ablamowicz, Computation of non-commutative Grobner bases in Grassmann and \
Clifford algebras, Adv. appl. Clifford alg. 20 (2010),  447\[Dash]476\n\
[TB-GBA4GAinMP ]     Troy Brachey, Grobner Bases Algorithms for Grassmann \
Algebras in Maple package, 2008\n[NDNO-CoMISoMvCA] Nedim Degirmenci, Bulifer \
Ozdemir \[OpenCurlyDoubleQuote]The Construction of Maximum Independent Set of \
Matrices via Clifford Algebras\[CloseCurlyDoubleQuote] Turk J. Math. 31, \
(2007) 193-205\n[NDSK-EIoRCA] Nedim Degirmenci, S. Karapazar \
\[OpenCurlyDoubleQuote] Explicit Isomorphisms of Real Clifford Algebras\
\[CloseCurlyDoubleQuote], Int. Journal of Mathematics and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "l Sciencesm, (2006), 1-13, ID 78613\n[MRdT] Michael Rausch de Traubennerg \
\[OpenCurlyDoubleQuote]Clifford Algebras in Physics\[CloseCurlyDoubleQuote] \
Adv. appl. Clifford alg. 19 (2009), 869-908\n[PL-GPW] Perti Lounesto, G.P. \
Wene \[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173\n[RA-LoCGAaA]     (ed. Rafal Ablamowicz, Garret \
Sobczyk) Lectures on Clifford (Geometric) algebras and applications, \
Springer, 2004\n[GSSDW-CADoCOGE]G.S. Staples, D. Wylie. Clifford algebra \
decompositions of conformal orthogonal group elements, Clifford Analysis, \
Clifford Algebras and Their Applications, 4 (2015), 223-240\n[DF-EAfFaJoB] D. \
Fontijne \[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and \
Join of Blades\[CloseCurlyDoubleQuote]. \n[MarchukShirokov2008] Marchuk, \
N.G., Shirokov D.S. \[OpenCurlyDoubleQuote]Unitary spaces on Clifford \
algebras\[CloseCurlyDoubleQuote], arXiv:0705.1641v1 (2008)\n[Bouma2001a] \
T.A.Bouma \[OpenCurlyDoubleQuote]Invertible Homogeneus Versors are Blades\
\[CloseCurlyDoubleQuote]\n[Bouma2001b] T.A.Bouma \
\[OpenCurlyDoubleQuote]Generalized Projection Operators in Geometric Algebra\
\[CloseCurlyDoubleQuote]\n[Shirokov2020] arxiv:2005.04015v1 \
\[OpenCurlyDoubleQuote]On determinant, other characteristic polynomial \
coefficients, and inverses in Clifford algebras of arbitrary dimension\
\[CloseCurlyDoubleQuote]\n[Shirokov2020b] D. Shirokov \
\[OpenCurlyDoubleQuote]On basis-free solution to Sylvester equation in \
geometric algebra\[CloseCurlyDoubleQuote] (in print )."
}], "Text",
 CellTags->
  "references",ExpressionUUID->"fdcddf3a-5c67-4f6c-942b-58d193f3ebb3"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Setup & configuration"
}], "Section",ExpressionUUID->"246089b4-9667-4177-8ba9-b641a2c1b982"],

Cell["\<\
In order to setup the package follow three steps below. Note, that evaluation \
property was removed from all input cells in this section (copy their content \
and evaluate in your system).\
\>", "Text",ExpressionUUID->"e45fff8b-d694-4e96-824b-c0d2bc44d02d"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Add interpretation to geometric algebra operation symbols"
}], "Subsection",ExpressionUUID->"2610ed77-853f-41eb-98ea-89584ea30de3"],

Cell[TextData[{
 "It is assumed that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version is 8 or above. You need to have writing permissions to \nto system \
file pointed by system variable (evaluate it in your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " system !!!)"
}], "Text",ExpressionUUID->"69f6482c-edd1-4cb9-a59b-819ce1daf925"],

Cell[CellGroupData[{

Cell[BoxData["System`Dump`unicodeCharactersTR"], "Input",
 Evaluatable->False,ExpressionUUID->"c03170e6-d233-4851-9c4d-82d02f5c2293"],

Cell[BoxData["\<\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/FrontEnd/\
TextResources/UnicodeCharacters.tr\"\>"], "Output",ExpressionUUID->"583bcd21-\
ee4f-4cab-b611-6e1486539603"]
}, Open  ]],

Cell["\<\
in order to append contents of the file UnicodeCharactersAdd.tr  (windows \
users should use file UnicodeCharactersAddWin10.tr)\
\>", "Text",ExpressionUUID->"0468086a-a29a-4898-8577-261219699f2b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"appendFile", "=", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", 
     RowBox[{"EvaluationNotebook", "[", "]"}], "]"}], "<>", 
    "\"\<UnicodeCharactersAdd.tr\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", "appendFile", "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"1d8df92f-1bbd-4d47-bcbd-2c20a1c3a58b"],

Cell["\<\
0x26AC      \[GeometricProduct] ($gp$)      Infix       440 None    5   5
0x22CE      \[OuterProduct]     ($op$)      Infix       450 None    5   5
0x26ab      \[DorstProduct]     ($id$)      Infix       459 None    5   5
0x2219      \[InnerProduct]     ($ip$)      Infix       460 None    5   5
0x23A6      \[LeftContract]     ($il$)      Infix       461 None    5   5
0x23A3      \[RightContract]    ($ir$)      Infix       462 None    5   5\
\>", "Print",ExpressionUUID->"9384fc44-5ea3-4a7f-89cc-998ee6fa7169"]
}, Open  ]],

Cell["\<\
 This is needed in order to ensure correct precedences and  infix notations \
for inner, outer and geometric products. Do not forget to make copy of the \
system file before modification!\
\>", "Text",ExpressionUUID->"f5afd523-ac2a-47b2-810f-166ed32d6a48"],

Cell[BoxData[
 RowBox[{"CopyFile", "[", 
  RowBox[{"System`Dump`unicodeCharactersTR", ",", 
   RowBox[{"System`Dump`unicodeCharactersTR", "<>", "\"\<.old\>\""}]}], 
  "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"f36a0a7f-b7a3-4027-95e8-bf37fd6ede29"],

Cell[TextData[{
 "For Linux and Mac users this is all what needed. Restart ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and go to example files. Windows users need next step."
}], "Text",ExpressionUUID->"9b29f7bf-0560-475a-b323-3f7b8af8d744"],

Cell[CellGroupData[{

Cell["Notes and details on the change", "Subsubsection",ExpressionUUID->"904f0503-da29-4f1a-b4a0-869b5316e2c9"],

Cell[TextData[{
 "Note that 0x22CF char was replaced by 0x22CE.There seems to be some \
inconsistency about these two chars, because in text cells it prints \
differently than in input cells (different fonts?). However, if after typing \
\[EscapeKey]op\[EscapeKey] instead wedge symbol you see a symbol  \
\[OpenCurlyDoubleQuote]vee\[CloseCurlyDoubleQuote], replace 0x22CE by 0x22CF. \
\n Also \\[EmptySmallCircle ]  (\[EmptySmallCircle], which already has \
definition in UnicodeSymbols.tr file) was replaced by Unicode 0x26AC for \
geometric product notation in order to avoid symbol clash. Precedence order \
is tricky, geometric product will not work correctly if 440 is replaced by \
430. Also 540 ... precedences was tested and should be avoided.  \
UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, as was noted above, input \
cells are ok.), GeometricProduct(\[GeometricProduct]), Plus (lowest). We use  \
:il: (inner left) for left contraction and :ir: (inner right) for right \
contraction, because :lc: and :rc: already have meaning in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  "
}], "Text",ExpressionUUID->"316209da-babf-4b86-9d9b-13ce12580169"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Private style sheet creation (required for Windows users only)"
}], "Subsection",ExpressionUUID->"8d974aa8-a064-47d5-ae02-89ce99d96779"],

Cell[TextData[{
 "This step only concerns users which run ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " on Windows. The Mac and Linux users can skip this step unless they want to \
change ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " default font (not recommended)."
}], "Text",ExpressionUUID->"d38dbf2a-4a2a-4d6f-8be4-b9934d77054e"],

Cell[TextData[{
 "The problem is OS specific, because on Windows default font used for input \
and output has very limited set of Unicode characters. Below is a command \
from  ",
 ButtonBox["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/113478/is-there-a-global-\
setting-for-mathematicas-base-fonts"],
 ", which install private user style sheet with modified input and output \
fonts. As far as we know this is only needed for Windows users. If in the \
cell below you see list of symbols, which are  {empty small circle, wedge, \
center dot, left contract, right contract, fat dot}, i.e.",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAEiLcDMYi99f+WUTSKRhFd0IYlR5rqt3XM+7qZCqb9W7fwcGP99q4F36lh
2igaJOjvkipLLgYuhbR7G6hg2u+FRSYcDDwq+Y82DrzXRhG10GgiGUUE0Wgi
oTP6t2n9n6FWFw+XRLLqiJmUvIJpXcPSX9gU/JxfmqkpLiBgcGDlwAb4pqcN
cWcH2A0ko6GUSDYs2ZXg7KQsr6dpWVw07TNKftzyZfbEHSk6YuIe59Zg6l17
1k1cXD/nyIxFuFvUm991xPvLCgiJKEek9n+gUWbfvHSNoUJy/xp6RjHlaMgk
ks2rjvhJczAyQAEzv2fBArRC432biaSE74W1mNrXXfSVlDLpeI/H/NV9STLK
1W2LP82vz5OTL526nhah/WdRubOwuJpb70eaxObmL4uXfNlEfZOHSiL5t7zZ
jReeRECAUy7u5npkNRtuxcuLqZU9wxJKm5+Xq4uhq0eLvhIbBf+LoAS25oSd
rHPLShpE4sZ7aboOybV56jZblm2huuEPsnUFmZgEdbIfUCMqkdFQSSR/F5eb
cyKnEQY2CUicwtGmJ8UGorzqSclolcWW973xsSq8YoalT/G4av3sLg0Jt4iS
9QVBthIGc+ZvpHYkbv23qidLzW7LsvX3MnRt4md+p7L5m1/WuRkLChq7172k
dmEyVBLJ/w3zpmpyM8GTCCOLgmfvR5TEsPlVna0Up6iTT+trlFDa8qbV302c
S8au4TXelsbv5b3TAxzD3cIXTFz1F69jfi1p7I2KaC2Y/ZUEL2y4laxrFTMD
mDb+rmhPUrZctXgzta0gjMgzlmAiIclY4hMJGa79ubAqV52PlZGBkZFD1Tr1
3Gq0Env9tXAZUfXKF1hSwpbnFRpisjE3cFc3pCBgraHIzSwQ1LAcf1pCRt9n
pDop+x1dBXHzpmfllvoOVS9whhI5VtDI5f8JJxLSjCU6kZAbCJs3vp03++7i
ddh0bXldrysuGXR5HabU+stBUhIGLW+p0mfZMG+CIgeHdDg2i3A5e9lme/2q
ntX/4CIbl6510SmbuJZqVtDI5WBEIJGQaCyxiYQWgbB547N6CylRp1NYusBr
TjqISlk2UaWy/jU3TZ+Dx7F40W/SnLf5H0ERCq2gkcsJJRJSjSUykdAgEFYd
NOBlYhMLSJmObaZyy5cpCa5CLEy8RoeG2kDWAKI/S+pjtVWMVVSMFSV5mKjc
cGXmENdTARlubVf2hE5Dr1t+LF32YR3efuXm9R+WLvsx1IbEBxBBYhMOqJtI
qG7sKBoYtHnTtzVrPsPQl3UbcdWPg8LYUTSKRtEoGjAEADJov1g=
     "], {{0, 20}, {183, 
     0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{183, 20},
   PlotRange->{{0, 183}, {0, 20}}]], "Input",
  Evaluatable->False,
  ImageSize->{187, 19},
  ImageMargins->{{0, 0}, {0, 0}},
  ImageRegion->{{0, 1}, {0, 1}},ExpressionUUID->
  "64861c77-fbb3-4270-8dec-0916bd2e78be"],
 " then there is no need for private style sheet. If you see instead some \
empty squares you need to find font which has the mentioned characters"
}], "Text",ExpressionUUID->"2ff29d69-c109-424c-b7d0-796fe49bccc2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[GeometricProduct]", 
   RowBox[{",", 
    RowBox[{"\[OuterProduct]", 
     RowBox[{",", 
      RowBox[{"\[InnerProduct]", 
       RowBox[{",", 
        RowBox[{"\[LeftContract]", 
         RowBox[{",", 
          RowBox[{"\[RightContract]", 
           RowBox[{",", "\[DorstProduct]"}]}]}]}]}]}]}]}]}]}], "}"}]], "Input",\

 Evaluatable->False,ExpressionUUID->"8351f0c5-2162-4e7c-b33d-57f9728b1c5f"],

Cell["\<\
The simplest way to test font is to select the cell above and change font \
with front end Format/Font menu command. When you will find a font where all \
chars are represented correctly, you can set it as default for Standard form \
using the command below.  In particular  we noticed that \
\[OpenCurlyDoubleQuote]Microsoft Sans Serif\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]OpenSymbols\[CloseCurlyDoubleQuote] are ok for Windows \
10.  In order to generate and install private style sheet do the following.\
\>", "Text",ExpressionUUID->"ad1c4e6c-0e36-4471-8d1c-a7c7b20fcd6f"],

Cell["\<\
Make both cells below Evaluatable and execute. Once style sheet  \
\"GA_Style.nb\" is installed in you private Mathematica folder use it with \
all notebooks were you load this package. After that do this don\
\[CloseCurlyQuote]t forget to make both cells below non executable again, \
i.e.  remove front end command Cell/Cell Properties/Evaluatable mark from them\
\>", "Text",ExpressionUUID->"3de50969-e4e5-49c7-bc8b-0712109c3114"],

Cell[BoxData[
 RowBox[{
  RowBox[{"setFont", "[", 
   RowBox[{"fontFamily_", ",", "fontSize_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"styleNB", "=", 
       RowBox[{"Notebook", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cell", "[", 
           RowBox[{"StyleData", "[", 
            RowBox[{"StyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}], 
            "]"}], "]"}], ",", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"StyleData", "[", "\"\<StandardForm\>\"", "]"}], ",", 
            RowBox[{"FontFamily", "\[Rule]", 
             RowBox[{"ToString", "[", "fontFamily", "]"}]}], ",", 
            RowBox[{"FontSize", "\[Rule]", 
             RowBox[{"ToExpression", "[", "fontSize", "]"}]}]}], "]"}]}], 
         "}"}], "]"}]}], ",", 
      RowBox[{"styleSheetName", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
         "$UserBaseDirectory", ",", "\"\<SystemFiles\>\"", ",", 
          "\"\<FrontEnd\>\"", ",", "\"\<StyleSheets\>\"", ",", 
          "\"\<GA_Style.nb\>\""}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FileExistsQ", "[", "styleSheetName", "]"}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"$FrontEnd", ",", 
         RowBox[{
         "DefaultStyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}]}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"styleSheetName", ",", "styleNB"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SetOptions", "[", 
      RowBox[{"$FrontEnd", ",", 
       RowBox[{"DefaultStyleDefinitions", "\[Rule]", "styleSheetName"}]}], 
      "]"}]}]}], "]"}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"45a0b0a1-0b54-4bab-aeb2-e3c97f729186"],

Cell[BoxData[
 RowBox[{"setFont", "[", 
  RowBox[{"\"\<Microsoft Sans Serif\>\"", " ", ",", "14"}], "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"05ff0ea3-e078-42bf-9da6-2875b3b1b48d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Adjust compilation target (optional optimization step)"
}], "Subsection",ExpressionUUID->"a0a93512-3275-4b9a-99e6-70411fd0e935"],

Cell[TextData[{
 "\nGo to next section ",
 StyleBox["Initialization",
  FontWeight->"Bold"],
 " (below) and find variable ",
 StyleBox["$",
  FontWeight->"Bold"],
 "gaPackageOptions.  It contains a number of settings, the most important of \
which is  ",
 StyleBox["CompilationTarget",
  FontWeight->"Bold"],
 ". It defines the way some package functions are compiled. The safe choice \
is to set it to  ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ", which is slightly slower that ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " (compilation to \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] binary \
code). The drawback of compilation to C is that compilation itself takes more \
time, therefore, the package initialization takes more time. If you have C \
compiler installed, read below how to test if it works properly. "
}], "Text",ExpressionUUID->"719e9c23-5f02-41fd-9a19-8cbbf7325690"],

Cell[CellGroupData[{

Cell["How to test whether compilation to C works properly", "Subsubsection",ExpressionUUID->"f596c1eb-5661-4b9f-93dc-9f17f2b7924f"],

Cell["\<\
The speed of base elements products slightly depends on compilation type.  In \
order to make decision make cells below evaluatable. First, test what C \
compilers are available in your system. By default on Windows external \
compilers are absent.\
\>", "Text",ExpressionUUID->"077012fb-06af-4966-824e-7c5c8f3a4365"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"450d29ef-22b3-4209-a631-e5451cefccd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"f59ea091-020a-4f64-887f-5ecb9ce435c0"]
}, Open  ]],

Cell["\<\
If you get nonempty list,  then try to compile trivial function. The output \
should be CompiledFunction[ ].\
\>", "Text",ExpressionUUID->"ba762656-3b4a-4adc-a874-2da7fe0b9836"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], "//", 
  "FullForm"}]], "Input",
 Evaluatable->False,ExpressionUUID->"64e2981c-ef8f-4568-8f83-65bbf03cf794"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CompiledFunction", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"10", ",", "10.3`", ",", "5468"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"Blank", "[", "Real", "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"List", "[", "1", "]"}], "]"}], ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"List", "[", "x", "]"}], ",", "x"}], "]"}], ",", "Evaluate", 
     ",", 
     RowBox[{"LibraryFunction", "[", 
      RowBox[{
      "\"\</home/acus/.Mathematica/ApplicationData/CCompilerDriver/\
BuildFolder/acus-7694/compiledFunction26.so\>\"", ",", 
       "\"\<compiledFunction26\>\"", ",", 
       RowBox[{"List", "[", 
        RowBox[{"List", "[", 
         RowBox[{"Real", ",", "0", ",", "\"\<Constant\>\""}], "]"}], "]"}], 
       ",", "Real"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",ExpressionUUID->"3d65e147-31c2-4018-aa40-99e6cfb48e51"]
}, Open  ]],

Cell["\<\
If compilation was successful, then in subsection \[OpenCurlyDoubleQuote]Help \
functions, installations options\[CloseCurlyDoubleQuote] below (see \
subsection 3.2.1) one of $gaPackageOptions options can be changed be \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]. If \
compilation to C is not possible, then this option should to set to CompileTo\
\[Rule]\[CloseCurlyDoubleQuote]WVM\[CloseCurlyDoubleQuote] . After adjusting, \
make these cells unevaluatable again.\
\>", "Text",ExpressionUUID->"da9b4a89-255e-4b88-85ab-899b50aa0aac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CompilePrint", "[", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
     RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}]}], "]"}], "]"}], 
  "//", "FullForm"}]], "Input",
 Evaluatable->False,ExpressionUUID->"a0537915-cf9e-43f9-a4fb-b42cce4b9205"],

Cell[BoxData[
 TagBox[
  StyleBox[
   "\"\<\\n\\t\\t1 argument\\n\\t\\t1 Real register\\n\\t\\tUnderflow \
checking off\\n\\t\\tOverflow checking off\\n\\t\\tInteger overflow checking \
on\\n\\t\\tRuntimeAttributes -> {}\\n\\n\\t\\tR0 = A1\\n\\t\\tResult = \
R0\\n\\n1\\tReturn\\n\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",ExpressionUUID->"2f6a2498-cb86-4b10-82e4-1fa3ea6bc3b1"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Tested versions and known problems"
}], "Subsection",ExpressionUUID->"50f8bc01-2789-4fac-82fa-e8778037a4cc"],

Cell["\<\
Tested with versions: 10.2 for windows 10,  10.3, 11.3 and 12.0  for Linux \
Ubuntu 14.04, 16.04, and 18.04 and 10.3 for Mac.\
\>", "Text",ExpressionUUID->"0e5b73d3-1786-42c2-bd01-d8f7bb285509"],

Cell[TextData[{
 " Known problems: \n1) Version 10.0 complains about shadowed symbol z. It is \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " bug, avoid this version. \n2) You have to wait until evaluation of this \
notebook is finished and only then evaluate other cells in your notebook. If \
you press shift + enter on next evaluation cell while package load has not \
been finished for some unknown reasons the evaluation of marked cell can be \
ignored, i.e. simply not sent to kernel (you have to reevaluate it after \
package was loaded). The reason remains unclear (front end and OS related \
bug? some internal evaluation delay time limit exceeded?). "
}], "Text",ExpressionUUID->"635b9c7c-44f1-462d-8dac-28a8f0c190db"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Initialization"
}], "Section",ExpressionUUID->"2153a712-150f-4eab-9c82-4673c6899f50"],

Cell[TextData[{
 StyleBox["Step 1 ",
  FontWeight->"Bold"],
 "we define general context manipulation commands "
}], "Text",ExpressionUUID->"4ed2df02-7f07-4f85-b67a-c2615b4ed048"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Package Context"
}], "Subsection",ExpressionUUID->"8d836bc1-612a-4ef7-bf7d-d3cc6865c1f5"],

Cell["\<\
Context manipulation commands were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). \
Context code has several goals, primarily: 1. \[OpenCurlyDoubleQuote]Private \
context sharing across discontinuous sections.\[CloseCurlyDoubleQuote] 2.  \
\[OpenCurlyDoubleQuote]Easy manual reentry of any one section for developing \
work. \[OpenCurlyDoubleQuote]

DeclareIntoContext creates and/or clears symbols in package context.  \
\>", "Text",ExpressionUUID->"3e980c74-baf4-4688-b2c4-a6e143f018d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"GeometricAlgebra`$gaPackageHasBeenLoaded", ",", 
    RowBox[{"CompoundExpression", "[", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<The package has already been loaded.\>\"", "]"}], 
      ",", " ", 
      RowBox[{"FrontEndTokenExecute", "[", "\"\<EvaluatorAbort\>\"", "]"}], 
      ",", 
      RowBox[{"Abort", "[", "]"}]}], "]"}], ",", 
    RowBox[{
    "GeometricAlgebra`$gaPackageHasBeenLoaded", " ", "=", " ", "False"}]}], 
   "]"}], ";"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"2ea5594d-cdde-4f43-b954-38dce8511373"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<GeometricAlgebra`\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"c7472096-2977-471b-a66b-7007ac37d9d0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$GAUnprotectionList", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageInputAliases", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$GAPackageContext", " ", "=", " ", 
   RowBox[{"Context", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageOnlyContextPath", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"System`$ContextPath", ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"$GAPackagePrivateContext", " ", "=", " ", 
   RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<p`\>\""}]}], 
  ";"}]}], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"efdd2539-df2c-4265-9c81-b8c06d5390ad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "DeclareIntoContext", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"HoldAll", ",", "Listable"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DeclareIntoContext", "]"}], " ", "=", "  ", 
   RowBox[{"{", 
    RowBox[{"Context", "->", "$GAPackageContext"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "normal", " ", "package", " ", 
    RowBox[{"load", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x__", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Quiet", "[", 
      RowBox[{
       RowBox[{"Unprotect", "[", "x", "]"}], ";", " ", 
       RowBox[{"Clear", "[", "x", "]"}], ";"}], " ", "]"}], " ", "/;", " ", 
     RowBox[{"SameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "Global`", " ", "scratchpad", " ", 
    "dev", " ", "work"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "symbolName", " ", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"symbolName", " ", "=", "  ", 
         RowBox[{"SymbolName", "[", 
          RowBox[{"Unevaluated", "[", "x", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Unprotect", "[", "x", "]"}], " ", ";", " ", 
          RowBox[{"Remove", "[", "x", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"BeginPackage", "[", 
         RowBox[{"OptionValue", "[", "Context", "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Symbol", "[", "symbolName", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"EndPackage", "[", "]"}]}]}], "]"}], " ", "/;", " ", 
     RowBox[{"UnsameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"same", " ", "flavor"}], ",", " ", 
    RowBox[{"multiple", " ", "arguments", " ", "pattern"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeclareIntoContext", "[", 
    RowBox[{"x__", ",", " ", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"{", "x", "}"}], "]"}], " ", "/;", " ", 
    RowBox[{"UnsameQ", "[", 
     RowBox[{
      RowBox[{"Context", "[", "]"}], ",", 
      RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";", 
  RowBox[{"End", "[", "]"}], ";"}]}], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"6490e68b-4e3b-4310-85a0-8dff46ae47dc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPrivate", "[", "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"$GAPackageOnlyContextPath", ",", 
         RowBox[{"{", "$GAPackagePrivateContext", "}"}]}], "]"}]}], "]"}], 
     ";", " ", 
     RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";", " ", 
     RowBox[{"If", "[", 
      RowBox[{"$gaPackageHasBeenLoaded", ",", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Unprotect", "[", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<*\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], ";"}], " ", ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EndPrivate", "[", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", "$GAPackageOnlyContextPath"}], 
      "]"}], ";", " ", 
     RowBox[{"End", "[", "]"}], ";"}], " ", ")"}]}], ";"}]}], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"3de305cf-bdc9-436e-96dd-36d4ca81524d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions, installation options"
}], "Subsection",ExpressionUUID->"886b8993-5e4a-450e-8746-a36a2ff6b3b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", 
   RowBox[{
   "$gaPackageOptions", ",", "TheContextSymbolList", ",", 
    "StringListPrintableString", ",", "MissingForwardDeclarations", ",", 
    "ShowStatus", ",", "gaOptionCheck"}], "]"}], ";"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"9bde0319-c8e3-4153-adfc-0a0bcc9765ea"],

Cell["Usage messages", "Text",ExpressionUUID->"209148b3-5465-4f8e-9b16-31b478270ba0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "::", "usage"}], "=", 
   "\"\<ShowStatus[_String] displays curent evaluation status on bottom panel \
of the evaluation notebook window.\>\""}], ";"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"c2f6715e-92ec-4d7d-9c38-8cc7f0584597"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionCheck", "::", "usage"}], "=", 
   "\"\<gaOptionCheck[testFunction_] tests if option provided to a function \
has correct values. The correctness is tested by user provided testFunction[ \
]. Usage example. First define function test[ ] outside the function which \
calls the option optionA, i.e. test[\\\"optionA\\\",val_]:=IntegerQ[val];  \
Then inside function, which has possible option optionA perform test as \n\
OptionCheck[test][Module[{optionAValue},optionAValue=OptionValue[\\\"optionA\\\
\"];  in the case when option is provided with OptionPattern[]. \>\""}], 
  ";"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"689131d9-e6ae-4d7f-93c1-8251ee7378ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$gaPackageOptions", "::", "usage"}], "=", 
   "\"\<Contains global notation, behaviour and performance options. They \
modify implementation of some package functions.\>\""}], ";"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"ff8edc3e-cbe9-4e2e-b189-db2ceb438dac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"e905e4d5-32c9-47a1-856d-3be2a433605a"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ".Installation options,  restrictions and default settings"
}], "Subsubsection",ExpressionUUID->"00842a3b-eb89-4e00-95a1-b8b3c52ae039"],

Cell[TextData[{
 "Input of geometric, inner and outer products and realization of proper \
precedences requires modern ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " front end. Version 8 seems to be minimal, where  input/output formatting \
can work properly. "
}], "Text",ExpressionUUID->"f06c4c80-376a-4c26-8dbb-338391a84f4d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"ValueQ", "[", 
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "]"}], 
     "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "=", 
      "\"\<Input of geometric, inner and outer products and realization of \
proper products precedences requires modern \
\!\(\*StyleBox[\"Mathematica\",FontSlant->\"Italic\"]\) front end. Version 8 \
seems to be minimal, where input/output can work properly.  $VersionNumber \
says your version is `1`. Package load is aborted.\>\""}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "<=", " ", "7"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], ",", 
       RowBox[{"NumberForm", "[", 
        RowBox[{"System`$VersionNumber", ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Quit", "[", "]"}]}]}], "]"}], ";"}]}], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"98f71124-f634-4b49-9a2e-191c82343783"],

Cell[TextData[{
 "Here is the list of options that can be used to modify global package \
function definitions.  Most of them are highly experimental and properly \
untested. Short descriptions and status are given below\n\nSetting",
 StyleBox[" CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " (or any other string) will compile essential functions to Wolfram virtual \
machine code (bytecode). An alternative is  ",
 StyleBox["CompileTo\[Rule] \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]",
  
  FontWeight->"Bold"],
 " (rather well tested, however, takes package takes longer to load, the gain \
is only important for really huge computations)."
}], "Text",ExpressionUUID->"c802f3d0-0110-4e58-bff7-7d0112d2846d"],

Cell[TextData[{
 "Option ",
 StyleBox["gaAlwaysTestInputIndexOrdering",
  FontWeight->"Bold"],
 " seeks for unordered index sets of indices (in ",
 StyleBox["mvDownUp[down_List, up_List]",
  FontWeight->"Bold"],
 ". Unordered index sets should never appear in calculations. Appearance of \
unordered index list will definitely mean that that user input or program \
code contains error. This option modifies $Pre and $Post behaviour. Can \
disable testing by setting the option to False.  No problems were \
encountered, thought large output is rendered more slowly. "
}], "Text",ExpressionUUID->"234b8e39-659c-446d-8ce7-2b5a83ec26dc"],

Cell[TextData[{
 "Option ",
 StyleBox["gaMemorizeBaseElementProduct\[Rule]False",
  FontWeight->"Bold"],
 " don't try to memorize base element product. Memorization currently is \
implemented for geometric product expansion in the Association form and \
yields significant speed gain (about 30%). From the other side when uses it \
takes more memory and makes development much more difficult, therefore we do \
not use it by default. Anyway, together with ",
 StyleBox["CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]",
  
  FontWeight->"Bold"],
 " it ensures fastest way to expand geometric product in Association \
representation. "
}], "Text",ExpressionUUID->"fc5dae69-f1a1-4b2d-859f-69175461b3b4"],

Cell[TextData[{
 "Option ",
 StyleBox["gaOrthonormalBasisSymbolName\[Rule]\[CloseCurlyDoubleQuote]\
\[DoubleStruckE]\[CloseCurlyDoubleQuote] ",
  FontWeight->"Bold"],
 "allows user to use different symbol for orthonormal base elements. Other \
settings were untested, so user can encounter problems (please report)."
}], "Text",ExpressionUUID->"21671e90-11ac-43fa-b7f3-43d4fab8c985"],

Cell[TextData[{
 "Option ",
 StyleBox["gaOrthonormalBasisSymbolInputAlias\[Rule]\[CloseCurlyDoubleQuote]e\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " assumes, that input e[1] will be converted into base element.  Other \
settings were untested, so user can encounter problems (please report)."
}], "Text",ExpressionUUID->"59d3ff1a-9d5a-483f-9024-0532d2d57226"],

Cell[TextData[{
 "Option ",
 StyleBox["gaGeneralBaseSymbolInputAlias\[Rule]\[CloseCurlyDoubleQuote]\
\[DoubleStruckF]\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ". Not orthonormal bases are not yet implemented, so this option is \
ignored."
}], "Text",ExpressionUUID->"32b0faae-ac94-4560-9cc3-cd0bd1146d5a"],

Cell[TextData[{
 "Option ",
 StyleBox["gaInternalMultivectorRepresentation\[Rule]\[CloseCurlyDoubleQuote]\
PlainRepresentation\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 "  was removed, because Association representation is not convenient for \
input and for many other operations. From the other hand Association \
representation makes expansion of MV product significantly faster (especially \
with symbolic coefficients) and it is very useful for sorting and ordering of \
MV.   "
}], "Text",ExpressionUUID->"462f1179-ebf5-4160-94f9-2a4b0671d595"],

Cell[TextData[{
 "Options ",
 StyleBox["gaDifferentialFormSymbolName\[Rule]\[CloseCurlyDoubleQuote]\
\[DoubleStruckD]\[DoubleStruckE]\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaDifferentialFormSymbolInputAlias\[Rule]\[CloseCurlyDoubleQuote]\
de\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ", sets input method for differential forms.  Since In fact we will consider \
differential forms as MV with upper indices. Therefore in $Pre function when \
converting to RowBoxes we replace \[DoubleStruckD]\[DoubleStruckE] symbol by \
\[DoubleStruckE]. Hope that the trick will be convenient.  "
}], "Text",ExpressionUUID->"2da9675f-c36c-4843-bc6f-fc8dd434b7b9"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
Package global option setting
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[
  1, 0, 0],ExpressionUUID->"321e54c4-b843-4749-b258-7582a9b3e8a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaPackageOptions", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CompileTo", "\[Rule]", "\"\<WVM\>\""}], ",", 
     RowBox[{
     "gaOrthonormalBasisSymbolName", "\[Rule]", "\"\<\[DoubleStruckE]\>\""}], 
     ",", 
     RowBox[{"gaOrthonormalBasisSymbolInputAlias", "\[Rule]", "\"\<e\>\""}], 
     ",", 
     RowBox[{
     "gaGeneralBasisSymbolInputAlias", "\[Rule]", 
      "\"\<\[DoubleStruckF]\>\""}], ",", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "\[Rule]", "True"}], ",", 
     RowBox[{"gaMemorizeBasisElementProduct", "\[Rule]", "True"}], ",", 
     RowBox[{
     "gaDifferentialFormSymbolName", "\[Rule]", 
      "\"\<\[DoubleStruckD]\[DoubleStruckE]\>\""}], ",", 
     RowBox[{
     "gaDifferentialFormSymbolInputAlias", "\[Rule]", "\"\<de\>\""}]}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"362f1c82-2248-4ec9-894e-99f37161f8e8"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
No editable data or configuration information below this line for ordinary user
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[
  1, 0, 0],ExpressionUUID->"e0635e1e-ecb9-45a4-856e-914ccc3eee12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"orthonormalBasisSymbolName", "=", 
   RowBox[{"gaOrthonormalBasisSymbolName", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"theInternalMVRepresentation", "=", 
   RowBox[{
   "gaInternalMultivectorRepresentation", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"memorizeProducts", "=", 
   RowBox[{"gaMemorizeBasisElementProduct", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"differentialFormSymbolName", "=", 
    RowBox[{"gaDifferentialFormSymbolName", "/.", "$gaPackageOptions"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"input", " ", "aliases"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orthonormalBaseSymbolInputAlias", "=", 
   RowBox[{
   "gaOrthonormalBasisSymbolInputAlias", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generalBasisSymbolInputAlias", "=", 
   RowBox[{"gaGeneralBasisSymbolInputAlias", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"differentialFormSymbolInputAlias", "=", 
   RowBox[{
   "gaDifferentialFormSymbolInputAlias", "/.", "$gaPackageOptions"}]}], 
  ";"}]}], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"0d7fe44c-ecd9-4d11-bffa-9cc051abc80a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notes of general character:"
}], "Subsection",ExpressionUUID->"d1eb5dad-cb2a-4045-9fca-9329c85467bc"],

Cell[TextData[{
 "1. All command names are in singular form (i.e. ",
 StyleBox["gaGetIndex[ ]",
  FontWeight->"Bold"],
 ", not ",
 StyleBox["gaGetIndices[ ]",
  FontWeight->"Bold"],
 ", even if  it returns list of indices).  \n2. If some particular function \
needs to be used before its actual definition is given we include its name in \
declarations of Forwards section.\n3. Usage and error messages are defined \
along with the definitions.\n4. Context switch commands are used in Sections\n\
5. When possible for options we use symbols already used by ",
 StyleBox["Mathematica, i.e Quiet, Method,Down,...",
  FontSlant->"Italic"]
}], "Text",ExpressionUUID->"ba37dffc-0dc2-404e-ac1e-fc8db397ae3b"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Useful functions for developing and control"
}], "Subsubsection",ExpressionUUID->"5096be12-ace0-44fa-b8a3-9de2ef62f20e"],

Cell[TextData[{
 "Functions ",
 StyleBox["StringListPrintableString,MissingForwardDeclarations",
  FontWeight->"Bold"],
 "  are taken from DesignerUnits` package (copyright 2009 to present Mark \
Evans, http://designerunits.com/overview). "
}], "Text",ExpressionUUID->"96238029-9e09-4af6-82f1-9ee6c686782a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "StringListPrintableString", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"ls", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"#1", ",", "\"\<, \>\"", ",", "#2"}], "]"}], "&"}], ",", 
     RowBox[{"First", "[", "ls", "]"}], ",", 
     RowBox[{"Rest", "[", "ls", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"{", "}"}], "]"}], " ", "=", " ", "\"\<\>\""}], ";"}]}], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"e16f7d9f-daa4-4d48-b697-87f357b8e236"],

Cell["Empty list means everything is ok.", "Text",ExpressionUUID->"a0ca8ad7-47ac-45ff-bbb0-1210c8f8d74b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "MissingForwardDeclarations", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"outerCtx_String", ",", "privateCtx_String"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"synm", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}]}], 
      "}"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{
       RowBox[{"synm", " ", "/@", "  ", 
        RowBox[{"Names", "[", 
         RowBox[{"outerCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}], ",", 
       RowBox[{"synm", " ", "/@", " ", 
        RowBox[{"Names", "[", 
         RowBox[{"privateCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", "]"}], " ", ":=", " ", 
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"$GAPackageContext", ",", "$GAPackagePrivateContext"}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"ae356dac-09c2-43e0-8723-ff5e6a3afd97"],

Cell[TextData[{
 StyleBox["ShowStatus[]",
  FontWeight->"Bold"],
 " is borrowed from Paul\[CloseCurlyQuote]s Abbot \
\[OpenCurlyDoubleQuote]Tricks of the Trade\[CloseCurlyDoubleQuote],The MMa \
Journal 7-3,2000 Author:Theodore Gray (theodore@wolfram.com)"
}], "Text",ExpressionUUID->"1dac2f39-30ec-4256-964e-7a008bac8c0b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "ShowStatus", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "[", "status_String", "]"}], ":=", 
   RowBox[{"LinkWrite", "[", 
    RowBox[{"$ParentLink", ",", 
     RowBox[{"SetNotebookStatusLine", "[", 
      RowBox[{
       RowBox[{"FrontEnd`EvaluationNotebook", "[", "]"}], ",", "status"}], 
      "]"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"346a029b-4156-4677-aa32-df0ab7ab81ab"],

Cell[TextData[{
 StyleBox["gaValidVersionQ[]",
  FontWeight->"Bold"],
 " is used to test if the feature can be implemented in the detected ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version. If not, the definition is skipped or package load is aborted."
}], "Text",ExpressionUUID->"fab87387-fbd1-4864-bccf-1e217a792418"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaValidVersionQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "True"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaValidVersionQ", "::", "MathematicaVersion"}], "=", 
    "\"\<Mathematica version `1` detected. The implementation of feature `2` \
requires at least version `3`.\>\""}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gaValidVersionQ", "[", 
   RowBox[{
    RowBox[{"requiredVersion_", "?", "NumberQ"}], ",", "feature_String", ",", 
    "opts___"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"requiredVersion", "<=", "System`$VersionNumber"}], ",", "True", 
    ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaValidVersionQ", "]"}]}], ")"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaValidVersionQ", "::", "MathematicaVersion"}], ",", 
         "System`$VersionNumber", ",", "feature", ",", "requiredVersion"}], 
        "]"}]}], "]"}], ";", "False"}]}], "]"}]}]}], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"b377dce3-2b6c-497c-8ef5-3d897d908b7c"],

Cell["\<\
Implemented general option check message. It can be used in the message\
\>", "Text",ExpressionUUID->"fbce78b8-15af-46e6-a551-c836bad3ad06"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Message", "[", 
   RowBox[{
    RowBox[{"gaOptionValue", "::", "option"}], ",", "TheCommand", ",", " ", 
    "OptionName", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<OptionValue1\>\"", ",", "\"\<OptionValue2\>\"", ",", ".."}],
      "}"}], ",", "\"\<SwitchToDefaultValue\>\""}], "]"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"f073d6d5-f160-4949-b797-c4584a172983"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionValue", "::", "option"}], "=", 
   "\"\<The `1` option `2` can take only values `3`. Continue with \
`4`.\>\""}], ";"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"1bed88a6-8612-4f12-856e-8afbc90b96f8"],

Cell["\<\
The function below passes options for the \
Method->{\[OpenCurlyDoubleQuote]someMethod\[CloseCurlyDoubleQuote], \
opt1->Value1, opt2->Value2}. Requires \
gaMethodOptionContainer[methodName]={defaultOpt1->Val1, defaultOpt2->Val2} to \
be defined with all possible options for the described Method. See how it is \
used in gaProductPairExpand[ ]\
\>", "Text",ExpressionUUID->"53d48343-e73d-4f0c-9ae0-9947bd67a262"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPassMethodOptionValue", "[", 
    RowBox[{"methodName_String", ",", "optionName_Symbol", ",", 
     RowBox[{"{", 
      RowBox[{"userMethodOptionValues___", "?", "OptionQ"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"optionName", "/.", 
       RowBox[{"FilterRules", "[", 
        RowBox[{
         RowBox[{"{", "userMethodOptionValues", "}"}], ",", 
         RowBox[{"First", "/@", 
          RowBox[{"gaMethodOptionContainer", "[", "methodName", "]"}]}]}], 
        "]"}]}], ")"}], "/.", 
     RowBox[{"gaMethodOptionContainer", "[", "methodName", "]"}]}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"80f4b513-c1f0-454c-bdc5-52af43adeb26"]
}, Open  ]],

Cell[TextData[{
 "Taken from: \
https://mathematica.stackexchange.com/questions/116623/how-to-check-the-\
validity-of-an-option-value (Leonid Shifrin). The ",
 StyleBox["gaOptionValue[ ]",
  FontWeight->"Bold"],
 " is to be replaced by more powerful and general ",
 StyleBox["gaOptionCheck[ ]",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"ee6e59a7-2576-4efc-b346-e0f22834402a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "gaOptionCheck", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionCheck", "::", "invldopt"}], "=", 
   "\"\<Option `1` for function `2` received invalid value `3`\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionCheck", "[", "testFunction_", "]"}], ":=", 
   RowBox[{"Function", "[", 
    RowBox[{"code", ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tag", ",", "msg", ",", "catch"}], "}"}], ",", 
       RowBox[{
        RowBox[{"msg", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", "t"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionCheck", "::", "invldopt"}], ",", 
              RowBox[{"Sequence", "@@", "t"}]}], "]"}], ";", "v"}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"catch", "=", 
         RowBox[{"Function", "[", 
          RowBox[{"c", ",", 
           RowBox[{"Catch", "[", 
            RowBox[{"c", ",", "_tag", ",", "msg"}], "]"}], ",", "HoldAll"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"catch", "@", 
         RowBox[{"ReplaceAll", "[", 
          RowBox[{
           RowBox[{"Unevaluated", "@", "code"}], ",", 
           RowBox[{
            RowBox[{"o", ":", 
             RowBox[{"HoldPattern", "[", 
              RowBox[{"OptionValue", "[", 
               RowBox[{"f_", ",", "_", ",", "name_"}], "]"}], "]"}]}], 
            "\[RuleDelayed]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"val", "=", "o"}], "}"}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"testFunction", "[", 
                  RowBox[{"name", ",", "val"}], "]"}]}], ",", 
                RowBox[{"Throw", "[", 
                 RowBox[{"$Failed", ",", 
                  RowBox[{"tag", "[", 
                   RowBox[{"name", ",", "f", ",", "val"}], "]"}]}], "]"}], 
                ",", 
                RowBox[{"(*", "else", "*)"}], "val"}], "]"}]}], "]"}]}]}], 
          "]"}]}]}]}], "]"}], ",", "HoldAll"}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"21c98b3e-6f96-4488-888a-1ce7911e22a0"],

Cell["\<\
Usage: of gaOptionCheck requires definition of test function. Examples are \
provided below. Them the option is checked as \
OptionCheck[test][Module[{c},c=OptionValue[\[OpenCurlyDoubleQuote]c\
\[CloseCurlyDoubleQuote]];\
\>", "Text",ExpressionUUID->"3df23eac-ddb3-4df8-823a-18ff99fad35a"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"test", "[", 
     RowBox[{"\"\<a\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"IntegerQ", "[", "val", "]"}]}], ";", "\n", 
   RowBox[{
    RowBox[{"test", "[", 
     RowBox[{"\"\<b\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"True", "|", "False"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"test", "[", 
     RowBox[{"\"\<c\>\"", ",", "val_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Head", "[", "val", "]"}], "===", "Real"}]}], ";", " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"OptionCheck", "[", "test", "]"}], "[", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "c", "}"}], ",", 
      RowBox[{
       RowBox[{"c", "=", 
        RowBox[{"OptionValue", "[", "\"\<c\>\"", "]"}]}], ";"}]}], 
     "\[IndentingNewLine]"}]}]}], "*)"}]], "Input",
 Evaluatable->False,ExpressionUUID->"8607c24e-f106-45ee-8713-84a9b64c7cc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"ef62a6e8-3574-411c-b3a6-cded0bae00b2"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Forwards"
}], "Subsection",ExpressionUUID->"ca56193e-0ba3-4dce-b13c-b55cbbada6f2"],

Cell["\<\
This subsection does not have private context!
If some particular function needs to used before its actual definition is \
given we include its name in declarations of THIS Forwards section.  Ideal \
design should give empty forward declaration list.\
\>", "Text",ExpressionUUID->"9ce94b90-a686-4389-845f-903099a323aa"],

Cell[TextData[{
 "General multivectors will have head ",
 StyleBox["MV",
  FontWeight->"Bold"],
 ".  With numerical indices they will denote multivectors in general (non \
orthonormal) base as well. "
}], "Text",ExpressionUUID->"99ec54da-9587-461e-b217-9fc9885edc68"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", "MV", "]"}], ";"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"f198b81e-89e0-458b-a801-f0606d52083a"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Objects: orthonormal base notation, definition and internal \
representations"
}], "Section",ExpressionUUID->"d373e055-74a0-4e3d-a30c-88ebbd8d41d2"],

Cell[TextData[{
 StyleBox["Step 2 ",
  FontWeight->"Bold"],
 " define main objects and their properties (index, grade, notation, internal \
representations) and their manipulation commands (index rising/lowering, \
index sorting, index taking), etc."
}], "Text",ExpressionUUID->"d80b2b4e-d28d-44ca-98cc-040c244ce09a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering", ",", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}], 
     ",", "Cl", ",", "mvDownUp", ",", "gaDefineInput", ",", "gaNotation", ",",
      "gaDefineNotation", ",", "gaDefineOrthonormalBasis", ",", 
     "gaOrthonormalBasis", ",", "gaHomogeneusSubspaceBasis", ",", "gaIndexUp",
      ",", "gaIndexDown", ",", "gaNonCommutativeMonomialOrder", ",", 
     "gaCommutativeMonomialOrder", ",", "gaVectorSpaceDimension", ",", 
     "gaGetGrade", ",", "gaGetSignature", ",", "gaGetMV", ",", "gaGetIndex", 
     ",", "gaIndexSort", ",", "gaTestIndexOrdering", ",", "gaOrderedQ", ",", 
     "gaGradesOnly", ",", "gaNegativeSignatureIndexList", ",", "gaMakeAlias", 
     ",", "mvPoint", ",", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`differentialFormSymbolName", "]"}], 
     ",", "gaDefineAssociationRepresentationKeyOrder", ",", "gaVariables", 
     ",", "gaGetAlgebra", ",", "gaI"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"00dbf0b9-27f4-4d3d-8a2f-67d8c132381b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"046ba6a5-0d69-44bf-a93d-407098ab79f6"],

Cell["Usage messages", "Text",ExpressionUUID->"d0948ae5-2b71-4371-8bb1-6e52adbba70e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningAlgebra", "::", "usage"}], "=", 
   "\"\<gaRunningAlgebra returns an algebra Cl[p,q,r] for which input aliases \
take place at given moment. The p,q,r denotes the number of positive (p), \
negative (q) and zero (r) norm base vectors, respectively. For example, \
Cl[3,0,0] is geometric algebra for Euclidian space.\>\""}], " ", 
  ";"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"d08ad10e-f0be-4189-b482-588b253e92d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningOrdering", "::", "usage"}], "=", 
   "\"\<gaRunningOrdering returns basis ordering string of the algebra, which \
to be used for MV in the Compact representation. It is automatically set by \
gaDefineOrthonormalBasis[] and can take values provided by the command option \
gaNonCommutativeMonomialOrder.\>\""}], ";"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"9acbf8b2-cf52-4115-afce-ad1aa345db21"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}], 
     "]"}], "::", "usage"}], "=", 
   "\"\<Notation of predefined global orthonormal base multivector. \
Orthogonal base symbol name can be changed modifying global option \
gaOrthonormalBasisSymbolName.\>\""}], ";"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"f64c5108-a8b9-40db-819a-ba603303f8a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "::", "usage"}], "=", 
   "\"\<Cl[p_Integer?NonNegative,q_Integer?NonNegative,r_Integer?NonNegative] \
denotes Clifford algebra with signature of corresponding positive (p), \
negative (q) and zero (r) squared vectors.\>\""}], " ", ";"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"4f3e3998-2990-430a-9853-2f45a85fd723"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUp", "::", "usage"}], "=", 
   "\"\<mvDownUp[{s_Integer?Positive}, {same for upper symbols}] is a \
container for down (the first list) and up (the second list) indices. Both \
list should be strictly ordered (no same indices anywhere). When both type of \
indices are present we automatically sort indices of both types into common \
ordered index list. For convenience of input, however, separate ordered up \
and down index lists are used.\>\""}], ";"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"d99ece2b-d78f-4194-a6a5-3768a0d86550"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "usage"}], "=", 
   "\"\<gaDefineInput[Cl[p_Integer,q_Integer,r_Integer:0],opts___] sets input \
aliases for given algebra. You need to define it before manually entering \
orthonormal base elements, for example e[1], e[{},{1,2}], etc...\n\
gaDefineInput->True also is default option for gaDefineOrthonormalBasis[ ].\>\
\""}], ";"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"d58bce33-3cc2-48af-bddd-e6d7e5406aa0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNotation", "::", "usage"}], "=", 
   "\"\<Style options container. Values are set by \
gaDefineOrthonormalBasis[], which, in turn, uses private gaDefineNotation[]\>\
\""}], ";"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"76ebcf02-c23b-48d2-bc48-439f67e686f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "::", "usage"}], "=", 
   "\"\<gaDefineNotation[alg.,FontColor->Automatic|Color] sets color of basis \
elements which represents the algebra alg.\>\""}], ";"}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"1bb27943-b18c-48ef-8958-15354bf96edb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBasis", "::", "usage"}], "=", 
   "\"\<gaDefineOrthonormalBasis[Cl[p_Integer,q_Integer,r_Integer:0], \
opts___] defines orthonormal (plain space) base of geometric algebra of \
signature {p,q,r}, where p,q,r is denotes number of base vectors with \
positive square, negative and zero squares, respectivelly. Only direct (down \
indices) base is defined. Reciprocal base can be obtained with \
gaReciprocalBasis[base]. Base vectors are ordered with respect to \
gaNonCommutativeMonomialOrder option value. Base vector color is selected \
automatically, unless you predefine it manually with option FontColor->color. \
The gaDefineOrthonormalBasis[] command also set values for \
gaVectorSpaceDimension[algebra], gaOrthonormalBasis[algebra], \
mvGrade[baseElements]. gaDefineOrthonormalBasis[gaTensorProduct[algebras__]] \
defines orthonormal base for tensor product of algebras. Option \
gaGradesOnly->{{},{},...} can be used to construct only specific grade base \
elements {{0},{1},{2},... (used to speedup calculation of tensor product \
base). Default options: gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\
\", Quiet\[Rule]Automatic, gaGradesOnly\[Rule]All. gaDefineInput->True is \
default option, which force input alias definition after basis is \
defined.\>\""}], ";"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"19ef61f1-a9ea-4553-b9ca-c21746df2272"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorSpaceDimension", "::", "usage"}], "=", 
   "\"\<gaVectorSpaceDimension[algebra] returns number of vector space \
dimension of the algebra. The value is defined by gaDefineOrthonormalBasis[].\
\>\""}], ";"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"45b93db7-3f74-42b0-9eb1-2b294050391b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaI", "::", "usage"}], "=", 
   "\"\<gaI[algebra] returns the pseudoscalar of the algebra\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"f74e8daa-730b-4ad3-b780-3f9fed38d3d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNegativeSignatureIndexList", "::", "usage"}], "=", 
   "\"\<gaNegativeSignatureIndexList[algebra] returns list of negative \
signature indices. The value is defined by gaDefineOrthonormalBasis[]\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"d90cd20d-f281-477a-97e2-7d4c8b1375f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "::", "usage"}], "=", 
   "\"\<Container \
gaOrthonormalBasis[algebra_,ordering,\\\"PlainRepresentation\\\"] stores \
computed base vectors with down indices. The base is computed by \
gaDefineOrthonormalBasis[].\>\""}], ";"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"7bb06143-1a49-4c36-b4f6-a18cbd10dcb9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusSubspaceBasis", "::", "usage"}], "=", 
   "\"\<Container which contains homogeneus subspace base. It is only \
calculated after calling \
gaOrthonormalBasis[alg,ordering,All,GroupBy->\\\"Grade\\\"].\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"f4e33292-dfce-4ce8-8c67-fba4131bc8a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexUp", "::", "usage"}], "=", 
   "\"\<gaIndexUp[exprWithDownBaseElements] rewrites expr with down base \
elements replaced by up indices (signature is taken into account). For \
reciprocal base see gaReciprocalBasis[ ].\>\""}], ";"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"4263cef4-73b4-4158-aded-a9ee4a2a1f8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexDown", "::", "usage"}], "=", 
   "\"\<gaIndexDown[exprWithUpBaseElements] rewrites expr with up base \
elements replaced by down base elements (signature is taken into \
account).\>\""}], ";"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"0990dc1f-a39b-41de-bc74-8378983549f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaDefineOrthonormalBasis[] and ..., which allows to set \
base element monomial order. Possible orderings are \\\"Lex\\\", \\\"InvLex\\\
\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure orderings can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 \
possible orderings. Orders \\\"RevLex\\\", \\\"InvRevLex\\\" and the default \
order \\\"InvDeg[Lex]\\\" are not addmissible as Grobner base monomial order.\
\>\""}], ";"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"2dd93f57-82ea-412c-bf27-adc1246f5ffa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMakeAlias", "::", "usage"}], "=", "\"\<Option\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"76637aad-cf78-4bbe-96fa-01430e35fe5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaNonCommutativeMonomialOrder, which defines commutative \
coefficient (field) order for same noncommutative base elements. Uses \
MonomialOrders implemented by Mathematica, i.e. \\\"Lexicographic\\\", \
\\\"DegreeLexicographic\\\", \\\"DegreeReverseLexicographic\\\", \
\\\"NegativeLexicographic\\\", \\\"NegativeDegreeLexicographic\\\", \
\\\"NegativeDegreeReverseLexicographic\\\" and \n\\\"Reverse[Lexicographic]\\\
\", \\\"Reverse[DegreeLexicographic]\\\", \
\\\"Reverse[DegreeReverseLexicographic]\\\", \
\\\"Reverse[NegativeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeReverseLexicographic]\\\".\>\""}], ";"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"444e41b8-8a9c-47fb-8999-ee70ab13bc93"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetIndex", "::", "usage"}], "=", 
   "\"\<gaGetIndex[multivector] returns list of indices of \
multivector.\>\""}], ";"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"aea22571-b444-4683-9209-781394b7b30d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "::", "usage"}], "=", 
   "\"\<gaGetGrade[expr] returns grade of multivector.\>\""}], ";"}]], "Input",\

 CellLabel->"In[72]:=",ExpressionUUID->"c6492878-05ab-4836-9178-3d3b8c83534f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "usage"}], "=", 
   "\"\<gaGetAlgebra[expr] returns names of algebras encountered in expr. By \
default option Method->\\\"OneClNoQuaternions\\\" ignores quaternion \
coefficients. Other possible values are \\\"OneClAndQuaternions\\\", which \
append the string \\\"Quaternion\\\" if present in the expression and \\\"All\
\\\", which return all found different entries cl[p,q] in the \
expression.\>\""}], ";"}]], "Input",ExpressionUUID->"144790d8-c40a-412a-a1e8-\
f0c1369d8173"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVariables", "::", "usage"}], "=", 
   "\"\<gaVariables[expr] returns names of symbolic variables inside \
expr.\>\""}], ";"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"1d253ce2-0b3f-4399-b487-c24478f63206"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetSignature", "::", "usage"}], "=", 
   "\"\<gaGetSignature[expr] returns signature of multivector.\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"cd5ec600-4fe6-4392-94f7-1a1d8229041b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "::", "usage"}], "=", 
   "\"\<gaGetMV[expr, {n__Integer?Positive}] returns multivector of grades \
{n}. gaGetMV[expr,_mvDownUp] returns (to do) multivectors with given pattern \
of indices,... other criteria can be implemented as well.\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"97c8bcce-6b8f-48ed-b8ee-79e4fea19e0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "usage"}], "=", 
   "\"\<gaOrderedQ[ordering_String][#1,#2] gives True if pair of base \
elements is ordered according to one of defined orderings \n \\\"Lex\\\", \
\\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\", which can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers.\>\""}], ";"}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"1ecb4567-8071-4285-93b8-cf2e01c34dd4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "::", "usage"}], "=", 
   "\"\<gaIndexSort[ind:{{__Integer?Positive}..}, order_String] sorts ind \
with respect to gaNonCommutativeMonomialOrder. Sorts monomials acording to \
given order.... other possibilities.\>\""}], ";"}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"72eab6d7-a2ee-4ed2-9274-9a2db3d6c9ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "usage"}], "=", 
   "\"\<gaTestIndexOrdering[expr] tests if indices inside \
mvDownUp[{__Integer},{__interger}] are sorted. This test is set to $Pre by \
default and can be removed by setting package global option \
gaAlwaysTestInputIndexOrdering\[Rule]False.\>\""}], ";"}]], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"b231e4ab-2317-4e77-bae3-d0a56f812e37"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineAssociationRepresentationKeyOrder", "::", "usage"}], "=", 
   "\"\<gaDefineAssociationRepresentationKeyOrder[al_,order:(\\\"Lex\\\"|\\\"\
InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\
\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[\
InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] defines \
sorting order for algebra if it was not yet defined. It is used by gaSort[ \
]\>\""}], ";"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"d5a35528-e299-46de-b45a-95f3881b11c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvPoint", "::", "usage"}], "=", 
   "\"\<Denotes manifold point of manifold...\>\""}], ";"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"c64278f2-0725-4ed8-9173-115917a6f24e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"9b2388e2-395c-42f6-9c10-0fd1072d4e1e"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notation and help functions"
}], "Subsection",ExpressionUUID->"575a4778-1d41-4eb0-a884-bb2a8a6d44a6"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"9f5198d3-924b-4335-87c2-d9497bfbb414"],

Cell["\<\
Insert some output after evaluated cell (taken form \
http://mathematica.stackexchange.com/questions/15134/a-debug-utility-to-print-\
or-extract-intermediate-data-from-a-program)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"46576a84-e290-4998-b543-ca390eef2ea8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"insertBelowEvaluationCell", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SelectionMove", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "After", ",", 
       "EvaluationCell"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"BoxData", "@", 
          RowBox[{"ToBoxes", "[", "expr", "]"}]}], ",", "\"\<Print\>\""}], 
        "]"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"d150b294-1328-4def-a4e5-e1bcaf5ffe9d"],

Cell["One message per session", "Text",ExpressionUUID->"982d5351-e9bb-44e4-a815-d0776200de1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alreadyPrintedList", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"aa960293-0ff2-4507-a694-1a26181880b3"],

Cell[TextData[{
 "Alias modification in order to match ",
 StyleBox["gaRunningAlgebra ",
  FontWeight->"Bold"],
 "color. "
}], "Text",ExpressionUUID->"50699e74-a9e3-4262-95e3-a427a6b04eec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"updateInputAlias", ",", "HoldRest"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"updateInputAlias", "[", 
    RowBox[{"aliasName_String", ",", "aliasReplacementRul__Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"alposition", ",", 
       RowBox[{"inpOpt", "=", 
        RowBox[{"Options", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", "InputAliases"}], 
         "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"inpOpt", ",", "aliasName"}], "]"}]}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
         RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{"inpOpt", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"alposition", "=", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"inpOpt", ",", 
                 RowBox[{"aliasName", "->", "_"}]}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Extract", "[", 
               RowBox[{"inpOpt", ",", "alposition"}], "]"}], "/.", 
              RowBox[{"{", "aliasReplacementRul", "}"}]}], ")"}]}]}], "]"}]}],
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"24c4d90d-45ad-4fb0-82ec-75761d9b8c4e"],

Cell["Algebra elements coloring ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"97fbaf5d-6474-46f4-bf40-03598db3439b"],

Cell[TextData[{
 "Automated color picking for basis elements of Clifford algebras. Black and \
white colors are forbidden. Next, we predefine three main RGB colors. After \
they are used and while color number is less than ",
 StyleBox["smartColors",
  FontWeight->"Bold"],
 ", we pick next color by maximizing minimal distance between existing and \
next color. When the limit ",
 StyleBox["smartColors",
  FontWeight->"Bold"],
 " is reached we pick colors randomly. "
}], "Text",ExpressionUUID->"bfb4a716-d01c-46b6-a382-a3fdbb4d9f8f"],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions is less than 10.2 picking of color is random."
}], "Text",ExpressionUUID->"21937f38-b479-494e-947c-952383679990"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pickNextColor", "::", "maxColorLimit"}], "=", 
   "\"\<Smart color picking limit `1` was reached. Start picking colors \
randomly.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "pickNextColor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alreadyUsedColors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "1.", ",", "1."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "0."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"predefinedColorList", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "0.", ",", "0."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "1.", ",", "0."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "1."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"smartColors", "=", "15"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"colorDistanceFunction", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x_", "?", "NumericQ"}], ",", 
      RowBox[{"y_", "?", "NumericQ"}], ",", 
      RowBox[{"z_", "?", "NumericQ"}]}], "}"}], "]"}], ":=", 
   RowBox[{"Min", "[", 
    RowBox[{"ColorDistance", "[", 
     RowBox[{"alreadyUsedColors", ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pickNextRandomColor", "[", "]"}], ":=", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}], "/.", 
     RowBox[{"Last", "[", 
      RowBox[{"Quiet", "[", 
       RowBox[{"NMaximize", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"colorDistanceFunction", "[", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}], ",", 
           RowBox[{
            RowBox[{"1", "\[GreaterEqual]", "x", "\[GreaterEqual]", "0"}], "&&", 
            RowBox[{"1", "\[GreaterEqual]", "y", "\[GreaterEqual]", "0"}], "&&", 
            RowBox[{"1", "\[GreaterEqual]", "z", "\[GreaterEqual]", "0"}]}]}],
           "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
         RowBox[{"MaxIterations", "\[Rule]", "5"}], ",", 
         RowBox[{"PrecisionGoal", "\[Rule]", "3"}]}], "]"}], "]"}], "]"}]}], 
    "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "\[GreaterEqual]", "10.2"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"len", "=", 
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}], ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", "newColor"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"predefinedColorList", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"predefinedColorList", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{"predefinedColorList", ",", "alreadyUsedColors"}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "predefinedColorList", "]"}], ">", "0"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "use", " ", "colors", " ", "from", " ", "predefined", " ", 
            "list"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", 
             RowBox[{"newColor", "=", 
              RowBox[{"predefinedColorList", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";", "newColor"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "then", " ", "until", " ", "smart", " ", "color", " ", "limit", 
            " ", "not", " ", "reached", " ", "try", " ", "to", " ", "pick", 
            " ", "color", " ", "in", " ", "an", " ", "optimal", " ", "way"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"len", "<", "smartColors"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"alreadyUsedColors", ",", 
               RowBox[{"newColor", "=", 
                RowBox[{"pickNextRandomColor", "[", "]"}]}]}], "]"}], ";", 
             "newColor"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Not", "[", "quiet", "]"}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"pickNextColor", "::", "maxColorLimit"}], ",", 
                 "smartColors"}], "]"}]}], "]"}], ";", 
             RowBox[{"RandomColor", "[", "]"}]}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", "___", "]"}], ":=", 
     RowBox[{"RGBColor", "[", 
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"60455b28-a2ec-4c1e-a7d8-30622a7fd8d4"],

Cell["Algebra detection function", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"50c373e7-fc5a-49fa-a936-c06fd2cafff0"],

Cell["\<\
Often we need to decide from given expression which algebra we are dealing \
with. Possible values for Method are \
\[OpenCurlyDoubleQuote]OneClNoQuaternions\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]OneClAndQuaternions\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]All\[CloseCurlyDoubleQuote], \
\>", "Text",ExpressionUUID->"c4830ec1-fd76-4d0d-9834-e97bfe72d90b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGetAlgebra", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], "=", 
   "\"\<The expression `1` contains multiple algebras `2`. Only one Clifford \
algebra was expected.\>\""}], ";", 
  RowBox[{
   RowBox[{"gaGetAlgebra", "::", "optionvalue"}], "=", 
   "\"\<Bad Method value `1`. possible values are \\\"OneClNoQuaternions\\\", \
\\\"OneClandQuaternions\\\", \\\"All\\\" \>\""}], ";"}]}], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"0de20e67-fe79-4994-b468-cf99d0d4982a"],

Cell["\<\
If there are no quaternionic coefficients, the simply take firs of all Cl \
heads.\
\>", "Text",ExpressionUUID->"2393b299-a3ec-4801-9c5f-891709a4b530"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetAlgebra", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"findAll", "=", 
         RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", 
        "foundAlgebras"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "findAll", ",", "\[IndentingNewLine]", "\"\<OneClNoQuaternions\>\"", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"foundAlgebras", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"FirstCase", "[", 
            RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}], 
           ",", " ", "did", ",", 
           RowBox[{
           "t", " ", "check", " ", "for", " ", "presennce", " ", "of", " ", 
            "other", " ", "algebras"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "foundAlgebras", "]"}], "===", "1"}], ",", 
           
           RowBox[{"foundAlgebras", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", "expr",
               ",", "foundAlgebras"}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<OneClAndQuaternions\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"foundAlgebras", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "foundAlgebras", "]"}], "===", "1"}], ",", 
           "foundAlgebras", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", "expr",
               ",", "foundAlgebras"}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<All\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaGetAlgebra", "::", "optionvalue"}], ",", "findAll"}], 
          "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}], ")"}], "&&", 
     RowBox[{"(", 
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "Cl", ",", 
         RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}], ")"}]}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"c51d0f53-2390-4054-857d-d4dd787b7f35"],

Cell["\<\
If there no head Cl or there are also \[OpenCurlyDoubleQuote]Quaternion\
\[CloseCurlyDoubleQuote] , then depending on the option output requires  \
additional work. \
\>", "Text",ExpressionUUID->"2d76b753-c54e-444b-8a93-8d28a00c6316"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetAlgebra", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], ",", 
         "gaRunningAlgebra", ",", 
         RowBox[{"{", "}"}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "expr", "}"}], ",", "bs", ",", 
         RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetAlgebra", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"findAll", "=", 
            RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", 
           RowBox[{"allCl", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
           ",", "foundAlgebras"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "findAll", ",", "\[IndentingNewLine]", "\"\<OneClNoQuaternions\>\"",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"foundAlgebras", "=", 
             RowBox[{"DeleteDuplicates", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"expr", ",", "_bs", ",", "Infinity"}], "]"}], ",", 
                  
                  RowBox[{"bs", "[", 
                   RowBox[{"__", ",", "\"\<Quaternion\>\"", ",", "___"}], 
                   "]"}]}], "]"}], ",", "_Cl", ",", "Infinity"}], "]"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "foundAlgebras", "]"}], "===", "1"}], 
              ",", 
              RowBox[{"foundAlgebras", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", 
                 "expr", ",", "foundAlgebras"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<OneClAndQuaternions\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"foundAlgebras", "=", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"DeleteDuplicates", "[", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"expr", ",", "_bs", ",", "Infinity"}], "]"}], ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"__", ",", "\"\<Quaternion\>\"", ",", "___"}], 
                    "]"}]}], "]"}], ",", "_Cl", ",", "Infinity"}], "]"}], 
                 "]"}], ",", "\"\<Quaternion\>\""}], "}"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "foundAlgebras", "]"}], "===", "2"}], 
              ",", "foundAlgebras", ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaGetAlgebra", "::", "multipleAlgebras"}], ",", 
                 "expr", ",", "foundAlgebras"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<All\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"DeleteDuplicates", "[", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"expr", ",", "_bs", ",", "Infinity"}], "]"}], ",", 
                   RowBox[{"bs", "[", 
                    RowBox[{"__", ",", "\"\<Quaternion\>\"", ",", "___"}], 
                    "]"}]}], "]"}], ",", "_Cl", ",", "Infinity"}], "]"}], 
               "]"}], ",", "\"\<Quaternion\>\""}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaGetAlgebra", "::", "optionvalue"}], ",", "findAll"}],
              "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}], ")"}]}]}]}]}],
    "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->"In[97]:=",ExpressionUUID->"cf67761d-740a-4230-b849-812662090eee"],

Cell["\<\
The below function is not needed, perhaps. To remove? (for the moment used in \
a number of functions, to remove on cleanup)\
\>", "Text",ExpressionUUID->"f32b48a1-99c7-4e8a-ab7c-343f54c9f0f4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"whichAlgebra", "::", "multipleAlgebras"}], "=", 
   "\"\<`1` Expression `2` contains MV of different algebras.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "whichAlgebra", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"Abort", "\[Rule]", "True"}], ",", 
     RowBox[{"Message", "\[Rule]", "\"\<\>\""}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"edb73b66-1b1c-4813-bed2-a7c7a748410d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"whichAlgebra", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], ",", 
       
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"whichAlgebra", ",", "Quiet"}], "]"}]}]}], ",", 
       RowBox[{"theAction", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Abort", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"whichAlgebra", ",", "Abort"}], "]"}]}]}], ",", 
       RowBox[{"inWhichCommand", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Message", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"whichAlgebra", ",", "Message"}], "]"}]}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "theAlgebra", "]"}], "===", "1"}], ",", 
       RowBox[{"theAlgebra", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"theAlgebra", "=!=", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", "quiet", "]"}], ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"whichAlgebra", "::", "multipleAlgebras"}], ",", 
              "inWhichCommand", ",", "expr"}], "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"theAction", ",", 
          RowBox[{"Abort", "[", "]"}], ",", "theAlgebra"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"72421505-b0a1-4325-9ff7-ff16454160f0"],

Cell["Algebra detection function", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"337ffd37-72f2-48dd-98f9-3038dac98550"],

Cell["\<\
Function to extract all symbolic variables of the expression (excludes basis \
elements and MV)\
\>", "Text",ExpressionUUID->"848cdddc-1819-4413-8827-9bd8a15aa6b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaVariables", "[", "expr_", "]"}], ":=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Variables", "[", "expr", "]"}], ",", "_bs"}], "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"fd8be902-4eeb-447b-997a-a40e584f8d94"],

Cell["\<\
Index ordering detection in the input and the result behaviour\
\>", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"4de7e83f-1926-44aa-9587-82222c3bcda5"],

Cell[TextData[{
 "If  global option ",
 StyleBox["gaTestIndexOrdering",
  FontWeight->"Bold"],
 " was set to True, then try to detect not strictly ordered index sets. \
Repeated indices inside ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " are also forbidden (the repeated index has the meaning of signature and \
can be replaced by basis element without repeating indices with proper sign, \
for example e[1,2,3,2]-> -e[1,3] for Cl(p,q) with p>=2) . The detection of \
such indices will require definition of down values for basis element symbols \
and this is what we want to avoid due to possible slowdown. Input of indices \
with larger values that number of base vectors are allowed, thought they are \
meaningless in computations."
}], "Text",ExpressionUUID->"cf55662e-7e87-45ba-b87e-85232764dd15"],

Cell[TextData[{
 "Instead of check with ",
 StyleBox["$Post",
  FontWeight->"Bold"],
 " one could implement the functionality indirectly as a ",
 StyleBox["MakeBoxes[]",
  FontWeight->"Bold"],
 " condition (for example, we could output/format  basis elements in some \
strange form when the ordering condition is not satisfied.)  That approach is \
implemented for differential forms (will see how it works)."
}], "Text",ExpressionUUID->"98b8bce6-162c-408c-a832-517713d52368"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], "=", 
   "\"\<Error. Not properly ordered index set `1` in expression input/output \
was detected. Only ordered sets can appear in calculations.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], "=", 
   "\"\<Error. Index set `1` contains repeated indices. All indices in base \
element should be different.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"66b24610-a2fc-4ad2-9487-c48051bd23f9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{"gaTestIndexOrdering", ",", " ", "HoldAll"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"Unevaluated", "[", "expr", "]"}], ",", "_mvDownUp"}], "]"}], 
     ",", "expr", ",", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"indexPairs", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Unevaluated", "[", "expr", "]"}], ",", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "___Integer", "}"}], ",", 
             RowBox[{"{", "___Integer", "}"}]}], "]"}], ",", "Infinity"}], 
          "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"And", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
               RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"indexCases", "=", 
             RowBox[{"indexPairs", "/.", 
              RowBox[{"mvDownUp", "\[Rule]", "Sequence"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"And", "@@", 
               RowBox[{"(", 
                RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}], " ", "]"}],
              ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], ",", 
                RowBox[{"Pick", "[", 
                 RowBox[{"indexCases", ",", 
                  RowBox[{"Not", "/@", 
                   RowBox[{"(", 
                    RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}]}], 
                 "]"}]}], "]"}], ";"}], ",", "expr"}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], ",", 
            RowBox[{"Pick", "[", 
             RowBox[{"indexPairs", ",", 
              RowBox[{"Not", "/@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
                    RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}]}], 
             "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"dd0fd207-8b82-46cc-b663-036cb8769c5b"],

Cell["\<\
If  $Post=gaTestIndexOrdering is also defined, then Pick[atom,none] instead \
of Sequence will return $Post function. Undesirable.\
\>", "Text",ExpressionUUID->"9aa7f018-416a-4d25-a81f-6c737aeb1ccb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "/.", "$gaPackageOptions"}], 
     ")"}], ",", 
    RowBox[{
     RowBox[{"$Pre", "=", "gaTestIndexOrdering"}], ";"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"2bc1a2f2-bce4-44e7-a36d-a47ec8f70844"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Algebra and Index notations"
}], "Subsubsection",ExpressionUUID->"e65b5705-e5f5-4a7f-af30-64b28ac054fc"],

Cell["Algebra notation", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"aafc3bc8-bc13-475d-89a1-3cbbaa6d0222"],

Cell["\<\
Algebras always use three signatures, positive (p), negative (q) and zero \
(r).  Zero signature is not implemented.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"ee6454dc-99ee-428d-951f-1b08348379c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_"}], "]"}], "=", 
   RowBox[{"Cl", "[", 
    RowBox[{"p", ",", "q", ",", "0"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[107]:=",
 CellID->1126827235,ExpressionUUID->"09eb6667-043c-4487-a35c-1cfac1fb086e"],

Cell["Nice output for Clifford algebra identifier", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"89d084f4-4ec1-48de-9f1b-3d08c7af00e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alsty", "=", 
        RowBox[{"gaNotation", "[", 
         RowBox[{"Cl", "[", 
          RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"r", "===", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", "\"\<0\>\""}], "}"}], ",", 
          "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{
               RowBox[{"StyleBox", "[", 
                RowBox[{"\"\<Cl\>\"", ",", "alsty"}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"#1", ",", "\"\<,\>\"", ",", "#2"}], "}"}], "]"}]}], 
              "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"r", ",", "sf"}], "]"}]}], "}"}], ",", "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<Cl\>\"", ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                  "#3"}], "}"}], "]"}]}], "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaNotation", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "=!=", 
     "gaNotation"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"f0674546-8c57-4c57-8ef2-5f23bb0f9f76"],

Cell["Index notation", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"2fb28224-3a32-4c41-87e0-0934940fc98d"],

Cell[TextData[{
 "Nice representation of indices. Indices are independent (abstract) \
construction (similar to the concept of Mathematica iterator), which can \
enter any head.   ",
 StyleBox["System`",
  FontWeight->"Bold"],
 " context have protected ",
 StyleBox["Up",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Down",
  FontWeight->"Bold"],
 " symbols, therefore we introduce our own ",
 StyleBox[" mvDownUp[{down},{up}]",
  FontWeight->"Bold"],
 " instead of separate down and up indices. Single head will simplify pattern \
matcher. By default for base multivectors we use down indices, i.e. ",
 StyleBox["mvDownUp[{down},{}] ",
  FontWeight->"Bold"],
 " and dual base  is represented by upper indices  i.e.  ",
 StyleBox["mvDownUp[{},{up}]",
  FontWeight->"Bold"],
 ".  "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"cdaf6078-668a-40e6-83f2-2e6f9c259342"],

Cell["\<\
In order to allow editing we explicitly enumerated slots. Unfortunately, this \
imply, that at the moment it is impossible to change number of indices, so \
editing make sense only if number of up and down indices remain the same\
\>", "Text",ExpressionUUID->"08d2ba17-10dc-439e-9f4c-7b08a57d86b7"],

Cell[TextData[{
 StyleBox["mvDownUp[indown_List,inup_List]",
  FontWeight->"Bold"],
 " keeps down indices in the first list and up indices in the second. Both \
index list should be strictly ordered (no two same indices anywhere) for \
numeric indices. Note, however, that in calculations, when both type of \
indices are present we automatically sort indices of both types into common \
ordered index list. For convenience of  input, however  separate ordered up \
and down index lists are used (otherwise we should indicate type of index for \
each index, which would result into long input sequence). "
}], "Text",ExpressionUUID->"904f9925-3fac-4e0b-8d39-48b210a2ce7d"],

Cell[CellGroupData[{

Cell["\<\
The complicated MakeBoxes can be improved by using StackExchange example from \
(https://mathematica.stackexchange.com/questions/187654/how-to-build-a-\
templatebox-with-dynamic-length-gridbox)  by Carl Woll. \
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"4a6e11a8-20c4-43b3-980f-903d53923693"],

Cell["\<\
His comment  about TemplateSlotSequence is very interesting:
\"I think since the pure functions used in DisplayFunction and \
InterpretationFunction do not evaluate in the Wolfram Language kernel, \
TemplateSlotSequence was introduced as a way to enhance the creation of box \
structures. When the front end constructs the box expression using the \
DisplayFunction/InterpretationFunction, TemplateSlotSequence objects are \
interpreted as:

TemplateSlotSequence[1] -> Sequence[#1, #2, ...]
TemplateSlotSequence[2, \",\"] -> Sequence[#2, \",\", #3, \",\", ...]
TemplateSlotSequence[{3, 5}, \" \"] -> Sequence[#3, \" \", #4, \" \", #5]
\".  He also provides rather complicated example: 
MakeBoxes[ActuarialSurvivalProbability[x_, t_], StandardForm] := TemplateBox[
    Prepend[MakeBoxes[t]] @ BoxForm`ListMakeBoxes[x, StandardForm],
    \"ActuarialSurvivalProbability\",
    InterpretationFunction -> (
        RowBox[{
            \"ActuarialSurvivalProbability\", 
            \"[\", 
            RowBox[{
                RowBox[{\"{\", RowBox[{TemplateSlotSequence[2, \",\"]}], \
\"}\"}],
                \",\",
                #1
            }],
            \"]\"
        }]&
    ),
    DisplayFunction -> (
        RowBox[{
            SubscriptBox[\"\", #1],
            SubscriptBox[
                \"p\",
                RowBox[{
                    \"\",
                    GridBox[
                        {{TemplateSlotSequence[2]}},
                        GridBoxDividers->{\"RowsIndexed\"->{1->Thickness[1]}}
                    ]
                }]
            ]
        }]&
    ),
    Tooltip->\"probability that at least one of live(s) aged \
\"<>ToString[x]<>
        \" survives for \"<>ToString[t]<>\" year(s)\"
]

\
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"b941d9ce-16da-4bbb-832f-1590bb457d0e"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown___Integer", "}"}], ",", 
       RowBox[{"{", "inup___Integer", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"argsa", "=", 
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Rest", "/@", 
           RowBox[{"Sort", "[", "\[IndentingNewLine]", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"indown", ",", "inup"}], "}"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", 
                    RowBox[{"-", "1"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"indown", ",", "inup"}], "}"}], "]"}]}], "}"}]}], 
                  "]"}]}], "]"}]}], "}"}], "]"}], "\[IndentingNewLine]", 
            "]"}]}], "]"}], ",", "\"\<,\>\""}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", "argsa", "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"indown", ",", "inup"}], "}"}], "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}],
            "&"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "indown", "}"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "inup", "}"}]}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "indown", "}"}], ",", 
             RowBox[{"{", "inup", "}"}]}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"26b68dd9-b24d-4adc-a1c6-32b1ebcfcba8"],

Cell["\<\
Add index notation for the gaCompactRepresentation[ ] .  Compact \
representation is possible only for all down or all up indices (no mixed \
indices!)\
\>", "Text",ExpressionUUID->"9aca7a27-9cca-431d-9195-df4d5219f35d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"indown_Integer", ",", "inup_Integer"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"argsa", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"indown", ",", "inup"}], "}"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"{", 
          RowBox[{"_", ",", "0"}], "}"}], ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{"indown", ",", 
           RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "_"}], "}"}], ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{"inup", ",", 
           RowBox[{"BoxBaselineShift", "\[Rule]", 
            RowBox[{"-", "1"}]}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", 
              RowBox[{"{", "argsa", "}"}], "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", "##", "}"}], ",", "sf"}], "]"}]}], "}"}], "]"}],
             "]"}], "&"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"indown", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"inup", ",", "sf"}], "]"}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{"indown", ",", "inup"}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"indown", "===", "0"}], "||", 
     RowBox[{"inup", "===", "0"}]}], ")"}]}]}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"1bf757b5-7416-42f6-afa4-f22ede33f7a1"],

Cell["\<\
When expressions are truncated (due to Mathematica length limitation) we just \
form nice boxes\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4c6bc7ca-c397-4508-81c5-393c84211952"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown_Skeleton", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"SubscriptBox", "[", 
    RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"indown", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "inup_Skeleton", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"SuperscriptBox", "[", 
    RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"inup", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown_Skeleton", "}"}], ",", 
       RowBox[{"{", "inup_Skeleton", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"SubscriptBox", "[", 
       RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"indown", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}], ",", 
      RowBox[{"SuperscriptBox", "[", 
       RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"inup", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], "}"}],
     "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"0260a9ad-0110-4768-bd70-055f3af9cb12"],

Cell["Point notation for objects on manifold", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"c5204a6a-0225-4cc8-91b5-74bddca7f436"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"mvPoint", "[", "x_", "]"}], ",", " ", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"TemplateBox", "[", "\n", "    ", 
   RowBox[{
    RowBox[{"BoxForm`ListMakeBoxes", "[", 
     RowBox[{"x", ",", " ", "sf"}], "]"}], ",", "\n", "    ", 
    "\"\<mvPoint\>\"", ",", "\n", "    ", 
    RowBox[{"InterpretationFunction", "->", 
     RowBox[{"(", "\n", "        ", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", "\n", "            ", 
         RowBox[{
         "\"\<mvPoint\>\"", ",", " ", "\n", "            ", "\"\<[\>\"", ",", 
          "\n", "                ", 
          RowBox[{"RowBox", "[", 
           RowBox[{"{", 
            RowBox[{"\"\<{\>\"", ",", " ", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{"TemplateSlotSequence", "[", 
                RowBox[{"1", ",", " ", "\"\<,\>\""}], "]"}], "}"}], "]"}], 
             ",", " ", "\"\<}\>\""}], "}"}], "]"}], ",", "        ", "\n", 
          "            ", "\"\<]\>\""}], "\n", "        ", "}"}], "]"}], 
       "&"}], ")"}]}], ",", "\n", "    ", 
    RowBox[{"DisplayFunction", "->", 
     RowBox[{"(", "\n", "                    ", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"TemplateSlotSequence", "[", 
          RowBox[{"1", ",", "\"\<,\>\""}], "]"}], "}"}], "]"}], "\n", 
       "                   ", "&"}], ")"}]}], ",", "\n", "    ", 
    RowBox[{"Tooltip", "->", 
     RowBox[{"\"\<Defined at point\>\"", "<>", 
      RowBox[{"ToString", "[", "x", "]"}]}]}]}], "\n", "]"}]}]], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"1f53ee80-41f3-4df8-a4e8-bab5fcaf9829"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notation for orthogonal basis symbols and forms"
}], "Subsubsection",ExpressionUUID->"3c75efe5-cff0-400d-855c-5e1ea4f8d304"],

Cell[TextData[{
 "Orthogonal  base multivectors  are represented by letter  \[DoubleStruckE] \
(can be changed by the package global option ",
 StyleBox["gaOrthonormalBasisSymbolName",
  FontWeight->"Bold"],
 ") with subscripts or superscripts (or mixed). It is assumed that up and \
down indices commute (can be permuted). This is true at least in orthonormal \
frame.  Notation will not work if the algebra is not defined with ",
 StyleBox["gaDefineOrthonormalBasis[ ]",
  FontWeight->"Bold"],
 " or ",
 StyleBox["gaDefineInput[]",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"8f0b1dba-e885-4c6f-adc0-24d3d599fda7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                  "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], 
           "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[115]:=",ExpressionUUID->"c2cf8625-8c29-4a4b-b689-9ec5714f4ee1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_", ",", "___", ",", "po_mvPoint"}], 
        "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"poEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"po", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                    "}"}], "]"}], ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<[\>\"", ",", "#3", ",", "\"\<]\>\""}], "}"}],
                     "]"}]}], "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
                "}"}], "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx", ",", "poEx"}], "}"}], ",", 
            "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[116]:=",ExpressionUUID->"7a1342dd-4a69-4a8d-8430-b38e8494db85"],

Cell["Special bold notation for quaternion", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"06c8788e-fede-42bc-be23-fb77d06d8300"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_", ",", "mark_String", ",", "___"}], 
        "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sty", "=", 
          RowBox[{"(", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"inEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"raEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"StyleBox", "[", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                  "#1"}], "}"}], "]"}], ",", 
               RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
               RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
             "]"}]}], ",", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
               "}"}], "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
           "baseSymbolN", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[117]:=",ExpressionUUID->"8cd5315f-5b76-49b7-b876-281431f52969"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"bs", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_", ",", "mark_String", ",", "___"}], 
        "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sty", "=", 
          RowBox[{"(", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"inEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"raEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"StyleBox", "[", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                  "#1"}], "}"}], "]"}], ",", 
               RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
               RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
             "]"}]}], ",", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
               "}"}], "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
           "baseSymbolN", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"f30cfa08-50e7-4627-8c16-29b3c12d3bfa"],

Cell["Notation for MV in Association form", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"f299dd7c-0e27-4ac0-b1ef-28e7c1325a88"],

Cell[TextData[{
 "Same notations, when multivector is presented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s  (much more optimized)  Association form."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"982f37f6-d845-4f00-8abb-0f9df2a05ae1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"in_Association", ",", "ra_"}], "]"}], ",", 
          RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"sty", "=", 
              RowBox[{"(", 
               RowBox[{"FontColor", "->", 
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
             ",", 
             RowBox[{"inEx", "=", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
             RowBox[{"raEx", "=", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pfd", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{"StyleBox", "[", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", 
                    "\"\<[\>\"", ",", "#1", ",", "\"\<]\>\""}], "}"}], "]"}], 
                   ",", 
                   RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                   RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], 
                  "]"}], "]"}]}], ",", 
               RowBox[{"pfi", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", 
                    "\"\<,\>\"", ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], 
                 "]"}]}]}], "}"}], ",", 
             RowBox[{"TemplateBox", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
               RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
               RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
               RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
               RowBox[{"Tooltip", "\[Rule]", 
                RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
          "]"}], "/;", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
          "gaNotation"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", "\n", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"baseSymbolN", "=", "orthonormalBasisSymbolName"}], ",", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"in_Association", ",", "ra_", ",", "mark_String"}], "]"}], 
          ",", 
          RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sty", "=", 
             RowBox[{"(", 
              RowBox[{"FontColor", "\[Rule]", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"inEx", "=", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
            RowBox[{"raEx", "=", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"pfd", "=", 
               RowBox[{"Function", "[", 
                RowBox[{"StyleBox", "[", 
                 RowBox[{
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                    "\"\<[\>\"", ",", "#1", ",", "\"\<]\>\""}], "}"}], "]"}], 
                  ",", 
                  RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                  RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], 
                 "]"}], "]"}]}], ",", 
              RowBox[{"pfi", "=", 
               RowBox[{"Function", "[", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", 
                   "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", 
                   "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"TemplateBox", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
              "baseSymbolN", ",", 
              RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
              RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
              RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
              RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
         "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"3733995d-f379-477d-8bc0-b765819a346d"],

Cell["Differential form element make boxes. ", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"1d2d3748-442a-4c53-9205-7c3544281c90"],

Cell["\<\
Note, that if vector space dimension do not match number of the arguments of \
the form, formatting is not applied. This is intentional (at least at this \
development stage), since can help to catch some errors. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d0859635-64e5-4934-9830-6e998c588649"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"dfsN", "=", "differentialFormSymbolName"}], ",", 
      RowBox[{"dfs", "=", 
       RowBox[{"Symbol", "[", "differentialFormSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"dfs", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_", ",", "___", ",", "po_mvPoint"}], 
        "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"poEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"po", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"dfsN", ",", "sty"}], "]"}], ",", "#1"}], "}"}], 
                    "]"}], ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<[\>\"", ",", "#3", ",", "\"\<]\>\""}], "}"}],
                     "]"}]}], "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "dfsN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", ",", 
                 "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], "}"}],
                "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx", ",", "poEx"}], "}"}], ",", "dfsN", 
            ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
          "gaNotation"}], ")"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"po", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", 
          RowBox[{"Plus", "@@", "ra"}]}], ")"}]}], ")"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"47258637-fe95-4ad7-a385-a44c95ed735f"],

Cell["Explicit rules for algebra scalar basis element", "Text",
 FontColor->RGBColor[
  1, 0, 1],ExpressionUUID->"9d2bbeca-200f-40fa-8ef2-a31bb63a2bcb"],

Cell[TextData[{
 "For speed reasons we do not want rules for basis vectors of the form  ",
 StyleBox["e[_[],_]:=xxx",
  FontWeight->"Bold"],
 ";  Unfortunately it is very useful to make exception for unit element. \
Setting it to 1 will solve many ordering problems, however will result in \
complications when generating tensor products. Therefore in these functions \
we need to ",
 StyleBox["Block[ ] bs",
  FontWeight->"Bold"],
 ". For quaternions we always want this replacement to happen"
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"952e2f0c-5092-44cd-b803-146352e13bcd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"bs", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_", ",", "\"\<Quaternion\>\"", 
         ",", "___"}], "]"}], "]"}], "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"bs", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "=", "1"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"18803abb-da1d-417e-9db0-45e5560c28fc"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Setting input (",
 StyleBox["$PreRead!!!",
  FontColor->RGBColor[1, 0, 0]],
 ") notation for algebra and its elements"
}], "Subsubsection",ExpressionUUID->"d4882fb5-f621-4b24-8f62-ead97d7ff155"],

Cell["\<\
This subsection is still very far from ideal shape. The main problem is \
non-compatibility and possible interaction of other parts of Mathematica \
system. \
\>", "Text",ExpressionUUID->"53338077-23cc-42b6-8f35-1213cf10944a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefineNotation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"FontColor", "->", "Automatic"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineNotation", "::", "newcolor"}], "=", 
    "\"\<Generating new color for `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", 
        RowBox[{"gaDefineNotation", ",", "StyleBox", ",", "pickNextColor"}], 
        "}"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", "gaNotation"}],
        ")"}], "||", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], ",", 
        RowBox[{"{", "__Rule", "}"}]}], "]"}]}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gaNotation", "[", "al", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"FontColor", "->", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "value", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"value", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}]}], 
                 ")"}], "/.", 
                RowBox[{"Options", "[", "gaDefineNotation", "]"}]}], ")"}]}], 
             ",", "\[IndentingNewLine]", "_RGBColor", ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"alreadyUsedColors", ",", 
                RowBox[{"ColorConvert", "[", 
                 RowBox[{"value", ",", "\"\<RGB\>\""}], "]"}]}], "]"}], ";", 
              "value"}], ",", "\[IndentingNewLine]", "Automatic", ",", 
             RowBox[{"pickNextColor", "[", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "pickNextColor", "]"}]}], "]"}], 
              "]"}], ",", "\[IndentingNewLine]", "_", ",", 
             RowBox[{"ColorConvert", "[", 
              RowBox[{"Black", ",", "\"\<RGB\>\""}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "]"}]}], "}"}]}], ")"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"ecab1246-33bf-42fd-9efd-adfa732c965e"],

Cell[TextData[{
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " modifies ",
 StyleBox["$PreRead",
  FontWeight->"Bold"],
 ". "
}], "Text",ExpressionUUID->"4f14947a-5c8d-403e-9859-c7ad7fd6c7b8"],

Cell[TextData[{
 "The rule ",
 StyleBox["e[_]:>e[__]",
  FontWeight->"Bold"],
 " in ",
 StyleBox["$PreRead ",
  FontWeight->"Bold"],
 "ensures that forbidden pattern (because of mandatory ",
 StyleBox["e[index,algebra] ",
  FontWeight->"Bold"],
 "syntax)  with single blank is automatically replaced by blank sequence.  ",
 StyleBox["$PreRead ",
  FontWeight->"Bold"],
 "is made dynamic with := in order to prevent input aliases when ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " is set to be ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " of algebras. This function also includes definitions for ",
 StyleBox["MV[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " is far from finished. "
}], "Text",ExpressionUUID->"dc9b7870-2767-421a-80a3-eeed2d488801"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], "=", 
   "\"\<gaRunningAlgebra was set to tensor product `1`. Input alias of basis \
element was disabled, it only works with Cl[p,q] algebras.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[125]:=",ExpressionUUID->"a5625491-4e89-4c8a-b49a-6e6b01f26fd7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"preReadMessage", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineInput", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"defCol", ",", "downIndex"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaRunningAlgebra", "=", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "nested", " ", "inputs", " ", "ReplaceAll", " ", "in", " ",
         "future", " ", "can", " ", "be", " ", "replaced", " ", "by", " ", 
        "more", " ", "dangerous", " ", "ReplaceRepeated"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"bs", "=", "orthonormalBasisSymbolName"}], ",", 
          RowBox[{
          "orthonormalBaseSymbolInputA", "=", 
           "orthonormalBaseSymbolInputAlias"}], ",", 
          RowBox[{"formSymbol", "=", "differentialFormSymbolName"}], ",", 
          RowBox[{
          "differentialFormSymbolInputA", "=", 
           "differentialFormSymbolInputAlias"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$PreRead", ":=", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], 
             ",", 
             RowBox[{
              RowBox[{"preReadMessage", "=", "False"}], ";", 
              RowBox[{"With", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"gaRA", "=", 
                  RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}]}], "}"}],
                 ",", 
                RowBox[{"ReplaceAll", "[", 
                 RowBox[{"#", ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                   "orthogonal", " ", "base", " ", "symbol", " ", 
                    "replacements", " ", "for", " ", "manifold"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"e", "[", "1", "]"}], "[", 
                    RowBox[{"x", ",", "y", ",", "..."}], "]"}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"e", "[", "1", "]"}], "[", "x", "]"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    "pt_String", ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "pt", ",", "\"\<}\>\""}], "}"}],
                     "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"e", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"2", "..."}]}], "]"}], "[", "x", "]"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ",", "\"\<[\>\"", ",", "pt_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "pt", ",", "\"\<}\>\""}], "}"}],
                     "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"e", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"2", "..."}]}], "]"}], "[", 
                    RowBox[{"x", ",", "y", ",", "..."}], "]"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "orthogonal", " ", "base", " ", "symbol", " ", 
                    "replacements", " ", "for", " ", "plane", " ", "space"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "\"\<_\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "\"\<__\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "bs", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "gaRA", ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "gaRA", ",", "\"\<]\>\""}], 
                    "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<Association\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\""}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"differential", " ", "form", " ", "symbol", " ", 
                    RowBox[{"replacements", ":", " ", 
                    RowBox[{
                    "note", " ", "the", " ", "trick", " ", "when", " ", 
                    "formSymbol", " ", "in", " ", "the", " ", "LHS", " ", 
                    "is", " ", "replaced", " ", "by", " ", "bs", " ", "in", 
                    " ", "the", " ", 
                    RowBox[{"RHS", "!"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"de", "[", "1", "]"}], "[", 
                    RowBox[{"x", ",", "y", ",", "..."}], "]"}], " ", 
                    "differential", " ", "form", " ", "default", " ", "input",
                     " ", "is", " ", "with", " ", "up", " ", 
                    RowBox[{"indices", "!"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "formSymbol", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"de", "[", "1", "]"}], "[", "x", "]"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "formSymbol", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    "pt_String", ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "pt", ",", "\"\<}\>\""}], "}"}],
                     "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"de", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"2", "..."}]}], "]"}], "[", "x", "]"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"formSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ",", "\"\<[\>\"", ",", "pt_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "pt", ",", "\"\<}\>\""}], "}"}],
                     "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"de", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"2", "..."}]}], "]"}], "[", 
                    RowBox[{"x", ",", "y", ",", "..."}], "]"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"formSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"bs", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "gaRA", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvPoint\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "pt", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
                   "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", "preReadMessage"}], ",", 
                RowBox[{
                 RowBox[{"preReadMessage", "=", "True"}], ";", 
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], 
                   ",", "gaRunningAlgebra"}], "]"}]}]}], "]"}], ";", "#"}]}], 
            "]"}], "&"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "clear", " ", "and", " ", "set", " ", "autoreplacements", " ", 
           "for", " ", "orthogonal", " ", "basis", " ", "vector", " ", 
           "symbol"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", " ", "\[Rule]", " ", 
            RowBox[{"Fold", "[", 
             RowBox[{"DeleteCases", ",", 
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{"Blank", "[", "]"}], ",", 
                RowBox[{"Blank", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", "->", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "differentialFormSymbolInputA", "\[Rule]", "formSymbol"}], 
                ",", 
                RowBox[{"orthonormalBaseSymbolInputA", "\[Rule]", "bs"}]}], 
               "}"}]}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"BoxData", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Running algebra is: gaRunningAlgebra= \>\"", ",", 
                RowBox[{"TagBox", "[", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{
                    RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "gaRunningAlgebra", "]"}], 
                    "]"}]}], "]"}], ",", "DisplayForm"}], "]"}]}], "}"}], 
              "]"}], "]"}], ",", "\"\<Print\>\"", ",", 
            RowBox[{"CellAutoOverwrite", "\[Rule]", "True"}], ",", 
            RowBox[{"GeneratedCell", "\[Rule]", "True"}]}], "]"}], "}"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"bf02247b-d677-4f12-9775-0548653185ff"],

Cell[TextData[{
 "New alternative to replace expression during evaluation of cell is moved to \
",
 StyleBox["RemovedPieces.nb",
  FontWeight->"Bold"],
 ". Interesting for investigation. Not yet properly working. Test them in new \
notebook, because autoreplacements are difficult to remove. Save the original \
file before experimenting!!!"
}], "Text",ExpressionUUID->"a215171a-d865-40bb-9058-9f62d26c451b"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Orthogonal basis definition, index sorting functions"
}], "Subsection",ExpressionUUID->"8ebdc9e3-b1e6-49fc-a3b6-be8285d6f741"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index ordering and sorting"
}], "Subsubsection",ExpressionUUID->"a45c58c1-8a12-438d-8f9c-8ef477ef3f8e"],

Cell["\<\
Help functions, which convert index set to binary like representations by \
inserting zeroes in proper places. Uncompiled versions are inactive. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"f44a03f6-60f2-46e1-8d73-126fdb53c0f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvIndexToBinaryLikeRepresentation", "[", 
    RowBox[{"a_List", ",", 
     RowBox[{"al_:", "gaRunningAlgebra"}]}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Rule", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"4f9d55b1-3ba1-40f9-be18-c0a05c8894b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", 
    RowBox[{
     RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
        ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", 
    RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
       ",", 
       RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
       RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"32d0b600-1f15-474d-ad3b-f0523618fb95"],

Cell[CellGroupData[{

Cell["Pure orderings", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"355b6c00-ac2e-4250-932a-92aa4739dafe"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  Lex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "lex"], TraditionalForm]],ExpressionUUID->
  "e65572b7-c10d-4f23-93d0-ab27465a8eca"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero entry is \
positive.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"c0732ef1-c401-426b-aa1f-bcc5268842cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"79394e91-c038-45f9-a338-56c57ae3bbc6"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}",
  FontWeight->"Bold"],
 ", spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ] ",
  FontWeight->"Bold"],
 "appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"3d2ffe28-8ccb-4398-8c76-af639ed61f4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[130]:=",ExpressionUUID->"addeb727-b8e6-4b77-ba2c-a9a92ca0e760"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  InvLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Invlex"], TraditionalForm]],ExpressionUUID->
  "af2332c3-4906-4600-9b21-57b3e512c200"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero entry \
is positive.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"458fccd4-1973-4a13-b7b1-95fb2250fa1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"a6829ea1-b2d9-49fc-9701-89c3c692948d"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}",
  FontWeight->"Bold"],
 ", spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ] ",
  FontWeight->"Bold"],
 "appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " (see https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"240b7621-241f-4814-a3f6-024c7ad7648b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
               "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
             "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[131]:=",ExpressionUUID->"81684214-4201-4ff5-883a-2c81dade93e1"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  RevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Revlex"], TraditionalForm]],ExpressionUUID->
  "dab5c3fb-3a48-445b-a1fe-bb878db9dc79"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero entry \
is negative.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"2ff79d8d-5be9-458d-a385-8dc54813b925"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"6c9081ba-f5d8-4994-8ed8-7b67bf972ac6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeRevLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}],
               "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeRevLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
             "]"}]}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[132]:=",ExpressionUUID->"e7faed67-141f-4926-bb46-f89604974415"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " InvRevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "InvRevlex"], TraditionalForm]],ExpressionUUID->
  "ef6acad7-6c9a-4813-bd32-3d912ddabcc1"],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero entry is \
negative.   "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"f39303db-d1db-410f-b754-44684e92d74b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"75441b51-d6c5-44bb-9e51-a6cea373e038"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}",
  FontWeight->"Bold"],
 ", spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ]",
  FontWeight->"Bold"],
 " appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " (see https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"017a87be-074f-4bb0-8b4d-2e0933902804"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvRevLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", 
               "True"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvRevLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[133]:=",ExpressionUUID->"66fe8a24-2571-40f4-876c-7dd369d90036"]
}, Closed]],

Cell[CellGroupData[{

Cell["Degree modified orders", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"00768868-8bf6-4399-bd6b-90126ec3154f"],

Cell["Uncompiled version is inactive.", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"9626474e-f5da-41a1-82ea-4fec3498faa4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Length", "[", "a1", "]"}], "-", 
       RowBox[{"Length", "[", "a2", "]"}]}], ")"}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"9912a0d6-e726-4395-9d85-8c930c75443d"],

Cell[TextData[{
 "Compiled versions.  Here inlining using ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " (see https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  do not work, therefore we inline in the recommended way with  ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}.",
  FontWeight->"Bold"]
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"442d8e11-1ab9-4cc4-bbda-f911327bd915"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[134]:=",ExpressionUUID->"bebf2a99-d950-4ae3-a828-9ce4bd97e569"]
}, Closed]],

Cell[CellGroupData[{

Cell["Inverse degree modified orders", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"8b4ba894-5f95-496a-a32a-2214c0214e4d"],

Cell["Uncompiled version is inactive.", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"359c28d6-a497-4b9a-8034-76c605ca0f4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeInvDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "a2", "]"}], "-", 
      RowBox[{"Length", "[", "a1", "]"}]}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"03793bac-a42e-424e-b255-789a7264e5f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[135]:=",ExpressionUUID->"1d65b70e-be39-47ca-8a60-0195eb77e1b2"],

Cell[TextData[{
 "Commutative coefficients are ordered using ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s MonomialList orders, which are \[OpenCurlyDoubleQuote]Lexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeReverseLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeDegreeLexicographic\
\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NegativeDegreeReverseLexicographic\
\[CloseCurlyDoubleQuote]. These orders are expanded to include  \
\[OpenCurlyDoubleQuote]Reverse[Lexicographic]\[CloseCurlyDoubleQuote],... \
etc., which reverses monomial list order."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10001.},ExpressionUUID->"3301732d-7446-466c-bc73-99b95d191cc5"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Ordering  of orthonormal basis elements and index sets in plain \
representation. \
\>", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"5a5f425b-3309-483f-aad1-c6edac30e3b3"],

Cell["\<\
Ordering is defined only for same set (empty or not) of up or down  indices. \
\
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"307e8066-5055-457b-ab05-69b06ce856e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQNoncommutative", "[", 
    RowBox[{"ord_String", ",", "ind1_", ",", "ind2_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "last", " ", "position"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "last", " ", "position"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeInvLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "first", " ", "position"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeRevLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
     
     RowBox[{"(*", " ", 
      RowBox[{
      "True", " ", "if", " ", "scalar", " ", "is", " ", "in", " ", "the", " ",
        "first", " ", "position"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{"mvNonCommutativeInvRevLexC", "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{"(*", " ", 
      RowBox[{"for", " ", "all", " ", 
       RowBox[{"Deg", "[", "]"}], " ", "True", " ", "if", " ", "scalar", " ", 
       "is", " ", "in", " ", "the", " ", "last", " ", "position"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"",
      ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
        
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "True", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "False"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", 
     ",", 
     RowBox[{"(*", " ", 
      RowBox[{"for", " ", "all", " ", 
       RowBox[{"InvDeg", "[", "]"}], " ", "True", " ", "if", " ", "scalar", 
       " ", "is", " ", "in", " ", "the", " ", "first", " ", "position"}], " ",
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
        
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
        
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvRevLex]\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "ind1", "]"}], "*", 
          RowBox[{"Length", "[", "ind2", "]"}]}], ")"}], "=!=", "0"}], ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
        "[", 
        RowBox[{"ind1", ",", "ind2"}], "]"}], ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind2", "]"}], "===", "0"}], ")"}], ",", 
       "False", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "ind1", "]"}], "===", "0"}], ")"}], ",", 
       "True"}], "]"}], ",", "\[IndentingNewLine]", "_", ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBasis", "::", "UndefinedOrdering"}], ",", 
        "ord"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[136]:=",ExpressionUUID->"64d5f5c5-2aaa-4d95-9595-238133080adb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQCommutative", "[", 
    RowBox[{"comOrd_String", ",", "anyCoef1_", ",", "anyCoef2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vars", "=", 
        RowBox[{"Variables", "[", 
         RowBox[{"anyCoef1", "+", "anyCoef2"}], "]"}]}], ",", "comOrdMod"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"vars", "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"OrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{"comOrd", ",", "\[IndentingNewLine]", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Lexicographic\>\"", ",", "\"\<DegreeLexicographic\>\"", ",", 
            "\"\<DegreeReverseLexicographic\>\"", ",", 
            "\"\<NegativeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeReverseLexicographic\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MonomialList", "[", 
           RowBox[{
            RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
            "comOrd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Reverse[Lexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeReverseLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeReverseLexicographic]\>\""}], "}"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"comOrdMod", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"comOrd", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<Reverse[\>\"", "\[Rule]", "\"\<\>\""}], ",", 
               RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"MonomialList", "[", 
             RowBox[{
              RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
              "comOrdMod"}], "]"}], "]"}], "===", 
           RowBox[{"{", 
            RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", 
            "comOrd"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[137]:=",ExpressionUUID->"8eef9ec3-b209-4dce-8a8f-bc488687b41a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaOrderedQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaCommutativeMonomialOrder", "\[Rule]", "\"\<Lexicographic\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], "=", 
    "\"\<The order `1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"anyCoef2_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], "=!=", 
            RowBox[{"{", "ind2", "}"}]}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQNoncommutative", "[", 
           RowBox[{"ord", ",", 
            RowBox[{"{", "ind1", "}"}], ",", 
            RowBox[{"{", "ind2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anyCoef1", ",", "anyCoef2"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[138]:=",ExpressionUUID->"d4a4408c-3db7-4304-abd4-3e662989cbce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anyCoef1", ",", 
       RowBox[{"anyCoef2", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind2", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[141]:=",ExpressionUUID->"424892f9-44de-4517-8210-b7556db67f9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1", "*", 
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "anyCoef2", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[142]:=",ExpressionUUID->"7d499801-7707-470a-b17b-62f52a80733b"],

Cell[TextData[{
 "Scalar and base element ordering. For   \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[RevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvRevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]RevLex\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvRevLex\
\[CloseCurlyDoubleQuote] scalars are lowest elements. Note, that rules are \
complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["bs[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"fdaf5c03-1347-47a4-ba28-af9098c137ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any_", ",", 
        RowBox[{"anycoef_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{"any", ",", "anycoef", ",", "opts"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[143]:=",ExpressionUUID->"447a6565-d17f-4815-a1ac-db6008a2e5b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
            "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
            "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", "ord"}],
          "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[144]:=",ExpressionUUID->"42e4153a-ae53-4955-96a9-90c9a59c29e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "any", ",", "anycoef"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"1324cd74-5edb-497d-9883-a75e299b6560"],

Cell[TextData[{
 "Scalars and base element ordering. For   \[OpenCurlyDoubleQuote]Deg[Lex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[RevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvRevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Lex\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]InvLex\[CloseCurlyDoubleQuote]  scalars are highest \
elements.  Note, that rules are complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["bs[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"439390e9-0bfb-4562-89bc-7e7e04d18f0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anycoef_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", "any_", 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{"anycoef", ",", "any", ",", "opts"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[145]:=",ExpressionUUID->"522bf9aa-61cc-4df3-8e76-02d86f2c1771"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
            "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
            "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
         "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[146]:=",ExpressionUUID->"a5bfbbba-7abc-4705-b018-de5b373bd5d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"bs", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
                "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
                "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
             "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anycoef", ",", "any"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"0e12fbb5-4861-43c6-a3a0-1692f5aeb132"],

Cell[TextData[{
 "Scalar ordering uses ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " standard GroebnerBase orderings defined in ",
 StyleBox["MonomialList[ ]",
  FontWeight->"Bold"],
 ". If MV are more general (not basis elements) then we first convert to \
AssociationRepresentation, where the comparison is much easier."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"bffa6eab-6128-47e3-a941-21a4d5d221f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any1_", ",", "any2_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"orderedQCommutative", "[", 
         RowBox[{"comOrd", ",", "any1", ",", "any2"}], "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any1", ",", "any2"}], "}"}], ",", 
        RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[147]:=",ExpressionUUID->"7d7ee2cc-7599-49d1-b8f0-4d296dbe707e"],

Cell["\<\
The same rules for dual basis. When basis elements have up and down indices \
the sorting is undefined (no rules). \
\>", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"fb84627e-5356-4d4b-ad85-fc761581c067"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind1_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind2_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind1", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        RowBox[{"anyCoef2", "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind2", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        "opts"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
         RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"SameQ", "[", 
         RowBox[{"ind", ",", "ind1", ",", "ind2"}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[148]:=",ExpressionUUID->"3e4b9f1c-899b-4dc6-95e1-c1f98a6c80af"],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]IncreasingPermutatons\[CloseCurlyDoubleQuote] \
ordering {{1},{2},{3},{1,2}{1,3},{2,3},....} is the same as InvDeg[Lex] \
ordering. There is possibility to define IncreasingPermutatonsWithSignature \
where {1,3}->-{3,1} (due to Odd permutation of 1,2,3). Not implemented. See \
note in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 58."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"7101ff3f-c272-497f-8b43-0c126c1f8c2d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Subsets", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], ",", 
     RowBox[{"{", "len", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", "len__Integer", "}"}]}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mvInvDegLexSortedIndexList", "[", 
          RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "len", "}"}]}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr_:", "All"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[149]:=",ExpressionUUID->"eeafc362-b1a2-4501-a3f5-1405692a6781"],

Cell[TextData[{
 "Signature of increasing i.e.  InvDeg[Lex], permutations are easier to \
determine, see formulas in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 59."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"00f31b6e-df08-4082-940c-fd0bba862c8a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"triangularNumber", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"n", "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}], "/", "2"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mvSignatureOfIncreasingPermutation", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", "x"}], ")"}], "-", 
       RowBox[{"triangularNumber", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"OrderedQ", "[", "x", "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{"And", "@@", 
       RowBox[{"Positive", "[", "x", "]"}]}], ")"}]}]}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[152]:=",ExpressionUUID->"fb57f780-cc6a-4a45-ad46-56323795d1e2"],

Cell["Sorting index list with given order", "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10000.},ExpressionUUID->"d6b30169-d098-4738-9689-0bf2d9efa5cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "[", 
    RowBox[{
     RowBox[{"ind", ":", 
      RowBox[{"{", "__List", "}"}]}], ",", 
     RowBox[{"ord_String:", "\"\<InvDeg[Lex]\>\""}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeInvLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeRevLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{"mvNonCommutativeInvRevLexC", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "\"\<InvDeg[InvRevLex]\>\"", ",", 
      RowBox[{"Sort", "[", 
       RowBox[{"ind", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
          "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "_", ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", "ord"}], 
        "]"}], ";", "ind"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"AllTrue", "[", 
     RowBox[{
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Flatten", "[", "ind", "]"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Positive", "[", "#", "]"}], "&&", 
         RowBox[{"IntegerQ", "[", "#", "]"}]}], "&"}], ")"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[154]:=",ExpressionUUID->"9017cb67-e252-44f4-8043-67b55ea001ff"],

Cell[TextData[{
 "Problem  in version 11.3:  The pattern matcher ",
 Cell[BoxData[
  RowBox[{"ind", ":", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"__Integer", "?", "Positive"}], "}"}], ".."}], "}"}]}]], "Input",
  CellChangeTimes->{{3.7727723624993143`*^9, 3.77277236395726*^9}},
  ExpressionUUID->"37ce8f73-0589-4f2f-84c2-d68cd2d9fb0e"],
 ".  ",
 Cell[BoxData["\<\"Recursion limit exceeded; positive match might be \
miss\"\>"], "Message",
  GeneratedCell->False,
  CellAutoOverwrite->False,ExpressionUUID->
  "8fbbc500-a4a5-4081-8cf0-9fde266f6026"],
 ".  The pattern matcher worked well for 10.3 and 11.0. Wolfram says it is a \
new restriction to prevent crash from deep recursive stack nesting for \
dynamic patterns: \
https://mathematica.stackexchange.com/questions/202533/pattern-matcher-\
behavior-change-in-11-3?noredirect=1#comment524761_202533"
}], "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"58e1d979-4c15-4e97-a74d-ef60bc1a1a6d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Ordering  of orthonormal basis elements and index sets in Association \
representation. Since at the moment AssociationRepresentation is not yet \
defined,  actual sorting/ordering in that form is defined in section 6 \
(devoted for Groebner basis).\
\>", "Item",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10002.},ExpressionUUID->"0be1fbab-1dec-4f1a-b929-25d65090157b"],

Cell[TextData[{
 "keyReplace taken from ",
 Cell[BoxData[""], "Input",
  CellChangeTimes->{{3.736649818411449*^9, 3.73664981883968*^9}},
  ExpressionUUID->"53c74859-e1ba-4985-a2bb-e969d971242b"],
 "https://mathematica.stackexchange.com/questions/166471/rename-keys-in-\
nested-association, answered by ",
 "Sjoerd Smit."
}], "Text",
 CellGroupingRules->{
  "GroupTogetherGrouping", 
   10002.},ExpressionUUID->"bfad9668-b459-4757-aab2-88f5969b0d50"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"keyReplaceAndSort", "[", 
    RowBox[{"assoc_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"Composition", "[", 
       RowBox[{"KeySort", ",", 
        RowBox[{"KeyMap", "[", 
         RowBox[{"Replace", "[", "rules", "]"}], "]"}]}], "]"}], ",", "assoc",
       ",", 
      RowBox[{"Position", "[", 
       RowBox[{"assoc", ",", 
        RowBox[{"_", "?", "AssociationQ"}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"assoc", ",", "_Association"}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"keyReplace", "[", 
    RowBox[{"assoc_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{"Replace", "[", "rules", "]"}], "]"}], ",", "assoc", ",", 
      RowBox[{"Position", "[", 
       RowBox[{"assoc", ",", 
        RowBox[{"_", "?", "AssociationQ"}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"assoc", ",", "_Association"}], "]"}]}]}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellLabel->
  "In[155]:=",ExpressionUUID->"8bb530dc-95aa-4b6a-8019-f4ee2256ac74"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
     RowBox[{"al", ",", "order"}], "]"}], "=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "indexList", ",", "inDegLexOrder", ",", "indexListWithSortMark"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
             "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
             "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", 
           "order"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"indexList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"gaIndexSort", "[", 
              RowBox[{
               RowBox[{"mvInvDegLexSortedIndexList", "[", "al", "]"}], ",", 
               "order"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"indexList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"gaIndexSort", "[", 
              RowBox[{
               RowBox[{"mvInvDegLexSortedIndexList", "[", "al", "]"}], ",", 
               "order"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"indexList", ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"MapAt", "[", 
              RowBox[{"First", ",", "#", ",", "1"}], "]"}], "&"}], ",", 
            RowBox[{"Reverse", "/@", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{"List", ",", "indexList"}], "]"}]}]}], "]"}]}], "]"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellLabel->
  "In[157]:=",ExpressionUUID->"cb1a5e06-d6dd-45fe-ba9e-be34aa0cf8a8"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric algebra orthonormal basis  construction"
}], "Subsubsection",ExpressionUUID->"e2a96baa-47f0-4f92-bf63-74067dd81ef8"],

Cell[TextData[{
 "This slightly modified approach of base construction is due to G. Stacey \
Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  Reciprocal base is constructed in section 8 since they need higher \
functions like inverse, etc."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"92a19aa5-4a51-410d-ad5c-aa36f3a43068"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
      "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
      ",", 
      RowBox[{"Quiet", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"gaGradesOnly", "\[Rule]", "All"}], ",", 
      RowBox[{"gaDefineInput", "\[Rule]", "True"}], ",", 
      RowBox[{"gaMakeAlias", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineOrthonormalBasis", "::", "UndefinedOrdering"}], "=", 
    "\"\<The order `1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetAttributes", "[", 
      RowBox[{"bs", ",", "NHoldAll"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDefineOrthonormalBasis", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"p_Integer", ",", "q_Integer", ",", 
          RowBox[{"r", ":", 
           RowBox[{"(", 
            RowBox[{"_", "?", "IntegerQ"}], ")"}], ":", "0"}]}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", 
          RowBox[{"{", 
           RowBox[{
           "gaDefineOrthonormalBasis", ",", "gaDefineNotation", ",", 
            "gaDefineInput"}], "}"}], "]"}]}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "invdeglexIndexList", ",", "indSet", ",", "keysB", ",", "gr", ",", 
          RowBox[{"quiet", "=", "False"}], ",", 
          RowBox[{"al", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ord", "=", 
           RowBox[{
           "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], ",", 
          
          RowBox[{"grOnly", "=", 
           RowBox[{"OptionValue", "[", "gaGradesOnly", "]"}]}], ",", 
          "algBoxes", ",", 
          RowBox[{"defineInput", "=", 
           RowBox[{"OptionValue", "[", "gaDefineInput", "]"}]}], ",", 
          RowBox[{"makeAlias", "=", 
           RowBox[{"OptionValue", "[", "gaMakeAlias", "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "set", " ", "color", " ", "of", " ", "basis", " ", "element"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", 
              "gaNotation"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
              RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaDefineNotation", "[", 
             RowBox[{"al", ",", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "gaDefineNotation", "]"}]}], "]"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "calculate", " ", "and", " ", "store", " ", "some", " ", "data", 
           " ", "which", " ", "will", " ", "be", " ", "often", " ", "used", 
           " ", "by", " ", "other", " ", "functions"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "=", 
          RowBox[{"p", "+", "q", "+", "r"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"p", "+", "1"}], ",", 
            RowBox[{"p", "+", "q"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaI", "[", "al", "]"}], "=", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"p", "+", "q"}], "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaReverseGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}], ",", 
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", "4"}], "]"}]}], "]"}], ",", "i", ",", 
              "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaGradeInverseGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OddQ", "[", "i", "]"}], ",", "i", ",", "Nothing"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}], ",", 
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", "4"}], "]"}]}], "]"}], ",", "i", ",", 
              "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"main", " ", "stuff"}], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"unitElement", "[", "al", "]"}], "=", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"invdeglexIndexList", "=", 
          RowBox[{"mvInvDegLexSortedIndexList", "[", 
           RowBox[{"al", ",", "grOnly"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ord", "===", "\"\<InvDeg[Lex]\>\""}], ",", 
           RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
           RowBox[{"indSet", "=", 
            RowBox[{"gaIndexSort", "[", 
             RowBox[{"invdeglexIndexList", ",", "ord"}], "]"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}], "/@",
             "indSet"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "put", " ", "scalar", " ", "element", " ", "in", " ", "the", " ", 
           "beginning", " ", "or", " ", "end", " ", "of", " ", "list"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                 "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                 ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
               ",", "ord"}], "]"}], ",", 
             RowBox[{
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], "=", 
               RowBox[{"Append", "[", 
                RowBox[{"keysB", ",", 
                 RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], "=", 
            "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "Quiet", "]"}], ",", 
           "\[IndentingNewLine]", "Automatic", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
               "alreadyPrintedList", ",", 
                "\"\<gaDefineOrthonormalBasis\>\""}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{
               "alreadyPrintedList", ",", 
                "\"\<gaDefineOrthonormalBasis\>\""}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"quiet", "=", "True"}]}], ",", 
             RowBox[{"quiet", "=", "False"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "True", ",", 
           RowBox[{"quiet", "=", "True"}], ",", "False", ",", 
           RowBox[{"quiet", "=", "False"}], ",", "_", ",", 
           RowBox[{"quiet", "=", "False"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{
            RowBox[{"algBoxes", "=", 
             RowBox[{"ToBoxes", "[", "al", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Basis vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "ord", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Basis vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "ord", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"If", " ", "makeAlias", " ", "is", " ", "false"}], ",", 
           " ", 
           RowBox[{
           "then", " ", "no", " ", "user", " ", "input", " ", "and", " ", 
            "only", " ", "explicit", " ", "reference", " ", 
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], " ", "to", " ",
             "basis", " ", "is", " ", "defined"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"makeAlias", ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "set", " ", "and", " ", "update", " ", "input", " ", "aliases", 
             " ", "only", " ", "is", " ", "useful", " ", "with", " ", 
             "defined", " ", "basis", " ", "shortcuts", " ", "since", " ", 
             "gaRunningOredering", " ", "is", " ", "set", " ", "at", " ", 
             "this", " ", "step"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{"defineInput", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"gaDefineInput", "[", 
                RowBox[{"al", ",", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "gaDefineInput", "]"}]}], 
                   "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "save", " ", "the", " ", "basis", " ", "ordering", " ", "in", 
              " ", "the", " ", "global", " ", "variable"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"gaRunningOrdering", "=", "ord"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "make", " ", "shorter", " ", "references", " ", "to", " ", 
              "generated", " ", "basis"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "grOnly"}], "]"}], "=", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "===", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord"}], "]"}], "=", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "=", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"special", " ", "data", " ", "for", " ", "quaternions"}], ",", 
       " ", 
       RowBox[{
       "since", " ", "they", " ", "can", " ", "be", " ", "used", " ", "with", 
        " ", "any", " ", "algebra"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaVectorSpaceDimension", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "2"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNegativeSignatureIndexList", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaReverseGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", "2", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeInverseGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaCliffordConjugateGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], ";"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellLabel->
  "In[158]:=",ExpressionUUID->"18bb5eec-fbd6-4a59-bf3e-88fd4576ad9d"],

Cell[TextData[{
 "Sometimes it is useful to group base elements by grade, this is simply to \
implement using undocumented ",
 StyleBox["Internal`PartitionRagged[ ]",
  FontWeight->"Bold"],
 " function. Warning, code below will not work if ",
 StyleBox["Module[ ] ",
  FontWeight->"Bold"],
 "is replaced by ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"3bf21853-2a3c-425b-975a-66491ac3c9cb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaOrthonormalBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"GroupBy", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"algebra_", ",", 
     RowBox[{"ord", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"gr_:", "All"}], ",", 
     RowBox[{"opts__", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grouping", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"GroupBy", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaOrthonormalBasis", ",", "GroupBy"}], "]"}]}], ")"}]}], 
       ",", 
       RowBox[{"theAlgBasis", "=", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{"algebra", ",", "ord", ",", "gr"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "theAlgBasis", "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "grouping", ",", "\"\<None\>\"", ",", "theAlgBasis", ",", 
         "\"\<Grade\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Clear", "[", "gaHomogeneusSubspaceBasis", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Set", "@@", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaHomogeneusSubspaceBasis", "[", 
                 RowBox[{"algebra", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"gaVectorSpaceDimension", "[", "algebra", "]"}]}], 
                "]"}]}], ")"}], ",", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{"Internal`PartitionRagged", "[", 
               RowBox[{"theAlgBasis", ",", 
                RowBox[{"Length", "/@", 
                 RowBox[{"Split", "[", 
                  RowBox[{"theAlgBasis", ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
                    RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
                  "]"}]}]}], "]"}], ")"}]}], "\[IndentingNewLine]", 
            "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"2e867d9e-b84d-44df-b321-752805289dec"],

Cell["\<\
If all base was already calculated an now we need only some part of it, then \
simply take requested grades\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d0f46017-df4c-4e74-adfc-24cc842507cf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra_", ",", 
      RowBox[{"ord", ":", 
       RowBox[{"(", 
        RowBox[{
        "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
         "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
         "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
         "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
         "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
         "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", "gr_List"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"algebra", ",", "ord", ",", "All"}], "]"}], ",", 
       RowBox[{"_", "?", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], ",", "gr"}], "]"}], 
            "]"}], ">", "0"}], "&"}], ")"}]}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"algebra", ",", "ord", ",", "All"}], "]"}], "]"}], "=!=", 
      "gaOrthonormalBasis"}]}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "no", " ", "ordering", " ", "given"}], ",", " ", 
    RowBox[{"use", " ", "gaRunningOrdering"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"algebra_", ",", "gr_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra", ",", "gaRunningOrdering", ",", "gr"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaOrthonormalBasis", "[", 
       RowBox[{"algebra", ",", "gaRunningOrdering", ",", "All"}], "]"}], 
      "]"}], "=!=", "gaOrthonormalBasis"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"891e92eb-0e8f-4778-b80e-0726d2bdd370"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index rising and lowering"
}], "Subsubsection",ExpressionUUID->"b7167849-e29f-4adb-b633-7d62b9f2acf5"],

Cell["\<\
When orthonormal base is calculated, we can raise and lower indices. Raising \
and lowering indices do not make base dual or reciprocal, because we include \
signature factors. The signature of simple algebra is simply a number of \
basis vectors of negative signatures \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"52d4e086-26ba-4e5c-b802-26ca6d77afe7"],

Cell["\<\
The commands allows to rewrite expression with upper or down indices only. \
Because multiplication of up/down indices is realised as independent \
operations, the commands might be useful for a correctness test.\
\>", "Text",ExpressionUUID->"77a4d372-f3de-4fb6-a8ac-3b0360093a29"],

Cell[TextData[{
 "Note, that despite that we have up and down indices we always assume, that \
their ordering is common (i.e. not down indices first, then up indices, but \
order is according index values) If that was not true, then we should apply \
",
 Cell[BoxData["mvAltProductSignatureMap"], "Input",
  Evaluatable->False,
  CellGroupingRules->{GroupTogetherGrouping, 10002.},ExpressionUUID->
  "fbaa7a64-9bda-4e83-ac87-d944c6ff3302"],
 " function from the package and move this function below in the file). "
}], "Text",ExpressionUUID->"930e2f45-aa74-492c-bddb-51ea41f22bb0"],

Cell["Yet needs to implement for Associations.", "Text",ExpressionUUID->"615e2e5e-1158-44d3-ae93-14baac1f2249"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{"expr_", ",", "_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "_bs"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do_List", ",", "up_List"}], "]"}], ",", "al_Cl", ",", 
          "any___"}], "]"}], ",", "\"\<FromDown\>\""}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do", ",", "up"}], "]"}], ",", "al", ",", "any"}], "]"}], "->", 
        RowBox[{
         RowBox[{"Power", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], ",", 
              "do"}], "]"}], "]"}]}], "]"}], "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"Union", "[", 
              RowBox[{"do", ",", "up"}], "]"}]}], "]"}], ",", "al", ",", 
           "any"}], "]"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do_List", ",", "up_List"}], "]"}], ",", "al_Cl", ",", 
          "any___"}], "]"}], ",", "\"\<FromUp\>\""}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do", ",", "up"}], "]"}], ",", "al", ",", "any"}], "]"}], "->", 
        RowBox[{
         RowBox[{"Power", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], ",", 
              "up"}], "]"}], "]"}]}], "]"}], "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"do", ",", "up"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "al", ",", "any"}], "]"}]}]}], 
       "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexUp", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"orthogonalBasisElements", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
             "]"}], "]"}]}], ",", "replRules"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"replRules", "=", 
          RowBox[{"Dispatch", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"makeRule", "[", 
               RowBox[{"#", ",", "\"\<FromDown\>\""}], "]"}], "&"}], "/@", 
             "orthogonalBasisElements"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexDown", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"orthogonalBasisElements", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
             "]"}], "]"}]}], ",", "replRules"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"replRules", "=", 
          RowBox[{"Dispatch", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"makeRule", "[", 
               RowBox[{"#", ",", "\"\<FromUp\>\""}], "]"}], "&"}], "/@", 
             "orthogonalBasisElements"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"f17c5dca-4d8f-464d-9fb8-dee3be310239"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Taking grades, indices and parts of the basis elements"
}], "Subsubsection",ExpressionUUID->"678624ab-5cd1-4468-a812-34f05aac1122"],

Cell[TextData[{
 "Grade of empty base element is zero, grade of base element multiplied by \
factor is grade of base element. Warning. Replacement of c in expression \
c_*bs_basisSymbol by c_. would result in infinite loop. ",
 StyleBox["getGradeHelp[ ]",
  FontWeight->"Bold"],
 " is used for algebra independent memoization. "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"5647c695-e310-4afc-b287-bedd7e8cb38c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getGradeHelp", "[", "i1_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"getGradeHelp", "[", "i1", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Length", "[", "i1", "]"}], "}"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[166]:=",ExpressionUUID->"37eee292-7004-4ffd-a5f0-59a1bd2bb2a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetGrade", "[", 
         RowBox[{"basisSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}], "]"}], "]"}], ":=", 
       RowBox[{"{", "0", "}"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "the", " ", "next", " ", "definition", " ", "is", " ", "harmless", " ", 
       "for", " ", "MMA", " ", "version"}], ",", " ", 
      RowBox[{
      "which", " ", "do", " ", "not", " ", "have", " ", "Association", " ", 
       "implemented"}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{"mv_Association", ",", "__"}], "]"}], "]"}], "]"}], ":=", 
      RowBox[{"Union", "[", 
       RowBox[{"Length", "/@", 
        RowBox[{"Flatten", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Keys", "[", "mv", "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"mvDownUp", "\[Rule]", "List"}], "}"}]}], ")"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", "__"}], "]"}], 
        "]"}], "]"}], ":=", 
      RowBox[{"getGradeHelp", "[", 
       RowBox[{"Union", "[", 
        RowBox[{"{", 
         RowBox[{"i1", ",", "j1"}], "}"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"i1_", ",", "0"}], "]"}], ",", "any__"}], "]"}], "]"}], 
       "]"}], ":=", 
      RowBox[{"getGradeHelp", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"basisSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"0", ",", "i1_"}], "]"}], ",", "any__"}], "]"}], "]"}], 
       "]"}], ":=", 
      RowBox[{"getGradeHelp", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"c_", "*", 
         RowBox[{"basisSymbol", "[", "ar__", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"basisSymbol", "[", "ar", "]"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "basisSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"a9324bd4-cf17-4377-8267-91d6b66ce402"],

Cell["Extract indices of multivectors", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"083c9b66-babf-4219-946d-3dd5d8a7a275"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetIndex", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"basisSymbol", "[", 
          RowBox[{"in_mvDownUp", ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"in", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "basisSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetIndex", "[", "c_", "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "basisSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[168]:=",ExpressionUUID->"12a78ab1-a7c7-4c33-b26c-5f6c2b7f6881"],

Cell["\<\
Rules for operations (summation, multiplications, etc.) will be given after \
definition of  these operations. Here we only define how to extract  \
,,primitive\[CloseCurlyDoubleQuote] monomials.\
\>", "Text",ExpressionUUID->"a597b444-f8d8-46f3-9342-16293deb9f93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"84181645-666d-4bbb-a3da-362a3bd0e096"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Products and expansions"
}], "Section",ExpressionUUID->"94c9fa84-bdb6-442c-a5ee-d807e475d8b6"],

Cell[TextData[{
 StyleBox["Step 3 ",
  FontWeight->"Bold"],
 " Once we know how to  manipulate index and other properties we can go up \
and define products, expansions and sorting of general multivectors. Also \
here is a place to define conversion between different internal \
representations since all needed commands are available at this point."
}], "Text",ExpressionUUID->"2689dbbd-e650-448b-9602-cff530178fa6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"(*", 
     RowBox[{"help", " ", "functions"}], "*)"}], 
    RowBox[{
    "gaCommutativeQ", ",", "gaCommutativeAllQ", ",", "gaSetNonCommutative", 
     ",", "gaSetCommutative", ",", "mvZeroGradeQ", ",", 
     "gaGeneralMultivector", ",", 
     RowBox[{"(*", "operations", "*)"}], "GeometricProduct", ",", "GP", ",", 
     "OuterProduct", ",", "OP", ",", "LeftContract", ",", "LC", ",", 
     "RightContract", ",", "RC", ",", "InnerProduct", ",", "IP", ",", 
     RowBox[{"(*", 
      RowBox[{"product", " ", "expansion"}], "*)"}], "gaProductExpand", ",", 
     "CoefficientFunction", ",", "gaPE", ",", "gaExpand", ",", "gaExpandedQ", 
     ",", "CollectCoefficients", ",", "gaProductPairExpand", ",", 
     "OmitGrades", ",", "gaGPPower", ",", "gaGPMatrixPower", ",", "gaOPPower",
      ",", "gaOPMatrixPower", ",", "gaGeometricMatrixProduct", ",", 
     "gaOuterMatrixProduct", ",", "DorstProduct", ",", "DP", ",", 
     RowBox[{"(*", 
      RowBox[{
      "convert", " ", "between", " ", "internal", " ", "representations"}], 
      "*)"}], "gaAssociationRepresentation", ",", "gaPlainRepresentation", 
     ",", "gaAssociationTogether", ",", "gaGetMVComponents", ",", 
     "gaCompactPlainRepresentation", ",", 
     "gaCompactAssociationRepresentation", ",", "gaRandomMultivector"}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[170]:=",ExpressionUUID->"9a2c2391-ceee-499a-b866-8da8b79af742"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"4fb5f8c7-76ef-42b6-a8e7-1218b29d146c"],

Cell["Usage messages", "Text",ExpressionUUID->"7c389cbc-04be-44b6-b532-be981c4a0f38"],

Cell[TextData[{
 "Do not use ** (",
 StyleBox["NonCommutativeMultiply[ ]",
  FontWeight->"Bold"],
 ") for geometric product!"
}], "Text",ExpressionUUID->"079f0941-ea2f-40ea-84ea-5d0e245b88d7"],

Cell[TextData[{
 "There is one more product, called the \[OpenCurlyDoubleQuote]Shuffle \
product\[CloseCurlyDoubleQuote], defined by Perti Lounesto in \
\[OpenCurlyDoubleQuote]Lectures on Clifford algebra\[CloseCurlyDoubleQuote] \
",
 ButtonBox["[RA-LoCGAaA] ",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 26, which has geometrical meaning for \[OpenCurlyDoubleQuote]meet\
\[CloseCurlyDoubleQuote], and denoted as \[Wedge].  It is not defined at the \
moment. "
}], "Text",ExpressionUUID->"fa4f22a7-e1ec-460a-be5c-68894c0fef32"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeQ[f] returns True if argument f is commutative (default \
for new symbol).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"382ceea2-835b-4689-846a-4d7f7a06c67a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeAllQ[expr] returns True if all subparts of expr is \
commutative.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[174]:=",ExpressionUUID->"276b40a7-5ee4-41c3-9cc9-1efff3b5e528"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "::", "usage"}], "=", 
   "\"\<gaSetNonCommutative[heads] sets listed heads to be noncommuting \
quantities.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"b0f86863-a141-42cb-af65-ee645befd0b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "::", "usage"}], "=", 
   "\"\<gaSetCommutative[head] sets listed heads to be commuting \
quantities.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[176]:=",ExpressionUUID->"619bd5f9-aeca-4a9c-b6eb-358ff2cd95a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "::", "usage"}], "=", 
   "\"\<mvZeroGradeQ[expr] returns True if it can  detect that multivector is \
scalar. Important note. The answer \\\"False\\\" can indicate detection \
failure, therefore the command intended only for positive decision purposes, \
i.e. on return of True. An alternative is to use gaGetGrade[ ].\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[177]:=",ExpressionUUID->"c8662328-e4ed-4e92-9f3d-f0206af5add6"],

Cell[TextData[{
 " If we set {",
 StyleBox["Flat",
  FontWeight->"Bold"],
 "} Attribute to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 ", we get infinite recursion limit in ",
 StyleBox["MakeBoxes",
  FontWeight->"Bold"],
 ". Therefore we implement that property without the attribute."
}], "Text",ExpressionUUID->"11439d0f-cdff-4fba-ae18-3ac42b8fb419"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricProduct", "::", "usage"}], "=", 
   "\"\<GeometricProduct[a,b,...] denotes associative geometric product of \
multivectors a,b,... . Alias is GP[]. The StandardForm notation is \
\[GeometricProduct](unicode char \\ :0x26AC, in order to avoid clash with \
Mathematica EmptySmallCircle). For input use keyboard alias \[EscapeKey]gp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[178]:=",ExpressionUUID->"54aa302b-5363-4520-a4c2-8e02b738e841"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GP", "::", "usage"}], "=", "\"\<Alias for GeometricProduct\>\""}],
   ";"}]], "Input",
 CellLabel->
  "In[179]:=",ExpressionUUID->"cde335d4-f84d-4f98-af43-3dda2d30a506"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OuterProduct", "::", "usage"}], "=", 
   "\"\<OuterProduct[a,b,...] denotes outer (wedge) product of multivectors \
a,b,... . Alias is OP[]. The StandardForm notation is \[OuterProduct] \
\!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{RowBox[{\"unicode\", \" \", \
\"char\"}], \" \", \
\"\\\\:22ce\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->True,\
NumberMarks->True],FullForm]\)). For input use keyboard alias \[EscapeKey]op\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[180]:=",ExpressionUUID->"cacefd1b-9c65-4bea-ad17-1894d26f74da"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OP", "::", "usage"}], "=", "\"\<Alias for OuterProduct\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"bf26f563-ee7a-4ca2-9c2b-e7cd9eb80618"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InnerProduct", "::", "usage"}], "=", 
   "\"\<InnerProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, inner product turns into scalar product. \
Alias is IP[]. The StandardForm notation is \[InnerProduct] \
\!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{\"unicode\", \" \", \"char\", \" \
\", \"\\\\:2219\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->True,\
NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use keyboard \
alias  \[EscapeKey]ip\[EscapeKey]. UnicodeSymbols.tr defines the following \
operation precedences: NonCommutativeMultiply (**, highest), Times (*, \
Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[182]:=",ExpressionUUID->"f632f8ba-8df1-45aa-9fcb-087a04a665ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IP", "::", "usage"}], "=", "\"\<Alias for InnerProduct\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[183]:=",ExpressionUUID->"b2e9e164-7893-4ec7-93df-9639fdb7f30a"],

Cell[TextData[{
 "\nUnfortunately keyboard aliases  \[EscapeKey]lc\[EscapeKey] and   \
\[EscapeKey]rc\[EscapeKey] are already in use by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"5cfd98e0-5b33-4cba-91ed-f6a7eef4b381"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LeftContract", "::", "usage"}], "=", 
   "\"\<LeftContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[a]>=mvGrade[b] result is multivector of grade mvGrade[a]-mvGrade[b] \
and zero otherwise. Alias is LC[]. The StandardForm notation is \
\[LeftContract] \!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{\"unicode\", \" \
\", \"char\", \" \", \
\"\\\\:23a6\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->True,\
NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use keyboard \
alias \[EscapeKey]il\[EscapeKey]. UnicodeSymbols.tr defines the following \
operation precedences: NonCommutativeMultiply (**, highest), Times (*, \
Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[184]:=",ExpressionUUID->"25d12f0b-193b-4dda-9018-55f5b5c5350b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LC", "::", "usage"}], "=", "\"\<Alias for LeftContract\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[185]:=",ExpressionUUID->"78bddc09-a55d-42b7-bd0a-93e412724c92"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RightContract", "::", "usage"}], "=", 
   "\"\<RightContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[b]>=mvGrade[a] result is multivector of grade mvGrade[b]-mvGrade[a] \
and zero otherwise. Alias is RC[]. The StandardForm notation is \
\[RightContract] \!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{\"unicode\", \" \
\", \"char\", \" \", \
\"\\\\:23a3\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->True,\
NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use keyboard \
alias  \[EscapeKey]ir\[EscapeKey]. UnicodeSymbols.tr defines the following \
operation precedences: NonCommutativeMultiply (**, highest), Times (*, \
Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[186]:=",ExpressionUUID->"19610402-6577-4a88-a56e-6a14d59fbaab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RC", "::", "usage"}], "=", "\"\<Alias for RightContract\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"4c9368d7-9c75-41db-b42d-dfe2a262006e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DorstProduct", "::", "usage"}], "=", 
   "\"\<DorstProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, Dorst product turns into scalar product. \
Alias is DP[]. The StandardForm notation is \[DorstProduct] \
\!\(\*TagBox[StyleBox[RowBox[{\"(\", RowBox[{RowBox[{\"unicode\", \" \", \
\"char\"}], \" \", \
\"\\\\:26ab\"}]}],ShowSpecialCharacters->False,ShowStringCharacters->True,\
NumberMarks->True],FullForm]\)).\[IndentingNewLine]For input use keyboard \
alias  \[EscapeKey]dp\[EscapeKey]. UnicodeSymbols.tr defines the following \
operation precedences: NonCommutativeMultiply (**, highest), Times (*, \
Space), RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct \
(\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[188]:=",ExpressionUUID->"8ba322de-68c1-4533-9dee-5bebada78e8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DP", "::", "usage"}], "=", "\"\<Alias for DorstProduct\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"4ca1862a-2051-42e8-a19d-aba51db598be"],

Cell["\<\
Geometric product implementation. Keep these functions in private context, \
because they are only used internally.\
\>", "Text",ExpressionUUID->"8de6acdf-886e-4d48-89a5-8e1f949a83ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMu", "::", "usage"}], "=", 
   "\"\<mvMu[i_Integer?NonNegativeQ,J_List] counts elements of subset J that \
are greater than nonnegative integer i. J is subset of natural numbers. \
\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"6244ddc6-32c0-4c53-8d69-e3f15d48baaa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMuS", "::", "usage"}], "=", 
   "\"\<mvMuS[I_List,J_List] for each i in I counts elements of subset J that \
are greater of i and then adds all these numbers. Uses function mvMu to count \
elements for each i.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"d4efee08-5c33-490f-aa4b-e3676f2ec224"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "::", "usage"}], "=", 
   "\"\<mvProductSignatureMap[I_List,J_List,GeometricProduct|OuterProduct,\
algebra___] provides correct sign for geometric product or outer product (it \
is indicated by third argument) of two multivectors. Assumes that indices of \
base vectors are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"e576a8f3-5f9a-4bf5-a487-90530cc1c5bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAltProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAltProductSignatureMap[I_List,J_List] provides correct sign for \
alternating product of two multivectors. Assumes that indices of base vectors \
are properly ordered. Currently is not used by any other function.\>\""}], 
  ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"2c7588cd-daa2-4ae4-b955-398e750eb8b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "::", "usage"}], "=", 
   "\"\<For developers. mvSetSymmetricDifference[I_List,J_List] gives \
set-symmetric difference of sets I and J.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"818295e0-afaa-4c16-a920-a5b8c34faed1"],

Cell["Geometric product expansion", "Text",ExpressionUUID->"fe6d1f4e-70ad-48d9-a714-01f426bdacb8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "usage"}], "=", 
   "\"\<gaProductExpand[expr_,opts___] expands geometric algebra products. \
Option Except->{InnerProduct,OuterProduct,LeftContract,RightContract} forbids \
expansion of listed products. Option CoefficientFunction->Expand expands each \
coefficient before collecting. The CoefficientFunction option might \
significantly speedup or slowdown calculations depending on input how \
(symbolic) coefficients behaves on applying the provided CoefficientFunction \
function. The LeafCount of obtained result might also differ evry \
significantly. Instead of Expand any pure function can be applied here. \
Working with numerical coefficients choice CoefficientFunction->Identity is \
usefull. The main command gaProductExpand actually did't expand the given \
expression. It only splits expression in pairs of products, and then calls \
low level command gaProductPairExpand[], which do implements the expansion. \
The default option Method->Automatic select the actual expansion method  \
(\\\"RealTimePairProduct\\\" or \\\"PrecomputedPairProduct\\\") which will be \
used in gaProductPairExpand[].  gaProductPairExpand[] has more expansion \
options which can be directly refered in order to get full expansion control \
over pair of product. To convert expression into GeometricProduct use \
gaToGeometricProduct[ ].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CoefficientFunction", "::", "usage"}], "=", 
   "\"\<Option for gaProductExpand and gaGetMVComponents, which performs \
given pure function on collected coefficients of multiplied terms. \
CoefficientFunction->Identity or CoefficientFunction->Expand are typical, \
Thought other choices like CoefficientFunction->(Simplify[Togeter[#]]&) are \
valid.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "::", "usage"}], "=", 
   "\"\<gaExpand[expr] repeatidly applies Expand and gaProductExpand commands \
until result stop changing. Single Expand[gaProductExpand[ ]] should be \
enought and is recommended. If you are forced to use gaExpand[], it means \
that gaProductExpand[ ] implementation is still not perfect.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[190]:=",ExpressionUUID->"bd8baedf-512f-4065-a614-d91ddeef8e2a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "usage"}], "=", 
   "\"\<gaProductPairExpand[h[mv1_,mv2_],opts___] is a low level expansion \
command, which implements true expansion of product h of single pair (!) of \
arguments mv1 and mv2. It should not be used directy, instead use higher \
level command gaProductExpand[]. The gaProductPairExpand[ ] has three \
expansion methods implemented. The method \\\"ConvolutionPairProduct\\\" is \
fastest in the traditional Plus representation (default). If your need more \
speed, then first convert expression into gaAssociationRepresentation \
internal representation. The method \\\"RealTimePairProduct\\\"  works fast \
for small number of terms. When computation of some grades needs to be \
avoided, then method \\\"PrecomputedPairProduct\\\" can be used, unless \
algebra is large (vector spacedimension 9 or more). It first precomputes the \
product of two general formal multivectors symbolically (using the previous \
method) and then replaces coefficients of particular input inside \
symbolically precomputed expansion.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OmitGrades", "::", "usage"}], "=", 
   "\"\<OmitGrades->grade or OmitGrades->{grade1, grade2,...} is an option \
for gaProductExpand with the \\\"PrecomputedPairProduct\\\" Method, which \
allows to avoid computation of specified grades in the productof single pair \
of multivectors. Default is Method->{\\\"PrecomputedPairProduct\\\", \
OmitGrades->{}}.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[193]:=",ExpressionUUID->"43efd9c9-8ba3-4ca5-a2cb-0a263cd8103f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPE", "::", "usage"}], "=", 
   "\"\<Alias for gaProductExpand[ ].\>\""}], ";"}]], "Input",
 CellLabel->
  "In[195]:=",ExpressionUUID->"60ddf78d-0917-4f73-aa31-734071e535cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpandedQ", "::", "usage"}], "=", 
   "\"\<Predicate that checks if expression is in expanded form.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"8051c5e2-dbe7-4c14-9ed4-10c564d00d4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "::", "usage"}], "=", 
   "\"\<gaGPPower[x,n_Integer] computes geometric product of n elements  x \
\[GeometricProduct] x \[GeometricProduct] ... \[GeometricProduct] x.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[197]:=",ExpressionUUID->"7fb7b715-f418-4107-8bce-b2959ec56081"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaGPMatrixPower[X,n_Integer] computes product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"ab5f453b-c100-42e7-a900-d2e252603db3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "::", "usage"}], "=", 
   "\"\<gaOPPower[x,n_Integer] computes outer product of n elements  x  \
\[OuterProduct] x  \[OuterProduct] ... \[OuterProduct] x.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[199]:=",ExpressionUUID->"bad5055a-8f4b-4cc2-bb63-9a9c63f63a31"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaOPMatrixPower[X,n_Integer] computes  product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"d1ae9238-23a8-40a9-bfda-9fab45e9ab7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaGeometricMatrixProduct[A,B,...] computes  product of matrices A and \
B, elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[201]:=",ExpressionUUID->"262e5730-f1ac-4982-99b2-6421312f69c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaOuterMatrixProduct[A,B,...] computes  product of matrices A and B, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[202]:=",ExpressionUUID->"97da4b43-9336-4e74-89f4-6ca4de750221"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationRepresentation", "::", "usage"}], "=", 
   "\"\<\!\(\*StyleBox[\"gaAssociationRepresentation\",FontWeight->\"Bold\"]\)\
\!\(\*StyleBox[\"[\",FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"expr_\",\
FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"]\",FontWeight->\"Bold\"]\) converts \
multivectors in the expression expr to Mathematica's Associations. The \
association (associative array) representation, (denoted as e[<| keys -> \
values|>, algebra, ___]) is extremely convenient (and fast) in manipulating \
multivector structure. In future it will be a preferable internal format for \
multivector in orthonormal base. The other way convertion can be obtained \
with gaPlainRepresentation[ ].\>\""}], ";"}]], "Input",
 CellLabel->
  "In[203]:=",ExpressionUUID->"d13c1d7a-f43c-4b53-80b8-a8d5f11ece9c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPlainRepresentation", "::", "usage"}], "=", 
    "\"\<\!\(\*StyleBox[\"gaPlainRepresentation\",FontWeight->\"Bold\"]\)\!\(\
\*StyleBox[\"[\",FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"expr_\",FontWeight->\
\"Bold\"]\)\!\(\*StyleBox[\"]\",FontWeight->\"Bold\"]\) converts from \
internal Association format to simple additive format, which is much more \
convenient to read and input.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationTogether", "::", "usage"}], "=", 
   "\"\<gaAssociationTogether[expr] rewrites multiple base elements, which \
are in Association representations as a single Association.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[204]:=",ExpressionUUID->"f8c87548-a7e8-450e-8550-38af95f59cd4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeneralMultivector", "::", "usage"}], "=", 
   "\"\<gaGeneralMultivector[coef_,al_Cl,grade_:{}] generates multivector of \
the alggebra al with symbolic coefficients named as coef[_integer] of \
specified grade. If grade list is empty {} or All all grades are generated.\>\
\""}], ";"}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"ade821c9-0118-4c3f-b1b5-900b916ca986"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomMultivector", "::", "usage"}], "=", 
   "\"\<gaRandomMultivector[al_Cl,grade_:{},Range->{min,max}] generates \
random multivector of the algebra al with random integer coefficients in the \
range Specified by option Range->{-10,10} (default). If grade list is empty \
{} or All all grades of MV are generated.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"641c5424-2cf6-4635-8177-76013c468bbe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMVComponents", "::", "usage"}], "=", 
   "\"\<gaGetMVComponents[expandedExpr,OptionsPattern[{\
gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\",CoefficientFunction\
\[Rule]Expand}]] rewrites expanded expr as a list of components sorted in \
ord, which corresponds to defined orthonormal basis ordering.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[208]:=",ExpressionUUID->"b27850dd-40d0-404c-b013-d330db6787df"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactPlainRepresentation", "::", "usage"}], "=", 
   "\"\<gaCompactPlainRepresentation[expr, opt:gaNonCommutativeMonomialOrder\
\[Rule]\\\"InvDeg[Lex]\\\"] rewrites expr using compact index representation. \
In particular it replaces mvDownUp[{do__Integer},{}]:> mvDownUp[integer,0], \
where integer enumerates basis element in the gaNonCommutativeMonomialOrder \
ordered orthonormal basis.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[209]:=",ExpressionUUID->"0e023f4d-15c7-4116-8afa-39d964b58fcd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactAssociationRepresentation", "::", "usage"}], "=", 
   "\"\<gaCompactAssociationRepresentation[expr, \
opt:gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\"] rewrites expr \
using compact index representation inside Association representations. In \
particular it replaces keys mvDownUp[{do__Integer},{}]:> mvDownUp[integer,0], \
where integer enumerates basis element in the gaNonCommutativeMonomialOrder \
ordered orthonormal basis.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[210]:=",ExpressionUUID->"cc7660da-f93a-4b11-98b7-294a8745ff3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[211]:=",ExpressionUUID->"ae83877f-7cbd-4270-93d0-66d35f040385"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation of non-commutativity and noncommutative element detection"
}], "Subsection",ExpressionUUID->"84a94e28-33d9-4608-9ab2-3fba6764580b"],

Cell[TextData[{
 "Common settings.  Explicitly declare all symbols i.e., ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ",",
 StyleBox["Power",
  FontWeight->"Bold"],
 ",etc... to be commutative by default. "
}], "Text",ExpressionUUID->"7f3389da-126f-43d9-9036-906ee06b1009"],

Cell[TextData[{
 "The gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " only tests commutativity of  the expressions head. The gaCommutativeAllQ",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "investigates entire expression looking at heads and arguments. If any part \
contains noncommutative head, result is \[OpenCurlyDoubleQuote]False\
\[CloseCurlyDoubleQuote]. So, gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " \[Subset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". We can define even more powerful operator ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 ", which will",
 StyleBox[" ",
  FontWeight->"Bold"],
 "look  if expression is a scalar (i.e. look for some specific inner products \
of multivectors).  Note that ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " might return",
 StyleBox[" True",
  FontWeight->"Bold"],
 " for expressions, which has ",
 StyleBox["noncommutative",
  FontWeight->"Bold"],
 " subexpressions! So  ",
 StyleBox["mvZeroGradeQ[ ] ",
  FontWeight->"Bold"],
 "\[NotSubset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"e77a1ef4-dc24-4e58-b49e-b1082062ee07"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeQ", "[", "_", "]"}], ":=", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{"_", "?", "NumericQ"}], "]"}], ":=", "True"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", "s_Symbol", "]"}], ":=", 
   RowBox[{"gaCommutativeQ", "[", "s", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeAllQ", "[", 
     RowBox[{"f_", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaCommutativeQ", "[", "f", "]"}], ",", 
      RowBox[{"Apply", "[", 
       RowBox[{"And", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"gaCommutativeAllQ", ",", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}]}], 
   ";"}], "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Derivatives", " ", "of", " ", "MV", " ", "are", " ", "handled", " ", 
     "separatelly"}], ",", " ", 
    RowBox[{"because", " ", 
     RowBox[{"gaCommutativeAllQ", "[", " ", "]"}], " ", "do", " ", "not", " ",
      "check", " ", "for", " ", "more", " ", "complex", " ", "structures", 
     " ", "like", " ", 
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "[", "y", "]"}]}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Derivative", "[", "_", "]"}], "[", "x___", "]"}], "[", "y___", 
     "]"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "y", "}"}]}], "]"}]}], ",", "False"}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[212]:=",ExpressionUUID->"d231b95c-c852-4d7b-8515-f1ba20bcb4b6"],

Cell["Set commutative and noncommutative operators.", "Text",ExpressionUUID->"602a1fe4-1181-4333-983b-75d21ac46128"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "False"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "False"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "True"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "True"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{
    "NonCommutativeMultiply", ",", "GeometricProduct", ",", "OuterProduct", 
     ",", "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
     "GP", ",", "OP", ",", "IP", ",", "LC", ",", "RC"}], "}"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[217]:=",ExpressionUUID->"7c656424-e49d-41fb-b7c5-184c4a404fcb"],

Cell["Set commutative and non-commutative objects. ", "Text",ExpressionUUID->"c14d5ef7-579f-4e65-9966-850bc9bbd4b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "[", 
   RowBox[{
    RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}], ",", "MV"}], 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[220]:=",ExpressionUUID->"228e3b1f-9bf9-486b-83ac-3b8160bc593f"],

Cell[TextData[{
 "Generally  ",
 StyleBox["False",
  FontWeight->"Bold"],
 "  of ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " can mean detection failure, even when expression do is scalar (say in the \
case  complicated inner product of multivectors). As a ",
 "res",
 "ult it cannot ensure that expression grade is zero, so only positive \
answers make sense and can be used as a test. Use gaGetGrade",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 " if you really want to know expression grade."
}], "Text",ExpressionUUID->"c9725c37-2783-4ca1-a0ab-48ae74b865da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"additionalTestFunction", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"additionalTestFunction", "[", "expr_", "]"}], ":=", "False"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[221]:=",ExpressionUUID->"bc9e2474-ae35-44e6-b03e-12d73e0fe706"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"gaCommutativeAllQ", "[", "expr", "]"}], ",", "True", ",", 
     RowBox[{"additionalTestFunction", "[", "expr", "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"fdc642c3-5ee6-4e9f-93f8-07493a8e4713"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Grade, index extraction from general expressions"
}], "Subsection",ExpressionUUID->"c4a8e051-e144-4158-b2de-282d927fc285"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for Times, Plus and non-elements"
}], "Subsubsection",ExpressionUUID->"8d2c1f00-591b-4b6d-bce1-3979b151deba"],

Cell["\<\
Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"33d1fd10-1528-43a7-a3cc-6765debe4dea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"_", "?", "NumericQ"}], "]"}], "]"}], ":=", 
    RowBox[{"{", "0", "}"}]}], " ", ";"}], 
  RowBox[{"(*", 
   RowBox[{"first", " ", "for", " ", "speed"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetGrade", "[", "expr_", "]"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"{", "0", "}"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"MV", "|", "bs", "|", "Association"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "only", " ", "multivectors", " ", "are", " ", "graded", " ", 
        "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetGrade", "[", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "d__"}], "]"}], "]"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"gaGetGrade", "[", 
         RowBox[{"Times", "[", "d", "]"}], "]"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "bs"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", " ", "expression", " ", "is", " ", "expanded"}], ",", " ", 
    RowBox[{"then", " ", 
     RowBox[{"(", 
      RowBox[{
      "unless", " ", "expr", " ", "contains", " ", "GA", " ", "products"}], 
      ")"}], " ", "Plus", " ", "means", " ", "that", " ", "in", " ", 
     "general", " ", "we", " ", "have", " ", "a", " ", "non", " ", 
     "homogeneus", " ", "multivector"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaGetGrade", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}], "]"}], "/;", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{"(", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract"}], ")"}], ",", 
       RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", " ", "expression", " ", "is", " ", "expanded"}], ",", " ", 
    RowBox[{
    "but", " ", "Plus", " ", "still", " ", "contains", " ", "GA", " ", 
     "product"}], ",", " ", 
    RowBox[{
    "we", " ", "need", " ", "gaPE", " ", "to", " ", "be", " ", "sure"}], ",", 
    " ", 
    RowBox[{
    "since", " ", "some", " ", "grades", " ", "after", " ", "expanion", " ", 
     "can", " ", "cancel"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "expandedExpr", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"expandedExpr", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"Plus", "[", "x", "]"}], "]"}], "]"}]}], ")"}], "===", 
         RowBox[{"Plus", "[", "x", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Union", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"gaGetGrade", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "expandedExpr", "]"}], "===", "Plus"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"gaGetGrade", "/@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "expandedExpr"}], ")"}]}], "]"}], "]"}], 
          ",", 
          RowBox[{"gaGetGrade", "[", "expandedExpr", "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"sometimes", " ", "failed", " ", "si"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"gaGetGrade", "/@", 
         RowBox[{"{", "x", "}"}]}], "]"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "[", "x", "]"}], "]"}], "===", 
       RowBox[{"Plus", "[", "x", "]"}]}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "[", "x", "]"}], "]"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "[", "x", "]"}], "]"}], "=!=", 
       RowBox[{"Plus", "[", "x", "]"}]}]}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[224]:=",ExpressionUUID->"31099284-9089-4878-b327-9dc5d024f9b7"],

Cell["Extracting all indices from all terms in a sum", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"5dd01ae6-8476-4293-8b60-30b6406fab22"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"gaGetIndex", "[", 
    RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
  RowBox[{"Union", "@@@", 
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{"gaGetIndex", "/@", 
      RowBox[{"{", "x", "}"}]}], ",", "mvDownUp"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[229]:=",ExpressionUUID->"40dede22-7242-4794-9a65-1e0b70e708b3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for OuterProduct"
}], "Subsubsection",ExpressionUUID->"c536075c-62a4-487c-8311-242064e6ecfb"],

Cell[TextData[{
 "Rules for ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ". It is assumed, that multivectors denoted by different letters are \
linearly independent. ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " itself ensures that there are no two identical vectors in ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " . All grades which are higher than vector space dimension are removed. "
}], "Text",ExpressionUUID->"b3cb14e0-eae7-4a61-92f5-005007cdf060"],

Cell[TextData[{
 "Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values. Note: gaGetGrade",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " ",
 "res",
 "ult depends on value of ",
 StyleBox["gaRunningAlgebra!",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"aa4d26bf-8478-4974-85df-1cb202f726d8"],

Cell["\<\
The general definition was suppressed, because it interfered with convertion \
into Association form. Hold it until gaAccociationForm will be improved.\
\>", "Text",ExpressionUUID->"73339649-8df3-4d46-8c39-6bdaab3888f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"OuterProduct", "[", "x__", "]"}], "]"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Outer", "[", 
        RowBox[{"Plus", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"(", 
           RowBox[{"gaGetGrade", "/@", 
            RowBox[{"{", "x", "}"}]}], ")"}]}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", ">", 
         RowBox[{"gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}]}], 
        "&"}], ")"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"1f8a9c8e-170e-490c-8138-411ae589c5b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for LeftContract, RightContract and InnerProduct"
}], "Subsubsection",ExpressionUUID->"9ca6c5e4-41b7-43e3-83c6-3953203d92f9"],

Cell["Not an easy task.", "Text",ExpressionUUID->"1f6c4d24-4f45-43a1-a7c6-50ed0a917256"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Taking parts of multivector "
}], "Subsection",ExpressionUUID->"a62900ed-b279-404b-81d8-85f9b651fb39"],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaGetMV",
 "[ ]",
 " extract from expression part of specified grade"
}], "Subsubsection",ExpressionUUID->"0a543b84-2e7f-434c-b124-a6be086d30ff"],

Cell[TextData[{
 StyleBox[" gaGetMV[ ]",
  FontWeight->"Bold"],
 " takes multivector of specified grade or index pattern (not the grade or \
index itself !) . First specific implementation for Association \
implementation. "
}], "Text",ExpressionUUID->"9094dc92-145d-45cd-aa4f-848ea85d5830"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"working", " ", "with", " ", "grades"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], 
          "]"}], ":=", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"res", "=", 
             RowBox[{"KeySelect", "[", 
              RowBox[{"arg", ",", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", "n", "}"}], ",", 
                  RowBox[{"(", 
                   RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ")"}]}], "]"}],
                 "&"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"res", "===", 
              RowBox[{"Association", "[", "]"}]}], ",", "0", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"res", ",", "other"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"res", "=", 
             RowBox[{"KeyTake", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"{", "ind", "}"}]}], "]"}]}], "}"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"res", "===", 
              RowBox[{"Association", "[", "]"}]}], ",", "0", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"res", ",", "other"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[230]:=",ExpressionUUID->"d85816dd-3d3a-4cf1-b21b-b92016e63bad"],

Cell["\<\
(the latest not yet implemented, may need to set Hold Rest attribute). 
If no multivector of requested grade is found return zero. Serve positive {} \
and negative Not[{}] requests.\
\>", "Text",ExpressionUUID->"e56b2386-5abf-432e-9968-b774c655fe62"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"working", " ", "with", " ", "grades"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "working", " ", "with", " ", "base", " ", "element", " ", "for", " ", 
       "convenience"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[231]:=",ExpressionUUID->"d082948a-1fd2-4ddf-92fe-e85f46d3e628"],

Cell["Take grades of multivector list", "Text",ExpressionUUID->"94a1a76b-c4d8-4d69-9b42-bcaae70300eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_List", "|", "_Plus"}], ")"}]}], ",", "what_"}], "]"}], ":=", 
   
   RowBox[{
    RowBox[{
     RowBox[{"gaGetMV", "[", 
      RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[232]:=",ExpressionUUID->"34801117-5e83-4a45-8694-4522fc882b5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{"expr_", ",", "what_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"gaPE", "[", "expr", "]"}], ",", "what"}], "]"}], ")"}], "/;", 
     RowBox[{"!", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}], "[", 
         RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[233]:=",ExpressionUUID->"98902828-a1f8-441c-b9ac-5d5efdd3a09c"],

Cell["Scalar part projection and expressions without indices", "Text",ExpressionUUID->"87e20aac-b4e0-4478-b9cd-428798323f78"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", "0"}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[234]:=",ExpressionUUID->"2f999dd2-eaba-410a-900a-557f15bab918"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "ind", "}"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"Not", "[", 
       RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "ind", "}"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], "]"}], ",", "a", ",", "0"}], "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[235]:=",ExpressionUUID->"64a44bcd-e25a-47e7-a838-0d4b5bf79efc"],

Cell["\<\
Without blocking baseSymbol, the below cell do not work properly, because \
baseSymbol[mvDownUp[{},{}],__] is replaced by 1.!!!\
\>", "Text",ExpressionUUID->"f7d2ad1e-e704-4011-aded-ed43a0a04307"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"a_", ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "baseSymbol", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "be", "}"}], ",", 
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}]}], 
           ",", "a", ",", "0"}], "]"}]}], "]"}], "/;", 
       RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"a_", ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "baseSymbol", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "be", "}"}], ",", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}], 
           ",", "a", ",", "0"}], "]"}]}], "]"}], "/;", 
       RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[237]:=",ExpressionUUID->"72a59e0c-b446-4a14-b983-25b0993e5cf2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Implementation", " ", "of", " ", 
     RowBox[{"Not", "[", 
      RowBox[{"{", "grades", "}"}], "]"}]}], ":", " ", 
    RowBox[{
    "find", " ", "all", " ", "possible", " ", "grades", " ", "and", " ", 
     "then", " ", "use", " ", "complement"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}],
         "]"}], ":=", 
       RowBox[{"expr", "/;", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", 
            RowBox[{"MV", "|", "baseSymbol"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
          RowBox[{"Not", "[", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", "0"}], "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", "n__Integer", "}"}], "]"}]}], "]"}], "]"}], ":=", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"gaGetGrade", "[", "expr", "]"}], ",", 
           RowBox[{"{", "n", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Return", " ", "0", " ", "if", " ", "no", " ", "grade", " ", 
        "listed"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", "0"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellLabel->
  "In[238]:=",ExpressionUUID->"26d193fc-3b02-4df0-b311-f19935f59b91"],

Cell["Commuting factors out, last remains", "Text",ExpressionUUID->"cf41bda3-7b88-4d6d-b5eb-d6a8f7d26924"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"a_", ",", "b__"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"Times", "[", "b", "]"}], ",", 
       RowBox[{"{", "n", "}"}]}], "]"}]}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[239]:=",ExpressionUUID->"6dd52d31-2b03-438a-af8b-7767510b45f8"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaGetMVComponents[ ] splits expanded expression into list of components."
}], "Subsubsection",ExpressionUUID->"4cf3f2c0-5917-4164-bf4f-cdca7c184238"],

Cell[TextData[{
 "Rewrite expanded expression as component list.  Currently ",
 StyleBox["gaGetMVComponents[]",
  FontWeight->"Bold"],
 " do not work if coefficients of MV contains quaternions: "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"20558c36-3664-40ab-b33b-7d7965b3b445"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMVComponents", "::", "basis"}], "=", 
   "\"\<Orthonormal basis of the algebra `1` in the ordering `2` is not \
defined or explicit ordering option is explicitly set to non matching value. \
\>\""}], ";", 
  RowBox[{
   RowBox[{"gaGetMVComponents", "::", "ordering"}], "=", 
   "\"\<gaRunningOrdering is `1` whereas the gaGetMVComponents ordering \
option is `2`. Surprises expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMVComponents", "::", "compactbasis"}], "=", 
   "\"\<gaRunningOrdering is `1` whereas the gaGetMVComponents ordering \
option is `2`. They have to match if gaCompactPlainRepresentation or \
gaCompactAssociationRepresentation is used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMVComponents", "::", "quaternion"}], "=", 
   "\"\<MV `1` contains quaternionic coefficients. Not implemented\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[240]:=",ExpressionUUID->"38bdbeb0-6e29-4c00-97f1-2f29b190a8b0"],

Cell["\<\
Getting components in noncompact representation. Both functions needs \
improvement for Point[] dependent!!! basis\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"fc5dc490-4cc8-408a-bc8c-011993c08b60"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGetMVComponents", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "gaRunningOrdering"}], ",", 
     RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[243]:=",ExpressionUUID->"69967c07-ef71-4430-8a81-d8a21805200a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGetMVComponents", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"FirstCase", "[", 
         RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}]}], 
       ",", "coeffs", ",", 
       RowBox[{"ord", "=", 
        RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
       ",", 
       RowBox[{"cf", "=", 
        RowBox[{"OptionValue", "[", "CoefficientFunction", "]"}]}], ",", 
       "theBasis"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", 
        RowBox[{"gaOrthonormalBasis", "[", "algebra", "]"}], " ", "is", " ", 
        "set"}], ",", " ", 
       RowBox[{
       "do", " ", "not", " ", "use", " ", "the", " ", "command", " ", 
        "default", " ", "ordering", " ", "option"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ord", "=!=", "gaRunningOrdering"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaGetMVComponents", "::", "ordering"}], ",", 
          "gaRunningOrdering", ",", "ord"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "down", " ", "only", " ", "indices", " ", "we", " ", "use",
         " ", "ordered", " ", "basis"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"theAlgebra", ",", "ord"}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{"gaOrthonormalBasis", "[", "theAlgebra", "]"}], "]"}], "===",
            "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaGetMVComponents", "::", "basis"}], ",", "theAlgebra", 
             ",", "ord"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}], ",", 
          RowBox[{"theBasis", "=", 
           RowBox[{"gaOrthonormalBasis", "[", "theAlgebra", "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"theBasis", "=", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", "ord"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"coeffs", "=", 
       RowBox[{"CoefficientArrays", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"theBasis", ",", "1"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "the", " ", "first", " ", "basis", " ", "element", " ", 
         "is", " ", "unity"}], ",", " ", 
        RowBox[{
        "we", " ", "put", " ", "the", " ", "scalar", " ", "in", " ", "the", 
         " ", "first", " ", "position"}], ",", " ", 
        RowBox[{
        "else", " ", "in", " ", "the", " ", "last", " ", "position"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"theBasis", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "===", "1"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"cf", "/@", 
           RowBox[{"Flatten", "[", "coeffs", "]"}]}], ")"}], "*", 
         "theBasis"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"cf", "/@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"RotateLeft", "[", "coeffs", "]"}], "]"}]}], ")"}], "*", 
         "theBasis"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "expr", "}"}], ",", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract", "|", "MV"}], ",", 
        RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], "&&", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "expr", "}"}], ",", 
        RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}], ")"}], "&&", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"_", ",", 
        RowBox[{"{", "__", "}"}]}], "]"}]}], "]"}], "&&", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}]}]}]], "Input",
 CellLabel->
  "In[244]:=",ExpressionUUID->"344452f5-3aa0-49ac-835f-edec00c70776"],

Cell["\<\
When there are also up indices we look for all basis elements inside \
expression without sorting. That case not yet finished: not clear how to \
proceed when sorting is desired\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"ff98eb19-3af0-40e7-afe1-b5cc0dfc45d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaGetMVComponents", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlgebra", "=", 
           RowBox[{"FirstCase", "[", 
            RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}]}], 
          ",", "coeffs", ",", 
          RowBox[{"ord", "=", 
           RowBox[{
           "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], ",", 
          
          RowBox[{"cf", "=", 
           RowBox[{"OptionValue", "[", "CoefficientFunction", "]"}]}], ",", 
          "theBasisWithoutScalar"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "if", " ", "there", " ", "are", " ", "also", " ", "up", " ", 
           "indices"}], ",", " ", 
          RowBox[{"then", " ", "we", " ", "have", " ", "problem"}], ",", " ", 
          
          RowBox[{
          "since", " ", "the", " ", "basis", " ", "elements", " ", "can", " ",
            "have", " ", "mixed", " ", "indices"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theBasisWithoutScalar", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"expr", "+", "Nothing"}], ",", "_bs", ",", "Infinity"}], 
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"coeffs", "=", 
          RowBox[{"CoefficientArrays", "[", 
           RowBox[{"expr", ",", "theBasisWithoutScalar"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"cf", "/@", 
              RowBox[{"Flatten", "[", "coeffs", "]"}]}], ")"}], "*", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", "theBasisWithoutScalar"}], "}"}], "]"}]}], 
           ",", "0"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract", "|", "MV"}], ",", 
           RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], "&&", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", 
           RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}], ")"}], "&&", 
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{"_", ",", 
            RowBox[{"{", "__", "}"}]}], "]"}]}], "]"}]}], "&&", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[245]:=",ExpressionUUID->"0cff690a-5d7f-4bff-a41c-b3a3d440baba"],

Cell["\<\
Getting components in compact representation: we construct the base manually \
in a simple way\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"c8c3e373-71e7-4b43-b30e-0ac149b1bde3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", 
    RowBox[{
     RowBox[{"gaGetMVComponents", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlgebra", "=", 
           RowBox[{"FirstCase", "[", 
            RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}]}], 
          ",", "coeffs", ",", 
          RowBox[{"cf", "=", 
           RowBox[{"OptionValue", "[", "CoefficientFunction", "]"}]}], ",", 
          RowBox[{"ord", "=", 
           RowBox[{
           "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], ",", 
          "indices", ",", "theBasis", ",", "restBasisParameters"}], "}"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ord", "=!=", "gaRunningOrdering"}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaGetMVComponents", "::", "compactbasis"}], ",", 
              "gaRunningOrdering", ",", "ord"}], "]"}], ";", " ", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"restBasisParameters", "=", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"FirstCase", "[", 
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlgebra", ",", "gaRunningOrdering"}], "]"}], ",", 
               "_bs"}], "]"}], ",", "2"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"construct", " ", "the", " ", "compact", " ", "basis"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"indices", "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"2", "^", 
             RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
            "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{"0", ",", 
               RowBox[{"_Integer", "?", "Positive"}]}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"theBasis", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"#", ",", "0"}], "]"}], ",", "theAlgebra", ",", 
                "restBasisParameters"}], "]"}], "&"}], "/@", "indices"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"theBasis", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"0", ",", "#"}], "]"}], ",", "theAlgebra", ",", 
                "restBasisParameters"}], "]"}], "&"}], "/@", "indices"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"coeffs", "=", 
          RowBox[{"CoefficientArrays", "[", 
           RowBox[{"expr", ",", "theBasis"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cf", "/@", 
            RowBox[{"Flatten", "[", "coeffs", "]"}]}], ")"}], "*", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "theBasis"}], "}"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract", "|", "MV"}], ",", 
          RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{"_List", ",", "_List"}], "]"}]}], "]"}], "&&", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}], ")"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[246]:=",ExpressionUUID->"fe8e12e2-fee0-4c9b-9f8d-576c546c53e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGetMVComponents", "[", 
   RowBox[{"expr_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaGetMVComponents", "::", "quaternion"}], ",", "expr"}], 
      "]"}], ";", 
     RowBox[{"Abort", "[", "]"}]}], ")"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", "\"\<Quaternion\>\""}], "]"}]}]}]}]], "Input",
 CellLabel->
  "In[247]:=",ExpressionUUID->"1e70b1c9-a246-4052-b455-4d9809ae7834"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Products notations and precedence implementation (based on modification \
of UnicodeSymbols.tr file)"
}], "Subsection",ExpressionUUID->"c9df98d3-ca60-4eb2-b344-c657f5b39844"],

Cell["\<\
Based on product precedence implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstPruduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\
\>", "Text",ExpressionUUID->"5c4c0480-ee81-45db-bdc4-93b9d8e5eda1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GP", "=", "GeometricProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OP", "=", "OuterProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LC", "=", "LeftContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RC", "=", "RightContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IP", "=", "InnerProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DP", "=", "DorstProduct"}], ";"}]}], "Input",
 CellLabel->
  "In[248]:=",ExpressionUUID->"8bb1937b-98d2-48aa-baab-e617ca9245d1"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make expressions"
}], "Subsubsection",ExpressionUUID->"967dea32-c1d9-41f3-a1ae-c0ce942bab83"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[DorstProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<DorstProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[InnerProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<InnerProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[LeftContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<LeftContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[RightContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<RightContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[OuterProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<OuterProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"x", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"PatternSequence", "[", 
          RowBox[{"\"\<\[GeometricProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<GeometricProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
         "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], "]"}]}],
     ",", "sf"}], "]"}]}]}], "Input",
 CellLabel->
  "In[254]:=",ExpressionUUID->"8323b868-11c1-4316-bdce-c335d8396994"],

Cell[TextData[{
 StyleBox["Known issue.",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 " If output is converted to ",
 StyleBox["InputForm[ ] ",
  FontWeight->"Bold"],
 "and then edited then result, for example as, ",
 StyleBox["Cell[\[OpenCurlyDoubleQuote]3*Sin[x]*e[mvDownUp[{1, 2, 3}, {}], \
Cl[3, 1, 0]]\[GeometricProduct]a\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Input\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 ", will not be correctly converted to expression. At the moment it is \
unclear how cells which contains no Box structures  (i.e., when cell content \
is single string) are interpreted. "
}], "Text",ExpressionUUID->"c71efdac-cd74-4b33-9ce3-7fab5f8e64a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make boxes"
}], "Subsubsection",ExpressionUUID->"b0bfdbb7-d6c0-41b6-bb13-66b36655b036"],

Cell[TextData[{
 "Make output boxes: use explicit brackets for multiple arguments according \
to precedence rules (use brackets for any lower precedence operations). \
Precedences are:  NonCommutativeMultiply (**, highest), Times (*, Space), \
RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), OuterProduct (\[OuterProduct], bad \
representation in text cells, input cells are ok.), GeometricProduct(\
\[GeometricProduct]), Plus (lowest).\n\nNote that ",
 StyleBox["Times",
  FontWeight->"Bold"],
 " have higher precedence than any of geometric products. This is somehow \
unusual assumption, however convenient one. These precedences  (except that \
of ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ") are used in many of books on GA (look for partial  list above), thought \
in some books precedences of ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " are reversed (for example, see Geometric Algebra by Eric Chisolm arXiv \
1205.5935v1). We prefer inner product to have highest priority, because from \
programming point of view we are happy to recognize scalars as soon as \
possible."
}], "Text",ExpressionUUID->"9c3003ed-0b98-437c-aa4d-040c08e607f1"],

Cell["Formatting expressions with single argument.", "Text",ExpressionUUID->"242d8632-58b1-4351-83b9-99ae75242b04"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "=!=", 
    "Plus"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<(\>\"", ",", 
      RowBox[{"MakeBoxes", "[", 
       RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "===", "Plus"}]}]}]}], "Input",
 CellLabel->
  "In[260]:=",ExpressionUUID->"54a536bc-217a-4d36-81f3-c20796f2b279"],

Cell["Formatting expressions with two arguments.", "Text",ExpressionUUID->"f4d9b477-3367-4439-88d9-dce9708e5327"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[RightContract]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[RightContract]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], 
          ",", "\"\<\[RightContract]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[RightContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
       "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[272]:=",ExpressionUUID->"bb7771a4-d74f-488f-8c5a-6ae12f746956"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[LeftContract]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[LeftContract]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[276]:=",ExpressionUUID->"b62a3453-aabf-4042-b007-24514f30e4ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[InnerProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[InnerProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[280]:=",ExpressionUUID->"36192cb6-8adb-4232-9aa7-50a863e14e09"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[DorstProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[DorstProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->
  "In[284]:=",ExpressionUUID->"37f7fd2c-a502-416a-b3a3-da396df64a9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[OuterProduct]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
          "\"\<\[OuterProduct]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
        "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
         "]"}]}], "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[288]:=",ExpressionUUID->"26b6263b-cfd6-429e-8f4b-918eeda80b37"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[GeometricProduct]\>\"",
          ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
      "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
         ",", "\"\<\[GeometricProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}]}], "Input",
 CellLabel->
  "In[292]:=",ExpressionUUID->"bd21d5f9-d937-47b5-a43c-f66bc7c77cc9"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricProduct,",
 " OuterProduct,  LeftContract and RightContract book keeping (general \
multivectors, no ordering rules)"
}], "Subsection",ExpressionUUID->"a8aceff9-a87b-42e5-8dfc-a90c786d9977"],

Cell[TextData[{
 " ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " book keeping . Unfortunately rules for differentiation operator ",
 StyleBox["mvD[ ]",
  FontWeight->"Bold"],
 " have to be given in a more complicated way."
}], "Text",ExpressionUUID->"5330e783-1866-4883-ae54-1ef2a1ca93d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "asociativity", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"GeometricProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], ";"}],
    " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "singlet", " ", "rule", " ", "applies", " ", "after", " ", "moving", " ", 
     "scalar", " ", "from", " ", "GeometricProduct"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"GeometricProduct", "[", "]"}], ":=", "1"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"when", " ", "e_", "1", "*", "e_", "1"}], " ", "->", 
     RowBox[{"1", " ", "we", " ", "are", " ", "left", " ", "empty"}]}], " ", 
    "*)"}]}]}]], "Input",
 CellLabel->
  "In[296]:=",ExpressionUUID->"83e5cb03-21f4-4caf-9e70-ca3ba5de882d"],

Cell[TextData[{
 "Even if argument is a scalar (i.e. satisfy gaGetGrade",
 StyleBox["[b]={0})",
  FontWeight->"Bold"],
 ", we do not move it out of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " (it is opposite to the case with ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 "). GeometricProduct properties with respect to base of  ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " are defined in Base expansion section."
}], "Text",ExpressionUUID->"ccd3f2e7-9148-4ecd-8fb4-712e2e5e0c70"],

Cell[TextData[{
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " book keeping . Ordering of rules is important. Here two possibilities \
exist how to interpret outer product of scalars. 1) Outer product of scalars \
is simply Times. This possibility implemented below.  In particularly \
HoldPattern[OuterProduct[a_]]:=a ; should be checked before commuting out \
properties, otherwise we can end with empty outer product.\n2) Outer product \
of scalars is zero. For this we need to move HoldPattern[OuterProduct[a_]]:=a \
in the end (before OuterProduct[]:=) and replace OuterProduct[]:=$Failed to \
OuterProduct[]:=0. Both variants correspond to general definition that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A", "r"], "\[OuterProduct]", 
     SubscriptBox["B", "s"]}], "=", 
    SubscriptBox["C", 
     RowBox[{"r", "+", "s"}]]}], TraditionalForm]],ExpressionUUID->
  "db565704-b40a-42d4-ab5c-f6e6f18df1d6"],
 ". The question needs further investigation."
}], "Text",ExpressionUUID->"b0a42307-735a-4360-a53a-761934847ac2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "asociativity", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"OuterProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"OuterProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"[", 
       RowBox[{"DH", "-", 
        RowBox[{"CA2GC1", ".22", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
     RowBox[{"singlet", " ", "rule"}], ",", " ", 
     RowBox[{
     "outer", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
      "scalar", " ", "behaves", " ", "like", " ", "geometric", " ", 
      "product"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OuterProduct", "[", "]"}], ":=", "$Failed"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "outer", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input",
 CellLabel->
  "In[301]:=",ExpressionUUID->"96f86582-6adb-4250-a80f-9bc25d05acf5"],

Cell[TextData[{
 StyleBox["Note.",
  FontColor->RGBColor[1, 0.5, 0]],
 " Rule OuterProduct[A,A]->0 is only valid if A is pure product. If A is a \
sum of different grades, then the product is NOT zero!"
}], "Text",ExpressionUUID->"252d3d30-e0a6-4528-880d-d5796471fdb1"],

Cell[TextData[{
 StyleBox["LeftContract",
  FontWeight->"Bold"],
 "  (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[LeftContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]],ExpressionUUID->
  "f4cd06f1-4552-451b-ac2b-b043de711a27"],
 ")and ",
 StyleBox["RightContract ",
  FontWeight->"Bold"],
 " (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[RightContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]],ExpressionUUID->
  "b75b712a-a2c9-4d06-89b5-0e6ba722b2a0"],
 ")book keeping .  Both products are not associative (a\[CenterDot]b\
\[CenterDot]c syntax is undefined, i.e. forbidden). Nevertheless the rules \
below are shorter when written for multiple arguments (programming trick)"
}], "Text",ExpressionUUID->"92e30106-00ff-47f0-99fd-a4df8bec1d5a"],

Cell[TextData[{
 "List of equal blades are scalars.  These scalars are detected by ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " condition."
}], "Text",ExpressionUUID->"81b9dc61-8531-4e06-960b-3c6cbf234918"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"RightContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "d", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "RightContract", " ", "with", " ", "right", " ", "scalar", " ", "is", " ", 
    "simple", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "a", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "b_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "a_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], " ",
    ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input",
 CellLabel->
  "In[306]:=",ExpressionUUID->"358a07af-05de-4b55-9ffe-86a8abc9074c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"LeftContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "c", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "LeftContract", " ", "with", " ", "left", " ", "scalar", " ", "is", " ", 
    "simply", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "b", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "a_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "b_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input",
 CellLabel->
  "In[310]:=",ExpressionUUID->"0b5b3de3-17d5-46a1-a471-da7eb1565938"],

Cell[TextData[{
 "The ",
 StyleBox[" InnerProduct[ ] ",
  FontWeight->"Bold"],
 "treats scalars differently! If singlet appears in ",
 StyleBox["InnerProduct[ ]",
  FontWeight->"Bold"],
 ", this means we had multiplication with scalar. Then result should be set \
to zero."
}], "Text",ExpressionUUID->"0f74d4ad-5b8d-498a-a244-85d3981dcd46"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", 
     RowBox[{"a___", ",", 
      RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"b", ",", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "]"}], "/;", 
    RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"InnerProduct", "[", 
      RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Times", "[", 
      RowBox[{"b", ",", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "c"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"CA2GC1", ".21", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
    RowBox[{"singlet", " ", "rule"}], ",", " ", 
    RowBox[{
    "inner", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
     "scalar", " ", "gives", " ", "0"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", "a_", "]"}], "]"}], ":=", "0"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[314]:=",ExpressionUUID->"5e89b10f-1684-48ab-81bc-fd567460ae6b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricMatrixProduct,",
 " OuterMatrixProduct "
}], "Subsection",ExpressionUUID->"7695be57-3f3b-44a9-8a8b-5c23e4b265a4"],

Cell[TextData[{
 "Procedure to multiply matrices of multivectors. Implementation is taken \
from Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text",ExpressionUUID->"4a350b32-9138-4aa9-84a0-a5b38f27dec1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{"gaGeometricMatrixProduct", ",", "gaOuterMatrixProduct"}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[317]:=",ExpressionUUID->"9a64fc49-d22e-4a1c-a972-af4534f920c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"GeometricProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaGeometricMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", "A_", "]"}], ":=", "A"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[318]:=",ExpressionUUID->"8a86b558-6cec-48be-bbf1-3bf037f613fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"OuterProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaOuterMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[321]:=",ExpressionUUID->"48207d98-fe2d-4efd-b855-fe98cce579b0"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation and book keeping for geometric, outer products in \
orthonormal base."
}], "Subsection",ExpressionUUID->"85654450-a970-4086-9d91-06c19b83cdcb"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Tools to analyse compilation to C problems (unevaluatable by default, \
useful in the case of compilation problems)"
}], "Subsubsection",ExpressionUUID->"e2f24493-7542-43db-b94b-2ea51686d25b"],

Cell["\<\
For example after upgrade to ubuntu 14.04 I had to make symbolic link of \
/lib/libgcc_s.so link to /lib/i386-linux-gnu.\
\>", "Text",ExpressionUUID->"6c119003-b38f-4dd8-af42-f61c17389d9c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"00654b36-7ee8-4f6d-a8a8-430e98085f71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"d2ca4bfe-e20f-4e6a-9da7-b4ff1e1b74a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellCommandFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{"Compile", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", "x", "}"}], "}"}], ",", 
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"8338534b-f278-44c8-9dd1-65b24649a503"],

Cell[BoxData["\<\"/usr/bin/gcc -shared -o \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.so\\\" -m32 -fPIC -O2 \
-D\\\"MINT_32\\\" \
-I\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/IncludeFiles/C\\\" -I\\\
\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/DeveloperKit/\
Linux/CompilerAdditions\\\" \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.c\\\"  \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/\
DeveloperKit/Linux/CompilerAdditions\\\" \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Libraries/Linux\\\"    \
2>&1\"\>"], "Print",ExpressionUUID->"7c9d16fb-0a14-4446-b80a-ad96e4c9da0b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               PaneBox[
                RowBox[{"{", "_Real", "}"}],
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               RowBox[{"{", "_Real", "}"}],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Variables: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", "x", "}"}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Expression: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               SuperscriptBox["x", "2"],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{10, 10.2, 5468}, {
    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
   0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {1}}, 
   Function[{$CellContext`x}, $CellContext`x^2], Evaluate, 
   LibraryFunction[
   "/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/compiledFunction0.so", "compiledFunction0", {{Real, 0, "Constant"}}, 
    Real]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",ExpressionUUID->"92fa9612-8704-42c7-85e4-\
4c1f8f86a731"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellOutputFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", "x", "}"}], "}"}], ",", 
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], 
  ";"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"d70f5406-c802-46fa-afee-be23e606e6f7"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Subset counting functions"
}], "Subsubsection",ExpressionUUID->"14de2333-5152-4197-8ae7-ee605722393c"],

Cell[TextData[{
 "Counts  elements of subset j that are greater than nonnegative integer i. j \
is subset of natural numbers. Replace  to byte compiled function (WVM) if \
user uses older Mma version, for which compilation to C is not possible. When \
using ",
 StyleBox["Compile`GetElement",
  FontWeight->"Bold"],
 " you need also to include ",
 StyleBox["\[OpenCurlyDoubleQuote]RuntimeOptions\[CloseCurlyDoubleQuote]\
\[Rule]\[CloseCurlyDoubleQuote]Speed\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " option."
}], "Text",ExpressionUUID->"3ea69762-6a84-442f-aa16-e4c99563a62c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMu", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Part", "=", "Compile`GetElement"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sum", "=", "0"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"j", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
                 RowBox[{"sum", "++"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
             "sum"}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvMu", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Part", "=", "Compile`GetElement"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sum", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"j", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
                RowBox[{"sum", "++"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
            "sum"}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[323]:=",ExpressionUUID->"056a8a0d-d52a-47d2-ad44-57e1bdc00726"],

Cell["\<\
Counts total number of  elements of subset j that are greater of  each of \
integers, listed in the list i.  \
\>", "Text",ExpressionUUID->"86b48b07-c41b-4d00-b0e6-a1b21633887e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMuS", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"Part", "=", "Compile`GetElement"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sum", "=", "0"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"sum", "=", 
                RowBox[{"sum", "+", 
                 RowBox[{"mvMu", "[", 
                  RowBox[{
                   RowBox[{"j", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
             "sum"}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvMuS", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"Part", "=", "Compile`GetElement"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sum", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"sum", "=", 
               RowBox[{"sum", "+", 
                RowBox[{"mvMu", "[", 
                 RowBox[{
                  RowBox[{"j", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
            "sum"}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[324]:=",ExpressionUUID->"6587a7b3-fa74-4469-aa5b-8d243aff74b0"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Various products signature maps, see ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " package implementation"
}], "Subsubsection",ExpressionUUID->"5d97638b-a6bc-47bf-9962-cc2d1685e6f6"],

Cell[CellGroupData[{

Cell["\<\
Geometric product signature map (used to compute GeometricProduct)\
\>", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"829aad39-3e08-4363-9dcf-ec9c2acbb933"],

Cell["\<\
Geometric product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"db996de3-b64e-401e-ab90-6069c72cc9da"],

Cell["\<\
When both  down and up indices present we need take into account index number \
difference between initial and contracted upper index sets (we calculate \
everything using down indices). Note that term \
(-1)^(mvMu[gap,Join[{j1},{j2}]] + mvMu[gap,Join[{j1},{j2}]]) was dropped, \
because it comes twice (once, because we indices down, and second when count \
repeated indices which are both up, i.e. in that case remove from \
intersecting up and down indices that with negative signature)  \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"854dba88-575b-4965-b734-24f13664aeea"],

Cell["\<\
We put all calls to different product signature maps into same command \
productSignatureMap[ ], because then we can pass the function in the same \
form for different products (in particularly this simplifies implementation \
of multiplications of MV in association form)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"212b8c4d-3c6d-431f-b34c-ee6befc4f4af"],

Cell[TextData[{
 "Compiled versions. Note that options ",
 StyleBox["CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]\
ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]False,\
\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]\
True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True},",
  FontWeight->"Bold"],
 " spoils correct inlining of compiled code (slow ",
 StyleBox["CopyTensor[ ]",
  FontWeight->"Bold"],
 " appears inside \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] compiled \
code). Here inlining is achieved using With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"28a4ab7c-01b8-49ad-a117-886d302f6f89"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"memorizeProducts", ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"with", " ", "memorization"}], " ", "*)"}], 
     RowBox[{
      RowBox[{
       RowBox[{"productSignatureMap", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i1___Integer", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i2___Integer", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"gap_", ",", "gaq_", ",", 
           RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"productSignatureMap", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"gap", ",", "gaq", ",", "gar"}], "]"}]}], "]"}], "=", 
         RowBox[{"mvProductSignatureMapC", "[", 
          RowBox[{
           RowBox[{"{", "i1", "}"}], ",", 
           RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], 
        ")"}]}], ";"}], "\[IndentingNewLine]", ",", 
     RowBox[{"(*", " ", 
      RowBox[{"without", " ", "memorization"}], " ", "*)"}], 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"productSignatureMap", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i2___Integer", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"gap_", ",", "gaq_", ",", 
            RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
       RowBox[{"mvProductSignatureMapC", "[", 
        RowBox[{
         RowBox[{"{", "i1", "}"}], ",", 
         RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}]}],
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Never", " ", "try", " ", "to", " ", "memorize", " ", "product", " ", 
    "with", " ", "up", " ", "and", " ", "mixed", " ", "indices", " ", "in", 
    " ", "order", " ", "to", " ", "save", " ", "memory"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "GeometricProduct",
        ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"gap_", ",", "gaq_", ",", 
         RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "both"}], ",", " ", 
    RowBox[{"down", " ", "and", " ", "up", " ", "indices", " ", "present"}], 
    ",", " ", 
    RowBox[{
    "signature", " ", "is", " ", "calculated", " ", "from", " ", "Union", " ",
      "of", " ", 
     RowBox[{"indices", "!"}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "GeometricProduct",
        ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"gap_", ",", "gaq_", ",", 
         RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"mvProductSignatureMapC", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i1", "}"}], ",", 
          RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i2", "}"}], ",", 
          RowBox[{"{", "j2", "}"}]}], "]"}], ",", "gap", ",", "gaq"}], "]"}], 
      "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "j1", "}"}]}], "]"}]}], "]"}], "+", 
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ")"}]}]}], ")"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvProductSignatureMapC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"intesectionIJ", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mvMu", "[", 
                RowBox[{
                 RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
                "0"}], ",", "0", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"mvMuS", "[", 
                  RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
                 RowBox[{"mvMu", "[", 
                  RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvProductSignatureMapC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"intesectionIJ", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mvMu", "[", 
               RowBox[{
                RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
               "0"}], ",", "0", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"mvMuS", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
                RowBox[{"mvMu", "[", 
                 RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
            "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[325]:=",ExpressionUUID->"2866123b-71e6-4500-b680-c8de0c7f06e8"],

Cell["\<\
If compact representation is used we recompute the mappings using plain \
Additive representation commands above\
\>", "Text",ExpressionUUID->"c4568d30-c21f-4b9f-b6aa-cc0a49d0cb45"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", "GeometricProduct", ",", 
     "alg_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "alg"}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[329]:=",ExpressionUUID->"06dc5628-111e-4101-beea-b872d1160f1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", "GeometricProduct", ",", 
     "alg_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"alg", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", "GeometricProduct", ",", "alg"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[330]:=",ExpressionUUID->"0325b2ad-41d0-4a9e-ab18-2ddde716dc81"]
}, Closed]],

Cell[CellGroupData[{

Cell["Alternating product signature map (not used at the moment)", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"109455b9-911c-4e1f-b69c-d50257d10caf"],

Cell["\<\
Alternating product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. Alternating Product \
Signature map at the moment is not used (evaluation suppressed to save time). \
It could be potentially useful for determination if two basis elements \
commutes. e_i e_j  -e_j e_i then should yield 0 for this simplest product \
signature and the commutation result should not depend on GA signature. The \
signature map was not adopted for mixed up and down indices.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"a5a7ae99-b472-431b-b5fc-af5d2723292d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "i1", "}"}], ",", 
       RowBox[{"{", "i2", "}"}]}], "]"}], "*", 
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "j1", "}"}], ",", 
       RowBox[{"{", "j2", "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"sum", "=", "0"}], ",", 
               RowBox[{"intesectionIJ", "=", 
                RowBox[{"Intersection", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"OddQ", "[", 
                   RowBox[{"intesectionIJ", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"sum", "=", 
                   RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", 
                  RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
               "]"}], ";", "sum"}]}], "]"}]}], ")"}]}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAltProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"mvMuS", "[", 
           RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"sum", "=", "0"}], ",", 
              RowBox[{"intesectionIJ", "=", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", 
                  RowBox[{"intesectionIJ", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                 RowBox[{"sum", "=", 
                  RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
              "]"}], ";", "sum"}]}], "]"}]}], ")"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"6d028b5e-1c98-46aa-9585-1fa40f4fdde1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Antisymmetric product signature map (used to compute OuterProduct)\
\>", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"052cb297-b77a-40dd-b62c-5b90d4bc3c2e"],

Cell["\<\
Antisymmetric product signature map. Assumes natural index ordering. Down \
only and Up only cases are matched separately for speed.  \
AntisymmetricProductSignatureMap  in the presence of both up and down indices \
is calculated of the union of indices. Contrary to productSignatureMap no \
additional sign correction here.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"3a1e7fed-422f-4667-90a1-42b708a91152"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", "OuterProduct", ",", "___"}], 
      "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "OuterProduct", 
       ",", "___"}], "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "OuterProduct", 
       ",", "___"}], "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"mvMu", "[", 
              RowBox[{"0", ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
            "0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{"mvMuS", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mvMu", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Intersection", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
           "0", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{"mvMuS", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[331]:=",ExpressionUUID->"a4521bb2-27fb-4506-9791-910a06308c07"],

Cell["\<\
If compact representation is used we recompute the mappings using plain \
Additive representation commands above\
\>", "Text",ExpressionUUID->"bb635bfe-d382-4941-8012-b3395590a9cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", "OuterProduct", ",", 
     "___"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "OuterProduct"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[335]:=",ExpressionUUID->"8784d2a7-f062-422f-8810-d68d587f3ca1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", "OuterProduct", ",", 
     "___"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
        "]"}]}], "]"}], ",", "OuterProduct"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[336]:=",ExpressionUUID->"5c35e9e1-2974-4e22-b01f-83077ce9558a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Inner products signature maps are replaced by Geometric product signature map\
\
\>", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10004.},ExpressionUUID->"0c5ad0b3-e3c8-446a-b8d2-79ee3aa2bac6"],

Cell["\<\
LeftContract and RightContract product signature map is replaced by \
GeometricProduct signature map \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10004.},ExpressionUUID->"ab5525bb-473a-453b-a6af-611a68d264e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i1___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i2___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "LeftContract", ",", "al_Cl"}], 
    "]"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"{", "i1", "}"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"{", "i1", "}"}], "]"}], "]"}]}], ",", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
     "]"}], ",", "0"}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.},
 CellLabel->
  "In[337]:=",ExpressionUUID->"4ff53f18-931f-4943-a2ee-2e61287e832b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i1___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i2___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "RightContract", ",", "al_Cl"}], 
    "]"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"{", "i1", "}"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"{", "i2", "}"}], "]"}], "]"}]}], ",", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
     "]"}], ",", "0"}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.},
 CellLabel->
  "In[338]:=",ExpressionUUID->"2bd666eb-a136-4743-b578-5f29dbea0975"],

Cell["\<\
Hestenes inner product signature map needs to be adjusted to ensure, that \
inner multiplication by scalar gives 0, unless we multiply two scalars. This \
is ensured by more complicated test inside If[ ] statement\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10004.},ExpressionUUID->"a3ccd934-a7a1-473f-9443-b28f5f2e1345"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "InnerProduct", ",", "al_Cl"}], 
     "]"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"{", "i1", "}"}], "]"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"len", "===", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"{", "i1", "}"}], "]"}], "]"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"len", "===", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"{", "i2", "}"}], "]"}], "]"}]}], ")"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i1", "}"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i2", "}"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i1", "}"}], "===", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i2", "}"}], "===", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"productSignatureMap", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i1", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i2", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
        "]"}], ",", "0"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.},
 CellLabel->
  "In[339]:=",ExpressionUUID->"d1bf0dc2-8754-4186-896a-dfc276665fc2"],

Cell["\<\
If compact representation is used we recompute the mappings using plain \
Additive representation commands above\
\>", "Text",ExpressionUUID->"c107d3a7-65aa-48be-8ff8-a5894333eaaf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{"LeftContract", "|", "RightContract", "|", "InnerProduct"}], 
       ")"}]}], ",", "al_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "h", ",", "al"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[340]:=",ExpressionUUID->"3322879b-e4a9-41a1-88dc-55a832950a43"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{"LeftContract", "|", "RightContract", "|", "InnerProduct"}], 
       ")"}]}], ",", "al_Cl"}], "]"}], ":=", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i1", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"Replace", "[", 
        RowBox[{"i2", ",", 
         RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
          RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], "]"}], 
     ",", "h", ",", "al"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[341]:=",ExpressionUUID->"7c60e1fb-9cd9-4a98-8744-f9473ebb8a57"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Set symmetric difference function"
}], "Subsubsection",ExpressionUUID->"d81635c8-8de8-4f33-852f-7a9068b7c98e"],

Cell[TextData[{
 "Set symmetric difference function coincides with  Staples ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " implementation. Compilation of this function is not worthy (speedup is \
negligible). It is preferable to have one name for different products, \
therefore we renamed it as ",
 StyleBox["productIndex[i,j,GeometricProduct|OuterProduct]",
  FontWeight->"Bold"]
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"fa1e69b3-e8a8-4369-aef7-ad50a1b71c85"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"iI_List", ",", "jJ_List"}], "]"}], "]"}], ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[342]:=",ExpressionUUID->"ec2a8ef9-4a7f-4273-9768-a0fe524c1905"],

Cell[TextData[{
 "Cannot apply the symmetric difference, ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Intersection[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " directly, because indices are inside ",
 StyleBox["mvDownUp[ ] ",
  FontWeight->"Bold"],
 "container. Therefore we need intermediate layer. When only down or up \
indices present, we simply pass corresponding functions to lists of integers"
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"51c92034-3f12-496f-8730-5abe2aef0613"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct"}], "]"}], "=", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{
      RowBox[{"mvSetSymmetricDifference", "[", 
       RowBox[{"i1", ",", "i2"}], "]"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[343]:=",ExpressionUUID->"89e1f5cd-7dae-4686-a83b-10e0fc105b6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j2_List"}], "]"}], ",", "GeometricProduct"}],
     "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "j2"}], "]"}], ",", "GeometricProduct"}], 
     "]"}], "=", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"mvSetSymmetricDifference", "[", 
       RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[344]:=",ExpressionUUID->"672d679c-6efa-424d-97e9-db1031d0c155"],

Cell[TextData[{
 "When both type of indices present, then we have to find set symmetric \
difference of common index set. In addition we have to remember which indices \
are down and what are up. Note that ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " automatically sorts integers."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"c445d15b-00b3-41f5-8443-ca5c4567a6cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "GeometricProduct"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    "=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ssd", "=", 
        RowBox[{"mvSetSymmetricDifference", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"i1", ",", "j1"}], "]"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"Intersection", "[", 
         RowBox[{"ssd", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"i1", ",", "i2"}], "]"}]}], "]"}], ",", 
        RowBox[{"Intersection", "[", 
         RowBox[{"ssd", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[345]:=",ExpressionUUID->"45c72040-5346-4b64-b018-29c845039c75"],

Cell["For outer product the function is simple", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"53cc7b76-4d21-480c-afd5-0e02ebf6664a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "OuterProduct"}], 
    "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"Union", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[346]:=",ExpressionUUID->"aa89f28e-74a9-432a-a7d5-dac1c5802503"],

Cell["\<\
For LeftContract and RightContract product the productIndex is substituted by \
GeometricProduct\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"be1e035c-5046-4245-b654-b9ce10d4a12a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "LeftContract"}], "]"}],
   ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"i1", ",", "j1"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], "]"}]}], ",", 
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    ",", "0"}], "]"}]}]], "Input",
 CellLabel->
  "In[347]:=",ExpressionUUID->"4bc3a8f9-2ddd-40d6-a190-970e7b0e7be2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "RightContract"}], 
   "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"i1", ",", "j1"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], "]"}]}], ",", 
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    ",", "0"}], "]"}]}]], "Input",
 CellLabel->
  "In[348]:=",ExpressionUUID->"15f3191a-397d-41cc-bcdf-ee744a75761f"],

Cell["\<\
The index set for inner product is NOT the same as for geometric product.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"acd7f983-37e6-4cdc-9347-c16819a9548d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "InnerProduct"}], "]"}],
   ":=", 
  RowBox[{"mvDownUp", "[", 
   RowBox[{
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"i1", ",", "i2"}], "]"}], ",", 
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[349]:=",ExpressionUUID->"88397326-d5b5-43ee-98b4-024e9d1c3f02"],

Cell["\<\
For compact representation  we recompute the mappings using plain Additive \
representation commands above\
\>", "Text",ExpressionUUID->"c0b5bac7-3af4-4c8c-9b40-2c8e306b9105"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_Integer", ",", "0"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"compactRepresentationReplacementRules", "[", 
         RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
       "]"}], "&"}], "/@", "\[IndentingNewLine]", 
     RowBox[{"productIndex", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{"i1", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{"i2", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", "h"}], "]"}]}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[350]:=",ExpressionUUID->"d470ece5-6b9a-4a11-9b64-1aca2636c05b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i1_Integer"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "i2_Integer"}], "]"}], ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"compactRepresentationReplacementRules", "[", 
         RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
       "]"}], "&"}], "/@", "\[IndentingNewLine]", 
     RowBox[{"productIndex", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Replace", "[", 
          RowBox[{"i1", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Replace", "[", 
          RowBox[{"i2", ",", 
           RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
            RowBox[{"gaRunningAlgebra", ",", "gaRunningOrdering"}], "]"}]}], 
          "]"}]}], "]"}], ",", "h"}], "]"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[351]:=",ExpressionUUID->"6ffb0be9-e434-4c53-8aeb-388557aa7851"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric product for basis multivectors"
}], "Subsubsection",ExpressionUUID->"602ab620-c63f-46ce-9af1-a8bfe920b639"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",ExpressionUUID->"5374b4dd-68e0-4c86-933e-9d5c2ef7c3f9"],

Cell["\<\
Fourth argument ignoreMe is needed when calculating gaTensorProduct of same \
Clifford algebras. It adds unique identifier which prevents mixing of \
different algebras base elements. Note, that in the result we keep the mark \
ignoreMe. This has an application in realization of multiplication of \
quaternions, which we want to be different from Cl[0,2] algebra base \
elements. Memorization of base element multiplication in additive \
representation was removed, since now we have much faster Association \
representation  for which we keep memorization option. \
\>", "Text",ExpressionUUID->"38a71231-42fd-4520-8561-f2d1697414a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ssd", "=", 
         RowBox[{"productIndex", "[", 
          RowBox[{"du1", ",", "du2", ",", "GeometricProduct"}], "]"}]}], 
        "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ssd", "===", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{"ssd", "===", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{"0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "GeometricProduct", ",", "al"}], 
            "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "GeometricProduct", ",", "al"}], 
            "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"ssd", ",", "al", ",", "ignoreMe"}], "]"}], ",", 
             "other2"}], "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[352]:=",ExpressionUUID->"2d82903a-0ba8-452a-b1b3-679e3df9d3e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Outer product for basis multivectors"
}], "Subsubsection",ExpressionUUID->"81c4db85-e744-436d-8d84-2fda9df44134"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples,",
 ButtonBox[" [SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4936ce43-ec1a-44ff-90c6-864dd3ea56f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", 
        "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"duu", "=", 
         RowBox[{"productIndex", "[", 
          RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"duu", "===", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"duu", ",", "al"}], "]"}], ",", "other2"}], "]"}]}], 
          "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[353]:=",ExpressionUUID->"5ed0c813-9ace-4b35-8b74-6f28c6db4842"],

Cell[BoxData[""], "Input",
 CellLabel->
  "In[354]:=",ExpressionUUID->"d27fb44b-fdf5-41bd-8d0c-e698f5792fe9"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left and Right contract and InnerProduct for basis multivectors"
}], "Subsubsection",ExpressionUUID->"b29d3395-8734-48c6-9de1-f8d0b643401b"],

Cell["LeftContract for two base elements", "Text",ExpressionUUID->"ccfb5ffa-9966-4f3c-8517-6ffa8d38153d"],

Cell["\<\
The definition assumes that we are dealing with Hestenes \
\[OpenCurlyDoubleQuote]mother algebra\[CloseCurlyDoubleQuote] (see C. Doran, \
D. Hestenes, F. Sommen and N. Van Acker, \[OpenCurlyDoubleQuote]Lie groups as \
spin groups\[CloseCurlyDoubleQuote], J. Math. Phys. 34 (8), 1993, pp \
3642-3669.\
\>", "Text",ExpressionUUID->"c3aebbbd-4044-4685-a57d-c7979dba5547"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testIndexUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"du1_List", ",", "du2_List"}], "]"}], ",", "___"}], "]"}], ":=", 
   RowBox[{"Union", "[", 
    RowBox[{"du1", ",", "du2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testIndexUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"du1_Integer", ",", "0"}], "]"}], ",", "al_"}], "]"}], ":=", 
   RowBox[{"Replace", "[", 
    RowBox[{"du1", ",", 
     RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
      RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testIndexUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"0", ",", "du1_Integer"}], "]"}], ",", "al_"}], "]"}], ":=", 
   RowBox[{"Replace", "[", 
    RowBox[{"du1", ",", 
     RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
      RowBox[{"al", ",", "gaRunningOrdering"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[355]:=",ExpressionUUID->"6c42c073-88d0-4689-87db-1403aaabba28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"LeftContract", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"testIndexUnion", "[", 
             RowBox[{"du1", ",", "al"}], "]"}], ",", 
            RowBox[{"testIndexUnion", "[", 
             RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], "]"}], "===", 
         RowBox[{"Length", "[", 
          RowBox[{"testIndexUnion", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], "]"}]}], ",", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}], 
     " ", ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[358]:=",ExpressionUUID->"e2e5cce5-5a33-4928-85ee-0a6fa49aaabd"],

Cell["RightContract for two base elements", "Text",ExpressionUUID->"a7781fed-513f-40d4-82aa-1ec259a79744"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"RightContract", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"testIndexUnion", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], ",", 
           RowBox[{"testIndexUnion", "[", 
            RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], "]"}], "===", 
        RowBox[{"Length", "[", 
         RowBox[{"testIndexUnion", "[", 
          RowBox[{"du2", ",", "al"}], "]"}], "]"}]}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1", ",", "al"}], "]"}], ",", 
         RowBox[{"bs", "[", 
          RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}]}], 
   " ", "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[359]:=",ExpressionUUID->"dc0fd9f1-4764-4a15-89a3-97c72bc5181a"],

Cell["Hestenes inner product for base elements", "Text",ExpressionUUID->"b2efd4b9-771c-45a8-a5f5-f6a08af68345"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<=", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du2", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"LeftContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", 
        RowBox[{"RightContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[360]:=",ExpressionUUID->"af1d9480-3ea8-4624-b40d-bbe6bf7f46fa"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Expansions and conversions between different products"
}], "Subsection",ExpressionUUID->"9842db4f-7771-4a2c-a368-bdec5ed23ca8"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector (orthonormal basis) representation  in ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s Association form "
}], "Subsubsection",ExpressionUUID->"f6a2b87b-9402-467a-b60e-fe0f7dfa7061"],

Cell["\<\
This section adds new internal representation of multivector (in orthonormal \
base) as an Association object (associative array) <| keys ->values|>. This \
representation is  preferable when taking grades and manipulating structure \
of multivector (taking components, etc...). Association representation is \
extremely convenient in expanding multivector products with \
PrecomputedPairProduct method. \
\>", "Text",ExpressionUUID->"4e6b59c2-fcdc-4a5c-b25a-af456f2b083b"],

Cell[TextData[{
 "Commands ",
 StyleBox["gaAssociationRepresentation[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 " converts between additive and association representations (from \
mathematical point of view both of them are \[OpenCurlyDoubleQuote]additive\
\[CloseCurlyDoubleQuote] representations).  ",
 StyleBox["gaAssociationRepresentation",
  FontWeight->"Bold"],
 "[ ] still needs serious improvements both in speed and conversion quality \
(not an easy task)."
}], "Text",ExpressionUUID->"73149cf0-6e09-4b6d-bf54-aab072a074f4"],

Cell[TextData[{
 "Conversion from simple (natural) additive representation is more \
complicated (simpler solution get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " pattern matcher mad with more complex input).  ",
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 " is simple. Associations only implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version 10 or higher. Only then we define  additional functions \
gaAssociationTogether",
 StyleBox["[ ],",
  FontWeight->"Bold"],
 " ",
 StyleBox["gaAssociationRepresentatio[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",ExpressionUUID->"cbcd8db5-7c82-4d01-88aa-1b9b8ac5656a"],

Cell["\<\
Better strategy is to  make the replacement upside down, i.e. instead of \
ReplaceRepeated, which works from up level to down level (with increasing \
depth) to use Replace[exp,{All}], which goes from down to up.  \
\>", "Text",ExpressionUUID->"b5e59ea4-41e0-41a2-968b-32cb72b2341e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaAssociationRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PreprocessingRules", "\[Rule]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{
          "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
           "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"arg_Plus", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"arg", "+", "Nothing"}], ",", "_bs"}], "]"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Nothing", "\[Rule]", "0"}], "}"}]}], ")"}], "/;", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"arg", ",", "_bs"}], "]"}]}]}]}], "}"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], ",", 
     RowBox[{"Check", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationRepresentation", "::", "notcompleted"}], "=", 
   "\"\<Warning! Unable to check if conversion to Association was \
successfull. Your can avoid the check using option Check->False. The last \
step was `1`.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[361]:=",ExpressionUUID->"0816fdb1-96f7-4f58-8044-ee9d607f3349"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"replaceRepeatedInDepthFirst", "[", 
      RowBox[{"expr_", ",", "rule_List"}], "]"}], ":=", 
     RowBox[{"FixedPoint", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Replace", "[", 
         RowBox[{"#", ",", "rule", ",", "All"}], "]"}], "&"}], ",", "expr"}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"First", " ", "define", " ", "rules"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"optional", " ", 
        RowBox[{"step", ":", " ", 
         RowBox[{
         "Collect", " ", "elements", " ", "in", " ", "front", " ", "of", " ", 
          "basis", " ", "elements", " ", "for", " ", "efficiency"}]}]}], ",", 
       " ", 
       RowBox[{"included", " ", "in", " ", "option", " ", "directly"}]}], " ",
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"rulesCollectCoefficientsOfBasisElements", "=", 
        RowBox[{"{", 
         RowBox[{"arg_Plus", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"arg", "+", "Nothing"}], ",", "_bs"}], "]"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Nothing", "\[Rule]", "0"}], "}"}]}], ")"}], "/;", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"arg", ",", "_bs"}], "]"}]}]}]}], "}"}]}], ";"}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Step", " ", "1"}], ":", " ", 
       RowBox[{
       "rewrite", " ", "basis", " ", "elements", " ", "to", " ", 
        "association", " ", "form"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvDownUpToAssociationRules", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"keyMV_mvDownUp", ",", "other__"}], "]"}], ":>", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"Association", "[", 
            RowBox[{"keyMV", "\[Rule]", "1"}], "]"}], ",", "other"}], "]"}]}],
         "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "2"}], ":", " ", 
        RowBox[{
        "move", " ", "scalar", " ", "multipliers", " ", "before", " ", 
         "basis", " ", "elements", " ", "into", " ", "associations"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"rulesScalarIntoAssociation", "=", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"mult_", ",", 
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}]}], "]"}], 
          "]"}], ":>", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"arg", "*", "mult"}], ",", "other"}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "mult", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "3"}], ":", " ", 
        RowBox[{
        "turn", " ", "the", " ", "scalar", " ", "terms", " ", "inside", " ", 
         "Plus", " ", "into", " ", "association"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rulesScalarInsidePlusIntoAssociation", "=", 
       RowBox[{"{", 
        RowBox[{"any1_Plus", "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"scalarTerms", "=", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"List", "@@", "any1"}], ",", "_bs"}], "]"}], "/.", 
                 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", "__", "]"}], 
                   "\[RuleDelayed]", "0"}], "}"}]}], ")"}]}], ",", 
              RowBox[{"theAlgebraMarks", "=", 
               RowBox[{"Rest", "[", 
                RowBox[{"FirstCase", "[", 
                 RowBox[{"any1", ",", "_bs", ",", "0", ",", "Infinity"}], 
                 "]"}], "]"}]}], ",", "theRest"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theRest", "=", 
              RowBox[{"Complement", "[", 
               RowBox[{
                RowBox[{"List", "@@", "any1"}], ",", "scalarTerms"}], "]"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"Plus", "@@", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], "\[Rule]", 
                    RowBox[{"Plus", "@@", "scalarTerms"}]}], "]"}], ",", 
                   RowBox[{"Sequence", "@@", "theAlgebraMarks"}]}], "]"}], 
                 ",", "theRest"}], "}"}], "]"}]}]}]}], "\[IndentingNewLine]", 
           "]"}], "/;", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "any1", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}], "&&", 
            RowBox[{"!", 
             RowBox[{"PossibleZeroQ", "[", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{"any1", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", "__", "]"}], 
                   "\[RuleDelayed]", "0"}], ",", 
                  RowBox[{"_bs", "\[RuleDelayed]", "0"}]}], "}"}]}], "]"}], 
              "]"}]}]}], ")"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "4"}], ":", " ", 
        RowBox[{
        "turn", " ", "the", " ", "sum", " ", "of", " ", "associations", " ", 
         "into", " ", "single", " ", "association"}], ":", " ", 
        RowBox[{
        "this", " ", "might", " ", "cause", " ", "problems", " ", "for", " ", 
         "large", " ", "expressions"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{"rulesPlusIntoAssociation", "=", 
       RowBox[{"{", 
        RowBox[{"any1_Plus", "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"toModify", "=", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"List", "@@", "any1"}], ",", "_bs"}], "]"}]}], ",", 
              RowBox[{"toKeep", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"List", "@@", "any1"}], ",", "_bs"}], "]"}]}], ",", 
              RowBox[{"theAlgebraMarks", "=", 
               RowBox[{"Rest", "[", 
                RowBox[{"FirstCase", "[", 
                 RowBox[{"any1", ",", "_bs", ",", "0", ",", "Infinity"}], 
                 "]"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Plus", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"Merge", "[", 
                   RowBox[{
                    RowBox[{"First", "/@", "toModify"}], ",", "Total"}], 
                   "]"}], ",", 
                  RowBox[{"Sequence", "@@", 
                   RowBox[{"Rest", "[", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    "toModify", ",", "_bs", ",", "0", ",", "Infinity"}], 
                    "]"}], "]"}]}]}], "]"}], ",", "toKeep"}], "}"}], 
              "]"}]}]}], "]"}], "/;", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"exprtotest", "=", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "any1"}], ")"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", "__", "]"}], 
                  "\[RuleDelayed]", "0"}], "}"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", "exprtotest", "]"}], ">", "1"}], ")"}],
               "&&", 
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{"exprtotest", ",", 
                 RowBox[{"MV", "|", "bs"}], ",", 
                 RowBox[{"Heads", "->", "True"}]}], "]"}]}], "&&", 
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{"exprtotest", ",", "_Association"}], "]"}]}]}], 
             ")"}]}], "\[IndentingNewLine]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "5"}], ":", "  ", 
        RowBox[{
        "we", " ", "can", " ", "still", " ", "be", " ", "left", " ", "with", 
         " ", "scalar", " ", "factor", " ", "before", " ", "partly", " ", 
         "converted", " ", 
         RowBox[{"Association", "."}]}]}], "  ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rulesPlusMultScalarAssociation", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"mult_", ",", "arg2_Plus"}], "]"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"mult", "*", "#"}], ")"}], "&"}], "/@", "arg2"}], ")"}],
           "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "mult", "}"}], ",", 
            RowBox[{"Plus", "|", "MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Step", " ", "6"}], ":", " ", 
        RowBox[{
        "move", " ", "factors", " ", "of", " ", "step", " ", "5", " ", 
         "inside", " ", "of", " ", "noncommutative", " ", "products"}]}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"rulesMultScalarAssociation", "=", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"Times", "[", 
           RowBox[{"mult_", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"h", ":", 
               RowBox[{"(", 
                RowBox[{
                "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", 
                 "|", "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], 
             "[", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
              "arg2__"}], "]"}]}], "]"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"h", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{
              RowBox[{"mult", "*", "arg"}], ",", "other"}], "]"}], ",", 
            "arg2"}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "mult", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "default", " ", "sort", " ", "index", " ", "order", " ", "in", " ", 
        "resulting", " ", "representation"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"associationKeySortRules", "[", "ord_String", "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"as_Association", ",", "al__"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"KeySort", "[", 
            RowBox[{"as", ",", 
             RowBox[{
              RowBox[{"orderedQNoncommutative", "[", 
               RowBox[{"ord", ",", 
                RowBox[{"#1", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}]}], "]"}], ",",
            "al"}], "]"}]}], "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[363]:=",ExpressionUUID->"02152d0f-2b6b-41f1-a651-59ee93ed1e6f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"check", " ", "if", " ", "conversion", " ", "was", " ", 
    RowBox[{"succesfull", ":", " ", 
     RowBox[{"not", " ", "relaeble"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"checkAssociationRepresentation", "[", "expr_bs", "]"}], ":=", 
       
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"First", "[", "expr", "]"}], "]"}], "===", "Association"}],
          ",", "\[IndentingNewLine]", "expr", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaAssociationRepresentation", "::", "notcompleted"}], 
            ",", "expr"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAssociationRepresentation", "[", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "_List", "|", "_GeometricProduct", "|", "_OuterProduct", "|", 
           "_InnerProduct", "|", "_LeftContract", "|", "_RightContract"}], 
          ")"}]}], "]"}], ":=", 
       RowBox[{"checkAssociationRepresentation", "/@", "h"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAssociationRepresentation", "[", "expr_", "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"bs", "===", 
          RowBox[{"Head", "[", "expr", "]"}]}], ",", "expr", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaAssociationRepresentation", "::", "notcompleted"}], 
            ",", "expr"}], "]"}], ";", "expr"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellLabel->
  "In[364]:=",ExpressionUUID->"67cdfe79-40b5-4e7c-bb22-03845676cf70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "main", " ", "function"}], "*)"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaValidVersionQ", "[", 
       RowBox[{
       "10.0", ",", 
        "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaAssociationRepresentation", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
            "LeftContract", ",", "RightContract", ",", 
            RowBox[{"theProprocessingRules", "=", 
             RowBox[{"OptionValue", "[", "PreprocessingRules", "]"}]}], ",", 
            RowBox[{"theOrdering", "=", 
             RowBox[{
             "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
            ",", 
            RowBox[{"tocheck", "=", 
             RowBox[{"OptionValue", "[", "Check", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Attempt", " ", "without", " ", "dangerous", " ", "loops"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"tocheck", ",", 
             RowBox[{"checkFunction", "=", "checkAssociationRepresentation"}],
              ",", 
             RowBox[{"checkFunction", "=", "Identity"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"checkFunction", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Fold", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Replace", "[", 
                 RowBox[{"#1", ",", "#2", ",", "All"}], "]"}], "&"}], ",", 
               "expr", ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                "theProprocessingRules", ",", "mvDownUpToAssociationRules", 
                 ",", "rulesScalarIntoAssociation", ",", 
                 "rulesScalarInsidePlusIntoAssociation", ",", 
                 "rulesPlusIntoAssociation", ",", 
                 "rulesPlusMultScalarAssociation", ",", 
                 "rulesMultScalarAssociation", ",", 
                 "rulesScalarIntoAssociation"}], "}"}]}], "]"}], "/.", 
             RowBox[{"associationKeySortRules", "[", "theOrdering", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Cl"}], "]"}]}], ")"}], "&&", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "MV", ",", 
           RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "when", " ", "there", " ", "are", " ", "no", " ", "basis", " ", "symbol", 
     " ", "inside", " ", "expression", " ", "we", " ", "make", " ", "it", " ",
      "a", " ", "scalar", " ", "of", "  ", "running", " ", "algebra"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{
        "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaAssociationRepresentation", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"Association", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[Rule]", "expr"}], "]"}], ",", 
          "gaRunningAlgebra"}], "]"}], "/;", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_Cl"}], "]"}], "&&", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "MV", ",", 
           RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
     "\[IndentingNewLine]", "]"}], ";"}]}]}]], "Input",
 CellLabel->
  "In[365]:=",ExpressionUUID->"cbd76819-f105-4990-9107-7ab949c2d90f"],

Cell["Other functions for work with associations", "Text",ExpressionUUID->"0b8f8200-ccb8-4657-a4a8-fe4649c6320a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaAssociationTogether", ",", 
    RowBox[{"{", "Listable", "}"}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[367]:=",ExpressionUUID->"290fb7ad-9f0f-4027-9282-7a2a02646b29"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaAssociationTogether", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "_Association"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"also", " ", "clean", " ", "Association"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"ex_Association", ",", "any__"}], "]"}], "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"ex", "/.", 
            RowBox[{"{", 
             RowBox[{"as_Association", "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"Association", "@", 
                RowBox[{"(", 
                 RowBox[{"KeyValueMap", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#2", "===", "0"}], ",", "Nothing", ",", 
                    RowBox[{"#1", "\[Rule]", "#2"}]}], "]"}], "&"}], ",", 
                   "as"}], "]"}], ")"}]}], "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"Values", "[", "as", "]"}], ",", "0"}], "]"}]}]}], 
             "}"}]}], ",", "any"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"cheating", ",", " ", 
          RowBox[{"to", " ", "change"}], ",", " ", 
          RowBox[{
          "also", " ", "not", " ", "implemented", " ", "case", " ", "when", 
           " ", "Association", " ", "is", " ", "located", " ", "inside", " ", 
           "gaSeriesdata"}], ",", " ", 
          RowBox[{
          "Zassenhaus", " ", "and", " ", "BCh", " ", "series", " ", 
           "data"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationTogether", "[", 
          RowBox[{"expr", ":", 
           RowBox[{"(", 
            RowBox[{"_Plus", "|", "_Times"}], ")"}]}], "]"}], ":=", 
         RowBox[{
          RowBox[{"gaAssociationRepresentation", "[", 
           RowBox[{"gaPlainRepresentation", "[", "expr", "]"}], "]"}], "/;", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"unknown", " ", 
          RowBox[{"case", ":", " ", 
           RowBox[{"can", " ", "ignore"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationTogether", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "functions", " ", "to", " ", "clean", " ", "and", " ", "put", " ", 
          "MV", " ", "in", " ", "Association", " ", "form", " ", "together"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationRepresentationClean", "[", "expr_", "]"}], ":=", 
         RowBox[{"(", 
          RowBox[{"expr", "/.", 
           RowBox[{"{", 
            RowBox[{"as_Association", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"Association", "@", 
               RowBox[{"(", 
                RowBox[{"KeyValueMap", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#2", "===", "0"}], ",", "Nothing", ",", 
                    RowBox[{"#1", "\[Rule]", "#2"}]}], "]"}], "&"}], ",", 
                  "as"}], "]"}], ")"}]}], "/;", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"Values", "[", "as", "]"}], ",", "0"}], "]"}]}]}], 
            "}"}]}], ")"}]}], ";"}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[368]:=",ExpressionUUID->"db931ce1-4bd9-4d5d-83df-9f0ede84065f"],

Cell[TextData[{
 StyleBox["gaPlainRepresentation[ ]",
  FontWeight->"Bold"],
 " is simple"
}], "Text",ExpressionUUID->"b4115f39-a5b7-4d49-a710-78e12006cc0b"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"gaValidVersionQ", "[", 
    RowBox[{
    "10.0", ",", 
     "\"\<Multivector representation as Mathematica Association object\>\""}],
     "]"}], ",", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{
        "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "convert", " ", "from", " ", "noncompact", " ", "Association", " ", 
        "representation", " ", "to", " ", "non", " ", "compact", " ", 
        "Additive"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gaPlainRepresentation", "[", "expr_", "]"}], ":=", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"theAlgebra", "=", 
              RowBox[{"whichAlgebra", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"Abort", "\[Rule]", "False"}], ",", 
                RowBox[{
                "Message", "\[Rule]", 
                 "\"\<Multiple algebras in the expression. Conversion not \
implemented.\>\""}]}], "]"}]}], ",", 
             RowBox[{"theOrdering", "=", "gaRunningOrdering"}], ",", 
             "theAnswer"}], "}"}], ",", 
           RowBox[{
            RowBox[{"theAnswer", "=", 
             RowBox[{"expr", "/.", 
              RowBox[{
               RowBox[{"bs", "[", 
                RowBox[{"arg_Association", ",", "other__"}], "]"}], 
               "\[RuleDelayed]", 
               RowBox[{"Plus", "@@", 
                RowBox[{"(", 
                 RowBox[{"Times", "@@", 
                  RowBox[{"(", 
                   RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"x", ",", "other"}], "]"}]}], "]"}], "/@", "#"}], 
                    "&"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], "&"}], 
                    "[", 
                    RowBox[{"Normal", "[", "arg", "]"}], "]"}], ",", "1"}], 
                    "]"}], ")"}]}], ")"}]}]}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "if", " ", "the", " ", "expression", " ", "after", " ", 
               "converting", " ", "from", " ", "Association", " ", "is", " ", 
               "in", " ", "compact", " ", "form", " ", "do", " ", "nothing"}],
               ",", " ", 
              RowBox[{
              "else", " ", "call", " ", "the", " ", "procedure", " ", "once", 
               " ", "more"}]}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{"theAnswer", ",", 
                RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}], ",", 
              "theAnswer", ",", 
              RowBox[{"gaPlainRepresentation", "[", "theAnswer", "]"}]}], 
             "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
         RowBox[{"!", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "_Association"}], "]"}]}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "convert", " ", "from", " ", "Compact", " ", "Additive", " ", 
         "representation", " ", "to", " ", "nonCompact", " ", "Additive"}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPlainRepresentation", "[", "expr_", "]"}], ":=", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"theAlgebra", "=", 
              RowBox[{"whichAlgebra", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"Abort", "\[Rule]", "False"}], ",", 
                RowBox[{
                "Message", "\[Rule]", 
                 "\"\<Multiple algebras in the expression. Conversion not \
implemented.\>\""}]}], "]"}]}], ",", 
             RowBox[{"theOrdering", "=", "gaRunningOrdering"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}], "]"}], "=!=",
               "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Replace", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"0", ",", "0"}], "]"}], "\[RuleDelayed]", 
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"do_Integer", ",", "0"}], "]"}], "\[RuleDelayed]", 
                  
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"do", ",", 
                    RowBox[{
                    "reverseCompactRepresentationReplacementRules", "[", 
                    RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"0", ",", "up_Integer"}], "]"}], "\[RuleDelayed]", 
                  
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"up", ",", 
                    RowBox[{
                    "reverseCompactRepresentationReplacementRules", "[", 
                    RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], 
                    "]"}]}], "]"}]}]}], "}"}], ",", "All"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], ",",
                "theAlgebra", ",", "theOrdering"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}], "&&", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}]}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPlainRepresentation", "[", "expr_", "]"}], ":=", 
        RowBox[{"expr", "/;", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", "_Association"}], "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"mvDownUp", "[", "__Integer", "]"}]}], "]"}]}], 
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[369]:=",ExpressionUUID->"574324eb-148e-418e-8ba1-487c9b513fb7"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector (orthonormal basis) representation  in Compact/nonCompact \
form "
}], "Subsubsection",ExpressionUUID->"17ae3335-b69b-4bb5-b4f1-e5d1687609de"],

Cell["\<\
Conversion is based on the below constructed rules. The compact form is \
almost untested. In fact  it is not used.\
\>", "Text",ExpressionUUID->"a947def1-2ad1-4bc4-b3a3-7fa50f24d621"],

Cell[BoxData[
 RowBox[{
  RowBox[{"compactRepresentationReplacementRules", "[", 
   RowBox[{"algebra_Cl", ",", "ordering_String"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"compactRepresentationReplacementRules", "[", 
     RowBox[{"algebra", ",", "ordering"}], "]"}], "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"First", ",", "#", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{"First", "/@", 
           RowBox[{"First", "/@", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"algebra", ",", "ordering"}], "]"}], ",", "1"}], 
             "]"}]}]}]}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"{", "}"}], "\[Rule]", "0"}]}], "}"}], "]"}]}], 
   ")"}]}]], "Input",
 CellLabel->
  "In[370]:=",ExpressionUUID->"14097973-5ad2-4ea7-b26c-c7da8aec6148"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
   RowBox[{"algebra_Cl", ",", "ordering_String"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"reverseCompactRepresentationReplacementRules", "[", 
     RowBox[{"algebra", ",", "ordering"}], "]"}], "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Reverse", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"MapAt", "[", 
            RowBox[{"First", ",", "#", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"MapIndexed", "[", 
           RowBox[{"Rule", ",", 
            RowBox[{"First", "/@", 
             RowBox[{"First", "/@", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"algebra", ",", "ordering"}], "]"}], ",", "1"}], 
               "]"}]}]}]}], "]"}]}], ")"}]}], ",", 
       RowBox[{"0", "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "}"}], "]"}]}], ")"}]}]], "Input",
 CellLabel->
  "In[371]:=",ExpressionUUID->"e3268b0f-229b-4de3-9621-2c0ccb1b2016"],

Cell["\<\
Convert into compact representation:  mvDownUp[{do__Integer},{}]:> \
mvDownUp[integer,0] and mvDownUp[{},{do__Integer}]:> mvDownUp[0,integer]\
\>", "Text",ExpressionUUID->"1c127f23-d111-42ea-bb5e-6415f7355ac2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], "=", 
   "\"\<Orthonormal basis of `1` with the required ordering `2` is not \
defined. \>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCompactPlainRepresentation", "::", "downup"}], "=", 
   "\"\<Expression `1` contains both down and up indices. Compact \
representation not implemented.\>\""}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->
  "In[372]:=",ExpressionUUID->"cd3339ae-76e7-4b9d-931b-aee3b237170c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCompactPlainRepresentation", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Abort", "\[Rule]", "False"}], ",", 
          RowBox[{
          "Message", "\[Rule]", 
           "\"\<Multiple algebras in the expression. Conversion not \
implemented.\>\""}]}], "]"}]}], ",", 
       RowBox[{"theOrdering", "=", "gaRunningOrdering"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}], "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Replace", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "do__Integer", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"Replace", "[", 
               RowBox[{
                RowBox[{"{", "do", "}"}], ",", 
                RowBox[{"compactRepresentationReplacementRules", "[", 
                 RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], "]"}], 
              ",", "0"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "up__Integer", "}"}]}], "]"}], "\[RuleDelayed]", 
            RowBox[{"mvDownUp", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Replace", "[", 
               RowBox[{
                RowBox[{"{", "up", "}"}], ",", 
                RowBox[{"compactRepresentationReplacementRules", "[", 
                 RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}]}], "]"}]}],
              "]"}]}]}], "}"}], ",", "All"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], 
         ",", "theAlgebra", ",", "theOrdering"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"FreeQ", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "do__", "}"}], ",", 
       RowBox[{"{", "up__", "}"}]}], "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[374]:=",ExpressionUUID->"19ce5d1d-44e8-45d2-9510-94b7333574ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCompactPlainRepresentation", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"gaCompactPlainRepresentation", "::", "downup"}], ",", 
       "expr"}], "]"}], ";", "expr"}], ")"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{"expr", ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "do__", "}"}], ",", 
        RowBox[{"{", "up__", "}"}]}], "]"}]}], "]"}]}]}]}]], "Input",
 CellLabel->
  "In[375]:=",ExpressionUUID->"efdcc58f-59cd-47b1-9df9-3cc10e5eade8"],

Cell["\<\
Inside Association we have to use KeyMap. Possible problem: mvDownUp[{},{}] \
is not replaced by mvDownUp[ 0,0] when using gaAssociationRepresentation[ ]: \
may be separateCommands for gaCompactAssciationRepresentation and its inverse \
is needed?\
\>", "Text",ExpressionUUID->"db2bd680-bda6-472e-acc0-a77a1d86df47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCompactAssociationRepresentation", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{
        "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
         "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Abort", "\[Rule]", "False"}], ",", 
          RowBox[{
          "Message", "\[Rule]", 
           "\"\<Multiple algebras in the expression. Conversion not \
implemented.\>\""}]}], "]"}]}], ",", 
       RowBox[{"theOrdering", "=", "gaRunningOrdering"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"theAlgebra", ",", "theOrdering"}], "]"}], "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"gaAssociationRepresentation", "[", "expr", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"data_Association", ",", "algebra_Cl"}], "]"}], 
           "\[RuleDelayed]", 
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"algebra", ",", "theOrdering"}], "]"}], "]"}], "=!=", 
              "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"KeyMap", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ReplaceAll", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"compactRepresentationReplacementRules", "[", 
                    RowBox[{"algebra", ",", "theOrdering"}], "]"}]}], "]"}], 
                  "&"}], ",", "data"}], "]"}], ",", "algebra"}], "]"}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], ",",
                "algebra", ",", "theOrdering"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "}"}], ",", "All"}], "]"}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaCompactPlainRepresentation", "::", "BasisOrOrdering"}], 
         ",", "theAlgebra", ",", "theOrdering"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "do__", "}"}], ",", 
         RowBox[{"{", "up__", "}"}]}], "]"}]}], "]"}], "&&", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", "_Association"}], "]"}]}], ")"}]}]}]], "Input",
 CellLabel->
  "In[376]:=",ExpressionUUID->"3ff442c9-bf3a-4d9c-b9cc-d184f5cacc3a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaProductPairExpand[ ]  in internal \
\[OpenCurlyDoubleQuote]AssociationRepresentation\[CloseCurlyDoubleQuote] \
form"
}], "Subsubsection",ExpressionUUID->"89da74a1-75fb-4c88-a898-278a51d089e6"],

Cell["\<\
The expansion of product (geometric and outer) of MV  given in Association \
form is the much faster that expansion of MV given in \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] form. The \
Method->\[CloseCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote]\
, which is optimized  for MV given in \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] form is \
about 50% slower and the usual \
Method->\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote] \
is about 20 times(!) slower (for symbolic input). This subsection deals only  \
with expansion of  \[OpenCurlyDoubleQuote]PlainRepresentation\
\[CloseCurlyDoubleQuote] form\
\>", "Text",ExpressionUUID->"89d81c62-70a5-4c9b-ac5d-058f406e4e04"],

Cell["\<\
Only GeometricProduct and OuterProduct currently are implemented in \
Association representation. There is a little room to speed up an expansion \
in association using memorization (not implemented). \
\>", "Text",ExpressionUUID->"338f47d3-3b81-4a1d-912b-afaed242da17"],

Cell["\<\
Realization with ListConvolve is faster than with Outer, thanks to \
Stackexchange!!!,  \
https://mathematica.stackexchange.com/questions/148230/speeding-the-\
calculation-of-a-complex-polynomial-from-its-roots/148240#148240 and Carl \
Woll in particular. \
\>", "Text",ExpressionUUID->"3bd3730b-9ae7-45c8-a21f-fc314ce39af9"],

Cell["\<\
The pair expansion must contain only two MV in Association form. Below we try \
to put expression in that form.  In the case of InnerProduct we have to \
remove the scalar keys of Associations ! , therefore we separate that \
function (since it is supposed to be rarely used)\
\>", "Text",ExpressionUUID->"c332820f-6dca-43ad-83db-9e2b13b1c01e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"only", " ", "one", " ", "bracket", " ", 
      RowBox[{"h", ":", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
          "RightContract", "|", "InnerProduct"}], ")"}], " ", "here", " ", 
        "is", " ", 
        RowBox[{"needed", ".", " ", "The"}], "  ", 
        RowBox[{"(", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
            "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], " ", 
        "not", " ", "work"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"h", ":", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
            "RightContract"}], ")"}], "[", 
          RowBox[{
           RowBox[{"argg1", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"as1_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}], ",", 
           RowBox[{"argg2", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"as2_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}]}], "]"}]}], ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sf", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{
           "gaProductPairExpand", ",", "\"\<CoefficientFunction\>\""}], 
           "]"}]}], ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"Not", "[", 
           RowBox[{"OptionValue", "[", 
            RowBox[{"gaProductPairExpand", ",", "\"\<Quiet\>\""}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"hd", "=", 
          RowBox[{"Head", "[", "h", "]"}]}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"quiet", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<Expanding MV presented as an Association. Option \
Method will be ignored \>\"", "]"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\< The expanded pair is\>\"", "]"}]}],
                    "}"}], "]"}], ",", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"ExpressionCell", "[", "h", "]"}], "}"}], "]"}]}], 
                "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Geometric", " ", "product", " ", "expansion", " ", "realization"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"bs", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "GeometricAlgebra`p`gaAssociationRepresentationClean", "[", 
           RowBox[{"Association", "@", 
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{"Merge", "[", 
              RowBox[{
               RowBox[{"ListConvolve", "[", 
                RowBox[{
                 RowBox[{"Keys", "[", "as1", "]"}], ",", 
                 RowBox[{"Keys", "[", "as2", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", 
                   RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", 
                 RowBox[{
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"GeometricAlgebra`p`productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", "hd"}], "]"}], ",", 
                    RowBox[{"sf", "[", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GeometricAlgebra`p`productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", "hd", ",", "al"}], "]"}], 
                    ",", 
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}], "]"}]}], 
                   "]"}], "&"}], ",", 
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"List", "[", "##", "]"}], ",", "0"}], "]"}], 
                  "&"}]}], "]"}], ",", "Total"}], "]"}], ")"}]}], "]"}], ",", 
          "al", ",", "any"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[377]:=",ExpressionUUID->"4c8f9483-02ce-4b2b-ba59-11f7ab8af315"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", 
          RowBox[{
           RowBox[{"argg1", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"a1_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}], ",", 
           RowBox[{"argg2", ":", 
            RowBox[{"(", 
             RowBox[{"bs", "[", 
              RowBox[{"a2_Association", ",", "al_", ",", "any___"}], "]"}], 
             ")"}]}]}], "]"}], ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sf", "=", 
           RowBox[{"OptionValue", "[", 
            RowBox[{
            "gaProductPairExpand", ",", "\"\<CoefficientFunction\>\""}], 
            "]"}]}], ",", 
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", 
             RowBox[{"gaProductPairExpand", ",", "\"\<Quiet\>\""}], "]"}], 
            "]"}]}], ",", 
          RowBox[{"as1", "=", 
           RowBox[{"KeyDrop", "[", 
            RowBox[{"a1", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", 
               RowBox[{"mvDownUp", "[", 
                RowBox[{"0", ",", "0"}], "]"}]}], "}"}]}], "]"}]}], ",", 
          RowBox[{"as2", "=", 
           RowBox[{"KeyDrop", "[", 
            RowBox[{"a2", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", 
               RowBox[{"mvDownUp", "[", 
                RowBox[{"0", ",", "0"}], "]"}]}], "}"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<Expanding MV presented as an Association. Option \
Method will be ignored \>\"", "]"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\< The expanded pair is\>\"", "]"}]}],
                     "}"}], "]"}], ",", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"InnerProduct", "[", 
                    RowBox[{"argg1", ",", "argg2"}], "]"}], "]"}], "}"}], 
                   "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Geometric", " ", "product", " ", "expansion", " ", "realization"}],
           " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"bs", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"GeometricAlgebra`p`gaAssociationRepresentationClean", "[", 
            RowBox[{"Association", "@", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{"Merge", "[", 
               RowBox[{
                RowBox[{"ListConvolve", "[", 
                 RowBox[{
                  RowBox[{"Keys", "[", "as1", "]"}], ",", 
                  RowBox[{"Keys", "[", "as2", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", 
                  RowBox[{
                   RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"GeometricAlgebra`p`productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", "InnerProduct"}], "]"}], 
                    ",", 
                    RowBox[{"sf", "[", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GeometricAlgebra`p`productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", "InnerProduct", ",", "al"}],
                     "]"}], ",", 
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}], "]"}]}], 
                    "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"List", "[", "##", "]"}], ",", "0"}], "]"}], 
                   "&"}]}], "]"}], ",", "Total"}], "]"}], ")"}]}], "]"}], ",",
            "al", ",", "any"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "the", " ", "below", " ", "pattern", " ", "occur", " ", "in", " ", 
        "Horn", " ", "representation", " ", "1"}], "+", 
       RowBox[{
        RowBox[{"MV", "[", "a", "]"}], "\[GeometricProduct]", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"MV", "[", "a", "]"}]}], "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             FractionBox[
              RowBox[{"MV", "[", "a", "]"}], "3"]}], ")"}]}]}], ")"}]}]}], 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"as1_Association", ",", "other___"}], "]"}], ",", 
         RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"bs", "[", 
       RowBox[{"as1", ",", "other"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"both", " ", "brackets", " ", 
       RowBox[{"(", 
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", "|", 
           "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], " ", "are",
        " ", "very", " ", "import"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", 
              "|", "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"argg1_bs", ",", "argg2_Plus"}], "]"}], ",", 
         RowBox[{"op", ":", 
          RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", "[", 
          RowBox[{"argg1", ",", 
           RowBox[{"gaAssociationTogether", "[", "argg2", "]"}]}], "]"}], ",",
          "op"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "argg2", "}"}], ",", "_Association"}], "]"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", 
              "|", "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"argg1_Plus", ",", "argg2_bs"}], "]"}], ",", 
         RowBox[{"op", ":", 
          RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", "[", 
          RowBox[{
           RowBox[{"gaAssociationTogether", "[", "argg1", "]"}], ",", 
           "argg2"}], "]"}], ",", "op"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "argg1", "}"}], ",", "_Association"}], "]"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "LeftContract", 
              "|", "RightContract", "|", "InnerProduct"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"argg1_Plus", ",", "argg2_Plus"}], "]"}], ",", 
         RowBox[{"op", ":", 
          RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", "[", 
          RowBox[{
           RowBox[{"gaAssociationTogether", "[", "argg1", "]"}], ",", 
           RowBox[{"gaAssociationTogether", "[", "argg2", "]"}]}], "]"}], ",",
          "op"}], "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"argg1", ",", "argg2"}], "}"}], ",", "_Association"}], 
          "]"}]}], ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[378]:=",ExpressionUUID->"382fa209-1031-4c4c-98d5-cf31d7bca2b3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaProductPairExpand[ ] expansions for MV given in standard \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] form"
}], "Subsubsection",ExpressionUUID->"0ab3eab8-1d3d-4100-ab71-593cb6967f53"],

Cell["Test and development functions (inactivated) ", "Text",ExpressionUUID->"c17f9827-9e68-4a89-81dc-945548272c56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"onlyPairsQ", "[", "h_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"{", "h", "}"}], ",", 
       RowBox[{
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{
          RowBox[{"arg", ":", 
           RowBox[{"(", 
            RowBox[{
            "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
             "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
          RowBox[{"___", "?", "OptionQ"}]}], "]"}], "/;", 
        RowBox[{
         RowBox[{"Length", "[", "arg", "]"}], ">", "2"}]}], ",", "Infinity"}],
       "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "True", ",", "False"}], "]"}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"d3f1a89d-1d67-4bd6-a36a-87d29a129c69"],

Cell["\<\
Help functions. collectQ[ ] check if we need collect terms before expansion. \
If so, collectOnDemand[ ] do this. Collected parts are wrapped by head \
singleton[ ]. If product is not yet fully expanded (i.e. still contains some \
product operations inside) then do not attempt to collect coefficients (this \
is ensured by \
/;FreeQ[{expr},GeometricProduct|OuterProduct|InnerProduct|LeftContract|\
RightContract,Heads->True]; condition)\
\>", "Text",ExpressionUUID->"d07db8b5-9a91-46b0-a681-f6458df91498"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"collectQ", "[", "expr_Plus", "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "all", "}"}], ",", 
         RowBox[{
          RowBox[{"all", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
            "]"}]}], ";", 
          RowBox[{"Catch", "[", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"all", "=!=", 
              RowBox[{"Union", "[", "all", "]"}]}], ",", 
             RowBox[{"Throw", "[", "False", "]"}], ",", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{
               "if", " ", "basis", " ", "vectors", " ", "do", " ", "not", " ",
                 "repeat"}], ",", " ", 
               RowBox[{"then", " ", "test", " ", "scalar", " ", "form"}]}], 
              " ", "*)"}], " ", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"AtomQ", "[", 
                  RowBox[{
                   RowBox[{"(", "expr", ")"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                    RowBox[{"_singleton", "\[Rule]", "1"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{"short", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#", "]"}], "<", "2"}], "&"}], 
                    ")"}]}]}], "]"}], "=!=", 
                    RowBox[{"{", "}"}]}], ",", 
                   RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "expr"}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                    RowBox[{"singleton", "\[Rule]", "1"}]}], "}"}]}], ")"}]}],
                ";", 
               RowBox[{"(*", " ", 
                RowBox[{"long", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
               
               RowBox[{"Throw", "[", "True", "]"}], ";"}], ")"}]}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "expr", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"collectQ", "[", "expr_Times", "]"}], ":=", 
        RowBox[{
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", "all", "}"}], ",", 
           RowBox[{
            RowBox[{"all", "=", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Catch", "[", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"all", "=!=", 
                RowBox[{"Union", "[", "all", "]"}]}], ",", 
               RowBox[{"Throw", "[", "False", "]"}], ",", 
               RowBox[{"Throw", "[", "True", "]"}]}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], "/;", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"List", "@@", "expr"}], ",", "_Power"}], "]"}]}]}], ";"}], 
      "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"collectQ", "[", "expr_", "]"}], ":=", "True"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"collectOnDemand", "[", "expr_", "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"collectQ", "[", "expr", "]"}]}], ",", 
        RowBox[{"Collect", "[", 
         RowBox[{"expr", ",", "_bs", ",", "singleton"}], "]"}], ",", "expr"}],
        "]"}]}], ";"}]}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"if", " ", "collectQ", " ", "returs", " ", "True"}], ",", " ", 
     RowBox[{
     "no", " ", "need", " ", "for", " ", "collecting", " ", "terms"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[379]:=",ExpressionUUID->"cad7ea13-aa65-4b5c-90a0-8b0cb4061885"],

Cell["\<\
Head \[OpenCurlyDoubleQuote]singleton\[CloseCurlyDoubleQuote] serves for \
holding expressions in order to reduce the number of expansion operations. \
For example, assume, that you need to geometrically multiply a+b+e[1] by \
c+d+e[2]. If we would wrap scalars by single head, say, sigleton[a+b]+e[1] \
and singleton[c+d]+e[2], then number of expensive geometric multiplications \
is significantly reduced. This is especially important when coefficients \
contains many terms.\
\>", "Text",ExpressionUUID->"64826dfe-4eb3-4d29-a918-2e2b4cd371cd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"singleton", ",", "HoldAll"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Integer", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Real", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Complex", "]"}], "=", "n"}], ";"}]}], "Input",\

 CellLabel->
  "In[380]:=",ExpressionUUID->"81655319-0de5-41aa-9142-7b1bc0f6c689"],

Cell["\<\
The actual expansion is performed by gaProductPairExpand[ ], which currently \
has two implemented methods, Method-> \
\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote], and \
Method->\[CloseCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote]\
. The second uses the first one to compute expanded symbolic expression and \
then just substitutes the particular coefficients  into it. This yields \
significant speedup for multivectors which has large number of base elements. \
The function gaDefineExpandedPairProduct[thealgebra, theproduct ] calculates \
the noted symbolic expansion for given algebra and operation. If multivector \
is given in internal Association form, then precalculated expanded product \
yield no performance increase when compared with true expansion. Therefore we \
use this approach only to MV in \[OpenCurlyDoubleQuote]PlainRepresentation\
\[CloseCurlyDoubleQuote] form.\
\>", "Text",ExpressionUUID->"eb1b614d-343d-4727-9e24-af8d8fe0fbfb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineExpandedPairProduct", "[", 
    RowBox[{"alg_Cl", ",", "\"\<PlainRepresentation\>\"", ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"c1Name", "=", "\[FormalA]"}], ",", 
        RowBox[{"c2Name", "=", "\[FormalB]"}], ",", "c1", ",", "c2", ",", 
        "c3", ",", 
        RowBox[{"vsdim", "=", 
         RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], ",", 
        "allGrades", ",", "indexRange", ",", "precomputedProductComponents"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"c1", "=", 
        RowBox[{"gaGeneralMultivector", "[", 
         RowBox[{"c1Name", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"c2", "=", 
        RowBox[{"c1", "/.", 
         RowBox[{"{", 
          RowBox[{"c1Name", "\[Rule]", "c2Name"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"c3", "=", 
        RowBox[{"c1", "/.", 
         RowBox[{"{", 
          RowBox[{"c1Name", "\[Rule]", "\[FormalC]"}], "}"}]}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
        "using", " ", "precomputed", " ", "c3", " ", "we", " ", "can", " ", 
         "speedup", " ", 
         RowBox[{"gaProductPairExpand", "[", "]"}], " ", "command"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"indexRange", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{"2", "^", "vsdim"}], "-", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"allGrades", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{"vsdim", ",", "#"}], "]"}], "&"}], "/@", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "vsdim"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"precomputedProductComponents", "=", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{"gaProductPairExpand", "[", 
           RowBox[{
            RowBox[{"h", "[", 
             RowBox[{"c1", ",", "c2"}], "]"}], ",", 
            RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
            RowBox[{"Method", "\[Rule]", "\"\<RealTimePairProduct\>\""}]}], 
           "]"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"InnerProduct", " ", "lacks", " ", "the", " ", "highest", " ", 
         RowBox[{"grade", ":", " ", 
          RowBox[{
          "this", " ", "is", " ", "the", " ", "consequece", " ", "of", " ", 
           "pecularity", " ", "of", " ", "multiplication", " ", "by", " ", 
           RowBox[{"scalar", "!"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"(*", " ", 
        RowBox[{
        "we", " ", "simply", " ", "append", " ", "0", " ", "as", " ", "a", 
         " ", "last", " ", "element", " ", "to", " ", "follow", " ", 
         "general", " ", "pattern"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPrecomputedPairProduct", "[", 
         RowBox[{"alg", ",", "\"\<PlainRepresentation\>\"", ",", "h"}], "]"}],
         "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"c1Name", "/@", "indexRange"}], ",", 
            RowBox[{"c2Name", "/@", "indexRange"}]}], "}"}], ",", "c3", ",", 
          RowBox[{"Internal`PartitionRagged", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"h", "===", "InnerProduct"}], ",", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"precomputedProductComponents", ",", "0"}], "}"}], 
               "]"}], ",", "precomputedProductComponents"}], "]"}], ",", 
            "allGrades"}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]", "]"}],
     "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaPrecomputedPairProduct", "[", 
       RowBox[{"alg", ",", "\"\<PlainRepresentation\>\"", ",", "h"}], "]"}], 
      "]"}], "===", "gaPrecomputedPairProduct"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[384]:=",ExpressionUUID->"7327d958-2540-4a40-b762-dcbceaf5ea55"],

Cell["\<\
We only need to do this once. The symbolic computation is performed using \
Method->\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote], \
defined below.\
\>", "Text",ExpressionUUID->"0902450e-f99e-4893-a317-b94c0d031684"],

Cell[TextData[{
 "After distribution over sum we perform collection of terms. Note, that when \
expanding pair we modify singleton behaviour with \
CoefficientFunction->pureFunction, depending on our needs. Two most useful \
choices are   CoefficientFunction->Identity, and  CoefficientFunction->Expand \
(the default). The CoefficientFunction->Identity choice do not perform any \
operation on collected coefficients. This is usefull when dealing with \
numerical coefficients (except if numeric coefficients are expressions like \
Sqrt[2]+1/Sqrt[3], ... etc. When working with symbolic coefficients   \
CoefficientFunction->Expand is safe choice. Other possibilitieslike \
CoefficientFunction->Simplify[Together[#]]& are possible, thougth most \
probably will considerably slowdown computation. Option MaxIterations is only \
useful for testing purposse. It stops expansion after given number of \
operations. The default is MaxIteration -> Infinity, i.e. full expansion. May \
be it is worth to consider to use ",
 Cell[BoxData[
  RowBox[{"System`Private`SetNoEntry", "[", "]"}]], "Input",ExpressionUUID->
  "d4f0dcd4-0b1b-43d9-a03e-47587619bb2c"],
 " in order to make some functions Atomic-like (there is subtlety, however, \
that we have to apply this function to every instance of an created \
expression, which is probably is not what we want)."
}], "Text",ExpressionUUID->"138424f0-bd1d-4c98-9a21-b3b210d0eb48"],

Cell["\<\
General options: Quiet\[Rule]True,CoefficientFunction\[Rule]Expand,
Method options are: \
Method\[Rule]{\[OpenCurlyDoubleQuote]PrecomputedPairProduct\
\[CloseCurlyDoubleQuote],OmitGrades\[Rule]{}}; Method\[Rule]{\
\[OpenCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote],\
MaxIterations->infinity}; \
Method\[Rule]{\[OpenCurlyDoubleQuote]ConvolutionPairProduct\
\[CloseCurlyDoubleQuote]}.  The fastest method seems to be \
\[OpenCurlyDoubleQuote]ConvolutionPairProduct\[CloseCurlyDoubleQuote] however \
it requires to find all components of multivector (in the Running algebra). \
This is not convenient, for example, when we have Quaternionic coefficients. \
Therefore after some experimentation we decided to default to slightly \
slower, but a more universal method. \
\>", "Text",ExpressionUUID->"55b4e479-795d-41f7-be66-9d4f48376c44"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductPairExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
     RowBox[{"Method", "\[Rule]", "\"\<RealTimePairProduct\>\""}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaMethodOptionContainer", "[", "\"\<ConvolutionPairProduct\>\"", "]"}], 
   "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaMethodOptionContainer", "[", "\"\<RealTimePairProduct\>\"", "]"}], "=", 
   
   RowBox[{"{", 
    RowBox[{"MaxIterations", "\[Rule]", "Infinity"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaMethodOptionContainer", "[", "\"\<PrecomputedPairProduct\>\"", "]"}], 
   "=", 
   RowBox[{"{", 
    RowBox[{"OmitGrades", "\[Rule]", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[385]:=",ExpressionUUID->"f9085a54-4b3d-492b-881d-9890607272e1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "Method"}], "=", 
   "\"\<Product pair expand method `1` is unknown. Possible option values are \
Method -> \\\"PrecomputedPairProduct\\\" or Method->\\\"RealTimePairProduct\\\
\" or \\\"ConvolutionPairProduct\\\".\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "MultipleAlgebras"}], "=", 
   "\"\<Product pair contains elements of different algebras `1`. The \
expansion Method->\\\"PrecomputedPairProduct\\\" will not work. Switching \
expansion method to \\\"RealTimePairProduct\\\". The option OmitGrades will \
be ignored.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[389]:=",ExpressionUUID->"98b41fa9-f08e-444c-aef4-f2c860d29212"],

Cell["\<\
The expansion of pair of product with complicated coefficients in front of \
base vectors\
\>", "Text",ExpressionUUID->"b2e09b0e-55ec-4936-b10d-fbb2f1999dfc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair",
       " ", "expansion", " ", "work"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
           "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sf", "=", 
            RowBox[{"OptionValue", "[", 
             RowBox[{
             "gaProductPairExpand", ",", "\"\<CoefficientFunction\>\""}], 
             "]"}]}], ",", 
           RowBox[{"quiet", "=", 
            RowBox[{"Not", "[", 
             RowBox[{"OptionValue", "[", 
              RowBox[{"gaProductPairExpand", ",", "\"\<Quiet\>\""}], "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"theMethodData", "=", 
            RowBox[{"OptionValue", "[", 
             RowBox[{"gaProductPairExpand", ",", "\"\<Method\>\""}], "]"}]}], 
           ",", "theMethod", ",", "theUserMethodOptions", ",", "maxIter"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"definition", " ", "for", " ", 
           RowBox[{
            RowBox[{"singleton", " ", "!!"}], "!"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"singleton", "[", "expr_", "]"}], ":=", 
           RowBox[{
            RowBox[{"singleton", "@@", 
             RowBox[{"{", 
              RowBox[{"sf", "[", 
               RowBox[{"(", 
                RowBox[{"expr", "/.", 
                 RowBox[{"{", 
                  RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                ")"}], "]"}], "}"}]}], "/;", 
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{"expr", ",", "_singleton"}], "]"}]}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Expansion", " ", "method", " ", "and", " ", "its", " ", "options",
             " ", "determination"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "theMethodData", "]"}], "===", "List"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theMethod", "=", 
              RowBox[{"theMethodData", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{"theUserMethodOptions", "=", 
              RowBox[{"Rest", "[", "theMethodData", "]"}]}], ";"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theMethod", "=", "theMethodData"}], ";", 
             RowBox[{"theUserMethodOptions", "=", 
              RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Show", " ", 
            RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"quiet", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<Expansion method is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", "theMethodData", "]"}], 
                    ",", 
                    RowBox[{
                    "TextCell", "[", "\"\< The expanded pair is\>\"", "]"}]}],
                     "}"}], "]"}], ",", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"ExpressionCell", "[", "h", "]"}], "}"}], "]"}]}],
                   "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Geometric", " ", "product", " ", "expansion", " ", 
            "realisation"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theMethod", ",", "\[IndentingNewLine]", 
            "\"\<ConvolutionPairProduct\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"Replace", "[", 
             RowBox[{"h", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"argh_", "[", 
                  RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"RuleCondition", "[", 
                  RowBox[{
                   RowBox[{"Total", "[", 
                    RowBox[{"ListConvolve", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"gaGetMVComponents", "[", 
                    RowBox[{"arg1", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                     "0"}], "]"}], ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"gaGetMVComponents", "[", 
                    RowBox[{"arg2", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                     "0"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", "argh", ",", 
                    "Plus"}], "]"}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"argh_", "[", 
                  RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"RuleCondition", "[", 
                  RowBox[{
                   RowBox[{"Total", "[", 
                    RowBox[{"ListConvolve", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"gaGetMVComponents", "[", 
                    RowBox[{"arg0", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                     "0"}], "]"}], ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"gaGetMVComponents", "[", 
                    RowBox[{"arg1", ",", 
                    RowBox[{"CoefficientFunction", "->", "sf"}]}], "]"}], ",",
                     "0"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", "argh", ",", 
                    "Plus"}], "]"}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], 
               "}"}], ",", "All"}], "]"}], ",", "\[IndentingNewLine]", 
            "\"\<RealTimePairProduct\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"the", " ", "single", " ", "Distribute"}], ",", " ", 
              RowBox[{
               RowBox[{"i", ".", "e", ".", " ", 
                RowBox[{"collectOnDemand", "[", 
                 RowBox[{"Distribute", "[", "h", "]"}], "]"}]}], 
               "\[IndentingNewLine]", "fails", " ", "to", " ", "gaPE", " ", 
               "the", " ", "Cl", 
               RowBox[{"(", 
                RowBox[{"6", ",", "0"}], ")"}], " ", "expression", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<(a[0] p[0,2,1]+p[4,2,1] (a[47] \
\!\(\*TemplateBox[{TemplateBox[{\"1\", \"2\", \"5\", \"6\"}, \"mvDownUp\", \
DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 2, 5, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)+a[49] \
\!\(\*TemplateBox[{TemplateBox[{\"1\", \"3\", \"4\", \"6\"}, \"mvDownUp\", \
DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 3, 4, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)))\
\[GeometricProduct](a[0] p[0,1,1]+p[4,1,1] (a[47] \
\!\(\*TemplateBox[{TemplateBox[{\"1\", \"2\", \"5\", \"6\"}, \"mvDownUp\", \
DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 2, 5, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)+a[49] \
\!\(\*TemplateBox[{TemplateBox[{\"1\", \"3\", \"4\", \"6\"}, \"mvDownUp\", \
DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 3, 4, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> \
None]},\"\[DoubleStruckE]\",DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& \
),InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),SyntaxForm->\"fish\",Tooltip->\"Cl[6, 0, 0]\"]\)))\>\"", ".", 
                "\[IndentingNewLine]", "It"}], " ", "will", " ", "result", 
               " ", "into", " ", "non", " ", "Expanded", " ", "inner", " ", 
               "product", " ", "inside", " ", 
               RowBox[{"times", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "The", " ", "solutions", " ", "would", " ", "be", " ", "apply", 
              " ", "distribution", " ", "repeatedly"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"FixedPoint", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#", "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg0___", ",", "arg1_Plus", ",", "arg2___"}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg0", ",", "arg1", ",", "arg2"}], "]"}], "]"}], 
                    "]"}], "/;", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}]}], "}"}]}], 
                 ")"}], "&"}], ",", "h"}], "]"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "we", " ", "want", " ", "evaluate", " ", "replacement"}], ",", 
              " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "therefore", " ", "we", " ", "have", " ", "to", " ", "use", "  ",
                  "Trott"}], "-", 
                RowBox[{"Strzebonski", " ", "in"}], "-", 
                RowBox[{"place", " ", "evaluation", " ", 
                 RowBox[{"technique", ":", " ", "n_Real"}]}]}], 
               "\[RuleDelayed]", 
               RowBox[{
                RowBox[{"With", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"eval", "=", 
                    RowBox[{"f", "[", "n", "]"}]}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"g", "[", "eval", "]"}], "/;", "True"}]}], "]"}], 
                " ", "or", " ", "better", " ", "undocumented", " ", 
                RowBox[{"RuleCondition", "[", "]"}], " ", "command"}]}]}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"maxIter", "=", 
              RowBox[{"gaPassMethodOptionValue", "[", 
               RowBox[{
               "\"\<RealTimePairProduct\>\"", ",", "MaxIterations", ",", 
                "theUserMethodOptions"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"FixedPoint", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#", "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg1", ",", "arg2"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], 
                   "}"}]}], ")"}], "&"}], ",", "h", ",", "maxIter"}], "]"}]}],
             ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"FixedPoint", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Replace", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg1", ",", "arg2"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], 
                    "}"}], ",", "All"}], "]"}], ")"}], "&"}], ",", "h", ",", 
                "maxIter"}], "]"}], ","}], "*)"}], "\[IndentingNewLine]", 
            "\"\<PrecomputedPairProduct\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "Since", " ", "this", " ", "method", " ", "is", " ", "called", 
               " ", "rarely"}], ",", " ", 
              RowBox[{
              "separate", " ", "its", " ", "vars", " ", "in", " ", "the", " ",
                "different", " ", "Module"}]}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"theAlgebra", "=", 
                 RowBox[{"whichAlgebra", "[", 
                  RowBox[{"h", ",", 
                   RowBox[{"Abort", "\[Rule]", "False"}]}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"theOmitedGrades", "=", 
                 RowBox[{"gaPassMethodOptionValue", "[", 
                  RowBox[{
                  "\"\<PrecomputedPairProduct\>\"", ",", "OmitGrades", ",", 
                   "theUserMethodOptions"}], "]"}]}], ",", 
                "coefficientReplacementRules", ",", "theGradesToExtract", ",",
                 "formalMV"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",",
                 "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "realisation", " ", "of", " ", 
                  "PrecomputedPairProductExpansion", " ", "method"}], " ", 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"theGradesToExtract", "=", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
                    "]"}], ",", "theOmitedGrades"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Head", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    "h"}], "]"}], "]"}], "===", "gaPrecomputedPairProduct"}], 
                   ",", 
                   RowBox[{"gaDefineExpandedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"formalMV", "=", 
                  RowBox[{
                   RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{"coefficientReplacementRules", "=", 
                   RowBox[{"Dispatch", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Thread", "/@", 
                    RowBox[{"Rule", "@@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", 
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "singleton"}], "]"}]}], 
                    ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_\[FormalC]", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}], "&"}], "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "h"}], ")"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"formalMV", ",", "formalMV"}], "}"}]}], ")"}]}]}],
                     "}"}], "]"}]}]}], "]"}], "]"}]}], ")"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Total", "[", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"{", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Last", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<PlainRepresentation\>\"", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "]"}], "/.", 
                    "coefficientReplacementRules"}], ")"}], ",", 
                    RowBox[{"List", "/@", 
                    RowBox[{"(", 
                    RowBox[{"theGradesToExtract", "+", "1"}], ")"}]}]}], 
                    "]"}], "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "fall", " ", "back", " ", "to", " ", "RealTimePairProduct", 
                  " ", "method", " ", "if", " ", "base", " ", "elements", " ",
                   "of", " ", "few", " ", "different", " ", "algebras", " ", 
                  "present"}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaProductPairExpand", "::", "MultipleAlgebras"}], 
                   ",", "theAlgebra"}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"gaProductPairExpand", "@@", 
                  RowBox[{"{", 
                   RowBox[{"h", ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"opts", ",", 
                    RowBox[{"Method", "\[Rule]", "_"}]}], "]"}], ",", 
                    RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}],
                     "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
             "]"}], ",", "\[IndentingNewLine]", "_", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaProductPairExpand", "::", "Method"}], ",", 
               "theMethod"}], "]"}], ";", "\[IndentingNewLine]", "h"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"h", ",", "_Association"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"help", " ", "functions"}], ",", " ", 
       RowBox[{"which", " ", "are", " ", "inavoidable"}], ",", " ", 
       RowBox[{
       "because", " ", "these", " ", "patterns", " ", "occur", " ", "in", " ",
         "evaluation", " ", "steps"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "these", " ", "rules", " ", "occur", " ", "less", " ", "often"}], ",", 
       " ", 
       RowBox[{
       "therefore", " ", "speed", " ", "is", " ", "enhanced", " ", "when", 
        " ", "they", " ", "put", " ", "in", " ", "the", " ", "end"}]}], 
      "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{"c_", ",", "___"}], "]"}], ":=", 
      RowBox[{"c", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"c_", "*", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
            "|", "_LeftContract", "|", "_RightContract"}], ")"}]}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{"h", ",", "opts"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[391]:=",ExpressionUUID->"c827b010-68f7-4325-94f6-e8f815412710"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaProductExpand[ ] main part"
}], "Subsubsection",ExpressionUUID->"0448ac83-0765-4982-82c1-39f9ead2d5e1"],

Cell[TextData[{
 "The main command is gaProductExpand[ ]. It doesn\[CloseCurlyQuote]t expand \
anything. It only makes pairs of product for expansion and don\
\[CloseCurlyQuote]t touch pieces which should not be expanded. In the end it \
removes singleton from the end result. Spitting the expression into expansion \
pairs yields huge speedup factor. For example if we have to multiply 3 \
general MV of some algebra with 2^n basis elements, then multiplying them all \
with outer will result into (2^n)^3 operations. Whereas when doing pairwise \
we will have just (2^n)^2+(2^n)^2. For example for n=6 the difference is ",
 Cell[BoxData["262144"], "Output",
  CellChangeTimes->{3.7759637544088907`*^9},ExpressionUUID->
  "6150ac4d-e776-4c7e-ab99-5788076f4439"],
 " versus just ",
 Cell[BoxData["8192"], "Output",
  CellChangeTimes->{{3.7759637544088907`*^9, 3.775963778120125*^9}},
  ExpressionUUID->"00d8e020-fdbc-451e-a880-06fd3c58e817"],
 "! "
}], "Text",ExpressionUUID->"7c2ee06b-a5f5-419a-97dc-d7e8c1cd7a4e"],

Cell["\<\
 MaxIterations\[Rule]Infinity is a possible option for Method\[Rule]\
\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote] only ;   \
OmitGrades\[Rule]{} is a possible option for Method\[Rule]\
\[OpenCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote] only\
\>", "Text",ExpressionUUID->"eb9a7399-6043-4267-9511-a938f5857789"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "ExceptionHeads"}], "=", 
   "\"\<Nonexpandable product were specified. Selected Method -> \
\\\"ConvolutionPairProduct\\\" does not support this feature and will be \
replaced by Method->\\\"RealTimePairProduct\\\". \>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "MV"}], "=", 
   "\"\<General heads MV[] are present. Selected Method -> \
\\\"ConvolutionPairProduct\\\" does not support this feature and will be \
replaced by Method->\\\"RealTimePairProduct\\\". \>\""}], ";"}]}], "Input",
 CellLabel->
  "In[392]:=",ExpressionUUID->"aafc5dec-8485-4a90-9d7d-5eb97ef83702"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaProductExpand", ",", 
    RowBox[{"{", "Listable", "}"}]}], "]"}], ";"}]}], "Input",
 CellLabel->
  "In[394]:=",ExpressionUUID->"021bc6fa-42d9-4670-9d1d-2362e05b6cda"],

Cell["Go inside plus immediately to save time", "Text",ExpressionUUID->"c76fc2cf-e657-4549-bffb-c4396730ae65"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"c_Plus", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "c"}], ")"}], "/.", 
     RowBox[{"{", 
      RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[396]:=",ExpressionUUID->"1fa16ea5-5c31-4d18-b975-749311e3e226"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"op", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaProductExpand", ",", "gaProductPairExpand"}], "}"}], 
      "]"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"exceptHeads", "=", 
        RowBox[{"OptionValue", "[", 
         RowBox[{"gaProductExpand", ",", "\"\<Except\>\""}], "]"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"{", "op", "}"}], ",", 
           RowBox[{"Options", "[", "gaProductPairExpand", "]"}]}], "]"}]}]}], 
       ",", "trueHeads", ",", "trueHeadsHeads", ",", "trueHeadsBlanks"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"trueHeads", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
           "LeftContract", ",", "RightContract"}], "}"}], ",", 
         RowBox[{"Alternatives", "@@", "exceptHeads"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"We", " ", "list", " ", "with", " ", 
        RowBox[{"Cases", "[", " ", "]"}], " ", "all", " ", "patterns", " ", 
        "matched", " ", "and", " ", "then", " ", "do", " ", "step", " ", "by",
         " ", "step", " ", "all", " ", "replacements"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "For", " ", "products", " ", "with", " ", "multiple", " ", "terms"}], 
        ",", " ", 
        RowBox[{"which", " ", "require", " ", "expansion"}], ",", " ", 
        RowBox[{
        "split", " ", "into", " ", "product", " ", "of", " ", "pairs", " ", 
         "for", " ", "speed"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"If", " ", "exceptHeads"}], "=!=", 
         RowBox[{
          RowBox[{"{", "}"}], " ", "we", " ", 
          RowBox[{"can", "'"}], "t", " ", "use", " ", "faster", " ", 
          "\"\<ConvolutionPairProduct\>\"", " ", "method"}]}], ",", " ", 
        RowBox[{
        "therefore", " ", "swich", " ", "to", " ", "slower", " ", 
         "\"\<RealTimePairProduct\>"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "gaTogehter", " ", "deals", " ", "with", " ", "multivectors", " ", 
        "in", " ", "Association", " ", "representation"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"exceptHeads", "===", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"No", " ", "exception", " ", "heads"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"expression", ",", "_MV"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"No", " ", "general", " ", "heads", " ", 
            RowBox[{"MV", "[", " ", "]"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"ReleaseHold", "@@", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Fold", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"ReplaceAll", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOpts"}], "]"}], ")"}]}], ")"}]}], 
                    ",", "Infinity"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
                   RowBox[{"Hold", "[", "expression", "]"}], ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], ",", "Infinity"}], "]"}], 
                    "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"gaProductPairExpand", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", 
                    RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], 
                    ",", "restOpts___"}], "]"}], "\[RuleDelayed]", 
                  RowBox[{"gaProductPairExpand", "[", 
                   RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts"}], 
                    "]"}], ",", "arg2"}], "]"}], ",", "restOpts"}], "]"}]}], 
                 "}"}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "when", " ", "general", " ", "MV", " ", "present", " ", "use", 
             " ", "Method"}], "->", "\"\<RealTimePairProduct\>\""}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "restOpts", "}"}], ",", 
                "\"\<ConvolutionPairProduct\>\""}], "]"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "if", " ", "the", " ", "user", " ", "specified", " ", "the", 
               " ", "expansion", " ", "method", " ", "we", " ", "warn", " ", 
               "and", " ", "replace", " ", "to", " ", "working", " ", "one"}],
               " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "::", "MV"}], ",", 
                RowBox[{"Method", "/.", 
                 RowBox[{"{", "restOpts", "}"}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"restOpts", "=", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", "restOpts", "}"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<ConvolutionPairProduct\>\"", "\[Rule]", 
                    "\"\<RealTimePairProduct\>\""}], "}"}]}], ")"}]}]}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"if", " ", "not"}], ",", " ", 
               RowBox[{
               "just", " ", "use", " ", "the", " ", "appropriate", " ", 
                "method"}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"restOpts", "=", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", "restOpts", "}"}], ",", 
                   RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}], 
                  "}"}], "]"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"gaAssociationTogether", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"ReleaseHold", "@@", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Fold", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"ReplaceAll", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOpts"}], "]"}], ")"}]}], ")"}]}], 
                    ",", "Infinity"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], ",", "Infinity"}], "]"}], 
                    "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    "GeometricProduct", "|", "OuterProduct", "|", 
                    "InnerProduct", "|", "LeftContract", "|", 
                    "RightContract"}], ")"}]}], ")"}], "[", 
                    RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], 
                    ",", "restOpts___"}], "]"}], "\[RuleDelayed]", 
                   RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts"}], 
                    "]"}], ",", "arg2"}], "]"}], ",", "restOpts"}], "]"}]}], 
                  "}"}]}], "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], 
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "general", " ", "MV", " ", "test"}], " ", "*)"}],
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "when", " ", "exception", " ", "heads", " ", "present", " ", "we", 
          " ", "remove", " ", "them", " ", "from", " ", "expansion", " ", 
          "heads"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"trueHeadsHeads", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "trueHeads", "]"}], ",", "0", ",", 
            RowBox[{"{", "}"}], ",", "1", ",", 
            RowBox[{"trueHeads", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{"Alternatives", "@@", "trueHeads"}]}], "]"}]}], ";", 
         RowBox[{"trueHeadsBlanks", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "trueHeadsHeads", "]"}], ",", "0", ",", 
            RowBox[{"{", "}"}], ",", "1", ",", 
            RowBox[{"Blank", "[", "trueHeadsHeads", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{"Blank", "/@", "trueHeadsHeads"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "restOpts", "}"}], ",", 
              "\"\<ConvolutionPairProduct\>\""}], "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "if", " ", "the", " ", "user", " ", "specified", " ", "the", " ", 
             "expansion", " ", "method", " ", "we", " ", "warn", " ", "and", 
             " ", "replace", " ", "to", " ", "working", " ", "one"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaProductExpand", "::", "ExceptionHeads"}], ",", 
              RowBox[{"Method", "/.", 
               RowBox[{"{", "restOpts", "}"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"restOpts", "=", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", "restOpts", "}"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<ConvolutionPairProduct\>\"", "\[Rule]", 
                  "\"\<RealTimePairProduct\>\""}], "}"}]}], ")"}]}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"if", " ", "not"}], ",", " ", 
             RowBox[{
             "just", " ", "use", " ", "the", " ", "appropriate", " ", 
              "method"}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"restOpts", "=", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "restOpts", "}"}], ",", 
                 RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}], 
                "}"}], "]"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"gaAssociationTogether", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"ReleaseHold", "@@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Fold", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"ReplaceAll", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", "trueHeadsBlanks"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOpts"}], "]"}], ")"}]}], ")"}]}], 
                    ",", "Infinity"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
                  RowBox[{"Hold", "[", "expression", "]"}], ",", 
                  RowBox[{"Range", "[", 
                   RowBox[{"Length", "[", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Hold", "[", "expression", "]"}], ",", 
                    RowBox[{"p", ":", "trueHeadsBlanks"}], ",", "Infinity"}], 
                    "]"}], "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"gaProductPairExpand", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"h", ":", "trueHeadsHeads"}], ")"}], "[", 
                    RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], 
                   ",", "restOpts___"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{"gaProductPairExpand", "[", 
                  RowBox[{
                   RowBox[{"h", "[", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts"}], 
                    "]"}], ",", "arg2"}], "]"}], ",", "restOpts"}], "]"}]}], 
                "}"}]}], "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"FreeQ", "[", 
    RowBox[{
     RowBox[{"{", "expression", "}"}], ",", "_gaProductExpand"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaPE", "=", "gaProductExpand"}], ";"}]}], "Input",
 CellLabel->
  "In[397]:=",ExpressionUUID->"13c4ae59-d5a1-4a31-b988-77d9db68979c"],

Cell["\<\
In some rare cases we have to apply both Expand and gaProductExpand \
repeatedly until expression gets expanded. For this rare cases we can apply \
gaExpand[], which do full expansion of all products \
\>", "Text",ExpressionUUID->"1b491b00-38e7-4122-9007-d010877959c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "[", 
    RowBox[{"expression_Plus", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaAssociationTogether", "[", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "]"}], "&"}], "/@", "expression"}],
     "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"55d8dedd-d467-4c3b-b177-c2c5317c633b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"FixedPoint", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Expand", "[", 
       RowBox[{"gaExpand", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "]"}], "&"}], ",", "expression"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "expression", "]"}], "=!=", "Plus"}]}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"20d29dc6-79a7-4ecf-bb08-55c5fdbfb895"],

Cell["\<\
In order to fast test if expression is expanded or not we try to replace \
heads of functions (Sin, Exp, ... ) with unique noncommutative entity. Then \
search for Plus inside operators head. Not ideal solution, but much faster \
than expansion itself. \
\>", "Text",ExpressionUUID->"e32028d4-92b2-43e3-b8ec-81c78a10cc57"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"removeFunctionRules", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", ":", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Sqrt", ",", "Power", ",", "Exp", ",", "Sin", ",", "Cos", ",", 
               "Tan", ",", "Cot", ",", "Csc", ",", "Sec"}], "}"}], ",", "#"}],
             "]"}], "&"}], ")"}]}]}], ")"}], "[", "___", "]"}], 
     "\[RuleDelayed]", 
     RowBox[{"MV", "[", 
      RowBox[{"Unique", "[", "rem", "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExpandedQ", "[", "expr_", "]"}], ":=", 
  RowBox[{"If", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"expr", "/.", "removeFunctionRules"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "Times", "|", "GeometricProduct", "|", "OuterProduct", "|", 
         "InnerProduct", "|", "LeftContract", "|", "RightContract"}], ")"}], 
       "[", 
       RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "===", "expr"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->
  "In[399]:=",ExpressionUUID->"14405df8-7d0e-4e46-9d5f-35206c4b48ec"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple powers"
}], "Subsubsection",ExpressionUUID->"e9852e09-3768-4c6e-b64d-bf2bf6152f36"],

Cell[TextData[{
 "Powers of geometric product. Implementation closely follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text",ExpressionUUID->"ef793601-d00d-43c0-aa04-7e819fefb9c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaGPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", "expr", ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaGPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[401]:=",ExpressionUUID->"f28afc16-3269-4c4f-a2b9-80319a23d6f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaGPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaGeometricMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaGPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[402]:=",ExpressionUUID->"a1b1155a-56f9-4926-b7ae-dddaf5faf899"],

Cell[TextData[{
 "Powers of outer product, Implementation closely follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". It is posible to calculate expansion of outer products of vectors (ONLY) \
using determinants, i.e. without expanding sum of orthogonal vectors. So, \
this is applied to powers as well. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text",ExpressionUUID->"d11091e8-0c4d-4efc-9d9a-fb5df010a8ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaOPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"OuterProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", 
       RowBox[{"gaProductExpand", "[", "expr", "]"}], ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"OuterProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaOPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"OuterProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[403]:=",ExpressionUUID->"d8b591fb-d604-47ae-aea8-9889b4f309ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaOPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaOuterMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaOuterMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaOPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaOuterMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[404]:=",ExpressionUUID->"f89425b2-664c-4cb7-a8c9-7eec6569a3c5"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector construction, random multivector with integer \
coefficients"
}], "Subsubsection",ExpressionUUID->"8b7e22b4-3ee7-4a88-b0c3-6670cd5a9840"],

Cell["\<\
For experimentation we often need to generate general multivector with \
specified grades. Here it is function for this. The gaGeneralMultivector[] \
always uses Format which was used by last gaDefineOrthonormalBasis[ ] command.\
\>", "Text",ExpressionUUID->"15609a48-176c-4b5b-be51-8872e9ad0be6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeneralMultivector", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeneralMultivector", "::", "grade"}], "=", 
    "\"\<The third (optional) argument `1` can be All or {__Integer?Positive}\
\>\""}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "when", " ", "optional", " ", "and", " ", "options", " ", "both", " ", 
     "exist", " ", "the", " ", "solution", " ", "is", " ", 
     RowBox[{"here", ":", " ", "https", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
        "questions"}], "/", "1567"}], "/", "how"}], "-", "to", "-", "avoid", 
     "-", "collision", "-", "between", "-", "optional", "-", "arguments", "-",
      "and", "-", "options"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"notOption", "=", 
   RowBox[{"Except", "[", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{"Function", "[", 
       RowBox[{"elem", ",", 
        RowBox[{"OptionQ", "[", 
         RowBox[{"Unevaluated", "[", "elem", "]"}], "]"}], ",", "HoldAll"}], 
       "]"}], ")"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[405]:=",ExpressionUUID->"f4b307cc-d22c-47fe-bf48-a08eafb31869"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaGeneralMultivector", "[", 
     RowBox[{"coefName_", ",", "al_Cl", ",", 
      RowBox[{"gr", ":", "notOption", ":", "All"}], ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ord", "=", 
         RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}],
         ",", 
        RowBox[{"grade", "=", "gr"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "===", 
          "gaOrthonormalBasis"}], ",", 
         RowBox[{"gaDefineOrthonormalBasis", "[", 
          RowBox[{"al", ",", 
           RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}], ",", 
           RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MatchQ", "[", 
           RowBox[{"grade", ",", " ", 
            RowBox[{"(", 
             RowBox[{"All", "|", " ", 
              RowBox[{"{", 
               RowBox[{"__Integer", "?", "NonNegative"}], "}"}]}], ")"}]}], 
           "]"}]}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaGeneralMultivector", "::", "grade"}], ",", "grade"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "For", " ", "general", " ", "multivector", " ", "use", " ", 
         "internal", " ", "form", " ", "of", " ", "last", " ", "generated", 
         " ", "base"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"grade", "===", 
            RowBox[{"{", "}"}]}], ")"}], "||", 
          RowBox[{"grade", "===", "All"}]}], ",", " ", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"coefName", "[", "i", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "0", ",", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "-", 
               "1"}]}], "}"}]}], "]"}], ".", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"al", ",", "ord", ",", "All"}], "]"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"coefName", "[", "i", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"Sum", "[", 
                   RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], "+", 
                   RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "#"}], "]"}], "-", "1"}]}], "}"}]}], "]"}], ".", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", 
                RowBox[{"{", "#", "}"}]}], "]"}]}], "&"}], "/@", "grade"}], 
           ")"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[408]:=",ExpressionUUID->"6968128c-9b02-4473-985d-f47f22ebb6ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaRandomMultivector", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Range", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomMultivector", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr", ":", "notOption", ":", "All"}], ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"name", ",", 
       RowBox[{"range", "=", 
        RowBox[{"OptionValue", "[", "Range", "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"gaGeneralMultivector", "[", 
       RowBox[{"name", ",", "al", ",", "gr"}], "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"name", "[", "_", "]"}], "\[RuleDelayed]", 
        RowBox[{"RandomInteger", "[", "range", "]"}]}], "}"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[409]:=",ExpressionUUID->"2be4857a-b924-40e5-9a10-3fb636b00bef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[411]:=",ExpressionUUID->"bd5d123f-28d6-42e3-be00-8b3c31286653"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Groebner Basis (only sorting is implemented at the moment)"
}], "Section",ExpressionUUID->"4ab2a7de-c546-41d1-8323-9e22cf95d22f"],

Cell[" Just beginning", "Text",ExpressionUUID->"a19554e5-b070-4348-818f-75d5881618a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaSort", ",", "gaOrdering", ",", "gbLeadingTerm", ",", 
     "gbLeadingMonomial", ",", "gbLeadingCoefficient"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[412]:=",ExpressionUUID->"cac0dba3-af78-423c-9ff3-d8f5cbe1fc52"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[413]:=",ExpressionUUID->"5a53a32b-db79-4b6b-b474-2ebb16d38fa1"],

Cell["Usage messages", "Text",ExpressionUUID->"c6a88457-c242-4231-b9df-496a4d350c30"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSort", "::", "usage"}], "=", 
   "\"\<gaSort[theExprList_List,order:(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\
\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\
\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[\
RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] sorts list theExprList in given \
order. The sorting rules first are defined using \
gaDefineAssociationRepresentationKeyOrder[] inside gaSort[]. Do not yet work \
in full generality, because the order for commutative elements is not yet \
added. To do.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[415]:=",ExpressionUUID->"b284e6cc-34e9-4ef2-ac37-67e0ddadf05b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrdering", "::", "usage"}], "=", 
   "\"\<gaOrdering[theExprList_List,order:(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"\
RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\"|\\\"Deg[\
RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[InvLex]\\\"|\
\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] output the order according \
to the gaSort order. This implementation first gaSort the expression and then \
output positions of the elements of the sorted list. \>\""}], ";"}]], "Input",\

 CellLabel->
  "In[416]:=",ExpressionUUID->"498fbaa8-87d1-416b-bce1-12e135b724a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "::", "usage"}], "=", 
   "\"\<gbLeadingTerm[expr_,ordering_String] returns leading term of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[417]:=",ExpressionUUID->"9eb3812d-a392-414e-93b4-91d2f63db6cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "::", "usage"}], "=", 
   "\"\<gbLeadingMonomial[expr_,ordering_String] returns leading monomial of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[418]:=",ExpressionUUID->"c3eb2f0a-5849-4e15-93ab-16c52f163801"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "::", "usage"}], "=", 
   "\"\<gbLeadingCoefficient[expr_,ordering_String] returns leading \
coefficient of multivector polynomial written in orthonormal base. Defined \
orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". \
These pure orderings can be proceeded with \\\"Deg[]\\\", and \
\\\"InvDeg[]\\\" wrappers, i.e. \\\"Deg[InvLex]\\\", etc..., totally giving \
4*3 possible orderings.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[419]:=",ExpressionUUID->"32458326-dcd6-43a5-80e4-90a391ddb388"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[420]:=",ExpressionUUID->"b35f5199-a110-430f-b087-037131104cfa"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection",ExpressionUUID->"b6561516-a159-44f7-b06a-b5d67a310748"],

Cell[TextData[{
 "Check if MV is the scalar.  An alternative ",
 Cell[BoxData[
 "mvZeroGradeQ"], "Input",ExpressionUUID->
  "804f1546-d9f2-48e3-af36-8d295bf08e8f"],
 "[ ] is slower and can in principle contain basis elements (scalar product \
of them, for example) "
}], "Text",ExpressionUUID->"c3ea3536-4405-4b03-93be-17d807aa1710"],

Cell[BoxData[
 RowBox[{
  RowBox[{"zeroGradeQ", "[", "expr_", "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"gaGetGrade", "[", "expr", "]"}], ",", 
    RowBox[{"{", "0", "}"}], ",", "True", ",", "_", ",", "False"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[421]:=",ExpressionUUID->"66234a28-0812-40f6-87a1-9562fb888996"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Ordering and Sorting"
}], "Subsection",ExpressionUUID->"b118506b-84ea-4b48-80f1-482afa798ea4"],

Cell["\<\
Most ordering functions are defined in the \[OpenCurlyDoubleQuote]Index \
ordering and sorting\[CloseCurlyDoubleQuote] section (4.2.1). For higher \
order sort function we need to/from gaAssociationRepresentation function \
(since general expressions can only be reliably sorted in the Association \
form). \
\>", "Text",ExpressionUUID->"50dd7adb-330e-428e-8822-72e1906a7f5f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSort", "[", 
       RowBox[{"expr_List", ",", "_"}], "]"}], ":=", 
      RowBox[{"expr", "/;", 
       RowBox[{
        RowBox[{"Length", "[", "expr", "]"}], "\[LessEqual]", "1"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSort", "[", 
       RowBox[{"expr_List", ",", 
        RowBox[{"order", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
           "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
           "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
           "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
           "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
           "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"al", "=", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"expr", ",", "_Cl", ",", 
              RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ",", 
           "theOrderingRules", ",", "associationForm", ",", "scalars", ",", 
           "nonScalars", ",", "nonScalarsFin", ",", "exprExpanded"}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "at", " ", "the", " ", "moment", " ", "gaSort", " ", "cannot", " ",
             "sort", " ", "commutative", " ", "variable"}], ",", " ", 
           RowBox[{
           "we", " ", "do", " ", "nothing", " ", "in", " ", "this", " ", 
            "case"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"al", "===", 
            RowBox[{"{", "}"}]}], ",", "expr", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theOrderingRules", "=", 
             RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
              RowBox[{"al", ",", "order"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AllTrue", "[", 
               RowBox[{"expr", ",", "gaExpandedQ"}], "]"}], ",", 
              RowBox[{"exprExpanded", "=", "expr"}], ",", 
              RowBox[{"exprExpanded", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
                "expr"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "sorting", " ", "in", " ", "PlainRepresentation", " ", "is", " ", 
              RowBox[{"difficult", ".", " ", "Convert"}], " ", "to", " ", 
              "AssociationRepresentation", " ", "and", " ", "release", " ", 
              "pure", " ", 
              RowBox[{"scalars", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
            
            RowBox[{"associationForm", "=", 
             RowBox[{"gaAssociationRepresentation", "[", 
              RowBox[{"exprExpanded", ",", 
               RowBox[{
               "gaNonCommutativeMonomialOrder", "\[Rule]", "order"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"scalars", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{"associationForm", ",", 
               RowBox[{"zeroGradeQ", "/@", "associationForm"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"nonScalars", "=", 
             RowBox[{"keyReplace", "[", 
              RowBox[{
               RowBox[{"Sort", "[", 
                RowBox[{"keyReplaceAndSort", "[", 
                 RowBox[{
                  RowBox[{"Cases", "[", 
                   RowBox[{"associationForm", ",", "_bs"}], "]"}], ",", 
                  "theOrderingRules"}], "]"}], "]"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"PositionIndex", "[", "theOrderingRules", "]"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "convert", " ", "back", " ", "if", " ", "Associations", " ", 
              "were", " ", "absent", " ", "in", " ", "initial", " ", 
              "expression"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{"exprExpanded", ",", "Association", ",", 
                RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}], ",", 
              RowBox[{"nonScalarsFin", "=", 
               RowBox[{"gaPlainRepresentation", "[", "nonScalars", "]"}]}], 
              ",", 
              RowBox[{"nonScalarsFin", "=", "nonScalars"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "put", " ", "scalars", " ", "in", " ", "the", " ", "end", " ", 
              "or", " ", "beginning", " ", "depending", " ", "on", " ", 
              "sorting", " ", "order"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                  "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                  ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
                ",", "order"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"scalars", ",", "nonScalarsFin"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"nonScalarsFin", ",", "scalars"}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
         "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "expr", "]"}], ">", "1"}], ")"}]}]}], ";"}]}],
    "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[422]:=",ExpressionUUID->"85c32c5d-3f91-482c-9ac3-4eeda7931393"],

Cell["\<\
If arguments are not basis elements, then in order to decide  about the \
ordering we convert them into Association representation, where comparison is \
easier to decide. \
\>", "Text",ExpressionUUID->"87e938b2-1eb8-49f8-b371-35dbcfb60051"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_Plus", ",", "any2_", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
    RowBox[{
     RowBox[{"gaAssociationRepresentation", "[", "any1", "]"}], ",", 
     RowBox[{"gaAssociationRepresentation", "[", "any2", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_", ",", "any2_Plus", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
    RowBox[{
     RowBox[{"gaAssociationRepresentation", "[", "any1", "]"}], ",", 
     RowBox[{"gaAssociationRepresentation", "[", "any2", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[423]:=",ExpressionUUID->"e7b16c75-933a-40cf-9092-e3b6c8fde391"],

Cell["Ordering of MV in the association form. ", "Text",ExpressionUUID->"c3555e1b-7746-432b-b852-1cf08df5994b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", 
        RowBox[{"ord", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
           "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
           "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
           "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
           "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
           "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], "]"}], "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"any1_Association", ",", "al_Cl", ",", "sa___"}], "]"}], ",", 
        RowBox[{"bs", "[", 
         RowBox[{"any2_Association", ",", "al_Cl", ",", "sa___"}], "]"}]}], 
       "]"}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"theOrderingRules", ",", "scalars"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theOrderingRules", "=", 
         RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
          RowBox[{"al", ",", "ord"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"scalars", "=", 
         RowBox[{"Pick", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"any1", ",", "any2"}], "}"}], ",", 
           RowBox[{"zeroGradeQ", "/@", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{"any1", ",", "al", ",", "sa"}], "]"}], ",", 
              RowBox[{"bs", "[", 
               RowBox[{"any2", ",", "al", ",", "sa"}], "]"}]}], "}"}]}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"scalars", "===", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"OrderedQ", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"keyReplaceAndSort", "[", 
              RowBox[{"any1", ",", "theOrderingRules"}], "]"}], ",", 
             RowBox[{"keyReplaceAndSort", "[", 
              RowBox[{"any2", ",", "theOrderingRules"}], "]"}]}], "}"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "one", " ", "of", " ", "args", " ", "is", " ", "a", 
             " ", "scalar"}], ",", " ", 
            RowBox[{
            "then", " ", "return", " ", "true", " ", "or", " ", "false", " ", 
             "depending", " ", "on", " ", "which"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"zeroGradeQ", "[", 
               RowBox[{"bs", "[", 
                RowBox[{"any1", ",", "al", ",", "sa"}], "]"}], "]"}], ",", 
              "True", ",", "False"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"zeroGradeQ", "[", 
               RowBox[{"bs", "[", 
                RowBox[{"any2", ",", "al", ",", "sa"}], "]"}], "]"}], ",", 
              "True", ",", "False"}], "]"}]}], "\[IndentingNewLine]", "]"}]}],
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[425]:=",ExpressionUUID->"b694e195-62ce-4ce9-a848-7a47c89dde3d"],

Cell["\<\
Sometimes we need to obtain ordering. In this slow solution we just first \
sort list and then take their positions from the sorted list. \
\>", "Text",ExpressionUUID->"662d848b-727d-419d-b9e4-93c8a07a6e97"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOrdering", "[", 
    RowBox[{"expr_List", ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", "1", "}"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "expr", "]"}], "\[LessEqual]", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrdering", "[", 
    RowBox[{"expr_List", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"expr", ",", "#"}], "]"}], "&"}], "/@", 
      RowBox[{"gaSort", "[", 
       RowBox[{"expr", ",", "order"}], "]"}]}], "]"}], "/;", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Length", "[", "expr", "]"}], ">", "1"}], ")"}]}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[426]:=",ExpressionUUID->"b4274ece-80bb-4cf5-8fbd-6e9ba4e39573"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Leading term, leading monomial and leading coefficient"
}], "Subsection",ExpressionUUID->"c634a8cb-e675-4382-85b2-fadcea828263"],

Cell[TextData[{
 " Ordering functions (i.e. ",
 StyleBox["gaOrderedQ",
  FontWeight->"Bold"],
 "[ ], etc... )  are realised in section ",
 StyleBox["3. Objects: orthonormal base notation and definition.",
  FontSlant->"Italic"],
 " Defined noncommutative orderings are \\\[CloseCurlyDoubleQuote] Lex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote]. These pure orderings can be proceeded with \\\
\[CloseCurlyDoubleQuote] Deg[]\\\[CloseCurlyDoubleQuote], and \\\
\[CloseCurlyDoubleQuote] InvDeg[]\\\[CloseCurlyDoubleQuote] wrappers, totally \
giving 4*3 possible orderings. Orders \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote] and the default order \\\[CloseCurlyDoubleQuote] \
InvDeg[Lex]\\\[CloseCurlyDoubleQuote] are not admissible and cannot be used \
as Groebner base monomial orders.  Commutative coefficients use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s orderings i.e. \\\[CloseCurlyDoubleQuote]Lexicographic \
\\\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] DegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
DegreeReverseLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeDegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
NegativeDegreeReverseLexicographic \\\[CloseCurlyDoubleQuote] and \\\
\[CloseCurlyDoubleQuote] Reverse[Lexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[DegreeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[DegreeReverseLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[NegativeDegreeLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeDegreeReverseLexicographic]\\\
\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"70b1ba68-52a1-434d-962b-3bafdab513ed"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exprList", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"Plus", "[", 
          RowBox[{"expr", ",", "Nothing"}], "]"}]}], ")"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "exprList", "]"}], "===", "1"}], ",", "expr", 
       ",", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], ",", "#1", ",", "#2"}], "]"}], 
          "&"}], ",", "exprList"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[428]:=",ExpressionUUID->"9fa3df2c-46dd-403a-9a0b-2957debe925d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gbLeadingMonomial", "[", 
       RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "bs"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"mvZeroGradeQ", "[", "gblt", "]"}], ",", "1", " ", ",", 
       RowBox[{"gbLeadingMonomial", "[", "gblt", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[430]:=",ExpressionUUID->"fd3ae217-7046-419e-a796-2cf5864b5537"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", 
        RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "c"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", "c_", "]"}], ":=", 
       RowBox[{"c", "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "baseSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"gbLeadingCoefficient", "[", "gblt", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[433]:=",ExpressionUUID->"21235549-6f81-4d20-9857-024ea390f5fc"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". To continue"
}], "Subsection",ExpressionUUID->"6706b0e2-401f-4048-8445-0c1b6126600c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[435]:=",ExpressionUUID->"4fb56c53-a0e3-4f0c-96fd-9417e209296b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Involutions and mathematical functions of multivectors"
}], "Section",ExpressionUUID->"60614cca-24a6-49cb-92b4-25008c1bebb7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaLinearQ", ",", "gaSetLinear", ",", "gaHomogeneusGradeQ", ",", 
     "gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate", ",", 
     "gaGradeNegate", ",", "gaBinomialConjugate", ",", 
     "gaNonZeroGradeInverse", ",", "gaComplexConjugate", ",", 
     "gaComplexSymbols", ",", "gaComplexCliffordConjugate", ",", 
     "gaQuaternionicConjugate", ",", "gaHermitianConjugate", ",", 
     "gaPrincipalInvolution", ",", "gaHermitianQ", ",", "gaHodgeDual", ",", 
     "gaEliminateGrade", ",", "SignChangeGrades", ",", "Evaluation", ",", 
     "OutputType", ",", "InvolutionPosition", ",", "gaGeometricProductSeries",
      ",", "gaGeometricExp", ",", "gaExp", ",", "gaGeometricSin", ",", 
     "gaSin", ",", "gaGeometricSinh", ",", "gaSinh", ",", "gaGeometricCos", 
     ",", "gaCos", ",", "gaGeometricCosh", ",", "gaCosh", ",", 
     "gaGeometricTan", ",", "gaTan", ",", "gaGeometricTanh", ",", "gaTanh", 
     ",", "gaCommutator", ",", "gaAntiCommutator", ",", "gaCommutatorExpand", 
     ",", "gaCE", ",", "gaZassenhausCoefficient", ",", " ", 
     "gaZassenhausSeries", ",", "gaZassenhausSeriesData", ",", "gaSeries", 
     ",", "gaSeriesData", ",", "gaParameterSeries", ",", 
     "gaBakerCampbellHausdorffSeries", ",", "gaBCHSeries", ",", 
     "gaBakerCampbellHausdorffTermLogarithm", ",", 
     "gaBakerCampbellHausdorffSeriesData", ",", "gaSqrt"}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"b0301431-7e33-45f7-b611-76bf5cd3a1d8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[437]:=",ExpressionUUID->"585bae98-0c4c-4892-933a-80a72f2361d7"],

Cell["\<\
Unary operations on multivectors are gaReverse, gaNormReverseAbs, gaInverse, \
gaGradeInverse, gaCliffordConjugate\
\>", "Text",ExpressionUUID->"d597e3be-ab15-4a42-a8e2-b20d6c8a9059"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearQ", "::", "usage"}], "=", 
   "\"\<gaLinearQ[a] returns True if function is linear in multivector \
space\>\""}], ";"}]], "Input",
 CellLabel->
  "In[439]:=",ExpressionUUID->"1c371f64-8a8d-4d31-bf4d-8fd5d661e1e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetLinear", "::", "usage"}], "=", 
   "\"\<gaSetLinear[a,b,...] sets functions a,b,...  to be linear functions \
of multivectors.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[440]:=",ExpressionUUID->"4feaa52d-8c0a-4ca0-aa42-f19630b7f5bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "::", "usage"}], "=", 
   "\"\<gaHomogeneusGradeQ[expr] returns True if multivector has homogeneus \
grade.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[441]:=",ExpressionUUID->"09daab01-931a-4deb-ac00-3c4d8321a640"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "::", "usage"}], "=", 
   "\"\<gaReverse[A_r], where A_r is single multivector (or geometric product \
of multivectors) realize reverse operation A_r -> (-1)^(r (r-1))/2 A_r (for \
homogeneus multivector of rank r) of geometric algebra (main \
antiauthomorphism, see [KG-HFinP&Sp], p.56). Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[442]:=",ExpressionUUID->"c129ccd2-d6b3-450d-8b91-509ace1ab821"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "::", "usage"}], "=", 
   "\"\<gaGradeInverse[m] calculates the conjugate of a multivector \
m_r->(-1)^r m_r, see [DH-STA, formula 4.12]. Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[443]:=",ExpressionUUID->"e6c7fa0a-3c9f-4ffb-a3c6-5da322637076"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaCliffordConjugate[m] is defined as a combination of gaReverse and \
gaGradeInverse operations, see [DH-STA, formula 6.10]. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[444]:=",ExpressionUUID->"fcd8fab9-6709-46fb-aba0-785db6374489"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeNegate", "::", "usage"}], "=", 
   "\"\<gaGradeNegate[m,grade_List] is a general involution, which only \
changes signs of grades listed in grade. If grade list is empty list, initial \
multivector is returned.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[445]:=",ExpressionUUID->"9e3d0343-866e-4310-9157-a84ae33507e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBinomialConjugate", "::", "usage"}], "=", 
   "\"\<gaBinomialConjugate[MV,r_Integer?Positive] (see below for \
gaBinomialConjugate[MV,{r__Integer?Positive}]),is a special conjugation \
computed as Sum[(-1)^Binomial[2^r,k] <U\!\(\*SubscriptBox[\(>\), \(k\)]\), \
{k,0,n}] (see D.S. Shirokov arxiv:2005.04015v1 \\\"On determinant, other \
characteristic polynomial coefficients, and inverses in Clifford algebras of \
arbitrary dimension\\\", 2020, May) which is defined for algebra of vector \
space dimension n\[GreaterEqual]2^r. gaBinomialConjugate[MV,1] is in fact \
gaGradeInverse[ ], gaBinomialConjugate[MV,2] is gaReverse[ ]. \
gaBinomialConjugate[MV,r_List] represents multiplication of involutions \
listed in list r.\>\""}], ";"}]], "Input",ExpressionUUID->"adb2a710-8839-4238-\
b5a2-499d788c1bac"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonZeroGradeInverse", "::", "usage"}], "=", 
   "\"\<gaNonZeroGradeInverse[expr] inverses all grades except of the scalar \
grade.\>\""}], ";"}]], "Input",ExpressionUUID->"9e78862b-52a4-4df8-b2d4-\
539cf5e8ef51"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexConjugate", "::", "usage"}], "=", 
   "\"\<gaComplexConjugate[expr] replaces all imaginary numbers by complex \
conjugate numbers. By default all symbols are assumed to represent real \
quantities. Use option gaComplexConjugate to make exeptions.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexSymbols", "::", "usage"}], "=", 
   "\"\<Is the option for gaComplexConjugate->None|List which simply \
instructs to wrap the listed symbols with Conjugate[].\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[446]:=",ExpressionUUID->"0c0a2ce7-0c6c-4efd-a115-f118831f7224"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaComplexCliffordConjugate[expr] is a shortcut for \
gaReverse[gaComplexConjugate[expr]]. Meaningful in  complex Clifford algebras \
only. Note, that in real algebras Clifford conjugation is a combination of \
grade inverse and reverse.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[448]:=",ExpressionUUID->"ad960b19-b171-4f7f-a026-4a690360db70"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaQuaternionicConjugate", "::", "usage"}], "=", 
   "\"\<gaQuaternionicConjugate[expr]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[449]:=",ExpressionUUID->"62758656-7ac9-4083-93f5-3e4633f743db"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianConjugate", "::", "usage"}], "=", 
   "\"\<gaHermitianConjugate[expr] realises the definition of Hermitian \
conjugate (aka principal involution) for complex Clifford algebras. Default \
Method\[Rule]\\\"DownUp\\\" change down indices to up indices (and vice \
versa) and then uses gaReverse followed by gaComplexExpand (no expressionn \
expansion). Other possible methods are \\\"P\\\",  \\\"Q\\\", which use only \
down indices and do not expand the expression. The Method \\\"Sign\\\" uses \
gaReverse and directly replaces signs of q indices (requires expr expansion). \
The Method->\\\"DownUpExpand\\\" performs similar procedure as for \\\"DownUp\
\\\" on expanded expression. The option gaComplexConjugate->Automatic|{}|List \
which instructs to wrap the listed symbols with Conjugate[].\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPrincipalInvolution", "::", "usage"}], "=", 
   "\"\<gaPrincipalInvolution[expr] is alias of gaHermitianConjugate[expr].\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianQ", "::", "usage"}], "=", 
   "\"\<gaHermitianQ[expr] returs True for Hermitian expression, false \
otherwise\>\""}], ";"}]}], "Input",ExpressionUUID->"ba3b4aa9-06eb-416c-92d0-\
3e0e216ab39a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHodgeDual", "::", "usage"}], "=", 
   "\"\<gaHodgeDual[expr] computes Hodge dual of expr. Method->\\\"MVInverseI\
\\\", \\\"MVReverseI\\\", \\\"MVI\\\" and \\\"ReverseMVI\\\"(Vaz book p. 70)  \
in fact uses different definitions which can be found in the \
literature.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[453]:=",ExpressionUUID->"1b896655-3298-4781-acf8-5103b3e486bc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "usage"}], "=", 
   "\"\<gaEliminateGrade[multivector_,eliminateGrade_List,opts___?OptionQ] is \
a command, which multiplies the given general multivector by the same \
multivector acted by involution from the right in attempt to remove from the \
product grades listed in eliminateGrade list. Empty output means that given \
grades cannot be eliminated by mentioned procedure.\>\""}], ";", 
  RowBox[{
   RowBox[{"OutputType", "::", "usage"}], "=", 
   "\"\<OutputType is an option for gaEliminateGrade[], which change output \
presentation. Possible values are SignChangeGrades and Evaluation \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InvolutionPosition", "::", "usage"}], "=", 
   "\"\<InvolutionPosition is an option for gaEliminateGrade[], which decides \
from which side invuluted multivector is multiplied. Possible values are \
Right (default) and Left.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[454]:=",ExpressionUUID->"861ce4db-13c5-4c7e-94a6-7b3f35ef7cae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricProductSeries", "::", "usage"}], "=", 
    "\"\<gaGeometricProductSeries[f_functionHead,{m_multivector,{p_,n_Integer?\
Positive:10}}] calculates the series of the function f, of a multivector m at \
point p up to a power n. Option Expand->True can be used to expand series in \
time of generation. This is much faster than later expanding held \
series.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricProductSeries[ ]. Option Expand->True can be \
used to expand series in time of generation. This is much faster than later \
expanding held series.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[456]:=",ExpressionUUID->"84ebfeb6-7030-4797-afa4-a79e6a54a0f2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricExp", "::", "usage"}], "=", 
   "\"\<gaGeometricExp[m_multivector,{p_:0,n_Integer?Positive:10}] or shorter \
gaExp[m,n] calculates the series of the function Exp, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExp", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricExp[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[458]:=",ExpressionUUID->"f5d96872-53bc-4f7d-a5a7-cbd84d63c468"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSin", "::", "usage"}], "=", 
   "\"\<gaGeometricSin[m_multivector,{p_:0,n_Integer?Positive:10}] or shorter \
gaSin[m,n] calculates the series of the function\nSin, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSin", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSin[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[460]:=",ExpressionUUID->"ed6a9a3d-6f4a-4673-9a42-0baf2c6bd4e9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSinh", "::", "usage"}], "=", 
   "\"\<gaGeometricSinh[m_multivector,{p_:0,n_Integer?Positive:10}] or \
shorter gaSinh[m,n] calculates the series of the function\nSinh, of a \
multivector m at point p up to a power n.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSinh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSinh[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[462]:=",ExpressionUUID->"5c8cb435-c6c8-42b4-8a07-e9717c9feb89"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCos", "::", "usage"}], "=", 
   "\"\<gaGeometricCos[m_multivector,{p_:0,n_Integer?Positive:10}] or shorter \
gaCos[m,n] calculates the series of the function\nCos, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCos", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCos[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[464]:=",ExpressionUUID->"72caff6f-be9c-4f41-b72b-2ed2e1e9991e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCosh", "::", "usage"}], "=", 
   "\"\<gaGeometricCosh[m_multivector,{p_:0,n_Integer?Positive:10}] or \
shorter gaCosh[m,n] calculates the series of the function\nCosh, of a \
multivector m at point p up to a power n.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCosh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCosh[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[466]:=",ExpressionUUID->"d4490cd1-aeab-49d5-806e-ea5b8d4962fa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTan", "::", "usage"}], "=", 
   "\"\<gaGeometricTan[m_multivector,{p_:0,n_Integer?Positive:10}] or shorter \
gaTan[m,n] calculates the series of the function\ngaTan, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTan", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTan[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[468]:=",ExpressionUUID->"8db50add-b5b8-42d0-9fbe-7a9a66111008"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTanh", "::", "usage"}], "=", 
   "\"\<gaGeometricTanh[m_multivector,{p_:0,n_Integer?Positive:10}] or \
shorter gaTanh[m,n] calculates the series of the function\nTan, of a \
multivector m at point p up to a power n.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTanh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTanh[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[470]:=",ExpressionUUID->"d0cb4cf8-70fe-48e4-90a0-a9c3ea1c884d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutator", "::", "usage"}], "=", 
   "\"\<gaCommutator[a,b] defines notation fo quantity ab-ba\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAntiCommutator", "::", "usage"}], "=", 
   "\"\<gaAnticommutator[a,b] defines notation for quantity ab+ba\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[472]:=",ExpressionUUID->"e384b261-2123-4b8d-88e9-c6cb6e5f2b75"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutatorExpand", "::", "usage"}], "=", 
   "\"\<gaCommutatorExpand[a,b] (alias gaCE[ ]) expands to quantity ab-ba, \
Option Except->{gaAntiCommutator} prevents expansion of \
gaAntiCommutator.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "::", "usage"}], "=", "\"\<Short alias for gaCE[ ].\>\""}],
   ";"}]}], "Input",
 CellLabel->
  "In[474]:=",ExpressionUUID->"692a523b-9d93-418f-9e67-bffdf19172a5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "::", "usage"}], "=", 
   "\"\<gaZassenhausCoefficient[a_,b_][p_Integer] or \
gaZassenhausCoefficient[p_Integer] gives coefficients of Zassenhaus series.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeries", "::", "usage"}], "=", 
   "\"\<gaZassenhausSeries[Exp[aa_+bb_],n_Integer?(#\[GreaterEqual]2&),opts___\
] gives expansion of Zassenhaus series to n-th order. The result is presented \
as gaBakerCampbellHausdorffSeriesData, where each term represents homogenic \
polynomial. Option Format values \\\"Right\\\" or \\\"Left\\\" gives \
left-oriented, i.e.  exp[x+y]=...exp[c3[x,y]]exp[c2[x,y]]exp[y]exp[x] or \
right-oriented, i.e. exp[x+y]=exp[x]exp[y]exp[c2[x,y]]exp[c3[x,y]]... series \
form. Commutator in output of gaZassenhausSeriesData is defined as AB-BA, \
i.e. without overal factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaZassenhausSeries[ ] result. \
gaSeriesData[gaZassenhausSeriesData[ ]] converts the result to gaSeriesData[ \
]. Commutator in output is defined as AB-BA, i.e. without overal \
factor.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[476]:=",ExpressionUUID->"aa99f970-4d97-4bc5-ab98-c0d524c38a57"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "::", "usage"}], "=", 
   "\"\<Represents transformation data of same infinitezimal size.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "::", "usage"}], "=", 
   "\"\<gaParameterSeries[a_gaSeriesData, var] Converts gaSeriesData like \
Normal, but adds infinitizimality parameter var.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[479]:=",ExpressionUUID->"db452ee5-75a9-48f9-99e9-4067d5988622"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffTermLogarithm[{exprs__String},n_Integer], \
gives n-th homogenic term of BCH series. Is used by \
gaBakerCampbellHausdorffSeries[ ] command.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries[GeometricProduct[expr__Exp],n_Integer?(\
#\[GreaterEqual]2&),opts___ ] gives expansion of BCH series to n-th order. \
The result is presented as gaBakerCampbellHausdorffSeriesData, where each \
term represents homogenic polynomial. Option Format values \
\\\"Commutators\\\", \\\"Expand\\\" or \\\"None\\\" rewrites the polynomials \
in required form.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBCHSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaBakerCampbellHausdorffSeries.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaBakerCampbellHausdorffSeries[ ] result. \
gaSeriesData[gaBakerCampbellHausdorffSeriesData[ ]] converts the result to \
gaSeriesData[ ].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[481]:=",ExpressionUUID->"04758cf9-aabd-4db6-9456-fd14a71f8b01"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrt", "::", "usage"}], "=", 
   "\"\<Yields square root of general multivector in radicals. Works for \
vector space dimension n=3 only.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[485]:=",ExpressionUUID->"76d8a988-8e94-420a-a49c-b1af16deeda4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[486]:=",ExpressionUUID->"9bc1bbf6-00c7-4426-9b76-917704014ddb"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Unary operators"
}], "Subsection",ExpressionUUID->"c5c60def-87c3-4330-baa1-b293dc3443c3"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"1edec70e-eee8-4931-919e-8773f9ffca82"],

Cell[TextData[{
 StyleBox["gaSetLinear[ ]",
  FontWeight->"Bold"],
 " implements linearity property for multivectors"
}], "Text",ExpressionUUID->"fdf572c0-d401-4a53-950c-68c52f128df5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaLinearQ", "[", "___", "]"}], "=", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaSetLinear", "[", "heads__", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"expr", "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{
              "MV", "|", "bs", "|", "Pattern", "|", "Blank", "|", 
               "BlankSequence", "|", "BlankNullSequence"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}]}]}], "]"}], "/@", 
       RowBox[{"{", "heads", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", "]"}],
   ";"}]}], "Input",ExpressionUUID->"4e40f4f3-5c87-4696-8725-0f10d9147e6c"],

Cell[TextData[{
 StyleBox["gaHomogeneusGradeQ[ ] ",
  FontWeight->"Bold"],
 "checks if expression has homogeneous grade. The ",
 StyleBox["c_.*bs[__]",
  FontWeight->"Bold"],
 " pattern only makes sense for functions, which are not mvLinear. This is ",
 StyleBox["gaHomogeneusGradeQ[ ],  gaNormOfCoefficients[ ],  \
gaNormReverseAbs[ ],  gaInverse[ ]",
  FontWeight->"Bold"],
 ",... For gaLinear functions this pattern is optional."
}], "Text",ExpressionUUID->"9bb42de4-6b10-4feb-8031-ba4df2929e47"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHomogeneusGradeQ", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"bs", "[", "__", "]"}]}], "]"}], "=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "s_Symbol", "]"}], "=", "True"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaHomogeneusGradeQ", "[", 
     RowBox[{"c_", "?", "NumericQ"}], "]"}], "=", "True"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "fast", " ", "decision", " ", "is", " ", "impossible", " ", 
    "call", " ", 
    RowBox[{"gaGetGrade", "[", " ", "]"}]}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "f_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{
     RowBox[{"gaGetGrade", "[", "f", "]"}], ",", 
     RowBox[{"{", "_Integer", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[489]:=",ExpressionUUID->"c50dc0b5-0ee1-43c0-b42f-cf51fbabd09f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Involutions, conjugations and Hodge dual"
}], "Subsubsection",ExpressionUUID->"cbda8825-46d2-4dbc-bf15-a559fedee625"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaGradeNegate[ ] ",
  FontWeight->"Bold"],
 "involution (most general one)"
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"3a4c7849-eff5-42dd-ae60-6e3be65eafac"],

Cell[TextData[{
 " At first we define ",
 StyleBox["gaGradeNegate[ ]",
  FontWeight->"Bold"],
 " involution, which changes signs of specified grades only. Then the \
standard Clifford algebra involutions are defined using the gaGradeNegate",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"9a33b4ac-7379-4e62-8a40-385bcdfde8eb"],

Cell["\<\
 Specific (fast) case, when multivector is represented as a single Association\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"03cdbebb-2295-4f14-bfc4-2ee415357226"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGradeNegate", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            "grade_List"}], "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"arg", ",", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"KeySelect", "[", 
                RowBox[{"arg", ",", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"grade", ",", 
                    RowBox[{"(", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ")"}]}], "]"}],
                   "&"}]}], "]"}]}], ")"}]}], "]"}], ",", "other"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[493]:=",ExpressionUUID->"ab2733b9-263f-486f-af2a-d9a0d85c61d9"],

Cell["\<\
 General case for PlainRepresentation (without restriction not to use with \
products inside, causes huge delay problems due to expansion)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"13175fdd-adbc-4931-bbe0-0a9afa5b1ef2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaGradeNegate", "[", 
      RowBox[{"expr_", ",", "grade_List"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"allGrades", ",", "restGrades"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"allGrades", "=", 
          RowBox[{"gaGetGrade", "[", "expr", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"restGrades", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"allGrades", ",", "grade"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"restGrades", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"-", "1"}], "*", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"expr", ",", "grade"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "allGrades", ",", "expr", ",", 
           "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "1"}], "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"expr", ",", "grade"}], "]"}]}], "+", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"expr", ",", "restGrades"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"(", 
           RowBox[{
           "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
            "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}], "&&", 
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaGetGrade", "[", "expr", "]"}], "]"}], "=!=", 
         "gaGetGrade"}]}], ")"}]}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"e73be8c6-9995-4b89-a428-2ea47cba4c0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Involutions, which are special cases of ",
 StyleBox["gaGradeNegate[ ]",
  FontWeight->"Bold"],
 ": these include  ",
 StyleBox["gaReverse[ ], gaGradeInverse[ ]",
  FontWeight->"Bold"],
 ",  ",
 StyleBox[" gaCliffordConjugate[ ] ",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaBinomialConjugate[ ] ",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"4d438efb-1de9-48d5-8d50-93f50cf53c5d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBinomialConjugate", "::", "NotDefined"}], "=", 
   "\"\<Required gaBinomialConjugate for binomial rank value `1` is defined \
only for algebra with vector space dimension greater or equal to `2`.\>\""}], 
  ";"}]], "Input",ExpressionUUID->"46cdf012-fc66-4328-a4a8-3e6de087afc1"],

Cell["\<\
 Specific (fast) case, when multivector is represented as a single Association\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"f7a609c8-8365-4b8a-b896-14ab4fd2011d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaReverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaReverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGradeInverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaGradeInverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaNonZeroGradeInverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"Join", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"-", 
                RowBox[{"KeySelect", "[", 
                 RowBox[{"arg", ",", 
                  RowBox[{
                   RowBox[{"MatchQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "]"}], "&"}]}], "]"}]}]}], 
              "]"}], ")"}]}], ",", "al", ",", "other"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCliffordConjugate", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "al_Cl", ",", "other___"}], 
             "]"}], ",", 
            RowBox[{"r_Integer", "?", "Positive"}], ",", 
            RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], 
            "\[GreaterEqual]", 
            RowBox[{"2", "^", 
             RowBox[{"(", 
              RowBox[{"r", "-", "1"}], ")"}]}]}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"(", 
                RowBox[{"-", 
                 RowBox[{"KeySelect", "[", 
                  RowBox[{"arg", ",", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"2", "^", "r"}]}], "]"}], "\[GreaterEqual]", 
                    RowBox[{"(", 
                    RowBox[{"2", "^", 
                    RowBox[{"(", 
                    RowBox[{"r", "-", "1"}], ")"}]}], ")"}]}], ")"}], "&"}]}],
                   "]"}]}], ")"}]}], "]"}], ",", "al", ",", "other"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaBinomialConjugate", "::", "NotDefined"}], ",", "r", 
             ",", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"r", "-", "1"}], ")"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"af74f7b8-709e-475c-93c3-aa5551fbe212"],

Cell[TextData[{
 "Definitions. \nReverse of multivector is a multivector itself with \
additional phase. According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56 it is named as involution R. (antiauthomorphism, i.e. changes order \
of multipliers).\n\nAccording to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaGradeInverse",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "is involution M (main involution).  See also ",
 ButtonBox["[DH-STA4 .12 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 17. This operation change sign of all odd grade multivectors. It does \
not change order of terms (proper automorphism, i.e. order of multipliers \
remain the same).\n\nFor CliffordConjugate (see  ",
 ButtonBox["[DH-STA6 .10 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 21).  According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaCliffordConjugate",
 StyleBox[" [ ]",
  FontWeight->"Bold"],
 " is involution (antiautomorphism, i.e. changes order of multipliers) C \
(Clifford conjugation ). Thought gaCliffordConjugate can be expressed using \
gaCliffordConjugate and ",
 StyleBox["gaReverse",
  FontWeight->"Bold"],
 " as gaCliffordConjugate",
 StyleBox["[v_,opts___?OptionQ]:=",
  FontWeight->"Bold"],
 "gaGradeInverse",
 StyleBox["[gaReverse[v,opts],opts]",
  FontWeight->"Bold"],
 ", we prefer direct calculation"
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"d61ff425-67ff-4709-bef3-1219df3ea905"],

Cell["Involutions are linear functions", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"57d8ab61-daeb-47ab-a058-2df7846e1814"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaReverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaSetLinear", "/@", 
    RowBox[{"{", 
     RowBox[{
     "gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate", ",", 
      "gaNonZeroGradeInverse"}], "}"}]}], ";"}]}]], "Input",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"19244310-2bd4-4d5a-a02e-5199645dd295"],

Cell["Involution action on base elements in PlainRepresentation", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"96dd64e1-c224-475e-8c93-7725f3a00a70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaReverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaGradeInverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNonZeroGradeInverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], "/;", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"List", "@@", "arg"}], "]"}], "]"}], ">", "0"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"gaBinomialConjugate", "[", "]"}], " ", "has", " ", "two", " ",
        "arguments", " ", "and", " ", "we", " ", "want", " ", "it", " ", "to",
        " ", "be", " ", "linear", " ", "with", " ", "respect", " ", "to", " ",
        "the", " ", "first", " ", "argument", " ", "only"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", "_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", "param_", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "param", ",", "op"}], "]"}]}], "]"}], ",", 
             "y"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", "param_", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "param", ",", "op"}], 
              "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", "param_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"expr", "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}]}]}], "]"}], "/@", 
       RowBox[{"{", "gaBinomialConjugate", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"product", " ", "of", " ", 
       RowBox[{"gaBinomialConjugate", "[", " ", "]"}], " ", "is", " ", 
       "implemented", " ", "as", " ", "Folding", " ", "over", " ", "list", 
       " ", "of", " ", "pure", " ", "conjugations"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBinomialConjugate", "[", 
       RowBox[{"expr_bs", ",", 
        RowBox[{"{", 
         RowBox[{"r__Integer", "?", "Positive"}], "}"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Fold", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaBinomialConjugate", "[", 
          RowBox[{"#1", ",", "#2", ",", "opts"}], "]"}], "&"}], ",", "expr", 
        ",", 
        RowBox[{"{", "r", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "computation", " ", "of", " ", "pure", " ", "Binomial", " ", 
       "conjugations"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBinomialConjugate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"r_Integer", "?", "Positive"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], 
         "\[GreaterEqual]", 
         RowBox[{"2", "^", 
          RowBox[{"(", 
           RowBox[{"r", "-", "1"}], ")"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "arg"}], "]"}], "]"}], ",", 
                  RowBox[{"2", "^", 
                   RowBox[{"(", 
                    RowBox[{"r", "+", "1"}], ")"}]}]}], "]"}], ",", "2", ",", 
                "r"}], "]"}], "]"}], "===", "1"}], ",", 
            RowBox[{"(", 
             RowBox[{"-", 
              RowBox[{"bs", "[", 
               RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], ")"}], ",", 
            
            RowBox[{"bs", "[", 
             RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], "]"}], ","}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"faster", " ", "check"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"List", "@@", "arg"}], "]"}], "]"}], ",", 
              RowBox[{"2", "^", "r"}]}], "]"}], "\[GreaterEqual]", 
            RowBox[{"(", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"r", "-", "1"}], ")"}]}], ")"}]}], ")"}], ",", 
          RowBox[{"(", 
           RowBox[{"-", 
            RowBox[{"bs", "[", 
             RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], ")"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"arg", ",", "al", ",", "other"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaBinomialConjugate", "::", "NotDefined"}], ",", "r", ",", 
           RowBox[{"2", "^", 
            RowBox[{"(", 
             RowBox[{"r", "-", "1"}], ")"}]}]}], "]"}], ";", "$Failed"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"6eb1d731-c1c1-4d40-8986-5c937894cdf8"],

Cell[TextData[{
 "Reverse of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " rewrites expression from different side and then reverses  each term. \
Currently no rules for  ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ".\nNote on implementation. We should be carefull when operating on ",
 StyleBox["expr_GeometricProduct",
  FontWeight->"Bold"],
 ". For example, if in ",
 StyleBox["Reverse",
  FontWeight->"Bold"],
 " function we would first reverse expr, and then map gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", we would enter into infinite loop when applied to bivector. The reason is \
that after reversion we get ",
 StyleBox["Times[-1, GeometricProduct[expr]] ",
  FontWeight->"Bold"],
 "and the mapping would again map ",
 "gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " itself. "
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"95c9b705-3ceb-41e5-bdc9-98bf2fb1c942"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[498]:=",ExpressionUUID->"85c05500-c011-4b71-b2a4-a52f5d759d64"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[499]:=",ExpressionUUID->"1d45e7e8-9e92-49ba-b747-5bc56d42637c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellLabel->
  "In[500]:=",ExpressionUUID->"20c8ee5a-4eeb-44e5-bb08-4f1057a3e407"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Hermitian conjugation for complex Clifford algebras:  ",
 StyleBox["gaComplexConjugate[ ], gaComplexCliffordConjugate[ ]",
  FontWeight->"Bold"],
 ", and ",
 StyleBox[" gaHermitianConjugate[ ] ",
  FontWeight->"Bold"],
 "(aka ",
 StyleBox["PrincipalInvolution[ ]",
  FontWeight->"Bold"],
 ")"
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"c1d34d6c-d454-4342-8916-a5fd0473bed1"],

Cell["\<\
We assume, that all symbolic quantities are real, therefore we simply change \
complex unit sign.  \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"4fdfe02a-e14c-46f9-a550-2baae2c5cfbe"],

Cell["\<\
To do: add option to gaComplexConjugate, ... to dealt with symbolic \
coefficients (i.e. wrap symbolic coefficients with Conjugate[ ], for correct \
expressions)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"5b2f92e0-4bae-402b-ab3a-ff9711bece93"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaComplexConjugate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"gaComplexSymbols", "\[Rule]", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexConjugate", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"complexSymb", "=", 
        RowBox[{"OptionValue", "[", "gaComplexSymbols", "]"}]}], ",", 
       "numberConjugate"}], "}"}], ",", 
     RowBox[{
      RowBox[{"numberConjugate", "=", 
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Complex", "[", 
            RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Complex", "[", 
            RowBox[{"x", ",", 
             RowBox[{"-", "y"}]}], "]"}]}], "}"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"complexSymb", ",", "\[IndentingNewLine]", 
        RowBox[{"{", "}"}], ",", "numberConjugate", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<Automatic\>\"", "|", "Automatic"}], ",", 
        RowBox[{
         RowBox[{"complexSymb", "=", 
          RowBox[{"gaVariables", "[", "expr", "]"}]}], ";", 
         RowBox[{"numberConjugate", "/.", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"complexSymb", ",", 
             RowBox[{"Conjugate", "/@", "complexSymb"}]}], "]"}], "]"}]}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", "__", "}"}], ",", 
        RowBox[{"numberConjugate", "/.", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{"complexSymb", ",", 
            RowBox[{"Conjugate", "/@", "complexSymb"}]}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[501]:=",ExpressionUUID->"39ef3650-16ff-4a15-9eff-7245f94114d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexCliffordConjugate", "[", "expr_", "]"}], ":=", 
   RowBox[{"gaReverse", "[", 
    RowBox[{"gaComplexConjugate", "[", "expr", "]"}], "]"}]}], ";"}]], "Input",\

 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[503]:=",ExpressionUUID->"90b2f013-84d7-49b9-8afd-cb53b7651a4d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaQuaternionicConjugate", "[", "expr_", "]"}], ":=", 
      RowBox[{"expr", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"x_", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\"", ",", "y___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "y"}], "]"}]}]}], "}"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[504]:=",ExpressionUUID->"00761f48-ca41-4d5e-9496-8c4ac7ad1a0f"],

Cell["\<\
gaHermitianConjugate option Method can take values \
\[OpenCurlyDoubleQuote]DownUp\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]P\[CloseCurlyDoubleQuote] ,\[OpenCurlyDoubleQuote]Q\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]Sign\
\[CloseCurlyDoubleQuote] (experimental, fastest). The \
\[OpenCurlyDoubleQuote]DownUp\[CloseCurlyDoubleQuote] explicitly turns down \
indices to up and up to down then reverses basis element indices. The \
\[OpenCurlyDoubleQuote]P\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Q\
\[CloseCurlyDoubleQuote]  method uses explicit formulas of Shirokov and Vaz \
\[OpenCurlyDoubleQuote]Clifford algebras and spinors\[CloseCurlyDoubleQuote], \
page 118, (formulas 4.86,4.87,4.88,4.89) wrapping the expression by \
appropriate elements (no expansion of expression is performed)\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"e6a02e8c-c72f-4132-bd2d-0ab60754f5c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSubOptionContainer", "[", 
    RowBox[{"gaHermitianConjugate", ",", "\"\<DownUp\>\""}], "]"}], "=", 
   RowBox[{"(", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", "\"\<DownUp\>\"", "}"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaHermitianConjugate", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"gaSubOptionContainer", "[", 
       RowBox[{"gaHermitianConjugate", ",", "\"\<DownUp\>\""}], "]"}], ",", 
      RowBox[{"gaComplexSymbols", "\[Rule]", 
       RowBox[{"{", "}"}]}]}], "}"}]}], ";"}], " "}]}], "Input",ExpressionUUID\
->"ba5b3748-0948-43cb-b209-c925280af2ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testOptionHermitianConjugate", "[", 
    RowBox[{"Method", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "\"\<DownUp\>\"", ",", "\"\<P\>\"", " ", ",", "\"\<Q\>\"", ",", 
       "\"\<Sign\>\"", ",", "\"\<DownUpExpand\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testOptionHermitianConjugate", "[", 
    RowBox[{"Method", ",", "val_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"val", ",", 
      RowBox[{"Alternatives", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<DownUp\>\"", ",", 
          RowBox[{"___", "?", "OptionQ"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<P\>\"", ",", "___OptionQ"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Q\>\"", ",", "___OptionQ"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Sign\>\"", ",", "___OptionQ"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<DownUpExpand\>\"", ",", "___OptionQ"}], "}"}]}], 
       "]"}]}], "]"}], ")"}]}], ";"}]}], "Input",ExpressionUUID->"58eadc76-\
7fac-4f07-a7c4-d80bb00af769"],

Cell["\<\
Definition of function which include Switch and related operations which were \
modified in Unicode.tr file interferes with Information[] (the first call) if \
we use them in cases like expr/. {some\[RuleDelayed]GeometricProduct[any, \
Intersection[ any1,any2]]}. To overcome the problem we must form the \
expression like expr/. {some\[RuleDelayed]GeometricProduct@@{any, \
Intersection[ any1,any2]}}. Then the problem disappears. Complete solution \
requires modification of Unicode.tr!!! Probably this happens because \
Geometric product has higher precedence 440 that Intersection 420 and Union \
410!\
\>", "Text",ExpressionUUID->"a4d94896-bf4d-47af-87fd-33f775a9997b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHermitianConjugate", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"theMethodAndItsOptions", ",", 
          RowBox[{"opConj", "=", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], "]"}]}], 
          ",", "theAlgebra", ",", "p", ",", "q", ",", "r", ",", 
          "orthogonalBaseElements", ",", "replRules", ",", "indRange", ",", 
          "exprExpanded"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"gaOptionCheck", "[", "testOptionHermitianConjugate", "]"}],
           "[", 
          RowBox[{"theMethodAndItsOptions", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"OptionValue", "[", 
               RowBox[{"gaHermitianConjugate", ",", "Method"}], "]"}], "}"}], 
             ",", "1"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"theMethodAndItsOptions", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           "\"\<DownUp\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"orthogonalBaseElements", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"replRules", "=", 
             RowBox[{"Dispatch", "[", 
              RowBox[{"Thread", "[", 
               RowBox[{"Rule", "[", 
                RowBox[{"orthogonalBaseElements", ",", 
                 RowBox[{"orthogonalBaseElements", "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"x_", ",", "y_"}], "]"}], ":>", 
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"y", ",", "x"}], "]"}]}], "}"}]}]}], "]"}], "]"}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "coefficients", " ", "should", " ", "be", " ", "made", " ", 
              "complex", " ", "also"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{
              RowBox[{"gaReverse", "[", 
               RowBox[{"expr", "/.", "replRules"}], "]"}], ",", 
              RowBox[{"Sequence", "@@", "opConj"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", " ", "\"\<P\>\"", " ", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}], "=", 
             RowBox[{"List", "@@", "theAlgebra"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"indRange", "=", 
             RowBox[{"Range", "[", 
              RowBox[{"1", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OddQ", "[", "p", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"p", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaReverse", "[", "expr", "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], 
              "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"p", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"gaReverse", "[", "expr", "]"}], "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], 
                "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<Q\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}], "=", 
             RowBox[{"List", "@@", "theAlgebra"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"indRange", "=", 
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{"p", "+", "1"}], ",", 
               RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"EvenQ", "[", "q", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"q", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"q", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaReverse", "[", "expr", "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], 
              "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "*", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "^", 
                 RowBox[{"(", 
                  RowBox[{"q", "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"q", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], 
                "*", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"indRange", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}],
                "\[GeometricProduct]", 
               RowBox[{"gaComplexConjugate", "[", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"gaReverse", "[", "expr", "]"}], "]"}], ",", 
                 RowBox[{"Sequence", "@@", "opConj"}]}], "]"}], 
               "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"indRange", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], 
                "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<Sign\>\"", ",", "\[IndentingNewLine]", 
           
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "explicitly", " ", "change", " ", "signs", " ", "for", " ", "q", 
              " ", 
              RowBox[{"indices", ".", " ", "Unfortunatelly"}]}], ",", " ", 
             RowBox[{"requires", " ", "gaPE", " ", "as", " ", "well"}]}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"indRange", "=", 
             RowBox[{
             "gaNegativeSignatureIndexList", "[", "theAlgebra", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"gaReverse", "[", 
                RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"indD_List", ",", "indU_List"}], "]"}], ",", 
                   "theAlgebra", ",", "mark___"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{"GeometricProduct", "@@", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"indD", ",", "indRange"}], "]"}], "]"}], "+", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{"indU", ",", "indRange"}], "]"}], "]"}]}], 
                    ")"}]}], ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"indD", ",", "indU"}], "]"}], ",", "theAlgebra", 
                    ",", "mark"}], "]"}]}], "}"}]}]}], "}"}]}], ",", 
              RowBox[{"Sequence", "@@", "opConj"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<DownUpExpand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"gaExpandedQ", "[", "expr", "]"}], ",", 
              RowBox[{"exprExpanded", "=", "expr"}], ",", 
              RowBox[{"exprExpanded", "=", 
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"orthogonalBaseElements", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"{", "exprExpanded", "}"}], ",", "_bs", ",", 
                "Infinity"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"replRules", "=", 
             RowBox[{"Dispatch", "[", 
              RowBox[{"Thread", "[", 
               RowBox[{"Rule", "[", 
                RowBox[{"orthogonalBaseElements", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"gaReverse", "/@", "orthogonalBaseElements"}], 
                   ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"x_", ",", "y_"}], "]"}], ":>", 
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"y", ",", "x"}], "]"}]}], "}"}]}]}], "]"}], "]"}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "coefficients", " ", "should", " ", "be", " ", "made", " ", 
              "complex", " ", "also"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{
              RowBox[{"exprExpanded", "/.", "replRules"}], ",", 
              RowBox[{"Sequence", "@@", "opConj"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", "_", ",", "$Failed"}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"3d0276be-571d-41b5-abef-0f57665610c5"],

Cell["\<\
Mathematicians know HermitianConjugation as Principal Involution. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"83a67d7e-e271-4aa7-8009-3b13acc80e7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaPrincipalInvolution", "=", "gaHermitianConjugate"}], 
  ";"}]], "Input",
 CellLabel->
  "In[507]:=",ExpressionUUID->"8db31956-0f57-43fc-82e3-46fb78bc97a2"],

Cell[TextData[{
 "General not trivial properties are gaHermitianConjugate[\[Lambda] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"U", "]"}], "->", 
    RowBox[{
     SuperscriptBox["\[Lambda]", "*"], 
     RowBox[{"gaHermitianConjugate", "[", "U", "]"}], " "}]}], 
   TraditionalForm]],ExpressionUUID->"ff598428-5d77-4716-bb2b-541e6a36425a"],
 ", and gaHermitianConjugate[A\[GeometricProduct]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"U", "]"}], "\[Rule]", 
    RowBox[{"gaHermitianConjugate", "[", "U", "]"}], " "}], TraditionalForm]],
  ExpressionUUID->"34c5b83f-3c54-41df-8c98-896d599d2ea8"],
 "\[GeometricProduct]gaHermitianConjugate[A]."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"cadde639-c713-40c2-a319-1de3ec620ab6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"gaComplexConjugate", "[", 
              RowBox[{"c", ",", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"FilterRules", "[", 
                 RowBox[{
                  RowBox[{"{", "op", "}"}], ",", 
                  RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], 
                 "]"}]}]}], "]"}], "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"h", ":", 
               RowBox[{"(", 
                RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], 
              ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"#", ",", "op"}], "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Reverse", "[", "h", "]"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"gaComplexConjugate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"FilterRules", "[", 
                RowBox[{
                 RowBox[{"{", "op", "}"}], ",", 
                 RowBox[{"Options", "[", "gaComplexConjugate", "]"}]}], 
                "]"}]}]}], "]"}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaHermitianConjugate", "}"}]}], ")"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[508]:=",ExpressionUUID->"6fca29bd-360b-4a0e-a67b-a12034875a5f"],

Cell["Tests if GA element is Hermitian ", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"e9a8d41a-5b40-42f0-a972-ee81bb3bcd54"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", 
       RowBox[{
        RowBox[{"gaIndexDown", "[", 
         RowBox[{"gaHermitianConjugate", "[", "expr", "]"}], "]"}], "-", 
        "expr"}], "]"}], "]"}], "===", "0"}], ")"}]}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[509]:=",ExpressionUUID->"0e0ef88b-f054-48c2-a0d1-4897ad906fa2"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Different definitions of ",
 StyleBox["gaHodgeDual[ ]",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"ed478fd6-8b0c-4e38-9cea-8c84931c9dee"],

Cell[TextData[{
 "In fact different methods of HodgeDual[ ] are different definitions! \
Possible values \[OpenCurlyDoubleQuote]MVInverseI\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]MVReverseI\[CloseCurlyDoubleQuote] ,\
\[OpenCurlyDoubleQuote]ReverseMVI\[CloseCurlyDoubleQuote]and \
\[OpenCurlyDoubleQuote]MVI\[CloseCurlyDoubleQuote], which defines dual as  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", " ", 
    SuperscriptBox["I", 
     RowBox[{"-", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "cd07386a-6892-4186-9632-1ee9191504e5"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", 
    OverscriptBox["I", "~"], " "}], TraditionalForm]],ExpressionUUID->
  "ce0b24fa-8176-42c2-b8f0-401234b0908d"],
 ", and   ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", " ", "I"}], TraditionalForm]],ExpressionUUID->
  "22577382-9d9b-4fc4-a15f-3a345f67925e"],
 " correspondingly."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10003.},ExpressionUUID->"58ebd07a-a708-4c7b-8344-229c8660fce4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaHodgeDual", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<MVInverseI\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHodgeDual", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"theAlgebra", "=", 
           RowBox[{"gaGetAlgebra", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<OneClNoQuaternions\>\""}]}], 
            "]"}]}], ",", 
          RowBox[{"theMethod", "=", 
           RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", 
          "thePseudoFactor"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"thePseudoFactor", "=", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], 
               "]"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theMethod", ",", "\[IndentingNewLine]", "\"\<MVInverseI\>\"", ",", 
           
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"theAlgebra", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], 
                  "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "-", 
                    "1"}], ")"}]}], ")"}], "/", "2"}]}], ")"}]}], "*", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{"expr", ",", "thePseudoFactor"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<MVReverseI\>\"", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], 
                 "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}],
                    "-", "1"}], ")"}]}], ")"}], "/", "2"}], ")"}]}], "*", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{"expr", ",", "thePseudoFactor"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<MVI\>\"", ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"expr", ",", "thePseudoFactor"}], "]"}], ",", 
           "\[IndentingNewLine]", "\"\<ReverseMVI\>\"", ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{
             RowBox[{"gaReverse", "[", "expr", "]"}], ",", 
             "thePseudoFactor"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.},
 CellLabel->
  "In[510]:=",ExpressionUUID->"0dec8b13-bba0-4c2c-acbc-e8e9bc93f1bb"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Specialized command ",
 StyleBox["gaEliminateGrade[ ]",
  FontWeight->"Bold"],
 ", which try to eliminate grades in the geometric product using grade \
negations only"
}], "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"6d0cb4c2-0d15-4321-826a-9aff885a5b2b"],

Cell["\<\
gaEliminateGrade takes multivector and by multiplying on the same multivector \
on the right, acted by gaGradeNegate tries to remove listed grades in the \
product. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10002.},ExpressionUUID->"b13b6fce-2f0d-49d4-ad75-161c51c20775"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "zero"}], "=", 
   "\"\<Zero grade in elimination list not allowed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "nothingToDo"}], "=", 
   "\"\<Multivector doesn't have grades listed in elimination list.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaEliminateGrade", "::", "involutionPosition"}], "=", 
    "\"\<Involution position can be Right (default) or Left only. Default is \
used\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Output", "\[Rule]", 
    RowBox[{
     RowBox[{"SignChangeGrades", " ", "or", " ", "Output"}], "\[Rule]", 
     "Evaluation"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaEliminateGrade", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"OutputType", "\[Rule]", "Evaluation"}], ",", " ", 
     RowBox[{"InvolutionPosition", "\[Rule]", "Right"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaEliminateGrade", "[", 
     RowBox[{"expr_", ",", "eliminateGrade_List", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "p", ",", "s", ",", "prototype", ",", "relGrades", ",", 
        "checkValueRules", ",", "productWithPrototype", ",", 
        "theEquationsToCheck", ",", "trowCondition", ",", "baseElems", ",", 
        "subsRules", ",", "possibleSolutions", ",", "gradesForOutput", ",", 
        RowBox[{"grades", "=", 
         RowBox[{"gaGetGrade", "[", "expr", "]"}]}], ",", 
        RowBox[{"outputType", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"OutputType", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaEliminateGrade", ",", "OutputType"}], "]"}]}], ")"}]}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"invPos", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"InvolutionPosition", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaEliminateGrade", ",", "InvolutionPosition"}], "]"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"exceptional", " ", "cases"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"eliminateGrade", ",", "0"}], "]"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"gaEliminateGrade", "::", "zero"}], "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"DeleteCases", "[", 
              RowBox[{"grades", ",", "0"}], "]"}], ",", "eliminateGrade"}], 
            "]"}], "===", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"gaEliminateGrade", "::", "nothingToDo"}], "]"}], ";", 
           "expr"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"prototype", "=", 
            RowBox[{"Expand", "[", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaGetMV", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"p", "[", "#", "]"}]}], "}"}]}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"p", "[", "0", "]"}], "\[Rule]", "1"}]}], ")"}], 
                 "&"}], "/@", "grades"}], ")"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"invPos", ",", "Right", ",", 
             RowBox[{"productWithPrototype", "=", 
              RowBox[{"gaPE", "[", 
               RowBox[{"expr", "\[GeometricProduct]", "prototype"}], "]"}]}], 
             ",", "\[IndentingNewLine]", "Left", ",", 
             RowBox[{"productWithPrototype", "=", 
              RowBox[{"gaPE", "[", 
               RowBox[{"prototype", "\[GeometricProduct]", "expr"}], "]"}]}], 
             ",", "\[IndentingNewLine]", "_", ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{"gaEliminateGrade", "::", "involutionPosition"}], 
               "]"}], ";", 
              RowBox[{"productWithPrototype", "=", 
               RowBox[{"gaPE", "[", 
                RowBox[{"expr", "\[GeometricProduct]", "prototype"}], 
                "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"baseElems", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{"productWithPrototype", ",", "_bs", ",", "Infinity"}], 
              "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"subsRules", "=", 
            RowBox[{"Thread", "[", 
             RowBox[{"Rule", "[", 
              RowBox[{"baseElems", ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Unique", "[", "s", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"Length", "[", "baseElems", "]"}], "}"}]}], "]"}]}],
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"relGrades", "=", 
            RowBox[{"Rest", "[", "grades", "]"}]}], ";", 
           RowBox[{"checkValueRules", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Thread", "[", 
                RowBox[{"Rule", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"p", "/@", "relGrades"}], ")"}], ",", "#"}], "]"}],
                 "]"}], "&"}], ",", 
              RowBox[{"Tuples", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"-", "1"}]}], "}"}], ",", 
                RowBox[{"Length", "[", "relGrades", "]"}]}], "]"}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"theEquationsToCheck", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetMV", "[", 
                 RowBox[{"productWithPrototype", ",", 
                  RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
               "eliminateGrade"}], ")"}], "/.", "subsRules"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"trowCondition", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"{", 
               RowBox[{"Length", "[", "theEquationsToCheck", "]"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"possibleSolutions", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Last", "[", 
               RowBox[{"Reap", "[", 
                RowBox[{"Scan", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"theEquationsToCheck", "/.", "#"}], ")"}], "]"}], 
                    "===", "trowCondition"}], ",", 
                    RowBox[{"Sow", "[", "#", "]"}]}], "]"}], "&"}], ",", 
                  "checkValueRules"}], "]"}], "]"}], "]"}], ",", "1"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"gradesForOutput", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"First", "/@", 
                  RowBox[{"Cases", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "]"}]}], "&"}], "/@",
                 "possibleSolutions"}], ")"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"p", "->", "Identity"}], "}"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"outputType", "===", "SignChangeGrades"}], ",", 
             "gradesForOutput", ",", "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"invPos", ",", "Right", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"expr", "\[GeometricProduct]", 
                   RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                "gradesForOutput"}], ",", "\[IndentingNewLine]", "Left", ",", 
               
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}], "\[GeometricProduct]", 
                   "expr"}], ")"}], "&"}], "/@", "gradesForOutput"}], ",", 
               "\[IndentingNewLine]", "_", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"expr", "\[GeometricProduct]", 
                   RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                "gradesForOutput"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10002.},
 CellLabel->
  "In[512]:=",ExpressionUUID->"269103f7-1b09-472e-9d30-30f51e79cf13"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Square root of multivector for n\[LessEqual]3"
}], "Subsubsection",ExpressionUUID->"4752c398-43a4-45e3-97b3-28112bde453f"],

Cell[CellGroupData[{

Cell["\<\
Here we implement square root algorithm of general multivector for n\
\[LessEqual]3 case. \
\>", "Text",ExpressionUUID->"58de283e-5610-4dc9-8dc9-070c4976700d"],

Cell[CellGroupData[{

Cell["Help functions ", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"32c12529-7849-486e-89a9-69ba227b5a1b"],

Cell["\<\
gaSqrtN is private (undocumented) function which was used to check results \
numerically. Inactivated\
\>", "Text",ExpressionUUID->"e8647c23-339e-4c90-817b-d00dd41117c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaSqrtN", "[", 
      RowBox[{"expr_", ",", "alg_Cl", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"ps", "=", 
           RowBox[{"First", "[", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"gaGetMV", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "alg", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}],
                "]"}], ",", "0"}], "]"}], "]"}]}], ",", "a1", ",", "s", ",", 
          "v1", ",", "v", ",", "V1", ",", "V", ",", "S", ",", "coeffv1", ",", 
          "coeffV1", ",", "bnames", ",", "genericMV", ",", "takeMe", ",", "b",
           ",", "vVRules", ",", "eqs", ",", "solEqs"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"v1", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"v", ",", "alg", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"V1", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"V", ",", "alg", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"a1", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", "v1", " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", "V1"}], ")"}], "\[GeometricProduct]", 
             "ps"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], "-", 
               "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Select", " ", "generic", " ", "or", " ", "specific", " ", 
           "solution", " ", "of", " ", "second", " ", "system", " ", "of", 
           " ", "eqs"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"eqs", "=", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Collect", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaPE", "[", 
                 RowBox[{"a1", "\[GeometricProduct]", "a1"}], "]"}], "-", 
                "genericMV"}], ",", "_bs", ",", "takeMe"}], "]"}], ",", 
             "_takeMe", ",", "Infinity"}], "]"}], "/.", 
           RowBox[{
            RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
            RowBox[{"Equal", "[", 
             RowBox[{"x", ",", "0"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"coeffv1", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"v1", ",", "_v", ",", "Infinity"}], "]"}]}], ";", 
         RowBox[{"coeffV1", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"V1", ",", "_V", ",", "Infinity"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"solEqs", "=", 
          RowBox[{"FindInstance", "[", 
           RowBox[{"eqs", ",", 
            RowBox[{"Element", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"s", ",", "S", ",", "coeffv1", ",", "coeffV1"}], 
                "}"}], "]"}], ",", "Reals"}], "]"}], ",", "Reals", ",", "6", 
            ",", 
            RowBox[{"WorkingPrecision", "\[Rule]", "MachinePrecision"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Which", "[", 
          RowBox[{
           RowBox[{"solEqs", "===", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"Head", "[", "solEqs", "]"}], "===", "FindInstance"}], 
           ",", "Null", ",", "True", ",", 
           RowBox[{"gaPE", "[", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "alg", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"S", "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "alg", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], ")"}], "/.", "solEqs"}], 
             "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{
       RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "===", 
       "3"}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[517]:=",ExpressionUUID->"e5542a98-dda4-4ed2-a9da-0e70a77573c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSqrtN", "[", 
   RowBox[{"expr_", ",", "alg_Cl", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", "gaSqrt", "]"}]}]}], ",", 
       RowBox[{"genParam", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"GeneratedParameters", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", "gaSqrt", "]"}]}]}], ",", 
       "\[IndentingNewLine]", "solTemplate", ",", "a1", ",", "v", ",", "v1", 
       ",", "s", ",", "S", ",", "nbames", ",", "b", ",", "b1", ",", "coeffv1",
        ",", "genericMV", ",", "bnames", ",", "eqs", ",", "solEqs"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"v1", "=", 
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"v", ",", "alg", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"a1", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{"s", "+", "v1", " ", "+", 
         RowBox[{"S", "*", 
          RowBox[{"gaI", "[", "alg", "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"b1", "=", 
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"b", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"genericMV", "=", 
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"b", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"bnames", "=", 
       RowBox[{"b", "/@", 
        RowBox[{"Range", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{
            RowBox[{"2", "^", 
             RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], "-", 
            "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Set", "@@@", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Collect", "[", 
            RowBox[{
             RowBox[{"genericMV", "-", "expr"}], ",", "_\[DoubleStruckE]", 
             ",", "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}],
          "/.", 
         RowBox[{
          RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{"x", "\[Equal]", "0"}], ",", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], "]"}]}], 
           "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Select", " ", "generic", " ", "or", " ", "specific", " ", "solution", 
        " ", "of", " ", "second", " ", "system", " ", "of", " ", "eqs"}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Collect", "[", 
            RowBox[{
             RowBox[{"gaGetMV", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaPE", "[", 
                 RowBox[{"a1", "\[GeometricProduct]", "a1"}], "]"}], "-", 
                "b1"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1", ",", "2"}], "}"}]}], "]"}], ",", 
             "_\[DoubleStruckE]", ",", "takeMe"}], "]"}], ",", "_takeMe", ",",
            "Infinity"}], "]"}], "/.", 
         RowBox[{
          RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Equal", "[", 
           RowBox[{"x", ",", "0"}], "]"}]}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"coeffv1", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"v1", ",", "_v", ",", "Infinity"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"s", ",", "S", ",", "coeffv1"}], "}"}], "]"}], "]"}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"solEqs", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"NSolve", "[", 
           RowBox[{"eqs", ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"s", ",", "S", ",", "coeffv1", ",", "coeffV1"}], "}"}], 
             "]"}], ",", "Reals", ",", 
            RowBox[{"VerifySolutions", "\[Rule]", "True"}]}], "]"}], "]"}]}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"solEqs", "=", 
       RowBox[{"FindInstance", "[", 
        RowBox[{"eqs", ",", 
         RowBox[{"Element", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"s", ",", "S", ",", "coeffv1"}], "}"}], "]"}], ",", 
           "Reals"}], "]"}], ",", "Reals", ",", "6", ",", 
         RowBox[{"WorkingPrecision", "\[Rule]", "MachinePrecision"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"solEqs", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{
         RowBox[{"Head", "[", "solEqs", "]"}], "===", "FindInstance"}], ",", 
        "Null", ",", "True", ",", 
        RowBox[{"gaPE", "[", 
         RowBox[{"N", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"gaPE", "[", 
             RowBox[{"s", "+", 
              RowBox[{"gaGeneralMultivector", "[", 
               RowBox[{"v", ",", "alg", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}], " ", "+", 
              RowBox[{"S", "*", 
               RowBox[{"gaI", "[", "alg", "]"}]}]}], "]"}], ")"}], "/.", 
           "solEqs"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{
    RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "===", 
    "2"}]}]}]], "Input",
 CellLabel->
  "In[518]:=",ExpressionUUID->"fdf686ac-d973-4a1a-96b9-eeeef646c5e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSqrtN", "[", 
   RowBox[{"expr_", ",", "alg_Cl", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", "gaSqrt", "]"}]}]}], ",", 
       RowBox[{"genParam", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"GeneratedParameters", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", "gaSqrt", "]"}]}]}], ",", 
       "\[IndentingNewLine]", "solTemplate", ",", "a1", ",", "v", ",", "v1", 
       ",", "s", ",", "S", ",", "nbames", ",", "b", ",", "b1", ",", "coeffv1",
        ",", "genericMV", ",", "bnames", ",", "eqs", ",", "solEqs"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"v1", "=", 
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"v", ",", "alg", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"a1", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{"s", "+", "v1"}], " ", "]"}]}], ";", 
      RowBox[{"b1", "=", 
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"b", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"genericMV", "=", 
       RowBox[{"gaGeneralMultivector", "[", 
        RowBox[{"b", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"bnames", "=", 
       RowBox[{"b", "/@", 
        RowBox[{"Range", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{
            RowBox[{"2", "^", 
             RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], "-", 
            "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Set", "@@@", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Collect", "[", 
            RowBox[{
             RowBox[{"genericMV", "-", "expr"}], ",", "_\[DoubleStruckE]", 
             ",", "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}],
          "/.", 
         RowBox[{
          RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{"x", "\[Equal]", "0"}], ",", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], "]"}]}], 
           "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Select", " ", "generic", " ", "or", " ", "specific", " ", "solution", 
        " ", "of", " ", "second", " ", "system", " ", "of", " ", "eqs"}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"Collect", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"gaPE", "[", 
                RowBox[{"a1", "\[GeometricProduct]", "a1"}], "]"}], "-", 
               "b1"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
            "_\[DoubleStruckE]", ",", "takeMe"}], "]"}], ",", "_takeMe", ",", 
          "Infinity"}], "]"}], "/.", 
        RowBox[{
         RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
         RowBox[{"Equal", "[", 
          RowBox[{"x", ",", "0"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"coeffv1", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"v1", ",", "_v", ",", "Infinity"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"s", ",", "S", ",", "coeffv1"}], "}"}], "]"}], "]"}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"solEqs", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"NSolve", "[", 
           RowBox[{"eqs", ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"s", ",", "S", ",", "coeffv1", ",", "coeffV1"}], "}"}], 
             "]"}], ",", "Reals", ",", 
            RowBox[{"VerifySolutions", "\[Rule]", "True"}]}], "]"}], "]"}]}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"solEqs", "=", 
       RowBox[{"FindInstance", "[", 
        RowBox[{"eqs", ",", 
         RowBox[{"Element", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"s", ",", "coeffv1"}], "}"}], "]"}], ",", "Reals"}], 
          "]"}], ",", "Reals", ",", "6", ",", 
         RowBox[{"WorkingPrecision", "\[Rule]", "MachinePrecision"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"solEqs", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{
         RowBox[{"Head", "[", "solEqs", "]"}], "===", "FindInstance"}], ",", 
        "Null", ",", "True", ",", 
        RowBox[{"gaPE", "[", 
         RowBox[{"N", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"gaPE", "[", 
             RowBox[{"s", "+", 
              RowBox[{"gaGeneralMultivector", "[", 
               RowBox[{"v", ",", "alg", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], " ", "]"}], ")"}], "/.", 
           "solEqs"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{
    RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "===", 
    "1"}]}]}]], "Input",
 CellLabel->
  "In[519]:=",ExpressionUUID->"320c1fd9-2c1f-4690-b7da-8b52eb4d68ef"],

Cell[TextData[{
 "Help functions used by ",
 StyleBox["gaSqrt[ ]",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"4ff226a4-2f04-46ef-8a78-ec99f393841e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"positiveQ", "[", 
    RowBox[{"x_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "False", ",", 
     RowBox[{"Positive", "[", "x", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nonNegativeQ", "[", 
    RowBox[{"x_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PossibleZeroQ", "[", "x", "]"}], ",", "True", ",", 
     RowBox[{"Positive", "[", "x", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nonzeroQ", "[", 
    RowBox[{"x_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{"Not", "[", 
    RowBox[{"PossibleZeroQ", "[", "x", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"zeroQ", "[", 
    RowBox[{"x_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{"PossibleZeroQ", "[", "x", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[520]:=",ExpressionUUID->"f1e67b12-9351-49ef-b1d2-67ecd077fab7"]
}, Closed]],

Cell[CellGroupData[{

Cell["Method selection", "Item",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"6a4d6afd-f483-4ea8-bcd5-d7efc8ebc2bc"],

Cell["First general code and options ", "Text",ExpressionUUID->"58ccba73-06f7-42b4-9dda-3ca5231ed05f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSqrt", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"GeneratedParameters", "\[Rule]", "C"}], ",", 
     RowBox[{"Simplify", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrt", "::", "Method"}], "=", "\"\<Unknown method `1`.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[524]:=",ExpressionUUID->"71089eed-51f7-44d7-abed-8d0aaa3cf3fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSqrt", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"aAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Abort", "\[Rule]", "False"}], ",", 
          RowBox[{
          "Message", "->", 
           "\"\<Unable to determine the algebra of input. Using \
gaRunningAlgebra.\>\""}]}], "]"}]}], ",", 
       RowBox[{"aMethod", "=", 
        RowBox[{"OptionValue", "[", "\"\<Method\>\"", "]"}]}], ",", 
       "theMethod", ",", "theAlgebra"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"aAlgebra", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"theAlgebra", "=", "gaRunningAlgebra"}], ",", 
        RowBox[{"theAlgebra", "=", "aAlgebra"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"aMethod", "===", "Automatic"}], ",", 
        RowBox[{"theMethod", "=", "theAlgebra"}], ",", 
        RowBox[{"theMethod", "=", "aMethod"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "1", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "2", ",", "0"}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "3", ",", "0"}], "]"}]}], "}"}], ",", 
          "theMethod"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"gaSqrt", "[", 
         RowBox[{"expr", ",", "theMethod", ",", "opts"}], "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaSqrt", "::", "Method"}], ",", "theMethod"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[526]:=",ExpressionUUID->"9e5f6de5-b136-45eb-b35e-feb565f56d72"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,0) case", "Item",ExpressionUUID->"e0bb99f1-b6b2-4fae-be26-6d65ff645b34"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0"}], "]"}]}], ",", "v", ",", "s", ",", 
          "solTemplate", ",", "genericMV", ",", "b", ",", "bnames", ",", 
          "det", ",", "detSqrt", ",", "theTransformation", ",", "sSRules", 
          ",", "vVRules", ",", "genericAnswer", ",", "freeParamRules", ",", 
          "specAnswer00", ",", "specAnswer"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "are", " ", "present", " ", "we",
           " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", "ordering"}], " ",
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"nonNegativeQ", "[", "det", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}]}],
                  "}"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"detSqrt", "->", 
                  RowBox[{"Sqrt", "[", "det", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"takeMe", "->", "Identity"}], "}"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The s is\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"sSRules", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "\"\<s\>\""}], "}"}]}], ")"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"When", " ", "s"}], "\[Equal]", 
            RowBox[{
            "0", " ", "the", " ", "solution", " ", "only", " ", "exists", " ",
              "when", " ", 
             RowBox[{"b", "[", "1", "]"}]}]}], "=", "0"}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"nonNegativeQ", "[", 
             RowBox[{"b", "[", "0", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"All", " ", "solutions", "  ", "taken"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"freeParamRules", "=", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"b", "[", "0", "]"}], "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"b", "[", "0", "]"}], "]"}]}], "}"}]}], "}"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                  "#"}], ")"}], "&"}], "/@", "freeParamRules"}], ")"}]}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
               RowBox[{"nonNegativeQ", "[", 
                RowBox[{"b", "[", "0", "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "specAnswer00", "]"}]}], 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            "s"}], "\[Equal]", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"nonNegativeQ", "[", 
             RowBox[{"b", "[", "0", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"Union", "[", "specAnswer00", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[527]:=",ExpressionUUID->"583eed70-e129-4d3e-a372-817114be155d"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,1) case", "Item",ExpressionUUID->"8ab08e55-bec0-44d6-b19f-ec3f874690e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1"}], "]"}]}], ",", "v", ",", "s", ",", 
          "solTemplate", ",", "genericMV", ",", "b", ",", "bnames", ",", 
          "det", ",", "detSqrt", ",", "theTransformation", ",", "sSRules", 
          ",", "vVRules", ",", "genericAnswer", ",", "freeParamRules", ",", 
          "specAnswer00", ",", "specAnswer"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "are", " ", "present", " ", "we",
           " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", "ordering"}], " ",
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"nonNegativeQ", "[", "det", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}], 
                  ",", 
                  RowBox[{"{", 
                   RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], "}"}]}],
                  "}"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"detSqrt", "->", 
                  RowBox[{"Sqrt", "[", "det", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"takeMe", "->", "Identity"}], "}"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The s is\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"sSRules", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "\"\<s\>\""}], "}"}]}], ")"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"When", " ", "s"}], "\[Equal]", 
            RowBox[{
            "0", " ", "the", " ", "solution", " ", "only", " ", "exists", " ",
              "when", " ", 
             RowBox[{"b", "[", "1", "]"}]}]}], "=", "0"}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"nonNegativeQ", "[", 
             RowBox[{"-", 
              RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"All", " ", "solutions", "  ", "taken"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"freeParamRules", "=", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"-", 
                   RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "}"}]}], "}"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                  "#"}], ")"}], "&"}], "/@", "freeParamRules"}], ")"}]}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
               RowBox[{"nonNegativeQ", "[", 
                RowBox[{"-", 
                 RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "specAnswer00", "]"}]}], 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            "s"}], "\[Equal]", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"nonNegativeQ", "[", 
             RowBox[{"-", 
              RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"Union", "[", "specAnswer00", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[528]:=",ExpressionUUID->"1084e821-5e43-4ea5-b447-e8eea822ee14"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,0) case", "Item",ExpressionUUID->"5489a124-a492-4370-89c2-8bea07b23fcc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0"}], "]"}]}], ",", "v", ",", "s", ",", "S", 
          ",", "solTemplate", ",", "genericMV", ",", "b", ",", "bnames", ",", 
          "det", ",", "detSqrt", ",", "theTransformation", ",", "sSRules", 
          ",", "vVRules", ",", "genericAnswer", ",", "freeParamRules", ",", 
          "specAnswer00", ",", "specAnswer"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "and", " ", 
          RowBox[{"b", "[", "7", "]"}], " ", 
          RowBox[{"(", "speudoscalar", ")"}], " ", "are", " ", "present", " ",
           "we", " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", 
          "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{"S", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "3", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"nonNegativeQ", "[", "det", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                   ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                   ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                   ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], 
                   "}"}]}], "}"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"detSqrt", "->", 
                  RowBox[{"Sqrt", "[", "det", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"takeMe", "->", "Identity"}], "}"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The s and S are\>\"", "]"}],
                     ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"sSRules", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "\"\<s\>\""}], ",", 
                    RowBox[{"S", "\[Rule]", "\"\<S\>\""}]}], "}"}]}], ")"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
             RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"When", " ", "s"}], "\[Equal]", 
            RowBox[{
            "0", " ", "the", " ", "solution", " ", "only", " ", "exists", " ",
              "when", " ", 
             RowBox[{"b", "[", "1", "]"}]}]}], "=", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "=", 
            RowBox[{
             RowBox[{"b", "[", "3", "]"}], "=", "0"}]}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"All", " ", "solutions", "  ", "taken"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"freeParamRules", "=", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}], 
                "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                  "#"}], ")"}], "&"}], "/@", "freeParamRules"}], ")"}]}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "specAnswer00", "]"}]}], 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            "s"}], "\[Equal]", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", "specAnswer00", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[529]:=",ExpressionUUID->"9bed5b40-59d5-4674-8cd1-450bd33201bb"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,1) case (the algebra is isomorphic to Cl(2,0)) ", "Item",ExpressionUUID->"328d4f1e-abf1-46c3-adff-d0b4b0b9d828"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1"}], "]"}]}], ",", "v", ",", "s", ",", "S", 
          ",", "solTemplate", ",", "genericMV", ",", "b", ",", "bnames", ",", 
          "det", ",", "detSqrt", ",", "theTransformation", ",", "sSRules", 
          ",", "vVRules", ",", "genericAnswer", ",", "freeParamRules", ",", 
          "specAnswer00", ",", "specAnswer"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "and", " ", 
          RowBox[{"b", "[", "7", "]"}], " ", 
          RowBox[{"(", "speudoscalar", ")"}], " ", "are", " ", "present", " ",
           "we", " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", 
          "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{"S", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "^", "2"}], "-", 
           RowBox[{
            RowBox[{"b", "[", "3", "]"}], "^", "2"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"nonNegativeQ", "[", "det", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                   ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                   ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                   ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], 
                   "}"}]}], "}"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"detSqrt", "->", 
                  RowBox[{"Sqrt", "[", "det", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"takeMe", "->", "Identity"}], "}"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"sSRules", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The s and S are\>\"", "]"}],
                     ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"sSRules", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "\"\<s\>\""}], ",", 
                    RowBox[{"S", "\[Rule]", "\"\<S\>\""}]}], "}"}]}], ")"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
             RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"When", " ", "s"}], "\[Equal]", 
            RowBox[{
            "0", " ", "the", " ", "solution", " ", "only", " ", "exists", " ",
              "when", " ", 
             RowBox[{"b", "[", "1", "]"}]}]}], "=", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "=", 
            RowBox[{
             RowBox[{"b", "[", "3", "]"}], "=", "0"}]}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"All", " ", "solutions", "  ", "taken"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"freeParamRules", "=", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{"b", "[", "0", "]"}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}], 
                "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                  "#"}], ")"}], "&"}], "/@", "freeParamRules"}], ")"}]}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "specAnswer00", "]"}]}], 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            "s"}], "\[Equal]", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", "specAnswer00", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[530]:=",ExpressionUUID->"7d839d58-17e2-469b-8a90-02c1b91dd383"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,2) case", "Item",ExpressionUUID->"797bfead-0439-49d6-891f-45f3f52db796"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "2"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2"}], "]"}]}], ",", "v", ",", "s", ",", "S", 
          ",", "solTemplate", ",", "genericMV", ",", "b", ",", "bnames", ",", 
          "det", ",", "detSqrt", ",", "theTransformation", ",", "sSRules", 
          ",", "vVRules", ",", "genericAnswer", ",", "freeParamRules", ",", 
          "specAnswer00", ",", "specAnswer"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "and", " ", 
          RowBox[{"b", "[", "7", "]"}], " ", 
          RowBox[{"(", "speudoscalar", ")"}], " ", "are", " ", "present", " ",
           "we", " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", 
          "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{"S", "*", 
             RowBox[{"gaI", "[", "theAlg", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"det", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "1", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"b", "[", "3", "]"}], "^", "2"}]}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "determinant", " ", "norm", " ", "is", " ", "always", " ", 
           "positive", " ", "for", " ", "cl", 
           RowBox[{"(", 
            RowBox[{"0", ",", "2"}], ")"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"sSRules", "=", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "detSqrt"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], "}"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"S", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], " ", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}], ",", 
                  RowBox[{"s", "\[Rule]", 
                   RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"detSqrt", "+", 
                    RowBox[{"b", "[", "0", "]"}]}], "]"}]}], "]"}]}]}], 
                 "}"}]}], "}"}], "/.", 
              RowBox[{"{", 
               RowBox[{"detSqrt", "->", 
                RowBox[{"Sqrt", "[", "det", "]"}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"takeMe", "->", "Identity"}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The s and S are\>\"", "]"}],
                     ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"sSRules", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", "\"\<s\>\""}], ",", 
                    RowBox[{"S", "\[Rule]", "\"\<S\>\""}]}], "}"}]}], ")"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
             RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"When", " ", "s"}], "\[Equal]", 
            RowBox[{
            "0", " ", "the", " ", "solution", " ", "only", " ", "exists", " ",
              "when", " ", 
             RowBox[{"b", "[", "1", "]"}]}]}], "=", 
           RowBox[{
            RowBox[{"b", "[", "2", "]"}], "=", 
            RowBox[{
             RowBox[{"b", "[", "3", "]"}], "=", "0"}]}]}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"All", " ", "solutions", "  ", "taken"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"freeParamRules", "=", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"-", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"S", "\[Rule]", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}]}], "]"}]}], 
                "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"solTemplate", "/.", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                  "#"}], ")"}], "&"}], "/@", "freeParamRules"}], ")"}]}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
               RowBox[{"zeroQ", "[", 
                RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "specAnswer00", "]"}]}], 
                    "}"}], "]"}], "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            "s"}], "\[Equal]", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "1", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "2", "]"}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"b", "[", "3", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", "specAnswer00", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
               RowBox[{"genParam", "[", 
                RowBox[{"1", ",", "in"}], "]"}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[531]:=",ExpressionUUID->"d886fe9c-ba1f-4439-8c5c-39fdbdbb47c3"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(3,0) case", "Item",ExpressionUUID->"bfe6d47a-c8fe-4120-a368-9b9f9f8ad02f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"3", ",", "0"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"3", ",", "0"}], "]"}]}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", "theTransformation", ",", "\[IndentingNewLine]", 
          "solTemplate", ",", "ps", ",", "bnames", ",", "bCCb0", ",", 
          "bCCbI0", ",", "detSqrt", ",", "genericMV", ",", "takeMe", ",", "b",
           ",", "stS", ",", "s2pS2", ",", "stSs2pS2", ",", "s", ",", "S", ",",
           "sSRulesT", ",", "sSRules", ",", "genericAnswer", ",", 
          "equalsSCase", ",", "sSRulesPositive", ",", "sSRulesPositiveT", ",",
           "vVRulesPositive", ",", "sSRulesNegativeT", ",", "sSRulesNegative",
           ",", "vVRulesNegative", ",", "v", ",", "V", ",", "vVRules", ",", 
          "eqsvV", ",", "solTemplateSpec1", ",", "solTemplateSpec2", ",", 
          "solTemplateSpec00", ",", "specAnswer", ",", "specAnswer1", ",", 
          "specAnswer2", ",", "specAnswer00", ",", "freeParamRules", ",", 
          "allSpecRules1", ",", "allSpecRules2"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "and", " ", 
          RowBox[{"b", "[", "7", "]"}], " ", 
          RowBox[{"(", "speudoscalar", ")"}], " ", "are", " ", "present", " ",
           "we", " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", 
          "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"ps", "=", 
          RowBox[{"First", "[", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"gaGetMV", "[", 
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}],
                ",", 
               RowBox[{"{", "3", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"bCCb0", "^", "2"}], "+", 
            RowBox[{"bCCbI0", "^", "2"}]}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\n", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "generic", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "=!=", 
            RowBox[{"0", " ", "and", " ", "s"}], "=!=", "0"}], " ", "||", " ", 
           RowBox[{"S", "=!=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Select", " ", "generic", " ", "or", " ", "specific", " ", 
           "solution", " ", "of", " ", "second", " ", "system", " ", "of", 
           " ", "eqs"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"stSs2pS2", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"(*", " ", 
               RowBox[{"s", "=", 
                RowBox[{"!", "S"}]}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "-", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}], "-", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                    ")"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                    ")"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}]}], "\[IndentingNewLine]", "}"}], "/.", 
             RowBox[{"{", 
              RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"___", ",", 
              RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Generic", "  ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "=!=", 
           RowBox[{
           "0", "  ", "solution", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"sSRulesT", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Union", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"sSSqrt", "=", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"s2pS2", "^", "2"}], "+", 
                    RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}],
                     "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "stSs2pS2"}], ")"}], 
             "]"}], ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"take", " ", "on", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRules", "=", 
          RowBox[{"theTransformation", "/@", 
           RowBox[{"Pick", "[", 
            RowBox[{"sSRulesT", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"nonzeroQ", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], "/.", "#"}], "]"}], "&"}], "/@",
                "sSRulesT"}], ")"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The parametrization of MV is A=s+v+(S+V)I\>\"", 
                    "]"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s2pS2=s^2-S^2 is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"s2pS2", "/.", "stSs2pS2"}], "]"}]}], "}"}], 
                   "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The stS=s*S is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"stS", "/.", "stSs2pS2"}], "]"}]}], "}"}], "]"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<{b_S,b_I,Sqrt[D]} \>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"{", 
                    RowBox[{"bCCb0", ",", "bCCbI0", ",", "detSqrt"}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                "]"}], "]"}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRules", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The regular case s^2\[NotEqual]S^2 has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRules", "]"}]}], "}"}], 
                   "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
               "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "S"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "5", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "S"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "S"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "1", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "S"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "2", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "S"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "3", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "S"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}]}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "S", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "S", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "S", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "S", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "5", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "S", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "S", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}]}], "}"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], "-", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], ")"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "S", "]"}]}]}], "]"}]}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}],
                     "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
             RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "specific", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "==", 
            RowBox[{"0", " ", "and", " ", "s"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Specific", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "==", 
           RowBox[{
           "0", " ", "solutions", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"common", " ", "part", " ", "for", " ", "s"}], "=", 
           RowBox[{
            RowBox[{"S", " ", "and", " ", "s"}], "\[Equal]", 
            RowBox[{"-", "S"}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"equalsSCase", "=", 
          RowBox[{"zeroQ", "[", 
           RowBox[{
            RowBox[{"4", "*", "bCCb0", "*", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "^", "2"}]}], "+", 
            RowBox[{"bCCbI0", "^", "2"}], "-", 
            RowBox[{"4", "*", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "^", "4"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", "S"}], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesPositiveT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesPositive", "=", 
             RowBox[{"theTransformation", "/@", 
              RowBox[{"Pick", "[", 
               RowBox[{"sSRulesPositiveT", ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                  "sSRulesPositiveT"}], ")"}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"vVRulesPositive", "=", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Union", "[", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "1", "]"}]}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "3", "]"}]}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                  "&"}], "/@", "sSRulesPositive"}], ")"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec1", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"s", "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer1", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec1", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesPositive"}], ")"}]}]}], ";"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer1", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRulesPositive", "]"}], ">", "0"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=S\[NotEqual]0 (positive) case has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesPositive", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", 
           RowBox[{"-", "S"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesNegativeT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesNegative", "=", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesNegativeT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                   "sSRulesNegativeT"}], ")"}]}], "]"}]}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"vVRulesNegative", "=", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Union", "[", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                  "&"}], "/@", "sSRulesNegative"}], ")"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec2", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "s"}], "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer2", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec2", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesNegative"}], ")"}]}]}], ";"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer2", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRulesNegative", "]"}], ">", "0"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=-S\[NotEqual]0 (negative) case has solution \>\
\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesNegative", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", "S", "\[Equal]", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"{", 
             RowBox[{"equalsSCase", ",", 
              RowBox[{"And", "@@", 
               RowBox[{"(", 
                RowBox[{"zeroQ", "/@", 
                 RowBox[{"(", 
                  RowBox[{"b", "/@", 
                   RowBox[{"Range", "[", "6", "]"}]}], ")"}]}], ")"}]}], ",", 
              
              RowBox[{"zeroQ", "[", 
               RowBox[{"bCCb0", "-", 
                RowBox[{
                 RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
                RowBox[{
                 RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}], ",", 
              RowBox[{"bCCbI0", "+", 
               RowBox[{"2", " ", 
                RowBox[{"b", "[", "0", "]"}], "*", " ", 
                RowBox[{"b", "[", "7", "]"}]}]}]}], "}"}], "]"}], ";"}], 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"zeroQ", "/@", 
               RowBox[{"(", 
                RowBox[{"b", "/@", 
                 RowBox[{"Range", "[", "6", "]"}]}], ")"}]}], ")"}]}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCb0", "-", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
              RowBox[{
               RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCbI0", "+", 
              RowBox[{"2", " ", 
               RowBox[{"b", "[", "0", "]"}], "*", " ", 
               RowBox[{"b", "[", "7", "]"}]}]}], "]"}], "&&", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                   "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}]}], 
           ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solTemplateSpec00", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "explicit", " ", "equations", " ", "and", " ", "their", " ", 
               "solutions"}], ",", " ", 
              RowBox[{"which", " ", "depend", " ", "on", " ", 
               RowBox[{"parameters", ".", " ", "Not"}], " ", "all", " ", 
               "parameters", " ", "have", " ", "numerical", " ", "values", 
               " ", "in", " ", 
               RowBox[{
                RowBox[{"R", " ", "!!"}], "!"}]}]}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                  "0"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"v", "[", "1", "]"}], "*", 
                    RowBox[{"V", "[", "1", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], ",", 
                 RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"freeParamRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}], "^", 
                    "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}]}], ")"}], "^", 
                    "2"}]}], "]"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}], "^", 
                    "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}]}], ")"}], "^", 
                    "2"}]}], "]"}]}], "]"}]}], ")"}]}]}]}], "}"}]}], ";"}], 
             "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"solTemplateSpec00", "/.", "#"}], ")"}], "&"}], "/@", 
              "freeParamRules"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Pick", "[", 
                  RowBox[{"sSRulesT", ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=S=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"Pick", "[", 
                    RowBox[{"sSRulesT", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                   "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}]}],
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            RowBox[{"s", "^", "2"}]}], "===", 
           RowBox[{"S", "^", "2"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{
              "specAnswer00", ",", "specAnswer1", ",", "specAnswer2"}], "]"}],
              "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"1", ",", "in"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[532]:=",ExpressionUUID->"7f172efb-1641-453b-9665-359c59f30340"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(2,1) case", "Item",ExpressionUUID->"64049c0c-c575-4904-a093-abd750ee256f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "1"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "1"}], "]"}]}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", "theTransformation", ",", "solTemplate", ",", "ps", 
          ",", "bnames", ",", "\[IndentingNewLine]", "bCCb0", ",", "bCCbI0", 
          ",", "detSqrt", ",", "genericMV", ",", "takeMe", ",", "b", ",", 
          "stS", ",", "s2pS2", ",", "stSs2pS2", ",", "s", ",", "S", ",", 
          "sSRulesT", ",", "sSRules", ",", "genericAnswer", ",", 
          "equalsSCase", ",", "sSRulesPositive", ",", "sSRulesPositiveT", ",",
           "vVRulesPositive", ",", "sSRulesNegativeT", ",", "sSRulesNegative",
           ",", "vVRulesNegative", ",", "v", ",", "V", ",", "vVRules", ",", 
          "eqsvV", ",", "solTemplateSpec1", ",", "solTemplateSpec2", ",", 
          "solTemplateSpec00", ",", "specAnswer", ",", "specAnswer1", ",", 
          "specAnswer2", ",", "specAnswer00", ",", "freeParamRules", ",", 
          "freeParamRulesMissed", ",", "allSpecRules1", ",", 
          "allSpecRules2"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "and", " ", 
          RowBox[{"b", "[", "7", "]"}], " ", 
          RowBox[{"(", "speudoscalar", ")"}], " ", "are", " ", "present", " ",
           "we", " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", 
          "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"ps", "=", 
          RowBox[{"First", "[", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"gaGetMV", "[", 
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}],
                ",", 
               RowBox[{"{", "3", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"bCCb0", "^", "2"}], "-", 
            RowBox[{"bCCbI0", "^", "2"}]}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "generic", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "=!=", 
            RowBox[{"0", " ", "and", " ", "s"}], "=!=", "0"}], " ", "||", " ", 
           RowBox[{"S", "=!=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Select", " ", "generic", " ", "or", " ", "specific", " ", 
           "solution", " ", "of", " ", "second", " ", "system", " ", "of", 
           " ", "eqs"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"in", " ", "cl", 
           RowBox[{"(", "21", ")"}], " ", "determinant", " ", "can", " ", 
           "be", " ", 
           RowBox[{"negative", ".", " ", "Then"}], " ", "there", " ", "are", 
           " ", "no", " ", "solutions"}], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"nonNegativeQ", "[", 
            RowBox[{
             RowBox[{"bCCb0", "^", "2"}], "-", 
             RowBox[{"bCCbI0", "^", "2"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"stSs2pS2", "=", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"(*", " ", 
                  RowBox[{"s", "=", 
                   RowBox[{"!", "S"}]}], " ", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"stS", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                    RowBox[{"s2pS2", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"stS", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                    RowBox[{"s2pS2", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"stS", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                    
                    RowBox[{"s2pS2", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], ")"}]}], "+", 
                    
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}]}], 
                   "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"stS", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                    
                    RowBox[{"s2pS2", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}]}], 
                   "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"stS", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                    
                    RowBox[{"s2pS2", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], ")"}]}], "+", 
                    
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}]}], 
                   "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"stS", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                    
                    RowBox[{"s2pS2", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}]}], 
                   "}"}]}], "\[IndentingNewLine]", "}"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"___", ",", 
                 RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], "}"}]}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Generic", "  ", 
                RowBox[{"s", "^", "2"}]}], "-", 
               RowBox[{"S", "^", "2"}]}], "=!=", 
              RowBox[{
              "0", "  ", "solution", " ", "of", " ", "first", " ", "system", 
               " ", "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
            
            RowBox[{"sSRulesT", "=", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Union", "[", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"sSSqrt", "=", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"s2pS2", "^", "2"}], "-", 
                    RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}], " ", "means", 
                    " ", 
                    RowBox[{"nonzeroQ", "[", "stS", "]"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], "/.", 
                    "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "stSs2pS2"}], ")"}], 
                "]"}], ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"take", " ", "on", " ", 
                RowBox[{"s", "^", "2"}]}], "-", 
               RowBox[{"S", "^", "2"}]}], "=!=", "0"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"sSRules", "=", 
             RowBox[{"theTransformation", "/@", 
              RowBox[{"Pick", "[", 
               RowBox[{"sSRulesT", ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "/.", "#"}], "]"}], "&"}], "/@",
                   "sSRulesT"}], ")"}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Show", " ", 
              RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"quiet", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"CellPrint", "[", 
                RowBox[{"{", 
                 RowBox[{"TextCell", "[", 
                  RowBox[{"Column", "[", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The parametrization of MV is A=s+v+(S+V)I\>\"", 
                    "]"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s2pS2=s^2-S^2 is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"s2pS2", "/.", "stSs2pS2"}], "]"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The stS=s*S is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"stS", "/.", "stSs2pS2"}], "]"}]}], "}"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<{b_S,b_I,Sqrt[D]} \>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"{", 
                    RowBox[{"bCCb0", ",", "bCCbI0", ",", "detSqrt"}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                   "]"}], "]"}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]",
              "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"quiet", ",", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", "sSRules", "]"}], ">", "0"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"CellPrint", "[", 
                 RowBox[{"{", 
                  RowBox[{"TextCell", "[", 
                   RowBox[{"Column", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The regular case s^2\[NotEqual]S^2 has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRules", "]"}]}], "}"}], 
                    "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
                  "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"solTemplate", "=", 
             RowBox[{"gaPE", "[", 
              RowBox[{"s", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"v", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}], " ", "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"S", "+", 
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"vVRules", "=", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"Union", "[", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], "-", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"s", "^", "2"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"S", "^", "2"}]}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"s", "^", "2"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"S", "^", "2"}]}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", 
                    RowBox[{"s", "^", "2"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"S", "^", "2"}]}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], "-", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], "*", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"S", "^", "2"}]}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], "*", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"S", "^", "2"}]}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], "*", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"S", "^", "2"}]}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
                 "]"}], ",", "1"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"genericAnswer", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
               ")"}]}]}], ";"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "TextCell", "[", 
                    "\"\<The regular case s^2\[NotEqual]S^2 has no \
solution!\>\"", "]"}], "}"}], "]"}], " ", "}"}], "]"}], "]"}], "}"}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"genericAnswer", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "specific", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "==", 
            RowBox[{"0", " ", "and", " ", "s"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Specific", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "==", 
           RowBox[{
           "0", " ", "solutions", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"common", " ", "part", " ", "for", " ", "s"}], "=", 
           RowBox[{
            RowBox[{"S", "  ", "and", " ", "s"}], "\[Equal]", 
            RowBox[{"-", "S"}]}]}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"equalsSCase", "=", 
          RowBox[{
           RowBox[{"zeroQ", "[", 
            RowBox[{"bCCb0", "-", "bCCbI0", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "-", 
                RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], "]"}], "||", 
           RowBox[{"zeroQ", "[", 
            RowBox[{
             RowBox[{"-", "bCCb0"}], "-", "bCCbI0", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "+", 
                RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
            "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"s", "\[Equal]", "S"}], " ", ";", " ", 
           RowBox[{
            RowBox[{"bCCb0", "-", "bCCbI0", "-", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "-", 
                RowBox[{"b", "[", "7", "]"}]}], ")"}], "2"]}], "\[Equal]", 
            "0"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "-", 
              RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "+", 
              RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "+", 
              RowBox[{"b", "[", "4", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesPositiveT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{"(*", 
                    RowBox[{"s", "\[NotEqual]", 
                    RowBox[{
                    "0", " ", "is", " ", "ensured", " ", "by", " ", 
                    "positiveQ"}]}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}]}], 
                    "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesPositive", "=", 
             RowBox[{"theTransformation", "/@", 
              RowBox[{"Pick", "[", 
               RowBox[{"sSRulesPositiveT", ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                  "sSRulesPositiveT"}], ")"}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "-", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}]}], ")"}]}]}], 
                    "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRulesMissed", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}]}], ")"}]}]}], 
                    "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"vVRulesPositive", "=", 
             RowBox[{
              RowBox[{"Union", "[", "\[IndentingNewLine]", 
               RowBox[{"Join", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "4", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRules", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesPositive"}], ")"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "4", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRulesMissed", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesPositive"}], ")"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                 RowBox[{"V", "[", "1", "]"}]}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec1", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"s", "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer1", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec1", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesPositive"}], ")"}]}]}], ";"}], "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer1", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "sSRulesPositive", "]"}], "===", "List"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=S\[NotEqual]0 (positive) case has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesPositive", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", 
           RowBox[{
            RowBox[{"-", "S"}], " ", "-", "bCCb0", "-", "bCCbI0", "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "+", 
               RowBox[{"b", "[", "7", "]"}]}], ")"}], "2"]}], "\[Equal]", 
           "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "+", 
              RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "-", 
              RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "-", 
              RowBox[{"b", "[", "4", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesNegativeT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}],
                   "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesNegative", "=", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesNegativeT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                   "sSRulesNegativeT"}], ")"}]}], "]"}]}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], "+", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}]}], ")"}]}]}], 
                    "]"}]}]}], ")"}]}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRulesMissed", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"2", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], "-", 
                   RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}]}], ")"}]}]}], 
                    "]"}]}]}], ")"}]}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"vVRulesNegative", "=", 
             RowBox[{
              RowBox[{"Union", "[", "\[IndentingNewLine]", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "5", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRules", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesNegative"}], ")"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "5", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRulesMissed", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesNegative"}], ")"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                 RowBox[{"V", "[", "1", "]"}]}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec2", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "s"}], "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer2", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec2", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesNegative"}], ")"}]}]}], ";"}], "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer2", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "sSRulesNegative", "]"}], "===", "List"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=-S\[NotEqual]0 (negative) case has solution \>\
\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesNegative", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", "S", "\[Equal]", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"zeroQ", "/@", 
               RowBox[{"(", 
                RowBox[{"b", "/@", 
                 RowBox[{"Range", "[", "6", "]"}]}], ")"}]}], ")"}]}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCb0", "-", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "-", 
              RowBox[{
               RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCbI0", "-", 
              RowBox[{"2", " ", 
               RowBox[{"b", "[", "0", "]"}], "*", " ", 
               RowBox[{"b", "[", "7", "]"}]}]}], "]"}], "&&", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                   "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}]}], 
           ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solTemplateSpec00", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "Only", " ", "one", " ", "solution", " ", "taken", " ", "here", 
              " ", "for", " ", "free", " ", 
              RowBox[{"parameters", "!"}], " ", "Some", " ", "solutions", " ",
               "can", " ", "be", " ", "missed", " ", "here"}], " ", "*)"}], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                   SuperscriptBox[
                    RowBox[{"v", "[", "1", "]"}], "2"], "+", 
                   SuperscriptBox[
                    RowBox[{"v", "[", "2", "]"}], "2"], "-", 
                   SuperscriptBox[
                    RowBox[{"v", "[", "3", "]"}], "2"], "+", 
                   SuperscriptBox[
                    RowBox[{"V", "[", "1", "]"}], "2"], "+", 
                   SuperscriptBox[
                    RowBox[{"V", "[", "2", "]"}], "2"], "-", 
                   SuperscriptBox[
                    RowBox[{"V", "[", "3", "]"}], "2"]}], "\[Equal]", "0"}], 
                 ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                   RowBox[{"2", " ", 
                    RowBox[{"v", "[", "1", "]"}], " ", 
                    RowBox[{"V", "[", "1", "]"}]}], "+", 
                   RowBox[{"2", " ", 
                    RowBox[{"v", "[", "2", "]"}], " ", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                   RowBox[{"2", " ", 
                    RowBox[{"v", "[", "3", "]"}], " ", 
                    RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], ",", 
                 RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"freeParamRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}], "^", "2"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}], "^", 
                    "2"}]}], "]"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", "2", "]"}]}]}], ",", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}], "^", "2"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}], "^", 
                    "2"}]}], "]"}]}], "]"}]}], ")"}]}]}]}], "}"}]}], ";"}], 
             "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"solTemplateSpec00", "/.", "#"}], ")"}], "&"}], "/@", 
              "freeParamRules"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"specAnswer00", "=", 
              RowBox[{"{", 
               RowBox[{"solTemplateSpec00", "/.", "freeParamRules"}], "}"}]}],
              ","}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Pick", "[", 
                  RowBox[{"sSRulesT", ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=S=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"Pick", "[", 
                    RowBox[{"sSRulesT", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                   "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}]}],
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            RowBox[{"s", "^", "2"}]}], "===", 
           RowBox[{"S", "^", "2"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{
              "specAnswer00", ",", "specAnswer1", ",", "specAnswer2"}], "]"}],
              "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"1", ",", "in"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[533]:=",ExpressionUUID->"b69ef5de-a255-4916-8aa9-9108fcb606b2"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(1,2) case (the algebra is isomorphic to Cl(3,0) )", "Item",ExpressionUUID->"74f8001e-15e4-4704-8e61-b6f416fbfeb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "2"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "2"}], "]"}]}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", "\[IndentingNewLine]", "theTransformation", ",", 
          "ps", ",", "bnames", ",", "bCCb0", ",", "bCCbI0", ",", "detSqrt", 
          ",", "genericMV", ",", "takeMe", ",", "b", ",", "stS", ",", "s2pS2",
           ",", "stSs2pS2", ",", "s", ",", "S", ",", "sSRulesT", ",", 
          "sSRules", ",", "solTemplate", ",", "genericAnswer", ",", 
          "equalsSCase", ",", "sSRulesPositive", ",", "sSRulesPositiveT", ",",
           "vVRulesPositive", ",", "sSRulesNegativeT", ",", "sSRulesNegative",
           ",", "vVRulesNegative", ",", "v", ",", "V", ",", "vVRules", ",", 
          "eqsvV", ",", "solTemplateSpec1", ",", "solTemplateSpec2", ",", 
          "solTemplateSpec00", ",", "specAnswer", ",", "specAnswer1", ",", 
          "specAnswer2", ",", "specAnswer00", ",", "freeParamRules", ",", 
          "allSpecRules1", ",", "allSpecRules2"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"since", " ", "explicit", " ", 
          RowBox[{"b", "[", "0", "]"}], " ", 
          RowBox[{"(", "scalar", ")"}], " ", "and", " ", 
          RowBox[{"b", "[", "7", "]"}], " ", 
          RowBox[{"(", "speudoscalar", ")"}], " ", "are", " ", "present", " ",
           "we", " ", "require", " ", "\"\<InvDeg[Lex]\>\"", " ", 
          "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"ps", "=", 
          RowBox[{"First", "[", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"gaGetMV", "[", 
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}],
                ",", 
               RowBox[{"{", "3", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"bCCb0", "^", "2"}], "+", 
            RowBox[{"bCCbI0", "^", "2"}]}], "]"}]}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"!", " ", 
           RowBox[{"algebra", " ", "specific"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "generic", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "=!=", 
            RowBox[{"0", " ", "and", " ", "s"}], "=!=", "0"}], " ", "||", " ", 
           RowBox[{"S", "=!=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Select", " ", "generic", " ", "or", " ", "specific", " ", 
           "solution", " ", "of", " ", "second", " ", "system", " ", "of", 
           " ", "eqs"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"stSs2pS2", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"(*", " ", 
               RowBox[{"s", "=!=", "S"}], " ", "*)"}], "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "-", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}], "-", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                    ")"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "-", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                    ")"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", "detSqrt"}], "]"}]}], 
                   "]"}]}]}], "}"}]}], "\[IndentingNewLine]", "}"}], "/.", 
             RowBox[{"{", 
              RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"___", ",", 
              RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Generic", "  ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "=!=", 
           RowBox[{
           "0", "  ", "solution", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"sSRulesT", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Union", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"sSSqrt", "=", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"s2pS2", "^", "2"}], "+", 
                    RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "-", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], ")"}]}],
                     "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{
                    RowBox[{"-", "s2pS2"}], "+", "sSSqrt"}], "]"}]}], 
                    "]"}]}]}], "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}],
                     "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "stSs2pS2"}], ")"}], 
             "]"}], ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"take", " ", "on", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRules", "=", 
          RowBox[{"theTransformation", "/@", 
           RowBox[{"Pick", "[", 
            RowBox[{"sSRulesT", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"nonzeroQ", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], "/.", "#"}], "]"}], "&"}], "/@",
                "sSRulesT"}], ")"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The parametrization of MV is A=s+v+(S+V)I\>\"", 
                    "]"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s2pS2=s^2-S^2 is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"s2pS2", "/.", "stSs2pS2"}], "]"}]}], "}"}], 
                   "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The stS=s*S is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"stS", "/.", "stSs2pS2"}], "]"}]}], "}"}], "]"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<{b_S,b_I,Sqrt[D]} \>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"{", 
                    RowBox[{"bCCb0", ",", "bCCbI0", ",", "detSqrt"}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                "]"}], "]"}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRules", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The regular case s^2\[NotEqual]S^2 has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRules", "]"}]}], "}"}], 
                   "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
               "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], "-", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "+", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
             RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "specific", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "==", 
            RowBox[{"0", " ", "and", " ", "s"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Specific", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "==", 
           RowBox[{
           "0", " ", "solutions", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"common", " ", "part", " ", "for", " ", "s"}], "=", 
           RowBox[{
            RowBox[{"S", "  ", "and", " ", "s"}], "\[Equal]", 
            RowBox[{"-", "S"}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"equalsSCase", "=", 
          RowBox[{"zeroQ", "[", 
           RowBox[{
            RowBox[{"bCCbI0", "^", "2"}], "+", 
            RowBox[{"4", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "^", "2"}], 
             RowBox[{"(", 
              RowBox[{"bCCb0", "-", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "^", "2"}]}], ")"}]}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"s", "\[Equal]", "S"}], " ", ";", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"bCCbI0", "^", "2"}], "+", 
             RowBox[{"4", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "^", "2"}], 
              RowBox[{"(", 
               RowBox[{"bCCb0", "-", 
                RowBox[{
                 RowBox[{"b", "[", "0", "]"}], "^", "2"}]}], ")"}]}]}], 
            "\[Equal]", "0"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesPositiveT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesPositive", "=", 
             RowBox[{"theTransformation", "/@", 
              RowBox[{"Pick", "[", 
               RowBox[{"sSRulesPositiveT", ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                  "sSRulesPositiveT"}], ")"}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"vVRulesPositive", "=", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Union", "[", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "5", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "1", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "2", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "5", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "3", "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRules", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                  "&"}], "/@", "sSRulesPositive"}], ")"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                 RowBox[{"V", "[", "1", "]"}]}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec1", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"s", "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer1", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec1", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesPositive"}], ")"}]}]}], ";"}], "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer1", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRulesPositive", "]"}], ">", "0"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=S\[NotEqual]0 (positive) case has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesPositive", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "S"}], " ", 
             RowBox[{"bCCbI0", "^", "2"}]}], "+", 
            RowBox[{"4", 
             RowBox[{
              RowBox[{"b", "[", "0", "]"}], "^", "2"}], 
             RowBox[{"(", 
              RowBox[{"bCCb0", "-", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "^", "2"}]}], ")"}]}]}], 
           "\[Equal]", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesNegativeT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}], "/", 
                    "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"bCCbI0", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}]}]}], "]"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}], "/", "2"}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}], "/", "2"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"b", "[", "0", "]"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"-", "bCCb0"}], "]"}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesNegative", "=", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesNegativeT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                   "sSRulesNegativeT"}], ")"}]}], "]"}]}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"vVRulesNegative", "=", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Union", "[", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "5", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "5", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", "*", "s"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRules", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                  "&"}], "/@", "sSRulesNegative"}], ")"}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                 RowBox[{"V", "[", "1", "]"}]}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec2", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "s"}], "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer2", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec2", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesNegative"}], ")"}]}]}], ";"}], "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer2", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRulesNegative", "]"}], ">", "0"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=-S\[NotEqual]0 (negative) case has solution \>\
\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesNegative", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", "S", "\[Equal]", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"zeroQ", "/@", 
               RowBox[{"(", 
                RowBox[{"b", "/@", 
                 RowBox[{"Range", "[", "6", "]"}]}], ")"}]}], ")"}]}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCb0", "-", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "+", 
              RowBox[{
               RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCbI0", "+", 
              RowBox[{"2", " ", 
               RowBox[{"b", "[", "0", "]"}], "*", " ", 
               RowBox[{"b", "[", "7", "]"}]}]}], "]"}], "&&", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                   "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}]}], 
           ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solTemplateSpec00", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "Only", " ", "one", " ", "solution", " ", "taken", " ", "here", 
              " ", "for", " ", "free", " ", 
              RowBox[{"parameters", "!"}], " ", "Some", " ", "solutions", " ",
               "can", " ", "be", " ", "missed", " ", "here"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"freeParamRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], ")"}]}], "+", 
                    
                    RowBox[{"4", "*", 
                    RowBox[{"b", "[", "7", "]"}], "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}], "]"}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], ")"}]}], 
                    ")"}]}]}], ",", 
                 RowBox[{
                  RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], ")"}]}], "+", 
                    
                    RowBox[{"4", "*", 
                    RowBox[{"b", "[", "7", "]"}], "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}], "]"}]}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"V", "[", "2", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}]}], ")"}]}], 
                    ")"}]}]}]}], "}"}]}], ";"}], "*)"}], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "+", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                   RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                  "0"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "+", 
                   RowBox[{"2", " ", 
                    RowBox[{"v", "[", "1", "]"}], " ", 
                    RowBox[{"V", "[", "1", "]"}]}], "-", 
                   RowBox[{"2", " ", 
                    RowBox[{"v", "[", "2", "]"}], " ", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                   RowBox[{"2", " ", 
                    RowBox[{"v", "[", "3", "]"}], " ", 
                    RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], ",", 
                 RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"solTemplateSpec00", "/.", "#"}], ")"}], "&"}], "/@", 
              "freeParamRules"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"specAnswer00", "=", 
              RowBox[{"{", 
               RowBox[{"solTemplateSpec00", "/.", "freeParamRules"}], "}"}]}],
              ","}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Pick", "[", 
                  RowBox[{"sSRulesT", ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=S=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"Pick", "[", 
                    RowBox[{"sSRulesT", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                   "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}]}],
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            RowBox[{"s", "^", "2"}]}], "===", 
           RowBox[{"S", "^", "2"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{
              "specAnswer00", ",", "specAnswer1", ",", "specAnswer2"}], "]"}],
              "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"1", ",", "in"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[534]:=",ExpressionUUID->"d86a50c8-e258-460e-9c03-bd22c334874d"]
}, Closed]],

Cell[CellGroupData[{

Cell["Cl(0,3) case", "Item",ExpressionUUID->"3d0c09a2-0346-4269-b483-eccb54055148"],

Cell["Keep separate code for each non-isomorphic algebras.", "Text",ExpressionUUID->"38cf0923-a785-41e0-b03a-42e8980406f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bs", "=", 
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
       RowBox[{"requireOrdering", "=", "\"\<InvDeg[Lex]\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSqrt", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "3"}], "]"}], ",", 
        RowBox[{"opts", ":", 
         RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"OptionValue", "[", "Quiet", "]"}], "]"}]}], ",", 
          RowBox[{"genParam", "=", 
           RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
          RowBox[{"simplify", "=", 
           RowBox[{"OptionValue", "[", "Simplify", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"theAlg", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "3"}], "]"}]}], ",", 
          RowBox[{"exExCC", "=", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "expr", "]"}]}], "]"}], 
            "]"}]}], ",", "\[IndentingNewLine]", "ps", ",", 
          "theTransformation", ",", "solTemplate", ",", "bnames", ",", 
          "bCCb0", ",", "bCCbI0", ",", "detSqrt", ",", "genericMV", ",", 
          "takeMe", ",", "b", ",", "stS", ",", "s2pS2", ",", "stSs2pS2", ",", 
          "s", ",", "S", ",", "sSRulesT", ",", "sSRules", ",", 
          "genericAnswer", ",", "equalsSCase", ",", "sSRulesPositive", ",", 
          "sSRulesPositiveT", ",", "vVRulesPositive", ",", "sSRulesNegativeT",
           ",", "sSRulesNegative", ",", "vVRulesNegative", ",", "v", ",", "V",
           ",", "vVRules", ",", "eqsvV", ",", "solTemplateSpec1", ",", 
          "solTemplateSpec2", ",", "solTemplateSpec00", ",", "specAnswer", 
          ",", "specAnswer1", ",", "specAnswer2", ",", "specAnswer00", ",", 
          "freeParamRules", ",", "freeParamRulesMissed", ",", "allSpecRules1",
           ",", "allSpecRules2"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SetAttributes", "[", 
          RowBox[{"takeMe", ",", "HoldAll"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}], 
             "]"}], "===", "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", 
            RowBox[{"theAlg", ",", 
             RowBox[{
             "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}], 
             ",", 
             RowBox[{"gaMakeAlias", "\[Rule]", "False"}], ",", 
             RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"ps", "=", 
          RowBox[{"First", "[", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"gaGetMV", "[", 
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"theAlg", ",", "requireOrdering", ",", "All"}], "]"}],
                ",", 
               RowBox[{"{", "3", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"simplify", ",", "True", ",", 
           RowBox[{"theTransformation", "=", "Simplify"}], ",", "False", ",", 
           
           RowBox[{"theTransformation", "=", "Identity"}], ",", "_", ",", 
           RowBox[{"theTransformation", "=", "simplify"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCb0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{"exExCC", ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bCCbI0", "=", 
          RowBox[{"theTransformation", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{"gaPE", "[", 
               RowBox[{"exExCC", "\[GeometricProduct]", "ps"}], "]"}], "]"}], 
             ",", 
             RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"detSqrt", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"bCCb0", "^", "2"}], "-", 
            RowBox[{"bCCbI0", "^", "2"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"genericMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"b", ",", "theAlg", ",", "All", ",", 
            RowBox[{
            "gaNonCommutativeMonomialOrder", "\[Rule]", "requireOrdering"}]}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bnames", "=", 
          RowBox[{"b", "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{
               RowBox[{"2", "^", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlg", "]"}]}], "-",
                "1"}]}], "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Set", "@@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{
                RowBox[{"genericMV", "-", "expr"}], ",", "_bs", ",", 
                "takeMe"}], "]"}], ",", "_takeMe", ",", "Infinity"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"takeMe", "[", "x_", "]"}], "\[RuleDelayed]", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "0"}], ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"Variables", "[", "x", "]"}], ",", "bnames"}], 
                "]"}]}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "generic", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "=!=", 
            RowBox[{"0", " ", "and", " ", "s"}], "=!=", "0"}], " ", "||", " ", 
           RowBox[{"S", "=!=", "0"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Select", " ", "generic", " ", "or", " ", "specific", " ", 
           "solution", " ", "of", " ", "second", " ", "system", " ", "of", 
           " ", "eqs"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"stSs2pS2", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"(*", " ", 
               RowBox[{"s", "=", 
                RowBox[{"!", "S"}]}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}]}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "/", "4"}], "]"}], ",", 
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}]}], "]"}]}], ",", 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "bCCb0", "]"}], "+", 
                    RowBox[{"b", "[", "0", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "bCCbI0", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "bCCb0", "]"}]}]}], 
                   "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], ")"}]}], "+", 
                    
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "-", "detSqrt"}], "]"}]}], "]"}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], ")"}]}], "+", 
                    
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"stS", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "/", "4"}], "]"}], 
                    ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}], ",", 
                 
                 RowBox[{"s2pS2", "\[Rule]", 
                  RowBox[{"ConditionalExpression", "[", 
                   RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", "bCCbI0"}], ")"}], 
                    "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}]}]}], ")"}], "/", "8"}], 
                    "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"bCCb0", "+", "detSqrt"}], "]"}]}], "]"}]}]}], 
                "}"}]}], "\[IndentingNewLine]", "}"}], "/.", 
             RowBox[{"{", 
              RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"___", ",", 
              RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Generic", "  ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "=!=", 
           RowBox[{
           "0", "  ", "solution", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"sSRulesT", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Union", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"sSSqrt", "=", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"s2pS2", "^", "2"}], "-", 
                    RowBox[{"stS", "^", "2"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], ")"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", "0", "]"}], ",", 
                    RowBox[{"zeroQ", "[", "stS", "]"}]}], "]"}]}], ",", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", "s2pS2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", "stS", "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", "s2pS2", "]"}]}]}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}], " ", "means", 
                    " ", 
                    RowBox[{"nonzeroQ", "[", "stS", "]"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "-", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{"stS", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}], ",", 
                    RowBox[{"positiveQ", "[", 
                    RowBox[{"s2pS2", "+", "sSSqrt"}], "]"}]}], "]"}]}]}], 
                    "}"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], "/.", 
                    "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "stSs2pS2"}], ")"}], 
             "]"}], ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", 
           RowBox[{"what", "'"}], "s", " ", "going"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The parametrization of MV is A=s+v+(S+V)I\>\"", 
                    "]"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s2pS2=s^2-S^2 is \>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"s2pS2", "/.", "stSs2pS2"}], "]"}]}], "}"}], 
                   "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TextCell", "[", "\"\<The stS=s*S is \>\"", "]"}],
                     ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"stS", "/.", "stSs2pS2"}], "]"}]}], "}"}], "]"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<{b_S,b_I,Sqrt[D]} \>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"{", 
                    RowBox[{"bCCb0", ",", "bCCbI0", ",", "detSqrt"}], "}"}], 
                    "]"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
                "]"}], "]"}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"take", " ", "on", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"sSRules", "=", 
          RowBox[{"theTransformation", "/@", 
           RowBox[{"Pick", "[", 
            RowBox[{"sSRulesT", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"nonzeroQ", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"s", "^", "2"}], "-", 
                   RowBox[{"S", "^", "2"}]}], "/.", "#"}], "]"}], "&"}], "/@",
                "sSRulesT"}], ")"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRules", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The regular case s^2\[NotEqual]S^2 has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRules", "]"}]}], "}"}], 
                   "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], "]"}], 
               "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"solTemplate", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"s", "+", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"v", ",", "theAlg", ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "\[Rule]", 
               "requireOrdering"}]}], "]"}], " ", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"S", "+", 
               RowBox[{"gaGeneralMultivector", "[", 
                RowBox[{"V", ",", "theAlg", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{
                 "gaNonCommutativeMonomialOrder", "\[Rule]", 
                  "requireOrdering"}]}], "]"}]}], ")"}], 
             "\[GeometricProduct]", "ps"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vVRules", "=", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{"\"\<S\>\"", "\[Rule]", "S"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "-", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], ")"}]}], "-", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "1", "]"}]}], ")"}]}], "-", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "6", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "5", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"S", "*", 
                    RowBox[{"b", "[", "3", "]"}]}], ")"}]}], "-", 
                    RowBox[{"s", "*", 
                    RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"s", "^", "2"}]}], "+", 
                    RowBox[{"S", "^", "2"}]}], ")"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{
                    RowBox[{"s", "^", "2"}], "-", 
                    RowBox[{"S", "^", "2"}]}], "]"}]}], "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "}"}], "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}], ",", "___"}], 
                    "}"}]}], "]"}], "]"}], "&"}], "/@", "sSRules"}], ")"}], 
              "]"}], ",", "1"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
             RowBox[{"\"\<S\>\"", "\[Rule]", "S"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"genericAnswer", "=", 
          RowBox[{"gaPE", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"solTemplate", "/.", "#"}], ")"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", "vVRules"}], ")"}]}], 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Answer", " ", "of", " ", "regular", " ", "case"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Start", " ", "specific", " ", "case", " ", 
              RowBox[{"s", "^", "2"}]}], "-", 
             RowBox[{"S", "^", "2"}]}], "==", 
            RowBox[{"0", " ", "and", " ", "s"}]}], "=!=", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Specific", " ", 
             RowBox[{"s", "^", "2"}]}], "-", 
            RowBox[{"S", "^", "2"}]}], "==", 
           RowBox[{
           "0", " ", "solutions", " ", "of", " ", "first", " ", "system", " ",
             "of", " ", "eqs"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"common", " ", "part", " ", "for", " ", "s"}], "=", 
           RowBox[{
            RowBox[{"S", "  ", "and", " ", "s"}], "\[Equal]", 
            RowBox[{"-", "S"}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"equalsSCase", "=", 
          RowBox[{
           RowBox[{"zeroQ", "[", 
            RowBox[{"bCCb0", "-", "bCCbI0", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "-", 
                RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], "]"}], "||", 
           RowBox[{"zeroQ", "[", 
            RowBox[{
             RowBox[{"-", "bCCb0"}], "-", "bCCbI0", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "+", 
                RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
            "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"s", "\[Equal]", "S"}], " ", ";", " ", 
           RowBox[{
            RowBox[{"bCCb0", "-", "bCCbI0", "-", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"b", "[", "0", "]"}], "-", 
                RowBox[{"b", "[", "7", "]"}]}], ")"}], "2"]}], "\[Equal]", 
            "0"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "+", 
              RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "-", 
              RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "+", 
              RowBox[{"b", "[", "4", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesPositiveT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{"(*", 
                    RowBox[{"s", "\[NotEqual]", 
                    RowBox[{
                    "0", " ", "is", " ", "ensured", " ", "by", " ", 
                    "positiveQ"}]}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}]}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}]}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}]}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"b", "[", "0", "]"}], "*", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}]}], 
                    "]"}]}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}],
                   "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesPositive", "=", 
             RowBox[{"theTransformation", "/@", 
              RowBox[{"Pick", "[", 
               RowBox[{"sSRulesPositiveT", ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                  "sSRulesPositiveT"}], ")"}]}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRulesMissed", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "-", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "+", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"vVRulesPositive", "=", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "[", "1", "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "[", "5", "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRules", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesPositive"}], ")"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "[", "1", "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "[", "5", "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"b", "[", "4", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "-", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"nonzeroQ", "[", "s", "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "+", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "-", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "+", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRulesMissed", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesPositive"}], ")"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                 RowBox[{"V", "[", "1", "]"}]}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec1", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"s", "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer1", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec1", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesPositive"}], ")"}]}]}], ";"}], "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer1", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRulesPositive", "]"}], ">", "0"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=S\[NotEqual]0 (positive) case has solution \
\>\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesPositive", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", 
           RowBox[{
            RowBox[{"-", "S"}], " ", "-", "bCCb0", "-", "bCCbI0", "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "+", 
               RowBox[{"b", "[", "7", "]"}]}], ")"}], "2"]}], "\[Equal]", 
           "0"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "1", "]"}], "-", 
              RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "2", "]"}], "+", 
              RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{
              RowBox[{"b", "[", "3", "]"}], "-", 
              RowBox[{"b", "[", "4", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sSRulesNegativeT", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"s", "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}], "&&", 
                    RowBox[{"nonNegativeQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "-", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "bCCb0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], "]"}]}]}], "]"}]}], "}"}]}], 
                   "\[IndentingNewLine]", "}"}], "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ",", 
                RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"sSRulesNegative", "=", 
             RowBox[{"(", 
              RowBox[{"theTransformation", "/@", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesNegativeT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"nonzeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&"}], "/@", 
                   "sSRulesNegativeT"}], ")"}]}], "]"}]}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "2"}], "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "-", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "-", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRulesMissed", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "2"}], "*", 
                   RowBox[{"b", "[", "1", "]"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", "bCCb0"}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "^", "2"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "^", "2"}], "-", 
                    RowBox[{"16", "*", "s", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}]}], "-", 
                    RowBox[{"8", "*", 
                    RowBox[{"s", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"4", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}]}]}], 
                    ")"}]}]}], "]"}]}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"8", "*", "s"}], ")"}]}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"vVRulesNegative", "=", 
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRules", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesNegative"}], ")"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Union", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "6", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "1", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "\[Rule]", 
                    RowBox[{"ConditionalExpression", "[", 
                    RowBox[{
                    RowBox[{"takeMe", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"b", "[", "4", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", "*", "s"}], ")"}]}], "+", 
                    RowBox[{"V", "[", "3", "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "1", "]"}], "-", 
                    RowBox[{"b", "[", "6", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "2", "]"}], "+", 
                    RowBox[{"b", "[", "5", "]"}]}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{
                    RowBox[{"b", "[", "3", "]"}], "-", 
                    RowBox[{"b", "[", "4", "]"}]}], "]"}], "&&", 
                    RowBox[{"nonzeroQ", "[", "s", "]"}]}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                    RowBox[{"V", "[", "1", "]"}]}]}], "}"}], 
                    "\[IndentingNewLine]", "/.", "#"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"takeMe", "\[Rule]", "Identity"}], "}"}]}], ")"}],
                     "/.", 
                    RowBox[{"(", 
                    RowBox[{"freeParamRulesMissed", "/.", "#"}], ")"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "Undefined"}]}], "]"}], "]"}], 
                    "&"}], "/@", "sSRulesNegative"}], ")"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<s\>\"", "\[Rule]", "s"}], ",", 
                RowBox[{"\"\<V[1]\>\"", "\[Rule]", 
                 RowBox[{"V", "[", "1", "]"}]}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"solTemplateSpec2", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{"s", "+", 
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "s"}], "+", 
                   RowBox[{"gaGeneralMultivector", "[", 
                    RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}]}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"specAnswer2", "=", 
             RowBox[{"gaPE", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"solTemplateSpec2", "/.", "#"}], ")"}], "&"}], "/@",
                 "vVRulesNegative"}], ")"}]}]}], ";"}], "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer2", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "sSRulesNegative", "]"}], ">", "0"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<The s=-S\[NotEqual]0 (negative) case has solution \>\
\"", "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", "sSRulesNegative", "]"}]}],
                     "}"}], "]"}], " ", "\[IndentingNewLine]", "}"}], "]"}], 
                "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"s", "\[Equal]", "S", "\[Equal]", "0"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"equalsSCase", "&&", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"zeroQ", "/@", 
               RowBox[{"(", 
                RowBox[{"b", "/@", 
                 RowBox[{"Range", "[", "6", "]"}]}], ")"}]}], ")"}]}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCb0", "-", 
              RowBox[{
               RowBox[{"b", "[", "0", "]"}], "^", "2"}], " ", "-", 
              RowBox[{
               RowBox[{"b", "[", "7", "]"}], "^", "2"}]}], "]"}], "&&", 
            RowBox[{"zeroQ", "[", 
             RowBox[{"bCCbI0", "-", 
              RowBox[{"2", " ", 
               RowBox[{"b", "[", "0", "]"}], "*", " ", 
               RowBox[{"b", "[", "7", "]"}]}]}], "]"}], "&&", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Pick", "[", 
                RowBox[{"sSRulesT", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                   "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solTemplateSpec00", "=", 
             RowBox[{"(", 
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaGeneralMultivector", "[", 
                 RowBox[{"v", ",", "theAlg", ",", 
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", 
                   "requireOrdering"}]}], "]"}], " ", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"V", ",", "theAlg", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{
                    "gaNonCommutativeMonomialOrder", "\[Rule]", 
                    "requireOrdering"}]}], "]"}], ")"}], 
                 "\[GeometricProduct]", "ps"}]}], "]"}], ")"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "Only", " ", "one", " ", "solution", " ", "taken", " ", "here", 
              " ", "for", " ", "free", " ", 
              RowBox[{"parameters", "!"}], " ", "Some", " ", "solutions", " ",
               "can", " ", "be", " ", "missed", " ", "here"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"freeParamRules", "=", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"v", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}], "^", "2"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}], "^", 
                    "2"}]}], "]"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}]}]}], ",", 
                 RowBox[{
                  RowBox[{"V", "[", "1", "]"}], "\[Rule]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}], "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", "2", "]"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "7", "]"}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "+", 
                    RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], ")"}], "^", "2"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"b", "[", "0", "]"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], ")"}], "^", 
                    "2"}]}], "]"}]}], "]"}]}], ")"}]}]}]}], "}"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"specAnswer00", "=", 
               RowBox[{"{", 
                RowBox[{"solTemplateSpec00", "/.", "freeParamRules"}], 
                "}"}]}]}], "*)"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"freeParamRules", "=", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "0", "]"}]}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "1", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "2", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"v", "[", "3", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "1", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "2", "]"}], "^", "2"}], "-", 
                   RowBox[{
                    RowBox[{"V", "[", "3", "]"}], "^", "2"}]}], "\[Equal]", 
                  "0"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", 
                    RowBox[{"b", "[", "7", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"v", "[", "1", "]"}], "*", 
                    RowBox[{"V", "[", "1", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"v", "[", "2", "]"}], "*", 
                    RowBox[{"V", "[", "2", "]"}]}], "-", 
                   RowBox[{"2", "*", 
                    RowBox[{"v", "[", "3", "]"}], "*", 
                    RowBox[{"V", "[", "3", "]"}]}]}], "\[Equal]", "0"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "[", "1", "]"}], ",", 
                 RowBox[{"V", "[", "1", "]"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"specAnswer00", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"solTemplateSpec00", "/.", "#"}], ")"}], "&"}], "/@", 
              "freeParamRules"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"specAnswer00", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"Pick", "[", 
                  RowBox[{"sSRulesT", ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}], ">", "0"}], ")"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"TextCell", "[", 
                 RowBox[{"Column", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<The s=S=0  case has solution \>\"", 
                    "]"}], ",", 
                    RowBox[{"ExpressionCell", "[", 
                    RowBox[{"Pick", "[", 
                    RowBox[{"sSRulesT", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"s", "/.", "#"}], "]"}], "&&", 
                    RowBox[{"zeroQ", "[", 
                    RowBox[{"S", "/.", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                    "sSRulesT"}], ")"}]}], "]"}], "]"}]}], "}"}], "]"}], 
                   "\[IndentingNewLine]", "}"}], "]"}], "]"}], "}"}], "]"}]}],
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "construct", " ", "special", " ", "case", " ", "answer", " ", 
            RowBox[{"s", "^", "2"}]}], "===", 
           RowBox[{
            RowBox[{"S", "^", "2"}], " ", "and", " ", "replace", " ", 
            RowBox[{"v", "[", "i", "]"}], " ", "by", " ", 
            RowBox[{"C", "[", 
             RowBox[{"1", ",", "i"}], "]"}], " ", "and", " ", 
            RowBox[{"V", "[", "i", "]"}], " ", "by", " ", 
            RowBox[{"C", "[", 
             RowBox[{"2", ",", "i"}], "]"}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"equalsSCase", ",", "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{
              "specAnswer00", ",", "specAnswer1", ",", "specAnswer2"}], "]"}],
              "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"v", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"1", ",", "in"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"V", "[", "in_Integer", "]"}], "\[RuleDelayed]", 
                RowBox[{"genParam", "[", 
                 RowBox[{"2", ",", "in"}], "]"}]}]}], "}"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"specAnswer", "=", 
            RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "explicit", " ", "equations", " ", "for", " ", "v", " ", "and", " ",
            "V"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"Join", "[", 
          RowBox[{"genericAnswer", ",", "specAnswer"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[535]:=",ExpressionUUID->"183d1da1-7cd0-447e-b98f-37402b018610"]
}, Closed]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Series "
}], "Subsection",ExpressionUUID->"428fe170-9580-456c-92aa-566a8eacd33a"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". GeometricProductSeries"
}], "Subsubsection",ExpressionUUID->"1840d34c-5c9e-4787-ac73-64c3e404248d"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaGeometricProductSeries[ ] ",
  FontWeight->"Bold"],
 "is taken  from package ",
 StyleBox["clifford.m",
  FontWeight->"Bold"],
 "  (version 1.3 (Oct,2007): authors G. Aragon-Camarasa, J.L. Aragon, G. \
Aragon and M.A. Rodriguez )."
}], "Text",ExpressionUUID->"3efa313c-07df-41f7-9f58-5daf56b3abd0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "gaSeriesData", "}"}]}], " ", ";"}]], "Input",
 CellLabel->
  "In[536]:=",ExpressionUUID->"fc729999-dc29-4fc4-bbe3-601d7ec6c95d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "::", "function"}], "=", 
   "\"\<The expanded function `1` contains noncommutative operations \
(GeometricProduct or other). Current implementation is not ready to handle \
such cases. Use only with single argument!!!\>\""}], ";"}]], "Input",
 CellLabel->
  "In[537]:=",ExpressionUUID->"be3a10ac-ba3f-42ff-9baa-71cc64b90efd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "[", 
    RowBox[{
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Function", "|", "_Symbol"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"point_", "?", "NumberQ"}], ",", 
         RowBox[{"n_Integer", "?", "Positive"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"Series", "[", 
         RowBox[{
          RowBox[{"sym", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "point", ",", "n"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"a", "=", "1"}], ",", 
       RowBox[{"expansion", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaGeometricProductSeries", ",", "Expand"}], "]"}]}], 
          ")"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"sym", ",", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}]}], "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaGeometricProductSeries", "::", "function"}], ",", 
          "sym"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[NotEqual]", "0"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{"expansion", ",", 
             RowBox[{"a", "=", 
              RowBox[{"gaProductExpand", "[", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", "m"}], "]"}], "]"}]}], ",", 
             RowBox[{"a", "=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"a", ",", "m"}], "]"}]}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"res", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Coefficient", "[", 
                RowBox[{"s", ",", "x", ",", "i"}], "]"}], "*", "a"}], "}"}], 
             ",", "i"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gaSeriesData", "@@", 
       RowBox[{"{", 
        RowBox[{"point", ",", "res"}], "}"}]}]}]}], "]"}]}], ";"}]}], "Input",\

 CellLabel->
  "In[538]:=",ExpressionUUID->"f0a8dcf1-f632-4be3-91e1-ed081f37fe44"],

Cell[TextData[{
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 " returns ",
 StyleBox["gaSeriesData[ ] ",
  FontWeight->"Bold"],
 "series data (mimic ",
 StyleBox["Series[ ]",
  FontWeight->"Bold"],
 " behaviour). It can be converted either to ordinary geometric product (with \
",
 StyleBox["Normal[ ]",
  FontWeight->"Bold"],
 ") or user can explicitly include infinitesimal parameter with ",
 StyleBox["gaParameterSeries[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaSeriesData[]",
  FontWeight->"Bold"],
 " rules for ",
 StyleBox["Zassenhaus",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Baker-Campbell-Hausdorff",
  FontSlant->"Italic"],
 " series are added in these series definition sections."
}], "Text",ExpressionUUID->"6f185173-1f5b-4652-9017-be5ad3b694c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Normal", "[", "a_gaSeriesData", "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[540]:=",ExpressionUUID->"0f46725f-b604-44e7-ba5b-d068ae0b010a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "[", 
    RowBox[{"a_gaSeriesData", ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"var", "^", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"Plus", "@@", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[541]:=",ExpressionUUID->"fe399153-f549-477a-9372-0204e9af6bc6"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " are automatically summed order by order and geometrically multiplied."
}], "Text",ExpressionUUID->"fd2cfa14-fe02-4313-8577-1ee919c17602"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Plus", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any3___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxOrder", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", "dat1", "]"}], ",", 
         RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Plus", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"gaSeriesData", "[", 
        RowBox[{"point", ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat1", ",", "maxOrder"}], "]"}]}], ")"}], "+", 
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat2", ",", "maxOrder"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
        "]"}], ",", "any2", ",", "any3"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[542]:=",ExpressionUUID->"26431bf5-2b4a-4c87-b885-e9bee719ef70"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication by multivector is multiplication of every term of series by \
that factor."
}], "Text",ExpressionUUID->"412613fa-9e0f-47b1-af2c-4daf1a856d97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Times", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[543]:=",ExpressionUUID->"014c3035-e3e4-4d75-92d3-df5e3db128ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[544]:=",ExpressionUUID->"34e6ef61-dd02-41b8-b80b-66a94cf34452"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication is realized first constructing pairs of infinitesimal of \
same power ",
 StyleBox["relevantPairs",
  FontWeight->"Bold"],
 ", then simply taking these terms with ",
 StyleBox["Extract[ ]",
  FontWeight->"Bold"],
 ", multiplying and at least summing."
}], "Text",ExpressionUUID->"3482516d-dae2-425e-b53d-a7ef6a487c38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any2___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"maxOrder", "=", 
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"Length", "[", "dat1", "]"}], ",", 
          RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], ",", 
       "relevantPairs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"relevantPairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "+", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "k"}], "}"}], ",", "k"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "maxOrder"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"any1", ",", 
        RowBox[{"gaSeriesData", "[", 
         RowBox[{"point", ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"List", "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat2"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}]}], "}"}], "]"}]}], ")"}], "&"}], "/@", 
                  RowBox[{"relevantPairs", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "maxOrder"}], "}"}]}], "]"}]}]}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", 
               RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
         "]"}], ",", "any2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[545]:=",ExpressionUUID->"3d393635-e47b-43b9-b113-09576e728d50"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "gaAssociationTogether", " ", "action", " ", "on", " ", "series", " ", 
    "data"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaSeriesData", "/:", 
    RowBox[{"gaAssociationTogether", "[", 
     RowBox[{"gaSeriesData", "[", "expr__", "]"}], "]"}], ":=", 
    RowBox[{"MapAt", "[", 
     RowBox[{"gaAssociationTogether", ",", 
      RowBox[{"gaSeriesData", "[", "expr", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "All", ",", "1", ",", "1"}], "}"}]}], "]"}]}], 
   ";"}]}]], "Input",
 CellLabel->
  "In[546]:=",ExpressionUUID->"10819bd1-abd8-417c-80a9-b79fcf7dfffc"],

Cell[TextData[{
 "Below follows shortcuts and simplified predefined usage of ",
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"9f01afff-5d82-4eae-b3d3-a2e4b4e781ef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricExp", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSin", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSinh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCos", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCosh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTan", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTanh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[547]:=",ExpressionUUID->"74113379-1f94-4f8a-b951-50602255ec72"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricExp", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricExp", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Exp", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Exp", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExp", "=", "gaGeometricExp"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSin", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSin", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sin", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sin", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSin", "=", "gaGeometricSin"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSinh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSinh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sinh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sinh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSinh", "=", "gaGeometricSinh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCos", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCos", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cos", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cos", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCos", "=", "gaGeometricCos"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCosh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCosh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cosh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cosh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCosh", "=", "gaGeometricCosh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTan", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTan", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tan", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tan", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTan", "=", "gaGeometricTan"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTanh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTanh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tanh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tanh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTanh", "=", "gaGeometricTanh"}], ";"}]}], "Input",
 CellLabel->
  "In[554]:=",ExpressionUUID->"7e8ec40a-8163-4512-a57c-833691e36d4c"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Commutator, Zassenhaus and BakerCampbellHausdorff (BCH) expansions"
}], "Subsection",ExpressionUUID->"f0ffaedd-c797-495c-a4a1-46bccc4f47f7"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"09a7d234-0784-49e3-9839-c5ce1f546c10"],

Cell["Nice output of commutator and anticommutator", "Text",ExpressionUUID->"85136167-d851-4998-925f-0fc4adec8faa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"gaCommutator", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
    RowBox[{"StyleBox", "[", 
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<\[LeftDoubleBracket]\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<,\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<\[RightDoubleBracket]\>\""}], "}"}], "]"}], ",", 
      RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
      RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaAntiCommutator", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
   RowBox[{"StyleBox", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<{\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<,\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<}\>\""}], "}"}], "]"}], ",", 
     RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
     RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[568]:=",ExpressionUUID->"3f4cf023-ab0f-4097-8543-aff9cc43f02a"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaSetMultiLinear[ ] ",
  FontWeight->"Bold"],
 "is taken  from  Daniel Lichtblau<danl@wolfram.com>Re:[mg25540] MultiLinear \
and Linear function (old mathgroup mail list)"
}], "Text",ExpressionUUID->"de59bf16-7d4c-4c2f-9ade-324a1c0ca78d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", 
                RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", "c_", ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", "1", ",", "b"}], "]"}]}], "/;", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "=!=", "1"}], ")"}], "&&", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "c", "}"}], ",", 
                RowBox[{"MV", "|", "bs"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False,ExpressionUUID->"eca5b081-d731-4791-9cb9-30e68802f9b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"c_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&"}], ")"}]}], 
                ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", 
               RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"c_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
                   RowBox[{"c", "=!=", "1"}]}], ")"}], "&"}], ")"}]}], ",", 
              "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "1", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False,ExpressionUUID->"139c3cbf-c9d9-48a8-a98b-8c19d4fe948b"],

Cell["Expand commutator and anticommutator.", "Text",ExpressionUUID->"20e9f64c-3c09-41e2-8372-dfb95c80af9b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCommutatorExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "gaAntiCommutator", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaCommutatorExpand", "[", 
      RowBox[{"n", ":", 
       RowBox[{"(", 
        RowBox[{"_", "?", "NumberQ"}], ")"}], ":", "1"}], "]"}], "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"repRules", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plus", " ", "Rules", " ", "for", " ", "gaCommutator"}], 
            "*)"}], 
           RowBox[{
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "Plus", " ", "Rules", " ", "for", " ", "gaAntiCommutator"}], 
             "*)"}], 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaAntiCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"Alternatives", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{"gaCommutatorExpand", ",", "Except"}], "]"}]}], 
                  ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Expand", "[", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", "#", ")"}], "/.", "repRules"}], ")"}], "&"}], ",", 
         "expr"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "[", "n_", "]"}], "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{
      RowBox[{"gaCommutatorExpand", "[", "n", "]"}], "[", "x", "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[570]:=",ExpressionUUID->"15741003-769c-46be-bb35-dbf39c515240"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Zassenhaus series"
}], "Subsubsection",ExpressionUUID->"7ddc9247-79aa-40c5-a85f-35ca34778aa8"],

Cell["\<\
Optimize commutator linearity for Clifford algebras instead of using general \
gaSetMultiLinear[ ] . With this optimization $IterationLimit for \
gaZassenhausSeries for value 8 causes no problems. gaCommutator is nonzero \
only if it contains heads orthonormalBasisSymbolName or MV. If you need other \
noncommutative quantities, just use MV[yourhead].\
\>", "Text",ExpressionUUID->"bfe9fefa-af6b-4e2e-8262-41892805098a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", "y_Plus", ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", "#", ",", "b"}], "]"}], "&"}], "/@", "y"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"___", ",", "a_", ",", "___"}], "]"}], "]"}], ":=", 
      RowBox[{"0", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", 
          RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[573]:=",ExpressionUUID->"148073d1-ddc9-47f5-8e03-4863df33a9cc"],

Cell["\<\
If one uses definition below,  one gets $IterationLimit for \
gaZassenhausSeries values 8 or higher. This can be avoided with 
Block[{$RecursionLimit=2048},gaZassenhausSeries[Exp[t1+t2],8]], however the \
better way is to optimize iteration procedure as above.\
\>", "Text",ExpressionUUID->"4c8ec0f2-20a5-49a7-af21-9cb377cb30dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetMultiLinear", "[", 
   RowBox[{"gaCommutator", ",", "gaAntiCommutator"}], "]"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"cd7be513-d8d2-441d-82c2-8174c5cf2c2b"],

Cell["Add antisymmetry property ", "Text",ExpressionUUID->"c990bdbb-1c95-406a-9a7a-76d02b96c725"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaCommutator", "[", 
     RowBox[{"a_", ",", "a_"}], "]"}], "]"}], ":=", "0"}], ";"}]], "Input",
 CellLabel->
  "In[574]:=",ExpressionUUID->"07fedce7-d4fc-46a9-9d8f-0638d489408b"],

Cell[TextData[{
 "Efficient computation of general Zassenhaus coefficients is literally taken \
form the article Fernando Casas, Ander Murua, Mladen Nadinic, \
\[OpenCurlyDoubleQuote]Efficient computation of the Zassenhaus formula\
\[CloseCurlyDoubleQuote],Computer Physics Communications, 183 (2012) \
2386-2391, where algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given."
}], "Text",ExpressionUUID->"2ccc7200-5cac-454b-a51f-f81d3bd25e31"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointForZassenhaus", "[", 
    RowBox[{"a_", ",", "0", ",", "b_"}], "]"}], ":=", "b"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointForZassenhaus", "[", 
    RowBox[{"a_", ",", "j_Integer", ",", "b_"}], "]"}], ":=", 
   RowBox[{"gaCommutator", "[", 
    RowBox[{"a", ",", 
     RowBox[{"gaAdjointForZassenhaus", "[", 
      RowBox[{"a", ",", 
       RowBox[{"j", "-", "1"}], ",", "b"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"1", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"1", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "k"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"j", "!"}], " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "-", "j"}], ")"}], "!"}]}], ")"}]}], ")"}], " ", 
       RowBox[{"gaAdjointForZassenhaus", "[", 
        RowBox[{
         RowBox[{"MV", "[", "bTemp", "]"}], ",", 
         RowBox[{"k", "-", "j"}], ",", 
         RowBox[{"gaAdjointForZassenhaus", "[", 
          RowBox[{
           RowBox[{"MV", "[", "aTemp", "]"}], ",", "j", ",", 
           RowBox[{"MV", "[", "bTemp", "]"}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "k"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "2", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], " ", 
    RowBox[{"gaff", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"p_", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaff", "[", 
     RowBox[{"p", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "j"}], "/", 
         RowBox[{"j", "!"}]}], ")"}], " ", 
       RowBox[{"gaAdjointForZassenhaus", "[", 
        RowBox[{
         RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], ",", "j", ",", 
         RowBox[{"gaff", "[", 
          RowBox[{
           RowBox[{"p", "-", "1"}], ",", 
           RowBox[{"k", "-", 
            RowBox[{"p", " ", "j"}]}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"k", "/", "p"}], "]"}], "-", "1"}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "p_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "=", 
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "p"}], ")"}], " ", 
      RowBox[{"gaff", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"p", "-", "1"}], ")"}], "/", "2"}], "]"}], ",", 
        RowBox[{"p", "-", "1"}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", 
     RowBox[{"a_", ",", "b_"}], "]"}], "[", "p_Integer", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
       RowBox[{
        RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], "}"}]}], 
    ")"}]}], ";"}]}], "Input",
 CellLabel->
  "In[575]:=",ExpressionUUID->"a8694b99-dadd-413f-9c65-eac31f0fbc1a"],

Cell[TextData[{
 "Right Zassenhaus series of Exp[A+B] is given as \
{Exp[A],Exp[B],Exp[C_2],Exp[C_3],...}. Whereas Left Zassenhaus series of \
Exp[A+B] is presented as {...,Exp[C\[CloseCurlyQuote]_3],Exp[C\
\[CloseCurlyQuote]_2],Exp[B],Exp[A]}. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"C", "'"}], "_n"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"n", "+", "1"}]], "C_n"}]}], TraditionalForm]],ExpressionUUID->
  "604d19c0-2dfd-48fa-b170-225410c1e651"],
 "."
}], "Text",ExpressionUUID->"fd1ded1c-7cff-41d3-bc12-c5520ef4b4ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaZassenhausSeries", "}"}], ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaZassenhausSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<Right\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausSeries", "::", "format"}], "=", 
    "\"\<gaZasenhausSeries option Format-> `1` is unknown. Possible values \
are \\\"Right\\\" or \\\"Left\\\".\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaZassenhausSeries", "[", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"aa_", "+", "bb_"}], "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a", "=", 
           RowBox[{"Unevaluated", "[", "aa", "]"}]}], ",", 
          RowBox[{"b", "=", 
           RowBox[{"Unevaluated", "[", "bb", "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaZassenhausSeries", ",", "Format"}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "seriesType", ",", "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"gaZassenhausCoefficient", "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"2", ",", "n"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "aTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "bTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\"\<Left\>\"", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"Reverse", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2", ",", "n"}], "}"}]}], "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"gaZassenhausCoefficient", "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "bTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "aTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaZassenhausSeries", "::", "format"}], ",", 
            "seriesType"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[582]:=",ExpressionUUID->"de5c5767-c327-4ee3-91e3-2422209110e1"],

Cell["Conversion of Zassenhaus series data to gaSeriesData. ", "Text",ExpressionUUID->"0f0b3a26-ee76-425e-9768-41fad4df86d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"u1_", ",", 
     RowBox[{"{", 
      RowBox[{"u2a_", ",", "u2b_"}], "}"}], ",", "u3_", ",", "len_"}], "]"}], 
   ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2a", ",", "u3", ",", "len"}], "]"}], ",", 
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2b", ",", "u3", ",", "len"}], "]"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[586]:=",ExpressionUUID->"f6d9b3ef-502c-4134-b775-9edb1be9c7db"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"expansionOrder_", ",", "uMVec_", ",", "rang_", ",", "len_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"Series", "[", 
          RowBox[{
           RowBox[{"Exp", "[", "t", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"res", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"a", "=", "1"}], ",", 
        RowBox[{"initialSeq", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "0", "}"}], ",", "j"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "0", ",", "len"}], "}"}]}], "]"}]}]}], "}"}], 
      ",", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"i", "\[NotEqual]", "0"}], ",", 
            RowBox[{"a", "=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"a", ",", "uMVec"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"res", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Coefficient", "[", 
                 RowBox[{"s", ",", "t", ",", "i"}], "]"}], "*", "a"}], "}"}], 
              ",", 
              RowBox[{"rang", "*", "i"}]}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"initialSeq", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", 
             RowBox[{"rang", "*", "k"}]}], "]"}], "]"}], "=", 
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", "k"}], "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", 
           RowBox[{
            RowBox[{"Length", "[", "res", "]"}], "-", "1"}]}], "}"}]}], "]"}],
        ";", "initialSeq"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", "uMVec", "]"}], "=!=", "List"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[587]:=",ExpressionUUID->"bcc2d301-6d80-40d2-8037-d985b676f7d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", 
       "expansionOrder", ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"expansionOrder", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"len", "/", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"res", "=", 
       RowBox[{"MapAt", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"expandZasExp", "[", 
             RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"expansionOrder", ",", 
             RowBox[{"{", 
              RowBox[{"inf0", ",", "infn"}], "}"}], ",", 
             RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"gaSeriesData", "@@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", "res"}],
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[588]:=",ExpressionUUID->"8cdff088-68a8-413b-b549-25dfce854577"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "[", 
   RowBox[{"gaZassenhausSeriesData", "[", 
    RowBox[{"infn___", ",", "inf0_List"}], "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "expansionOrder",
       ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expansionOrder", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{"len", "/", "i"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Apply", "[", 
          RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"expandZasExp", "[", 
            RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"expansionOrder", ",", 
            RowBox[{"Reverse", "[", 
             RowBox[{"{", 
              RowBox[{"infn", ",", 
               RowBox[{"Reverse", "[", "inf0", "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GeometricProduct", "@@", 
      RowBox[{"gaSeriesData", "@@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", 
         RowBox[{"Reverse", "[", "res", "]"}]}], ")"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[589]:=",ExpressionUUID->"d8baf1de-e919-4a37-8b7f-c61eef64bdb4"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "gaAssociationTogether", " ", "action", " ", "on", " ", "series", " ", 
   "data"}], " ", "*)"}]], "Input",
 CellLabel->
  "In[590]:=",ExpressionUUID->"e6eeb7f0-9348-44b4-922f-04bcd9ccf8f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaZassenhausSeriesData", "/:", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", "expr__", "]"}], "]"}], ":=", 
   RowBox[{"gaAssociationTogether", "/@", 
    RowBox[{"gaZassenhausSeriesData", "[", "expr", "]"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[591]:=",ExpressionUUID->"df7fb41f-53b7-4247-86f4-96f4c33a704a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". BCH series"
}], "Subsubsection",ExpressionUUID->"000b37fb-664f-4af7-afdd-f24b1ea3233b"],

Cell[TextData[{
 "Efficient computation of general BCH coefficients is literally taken form \
the Mattias W. Reinsch, \[OpenCurlyDoubleQuote]A simple expression for the \
terms in the Baker-Campbell-Hausdorff \
series\[CloseCurlyDoubleQuote],(arXiv:math-ph/9905012v2 13 Jan,2000), where \
algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given. We only add speedup using SparseArray matrices (15% \
speedup for n=12 term)."
}], "Text",ExpressionUUID->"c4379cdf-d7ab-4471-a7b3-5bbe481cf4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myStrings__String", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Band", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], "]"}], "\[Rule]", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "+", "1"}], ",", 
            RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}]}], ",", "FFGGm1"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dot", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                 RowBox[{"Product", "[", 
                  RowBox[{
                   RowBox[{"sb", "[", 
                    RowBox[{"k", ",", "#"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "]"}], "&"}], "/@", 
            RowBox[{"{", "myStrings", "\[IndentingNewLine]", "}"}]}], ")"}]}],
          "-", "qthpower"}], ")"}]}], ";", 
      RowBox[{"Expand", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"qthpower", "=", 
             RowBox[{"qthpower", ".", "FFGGm1"}]}], ";", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
             "qthpower"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", 
           RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[592]:=",ExpressionUUID->"5ce5bc77-f81e-4b55-acf3-375f8c27c69a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
    RowBox[{
     RowBox[{"{", "exprs__String", "}"}], ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"temp", "=", 
        RowBox[{"logTempMatrix", "[", 
         RowBox[{
          RowBox[{"{", "exprs", "}"}], ",", "n"}], "]"}]}], ",", "term"}], 
      "}"}], ",", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"term", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"List", ",", 
           RowBox[{"temp", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{"term", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*", 
         RowBox[{"Apply", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"term", ",", 
              RowBox[{"-", "n"}]}], "]"}], "/.", 
            RowBox[{
             RowBox[{"sb", "[", 
              RowBox[{"_", ",", "k_"}], "]"}], "\[Rule]", 
             RowBox[{"MV", "[", "k", "]"}]}]}]}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "temp", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[593]:=",ExpressionUUID->"13c3de3e-0894-437f-b8f3-6a797057a1a1"],

Cell["\<\
Nested commutator on the right or left hand side. This differs from \
traditional form presented in the literature, because some terms are equal \
and can be added. For example in 5-th order term two terms with coefficients \
add  1/360+1/180 to form 1/120 coefficient of their sum. \
\>", "Text",ExpressionUUID->"7c359209-ca67-4feb-9719-69c071d09068"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateCommutatorForm", "[", 
    RowBox[{"expr_", ",", "vars_List", ",", "type_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rules", ",", "gaCom", ",", "any1", ",", "any2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetNonCommutative", "[", 
       RowBox[{"gaCom", ",", "any1", ",", "any2"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "type", ",", "\[IndentingNewLine]", "\"\<DeepestRight\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}]}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "a", "]"}], ">", 
                RowBox[{"Depth", "[", "b", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "b", ",", "a", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "a"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}], ",", 
                 RowBox[{"c", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "\"\<DeepestLeft\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", "b"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "b", "]"}], ">", 
                RowBox[{"Depth", "[", "a", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", "any2___"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "a", ",", "b", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"a", ",", "b"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"c", ":", "_gaCom"}], ",", 
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}], ",", "b"}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "b"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"#", "/.", "rules"}], "]"}], "&"}], ",", "expr"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"gaCom", "\[Rule]", "gaCommutator"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[594]:=",ExpressionUUID->"1563b761-d0db-4a86-9b22-b5ae328c4170"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaBakerCampbellHausdorffSeries", "}"}], ",", "HoldFirst"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBakerCampbellHausdorffSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "format"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries option Format-> `1` is unknown. \
Possible values are \\\"Commutators\\\",\\\"Expand\\\" or \
\\\"None\\\".\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[595]:=",ExpressionUUID->"e231240a-fd8f-4565-aaf4-20afc5c120e0"],

Cell[TextData[{
 "Note: ",
 StyleBox["directLogTempMatrix[ ]",
  FontWeight->"Bold"],
 " is much faster when expanding multivectors. For example for two 3D vectors \
9-th order BCH series (expanded) is 600sec compared to 5000 sec using \
commutative algorithm. All this due to slow expansion of large noncommutative \
expression. Therefore we switch to directLogTempMatrix[ ] for n>5."
}], "Text",ExpressionUUID->"2e2035f8-a7b6-4ab8-8a88-96692c364e2e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"directLogTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myexressions__", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], ",", "FFGGm1"}], "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"gaPE", ",", 
           RowBox[{"gaGeometricMatrixProduct", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"1", "/", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "&"}], "/@", 
              RowBox[{"{", "myexressions", "\[IndentingNewLine]", "}"}]}], 
             ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", 
             RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "-", "qthpower"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"gaPE", "/@", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"qthpower", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"MapAt", "[", 
                 RowBox[{"gaPE", ",", "qthpower", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", "FFGGm1"}], "]"}]}], 
             ";", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
              "qthpower"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", 
            RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[598]:=",ExpressionUUID->"0d060885-f303-4d8d-9efc-e4281e06c289"],

Cell["\<\
Note: rewrite using commutators to left or to right side. It is not rewrite \
into Hall or Lyndon base (don\[CloseCurlyQuote]t know how to do this)\
\>", "Text",ExpressionUUID->"efc77767-2f0b-4b4c-b4b5-610c13dca05e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBakerCampbellHausdorffSeries", "[", 
       RowBox[{
        RowBox[{"GeometricProduct", "[", "expr__Exp", "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"expArgs", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"List", "@@@", 
             RowBox[{"Unevaluated", "[", 
              RowBox[{"{", "expr", "}"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaBakerCampbellHausdorffSeries", ",", "Format"}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"stringNames", "=", 
           RowBox[{"(", 
            RowBox[{"ToString", "/@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Unique", "[", "\"\<vn\>\"", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "expr", "}"}], "]"}], "}"}]}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "seriesType", ",", "\[IndentingNewLine]", "\"\<None\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "gaBakerCampbellHausdorffSeriesData", "@@", "\[IndentingNewLine]", 
            
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", "expArgs"}], 
              "]"}], ")"}]}], ",", "\"\<Expand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "gaBakerCampbellHausdorffSeriesData", "@@", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", 
                 RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"directLogTempMatrix", "[", 
                  RowBox[{"expArgs", ",", "k"}], "]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Commutators\>\"", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<DeepestRight\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestRight\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Commutators\>\"", "|", 
            RowBox[{"{", 
             RowBox[{"\"\<Commutators\>\"", ",", 
              RowBox[{"Method", "\[Rule]", "\"\<DeepestLeft\>\""}]}], "}"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestLeft\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[599]:=",ExpressionUUID->"4d9e015e-2e9b-42a5-ad38-8ed8f0916c59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBCHSeries", "=", "gaBakerCampbellHausdorffSeries"}], 
  ";"}]], "Input",
 CellLabel->
  "In[600]:=",ExpressionUUID->"d3a28ee5-b273-4243-be10-f8ea3d1ebe22"],

Cell["\<\
Conversion of BakerCampbellHausdorffSeries series data to gaSeriesData. \
\>", "Text",ExpressionUUID->"d8d3f85b-cbd2-44fc-bbb7-565847e558f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeProductTerm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pair", ":", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ".."}]}], "}"}], 
     ",", 
     RowBox[{"expansionOrder_Integer", "?", "Positive"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{"#", ",", 
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"Factorial", "[", 
          RowBox[{"Length", "[", "#", "]"}], "]"}]}], ")"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Permutations", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
       RowBox[{"{", "pair", "}"}]}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[601]:=",ExpressionUUID->"df422bb9-8104-444a-8290-a94f4eb40263"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "termsToTake", 
       ",", "nontrivialEntries"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"0", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"termsToTake", "=", 
                RowBox[{"FrobeniusSolve", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "len", "]"}], ",", "order"}], "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"nontrivialEntries", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Plus", "@@", "inf0"}], ",", "infn"}], "}"}], ",",
                     "#"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "0"}], "}"}]}], "]"}], ")"}], "&"}], "/@",
                  "termsToTake"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"gaPE", "[", 
                RowBox[{"Plus", "@@", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{"GeometricProduct", ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"makeProductTerm", "[", 
                    RowBox[{"#", ",", "order"}], "]"}], "&"}], "/@", 
                    "nontrivialEntries"}], ")"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
              ",", "order"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"order", ",", "len"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "0", "}"}], ",", "0"}], "}"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[602]:=",ExpressionUUID->"7ffce8e8-82a8-451d-a517-0291f62bf414"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBakerCampbellHausdorffSeriesData", "/:", 
   RowBox[{"gaAssociationTogether", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", "expr__", "]"}], "]"}],
    ":=", 
   RowBox[{"gaAssociationTogether", "/@", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", "expr", "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[603]:=",ExpressionUUID->"34ff6798-e968-442e-9cb8-75a76e0c10e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[604]:=",ExpressionUUID->"470f0de9-b2ec-45d8-9dc3-536959d1ac05"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Idempotents, left ideals, bilateral ideals, ideal basis"
}], "Section",ExpressionUUID->"2e36cfc7-e28c-4536-a20a-ba3dfeac0510"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaRadonHurwitzNumber", ",", "gaIdempotentQ", ",", 
     "gaPrimitiveIdempotent", ",", "StartingElement", ",", 
     "NumberOfPrimitiveFactors", ",", "HermitianOnly", ",", "gaLeftIdeal", 
     ",", "gaDoubleSidedIdeal", ",", "gaLeftIdealBasis", ",", "gaSpinor", ",",
      "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", ",", 
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", ",", 
     "gaSpinorIdempotent", ",", "gaSpinorHalf"}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[605]:=",ExpressionUUID->"306c1950-971e-4a4e-8e3d-674f810a521f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[606]:=",ExpressionUUID->"c3d91181-805f-4fd5-96a2-7de5fb0baaf1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "::", "usage"}], "=", 
   "\"\<gaRadonHurwitzNumber[s_Integer] gives Radon-Hurwitz number, which is \
sequence A034584 in the On-Line Encyclopedia of Integer Sequences (OEIS). The \
number of primitive idempotents of algebra Cl[p,q,0] is equal to \
q-gaRadonHurwitzNumber[q-p].\>\""}], ";"}]], "Input",
 CellLabel->
  "In[608]:=",ExpressionUUID->"ff94e806-3f01-45dc-9d7e-f9672972e47a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIdempotentQ", "::", "usage"}], "=", 
   "\"\<gaIdempotentQ[expr_] returns True if expr*expr===expr, where expr is \
either Matrix or GA expression.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[609]:=",ExpressionUUID->"cf3e33b3-d97b-4ed7-aa7f-82d92b3da953"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "usage"}], "=", 
   "\"\<gaPrimitiveIdempotent[algebra_Cl, opts___] returs a list of factors \
of the algebra of primitive idempotent. Representative factors of primitive \
idempotent are selected using options StartingElement->Integer (or list of \
integers) and gaNonCommutativeMonomialOrder\[Rule] (monomial ordering). \
Possible monomial orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \
\\\"InvRevLex\\\". These pure orderings can be proceeded with \\\"Deg[]\\\", \
and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 possible orderings. Use \
option OutputForm\[Rule]\\\"Blades\\\" to return set of blades instead of \
factors of primitive idempotent.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StartingElement", "::", "usage"}], "=", 
   "\"\<StartingElement-> Integer or StartingElement-> {Integers}. \
StartingElement is an option for gaPrimitiveIdempotent[], which determines a \
number of blade in a list. The blade is selected as a next candidate for \
primitive idempotent factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NumberOfPrimitiveFactors", "::", "usage"}], "=", 
   "\"\<NumberOfPrimitiveFactors-> positive Integer or \\\"Automatic\\\". \
NumberOfPrimitiveFactors is an option for gaPrimitiveIdempotent[], which \
restricts number of factors in the idempotent to given value. Idempotent with \
manually restricted number of factors may not be a primitive idempotent. \
Default value is \\\"Automatic\\\". Normaly your should not use the option.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HermitianOnly", "::", "usage"}], "=", 
   "\"\<HermitianOnly-> True|False is an option for gaPrimitiveIdempotent[], \
which explicitly removes non Hermitian idempotens from the list. In all \
tested cases the idempotents are Hermitian by construction. Default value is \
True.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[610]:=",ExpressionUUID->"172f6040-d1dd-492e-92c2-9c473efc2b13"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDoubleSidedIdeal", "::", "usage"}], "=", 
   "\"\<gaDoubleSidedIdeal[thePrimitiveIdempotent_gaIdempotentQ, leftIdeal_, \
Order_String ,opts___] returns double sided ideal. Options: CoefficientDomain\
\[Rule]Complexes,Quiet\[Rule]True.  Option \
OutputForm->\\\"ElementsReplacementRules\\\". is used for calculation of \
matrix representations.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[614]:=",ExpressionUUID->"4aaebdad-35b3-4d80-a1c1-d20c6841d897"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "::", "usage"}], "=", 
   "\"\<gaLeftIdealBasis[leftIdeal_, gaDoubleSidedIdeal_, Order_String, \
opts___] \nreturs an left ideal orthonormal basis. The elements in the basis \
is ordered by Order, of which most useful for spinor calculations is \
\\\"RevLex\\\". It yields first nonzero column in matrix \
representation.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[615]:=",ExpressionUUID->"2cd03471-40b9-47da-9e3c-76715c4977bf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSpinor", "::", "usage"}], "=", 
    "\"\<gaSpinor[algebra, opts___] computes general column spinors of the \
given algebra. Options: \n\
gaPrimitiveIdempotent,\
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals,CoefficientDomain\
\[Rule]Complexes|Reals,Quiet\[Rule]True|False, gaSpinorIdempotent\[Rule]1, \
GeneratedParameters\[Rule]C,gaNonCommutativeMonomialOrder->\\\"RevLex\\\",\
gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\[Rule]\\\"InvLex\\\".\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "::", 
     "usage"}], "=", 
    "\"\<Method suboption of gaSpinor. Can be used to provide direct data for \
spinor computations. Usage: \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\[Rule]\
dataMajoranaForSpinor, where dataMajoranaForSpinor has structure {{the \
idempotent, lengthOfMutuallyAnihilatingIdempotents_Integer}, }, the ideal \
basis, {{the double sided ideal_1},{the double sided ideal_2}... }. See \
detailed example for Dirac, Majorana and chiral representation calculation \
for Cl[1,3].\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "::", "usage"}],
    "=", "\"\<Option of gaSpinor and gaDefineMatrixRepresentation (when \
IdealBasis method is used). Only makes sense for semisimple algebras (odd \
algebras for complex field and p-q=1 mod 4 for real field) which sorts basis \
elements of grade inverted ideal in requiested order.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSpinorIdempotent", "::", "usage"}], "=", 
   "\"\<Option for gaSpinor, decides which of full system of idempotents \
P_1+P_2+ ... +P_n=1 should be used for spinor computation (default \
gaSpinorIdempotent->1).\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[616]:=",ExpressionUUID->"e50347d4-aa81-4418-ae98-8994f84276e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[620]:=",ExpressionUUID->"301c3ead-b153-4915-acd8-588bfe8bfdf1"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Idempotents"
}], "Subsection",ExpressionUUID->"31776a9e-5c60-4496-bc16-0f75cd878c1d"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"8b4c3182-a2f4-4e23-9a93-b47e438f7335"],

Cell[TextData[{
 "Sequence A034584  in OEIS:  Radon-Hurwitz numbers: log_2 of dimension of an \
irreducible R-module for Clifford algebra Cl_n.  Generating function: x*(1+ x \
+ x^3 + x^7)/((1 - x)*(1 - x^8)), i.e. \
CoefficientList[Normal[Series[x*(1+x+x^3+x^7)/((1-x)*(1-x^8)),{x,0,100}]],x]\n\
This matches sequence [PL-GPW] Perti Lounesto, G.P. Wene \
\[OpenCurlyDoubleQuote]Idempotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173"
}], "Text",ExpressionUUID->"956d7a27-bc80-4788-a8f9-055d6169aba7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaRadonHurwitzNumber", "[", 
      RowBox[{"s", "-", "8"}], "]"}], "+", "4"}], "/;", 
    RowBox[{"s", "\[GreaterEqual]", "8"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", "s_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"s", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", 
      ",", "2", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "3", 
      ",", "6", ",", "3", ",", "7", ",", "3"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"-", "1"}], "\[LessEqual]", "s", "\[LessEqual]", "7"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Negative"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"s", "+", "8"}], "]"}], "-", "4"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberOfPrimitiveIdempotents", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"p_", ",", "q_", ",", "0"}], "]"}], "]"}], ":=", 
   RowBox[{"q", "-", 
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"q", "-", "p"}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[621]:=",ExpressionUUID->"7c234573-da53-4378-8a59-137fa5129077"],

Cell[TextData[{
 "Using Shirokov arXiv 0705.1641 formulas we implement ",
 StyleBox["gaComplexLeftIdealBase[ ]",
  FontWeight->"Bold"],
 ", which uses even then odd base element ordered left ideal base. You can \
change ordering and take linear combinations of base element using options, \
for example for base of 4 elements with Ordering\[Rule]{4,3,2,1} or \
TransformationMatrix->{{1,1,0,0},{1,-1,0,0},{0,0,1,I},{0,0,1,-I}}."
}], "Text",ExpressionUUID->"b43165da-3bb3-4990-9a15-452bd9be7baf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIdempotentQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"MatrixQ", "[", "expr", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", "expr"}], "]"}], "]"}], "]"}], "===", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"expr", "\[GeometricProduct]", "expr"}], "]"}], "]"}], "===", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[625]:=",ExpressionUUID->"11687818-5d43-4ccb-9b1a-a386bf876164"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Primitive  idempotents of real  and complex algebras"
}], "Subsubsection",ExpressionUUID->"ec6d0a04-6d38-4937-aef3-02991cb05389"],

Cell[TextData[{
 "By [PL-GPW] primitive idempotent of Cl(p,q) is a product of type \
(1+blade)..., where blade squares to 1 and all blades forms commuting set. \
The  ",
 StyleBox["commutingWithElement[] ",
  FontWeight->"Bold"],
 " test if blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 " of the blade list ",
 StyleBox[" testList",
  FontWeight->"Bold"],
 " commutes with this blade. The function then deletes all blades, which do \
not commute with blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"d6a06861-cd56-42fe-b285-42345f351971"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"commutingWithElement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"testList_List", ",", "startEl_List"}], "}"}], ",", "quiet_", 
     ",", "ord_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"in", "=", 
         RowBox[{"RotateLeft", "[", 
          RowBox[{"testList", ",", 
           RowBox[{
            RowBox[{"startEl", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ",", "fe",
         ",", "res", ",", "restoredList"}], "}"}], ",", 
      RowBox[{
       RowBox[{"Sow", "[", 
        RowBox[{"fe", "=", 
         RowBox[{"First", "[", "in", "]"}]}], "]"}], ";", 
       RowBox[{"restoredList", "=", 
        RowBox[{"RotateRight", "[", 
         RowBox[{
          RowBox[{"Rest", "[", "in", "]"}], ",", 
          RowBox[{
           RowBox[{"startEl", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"Pick", "[", 
         RowBox[{"restoredList", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"fe", ",", "#"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#", ",", "fe"}], "]"}]}], "===", "0"}], ")"}], "&"}],
            "/@", "restoredList"}]}], "]"}]}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"!", "quiet"}], "&&", 
          RowBox[{
           RowBox[{"Length", "[", "res", "]"}], ">", "0"}]}], ",", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"TextCell", "[", "\"\<Blade \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "fe", "]"}], ",", 
                  RowBox[{
                  "TextCell", "[", "\"\<commutes with blades \>\"", "]"}], 
                  ",", 
                  RowBox[{"ExpressionCell", "[", "res", "]"}]}], "}"}], "]"}],
                ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", "\"\<Next selected blade number is \>\"", 
                   "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", "startEl", "]"}], "]"}], 
                   "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
          "]"}]}], "]"}], ";", 
       RowBox[{"{", 
        RowBox[{"res", ",", 
         RowBox[{"RotateLeft", "[", "startEl", "]"}]}], "}"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "testList", "]"}], ">", "0"}]}]}], ";"}]], "Input",\

 CellLabel->
  "In[626]:=",ExpressionUUID->"576e9621-987d-4255-b1f8-d245a5568d5e"],

Cell["\<\
After system of commuting blades which square to 1 is formed, we need to \
remove of them all blades, which are products of blades which are in the \
beginning of the list. Recursive implementation of removing product blades, \
i.e. blades which are products of blades in the beginning of given list. The \
initial blade ordering by default is \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], which can be changed to any other by option \
gaNonCommutativeMonomialOrder->order.\
\>", "Text",ExpressionUUID->"4b5e3860-c016-4497-bfb8-c0da48d267d6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other___"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", "nextAccept", "}"}], ",", 
       RowBox[{"{", "other", "}"}]}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other__"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"accepted", ",", "nextAccept"}], "}"}], ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"removeElems", "=", 
           RowBox[{"ReplaceAll", "[", 
            RowBox[{
             RowBox[{"GeometricProduct", "@@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "nextAccept"}], "}"}], "]"}], "&"}], "/@", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"{", "accepted", "}"}], "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{"-", "any_"}], "\[RuleDelayed]", "any"}]}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "other", "}"}], ",", 
           RowBox[{"Alternatives", "@@", "removeElems"}]}], "]"}]}], "]"}]}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "nextAccept_", "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", "Nothing"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "Nothing"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[627]:=",ExpressionUUID->"ba594d6f-3819-4f8f-b211-d5a6f3f99bbe"],

Cell[TextData[{
 "Function ",
 StyleBox["gaPrimitiveIdempotent[al_Cl] ",
  FontWeight->"Bold"],
 " returns list of primitive idempotents of algebra. Geometric multiplication \
of list element will give representative of primitive idempotent. Different \
representatives can be obtained either by using different sorting of \
monomials or by manually selecting preferred blades, or combining both. The \
result then is checked if proper number of required product blades is \
obtained.  "
}], "Text",ExpressionUUID->"d78be527-b83c-43cc-ada5-5e64c2484c1d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "moreNumberOfPrimitives"}], "=", 
   "\"\<Number of expected commuting idempotents for complex algebra `1` is \
`3`. Taking the first `2` out of `4` possible. \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
    "=", "\"\<Radon-Hurwitz number of expected commuting idempotents for \
algebra `1` is `2`. It does not match length of result. Something goes wrong.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "option"}], "=", 
    "\"\<Option `1` can take values `2`. Default value `3` is used.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", " ", 
     RowBox[{"StartingElement", "\[Rule]", "1"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}], ",", 
     RowBox[{"HermitianOnly", "\[Rule]", "True"}], ",", 
     RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"TransformationFunction", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[632]:=",ExpressionUUID->"dea4a981-3a46-4c32-877c-b2fed5b7e6be"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"gaPrimitiveIdempotent", ",", "gaDefineOrthonormalBasis"}], 
       "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "theBasis", ",", "ord", ",", "positiveBlades", ",", 
       "commutingPositiveBlades", ",", "commutingPositiveBladesProductFree", 
       ",", "idempotentList", ",", "expectedNumberOfPrimitiveIdempotents", 
       ",", "expectedNumberOfPrimitiveIdempotentsAutomatic", ",", 
       "commutingPositiveBladesProductFreeTransformed", ",", 
       RowBox[{"theDomain", "=", 
        RowBox[{"OptionValue", "[", "CoefficientDomain", "]"}]}], ",", 
       RowBox[{"startElementOption", "=", 
        RowBox[{"OptionValue", "[", "StartingElement", "]"}]}], ",", 
       "startElement", ",", 
       RowBox[{"quiet", "=", 
        RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", 
       RowBox[{"hermitianCase", "=", 
        RowBox[{"OptionValue", "[", "HermitianOnly", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"tf", "=", 
        RowBox[{"OptionValue", "[", "TransformationFunction", "]"}]}], ",", 
       RowBox[{"of", "=", 
        RowBox[{"OptionValue", "[", "OutputForm", "]"}]}], ",", 
       RowBox[{"numberOfIdempotents", "=", 
        RowBox[{"OptionValue", "[", "NumberOfPrimitiveFactors", "]"}]}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"startElementOption", ",", "_Integer", ",", 
        RowBox[{"startElement", "=", 
         RowBox[{"{", "startElementOption", "}"}]}], ",", 
        RowBox[{"{", "__Integer", "}"}], ",", 
        RowBox[{"startElement", "=", "startElementOption"}], ",", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaPrimitiveIdempotent", "::", "option"}], ",", 
           "StartingElement", ",", 
           RowBox[{"{", "__Integer", "}"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], ";", 
         RowBox[{"startElement", "=", 
          RowBox[{"{", "1", "}"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "automatically", " ", "determined", " ", "or", " ", "manually", " ", 
        "set", " ", "number", " ", "of", " ", "factors", " ", "in", " ", 
        "the", " ", "idemportent"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "numberOfIdempotents", ",", "Automatic", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"theDomain", "===", "Reals"}], ",", 
          RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
           RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
            RowBox[{"IntegerPart", "[", 
             RowBox[{
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
             "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"_Integer", "?", "Positive"}], ",", 
        RowBox[{
        "expectedNumberOfPrimitiveIdempotents", "=", "numberOfIdempotents"}], 
        ",", "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaPrimitiveIdempotent", ",", "Bold"}], "]"}], ",", " ", 
           "NumberOfPrimitiveFactors", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Automatic\>\"", ",", "\"\<_Integer?Positive\>\""}], 
            "}"}], ",", "\"\<Automatic\>\""}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theDomain", "===", "Reals"}], ",", 
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
            RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
             RowBox[{"IntegerPart", "[", 
              RowBox[{
               RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}],
               "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "correct", " ", "values", " ", "of", " ", "idempotent", 
        " ", "factors", " ", "should", " ", "be"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theDomain", "===", "Reals"}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=", 
         RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=", 
         RowBox[{"IntegerPart", "[", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", "\"\<Expected number of idempotents is \>\"",
                  "]"}], ",", 
                RowBox[{
                "ExpressionCell", "[", 
                 "expectedNumberOfPrimitiveIdempotentsAutomatic", "]"}]}], 
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "expected", " ", "number", " ", "of", " ", "idempotents", 
         " ", "is", " ", "zero"}], ",", " ", 
        RowBox[{"we", " ", "have", " ", "a", " ", "trivial", " ", "case"}], 
        ",", " ", 
        RowBox[{"skip", " ", "all", " ", "steps"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=!=", "0"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"set", " ", "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ord", "=", 
          RowBox[{
          "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "===", 
             "gaOrthonormalBasis"}], ")"}], ",", "\[IndentingNewLine]", 
           RowBox[{"theBasis", "=", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
              RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}], 
              ",", 
              RowBox[{"gaMakeAlias", "->", "False"}]}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "All"}], "]"}], ",", 
                "_Association"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"theBasis", "=", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", "ord", ",", "All"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
               RowBox[{"gaRunningAlgebra", "=", "al"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"theBasis", "=", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaPlainRepresentation", "[", 
                   RowBox[{"gaOrthonormalBasis", "[", 
                    RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
               RowBox[{"gaRunningAlgebra", "=", "al"}]}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"which", " ", "blades", " ", "squares", " ", "to"}], " ", 
           "+", "1"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theDomain", "===", "Reals"}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{"real", " ", "algebra", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"positiveBlades", "=", 
             RowBox[{"Pick", "[", 
              RowBox[{
               RowBox[{"DeleteCases", "[", 
                RowBox[{"theBasis", ",", "1"}], "]"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], "&"}], 
                  ")"}], "/@", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{"theBasis", ",", "1"}], "]"}]}], ")"}]}], "]"}]}], 
            ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"complex", " ", "algebra", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"positiveBlades", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], ",", "#", 
                 ",", 
                 RowBox[{"I", "#"}]}], "]"}], "&"}], "/@", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{"theBasis", ",", "1"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"hermitianCase", ",", 
              RowBox[{"positiveBlades", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{"positiveBlades", ",", 
                 RowBox[{"_", "?", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Not", "[", 
                    RowBox[{"gaHermitianQ", "[", "#", "]"}], "]"}], "&"}], 
                   ")"}]}]}], "]"}]}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "quiet"}], ",", 
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", "\"\<Blades, which square to 1 are \>\"", 
                    "]"}], ",", 
                   RowBox[{"ExpressionCell", "[", "positiveBlades", "]"}]}], 
                  "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"which", " ", "commutes"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"commutingPositiveBlades", "=", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Last", "[", 
            RowBox[{"Reap", "[", 
             RowBox[{"NestWhile", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"commutingWithElement", "[", 
                 RowBox[{"#", ",", "quiet", ",", "ord"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"positiveBlades", ",", "startElement"}], "}"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "0"}], "&"}]}],
               "]"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "quiet"}], ",", 
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", 
                    "\"\<Full system of commuting blades are\>\"", "]"}], ",", 
                   RowBox[{
                   "ExpressionCell", "[", "commutingPositiveBlades", "]"}]}], 
                  "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"commutingPositiveBladesProductFree", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Reap", "[", 
            RowBox[{"removeProductsOfElements", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "commutingPositiveBlades"}], "]"}], 
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
            RowBox[{
            "Length", "[", "commutingPositiveBladesProductFree", "]"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaPrimitiveIdempotent", "::", "moreNumberOfPrimitives"}], ",", 
              "al", ",", "expectedNumberOfPrimitiveIdempotents", ",", 
              "expectedNumberOfPrimitiveIdempotentsAutomatic", ",", 
              RowBox[{"Length", "[", "commutingPositiveBlades", "]"}]}], 
             "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"commutingPositiveBladesProductFree", "=", 
             RowBox[{"Take", "[", 
              RowBox[{"commutingPositiveBlades", ",", 
               RowBox[{"Min", "[", 
                RowBox[{"expectedNumberOfPrimitiveIdempotents", ",", 
                 RowBox[{"Length", "[", "commutingPositiveBlades", "]"}]}], 
                "]"}]}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"tf", "===", "None"}], ",", "\[IndentingNewLine]", 
           RowBox[{
           "commutingPositiveBladesProductFreeTransformed", "=", 
            "commutingPositiveBladesProductFree"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"commutingPositiveBladesProductFreeTransformed", "=", 
            RowBox[{"tf", "/@", "commutingPositiveBladesProductFree"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"idempotentList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], 
             RowBox[{"(", 
              RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
           "commutingPositiveBladesProductFreeTransformed"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
            RowBox[{
            "Length", "[", "commutingPositiveBladesProductFree", "]"}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
             ",", "al", ",", "expectedNumberOfPrimitiveIdempotents"}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"make", " ", "requested", " ", "answer", " ", "form"}], " ",
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "of", ",", "\[IndentingNewLine]", "\"\<IdempotentFactors\>\"", ",", 
           
           RowBox[{"GeometricProduct", "@@", "idempotentList"}], ",", 
           "\[IndentingNewLine]", "\"\<Blades\>\"", ",", 
           "commutingPositiveBladesProductFreeTransformed", ",", 
           "\[IndentingNewLine]", "\"\<AllSignatures\>\"", ",", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Outer", "[", 
               RowBox[{"GeometricProduct", ",", "##"}], "]"}], "&"}], "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                   RowBox[{"(", 
                    RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
                 RowBox[{"Times", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "#"}], "]"}]}], "&"}], "/@",
                "commutingPositiveBladesProductFreeTransformed"}], ")"}]}], 
            "]"}], ",", "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionValue", "::", "option"}], ",", 
              RowBox[{"Style", "[", 
               RowBox[{"gaPrimitiveIdempotent", ",", "Bold"}], "]"}], ",", 
              " ", "OutputForm", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<IdempotentFactors\>\"", ",", "\"\<Blades\>\"", ",", 
                "\"\<AllSignatures\>\""}], "}"}], ",", 
              "\"\<IdempotentFactors\>\""}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"GeometricProduct", "@@", "idempotentList"}]}]}], "]"}]}],
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"of", "===", "\"\<AllSignatures\>\""}], ",", 
          RowBox[{"{", "1", "}"}], ",", "1"}], "]"}]}], "\[IndentingNewLine]",
        "]"}]}]}], " ", 
    RowBox[{"(*", 
     RowBox[{"end", " ", "trivial", " ", "case"}], "*)"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[636]:=",ExpressionUUID->"1097e10a-28ac-46c1-9265-70117b5e0929"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Ideals"
}], "Subsection",ExpressionUUID->"3a3abbe5-3902-4336-b5da-2902681c5259"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"7f955be0-4edd-4113-a5e6-96bceb7668ca"],

Cell["\<\
The toRCHFactors factors double side ideal into fields \
\[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \[DoubleStruckCapitalH] \
(not in most general form yet)\
\>", "Text",ExpressionUUID->"9f7c5c94-ac60-4997-be1e-58bb6e38fc3d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "nounit"}], "=", 
   "\"\<The field `1` has no element which plays the role of unit or has more \
than one such element. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "false"}], "=", 
   "\"\<The double sided ideal  `1` does not represent a known field \
\[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \[DoubleStruckCapitalH] or \
complex \[DoubleStruckCapitalH]. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "CommutativeUnit"}], "=", 
   "\"\<The  `1` commutes with all elements of `2`, but does not represent \
imaginary or hyperbolic unit. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "nonseparable"}], "=", 
   "\"\<The double sided ideal part `1`, cannot be further factored into \
direct product of \[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \
\[DoubleStruckCapitalH]. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "NotImplemented"}], "=", 
   "\"\<The double sided ideal `1` can contain more commuting quaternion \
fields, however factorization is not yet implemented. Proceeding without \
identification with known division rings \[DoubleStruckCapitalR], \
\[DoubleStruckCapitalC], \[DoubleStruckCapitalH].\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[637]:=",ExpressionUUID->"c5c128cf-b607-4545-b4a2-b8ea79224d4c"],

Cell["\<\
Remove elements after  some field was found and check if candidates satisfy \
all requirements. The finishing condition is \
\>", "Text",ExpressionUUID->"622a898b-b5e4-4494-8eee-2463f4c1f24d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{
     RowBox[{"{", "factors__List", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"{", "factors", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[642]:=",ExpressionUUID->"fce54413-8de9-4eb3-bcd0-0193015afbb5"],

Cell["If proper candidate was not found leave field as is ", "Text",ExpressionUUID->"a1348cc7-3f8f-45a0-929e-c63d8f27d257"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{
     RowBox[{"{", "factors__List", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", "factors", "}"}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", "#"}], "}"}], "&"}], "/@", 
       RowBox[{"{", "remaining", "}"}]}], ")"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[643]:=",ExpressionUUID->"fc1e8314-e5af-48e0-aaa3-6e5d02f80c37"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{"factors_List", ",", 
     RowBox[{"{", "candidates__", "}"}], ",", 
     RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"found", "=", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "candidates", "}"}]}]}], ",", 
       RowBox[{"confirmed", "=", 
        RowBox[{"First", "/@", "factors"}]}], ",", "allObtained", ",", 
       "productsOfFound", ",", "restElems"}], "}"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "remove", " ", "candidates", " ", "from", " ", "remaining", " ", 
       "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allObtained", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"found", ",", "confirmed"}], "}"}], "]"}]}], ";", 
      RowBox[{"productsOfFound", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Outer", "[", 
           RowBox[{
           "GeometricProduct", ",", "allObtained", ",", "allObtained"}], 
           "]"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"restElems", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", "remaining", "}"}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"Expand", "/@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"allObtained", ",", 
               RowBox[{"-", "allObtained"}], ",", "productsOfFound", ",", 
               RowBox[{"-", "productsOfFound"}]}], "}"}], "]"}]}], ")"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "restElems", " ", "commute", " ", "with", " ",
         "candidates"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"restElems", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Select", "[", 
                RowBox[{"restElems", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"{", "candidates", "}"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], 
                    "\[GeometricProduct]", "#"}], "-", 
                    RowBox[{"#", "\[GeometricProduct]", 
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"{", "candidates", "}"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "]"}], "]"}], "=!=",
                     "0"}], "&"}], ")"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", 
                  RowBox[{"{", "candidates", "}"}], "]"}]}], "}"}]}], "]"}], 
             "]"}], ")"}], "===", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"getRCHFactor", "[", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"factors", ",", 
              RowBox[{"{", "candidates", "}"}]}], "]"}], ",", "restElems", 
            ",", "idempotent"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"toRCHFactors", "::", "nonseparable"}], ",", 
             RowBox[{"{", "remaining", "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"getRCHFactor", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"factors", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "#"}], "}"}], "&"}], "/@", 
                 RowBox[{"{", "remaining", "}"}]}], ")"}]}], "]"}], ",", 
             RowBox[{"{", "}"}], ",", "idempotent"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"if", " ", "restElemens", " ", "emty"}], ",", " ", 
          RowBox[{"all", " ", "finished"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"getRCHFactor", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", "candidates", "}"}]}], "]"}], ",", "restElems", ",", 
          "idempotent"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[644]:=",ExpressionUUID->"eef13236-ee54-441a-aed0-2a91d14eb097"],

Cell["\<\
Start by looking for unity, then for imaginary unity, then for hyperbolic \
unity and lastly for quaternion units\
\>", "Text",ExpressionUUID->"cfbeb5c6-3cae-455f-bd53-56b06eb6c0ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getRCHFactor", "[", 
    RowBox[{"fin_List", ",", 
     RowBox[{"{", "}"}], ",", "_"}], "]"}], ":=", "fin"}], ";"}]], "Input",
 CellLabel->
  "In[645]:=",ExpressionUUID->"d22e8443-b5f0-4761-aa0a-f4708e768ab8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"getRCHFactor", "[", 
      RowBox[{"factors_List", ",", 
       RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "candidateForUnit", ",", "productsOfFound", ",", 
         "commutingWithAllPos", ",", "commutingWithAll", ",", 
         "imaginaryUnits", ",", "hyperbolicUnits", ",", 
         "nonCommutingQuaternionLike", ",", "nonCommutingWithFirstList", ",", 
         "quaternionUnits", ",", "commutingWith3Pos", ",", "qu"}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"Which", "[", 
        RowBox[{"(*", " ", 
         RowBox[{
         "first", " ", "try", " ", "to", " ", "find", " ", "element", " ", 
          "with", " ", "unity", " ", "role"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"candidateForUnit", "=", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", 
                 RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===",
                "#"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "candidateForUnit", "]"}], "=!=", "0"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"cleanRCHList", "[", 
          RowBox[{"factors", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"candidateForUnit", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "1"}], "}"}], "}"}], ",", 
           
           RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "try", " ", "to", " ", "find", " ", "positive", " ", 
           "commuting", " ", "which", " ", "squares", " ", "to", " ", "found",
            " ", "unity"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"commutingWithAllPos", "=", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"Outer", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#1", "\[GeometricProduct]", "#2"}], "-", 
                    RowBox[{"#2", "\[GeometricProduct]", "#1"}]}], ")"}], 
                  "]"}], "]"}], "&"}], ",", 
               RowBox[{"{", "remaining", "}"}], ",", 
               RowBox[{"{", "remaining", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ".."}], "}"}]}], "]"}]}], ";", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "commutingWithAllPos", "]"}], "=!=", "0"}],
            ")"}]}], ",", 
         RowBox[{
          RowBox[{"commutingWithAll", "=", 
           RowBox[{"Extract", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", "commutingWithAllPos"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"imaginaryUnits", "=", 
                RowBox[{"Select", "[", 
                 RowBox[{"commutingWithAll", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===", 
                    RowBox[{"-", "idempotent"}]}], ")"}], "&"}]}], "]"}]}], 
               ")"}], ",", 
              RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"cleanRCHList", "[", 
             RowBox[{"factors", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"imaginaryUnits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "I"}], "}"}], "}"}], 
              ",", 
              RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"hyperbolicUnits", "=", 
                  RowBox[{"Select", "[", 
                   RowBox[{"commutingWithAll", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===",
                     "idempotent"}], ")"}], "&"}]}], "]"}]}], ")"}], ",", 
                RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"cleanRCHList", "[", 
               RowBox[{"factors", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"hyperbolicUnits", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "HyperbolicUnit"}], 
                  "}"}], "}"}], ",", 
                RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], 
              ",", " ", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"toRCHFactors", "::", "CommutativeUnit"}], ",", 
                 "commutingWithAll", ",", 
                 RowBox[{"{", "remaining", "}"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ",", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "try", " ", "to", " ", "find", " ", "quaternion", " ", 
           "system"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"nonCommutingQuaternionLike", "=", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===", 
                RowBox[{"-", "idempotent"}]}], ")"}], "&"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "nonCommutingQuaternionLike", "]"}], 
            "\[GreaterEqual]", "3"}], ")"}]}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"nonCommutingWithFirstList", "=", 
               RowBox[{"Select", "[", 
                RowBox[{"nonCommutingQuaternionLike", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[GeometricProduct]", 
                    "#"}], "-", 
                    RowBox[{"#", "\[GeometricProduct]", 
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], "]"}], "=!=", 
                    "0"}], ")"}], "&"}]}], "]"}]}], ",", 
              RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"quaternionUnits", "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"nonCommutingQuaternionLike", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"nonCommutingWithFirstList", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"nonCommutingWithFirstList", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "]"}]}], 
               "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"qu", "=", 
           RowBox[{"Unique", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"cleanRCHList", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}]}], "}"}], 
            ",", 
            RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}]}], 
         "\[IndentingNewLine]", ",", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "if", " ", "quaternion", " ", "candidates", " ", "not", " ", 
           "found", " ", "leave", " ", "as", " ", "is"}], "*)"}], 
         "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"toRCHFactors", "::", "nonseparable"}], ",", 
            RowBox[{"{", "remaining", "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"cleanRCHList", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[646]:=",ExpressionUUID->"c494daba-d1ca-41e9-bd03-0e1b250c38fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeReplRule", "[", 
    RowBox[{"{", 
     RowBox[{"field_", ",", "value_"}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"factors", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Internal`SyntacticNegativeQ", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "[", 
        RowBox[{"FactorTermsList", "[", "field", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"field", ",", 
       RowBox[{"Rule", "[", 
        RowBox[{
         RowBox[{"factors", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"factors", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "*", "value"}]}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[647]:=",ExpressionUUID->"55730541-4165-4dc0-9be5-83864a153d7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"semisimpleClAlgebraQ", "[", 
    RowBox[{"alg_Cl", ",", 
     RowBox[{"theDomain", ":", 
      RowBox[{"(", 
       RowBox[{"Reals", "|", "Complexes"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{"theDomain", ",", "Reals", ",", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "-", 
          RowBox[{"2", 
           RowBox[{"Length", "[", 
            RowBox[{"gaNegativeSignatureIndexList", "[", "alg", "]"}], 
            "]"}]}]}], ")"}], ",", "4"}], "]"}], "===", "1"}], " ", ",", 
     "Complexes", ",", 
     RowBox[{"OddQ", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[648]:=",ExpressionUUID->"b3e532d1-2d13-4932-9d9d-6f5b59bf635f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sameTestForUnion", "[", "Reals", "]"}], "=", 
   RowBox[{"Hold", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", "#2"}], "]"}], "===", "0"}], ")"}]}], "&"}], 
     ")"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sameTestForUnion", "[", "Complexes", "]"}], "=", 
   RowBox[{"Hold", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", 
           RowBox[{"I", "*", "#2"}]}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", 
           RowBox[{"I", "*", "#2"}]}], "]"}], "===", "0"}], ")"}]}], "&"}], 
     ")"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coefficientFreedom", "[", "Reals", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coefficientFreedom", "[", "Complexes", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "I", ",", 
     RowBox[{"-", "I"}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[649]:=",ExpressionUUID->"07e42029-8425-4d9c-a50e-eec83346d934"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left ideal "
}], "Subsubsection",ExpressionUUID->"72150ce5-87ae-4aa2-a8d3-dccee38e5126"],

Cell[TextData[{
 "Function ",
 StyleBox["gaLeftIdeal[al_Cl,idempotent, order, opts] ",
  FontWeight->"Bold"],
 " returns left ideal of algebra generated using the given idempotent. "
}], "Text",ExpressionUUID->"a3025936-6284-43e5-9d45-9672198d3380"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], "=", 
   "\"\<The algebra `1` is not simple. Only one instance of left ideal is \
generated.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "::", "BasisNotDefined"}], "=", 
   "\"\<The basis `1` is not not defined. Define using `2`.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[653]:=",ExpressionUUID->"6c7c9df7-3c4d-4c07-a925-e1aa17d74f58"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLeftIdeal", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaLeftIdeal", "[", 
   RowBox[{"idempotent_", ",", 
    RowBox[{"order", ":", 
     RowBox[{"(", 
      RowBox[{
      "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
       "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
       "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
       "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
       "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
       "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alg", "=", 
        RowBox[{"First", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"idempotent", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}],
        ",", 
       RowBox[{"(", 
        RowBox[{"quiet", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaLeftIdeal", "]"}]}]}], ")"}], ",", 
       RowBox[{"theDomain", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaLeftIdeal", ",", "CoefficientDomain"}], "]"}]}], 
         ")"}]}], ",", "rawAnswer", ",", "answer", ",", "theIdealBoxes", ",", 
       "semisimpleQ"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"semisimpleQ", "=", 
       RowBox[{"semisimpleClAlgebraQ", "[", 
        RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"semisimpleQ", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], ",", "alg"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Warn", " ", "when", " ", "idempotent", " ", "contains", " ", 
        "complex", " ", "number", " ", "and", " ", "CoefficientDomain", " ", 
        "is", " ", "set", " ", "to", " ", "Reals"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"theDomain", "===", "Reals"}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"idempotent", ",", "_Complex"}], "]"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Style", "[", 
                 RowBox[{
                 "\"\<Warning! gaIdempotent and gaLeftIdeal are has diffrent \
setting for CoefficientDomain! Hope you know what you are doing.\>\"", " ", 
                  ",", "Red"}], "]"}], "]"}], "}"}], "]"}], "}"}], "]"}], 
           "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "orthonormal", " ", "basis", " ", "of", " ", "required", 
         " ", "ordering", " ", "is", " ", "not", " ", "defined"}], ",", " ", 
        RowBox[{"then", " ", "define"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alg", ",", "order", ",", "All"}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"alg", ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "order"}], ",", 
          
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rawAnswer", "=", 
       RowBox[{"Union", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"gaPE", "[", 
             RowBox[{"(", 
              RowBox[{"#", "\[GeometricProduct]", "idempotent"}], ")"}], 
             "]"}], "&"}], "/@", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"alg", ",", "order", ",", "All"}], "]"}]}], ")"}], ",", 
         RowBox[{"SameTest", "\[Rule]", 
          RowBox[{"ReleaseHold", "[", 
           RowBox[{"sameTestForUnion", "[", "theDomain", "]"}], "]"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "complex", " ", "algebras", " ", "make", " ", "scalar", 
        " ", "part", " ", "real"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theDomain", "===", "Complexes"}], ",", 
        RowBox[{"rawAnswer", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", "#", "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "===", "Complex"}], 
             ",", 
             RowBox[{"Expand", "[", 
              RowBox[{
               RowBox[{"(", "I", ")"}], "*", "#"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "rawAnswer"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "make", " ", "scalar", " ", "part", " ", "positive", " ", "an", " ", 
        "sort"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"gaSort", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Internal`SyntacticNegativeQ", "[", 
              RowBox[{"Expand", "[", "#", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], "&"}], "/@",
           "rawAnswer"}], ",", "order"}], "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", "\"\<The left ideal sorted by \>\"", "]"}],
                   ",", 
                  RowBox[{"ExpressionCell", "[", "order", "]"}], ",", 
                  RowBox[{"TextCell", "[", "\"\< order is\>\"", "]"}]}], 
                 "}"}], "]"}], ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{"ExpressionCell", "[", "answer", "]"}], "}"}], 
                "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "answer"}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"idempotent", "=!=", "1"}]}]}]}], "Input",
 CellLabel->
  "In[655]:=",ExpressionUUID->"db23dc80-a7f9-4bfb-88f8-2da668610973"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"gaRunningAlgebra", ",", "order", ",", "All"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[657]:=",ExpressionUUID->"9ccab754-5c14-490c-af12-d97668f0c73f"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Double sided (bilateral) ideal"
}], "Subsubsection",ExpressionUUID->"96041e09-1730-4586-a599-a2b3e68ceeda"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDoubleSidedIdeal", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<ElementsOnly\>\""}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[658]:=",ExpressionUUID->"2132d6b2-c08d-4339-82a2-a15e76083af0"],

Cell["\<\
Output form \[OpenCurlyDoubleQuote]ElementsReplacementRules\
\[CloseCurlyDoubleQuote] is used for computation of ideal basis, all other \
forms being for investigation\
\>", "Text",ExpressionUUID->"d4b0fd2f-3f55-4121-a87b-e462b32139de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDoubleSidedIdeal", "[", 
   RowBox[{
    RowBox[{"idempotent_", "?", "gaIdempotentQ"}], ",", "leftideal_List", ",", 
    RowBox[{"order", ":", 
     RowBox[{"(", 
      RowBox[{
      "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
       "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
       "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
       "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
       "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
       "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"alg", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"leftideal", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
      ",", "theFieldAndName", ",", "half1", ",", "theSortedField", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", "gaDoubleSidedIdeal", "]"}]}]}], ")"}], ",", 
      
      RowBox[{"theDomain", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"CoefficientDomain", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaDoubleSidedIdeal", ",", "CoefficientDomain"}], "]"}]}], 
        ")"}]}], ",", 
      RowBox[{"of", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"OutputForm", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaDoubleSidedIdeal", ",", "OutputForm"}], "]"}]}], ")"}]}],
       ",", "rawAnswer", ",", "answer"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"rawAnswer", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"idempotent", "\[GeometricProduct]", "#"}], "]"}], 
             "&"}], "/@", "leftideal"}], ")"}], ",", 
          RowBox[{"SameTest", "\[Rule]", 
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"sameTestForUnion", "[", "theDomain", "]"}], "]"}]}]}], 
         "]"}], ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "for", " ", "complex", " ", "algebras", " ", "make", " ", "scalar", " ",
        "part", " ", "real"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"theDomain", "===", "Complexes"}], ",", 
       RowBox[{"rawAnswer", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{
                RowBox[{"Expand", "[", "#", "]"}], ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "===", "Complex"}], 
            ",", 
            RowBox[{"Expand", "[", 
             RowBox[{
              RowBox[{"(", "I", ")"}], "*", "#"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "rawAnswer"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "make", " ", "scalar", " ", "part", " ", "positive", " ", "an", " ", 
       "sort"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"theSortedField", "=", 
      RowBox[{"gaSort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Internal`SyntacticNegativeQ", "[", 
             RowBox[{"Expand", "[", "#", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], "&"}], "/@",
          "rawAnswer"}], ",", "order"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "TextCell", "[", "\"\<The double sided ideal sorted by \>\"",
                   "]"}], ",", 
                 RowBox[{"ExpressionCell", "[", "order", "]"}], ",", 
                 RowBox[{"TextCell", "[", "\"\< order is\>\"", "]"}]}], "}"}],
                "]"}], ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"ExpressionCell", "[", "theSortedField", "]"}], "}"}],
                "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", "interpretation", " ", "was", " ", "requested"}], 
       ",", " ", 
       RowBox[{"do", " ", "aaditional", " ", "job"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"of", "=!=", "\"\<ElementsOnly\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theFieldAndName", "=", 
         RowBox[{"getRCHFactor", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"Expand", "/@", "theSortedField"}], ",", " ", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "idempotent", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"half1", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Outer", "[", 
                 RowBox[{"GeometricProduct", ",", "#", ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Transpose", "[", 
                RowBox[{"(", 
                 RowBox[{"theFieldAndName", "/.", 
                  RowBox[{"{", 
                   RowBox[{"HyperbolicUnit", "\[Rule]", "1"}], "}"}]}], ")"}],
                 "]"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{"Transpose", "[", 
          RowBox[{"(", 
           RowBox[{"makeReplRule", "/@", 
            RowBox[{"(", 
             RowBox[{"Union", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Internal`SyntacticNegativeQ", "[", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Transpose", "[", "half1", "]"}]}], "]"}], ")"}]}], 
           ")"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"make", " ", "requested", " ", "answer", " ", "form"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "of", ",", "\[IndentingNewLine]", "\"\<ElementsOnly\>\"", ",", 
       "theSortedField", ",", "\[IndentingNewLine]", 
       "\"\<ElementsWithInterpretation\>\"", ",", 
       RowBox[{"UndirectedEdge", "@@@", "theFieldAndName"}], ",", 
       "\[IndentingNewLine]", "\"\<ElementsReplacementRules\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Ordering", " ", "in", " ", "answer", " ", "and", " ", 
          "theSortedField", " ", 
          RowBox[{
           RowBox[{"differ", "!!"}], "!"}], " ", "In", " ", "answer", " ", 
          "they", " ", "are", " ", "ordered", " ", "by", " ", 
          RowBox[{"meaning", ":", " ", "scalar"}]}], ",", " ", "imaginary", 
         ",", " ", "Q"}], " ", "*)"}], "\[IndentingNewLine]", "answer", ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", 
          RowBox[{"gaDoubleSidedIdeal", "::", "option"}], ",", " ", 
          "OutputForm", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<ElementsOnly\>\"", ",", "\"\<ElementsWithInterpretation\>\"", 
            ",", "\"\<ElementsReplacementRules\>\""}], "}"}], ",", 
          "\"\<ElementsOnly\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        "theSortedField"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[659]:=",ExpressionUUID->"a53f6062-30fe-437d-b029-bac818bfe878"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left ideal basis"
}], "Subsubsection",ExpressionUUID->"cc1c688a-a953-4ad1-8c00-207a00d3d390"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], "=", 
   "\"\<The algebra `1` is not simple. Only one instance of left ideal basis \
is generated.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[660]:=",ExpressionUUID->"d8204356-31ec-41bf-85a3-329d71af5919"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "[", 
    RowBox[{"leftIdeal_", ",", "fieldOnly_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"alg", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"fieldOnly", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}],
         ",", "semisimpleQ", ",", "theLeftMinimaIdealBasisA", ",", 
        RowBox[{"(", 
         RowBox[{"quiet", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}]}]}], ")"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"theDomain", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"CoefficientDomain", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaLeftIdealBasis", ",", "CoefficientDomain"}], "]"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"semisimpleQ", "=", 
        RowBox[{"semisimpleClAlgebraQ", "[", 
         RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"semisimpleQ", ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], ",", "alg"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"theLeftMinimaIdealBasisA", "=", 
        RowBox[{"gaSort", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"leftIdeal", ",", 
            RowBox[{"SameTest", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Expand", "/@", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{
                    RowBox[{"coefficientFreedom", "[", "theDomain", "]"}], 
                    "*", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "x"}], "]"}], "]"}]}]}], "]"}], "/@", 
                    RowBox[{"(", "fieldOnly", ")"}]}], "]"}]}], ")"}], ",", 
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#2", "]"}], "]"}]}], "]"}], "&"}], 
              ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", "order"}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<The left minimal ideal basis sorted by \>\"", "]"}], 
                  ",", 
                  RowBox[{"ExpressionCell", "[", "order", "]"}], ",", 
                  RowBox[{"TextCell", "[", "\"\< order is\>\"", "]"}]}], 
                 "}"}], "]"}], ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "ExpressionCell", "[", "theLeftMinimaIdealBasisA", "]"}], 
                 "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "theLeftMinimaIdealBasisA"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"leftIdeal", "=!=", "fieldOnly"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[662]:=",ExpressionUUID->"4515f70e-fd90-4284-90ae-48aaaefc5f59"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "[", 
    RowBox[{"leftIdeal_", ",", "fieldOnly_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"(", 
        RowBox[{"quiet", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}]}]}], ")"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "TextCell", "[", "\"\<The left minimal ideal basis is \>\"", 
                  "]"}], "}"}], "]"}], ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{"ExpressionCell", "[", 
                  RowBox[{"{", "1", "}"}], "]"}], "}"}], "]"}]}], "}"}], 
             "]"}], "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "1", "}"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"leftIdeal", "===", "fieldOnly"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[663]:=",ExpressionUUID->"0bc372bd-4879-41a1-9608-420aebbe9d76"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Spinors"
}], "Subsection",ExpressionUUID->"9da2536e-5255-40c8-9d5f-6c80a71c9ba9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSpinor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaPrimitiveIdempotent", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"StartingElement", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}]}], 
       "}"}]}], ",", 
     RowBox[{
     "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "\[Rule]", 
      
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"gaSpinorIdempotent", "\[Rule]", "1"}], ",", 
     RowBox[{"GeneratedParameters", "\[Rule]", "C"}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "->", "\"\<RevLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "\[Rule]", 
      "\"\<InvLex\>\""}], ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[664]:=",ExpressionUUID->"51869ead-39dc-4326-b16e-f284363edc72"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSpinor", "::", "idempotent"}], "=", 
   "\"\<Provided idempotents `1` do not pass gaIdempotendQ[] test.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[665]:=",ExpressionUUID->"18de30f7-f9bc-4e58-899b-c25a70d6e576"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSpinor", "[", 
   RowBox[{"alg_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "gaSpinor", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"precomputedInput", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "]"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"OptionValue", "[", "gaPrimitiveIdempotent", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"spinorIdempotent", "=", 
       RowBox[{"OptionValue", "[", "gaSpinorIdempotent", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"coefficientName", "=", 
       RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theDomain", "=", 
       RowBox[{"OptionValue", "[", "CoefficientDomain", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theOrderA", "=", 
       RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"theOrderB", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "]"}]}], 
      ",", "mutuallyAnihilatingIdempotentsFull", ",", "\[IndentingNewLine]", 
      "mutuallyAnihilatingIdempotents", ",", "theIdempotent", ",", 
      "leftIdeal", ",", "divisionRing", ",", "idealBasis", ",", 
      "lengthOfIdealBasis", ",", "lengthOfDivisionRing", ",", "spinorCoeffs", 
      ",", "divisionRingWithReplacementRules", ",", "matrixRepr", ",", 
      "divisionRingPrecomp", ",", "lengthOfMutuallyAnihilatingIdempotents", 
      ",", "semisimpleQ"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "determine", " ", "if", " ", "precomputed", " ", "structure", " ", "is",
        " ", "provided"}], ",", " ", 
      RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", 
       RowBox[{"CellPrint", "[", 
        RowBox[{"{", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "TextCell", "[", 
                "\"\<Idempotents are determined using settings \>\"", "]"}], 
               ",", 
               RowBox[{"ExpressionCell", "[", "theIdempotentSetting", "]"}]}],
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"precomputedInput", "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"theIdempotentSetting", ",", 
            RowBox[{"Automatic", "|", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "__"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mutuallyAnihilatingIdempotentsFull", "=", 
            RowBox[{"gaPrimitiveIdempotent", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"alg", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"DeleteDuplicatesBy", "[", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "OutputForm", "\[Rule]", "\"\<AllSignatures\>\""}], ",", 
                    "theIdempotentSetting", ",", 
                    RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
                    RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"gaPrimitiveIdempotent", "/.", 
                    RowBox[{
                    "Options", "[", 
                    "defineMatrixRepresentationIdealBasisMethod", "]"}]}], 
                    ")"}]}], "}"}], "]"}], ",", "Automatic"}], "]"}], ",", 
                   "First"}], "]"}], ")"}]}], "}"}], "]"}]}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{"theIdempotentSetting", ",", "gaIdempotentQ"}], "]"}], 
             ",", 
             RowBox[{
             "mutuallyAnihilatingIdempotents", "=", "theIdempotentSetting"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSpinor", "::", "idempotent"}], ",", 
                "theIdempotentSetting"}], "]"}], ";", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"mutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Pick", "[", 
          RowBox[{"mutuallyAnihilatingIdempotentsFull", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"PossibleZeroQ", "[", "#", "]"}], "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"gaPE", "/@", "mutuallyAnihilatingIdempotentsFull"}], 
             ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "TextCell", "[", "\"\<The primitive idempotent is \>\"", 
                    "]"}], "}"}], "]"}], ",", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "ExpressionCell", "[", "mutuallyAnihilatingIdempotents", 
                    "]"}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "mutuallyAnihilatingIdempotents"}], 
         ")"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "all", " ", "left", " ", "ideals"}], "   ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Starting computation of all left ideals, which \
correspond to idempotents \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "}"}], "]"}], 
             "]"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"leftIdeal", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaLeftIdeal", "[", 
              RowBox[{"#", ",", "theOrderA", ",", 
               RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], "&"}], "/@", 
            "mutuallyAnihilatingIdempotents"}], ")"}]}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "the", " ", "all", " ", "double", " ", "sided", " ", "ideals"}], 
         "  ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Starting computation of all double sided ideals, \
which correspond to idempotents \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "}"}], "]"}], 
             "]"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], "=", 
            RowBox[{
             RowBox[{"gaDoubleSidedIdeal", "[", 
              RowBox[{
               RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
               RowBox[{"leftIdeal", "[", "d", "]"}], ",", "theOrderA", ",", 
               RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
               RowBox[{
               "OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}], 
              "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
            "}"}]}], "]"}], ")"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", 
          RowBox[{"basis", ":", " ", 
           RowBox[{"only", " ", "one", " ", "needed"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", 
                    "\"\<Starting computation of ideal basis, which \
correspond the requested idempotent gaSpinorIdempotent\[Rule]\>\"", "]"}], 
                   ",", 
                   RowBox[{"ExpressionCell", "[", "spinorIdempotent", "]"}]}],
                   "}"}], "]"}], ",", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"TextCell", "[", "\"\<which is \>\"", "]"}], ",", 
                   RowBox[{"ExpressionCell", "[", 
                    RowBox[{"theIdempotent", "[", "spinorIdempotent", "]"}], 
                    "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"spinorIdempotent", ">", 
             RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}],
             ")"}], "||", 
           RowBox[{"spinorIdempotent", "<", "1"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaOptionValue", "::", "option"}], ",", "gaSpinor", ",", 
             " ", "gaSpinorIdempotent", ",", 
             RowBox[{
             "Range", "[", "lengthOfMutuallyAnihilatingIdempotents", "]"}], 
             ",", "1"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"spinorIdempotent", "=", "1"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
          "\[IndentingNewLine]", 
          RowBox[{"gaLeftIdealBasis", "[", 
           RowBox[{
            RowBox[{"leftIdeal", "[", "spinorIdempotent", "]"}], ",", 
            RowBox[{"divisionRing", "[", "spinorIdempotent", "]"}], ",", 
            "theOrderA", ",", 
            RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
            RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ")"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"precomputed", " ", 
          RowBox[{"input", ":", " ", 
           RowBox[{"no", " ", "checks"}]}]}], ",", " ", 
         RowBox[{"we", " ", "trust", " ", "the", " ", "user"}]}], " ", "*)"}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"TextCell", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Warning! Option \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals with user input is \
found in gaSpinor. No check! Most options will be ignored!\>\"", " ", ",", 
                    "Red"}], "]"}], "]"}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"ExpressionCell", "[", "precomputedInput", "]"}], 
                  "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"spinorIdempotent", "=", 
         RowBox[{"precomputedInput", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"precomputedInput", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"divisionRingPrecomp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Evaluate", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"d", ",", 
              RowBox[{"Length", "[", "divisionRingPrecomp", "]"}]}], "}"}]}], 
           "]"}], "]"}], "=", "divisionRingPrecomp"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "in", " ", "semisimple", " ", "real", " ", "algebra", " ", "case", " ", 
       "we", " ", "enlarge", " ", "ideal", " ", "basis", " ", "by", " ", 
       "grade", " ", "inverted", " ", "part"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"semisimpleQ", "&&", 
        RowBox[{"(", 
         RowBox[{"theDomain", "===", "Reals"}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], ",", 
          "alg"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}]}]}], "}"}], 
          "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lengthOfDivisionRing", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"divisionRing", "[", "1", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"name", " ", "free", " ", "coefficients"}], ",", " ", 
       RowBox[{
       "which", " ", "will", " ", "appear", " ", "in", " ", "final", " ", 
        "spinor", " ", "expression"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"spinorCoeffs", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"coefficientName", "[", "i", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"lengthOfIdealBasis", "*", "lengthOfDivisionRing"}]}], 
           "}"}]}], "]"}], ",", "lengthOfDivisionRing"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", 
       RowBox[{"CellPrint", "[", 
        RowBox[{"{", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<The general column spinor free coefficients are named \
SpinorCoefficientName\[Rule]\>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "coefficientName", "]"}]}], 
               "}"}], "]"}], ",", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"TextCell", "[", "\"\<which are \>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "spinorCoeffs", "]"}]}], "}"}],
               "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"spinorCoeffs", "[", 
            RowBox[{"[", "u", "]"}], "]"}], "[", 
           RowBox[{"[", "k", "]"}], "]"}], "*", 
          RowBox[{"gaPE", "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"divisionRing", "[", "d", "]"}], "[", 
               RowBox[{"[", "k", "]"}], "]"}], ")"}], "\[GeometricProduct]", 
             RowBox[{
              RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "[", 
              RowBox[{"[", "u", "]"}], "]"}]}], ")"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"divisionRing", "[", "spinorIdempotent", "]"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"u", ",", "lengthOfIdealBasis"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
          "}"}]}], "]"}], ",", 
       RowBox[{"Flatten", "[", "spinorCoeffs", "]"}], ",", "Factor"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[666]:=",ExpressionUUID->"0e8a08fa-b6e2-47b2-9ddc-c88669648bb5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSpinorHalf", "[", 
   RowBox[{"alg_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "gaSpinor", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"precomputedInput", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "]"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"OptionValue", "[", "gaPrimitiveIdempotent", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"spinorIdempotent", "=", 
       RowBox[{"OptionValue", "[", "gaSpinorIdempotent", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"coefficientName", "=", 
       RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theDomain", "=", 
       RowBox[{"OptionValue", "[", "CoefficientDomain", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theOrderA", "=", 
       RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"theOrderB", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "]"}]}], 
      ",", "mutuallyAnihilatingIdempotentsFull", ",", "\[IndentingNewLine]", 
      "mutuallyAnihilatingIdempotents", ",", "theIdempotent", ",", 
      "leftIdeal", ",", "divisionRing", ",", "idealBasis", ",", 
      "lengthOfIdealBasis", ",", "lengthOfDivisionRing", ",", "spinorCoeffs", 
      ",", "divisionRingWithReplacementRules", ",", "matrixRepr", ",", 
      "divisionRingPrecomp", ",", "lengthOfMutuallyAnihilatingIdempotents", 
      ",", "semisimpleQ"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "determine", " ", "if", " ", "precomputed", " ", "structure", " ", "is",
        " ", "provided"}], ",", " ", 
      RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", 
       RowBox[{"CellPrint", "[", 
        RowBox[{"{", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "TextCell", "[", 
                "\"\<Idempotents are determined using settings \>\"", "]"}], 
               ",", 
               RowBox[{"ExpressionCell", "[", "theIdempotentSetting", "]"}]}],
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"precomputedInput", "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"theIdempotentSetting", ",", 
            RowBox[{"Automatic", "|", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "__"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mutuallyAnihilatingIdempotentsFull", "=", 
            RowBox[{"gaPrimitiveIdempotent", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"alg", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"DeleteDuplicatesBy", "[", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "OutputForm", "\[Rule]", "\"\<AllSignatures\>\""}], ",", 
                    "theIdempotentSetting", ",", 
                    RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
                    RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"gaPrimitiveIdempotent", "/.", 
                    RowBox[{
                    "Options", "[", 
                    "defineMatrixRepresentationIdealBasisMethod", "]"}]}], 
                    ")"}]}], "}"}], "]"}], ",", "Automatic"}], "]"}], ",", 
                   "First"}], "]"}], ")"}]}], "}"}], "]"}]}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{"theIdempotentSetting", ",", "gaIdempotentQ"}], "]"}], 
             ",", 
             RowBox[{
             "mutuallyAnihilatingIdempotents", "=", "theIdempotentSetting"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSpinor", "::", "idempotent"}], ",", 
                "theIdempotentSetting"}], "]"}], ";", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"mutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Pick", "[", 
          RowBox[{"mutuallyAnihilatingIdempotentsFull", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"PossibleZeroQ", "[", "#", "]"}], "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"gaPE", "/@", "mutuallyAnihilatingIdempotentsFull"}], 
             ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "TextCell", "[", "\"\<The primitive idempotent is \>\"", 
                    "]"}], "}"}], "]"}], ",", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "ExpressionCell", "[", "mutuallyAnihilatingIdempotents", 
                    "]"}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "mutuallyAnihilatingIdempotents"}], 
         ")"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "all", " ", "left", " ", "ideals"}], "   ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Starting computation of all left ideals, which \
correspond to idempotents \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "}"}], "]"}], 
             "]"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"leftIdeal", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaLeftIdeal", "[", 
              RowBox[{"#", ",", "theOrderA", ",", 
               RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], "&"}], "/@", 
            "mutuallyAnihilatingIdempotents"}], ")"}]}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "the", " ", "all", " ", "double", " ", "sided", " ", "ideals"}], 
         "  ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Starting computation of all double sided ideals, \
which correspond to idempotents \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "}"}], "]"}], 
             "]"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], "=", 
            RowBox[{
             RowBox[{"gaDoubleSidedIdeal", "[", 
              RowBox[{
               RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
               RowBox[{"leftIdeal", "[", "d", "]"}], ",", "theOrderA", ",", 
               RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
               RowBox[{
               "OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}], 
              "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
            "}"}]}], "]"}], ")"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", 
          RowBox[{"basis", ":", " ", 
           RowBox[{"only", " ", "one", " ", "needed"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", 
                    "\"\<Starting computation of ideal basis, which \
correspond the requested idempotent gaSpinorIdempotent\[Rule]\>\"", "]"}], 
                   ",", 
                   RowBox[{"ExpressionCell", "[", "spinorIdempotent", "]"}]}],
                   "}"}], "]"}], ",", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"TextCell", "[", "\"\<which is \>\"", "]"}], ",", 
                   RowBox[{"ExpressionCell", "[", 
                    RowBox[{"theIdempotent", "[", "spinorIdempotent", "]"}], 
                    "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"spinorIdempotent", ">", 
             RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}],
             ")"}], "||", 
           RowBox[{"spinorIdempotent", "<", "1"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaOptionValue", "::", "option"}], ",", "gaSpinor", ",", 
             " ", "gaSpinorIdempotent", ",", 
             RowBox[{
             "Range", "[", "lengthOfMutuallyAnihilatingIdempotents", "]"}], 
             ",", "1"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"spinorIdempotent", "=", "1"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
          "\[IndentingNewLine]", 
          RowBox[{"gaLeftIdealBasis", "[", 
           RowBox[{
            RowBox[{"leftIdeal", "[", "spinorIdempotent", "]"}], ",", 
            RowBox[{"divisionRing", "[", "spinorIdempotent", "]"}], ",", 
            "theOrderA", ",", 
            RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
            RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ")"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"precomputed", " ", 
          RowBox[{"input", ":", " ", 
           RowBox[{"no", " ", "checks"}]}]}], ",", " ", 
         RowBox[{"we", " ", "trust", " ", "the", " ", "user"}]}], " ", "*)"}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"TextCell", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Warning! Option \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals with user input is \
found in gaSpinor. No check! Most options will be ignored!\>\"", " ", ",", 
                    "Red"}], "]"}], "]"}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"ExpressionCell", "[", "precomputedInput", "]"}], 
                  "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"spinorIdempotent", "=", 
         RowBox[{"precomputedInput", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"precomputedInput", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"divisionRingPrecomp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Evaluate", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"d", ",", 
              RowBox[{"Length", "[", "divisionRingPrecomp", "]"}]}], "}"}]}], 
           "]"}], "]"}], "=", "divisionRingPrecomp"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "in", " ", "semisimple", " ", "real", " ", "algebra", " ", "case", " ", 
       "we", " ", "enlarge", " ", "ideal", " ", "basis", " ", "by", " ", 
       "grade", " ", "inverted", " ", "part"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"semisimpleQ", "&&", 
        RowBox[{"(", 
         RowBox[{"theDomain", "===", "Reals"}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], ",", 
          "alg"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}]}]}], "}"}], 
          "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"gaGradeInverse", "[", "#", "]"}], "&"}], "/@", 
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}]}]}], "}"}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lengthOfDivisionRing", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"divisionRing", "[", "1", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"name", " ", "free", " ", "coefficients"}], ",", " ", 
       RowBox[{
       "which", " ", "will", " ", "appear", " ", "in", " ", "final", " ", 
        "spinor", " ", "expression"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"spinorCoeffs", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"coefficientName", "[", "i", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"lengthOfIdealBasis", "*", "lengthOfDivisionRing"}]}], 
           "}"}]}], "]"}], ",", "lengthOfDivisionRing"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", 
       RowBox[{"CellPrint", "[", 
        RowBox[{"{", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<The general column spinor free coefficients are named \
SpinorCoefficientName\[Rule]\>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "coefficientName", "]"}]}], 
               "}"}], "]"}], ",", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"TextCell", "[", "\"\<which are \>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "spinorCoeffs", "]"}]}], "}"}],
               "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"spinorCoeffs", "[", 
            RowBox[{"[", "u", "]"}], "]"}], "[", 
           RowBox[{"[", "k", "]"}], "]"}], "*", 
          RowBox[{"gaPE", "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"divisionRing", "[", "d", "]"}], "[", 
               RowBox[{"[", "k", "]"}], "]"}], ")"}], "\[GeometricProduct]", 
             RowBox[{
              RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "[", 
              RowBox[{"[", "u", "]"}], "]"}]}], ")"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"divisionRing", "[", "spinorIdempotent", "]"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"u", ",", "lengthOfIdealBasis"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
          "}"}]}], "]"}], ",", 
       RowBox[{"Flatten", "[", "spinorCoeffs", "]"}], ",", "Factor"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[667]:=",ExpressionUUID->"451122a3-ea7f-4eb2-afd0-97576bbb0b4d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[668]:=",ExpressionUUID->"96bf7a12-2465-47ed-a4c0-1ee77155c9c0"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Tensor products and matrix representation of algebra"
}], "Section",ExpressionUUID->"1a5eceee-b69b-4f22-96c7-8e73e72a41a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTensorProduct", ",", "gaAlgebraMultiplicationTable", ",", 
     "gaToTensorProduct", ",", "gaFromTensorProduct", ",", 
     "gaDefineMatrixRepresentation", ",", "ReductionOrder", ",", 
     "gaMatrixRepresentation", ",", "gaToMatrixRepresentation", ",", 
     "gaFromMatrixRepresentation", ",", 
     "gaListDefinedElementaryRepresentations", ",", "BasisVectorsMultipliers",
      ",", "BasisVectorsReordering", ",", "BaseVectorAlgebra", ",", 
     "TargetMatrices", ",", "QuaternionIsomorphismRules", ",", 
     "MatrixOuterProductOrder", ",", "ElementaryRepresentations", ",", 
     "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", 
     ",", "gaSemisimpleAlgebraExtension", ",", "gaReplaceDivisionRing", ",", 
     "gaIdealBasisReordering", ",", "gaIdealBasisMultipliers"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[669]:=",ExpressionUUID->"94c59a73-0d0a-4e85-9324-d6b5a0a0358c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[670]:=",ExpressionUUID->"b3f75340-83d6-4f56-84d9-1dce12ac7c2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "::", "usage"}], "=", 
   "\"\<gaTensorProduct[any1,any2] is a notation for any1 \[CircleTimes] \
any2.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[672]:=",ExpressionUUID->"3c0352af-5991-4289-8f2d-bdcef561871f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "::", "usage"}], "=", 
   "\"\<gaAlgebraMultiplicationTable[algebra] prints algebras multiplication \
table. Option gaGradesOnly->{{},{},...} selects only elements of grades \
{{0},{1},{2},...\>\""}], ";"}]], "Input",
 CellLabel->
  "In[673]:=",ExpressionUUID->"05536d25-65ec-49d0-bf5d-5596468379be"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "usage"}], "=", 
   "\"\<gaToTensorProduct[(algebra|gaTensorProduct),opts_\
ReductionAlgebrasOrder] decomposes given algebra into product of algebras \
with p+q=0, i.e. algebras Cl[0,2,0],Cl[1,1,0],Cl[2,0,0]. These reduction \
algebras can be specified with an option in the form of list \
Order->{__algebras} or list of lists \
Order->{{__algebraList1},{__algebraList2},...}. In the first case reduction \
process takes  algebra one by one until list is exhausted. The second form \
aplies reduction cyclically, first using all algebras in the list \
algebraList1, then in algebraList2, ...\>\""}], ";"}]], "Input",
 CellLabel->
  "In[674]:=",ExpressionUUID->"0e8a696a-6c76-4943-bb77-2ae201723d80"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "::", "usage"}], "=", 
   "\"\<gaFromTensorProduct[algebra_gaTensorProduct] returs Clifford algebra, \
which is isomorphics to tensors products of given algebras, i.e. is oposite \
to gaToTensorProduct[ ]. \>\""}], ";"}]], "Input",
 CellLabel->
  "In[675]:=",ExpressionUUID->"4e18438a-e695-4fe8-a9f1-b92ee04def53"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<Unfinished. gaDefineMatrixRepresentation[al_Cl] or \
gaDefineMatrixRepresentation[baseVectorRepresentation_List] constructs matrix \
representation of algebra. \nThe syntax \
gaDefineMatrixRepresentation[al_gaTensorProduct], first calculates direct \
product representation of product al_gaTensorProduct into elementary algebras \
of p+q<=2. Then uses direct product of matrix representation of these \
algebras. When user provides matrix representations of base vectors as a list \
baseVectorRepresentation, all other elements are simply obtained multiplying \
the matrices of these vectors.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<Option for how to select elementary reps.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", "::",
     "usage"}], "=", 
   "\"\<Method suboption of gaDefineMatrixRepresentation. Can be used to \
provide direct data for matrix representation computations. Usage: Method\
\[Rule]{\\\"IdealBasis\\\", \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\[Rule]\
dataMajorana}, where dataMajorana is a list of three elements {the \
idempotent, the ideal basis, the double sided ideal (with element replacement \
rules)}. See detailed example for Dirac, Majorana and chiral representation \
calculation for Cl[1,3].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSemisimpleAlgebraExtension", "::", "usage"}], "=", 
   "\"\<Method suboption of gaDefineMatrixRepresentation for semisimple \
algebras (odd algebras for complex field and p-q=1 mod 4 for real field). \
Usage: Method\[Rule]{\\\"IdealBasis\\\", \
gaSemisimpleAlgebraExtension->\\\"GradeInvertedLast\\\"|\\\"\
GradeInvertedFirst\\\"}, decide where to put grade inverted ideal basis block \
(after of before) computed ideal basis block.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaReplaceDivisionRing", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation.  \
gaReplaceDivisionRing\[Rule]True|False decides if a double sided ideal in the \
matrix representation should be replaced by its interpretation by standard \
division rings (R, C and H) or should be left as is. If interpretation is \
unknown, do nothing.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIdealBasisReordering", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which reorders ideal basis \
by given order. gaIdealBasisMultipliers option acts before reaordering takes \
place.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIdealBasisMultipliers", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which multiplies ideal basis \
elements by given numbers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BasisVectorsReordering", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which reorders basis \
vectors. Should not be confused with similar option, which reorders elements \
of ideal basis.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaDefineMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
command.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[676]:=",ExpressionUUID->"995b814d-9fd4-4556-82a2-9bdf37627324"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaDefineMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
command.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[685]:=",ExpressionUUID->"fdfce7ad-9182-480b-beae-bb4def33a27c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaToMatrixRepresentation[expr, algebra] converts expression into \
matrix representation. Orthogonal base and algebras matrix representations \
should be calculated in advance (till authomatic representation settings will \
be implemented).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[686]:=",ExpressionUUID->"09693627-693f-4657-b33a-7711891b5fb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaFromMatrixRepresentation[expr_matrix, algebra,opts___] converts \
matrix representation into multivector expression. Orthogonal base and \
algebras matrix representations should be calculated in advance. The option \
Mode, which can aquire values \\\"All\\\", \\\"Reals\\\" or \\\"Complexes\\\" \
filter the result of the obtained Tr[ ] coefficient. In particular, the value \
\\\"All\\\" do nothing (no filtering, the default), the  value \\\"Reals\\\" \
replaces pure imaginary and quaternion parts by zero.  The choice \
\\\"Complexes\\\", removes quaternions and multiply the result by factor 1/2 \
in order to compensate the doubling of the result due to imaginary part (in \
order to obtain the same answer). \>\""}], ";"}]], "Input",
 CellLabel->
  "In[687]:=",ExpressionUUID->"81617218-c397-44be-9d25-b20f16782d70"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<gaListDefinedElementaryRepresentations[algebra] or \
gaListDefinedElementaryRepresentations[algebra, representation name] return \
names (or representation itself), which can be used in \
gaDefineMatrixRepresentation[algebra_gaTensorProduct].\>\""}], ";"}]], "Input",\

 CellLabel->
  "In[688]:=",ExpressionUUID->"dde496ea-e0b5-48c9-8d9d-f7b1d801b65d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BasisVectorsMultipliers", "::", "usage"}], "=", 
   "\"\<Option, multiplies base matrices by given scalars: Automatic, None or \
_List\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorAlgebra", "::", "usage"}], "=", 
   "\"\<Option, uses given Clifford algebra base vector representation to \
produce required algebra representation. Number of base vectors for requested \
and option provided algebras need be the same\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TargetMatrices", "::", "usage"}], "=", 
   "\"\<Option, points which type, reals or complexes matrices to \
prefer.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"QuaternionIsomorphismRules", "::", "usage"}], "=", 
   "\"\<subOption for gaDefineMatrixRepresentation Method, possible values \
are {\\\"Pauli[1,2]\\\", \\\"HH2R4\\\",\\\"QToRealMatrix\\\"} or True. \
Determines whether quaternions in matrices to be replaced by matrix \
representations or not.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatrixOuterProductOrder", "::", "usage"}], "=", 
   "\"\<subOption for gaDefineMatrixRepresentation Method, possible values \
are {Identity, Reverse}. Determines weather matrix (only!) sequence in the \
Outer product should be reversed or not. Not tested.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ReductionOrder", "::", "usage"}], "=", "\"\<Option, \>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[689]:=",ExpressionUUID->"892e04a4-7d31-4b14-bba7-020fbe603504"],

Cell[TextData[{
 "One needs still to take square root of it according to Ian Porteous in \
RA-LoCGAaA, page 42. ",
 Cell[BoxData[
 " "], "Text",ExpressionUUID->"1f5cd990-d072-4bdd-81da-ea0975202088"]
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"84c69218-171a-41bc-8219-ed60ff00aca1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[695]:=",ExpressionUUID->"e47b49c9-e5e0-4a21-b4a5-fe8e39628986"],

Cell["\<\
The matrix representation section is more or less finished by functionality. \
The code, however,  in many places is awful. The ideal method needs \
considerable speedup to get representations of full periodicity table.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"e748c0f3-df64-42d6-87f5-28272dacc2b8"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation algorithm selection part"
}], "Subsection",ExpressionUUID->"b421c4a5-f9af-45e4-9e55-e86c4b1f2173"],

Cell["\<\
Default settings for each method. They include all possible options for each \
of methods.  Note, that gaDefineMatrixRepresentation[ ] uses general options \
(valid for all methods) and the Method option.  In turn, two known methods \
defineMatrixRepresentationTensorProductMethod[]  and \
defineMatrixRepresentationIdealBasisMethod[ ] have options which can be \
specified in the Method option of  gaDefineMatrixRepresentation[ ]. \
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"6ede69b5-9cd3-40d6-8030-7f30f6e16e45"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<TensorProduct\>\"", ",", 
        RowBox[{"ElementaryRepresentations", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"BaseVectorAlgebra", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
        RowBox[{"ReductionOrder", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
        ",", 
        RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}]}], "}"}]}],
      ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"BasisVectorsMultipliers", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[696]:=",ExpressionUUID->"1582d3a9-c8cc-426c-8ab3-212145dbcfd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "[", 
    RowBox[{
     RowBox[{"alg", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"aMethod", "=", 
        RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", "theMethod", ",", 
       "methodOpts", ",", "theOtherOptions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "take", " ", "all", " ", "options", " ", "and", " ", "separate", " ", 
       RowBox[{"(", 
        RowBox[{"with", " ", "completeion"}], ")"}], " ", "method", " ", 
       "options", " ", "and", " ", "other", " ", "options"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"theOtherOptions", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"OptionValue", "[", "Quiet", "]"}], ",", 
         RowBox[{"OptionValue", "[", "BasisVectorsMultipliers", "]"}], ",", 
         RowBox[{"OptionValue", "[", "gaGradesOnly", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "separate", " ", "Method", " ", "and", " ", "its", " ", "options"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "aMethod", "]"}], "===", "List"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"theMethod", ",", "methodOpts"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", "aMethod", "]"}], ",", 
           RowBox[{"Rest", "[", "aMethod", "]"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"theMethod", "=", "aMethod"}], ";", 
         RowBox[{"methodOpts", "=", 
          RowBox[{"{", "}"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"call", " ", "proper", " ", "method", " ", "functions"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"theMethod", ",", "\[IndentingNewLine]", 
        RowBox[{"Automatic", "|", "\"\<Automatic\>\""}], ",", 
        RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
         RowBox[{"alg", ",", "theOtherOptions"}], "]"}], ",", 
        "\[IndentingNewLine]", "\"\<TensorProduct\>\"", ",", 
        RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
         RowBox[{"alg", ",", "theOtherOptions", ",", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"FilterRules", "[", 
            RowBox[{"methodOpts", ",", 
             RowBox[{
             "Options", "[", "defineMatrixRepresentationTensorProductMethod", 
              "]"}]}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        "\"\<IdealBasis\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "alg", "]"}], "===", "Cl"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
           RowBox[{"alg", ",", "theOtherOptions", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{"methodOpts", ",", 
               RowBox[{
               "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
                "]"}]}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
           RowBox[{
            RowBox[{"gaFromTensorProduct", "[", "alg", "]"}], ",", 
            "theOtherOptions", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{"methodOpts", ",", 
               RowBox[{
               "Options", "[", "defineMatrixRepresentationIdealBasisMethod", 
                "]"}]}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}], 
        ",", "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "Method", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TensorProduct\>\"", ",", "\"\<IdealBasis\>\""}], 
            "}"}], ",", "\"\<Abort[]\>\""}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[697]:=",ExpressionUUID->"1c7c3caf-7ab3-4ba1-9303-8f735c3074af"],

Cell["\<\
Calculation of matrices after vector matrices has been obtained. This part is \
the same for both methods\
\>", "Text",ExpressionUUID->"96468a92-9280-4668-9fd6-d8b45ffcae1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"oneGradeRule", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"multIndex_List", ",", "factorIndex_List"}], "}"}], ",", 
        "prevRules_List", ",", "op_", ",", "alg_"}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"multIndex", ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], "->", 
        RowBox[{"op", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], "&"}], "/@",
              "factorIndex"}], ")"}], "/.", "prevRules"}], ")"}]}]}], ")"}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "gaDefineMatrixRepresentation", "[", "baseVectorRepresentation_List", 
       "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "alg", ",", "optimizedMultiplicationOrder", ",", "opElement", ",", 
           "opMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"alg", "=", 
           RowBox[{"FirstCase", "[", 
            RowBox[{"baseVectorRepresentation", ",", "_Cl", ",", 
             RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"some", " ", "compatibility", " ", "tests"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"alg", "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
              "gaDefineMatrixRepresentation", "::", "unknownAlgebra"}], "]"}],
              ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "=!=", 
             RowBox[{"Length", "[", "baseVectorRepresentation", "]"}]}], ",", 
            
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaDefineMatrixRepresentation", "::", "lenghtmismatch"}], ",", 
               "baseVectorRepresentation", ",", "alg"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "check", " ", "if", " ", "orthonormal", " ", "basis", " ", "is", 
            " ", "available"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"alg", ",", "\"\<InvDeg[Lex]\>\"", ",", "All"}], "]"}],
               "]"}], "===", "gaOrthonormalBasis"}], ",", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"alg", ",", 
              RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
              ",", 
              RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "determine", " ", "how", " ", "to", " ", "multiply", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Last", "/@", "baseVectorRepresentation"}], ")"}], ",",
               "_bs"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
             RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "here", " ", "we", " ", "minimize", " ", "number", " ", "of", " ", 
            "matrix", " ", "multiplications", " ", "from", " ", "vector", " ",
             "matrices", " ", "to", " ", "all", " ", "algebra", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"optimizedMultiplicationOrder", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Most", "[", "#", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Last", "[", "#", "]"}], "}"}]}], "}"}]}], "}"}], 
                "&"}], "/@", 
               RowBox[{"Subsets", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
                 ",", 
                 RowBox[{"{", "#", "}"}]}], "]"}]}], ")"}], "&"}], "/@", 
            RowBox[{"Rest", "[", 
             RowBox[{"Range", "[", 
              RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "use", " ", "these", " ", "order", " ", "of", " ", 
            "multiplications", " ", "to", " ", "obtain", " ", "all", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "=", 
           RowBox[{"MapAt", "[", 
            RowBox[{"Normal", ",", 
             RowBox[{"Fold", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"#1", ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"oneGradeRule", "[", 
                    RowBox[{"x", ",", "#1", ",", "opMatrix", ",", "alg"}], 
                    "]"}]}], "]"}], ",", "#2"}], "]"}]}], "}"}], "]"}], "&"}],
                ",", 
               RowBox[{"MapAt", "[", 
                RowBox[{"SparseArray", ",", "baseVectorRepresentation", ",", 
                 RowBox[{"{", 
                  RowBox[{"All", ",", "2"}], "}"}]}], "]"}], ",", 
               "optimizedMultiplicationOrder"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"MatchQ", "[", 
        RowBox[{"baseVectorRepresentation", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_bs", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], 
        "]"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[698]:=",ExpressionUUID->"d6c4b3fa-068f-4426-8cfb-03cc135e9999"],

Cell[" General  messages", "Text",ExpressionUUID->"d07f32ca-e009-4c97-9ef5-2d2d35fca7f1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "unknownAlgebra"}], "=", 
   "\"\<Unable to determine the algebra.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "lenghtmismatch"}], "=", 
   "\"\<Number of provided base vector matrices `1`, do not match the vector \
space dimension of the algebra `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], "=", 
   "\"\<Matrix representations of computed vectors are WRONG. Investigation \
needed.\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[699]:=",ExpressionUUID->"2683869c-5a0d-4f99-8163-03e3e6c6e4c1"],

Cell[" \[OpenCurlyDoubleQuote]IdealBasis\[CloseCurlyDoubleQuote] method \
messages", "Text",ExpressionUUID->"722a37c4-a4d0-4b05-8bf8-9c366eb6f46e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "idempotent"}], " ", "=", 
   " ", "\"\<The expression `1` provided by option PrimitiveIdempotent is not \
an idempotent. Aborting.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaDefineMatrixRepresentation", "::", "gaSemisimpleAlgebraExtension"}], 
   "=", "\"\<The block position  `1` for real field (case p-q=1 mod 4) in the \
final representation matrix can be only \\\"GradeInvertedLast\\\" (default) \
or \\\"GradeInvertedFirst\\\".\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[702]:=",ExpressionUUID->"f5015e46-e498-4b07-a0ac-d75b53617e72"],

Cell["\[OpenCurlyDoubleQuote]\[OpenCurlyDoubleQuote]TensorProduct\
\[CloseCurlyDoubleQuote]method messages", "Text",ExpressionUUID->"c8c68ec7-\
03ea-4e29-ba44-3015f200f85e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "NoDefaultData"}], "=", 
   "\"\<No explicit default representations of elementary algebras for `1` \
was given. Possible values are are. Will use `2` .\>\""}], ";"}]], "Input",
 CellLabel->
  "In[704]:=",ExpressionUUID->"3106667a-11eb-4780-926d-baf2b5d3a0e2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], "=", 
   "\"\<Provided elementary matrix representations `2` do not cover all \
algebras which appear in the tensor product `1`. Your need to provide \
elementary matrix representations for algebras `3`. Chose from posible values \
`4` from corresponding lists. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "=", 
   "\"\<Tensor product decomposition `1` contains Cl[1,0] algebra. Smaller \
(complex) representation matrices can be obtained using Method \
->{\\\"TensorProduct\\\",BaseVectorAlgebra\[Rule]`2`,TargetMatrices\[Rule]\
Reals}. The smaller matrices realizes HOMOMORPHISM of the algebra (not an \
isomorphism).\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}], 
   "=", "\"\<Option BasisVectorsMultipliers `1` has wrong number of elements. \
Expected pattern is `2`. Will use 1. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BaseVectorAlgebra"}], "=", 
   "\"\<BaseVectorAlgebra `1` has different number of vectors than algebra \
`2`. Will proceed with original algebra\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "isomorphismIRule"}], "=", 
   "\"\<Warning. Imaginary unit replacement \\\"IToRealMatrix\\\" was \
applied. It replaces explicitly elements \[PlusMinus]1 and \[PlusMinus]\
\[ImaginaryI]. For general matrices it will definitely yield wrong result. \
Please check the answer explicitly or don't use \\\"IToRealMatrix\\\" \
rules!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "isomorphismIRuleBad"}], 
   "=", "\"\<Error when trying to apply \\\"IToRealMatrix\\\" isomorphism \
rules. The rules \\\"IToRealMatrix\\\" will not be applied.\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[705]:=",ExpressionUUID->"30428b62-019d-4462-a5c4-caf71e72d582"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation construction by left ideals"
}], "Subsection",ExpressionUUID->"f1dbc753-d435-4a6d-b4c7-d4c5d80e2489"],

Cell["\<\
If we already have computed double sided ideal and left ideal basis we can \
avoid recomputation by providing the structure of ideal basis and double \
sided ideal with replacement rules. The function of particular method is \
hidden in the private context.\
\>", "Text",ExpressionUUID->"8a59d881-3445-4f2a-b48e-5e32bf7183ce"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"replaceFieldElement", "[", "0", "]"}], "=", "0"}], ";", 
  RowBox[{
   RowBox[{"replaceFieldElement", "[", "1", "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceFieldElement", "[", 
    RowBox[{"expr_", ",", "rules_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"Times", "@@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Internal`SyntacticNegativeQ", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "[", 
         RowBox[{"FactorTermsList", "[", "expr", "]"}], "]"}], ")"}], "/.", 
       "rules"}], ")"}]}], ")"}]}], ";"}]}], "Input",
 CellLabel->
  "In[711]:=",ExpressionUUID->"1f01aab2-4378-445b-a72d-37d60be47253"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"inversedRules", "[", "Reals", "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "1", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "2", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}]}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"inversedRules", "[", "Complexes", "]"}], "=", 
      RowBox[{"{", "}"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[713]:=",ExpressionUUID->"d314e179-4bbc-4d98-b9e4-7873d470a5b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "Options", "[", "defineMatrixRepresentationIdealBasisMethod", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaPrimitiveIdempotent", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"StartingElement", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{
        "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
        ",", 
        RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}], ",", 
        RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}]}], 
       "}"}]}], ",", 
     RowBox[{
     "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", 
      "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "->", "\"\<RevLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "->", 
      "\"\<InvLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtension", "\[Rule]", "\"\<GradeInvertedLast\>\""}],
      ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"BasisVectorsReordering", "\[Rule]", "None"}], ",", 
     RowBox[{"gaReplaceDivisionRing", "\[Rule]", "True"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"gaIdealBasisReordering", "\[Rule]", "None"}], ",", 
     RowBox[{"gaIdealBasisMultipliers", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[714]:=",ExpressionUUID->"945fa8de-0371-4ec8-8bf9-5b2ba32db6e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
   RowBox[{"alg_", ",", "generalOpts_List", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "quiet", ",", "basisVectorsMultipliers", ",", "gradesOnly", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"precomputedInput", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules"\
, "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"OptionValue", "[", "gaPrimitiveIdempotent", "]"}]}], ",", 
      "theIdempotentOptions", ",", "theIdempotent", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"basisVectorsOrder", "=", 
       RowBox[{"OptionValue", "[", "BasisVectorsReordering", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theDomain", "=", 
       RowBox[{"OptionValue", "[", "CoefficientDomain", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theOrderA", "=", 
       RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"theOrderB", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"semisimpleBlockPosition", "=", 
       RowBox[{"OptionValue", "[", "gaSemisimpleAlgebraExtension", "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"replaceDR", "=", 
       RowBox[{"OptionValue", "[", "gaReplaceDivisionRing", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"idealBasisOrder", "=", 
       RowBox[{"OptionValue", "[", "gaIdealBasisReordering", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"idealBasisMultipliers", "=", 
       RowBox[{"OptionValue", "[", "gaIdealBasisMultipliers", "]"}]}], ",", 
      "\[IndentingNewLine]", "theVectorBasis", ",", "\[IndentingNewLine]", 
      "semisimpleQ", ",", "theDoubleRealFieldOrdering", ",", "leftIdeal", ",",
       "divisionRingA", ",", "fieldReplacementRules", ",", "idealBasisA", ",",
       "lengthOfIdealBasis", ",", "matrixRepresentationsOfVectorsA", ",", 
      "matrixRepresentationsOfVectorsANorepl", ",", 
      "matrixRepresentationsOfVectorsB", ",", "divisionRingB", ",", 
      "idealBasisB", ",", "tempvar", ",", 
      "fieldReplacementRulesGradeInversed", ",", "vectorMatrices", ",", 
      "vectorMatricesFin", ",", "allBasisInvDegLex", ",", "answer", ",", 
      "idealBasisAUnordered", ",", "idealBasisBUnordered", ",", 
      "idempotentData"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"quiet", ",", "basisVectorsMultipliers", ",", "gradesOnly"}], 
       "}"}], "=", "generalOpts"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "initialization", " ", "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"alg", ",", "theOrderA", ",", "All"}], "]"}], "]"}], "===", 
        "gaOrthonormalBasis"}], ",", 
       RowBox[{"gaDefineOrthonormalBasis", "[", 
        RowBox[{"alg", ",", 
         RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
         RowBox[{"gaNonCommutativeMonomialOrder", "->", "theOrderA"}], ",", 
         RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"theVectorBasis", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alg", ",", "theOrderA", ",", "All"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "determine", " ", "if", " ", "precomputed", " ", "structure", " ", 
        "is", " ", "provided"}], ",", " ", 
       RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"precomputedInput", "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"theIdempotentSetting", ",", 
            RowBox[{"Automatic", "|", "\"\<Automatic\>\"", "|", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "__"}], "}"}], "|", 
             RowBox[{"{", 
              RowBox[{"\"\<Automatic\>\"", ",", "__"}], "}"}]}]}], "]"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"theIdempotent", "=", 
           RowBox[{"gaPrimitiveIdempotent", "[", 
            RowBox[{"alg", ",", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{"theIdempotentSetting", ",", 
                  RowBox[{"Automatic", "|", "\"\<Automatic\>\""}]}], "]"}], 
                ",", 
                RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
               "]"}]}]}], "]"}]}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"gaIdempotentQ", "[", "theIdempotentSetting", "]"}], ",", 
             RowBox[{"theIdempotent", "=", "theIdempotentSetting"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDefineMatrixRepresentation", "::", "idempotent"}], 
                ",", "theIdempotentSetting"}], "]"}], ";", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Warn", " ", "if", " ", "idempotent", " ", "and", " ", "function", 
          " ", "domains", " ", "differ", " ", "or", " ", "have", " ", "wrong",
           " ", "values"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"theDomain", "=!=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"CoefficientDomain", "/.", 
               RowBox[{"Cases", "[", 
                RowBox[{"theIdempotentSetting", ",", 
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{"CoefficientDomain", ",", "_"}], "]"}], "]"}]}], 
                "]"}]}], ")"}], "/.", 
             RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}]}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{"TextCell", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                   "\"\<Warning! gaIdempotent and \
gaDefineMatrixRepresentation are has diffrent setting for CoefficientDomain! \
Hope you know what you are doing.\>\"", " ", ",", "Red"}], "]"}], "]"}], 
                 "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "TextCell", "[", "\"\<The primitive idempotent is \>\"", 
                    "]"}], "}"}], "]"}], ",", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"ExpressionCell", "[", "theIdempotent", "]"}], 
                   "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}],
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal"}], "  ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"leftIdeal", "=", 
         RowBox[{"gaLeftIdeal", "[", 
          RowBox[{"theIdempotent", ",", "theOrderA", ",", 
           RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "double", " ", "sided", " ", "ideal"}], "  ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"divisionRingA", ",", "fieldReplacementRules"}], "}"}], "=", 
         RowBox[{"gaDoubleSidedIdeal", "[", 
          RowBox[{"theIdempotent", ",", "leftIdeal", ",", "theOrderA", ",", 
           RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
           RowBox[{"OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}],
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", "basis"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"idealBasisAUnordered", "=", 
         RowBox[{"gaLeftIdealBasis", "[", 
          RowBox[{"leftIdeal", ",", "divisionRingA", ",", "theOrderA", ",", 
           RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "multiply", " ", "ideal", " ", "basis", " ", "by", " ", "numbers", 
          " ", "in", " ", "case", " ", "of", " ", "simple", " ", "algebras"}],
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"semisimpleQ", ",", "False", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{
            "idealBasisMultipliers", ",", "\[IndentingNewLine]", "None", ",", 
             
             RowBox[{"idealBasisMultipliers", "=", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"__", "?", "NumberQ"}], "}"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "idealBasisMultipliers", "]"}], "===", 
                
                RowBox[{"Length", "[", "idealBasisAUnordered", "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"idealBasisAUnordered", "=", 
                RowBox[{
                "idealBasisAUnordered", "*", "idealBasisMultipliers"}]}], ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaOptionValue", "::", "option"}], ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                   "]"}], ",", " ", "gaIdealBasisMultipliers", ",", 
                  RowBox[{"{", 
                   RowBox[{"None", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], ",", "\"\<None\>\""}], 
                 "]"}], ";", 
                RowBox[{"idealBasisMultipliers", "=", "1"}], ";"}]}], "]"}], 
             ",", "\[IndentingNewLine]", "_", ",", " ", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaOptionValue", "::", "option"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}],
                 ",", " ", "gaIdealBasisMultipliers", ",", 
                RowBox[{"{", 
                 RowBox[{"None", ",", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], ",", "\"\<None\>\""}], 
               "]"}], ";", 
              RowBox[{"idealBasisMultipliers", "=", "1"}], ";"}]}], 
            "\[IndentingNewLine]", " ", "]"}], ";"}], "\[IndentingNewLine]", 
          ",", "True", ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "idealBasisMultipliers", ",", "\[IndentingNewLine]", "None", ",", 
            RowBox[{"idealBasisMultipliers", "=", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"__", "?", "NumberQ"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"__", "?", "NumberQ"}], "}"}]}], "}"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Length", "/@", "idealBasisMultipliers"}], ")"}], 
                 "-", 
                 RowBox[{"Length", "[", "idealBasisAUnordered", "]"}]}], 
                ")"}], "===", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"idealBasisAUnordered", "=", 
               RowBox[{"idealBasisAUnordered", "*", 
                RowBox[{"idealBasisMultipliers", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaOptionValue", "::", "option"}], ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                  "]"}], ",", " ", "gaIdealBasisMultipliers", ",", 
                 RowBox[{"{", 
                  RowBox[{"None", ",", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalY]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
                 "\"\<None\>\""}], "]"}], ";", 
               RowBox[{"idealBasisMultipliers", "=", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}], ";"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "_", ",", " ", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaOptionValue", "::", "option"}], ",", 
               RowBox[{"Style", "[", 
                RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
               ",", " ", "gaIdealBasisMultipliers", ",", 
               RowBox[{"{", 
                RowBox[{"None", ",", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalY]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
               "\"\<None\>\""}], "]"}], ";", 
             RowBox[{"idealBasisMultipliers", "=", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], ";"}]}], 
           "\[IndentingNewLine]", " ", "]"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "reorder", " ", "ideal", " ", "basis", " ", "if", " ", "required"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"semisimpleQ", ",", "False", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"idealBasisOrder", "===", "None"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", "idealBasisOrder", "]"}], "===", 
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"idealBasisA", "=", 
                 RowBox[{"idealBasisAUnordered", "[", 
                  RowBox[{"[", "idealBasisOrder", "]"}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaOptionValue", "::", "option"}], ",", 
                   RowBox[{"Style", "[", 
                    RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                    "]"}], ",", " ", "gaIdealBasisReordering", ",", 
                   RowBox[{"{", 
                    RowBox[{"\"\<None\>\"", ",", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}], ",", 
                   "\"\<None\>\""}], "]"}], ";", 
                 RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          "True", ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"idealBasisOrder", "===", "None"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"idealBasisOrder", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", 
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"idealBasisA", "=", 
                 RowBox[{"idealBasisAUnordered", "[", 
                  RowBox[{"[", 
                   RowBox[{"idealBasisOrder", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaOptionValue", "::", "option"}], ",", 
                   RowBox[{"Style", "[", 
                    RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                    "]"}], ",", " ", "gaIdealBasisReordering", ",", 
                   RowBox[{"{", 
                    RowBox[{"\"\<None\>\"", ",", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<{Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<],Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]}\>\""}], "]"}]}], "}"}], ",", 
                   "\"\<None\>\""}], "]"}], ";", 
                 RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"TextCell", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Warning! Option \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules is used \
in gaDefineMatrixRepresentation. No checks applied. All other Method options \
will be ignored.\>\"", " ", ",", "Red"}], "]"}], "]"}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"ExpressionCell", "[", "precomputedInput", "]"}], 
                  "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"divisionRingA", ",", "fieldReplacementRules"}], "}"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"idealBasisA", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"theIdempotent", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", "idealBasisA", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Once", " ", "double", " ", "sided", " ", "ideal", " ", "and", " ", 
       "left", " ", "ideal", " ", "basis", " ", "are", " ", "known", " ", 
       "compute", " ", "matrix", " ", "representation", " ", "of", " ", "a", 
       " ", "matrix", " ", "block"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"matrixRepresentationsOfVectorsANorepl", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaIndexDown", "[", 
              RowBox[{"gaHermitianConjugate", "[", 
               RowBox[{"idealBasisA", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], 
             "\[GeometricProduct]", "#", "\[GeometricProduct]", 
             RowBox[{"idealBasisA", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "lengthOfIdealBasis"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "lengthOfIdealBasis"}], "}"}]}], "]"}], "&"}], "/@",
        "theVectorBasis"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"replaceDR", ",", 
       RowBox[{"matrixRepresentationsOfVectorsA", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"replaceFieldElement", "[", 
            RowBox[{"#", ",", "fieldReplacementRules"}], "]"}], "&"}], ",", 
          "matrixRepresentationsOfVectorsANorepl", ",", 
          RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "matrixRepresentationsOfVectorsA", "=", 
        "matrixRepresentationsOfVectorsANorepl"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "final", " ", "matrix", " ", "representations", " ", "of", " ", "basis",
        " ", 
       RowBox[{"vectors", ".", " ", "For"}], " ", "semisimple", " ", 
       "algebra", " ", "make", " ", "additional", " ", "steps"}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"semisimpleQ", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "for", " ", "semisimple", " ", "use", " ", "grade", " ", "inversed", 
         " ", "subspase"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"divisionRingB", "=", 
         RowBox[{"gaGradeInverse", "/@", "divisionRingA"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"idealBasisBUnordered", "=", 
         RowBox[{
          RowBox[{"gaSort", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"gaGradeInverse", "/@", "idealBasisA"}], ")"}], ",", 
            "theOrderB"}], "]"}], "*", 
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"idealBasisMultipliers", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"idealBasisMultipliers", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"idealBasisOrder", "===", "None"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"idealBasisB", "=", "idealBasisBUnordered"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"idealBasisOrder", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
              RowBox[{"Range", "[", 
               RowBox[{"Length", "[", "idealBasisBUnordered", "]"}], "]"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"idealBasisB", "=", 
              RowBox[{"idealBasisBUnordered", "[", 
               RowBox[{"[", 
                RowBox[{"idealBasisOrder", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaOptionValue", "::", "option"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}],
                 ",", " ", "gaIdealBasisReordering", ",", 
                RowBox[{"{", 
                 RowBox[{"\"\<None\>\"", ",", 
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<{Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<],Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]}\>\""}], "]"}]}], "}"}], ",", 
                "\"\<None\>\""}], "]"}], ";", 
              RowBox[{"idealBasisB", "=", "idealBasisBUnordered"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"fieldReplacementRulesGradeInversed", "=", 
         RowBox[{"(", 
          RowBox[{"Last", "/@", 
           RowBox[{"makeReplRule", "/@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "/.", 
                  RowBox[{"inversedRules", "[", "theDomain", "]"}]}]}], "}"}],
                "&"}], ",", 
              RowBox[{"fieldReplacementRules", "/.", 
               RowBox[{"{", 
                RowBox[{"Rule", "\[Rule]", "List"}], "}"}]}]}], "]"}]}]}], 
          ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"matrixRepresentationsOfVectorsB", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "tempvar", "}"}], ",", 
                RowBox[{"replaceFieldElement", "[", 
                 RowBox[{
                 "tempvar", ",", "fieldReplacementRulesGradeInversed"}], 
                 "]"}]}], "]"}], ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{
                   RowBox[{"gaIndexDown", "[", 
                    RowBox[{"gaHermitianConjugate", "[", 
                    RowBox[{"idealBasisB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], 
                   "\[GeometricProduct]", "#", "\[GeometricProduct]", 
                   RowBox[{"idealBasisB", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "lengthOfIdealBasis"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "lengthOfIdealBasis"}], "}"}]}], "]"}], 
              ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
           "theVectorBasis"}], ")"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"make", " ", "final", " ", "matrix"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "semisimpleBlockPosition", ",", "\[IndentingNewLine]", 
          "\"\<GradeInvertedLast\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], " ", ";"}], ",", "\[IndentingNewLine]", 
          "\"\<GradeInvertedFirst\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], " ", ";"}], ",", "\[IndentingNewLine]", "_", 
          ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaOptionValue", "::", "option"}], ",", 
             RowBox[{"Style", "[", 
              RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
             ",", " ", "OutputForm", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<GradeInvertedLast\>\"", ",", 
               "\"\<GradeInvertedFirst\>\""}], "}"}], ",", 
             "\"\<GradeInvertedLast\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "semisimple", " ", "case"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatrices", "=", "matrixRepresentationsOfVectorsA"}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "change", " ", "order", " ", "of", " ", "vectors", " ", "if", " ", 
       "required"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"basisVectorsOrder", ",", "None", ",", 
       RowBox[{"basisVectorsOrder", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"__Integer", "?", "Positive"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", "basisVectorsOrder", "]"}], "=!=", 
          RowBox[{"Range", "[", 
           RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], ",", 
         " ", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "BasisVectorsReordering", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<None\>\"", ",", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"\"\<Permutation[\>\"", ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"Range", "[", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
                "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}], ",", 
           "\"\<None\>\""}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", "_", 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",", 
          " ", "BasisVectorsReordering", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<None\>\"", ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<Permutation[\>\"", ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"Range", "[", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
               "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}], ",", 
          "\"\<None\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"basisVectorsOrder", "=", 
         RowBox[{"Range", "[", 
          RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "try", " ", "to", " ", "make", " ", "minimize", " ", "minus", " ", 
       "signs", " ", "in", " ", "the", " ", "representation", " ", "block"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "basisVectorsMultipliers", ",", "\[IndentingNewLine]", "Automatic", ",",
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"old", ":", " ", 
         RowBox[{
         "change", " ", "sign", " ", "if", " ", "only", " ", "all", " ", 
          "elements", " ", "of", " ", "matrx", " ", "is", " ", "negative"}]}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AllTrue", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], ",", 
                "Internal`SyntacticNegativeQ"}], "]"}], ",", 
              RowBox[{
               RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "/@",
            "\[IndentingNewLine]", "vectorMatrices"}], ")"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"vectorMatricesFin", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"Internal`SyntacticNegativeQ", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], 
                  "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "/@",
              "\[IndentingNewLine]", "vectorMatrices"}], ")"}], "[", 
           RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", "None", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"__", "?", "NumberQ"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "basisVectorsMultipliers", "]"}], "===", 
            RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], ")"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"vectorMatricesFin", "=", 
           RowBox[{"basisVectorsMultipliers", "*", 
            RowBox[{"(", 
             RowBox[{"vectorMatrices", "[", 
              RowBox[{"[", "basisVectorsOrder", "]"}], "]"}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionValue", "::", "option"}], ",", 
              RowBox[{"Style", "[", 
               RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
              ",", " ", "BasisVectorsMultipliers", ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"\[PlusMinus]", "1"}], ",", 
                RowBox[{"{", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}],
                "]"}], ",", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}],
                "]"}]}], "]"}], "]"}], ";", 
           RowBox[{"vectorMatricesFin", "=", 
            RowBox[{"vectorMatrices", "[", 
             RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", "_",
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "BasisVectorsMultipliers", ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"\[PlusMinus]", "1"}], ",", 
             RowBox[{"{", 
              RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}], 
            "]"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}], 
            "]"}]}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"answer", "=", 
      RowBox[{"Thread", "[", 
       RowBox[{"Rule", "[", 
        RowBox[{"theVectorBasis", ",", "vectorMatricesFin"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "if", " ", "full", " ", "algebra", " ", "representation", " ", "was", 
       " ", "requested", " ", "call", " ", 
       RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", " ", 
       "special", " ", "syntax"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"basisVectorsOrder", ",", "None", ",", 
       RowBox[{"basisVectorsOrder", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"gradesOnly", ",", "\[IndentingNewLine]", 
       RowBox[{"{", "1", "}"}], ",", "answer", ",", "\[IndentingNewLine]", 
       "All", ",", 
       RowBox[{"gaDefineMatrixRepresentation", "[", "answer", "]"}], ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",", 
          " ", "gaGradesOnly", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "1", "}"}], ",", "All"}], "}"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "answer"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 CellLabel->
  "In[715]:=",ExpressionUUID->"ae1065c1-9835-4724-90da-fb0ca984691d"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation construction by direct product"
}], "Subsection",ExpressionUUID->"55d41403-b71f-4712-8945-0b997fc3e9fc"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"290be3bd-6cd6-42a9-b0b4-2daac816a3f7"],

Cell[TextData[{
 "The help function ",
 StyleBox["tensorProductIsomorphicToAlgebra[ ] ",
  FontWeight->"Bold"],
 " is used in ",
 "gaDefineOrthonormalBasis",
 StyleBox["[gaTensorProduct[ ]]",
  FontWeight->"Bold"],
 ", where it generates indices of isomorphics algebra. These indices then are \
substituted by corresponding tensor product indices.  The rule below helps to \
replace single algbra by fake tensor product (containing only one term), \
which then enables to use single definition (thougtht a bit more complicated) \
instead of two separate: one for ",
 StyleBox["gaTensorProduct[Cl, Cl]",
  FontWeight->"Bold"],
 ", the other for ",
 StyleBox["gaTensorProduct[ gaTensorProduct[Cl], Cl]",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"447f1ff7-f6f1-4b68-b225-18d5b84df69c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tensorProductIsomorphicToAlgebra", "[", 
    RowBox[{"gaTensorProduct", "[", "al_Cl", "]"}], "]"}], ":=", "al"}], 
  ";"}]], "Input",
 CellLabel->
  "In[716]:=",ExpressionUUID->"2abdcb7e-a329-4c28-89a4-c0712a671e8c"],

Cell[TextData[{
 "The function ",
 StyleBox["gaAlgebraMultiplicationTable[ ]",
  FontWeight->"Bold"],
 ", constructs product table of all elements and prints it in a clear way. \
Entire base  should be generated before call."
}], "Text",ExpressionUUID->"48a2f804-bb3f-4b96-8514-12623bf46dd2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], "=", 
    "\"\<Option `1` is not a list of grades like {{1},{3},...}.\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaAlgebraMultiplicationTable", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grades", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaAlgebraMultiplicationTable", ",", "gaGradesOnly"}], 
           "]"}]}], ")"}]}], ",", "selectedBE"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"grades", ",", "All", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"Outer", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
           RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "]"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "}"}]}]}], 
        "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_Integer", "?", "NonNegative"}], "}"}], ".."}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"selectedBE", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGetGrade", "[", "#", "]"}], "===", "x"}], 
                   "&"}], ")"}]}]}], "]"}]}], "]"}], ",", "grades"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", "selectedBE", ",", "selectedBE"}],
            "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"selectedBE", ",", "selectedBE"}], "}"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], 
          ",", "grades"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[717]:=",ExpressionUUID->"81285ccd-5c79-4ca6-a5bb-962031654f49"],

Cell["Set unit element to 1.", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"bf79b8e3-b266-4a1c-85d1-49546d42b6d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"bs", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "_"}], 
       "]"}], "]"}], "=", "1"}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[720]:=",ExpressionUUID->"f0cb170a-4656-43f9-8752-10329083bf70"],

Cell["\<\
The signature of tensor product is a sum of signatures for each product \
algebras\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"3fc1bac3-6a2c-4450-ad3d-e56bb8f6e756"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_gaTensorProduct", ",", "___"}], "]"}]}]}], 
       "]"}], ":=", 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{"Length", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{
                RowBox[{"gaNegativeSignatureIndexList", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Thread", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Thread", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"First", "/@", 
                    RowBox[{"gaGetIndex", "[", "expr", "]"}]}], ")"}]}], ",", 
                    "al"}], "}"}], "]"}], "/.", 
                  RowBox[{"gaTensorProduct", "\[Rule]", "List"}]}], ")"}]}], 
               ",", "1"}], "]"}]}], ")"}]}], ")"}]}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[721]:=",ExpressionUUID->"9350bb9e-aefc-4ba0-b2e9-da8e7c773415"],

Cell["\<\
Decide, when base recalculation is unavoidable. Always use \
\[OpenCurlyDoubleQuote]PlainRepresentation\[CloseCurlyDoubleQuote] \
representation for these calculations.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"7e7b5344-f3aa-4ff7-9a93-655aa5981cdd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getBase", "[", 
    RowBox[{"al_", ",", "grRequested_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"variants", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"DownValues", "[", "gaOrthonormalBasis", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "_"}], 
                   "]"}]}], "]"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RuleDelayed", "[", 
             RowBox[{"def_", ",", "_"}], "]"}], ":>", "def"}], "}"}]}], 
         ")"}]}], ",", "definedGrades"}], "}"}], ",", 
     RowBox[{
      RowBox[{"definedGrades", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Hold", "@@", "variants"}], ")"}], "/.", 
             RowBox[{"HoldPattern", "\[Rule]", "Sequence"}]}], ")"}], "/.", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"_", ",", "\"\<InvDeg[Lex]\>\"", ",", "gr_"}], "]"}], 
            "\[RuleDelayed]", "gr"}]}], ")"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"definedGrades", ",", "All"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "grRequested"}], 
          "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "All"}], "]"}], 
           ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Intersection", "[", 
          RowBox[{"grRequested", ",", 
           RowBox[{"(", 
            RowBox[{"Union", "@@", 
             RowBox[{"(", "definedGrades", ")"}]}], ")"}]}], "]"}], "===", 
         "grRequested"}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "grRequested"}], 
          "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Join", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "#"}], "]"}], 
                "&"}], "/@", "definedGrades"}], ")"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", "True", ",",
         "\[IndentingNewLine]", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"al", ",", 
          RowBox[{"gaGradesOnly", "->", "grRequested"}], ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{
          "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}],
           ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[722]:=",ExpressionUUID->"608773a7-0343-4a33-a275-7d15ebd221ff"],

Cell[TextData[{
 "Lets provide user with \[OpenCurlyDoubleQuote]default\
\[CloseCurlyDoubleQuote] algebra representations. It may be  convenient  if \
user wants other representations that differ from universal representations \
set by  ",
 StyleBox["generalDefaultMatrixRepresentationSetting[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10001.},ExpressionUUID->"8ed856c5-c355-4898-b1c2-bef1edda5791"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDefaultMatrixRepresentationData", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "4"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "5"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "6"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "7"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ","}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Diagonal\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
            "\"\<Antisymmetric\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], 
       ","}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"2", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[723]:=",ExpressionUUID->"f707761b-1ad8-4aa9-b776-21942ab6643e"],

Cell[TextData[{
 "Below we construct matrix representations for real Clifford algebras, which \
is known to be of dimensions:\n\[DoubleStruckCapitalR](2^(n/2)),    if \
q-p=0,6 (mod 8); \n\[DoubleStruckCapitalC](2^((n-1)/2)),    if q-p=1,5(mod \
8); \n\[DoubleStruckCapitalH](2^((n-2)/2)),    if q-p=2,4(mod 8); \n\
\[DoubleStruckCapitalH](2^((n-3)/2))\[CirclePlus]\[DoubleStruckCapitalH](2^((\
n-3)/2)),   if q-p=3(mod 8); \n\[DoubleStruckCapitalR](2^((n-1)/2))\
\[CirclePlus]\[DoubleStruckCapitalR](2^((n-1)/2)),   if q-p=7(mod 8); \n\nIn \
order to get these matrices we generate automatic calculation instructions \
below. \nThese settings are applied only if particular settings were not \
found in ",
 StyleBox["gaDefaultMatrixRepresentationData[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",ExpressionUUID->"cbedef98-4127-444b-9ee9-ffb4bed25228"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_", ",", "_"}], "]"}], "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"q", "-", "p"}], ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"0", "|", "6"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1", "|", "5"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", "\"\<Pauli[1,2]\>\""}]}],
        "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"2", "|", "4"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "3", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "7", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[724]:=",ExpressionUUID->"cc8e3ff8-7076-4368-a895-c8519c248787"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notations"
}], "Subsubsection",ExpressionUUID->"55b41415-b87f-45d6-ae5e-aca2435e11de"],

Cell["Tensor product notation for products of algebras", "Text",ExpressionUUID->"0885b392-b2fd-4780-9903-0fbd5a195227"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "al__Cl", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "#", "]"}], "]"}], "===", 
          "gaNotation"}], ",", 
         RowBox[{"gaDefineNotation", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"{", "al", "}"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", 
          RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}], "]"}], "===", 
        "gaNotation"}], ",", 
       RowBox[{"gaDefineNotation", "[", 
        RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"alB", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "al", "}"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfdProto", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"Slot", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", 
               RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", 
            RowBox[{"StyleBox", "[", 
             RowBox[{"\"\<\[CircleTimes]\>\"", ",", 
              RowBox[{"FontSize", "\[Rule]", "Medium"}], ",", 
              RowBox[{"gaNotation", "[", 
               RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}]}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfiProto", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<gaTensorProduct\>\"", ",", "\"\<[\>\""}], "}"}], 
            ",", 
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Slot", "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", "\"\<,\>\""}],
              "]"}], ",", 
            RowBox[{"{", "\"\<]\>\"", "}"}]}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfdProto", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfiProto", "]"}], "]"}]}]}], "}"}], ",", 
         
         RowBox[{"TemplateBox", "[", 
          RowBox[{"alB", ",", "\"\<gaTensorProduct\>\"", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
      "]"}]}], "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellLabel->
  "In[725]:=",ExpressionUUID->"c7254d77-2d03-49be-839d-bfdbbe6b49bc"],

Cell[TextData[{
 "For other quantities, i.e. indices, simply use ",
 StyleBox["CircleTimes[ ] ",
  FontWeight->"Bold"],
 "trick, thus avoiding problems with bracketing. For speed reasons, dont\
\[CloseCurlyQuote] associate MakeBoxes with  ",
 StyleBox["gaTensorProduct/: ",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"1e2561e4-ffc8-4f67-b3fe-5c4746621e15"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "argsa__", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"TagBox", "[", 
    RowBox[{
     RowBox[{"ToBoxes", "[", 
      RowBox[{"CircleTimes", "[", "argsa", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"gaTensorProduct", "@@", "#"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[726]:=",ExpressionUUID->"428ff97f-47b8-45c6-9353-57dd5f0c65f4"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multiplication of elements, which are tensor products. "
}], "Subsubsection",ExpressionUUID->"81d67273-9b26-414a-a5f0-80d08ea001b8"],

Cell[TextData[{
 "Tensor product indices are treated in a different way than indices of \
simple clifford algebras. Identifier ignoreMe deals with tensor products of \
identical algebras, which is unavoidable if we want to construct tensor \
product from simple algebras. After base elements are constructed we ignore \
them.  ignoreMe is used only in ",
 "gaDefineOrthonormalBasis",
 StyleBox["[gaTensorProduct[]]",
  FontWeight->"Bold"],
 ". It is not needed when dealing with already defined base elements."
}], "Text",ExpressionUUID->"ce4ea755-2d49-4d31-a237-73868146b97e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"other1___", ",", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du1_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du2_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"setSymDiff4TP", ",", "signProdSigMap4TP"}], "}"}], ",", 
        RowBox[{
         RowBox[{"setSymDiff4TP", "=", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "@@", 
              RowBox[{"(", 
               RowBox[{"List", "/@", 
                RowBox[{"gaTensorProduct", "@@@", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Apply", "[", 
                   RowBox[{"mvSetSymmetricDifference", ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ")"}]}], ",",
              "al"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", 
                "_"}], "]"}], "]"}], "->", "1"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "=", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Times", "@@@", 
             RowBox[{"Apply", "[", 
              RowBox[{"mvProductSignatureMapC", ",", 
               RowBox[{"MapThread", "[", 
                RowBox[{"List", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}]}], "}"}]}],
                     "]"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"other1", ",", "setSymDiff4TP", ",", "other2"}], 
           "]"}]}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[727]:=",ExpressionUUID->"0268e5a1-685a-4320-8297-c39e08915f9f"],

Cell[TextData[{
 "Geometric product of ",
 StyleBox["gaTensorProduct[_,_]",
  FontWeight->"Bold"],
 ". Note, that ",
 StyleBox["gaTensorProduct[x_]:=x",
  FontWeight->"Bold"],
 " rule would spoil rearangement ",
 StyleBox["gaTensorProduct[gaTensorProduct[a],b]",
  FontWeight->"Bold"],
 ", therefore is not allowed. Associate these recursive definitions with ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " itself  for speed reasons (they are more rare than ",
 StyleBox["GeometricProduct[ ]",
  FontWeight->"Bold"],
 ")"
}], "Text",ExpressionUUID->"9221967a-f63c-4744-988c-c5f303490c92"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "/:", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1___", ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"x1_", ",", "x2__"}], "]"}], ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"y1_", ",", "y2__"}], "]"}], ",", "any2___"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
           "x"}], "}"}]}], ")"}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "x2", "]"}], ",", 
         RowBox[{"gaTensorProduct", "[", "y2", "]"}]}], "]"}], ",", "any2"}], 
      "]"}], ")"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTensorProduct", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaTensorProduct", "[", "x1_", "]"}], ",", 
     RowBox[{"gaTensorProduct", "[", "y1_", "]"}], ",", "any2___"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1", ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
          "x"}], "}"}]}], ")"}], ",", "any2"}], "]"}], ")"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellLabel->
  "In[728]:=",ExpressionUUID->"698ff176-71ea-4237-8313-e6913c60ad17"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Orthonormal base construction for tensor product algebras"
}], "Subsubsection",ExpressionUUID->"d1fab53a-de07-48f1-93f0-70bc5cde1457"],

Cell["\<\
General note. The case with (Cl[2,0,0]|Cl[1,1,0]|Cl[0,2,0]) algebras is \
special, because we know what are base vectors. Then it follows that we can \
easily order and grade all elements. For tensor products of arbitrary \
algebras the nontrivial point is to find what tensor products play the role \
of vectors. The generation of orthonormal base of product of tensor algebras \
should not be confused with calculation of  geometric product between \
elements of tensor algebra products. The later can be calculated directly \
(see \[OpenCurlyDoubleQuote]Multiplication of elements, which are tensor \
products\[CloseCurlyDoubleQuote] subsubsection).  \
\>", "Text",ExpressionUUID->"dc6837e1-787c-442c-80cd-520333ce3f5f"],

Cell[TextData[{
 "The  ",
 StyleBox["gaTensorProduct[Cl,Cl,...]",
  FontWeight->"Bold"],
 ", puts tensor products into onion like form ",
 StyleBox["gaTensorProduct[ gaTensorProduct[gaTensorProduct[Cl],Cl] ,..]",
  FontWeight->"Bold"],
 " below. Then calls gaDefineOrthonormalBasis",
 StyleBox["Main[ ] ",
  FontWeight->"Bold"],
 " to do all calculations step by step starting from the deepest product. \
Only necessary grades are calculated in intermediate steps."
}], "Text",ExpressionUUID->"e8c0dde9-119e-450e-a13c-b7bbc49d9f1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBasis", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"p_", ",", "q_", ",", 
         RowBox[{"r_:", "0"}]}], "]"}], ",", 
       RowBox[{"specAlgebra", ":", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}], ".."}]}]}], 
      "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gro", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], "]"}]}],
          ")"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"gaGradesOnly", "->", "_"}]}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"gaDefineOrthonormalBasisMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBasisMain", "[", 
               RowBox[{
                RowBox[{"gaTensorProduct", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], ",", 
                RowBox[{"gaGradesOnly", "->", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], ",", 
                RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}], ";", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], ")"}], "&"}], ",", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], ",", 
           RowBox[{"Most", "[", 
            RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{"Last", "[", 
          RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"gaGradesOnly", "\[Rule]", "gro"}], ",", 
       RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[730]:=",ExpressionUUID->"6bb5f098-1b81-4ff9-8347-a41be479755a"],

Cell[TextData[{
 "Note ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 " is private context symbol (not ",
 StyleBox["Module[ ]",
  FontWeight->"Bold"],
 " local symbol)"
}], "Text",ExpressionUUID->"cff90433-d8ab-476a-ad2c-1532a1f446d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaDefineOrthonormalBasisMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "algebraSeq__", "]"}], ",", 
         RowBox[{"specAlgebra", ":", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}]}]}], "]"}], 
       ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "baseSymbol", ",", "invdeglexIndexList", ",", "indSet", ",", "keysB", 
         ",", "gr", ",", "ifPrint", ",", "vectorsOfArbitraryAlgebra", ",", 
         "bivectorsOfSpecialAlgebra", ",", 
         "alreadyCalculatedProductsAdoptedToSingle", ",", 
         RowBox[{"uniqueMaskForArbitraryAlgebra", "=", 
          RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
         RowBox[{"uniqueMaskForSpecAlgebra", "=", 
          RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
         RowBox[{"productAlgebra", "=", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"algebraSeq", ",", "specAlgebra"}], "]"}], "//.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a___", ",", 
               RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
              "]"}], ":>", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}]}], ",", 
         RowBox[{"alreadyCalculatedProducts", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", "algebraSeq", "]"}], "//.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a___", ",", 
                RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
               "]"}], ":>", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], ")"}]}], 
         ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBasis", ",", "Quiet"}], "]"}]}], 
           ")"}]}], ",", "algBoxes", ",", 
         RowBox[{"grOnly", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGradesOnly", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], 
             "]"}]}], ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Other", " ", "commands", " ", "do", " ", "not", " ", "understand", 
          " ", 
          RowBox[{"gaTensorProduct", "[", "cl", "]"}]}], ",", " ", 
         RowBox[{"therefore", " ", "define", " ", "usual", " ", "Cl"}]}], " ",
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alreadyCalculatedProductsAdoptedToSingle", "=", 
         RowBox[{"alreadyCalculatedProducts", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", "a_Cl", "]"}], "\[RuleDelayed]", 
            "a"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "In", " ", "order", " ", "to", " ", "define", " ", "orthonormal", 
          " ", "base", " ", "of", " ", "tensor", " ", "product", " ", "we", 
          " ", "need", " ", "to", " ", "know", " ", "orthonormal", " ", 
          "bases", " ", "of", " ", "all", " ", "intermediate", " ", 
          "algebras"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"getBase", "[", 
         RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"getBase", "[", 
         RowBox[{"specAlgebra", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"specific", " ", "algebra", " ", "cases"}], ",", " ", 
          RowBox[{
          "for", " ", "which", " ", "we", " ", "know", " ", "what", " ", 
           "are", " ", "grade", " ", "1", " ", "elements"}], ",", " ", 
          RowBox[{"i", ".", "e", ".", " ", "vectors"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"specAlgebra", ",", "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], ")"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaNotation", "[", "productAlgebra", "]"}], "]"}], "===",
              "gaNotation"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
             RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{"productAlgebra", ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaDefineNotation", "]"}]}], "]"}]}]}],
            "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
         "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "color", " ", "of", " ", "tensor", " ", "product", " ", "and", " ", 
          "isomorphics", " ", "algebra", " ", "are", " ", "set", " ", "to", 
          " ", "be", " ", "the", " ", "same", " ", "by", " ", "default"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              "]"}], "===", "gaNotation"}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"gaNotation", "[", "productAlgebra", "]"}]}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"space", " ", "dimensions"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], "=", 
         
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", 
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "]"}], "=", 
          RowBox[{
           RowBox[{
           "gaVectorSpaceDimension", "[", 
            "alreadyCalculatedProductsAdoptedToSingle", "]"}], "+", "2"}]}]}],
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"the", " ", "standard", " ", "ordering", " ", "stuff"}], 
          ",", " ", 
          RowBox[{
          "same", " ", "as", " ", "for", " ", "simple", " ", "algebra", " ", 
           "case"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"grOnly", "===", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"invdeglexIndexList", "=", 
           RowBox[{"mvInvDegLexSortedIndexList", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"invdeglexIndexList", "=", 
           RowBox[{"mvInvDegLexSortedIndexList", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", "grOnly"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"indSet", "=", "invdeglexIndexList"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "for", " ", "special", " ", "algebras", " ", "vectors", " ", "of", 
          " ", "tensor", " ", "product", " ", "are", " ", "vectors", " ", 
          "of", " ", "arbitrary", " ", "algebra", " ", "multiplied", " ", 
          "by", " ", "bivectors", " ", "of", " ", "special", " ", "algebra"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "and", " ", "vectors", " ", "of", " ", "special", " ", "algebra", 
          " ", "multiplied", " ", "by", " ", "unit", " ", "element", " ", 
          "of", " ", "arbitrary", " ", "algebra"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Note", ":", " ", 
          RowBox[{
          "we", " ", "need", " ", "to", " ", "make", " ", "generated", " ", 
           "vectors", " ", "unique"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfArbitraryAlgebra", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{
              "alreadyCalculatedProductsAdoptedToSingle", ",", 
               "\"\<InvDeg[Lex]\>\"", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                 RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{
             "inc", ",", "alc", ",", "uniqueMaskForArbitraryAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"vectorsOfSpecialAlgebra", "=", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"specAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bivectorsOfSpecialAlgebra", "=", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"specAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                RowBox[{"{", "2", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"unitElement", "[", "productAlgebra", "]"}], "=", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "#", "}"}], ",", 
               RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
            RowBox[{"gaTensorProduct", "@@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", "}"}], " ", ",", 
               RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}], 
            "]"}], ",", "productAlgebra"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "construct", " ", "unsorted", " ", "list", " ", "of", " ", "tensor",
            " ", "product", " ", "algebra", " ", "vectors"}], ",", " ", 
          RowBox[{"very", " ", "inefficient"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfTensorProductAlgebra", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"baseSymbol", "[", 
            RowBox[{"#", ",", "productAlgebra"}], "]"}], "&"}], "@@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Outer", "[", 
                 RowBox[{
                 "GeometricProduct", ",", "vectorsOfArbitraryAlgebra", ",", 
                  "bivectorsOfSpecialAlgebra"}], "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"GeometricProduct", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"baseSymbol", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{
                    "Length", "[", "alreadyCalculatedProducts", "]"}]}], 
                    "]"}]}], "]"}], ",", "alreadyCalculatedProducts", ",", 
                    "uniqueMaskForArbitraryAlgebra"}], "]"}], ",", "#"}], 
                  "]"}], "&"}], "/@", "vectorsOfSpecialAlgebra"}]}], "]"}], 
             ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "al1_", ",", 
                  "___"}], "]"}], ",", 
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"du2_", ",", "up2_"}], "]"}], ",", "al2_", ",", 
                  "___"}], "]"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"du1", ",", "du2"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"up1", ",", "up2"}], "]"}], "}"}]}], "]"}], "}"}],
                  "//.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a___", ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", "b__", "]"}], "}"}], ",", 
                    "c___"}], "]"}], ":>", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], 
                ")"}], ")"}]}], "}"}]}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "sort", " ", "acording", " ", "to", " ", "vector", " ", "square"}], 
          ",", " ", 
          RowBox[{"i", ".", "e", ".", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "...", ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{"-", "1"}]}], "}"}]}], ",", " ", 
          RowBox[{"in", " ", "analogy", " ", "with", " ", 
           RowBox[{"{", 
            RowBox[{"p", ",", "q"}], "}"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{
           RowBox[{"(", "vectorsOfTensorProductAlgebra", ")"}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"indSetReplRul", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
             "]"}], ",", 
            RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "/.", 
             RowBox[{
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "__"}], "]"}], 
              "\[RuleDelayed]", "du1"}]}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"GeometricProduct", "@@@", 
          RowBox[{"Apply", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "#", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"gaTensorProduct", "@@", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}],
                   "}"}]}], "]"}], ",", "productAlgebra"}], "]"}], "&"}], ",", 
            RowBox[{"(", 
             RowBox[{"indSet", "/.", "indSetReplRul"}], ")"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{
            "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
            "]"}], "=", 
           RowBox[{"Prepend", "[", 
            RowBox[{"keysB", ",", 
             RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{
            "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
            "]"}], "=", "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "assign", " ", "grades", " ", "after", " ", "removing", " ", 
          "possible", " ", "minus", " ", "signs"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{"keysB", ",", "_baseSymbol", ",", "Infinity"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"gr", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
          "indSet"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", 
            RowBox[{"keysB", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
           RowBox[{"gr", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"set", " ", "value", " ", "for", " ", "gaRunningAlgebra"}], 
          ",", " ", 
          RowBox[{"because", " ", "many", " ", 
           RowBox[{"gaGetGrade", "[", " ", "]"}], " ", "and", " ", "others", 
           " ", "depend", " ", "on", " ", "it"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"gaRunningAlgebra", "=", "productAlgebra"}], ";"}], "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"quiet", ",", "True", ",", 
          RowBox[{"ifPrint", "=", "False"}], ",", "Automatic", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
             "<", "8"}], ",", 
            RowBox[{"ifPrint", "=", "True"}], ",", 
            RowBox[{"ifPrint", "=", "False"}]}], "]"}], ",", "False", ",", 
          RowBox[{"ifPrint", "=", "True"}], ",", "_", ",", 
          RowBox[{"ifPrint", "=", "True"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"ifPrint", ",", 
          RowBox[{
           RowBox[{"algBoxes", "=", 
            RowBox[{"ToBoxes", "[", "productAlgebra", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"Cell", "[", 
                RowBox[{
                 RowBox[{"BoxData", "[", 
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Basis vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "productAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<,\>\"", 
                    ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                   "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"Cell", "[", 
                RowBox[{
                 RowBox[{"BoxData", "[", 
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"algBoxes", ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], 
                    "}"}], "]"}], "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}],
               "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{
         "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[731]:=",ExpressionUUID->"17491090-7169-444d-b2da-af5b9d96d2d9"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"grOnly", "===", "All"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\""}], "]"}], "=", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
     "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"f72f2ae8-e5ad-4b2e-8d85-c74a81e34d37"],

Cell[TextData[{
 "Set universal unit element grade, this will not influence",
 StyleBox[" private Context",
  FontColor->RGBColor[1, 0, 1]],
 " element ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"2004339b-a5ed-4d7c-b973-c688b4490b2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "__"}],
          "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[732]:=",ExpressionUUID->"7c51d151-19a1-417a-95a4-dd52acd99d83"],

Cell[TextData[{
 "The ",
 StyleBox["gaToTensorProduct[ ]",
  FontWeight->"Bold"],
 " tries to decompose given algebra (or their tensor product, without term \
reordering) into elementary algebras, for which matrix representations are \
well known. Decomposition into algebras Cl[2,0],Cl[1,1],Cl[0,2] enables to \
find orthonormal base (possibly non optimal) using direct product of \
elementary algebras"
}], "Text",ExpressionUUID->"0dc33902-e4f9-45e2-992f-be3c58c2bc19"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"elementaryTPAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reductionAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], "=", 
   "\"\<Reduction set `1` is not allowed\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaToTensorProduct", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"ReductionOrder", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_Cl", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reductionInstruction", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ReductionOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaToTensorProduct", ",", "ReductionOrder"}], "]"}]}], 
           ")"}]}], ",", "reductionInstructionNo00"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", "reductionInstruction", "]"}], ",", 
             "reductionAlgebras"}], "]"}], "=!=", "reductionAlgebras"}], ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"reductionInstructionNo00", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"reductionInstruction", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "0"}], "]"}], ",", "Infinity"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"reductionInstruction", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "__Cl", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{"step", ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              "reductionInstructionNo00"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], ".."}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                RowBox[{"First", "[", 
                 RowBox[{"NestWhile", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "y", "}"}], ",", 
                    RowBox[{"step", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "y", "]"}], ",", 
                    RowBox[{"First", "[", 
                    RowBox[{"Last", "[", "y", "]"}], "]"}]}], "]"}]}], "]"}], 
                    "[", "#", "]"}], ",", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                   RowBox[{"SameTest", "\[Rule]", "UnsameQ"}], ",", 
                   RowBox[{"Plus", "@@", "al"}], ",", "Infinity", ",", "2"}], 
                  "]"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              RowBox[{"(", 
               RowBox[{"RotateRight", "/@", "reductionInstructionNo00"}], 
               ")"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", "al"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"al", "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaTensorProduct", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaToTensorProduct", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[733]:=",ExpressionUUID->"f0cac43a-a5b5-414c-9ba9-84c76d1035cb"],

Cell[TextData[{
 "Help steps of how each specific algebra acts on p\[CloseCurlyQuote]s and q\
\[CloseCurlyQuote]s. See ",
 ButtonBox["[NDNO-CoMISoMvCA], [NDSK-EIoRCA],[MRdT].",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text",ExpressionUUID->"05bf773e-bea5-4d74-8f4a-bfdbd69f354f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}], "-", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"step", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"al", ",", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"col", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input",\

 CellLabel->
  "In[740]:=",ExpressionUUID->"e2b95f55-d196-4acd-946c-7969f350f8e6"],

Cell["\<\
The reverse step, i.e. reconstruction of algebra from tensor products is much \
simple, because we don\[CloseCurlyQuote]t need to realize different \
possibilities\
\>", "Text",ExpressionUUID->"a44a8f39-8078-43d6-8469-d67e5178d3b6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{"ar", "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[744]:=",ExpressionUUID->"2e03cc5f-3e40-447c-a7ab-d9d15462853c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_gaTensorProduct", "]"}], ":=", 
   RowBox[{"Cl", "@@", 
    RowBox[{"Fold", "[", 
     RowBox[{"stepRev", ",", 
      RowBox[{"List", "@@@", 
       RowBox[{"(", 
        RowBox[{"List", "@@", "al"}], ")"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_Cl", "]"}], ":=", "al"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[747]:=",ExpressionUUID->"16fbb544-26f0-494c-85d5-878560147981"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Matrix representations of Clifford algebras"
}], "Subsubsection",ExpressionUUID->"6b939310-0ac4-4f83-be43-f67d5d5a528e"],

Cell["\<\
Matrix representations of elementary algebras. For general representations we \
limit ourselves only with simple one parameter representations. In general \
(see Cl2Allrepresentations.nb)  representations, which have up to 3 free \
parameters can be constructed. These representations, however, become \
singular for some parameter values, so not included here). Representations \
are listed in order of preference, i.e. Option Automatic will simply take \
first representation of the list.\
\>", "Text",ExpressionUUID->"5e04349c-e89b-4453-bdf9-a0c8881e0241"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[749]:=",ExpressionUUID->"cc91ff43-d28b-482a-be73-3ba36c80c350"],

Cell["\<\
For Cl[1,0,0]: note outer multiply with {{{0,1},{1,0}} choice will not give \
block diagonal representation! \
\>", "Text",ExpressionUUID->"2d39579c-cb56-4b14-97e8-b5a458470a2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Diagonal\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[750]:=",ExpressionUUID->"eb8a3752-a219-4986-8081-23da3b90344f"],

Cell["For Cl[0,1,0]", "Text",ExpressionUUID->"1158ca6d-7a2b-4078-832c-c1c5afb310fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", "\"\<Complex\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "I", "}"}], "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[751]:=",ExpressionUUID->"58f6f4ea-7bc7-409c-a237-5e64d7f13d66"],

Cell["For Cl[2,0,0]", "Text",ExpressionUUID->"b38a2216-04d4-4e65-8628-b4f0c0bbbf33"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[1,2]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[2,3]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[3,1]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"this", " ", "is"}], " ", "-", 
       RowBox[{"I", "*", 
        RowBox[{"Pauli", "[", 
         RowBox[{"3", ",", "1"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[752]:=",ExpressionUUID->"2b946737-44b6-451d-9d2e-6e6d73d49ef9"],

Cell["For Cl[1,1,0]", "Text",ExpressionUUID->"2c5fdd3a-19a6-4dce-bd2e-97d71e72f516"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<SymmetricComplex\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary1\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary2\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[753]:=",ExpressionUUID->"cb52c7bd-0855-49a8-859e-4de8a9ef6df0"],

Cell["For Cl[0,2,0]", "Text",ExpressionUUID->"3bef303a-2d39-473f-83a0-e62c7ff49610"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[1,2]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[2,3]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[3,1]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"-", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}],
        ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Real\>\""}], 
        "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        "}"}]}], ",", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"quaternionic", " ", "representations"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[1,2]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[2,3]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[3,1]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]", 
         "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[754]:=",ExpressionUUID->"0328597e-8fe7-4b0d-92f9-a316bbe443df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", "al_Cl", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
        RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", 
     RowBox[{"al_Cl", ",", "rep_String", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"BasisVectorsMultipliers", "/.", 
              RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
           ")"}]}], ",", 
         RowBox[{"repMatrix", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"vRep", "[", 
             RowBox[{"al", ",", "rep"}], "]"}], "/.", 
            RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"mult", ",", 
            RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
           RowBox[{"{", 
            RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaDefineMatrixRepresentation", "::", 
              "BasisVectorsMultipliers"}], ",", "mult", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
           RowBox[{"mult", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{"repMatrix", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
           ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
           "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
         "rep"}], "]"}]}], "&&", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
        ",", "rep"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BasisVectorsMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}], ",", "repMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"mult", ",", 
           RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
         RowBox[{"mult", "=", 
          RowBox[{"Table", "[", 
           RowBox[{"1", ",", 
            RowBox[{"{", 
             RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}],
             ",", "mult", ",", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"arg", "=", 
            RowBox[{"Unique", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"repMatrix", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vRep", "[", 
               RowBox[{"al", ",", "rep", ",", "arg"}], "]"}], "/.", 
              RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}], ";", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mult", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{"repMatrix", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
         "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"x_Symbol", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"Symbol", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"SymbolName", "[", "x", "]"}], ",", 
              RowBox[{"\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
             "]"}], "]"}], "/;", 
           RowBox[{
            RowBox[{"Context", "[", "x", "]"}], "===", 
            "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
         ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
       "rep"}], "]"}], "&&", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
       ",", "rep"}], "]"}]}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[755]:=",ExpressionUUID->"ab6bea84-001b-4b02-9aa9-6b8fb29d0ba7"],

Cell[TextData[{
 "Help function ",
 StyleBox["gaElementaryAlgebraToMatrixRepresentationRules[ ] ",
  FontWeight->"Bold"],
 "construct replacement rules index->matrix for each of vectors (and identity \
element). Note. When dealing with function gaOrthonormalBasis",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", which does not hold its arguments, then",
 StyleBox[" ValueQ[",
  FontWeight->"Bold"],
 "gaOrthonormalBasis",
 StyleBox["[ ]]",
  FontWeight->"Bold"],
 " returns True if argument was evaluated. So, in this way we cannot decide \
if  base was defined. Then instead of  ",
 StyleBox["ValueQ[ ]",
  FontWeight->"Bold"],
 " for base definition we use check ",
 StyleBox["Head[",
  FontWeight->"Bold"],
 "gaOrthonormalBasis",
 StyleBox["[al,{1}]]===",
  FontWeight->"Bold"],
 "gaOrthonormalBasis"
}], "Text",ExpressionUUID->"8b74032a-596c-4fee-b8ce-04141b63b542"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
     "representation"}], "=", 
    "\"\<Algeba `1` matrix representation `2` is undefined. Select from \
defined values `3`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "replRules", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep", ",", "opts"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep", ",", "opts"}], "]"}], "]"}], "===", 
          "gaListDefinedElementaryRepresentations"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", "rep", ",", 
            RowBox[{
            "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"replRules", "=", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"index2Repl", ",", 
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", "rep", ",", "opts"}], "]"}]}], "]"}], "]"}],
            ")"}], ",", 
          RowBox[{
           RowBox[{"{", "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{"di", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input",\

 CellLabel->
  "In[758]:=",ExpressionUUID->"554103e6-a29b-4723-9efd-93a40e169911"],

Cell["\<\
The explicit specification of elementary algebras matrix representations.\
\>", "Text",ExpressionUUID->"47be6f27-a1e2-4cb4-a3be-3ca2063d46e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"rep__", "?", "MatrixQ"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "newRep", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"{", "rep", "}"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BasisVectorsMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"{", "rep", "}"}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{
               RowBox[{"{", "rep", "}"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ")"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", 
            RowBox[{"{", "rep", "}"}], ",", 
            RowBox[{
            "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}],
             ",", "mult", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
          
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newRep", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"{", "rep", "}"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"index2Repl", ",", "newRep"}], "]"}], "]"}], ")"}], ",", 
         RowBox[{
          RowBox[{"{", "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"IdentityMatrix", "[", 
            RowBox[{"di", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[760]:=",ExpressionUUID->"d673cd2d-15a8-4500-b2c4-5a6883ae1b9f"],

Cell["\<\
Quaternion tensor product H\[CircleTimes]H ->R(4) isomorphism rules, taken \
from [NDSK-EIoRCA]. And simple C\[CircleTimes]H->C(2) rules, using Pauli 1,2 \
matrix representation  \
\>", "Text",ExpressionUUID->"9962236f-dfbf-487d-aa34-55b0ca8cecff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<HH2R4\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "\"\<IToRealMatrix\>\"", " ", "rules", " ", "are", " ", "implemented", 
       " ", 
       RowBox[{"differently", ".", " ", "Only"}], " ", "special", " ", 
       "cases", " ", 
       RowBox[{"works", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<IToRealMatrix\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProductI", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", 
          RowBox[{"-", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", "I", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", 
          RowBox[{"-", "I"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<QToRealMatrix\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "without", " ", "isomorphismPreRules", " ", "BaseVectorMultiplies", " ", 
       RowBox[{"don", "'"}], "t", " ", "properly", " ", "work", " ", "with", 
       " ", "above", " ", "isomorphism", " ", "rules"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"isomorphismPreRules", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", "c_", ",", "a3___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "1", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "c", "}"}], ",", 
             RowBox[{"MV", "|", "bs"}], ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
           RowBox[{"c", "=!=", "1"}]}]}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", 
           RowBox[{"c_", "*", "a2_"}], ",", "a3___"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "a2", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "c", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "}"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[761]:=",ExpressionUUID->"af198689-fe63-473c-952c-2aa5f912deba"],

Cell[TextData[{
 "Help function",
 StyleBox[" applyQuaternionIsomorphismRules[ ]",
  FontWeight->"Bold"],
 ", which apply isomorphism rules under request. The  ",
 StyleBox["nestedApplyQuaternionIsomorphismRules[ ] ",
  FontWeight->"Bold"],
 "apply list of these rules repeatedly"
}], "Text",ExpressionUUID->"2444e767-719e-43aa-bcf8-ac696b7ebc2b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"applyQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rule", ":", 
         RowBox[{"(", 
          RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
       "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
   RowBox[{"ArrayFlatten", "[", 
    RowBox[{"expr", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{"a1_", ",", "a2_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a1", ",", "a2"}], "]"}], "/.", "isomorphismPreRules"}],
             ")"}], "/.", 
           RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
         RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        RowBox[{
        "\"\<Pauli[1,2]\>\"", "|", "\"\<IToRealMatrix\>\"", "|", 
         "\"\<QToRealMatrix\>\""}]}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "a1", "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nestedQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{"rule_List", ",", 
        RowBox[{"theRule", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Pauli[1,2]\>\"", "|", "\"\<HH2R4\>\"", "|", 
           "\"\<IToRealMatrix\>\"", "|", "\"\<QToRealMatrix\>\""}], ")"}]}]}],
        "}"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nestNumber", "=", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"Length", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
            "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"applyQuaternionIsomorphismRule", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{"rule", ",", "theRule"}], "}"}]}], "]"}], "&"}], ",", 
        "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", "ruleListList_", ",", 
     "type_List"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "ruleListList", "]"}], "===", 
      RowBox[{"Length", "[", "type", "]"}]}], ",", 
     RowBox[{"Fold", "[", 
      RowBox[{"nestedQuaternionIsomorphismRule", ",", "expr", ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"ruleListList", ",", "type"}], "}"}], "]"}]}], "]"}], ",", 
     "expr"}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[762]:=",ExpressionUUID->"c92ebfe4-be39-406a-9c4e-556bcfdb6856"],

Cell[TextData[{
 "Help function",
 StyleBox[" singleElementOuterMultiply[ ]",
  FontWeight->"Bold"],
 " construct outer product for single algebra element."
}], "Text",ExpressionUUID->"25567cf3-ccfa-4176-a986-2401bfb33078"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"singleElementOuterMultiply", "[", 
       RowBox[{
        RowBox[{"c_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{"ind_mvDownUp", ",", "algTP_gaTensorProduct"}], "]"}]}], 
        ",", "algRepRules_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "productMatrices", ",", "opElement", ",", "opMatrix", ",", "marks", 
           ",", "vars", ",", "varsWithMarks", ",", 
           RowBox[{"replaceTensorProducts", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"theQuaternionReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "quaternionReplacement", ",", 
           RowBox[{"theImaginaryIReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "imaginaryIReplacement", ",", 
           "matrixOuterProductOrder", ",", "resultWithoutQuaternionRepl", ",",
            "resultWithQuaternionReplButWithoutIRepl"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"quaternionReplacement", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"QuaternionIsomorphismRules", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"QuaternionIsomorphismRules", "\[Rule]", 
               RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"imaginaryIReplacement", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{"quaternionReplacement", ",", 
             RowBox[{"{", "\"\<IToRealMatrix\>\"", "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"quaternionReplacement", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{"quaternionReplacement", ",", "\"\<IToRealMatrix\>\""}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"matrixOuterProductOrder", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"MatrixOuterProductOrder", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}], 
              "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRepRules", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"varsWithMarks", "=", 
              RowBox[{"Thread", "[", 
               RowBox[{"List", "[", 
                RowBox[{
                 RowBox[{"marks", "=", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}], "&"}], "/@",
                     "algRepRules"}], ")"}]}], ",", 
                 RowBox[{"vars", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"Unique", "[", "sEOM", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "algRepRules", "]"}], "}"}]}], 
                   "]"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{"marks", ",", "False"}], "]"}], "===", "1"}], 
                 ")"}], "&&", 
                RowBox[{"quaternionReplacement", "===", 
                 RowBox[{"{", "}"}]}]}], ",", 
               RowBox[{"(*", " ", 
                RowBox[{
                "for", " ", "single", " ", "quaternion", " ", "can", " ", 
                 "use", " ", "GeometricProduct", " ", "immediatelly", " ", 
                 "if", " ", "option", " ", "isomorphismRules", " ", "not", 
                 " ", "set"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"replaceTensorProducts", "=", 
                  RowBox[{"{", 
                   RowBox[{"RuleDelayed", "@@", 
                    RowBox[{
                    StyleBox["{",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{
                    StyleBox["(",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"Pattern", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Blank", "[", "]"}]}], "]"}], "&"}],
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    StyleBox["/@",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], "vars"}], ")"}]}], ",", 
                    RowBox[{"Times", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"True", "\[Rule]", "Nothing"}]}], "]"}]}], ")"}], 
                    ",", 
                    RowBox[{"(", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"False", "\[Rule]", "Nothing"}]}], "]"}]}], 
                    ")"}]}], "]"}]}], "}"}]}], "}"}]}], ")"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"theQuaternionReplacementRules", "=", 
                 RowBox[{
                 "isomorphismRules", "/@", "quaternionReplacement"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"opElement", "=", "gaTensorProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"productMatrices", "=", 
           RowBox[{"(", 
            RowBox[{"opMatrix", "@@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{"ReplaceAll", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"List", "@@", 
                  RowBox[{"(", 
                   RowBox[{"ind", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "a_", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", "a"}], "}"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", "algRepRules"}], "}"}]}], "]"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"opElement", "===", "Times"}], ")"}], "&&", 
             RowBox[{"(", 
              RowBox[{"matrixOuterProductOrder", "===", "Reverse"}], ")"}]}], 
            ",", 
            RowBox[{"productMatrices", "=", 
             RowBox[{"Reverse", "[", "productMatrices", "]"}]}]}], "]"}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"resultWithoutQuaternionRepl", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "*", 
                 RowBox[{"Nest", "[", 
                  RowBox[{"ArrayFlatten", ",", 
                   RowBox[{"Outer", "[", 
                    RowBox[{"opElement", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", "productMatrices", ")"}]}]}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "productMatrices", "]"}], "-", 
                    "1"}]}], "]"}]}], ")"}], "/.", "replaceTensorProducts"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[RuleDelayed]", "1"}],
               "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"resultWithQuaternionReplButWithoutIRepl", "=", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"quaternionReplacement", "===", 
               RowBox[{"{", "}"}]}], ",", "resultWithoutQuaternionRepl", ",", 
              
              RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
               RowBox[{
               "resultWithoutQuaternionRepl", ",", 
                "theQuaternionReplacementRules", ",", 
                "quaternionReplacement"}], "]"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"imaginaryIReplacement", "===", 
             RowBox[{"{", "}"}]}], ",", 
            "resultWithQuaternionReplButWithoutIRepl", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theImaginaryIReplacementRules", "=", 
              RowBox[{"isomorphismRules", "/@", "imaginaryIReplacement"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                   "Flatten", "[", "resultWithQuaternionReplButWithoutIRepl", 
                    "]"}], ",", "0"}], "]"}], "]"}], "===", 
                RowBox[{
                "Length", "[", "resultWithQuaternionReplButWithoutIRepl", 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", "isomorphismIRule"}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ArrayFlatten", "@@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"resultWithQuaternionReplButWithoutIRepl", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"cc", ":", 
                    RowBox[{"(", 
                    RowBox[{"1", "|", 
                    RowBox[{"-", "1"}], "|", "I", "|", 
                    RowBox[{"-", "I"}]}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"gaTensorProductI", "[", "cc", "]"}]}], "}"}]}], 
                    ")"}], "/.", "theImaginaryIReplacementRules"}], ")"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaTensorProductI", "[", "0", "]"}], "\[Rule]", 
                    "0"}], "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", 
                  "isomorphismIRuleBad"}], "]"}], ";", "\[IndentingNewLine]", 
                "resultWithQuaternionReplButWithoutIRepl"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[766]:=",ExpressionUUID->"e15179ba-0719-4a98-a6c6-9518331698c8"],

Cell[TextData[{
 "Function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaDefineMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " construct entire algebra matrix representation from known elementary \
algebras representation. For complex (\[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]) representations, when in the decomposition appears \
algebra Cl[1,0] we use the following trick. First restore Cl[p,q] algebra \
from direct from direct product decomposition. Then instead of Cl[p,q] take \
Cl[q,p], for which decomposition into direct product yields Cl[0,1] (instead \
of Cl[1,0]). Calculate orthonormal base and matrix representation for this \
algebra. Take matrices, which corresponds vectors of calculated matrices. \
Multiply these vectors by  imaginary unit \[ImaginaryI]. This effectively \
will turn algebra Cl[q,p] vectors into Cl[p,q] vectors which we are seeking. \
Construct entire base of algebra using these matrices. The little problem is \
how to ensure strict correspondence between matrices obtained in this way and \
Cl[p,q] elements (if this is possible in general). "
}], "Text",ExpressionUUID->"cb6f7345-5eaa-463d-8231-cb699aa451e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"groupByGrade", "[", 
    RowBox[{"x_List", ",", "algebra_"}], "]"}], ":=", 
   RowBox[{"Internal`PartitionRagged", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Length", "/@", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"algebra", ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
           RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[767]:=",ExpressionUUID->"6217af8e-f291-4a5f-a58d-8f82e1c54e27"],

Cell["\<\
If an algebra is elementary, just replace by defined representation\
\>", "Text",ExpressionUUID->"2c3ab399-4e9f-4e2a-8d99-3660d335853f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "Options", "[", "defineMatrixRepresentationTensorProductMethod", "]"}], 
   "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ElementaryRepresentations", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"BaseVectorAlgebra", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
     RowBox[{"ReductionOrder", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], ",", 
     
     RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}], ",", 
     RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[768]:=",ExpressionUUID->"9bbc0161-7f45-4686-bd06-988971ddfd73"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_Cl", ",", "generalOpts_List", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"repRules", "=", 
         RowBox[{"OptionValue", "[", "ElementaryRepresentations", "]"}]}], 
        ",", 
        RowBox[{"definedReps", "=", 
         RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}]}],
         ",", "\[IndentingNewLine]", "gradesOnly", ",", "quiet", ",", 
        "basisVectorsMultipliers", ",", "\[IndentingNewLine]", 
        "quaternionReplacement", ",", "whi", ",", "thisRep", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "}"}]}], ",", "answer", ",", "opMatrix", ",", 
        "alvectors", ",", "sortedAnswer", ",", "answerFin"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"quiet", ",", "basisVectorsMultipliers", ",", "gradesOnly"}],
          "}"}], "=", "generalOpts"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "if", " ", "there", " ", "are", " ", "no", " ", "elementary", " ", 
          "representation", " ", "replacement", " ", "rules"}], ",", " ", 
         RowBox[{"then", " ", "define"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"repRules", "===", "Automatic"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"whi", "=", 
              RowBox[{"Cases", "[", 
               RowBox[{"gaDefaultMatrixRepresentationData", ",", 
                RowBox[{"{", 
                 RowBox[{"al", ",", "__"}], "}"}]}], "]"}]}], ")"}], "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "if", " ", "elementary", " ", "matrices", " ", "are", " ", "put", 
             " ", "in", " ", "default", " ", "data", " ", "take", " ", 
             "them"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"thisRep", "=", 
            RowBox[{"al", "/.", 
             RowBox[{"whi", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"else", " ", "determine", " ", "automatically"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "NoDefaultData"}],
               ",", "al", ",", 
              RowBox[{
              "gaListDefinedElementaryRepresentations", "[", "al", "]"}], ",", 
              RowBox[{
              "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}],
              "]"}], ";", 
            RowBox[{"thisRep", "=", 
             RowBox[{"al", "/.", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}],
                 "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"thisRep", "=", 
          RowBox[{"(", 
           RowBox[{"al", "/.", "repRules"}], ")"}]}]}], "\[IndentingNewLine]",
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "if", " ", "we", " ", "have", " ", "a", " ", "list", 
         " ", "of", " ", "matrices", " ", "after", " ", "replacement"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"thisRep", ",", 
           RowBox[{"{", 
            RowBox[{"__", "?", "MatrixQ"}], "}"}]}], "]"}], ",", "thisRep", 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"thisRep", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "thisRep", "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "special", " ", "case", " ", "for", " ", "compatability", " ", 
            "to", " ", "decide", " ", "if", " ", "we", " ", "need", " ", "to",
             " ", "replace", " ", "quaternion", " ", "by", " ", "matrices"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"quaternionReplacement", "=", 
           RowBox[{"OptionValue", "[", "QuaternionIsomorphismRules", "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"quaternionReplacement", "===", "True"}], ")"}], "||", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"{", "quaternionReplacement", "}"}], "]"}], ",", 
               "\"\<Pauli[1,2]\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"bs", "=", 
                 RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}],
                 "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"theQuaternionReplacementRules", "=", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "I"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"definedReps", ",", "thisRep"}], "]"}], "===", 
             RowBox[{"Union", "[", "definedReps", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"answer", "=", 
             RowBox[{
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", 
                RowBox[{"First", "[", "thisRep", "]"}], ",", 
                RowBox[{
                "BasisVectorsMultipliers", "->", 
                 "basisVectorsMultipliers"}]}], "]"}], "/.", 
              "theQuaternionReplacementRules"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
                "representation"}], ",", "al", ",", "thisRep", ",", 
               RowBox[{
               "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
              "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"answer", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"opMatrix", "=", "Dot"}], ",", "\[IndentingNewLine]", 
            RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
             "gaOrthonormalBasis"}], ",", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
              RowBox[{"gaGradesOnly", "\[Rule]", 
               RowBox[{"{", "1", "}"}]}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
              ",", 
              RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"alvectors", "=", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"First", "[", "answer", "]"}], "]"}], "]"}], "*", 
                   "#"}], ")"}], "&"}], "/@", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", 
                  "alvectors"}], "]"}]}], "=!=", " ", 
               RowBox[{"opMatrix", "[", 
                RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"sortedAnswer", "=", 
               RowBox[{"Sort", "[", 
                RowBox[{"answer", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Dot", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                    RowBox[{
                    RowBox[{"opMatrix", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
                "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], 
              "]"}], ";", " ", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"answerFin", "=", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"alvectors", ",", "sortedAnswer"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "if", " ", "full", " ", "algebra", " ", "representation", " ", 
            "was", " ", "requested", " ", "call", " ", 
            RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", 
            " ", "special", " ", "syntax"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"gradesOnly", ",", "\[IndentingNewLine]", 
            RowBox[{"{", "1", "}"}], ",", "answerFin", ",", 
            "\[IndentingNewLine]", "All", ",", 
            RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}], 
            ",", "\[IndentingNewLine]", "_", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaOptionValue", "::", "option"}], ",", 
               RowBox[{"Style", "[", 
                RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
               ",", " ", "gaGradesOnly", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", "All"}], "}"}], ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
             "answerFin"}]}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[769]:=",ExpressionUUID->"d4890554-90e0-42a9-86f4-1d2a82521921"],

Cell["\<\
When algebra is not elementary, reduce to tensor product of reduced algebras\
\>", "Text",ExpressionUUID->"6af371d5-cdce-42d3-9d00-718c673adabd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_Cl", ",", "generalOpts_List", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"orderAttempt", "=", 
       RowBox[{"OptionValue", "[", "ReductionOrder", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
       RowBox[{
        RowBox[{"gaToTensorProduct", "[", 
         RowBox[{"al", ",", 
          RowBox[{"ReductionOrder", "->", "orderAttempt"}]}], "]"}], ",", 
        "generalOpts", ",", "opts"}], "]"}], "/;", 
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[770]:=",ExpressionUUID->"020ae9ac-d0ef-4107-9b7a-be91adf56222"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_gaTensorProduct", ",", "generalOpts_List", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alout", "=", 
        RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}], ",", "quiet", ",", 
       "mult", ",", 
       RowBox[{"target", "=", 
        RowBox[{"OptionValue", "[", "TargetMatrices", "]"}]}], ",", 
       "gradesOnly", ",", 
       RowBox[{"matrixOuterProductOrder", "=", 
        RowBox[{"OptionValue", "[", "MatrixOuterProductOrder", "]"}]}], ",", 
       RowBox[{"orderAttempt", "=", 
        RowBox[{"OptionValue", "[", "ReductionOrder", "]"}]}], ",", 
       RowBox[{"submethodBVA", "=", 
        RowBox[{"OptionValue", "[", "BaseVectorAlgebra", "]"}]}], ",", 
       RowBox[{"quaternionReplacement", "=", 
        RowBox[{"OptionValue", "[", "QuaternionIsomorphismRules", "]"}]}], 
       ",", 
       RowBox[{"repRulesSetting", "=", 
        RowBox[{"OptionValue", "[", "ElementaryRepresentations", "]"}]}], ",",
        "repRules", ",", "algRep", ",", "newAl", ",", "algIso", ",", 
       "reductionOrder", ",", "counter", ",", "repNames", ",", 
       "signatureSplittedVectors", ",", "signatureSplittedSortedVectors", ",",
        "algTrueMinusAlgHelp", ",", "removeVectorList", ",", "addVectorList", 
       ",", "remPos", ",", "theQuaternionReplacementRules", ",", "msgHelp", 
       ",", "opMatrix", ",", "answer", ",", "answerFin", ",", "alvectors", 
       ",", "sortedAnswer"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"quiet", ",", "mult", ",", "gradesOnly"}], "}"}], "=", 
       "generalOpts"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"List", "@@", "al"}], ",", "elementaryTPAlgebras"}], "]"}],
          "=!=", "elementaryTPAlgebras"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineMatrixRepresentation", "::", "unable"}], ",", 
           "al"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"mult", ",", 
          RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Plus", "@@@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "/@", "mult"}], "=!=", 
         RowBox[{"(", 
          RowBox[{"Plus", "@@@", 
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}], 
           ",", "mult", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
             RowBox[{"Plus", "@@@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"orderAttempt", ",", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}]}], "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", "orderAttempt", "]"}], "]"}]}], "]"}], "===", 
           RowBox[{"{", "2", "}"}]}], ")"}]}], ",", 
        RowBox[{"reductionOrder", "=", "orderAttempt"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", " ", 
          "defineMatrixRepresentationTensorProductMethod", ",", 
          "ReductionOrder", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}], "}"}], ",", 
          RowBox[{"Abort", "[", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"submethodBVA", "=!=", "Automatic"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ")"}], "=!=", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@", "submethodBVA"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionValue", "::", "option"}], ",", 
              "defineMatrixRepresentationTensorProductMethod", ",", " ", 
              "BaseVectorAlgebra", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", 
                   RowBox[{
                    RowBox[{"Plus", "@@", 
                    RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}], "-", 
                    "#"}]}], "}"}], "&"}], "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"Plus", "@@", 
                   RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}]}], 
                 "]"}]}], ")"}], ",", "Automatic"}], "]"}], ";", 
            RowBox[{"submethodBVA", "=", "Automatic"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "quaternionReplacement", ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"theQuaternionReplacementRules", "=", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"{", "quaternionReplacement", "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Pauli[1,2]\>\"", ",", "\"\<HH2R4\>\"", ",", 
              "\"\<IToRealMatrix\>\"", ",", "\"\<QToRealMatrix\>\""}], 
             "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "If", "  ", "ElementaryRepresentations", " ", "was", " ", "not", " ", 
         "provided", " ", "by", " ", "user"}], ",", " ", 
        RowBox[{"take", " ", "defaults"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "repRulesSetting", ",", "Automatic", ",", "\[IndentingNewLine]", 
        RowBox[{"repRules", "=", 
         RowBox[{
          RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
           RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", "repRulesSetting"}], ";"}], ",", 
        "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           "defineMatrixRepresentationTensorProductMethod", ",", 
           "ElementaryRepresentations", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}], ",", 
           "Automatic"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"repRules", "=", 
          RowBox[{
           RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
            RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"submethodBVA", ",", 
        RowBox[{"Automatic", "|", "al"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"repRules", ",", 
                   RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}], ")"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"msgHelp", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], ",", 
              "al", ",", "repRules", ",", "msgHelp", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "gaListDefinedElementaryRepresentations", "[", "#", "]"}], 
                "&"}], "/@", "msgHelp"}]}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"repNames", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"alP_Cl", "\[RuleDelayed]", 
               RowBox[{"{", 
                RowBox[{"alP", ",", 
                 RowBox[{"++", 
                  RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], "}"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"RotateLeft", "[", 
                  RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                   "}"}]}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"algRep", "=", 
          RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
           RowBox[{"(", 
            RowBox[{"Append", "@@@", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"repNames", ",", 
                RowBox[{"Thread", "[", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"BasisVectorsMultipliers", ",", "mult"}], "]"}], 
                 "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ", 
            "already", " ", "defined"}], ",", " ", 
           RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"getBase", "[", 
              RowBox[{"al", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "here", " ", "was", " ", "the", " ", "problem", " ", "of", " ", 
           "different", " ", "ordering", " ", "on", " ", "repeated", " ", 
           "calculation"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "solution", " ", "was", " ", "to", " ", "insert", " ", 
            "additional", " ", 
            RowBox[{"Sort", "[", "]"}]}], ",", " ", 
           RowBox[{
           "which", " ", "ensures", " ", "the", " ", "vectors", " ", "are", 
            " ", "first", " ", "ordered", " ", "lexicographically"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "and", " ", "onle", " ", "then", " ", "reordered", " ", "by", " ", 
           "signature"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "suggest", " ", "method", " ", "for", " ", "smaller", " ", 
           "complex", " ", "matrix", " ", "representations", " ", "when", " ", 
           RowBox[{"C", "[", 
            RowBox[{"1", ",", "0"}], "]"}], " ", "appears", " ", "in", " ", 
           "decomposition", " ", "with", " ", "complex", " ", "matrices"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRep", ",", "\"\<Quaternion\>\""}], "]"}], "&&", 
            RowBox[{"Not", "[", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"List", "@@", "al"}], ",", 
               RowBox[{"Cl", "[", 
                RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], "]"}], "]"}], "&&", 
            RowBox[{"!", "quiet"}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], ",", 
             "al", ",", 
             RowBox[{"Cl", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], 
               ")"}]}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "calculate", " ", "matrix", " ", "representations", " ", "for", " ",
            "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"singleElementOuterMultiply", "[", 
                  RowBox[{"#", ",", "algRep", ",", 
                   RowBox[{
                   "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}], ",", 
                   RowBox[{
                   "MatrixOuterProductOrder", "->", 
                    "matrixOuterProductOrder"}]}], "]"}], "&"}], "/@", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
               "\[RuleDelayed]", "singlet"}], ",", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
             "}"}]}], ")"}]}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"Cl", "[", "__", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"newAl", "=", 
          RowBox[{"gaToTensorProduct", "[", 
           RowBox[{
            RowBox[{"algIso", "=", "submethodBVA"}], ",", 
            RowBox[{"ReductionOrder", "->", "reductionOrder"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mult", "===", "Automatic"}], "|", "1"}], ",", 
           RowBox[{"mult", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "/@", "mult"}], "=!=", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaDefineMatrixRepresentation", "::", 
               "BasisVectorsMultipliers"}], ",", "mult", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                RowBox[{"Plus", "@@@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}], "]"}], 
            ";", 
            RowBox[{"mult", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"repRules", ",", 
                   RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"msgHelp", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "newAl"}], ")"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "newAl"}], ")"}]}], "]"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], ",", 
              "newAl", ",", "repRules", ",", "msgHelp", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "gaListDefinedElementaryRepresentations", "[", "#", "]"}], 
                "&"}], "/@", "msgHelp"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ", 
            "already", " ", "defined"}], ",", " ", 
           RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"newAl", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"getBase", "[", 
             RowBox[{"newAl", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"repNames", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"List", "@@", "newAl"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"alP_Cl", "\[RuleDelayed]", 
               RowBox[{"{", 
                RowBox[{"alP", ",", 
                 RowBox[{"++", 
                  RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], "}"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"RotateLeft", "[", 
                  RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                   "}"}]}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"algRep", "=", 
          RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
           RowBox[{"(", 
            RowBox[{"Append", "@@@", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"repNames", ",", 
                RowBox[{"Thread", "[", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"BasisVectorsMultipliers", ",", "mult"}], "]"}], 
                 "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"signatureSplittedVectors", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"singleElementOuterMultiply", "[", 
                RowBox[{"#", ",", "algRep", ",", 
                 RowBox[{
                 "QuaternionIsomorphismRules", "->", 
                  "theQuaternionReplacementRules"}]}], "]"}], "&"}], ",", 
              RowBox[{"Split", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"newAl", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "===", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}],
               ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
               "\[RuleDelayed]", "singlet"}], ",", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
             "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"signatureSplittedSortedVectors", "=", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Sort", "[", 
               RowBox[{"x", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"FreeQ", "[", 
                   RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
               "]"}]}], "]"}], ",", "signatureSplittedVectors"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"algIso", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", 
               RowBox[{"_", "?", "Positive"}], ",", "0"}], "]"}]}], "]"}], 
           ",", 
           RowBox[{"PrependTo", "[", 
            RowBox[{"signatureSplittedSortedVectors", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"algIso", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{
               RowBox[{"_", "?", "Positive"}], ",", "0", ",", "0"}], "]"}]}], 
            "]"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"signatureSplittedSortedVectors", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"target", "=!=", "Reals"}], ",", 
           RowBox[{"signatureSplittedSortedVectors", "=", 
            RowBox[{"Reverse", "/@", "signatureSplittedSortedVectors"}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"algTrueMinusAlgHelp", "=", 
          RowBox[{"(", 
           RowBox[{"Subtract", "@@", 
            RowBox[{"(", 
             RowBox[{"Most", "/@", 
              RowBox[{"(", 
               RowBox[{"List", "@@@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"gaFromTensorProduct", "[", "al", "]"}], ",", 
                  "algIso"}], "}"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{"algTrueMinusAlgHelp", ",", 
            RowBox[{"(*", " ", 
             RowBox[{"0", ",", 
              RowBox[{
              "0", " ", "means", " ", "we", " ", "calculate", " ", "in", " ", 
               "naitive", " ", "algebra"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"signatureSplittedSortedVectors", ",", "1"}], "]"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_Integer", "?", "Negative"}], ",", 
              RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
              "has", " ", "more", " ", "positive", " ", "signature", " ", 
              "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"removeVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{"addVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Drop", "[", 
                 RowBox[{"removeVectorList", ",", 
                  RowBox[{"algTrueMinusAlgHelp", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                 "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_Integer", "?", "Positive"}], ",", 
              RowBox[{"_Integer", "?", "Negative"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
              "has", " ", "more", " ", "negative", " ", "signature", " ", 
              "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"removeVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", 
             RowBox[{"addVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"Drop", "[", 
                 RowBox[{"removeVectorList", ",", 
                  RowBox[{"algTrueMinusAlgHelp", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], 
           "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"test", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"answer", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"opMatrix", "=", "Dot"}], ",", "\[IndentingNewLine]", 
        RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alout", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"alout", ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"gaGradesOnly", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}], ",", 
          RowBox[{
          "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alvectors", "=", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"alout", ",", "\"\<InvDeg[Lex]\>\"", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"IdentityMatrix", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"First", "[", "answer", "]"}], "]"}], "]"}], "*", 
               "#"}], ")"}], "&"}], "/@", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", "alvectors"}], 
             "]"}]}], "=!=", " ", 
           RowBox[{"opMatrix", "[", 
            RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"sortedAnswer", "=", 
           RowBox[{"Sort", "[", 
            RowBox[{"answer", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Dot", "[", 
                  RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                RowBox[{
                 RowBox[{"opMatrix", "[", 
                  RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
            "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answerFin", "=", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"alvectors", ",", "sortedAnswer"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "if", " ", "full", " ", "algebra", " ", "representation", " ", "was", 
        " ", "requested", " ", "call", " ", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", " ", 
        "special", " ", "syntax"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"gradesOnly", ",", "\[IndentingNewLine]", 
        RowBox[{"{", "1", "}"}], ",", "answerFin", ",", "\[IndentingNewLine]",
         "All", ",", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "gaGradesOnly", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "1", "}"}], ",", "All"}], "}"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "answerFin"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[771]:=",ExpressionUUID->"857d310c-9b2c-4477-b16e-d7de6f6b376e"],

Cell["\<\
Explicit check if matrix representation matches symbolic GA orthogonal base \
multiplication. Useless for end user, keep in private context. First argument \
is gaOrthonormalBasis[testAlgebra], second argument is matrix representation \
list, which can be generated, for example, as  \
gaDefineMatrixRepresentation[testAlgebra,gaDefineMatrixRepresentation[\
testAlgebra]].\
\>", "Text",ExpressionUUID->"47037364-9723-4221-935c-8aebf6fdf2b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ", "[", 
    RowBox[{"algebraBase_List", ",", " ", "matrixRepresentation_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"replRules", "=", 
        RowBox[{"Rule", "@@@", 
         RowBox[{"(", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Rest", "/@", 
            RowBox[{"{", 
             RowBox[{"algebraBase", ",", "matrixRepresentation"}], "}"}]}], 
           "]"}], ")"}]}]}], ",", "baseProd", ",", "matrProd", ",", 
       "allTable"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allTable", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"baseProd", "=", 
                RowBox[{
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[GeometricProduct]", 
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}]}], ")"}], "/.", 
              "replRules"}], " ", ",", 
             RowBox[{"matrProd", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
           "True", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"baseProd", "*", 
              RowBox[{"matrixRepresentation", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "===", "matrProd"}], ")"}]}],
           "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"Length", "[", "algebraBase", "]"}], "-", "1"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"And", "@@", 
       RowBox[{"Flatten", "[", "allTable", "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[772]:=",ExpressionUUID->"5dd2c4d8-520c-4852-829b-8d525069cb08"],

Cell["\<\
At last define function, which automatically converts expression to matrix \
representation\
\>", "Text",ExpressionUUID->"ef4f3899-ff66-40e2-9dbd-b2e162e19d53"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], "=", 
    "\"\<Matrix representation of algebra `1` not defined or orthonormal base \
elements don't match their matrix representations. First make sure you \
defined orthonormal base with gaDefineOrthonormalBasis[alg]. Then calculate \
matrix representations of base vectors of algebra with \
gaDefineMatrixRepresentation[al_Cl,opts___].\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "[", 
     RowBox[{"expr_List", ",", 
      RowBox[{"al", ":", 
       RowBox[{"(", 
        RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"gaToMatrixRepresentation", "[", 
       RowBox[{"#", ",", "al"}], "]"}], "&"}], "/@", "expr"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"al", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "rulesForNonScalars", ",", "allScalars", ",", "allNonScalars", ",", 
       "idMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"idMatrix", "=", 
         RowBox[{"IdentityMatrix", "[", 
          RowBox[{"Length", "[", 
           RowBox[{
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", "0", "}"}]}], "]"}], "*", "idMatrix"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allNonScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"!", 
             RowBox[{"{", "0", "}"}]}]}], "]"}], "/.", 
          RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allScalars", "+", "allNonScalars"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[773]:=",ExpressionUUID->"52dd6b39-b977-4b09-b4ef-47ceafdaa18c"],

Cell["\<\
We need inverse base elements (not reciprocal) inside Tr !!! (need \
investigation still)\
\>", "Text",ExpressionUUID->"b0a4a4db-d801-48f0-8aab-b04a6133df77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"baseElementInverse", "[", "el_bs", "]"}], ":=", 
      RowBox[{
       RowBox[{"gaReverse", "[", "el", "]"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaReverse", "[", "el", "]"}], "\[GeometricProduct]", "el"}],
         ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"baseElementInverse", "[", "1", "]"}], "=", "1"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[776]:=",ExpressionUUID->"b02ea6a8-ef58-4136-9ce4-e0a6d6be6cde"],

Cell["\<\
Mode option can be \[OpenCurlyDoubleQuote]Reals\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Complexes \[OpenCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]All\[CloseCurlyDoubleQuote].  Mode->All do not filter \
out quaternions after trace is taken,  Mode->Complexes do not filter complex \
numbers, but filter out quaternions. Mode->Reals filter out both quaternions \
and imaginary parts from the result of Tr.\
\>", "Text",ExpressionUUID->"ad4dec47-a002-415e-a4a5-6916aa5fd1a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaFromMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Mode", "\[Rule]", "\"\<All\>\""}], "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[777]:=",ExpressionUUID->"3079c51e-3f79-47ce-a638-aec09bde9b3b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"filterNumbers", "[", 
     RowBox[{"expr_", ",", "\"\<All\>\""}], "]"}], ":=", "expr"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "it", " ", "is", " ", "unclear", " ", "what", " ", "to", " ", "do", " ", 
     "when", " ", "quaternions", " ", "appear", " ", "in", " ", "Tr"}], ",", 
    " ", 
    RowBox[{"do", " ", "nothing"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"filterNumbers", "[", 
       RowBox[{"expr_", ",", "\"\<Complexes\>\""}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "/", "2"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ")"}]}], "/.", 
       RowBox[{"_bs", "\[Rule]", "0"}]}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"Addditional", " ", "multiple", " ", 
       RowBox[{"1", "/", 
        RowBox[{"2", " ", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"filterNumbers", "[", 
       RowBox[{"expr_", ",", "\"\<Reals\>\""}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"_bs", "\[Rule]", "0"}], ",", 
         RowBox[{
          RowBox[{"Complex", "[", 
           RowBox[{"any_", ",", "_"}], "]"}], "\[RuleDelayed]", "any"}]}], 
        "}"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[778]:=",ExpressionUUID->"8f3e3a30-ed23-48ba-a50c-1d2287fa14fb"]
}, Closed]]
}, Open  ]],

Cell["\<\
We multiply basis elements from the right! It is possible to do \
multiplication from the left also. In fact we assume, that quaternions \
commutes with GA basis elements, so this is only can be important for other \
commands like gaGetMV[ ], etc.\
\>", "Text",ExpressionUUID->"20d3877f-ed51-4b81-aebd-1ae658cddb64"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentation", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dimensionFactor", "=", 
        RowBox[{"First", "[", 
         RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], ",", 
       RowBox[{"theIdentityMatrix", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "matrix", "]"}], "]"}]}], ",", 
       RowBox[{"theMode", "=", 
        RowBox[{"ToString", "[", 
         RowBox[{"OptionValue", "[", "Mode", "]"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<Reals\>\"", ",", "\"\<Complexes\>\"", ",", "\"\<All\>\""}],
               "}"}], ",", "theMode"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaOptionValue", "::", "option"}], ",", 
             "gaFromMatrixRepresentation", ",", "Mode", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Reals\>\"", ",", "\"\<Complexes\>\"", ",", "\"\<All\>\""}],
               "}"}], ",", "\"\<All\>\""}], "]"}], ";", 
           RowBox[{"theMode", "=", "\"\<All\>\""}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
           RowBox[{"Thread", "[", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"filterNumbers", "[", 
                  RowBox[{
                   RowBox[{"Tr", "[", 
                    RowBox[{"gaGeometricMatrixProduct", "[", 
                    RowBox[{"matrix", ",", "#"}], "]"}], "]"}], ",", 
                   "theMode"}], "]"}], "&"}], "/@", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"{", "theIdentityMatrix", "}"}], ",", 
                  RowBox[{"(", 
                   RowBox[{"Last", "/@", 
                    RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
                   ")"}]}], "]"}]}], ")"}], ",", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "1", "}"}], ",", 
                RowBox[{"(", 
                 RowBox[{"baseElementInverse", "/@", 
                  RowBox[{"(", 
                   RowBox[{"First", "/@", 
                    RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
                   ")"}]}], ")"}]}], "]"}]}], "]"}], "]"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input",
 CellLabel->
  "In[780]:=",ExpressionUUID->"b843e462-9dfd-499b-842d-5565bf7e505a"],

Cell["\<\
In general it is still not clear how to dealt with matrices with \
quaternionic*imaginary entries. The above \[OpenCurlyDoubleQuote]mode\
\[CloseCurlyDoubleQuote] solution is obviously is a poor \
man\[CloseCurlyQuote]s solution.\
\>", "Text",ExpressionUUID->"5ce43845-2468-4e8a-b2d3-e30f3c09302a"],

Cell["\<\
Possible ways to improve matrix representation code:
1. Use SparseArrays[ ] to represent large dimension matrices. This becomes \
important, when matrices becomes 32x32 or large.
2. For large algebras representation it would be useful introduce direct \
multiplication by R(16) matrices. This represents Cl[0,8] and Cl[8,0] \
periodicity of Clifford algebras. Current implementation follows {0,2},{1,1} \
or {2,0} steps only.
3. One could get even more representations if user could specify row/column \
interchange transformation (this is always possible to do after matrix \
representation is calculated).\
\>", "Text",ExpressionUUID->"193e1a05-11a4-4e74-a26e-16179a029270"],

Cell[TextData[{
 "Note.  In  ",
 StyleBox["repRuls",
  FontWeight->"Bold"],
 " rule ",
 StyleBox["gaTensorProduct[c_]\[RuleDelayed]c*IdentityMatrix[2]]",
  FontWeight->"Bold"],
 " should be given last. Otherwise expression  a +e[x] would first become  \
{{a +e[x],0},{0,a +e[x]}} and matrix structure will be broken."
}], "Text",ExpressionUUID->"02c3bac8-40ad-4d2e-963e-4379fbcf843f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[781]:=",ExpressionUUID->"b3bd9c2f-ff11-4018-ab02-e9be1a13e50e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector inverse, reciprocal base, some bivector algebra formulas, \
blade and versor decomposition (not finished yet)"
}], "Section",ExpressionUUID->"ad8cc3f7-6a4a-450d-b8fa-5c494d1a4c52"],

Cell["\<\
Functions ... are rewrites from the article:
G.S. Staples, D. Wylie. Clifford algebra decompositions of conformal \
orthogonal group elements, Clifford Analysis, Clifford Algebras and Their \
Applications, 4 (2015), 223-240
\
\>", "Text",ExpressionUUID->"a5d2a1c8-1acc-4371-a78f-446ab0a15ad9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaDeterminantOfMV", ",", "gaNormDeterminant", ",", 
     "gaDeterminantFormula", ",", "gaNormHermitian", ",", 
     "gaMultivectorParityCheck", ",", "gaInvertibleQ", ",", "gaInverse", ",", 
     "ZeroTolerance", ",", "Involutions", ",", "gaRandomBasis", ",", 
     "gaReciprocalVectors", ",", "gaReciprocalBasis", ",", "gaBilinearForm", 
     ",", "gaMetric", ",", "gaKillingMetric", ",", "gaCasimir", ",", 
     "gaDynkinFactor", ",", "Blade", ",", "gaCliffordDecomposableQ", ",", 
     "gaVersorQ", ",", "NextVector", ",", "gaCliffordDecompose", ",", 
     "gaBladeFactor", ",", "gaNormOfCoefficients", ",", "gaNormReverseAbs", 
     ",", "gaNorm2ReverseSigned", ",", "gaNormCliffordConjugateAbs", ",", 
     "gaNorm2CliffordConjugateSigned", ",", "gaNormalize", ",", 
     "gaFactorTerm", ",", "gaStructureConstant", ",", "gaVersorToSumOfBlades",
      ",", "gaBladeToSumOfVersors", ",", "gaBladeQ", ",", "gaLinearSolve", 
     ",", "ExplicitFormula"}], "}"}]}], ";"}]], "Input",ExpressionUUID->\
"6e81be12-42b0-46a0-bbc1-929a9df266d3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[783]:=",ExpressionUUID->"6e77c918-e972-442c-8856-24ff3f70a33d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "usage"}], "=", 
   "\"\<Returns determinant of Clifford algebra representation matrices. If \
the matrix representation is complex, then mapping I->R(2) is used. The \
determinant of matrices with quaternionic matrix elements is computed using \
H->R(4) mapping\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantFormula", "::", "usage"}], "=", 
   "\"\<Option for gaDeterminantOfMV which can have values \\\"Recursion\\\" \
or \\\"Explicit\\\" and determines the way of how coefficients of general \
determinant are computed.\>\""}], ";"}]}], "Input",ExpressionUUID->"ec6ba39a-\
9e84-47f4-aa64-4f781899963e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormDeterminant", "::", "usage"}], "=", 
   "\"\<Returns absolute value of the determinant of MV rised in the power \
(1/Power[2,Ceiling[theVectorSpaceDimension/2]). The determinant norm ensures \
that any MV which squares to a scalar gets normalized after division by the \
determinant norm.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[786]:=",ExpressionUUID->"bf9010a6-3cd6-4ec3-832a-5dd15604e12c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormHermitian", "::", "usage"}], "=", 
   "\"\<Returns Hermitian norm.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[787]:=",ExpressionUUID->"39b7f38c-330c-4df2-8301-f3f6a30c9def"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaInvertibleQ", "::", "usage"}], "=", 
   "\"\<gaInvertibleQ[generalMultivector,opts] returns True if multivector is \
invertable and False othewise. When symbolic coefficients are present return \
calculated expression, which depend on the method used. Two methods realized \
Method\[Rule]gaNorm2ReverseSigned, and Method\[Rule]Det. The second method \
calculates the algebra matrix representation, then the determinant.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ZeroTolerance", "::", "usage"}], "=", 
   "\"\<Option for gaInverse and gaInvertibleQ, gaRandomBasis, \
gaReciprocalVectors, gaReciprocalBasis. If numeric determinant/discriminant \
value is less that ZeroTolerance number, it is assumed that determinant value \
is zero. Likewise similar warning is issued when generating/checking random \
base and calculating reciprocal vectors, bases.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Blade", "::", "usage"}], "=", "\"\<Option for gaInverse\>\""}], 
  ";"}]}], "Input",
 CellLabel->
  "In[788]:=",ExpressionUUID->"a1337e2d-f168-48bc-a6d7-e7b1f36d9ba9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomBasis", "::", "usage"}], "=", 
   "\"\<gaRandomBasis[algebra, opts___]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[791]:=",ExpressionUUID->"28e24135-f389-4678-972c-67ea4b45fb0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "::", "usage"}], "=", 
   "\"\<gaReciprocalVectors[vectors_List, opts___]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[792]:=",ExpressionUUID->"754235ca-845b-4266-bf05-f180d1449716"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalBasis", "::", "usage"}], "=", 
   "\"\<gaReciprocalBasis[fullBase_List, opts___]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[793]:=",ExpressionUUID->"7703a856-ace5-4f1d-a927-380606f4b4b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBilinearForm", "::", "usage"}], " ", "=", " ", 
   "\"\<gaBilinearForm[base_List,{grade_Integer}] computes general homogeneus \
bilinear form. Depending in given base the form can be in the reciprocal base \
(i.e. will coinside with dual space form).\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMetric", "::", "usage"}], " ", "=", 
   "\"\<gaMetric[base_List] is a shortcut of \
gaBilinearForm[base_List,{1}]\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaKillingMetric", "::", "usage"}], " ", "=", 
   "\"\<gaKillingMetric[base_List] is a shortcut of \
gaBilinearForm[base_List,{2}]\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[794]:=",ExpressionUUID->"0afea192-e094-4eb6-a9d9-8a3fd4768973"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "::", "usage"}], " ", "=", 
   "\"\<gaStructureConstant[{i_Integer,j_Integer},k_Integer,baseBivectors_\
List,recoprocalBaseBivectors_List] computes bivector commutator algebra \
structure constants using \!\(TraditionalForm\`\*SuperscriptBox[SubscriptBox[\
\(c\), \(i, j\)], \(k\)] = \(-\((1/2)\)[\*SubscriptBox[\(\[ScriptCapitalB]\), \
\(i\)], \*SubscriptBox[\(\[ScriptCapitalB]\), \(j\)]]\) \[InnerProduct] \
\*SuperscriptBox[\(\[ScriptCapitalB]\), \(k\)]\) formula. Indices indicate \
bivector order in given base, therefore ordering of reciprocal base bivectors \
should match direct base bivector ordering. Otherwise the result will be \
wrong.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[797]:=",ExpressionUUID->"d6e72a7a-93df-4d0a-9eb5-406e94e664f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCasimir", "::", "usage"}], " ", "=", 
   "\"\<gaCasimir[fullbase,{n_Integer}] with n>=2 implements Lie group \
Casimir operator formula, where Lie generators are replaced by bivectors. It \
is interesting, that gaCasimir[fullbase,{2}] always yields the number of \
bivectors. What are the numbers given by higher numbers n is unclear\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[798]:=",ExpressionUUID->"92960c84-eff0-47ef-be15-1312655ea2cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDynkinFactor", "::", "usage"}], " ", "=", 
   "\"\<gaDynkinFactor[fullBase_] computes Dynkin factor by comparing rezults \
of two expressions for Killing form: one expressed by bivectors and the other \
by using expression with structure constants.\>\""}], " ", ";"}]], "Input",
 CellLabel->
  "In[799]:=",ExpressionUUID->"46ec411f-65b8-459d-8bd8-68740977287d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input",
 CellLabel->
  "In[800]:=",ExpressionUUID->"ce70a08f-62ea-47b9-b6b6-6b6a9c2a3e81"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMultivectorParityCheck", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input",
 CellLabel->
  "In[801]:=",ExpressionUUID->"45f86e9b-62a2-4eaf-a40e-79682206084b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecompose", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input",
 CellLabel->
  "In[802]:=",ExpressionUUID->"0eab2c32-15eb-446f-bef3-732c13a0fc2c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorQ", "::", "usage"}], "=", 
   "\"\<gaVersorQ[expr] tests if given multivector is a versor. Test applies \
only to nonisotropic (non null) versor, i.e. which can be written as a \
geometric product of non isotropic vectors.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[803]:=",ExpressionUUID->"fecca069-d895-44fe-b82f-9d39a316f333"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeFactor", "::", "usage"}], "=", 
   "\"\<Gives blade decomposition into vectors using D. Fontinje algorithm.\>\
\""}], ";"}]], "Input",
 CellLabel->
  "In[804]:=",ExpressionUUID->"b953d84b-7e50-4a17-ac88-788223a98417"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaInverse", "::", "usage"}], "=", 
   "\"\<gaInverse[m] calculates the inverse of a multivector m. The default \
Method->Automatic for p+q\[LessEqual]6 uses base free formulas. For larger \
dimensions matrix representations are calculated which then are inverted. For \
unexpanded geometric products inverses of each product are computed \
separately. Inverse of simple blades and versors use simplified formulas. \
Possible Method values are Blade, Involutions and Det. Warning. Using \
Method->Blade with multivectors, which are not blades will return wrong \
answer! \>\""}], ";"}]], "Input",
 CellLabel->
  "In[805]:=",ExpressionUUID->"8e651f5e-364c-451d-ad9a-f629cb3dd5b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NextVector", "::", "usage"}], 
   "\"\<Option for oneStepCliffordDecompose gaCliffordDecompose, which \
represents next vector to be selected in oneStepCliffordDecompose\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[806]:=",ExpressionUUID->"c52028b0-7b3f-4a86-a9ce-426845494f03"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormOfCoefficients", "::", "usage"}], "=", 
   "\"\<gaNormOfCoefficients[mv] or  gaNormOfCoefficients[mv,n_Integer] \
computes multivector norm. It is not the same as gaNormReverseAbs[]!\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[807]:=",ExpressionUUID->"df9cef97-9ac7-40f4-bedf-f7efc5d28b6f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "usage"}], "=", 
   "\"\<gaNormalize[mv] or  gaNormalize[mv,n_Integer] returns normalized \
(unit) multivector of mv.\>\""}], " ", ";"}]], "Input",
 CellLabel->
  "In[808]:=",ExpressionUUID->"f2e72c64-73db-40d1-99fa-90e9427adfd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2ReverseSigned", "::", "usage"}], "=", 
   "\"\<gaNorm2ReverseSigned[mv] computes multivector magnitude as absolute \
value of scalar part of multivector multiplied by reversed multivector. \
gaNormReverseAbs is NOT the same as gaNormOfCoefficients.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[809]:=",ExpressionUUID->"b9b35ec4-7176-45cb-b538-949a6b741942"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormReverseAbs", "::", "usage"}], "=", 
   "\"\<gaNormReverseAbs[f_multivector] gives magnitude of multivector. \
\>\""}], ";"}]], "Input",
 CellLabel->
  "In[810]:=",ExpressionUUID->"edc0e87c-f6f7-4217-b581-ffa1160b4094"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2CliffordConjugateSigned", "::", "usage"}], "=", 
   "\"\<gaNorm2CliffordConjugateSigned[mv] computes multivector magnitude as \
absolute value of scalar part of multivector multiplied by Clifford \
conjugated multivector. gaNormCliffordConjugateAbs is NOT the same as \
gaNormOfCoefficients.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[811]:=",ExpressionUUID->"6bdc207a-e012-4d00-b1fd-79db51396307"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormCliffordConjugateAbs", "::", "usage"}], "=", 
   "\"\<gaNormCliffordConjugateAbs[f_multivector] gives magnitude of \
multivector. \>\""}], ";"}]], "Input",
 CellLabel->
  "In[812]:=",ExpressionUUID->"12619815-3228-42a2-8d89-7269ac4ad49e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "usage"}], "=", 
   "\"\<gaFactorTerm[f_MV,{fac1MV, fac2_MV}] attempt to rewrite f in the form \
f=answ1\[GeometricProduct]fac1+answ2\[GeometricProduct]fac2+. The result is \
returned in the form {{answ1,fac1},{answ2, fac2},...}. The other side \
factorization can be obtained moving list of factors in the other \
side.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[813]:=",ExpressionUUID->"6f4a2303-236e-4946-879c-8f85ce698b85"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorToSumOfBlades", "::", "usage"}], "=", 
   "\"\<gaVersorToSumOfBlades[a\[GeometricProduct]b\[GeometricProduct]...] \
rewrites versor (geometric product of vectors) as a sum of blades (outer \
product of the same vectors).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[814]:=",ExpressionUUID->"339161dc-6228-4b0a-9e68-3490f6dd1020"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeToSumOfVersors", "::", "usage"}], "=", 
   "\"\<gaBladeToSumOfVersors[a\[OuterProduct]b\[OuterProduct]...] rewrites \
blade (outer product of vectors) as a sum of versors (geometric product of \
the same vectors).\>\""}], ";"}]], "Input",
 CellLabel->
  "In[815]:=",ExpressionUUID->"ed238c6d-e570-4607-af71-367633facbde"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeQ", "::", "usage"}], "=", 
   "\"\<gaBladeQ[expr] yields True if expr is a blade (aka simple \
multivector) and False otherwise.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[816]:=",ExpressionUUID->"598c2736-42c5-4a71-b2da-4bb7cc904f0a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "::", "usage"}], "=", 
   "\"\<General linear equation solver in GA. At the moment only Sylvester \
equation AX-XB+C==0  (written in the above explicit form) can be solved. \
Options\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExplicitFormula", "::", "usage"}], "=", 
   "\"\<Option of gaLinearSolve, which instructs gaLinearSolve to use look \
for explicit optimized formula (if exists) for the equation before switching \
to general Sylvester equation reccurent algorithm (which yields much more \
complicated expressions). Can take values True/False (for dimensions n<=5) or \
\\\"gaGetMV\\\" / \\\"gaNonScalarGradeInverse\\\" (for any dimension).\>\""}],
   ";"}]}], "Input",ExpressionUUID->"89be4443-1bf5-4b2d-80b6-b5fb9fe04e1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[817]:=",ExpressionUUID->"ab7c6c8e-f4cf-434e-b920-24939b0fb2cd"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Multivector inverse, invertibility test and the determinant norm of MV  \
(i. e. determinants of matrix representations of MV)"
}], "Subsection",ExpressionUUID->"2e0a9323-c2a9-4d92-a4c3-d72783be4955"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"609fedae-f0a6-4e20-8d3a-a7d69b794a56"],

Cell["\<\
The zero test function. Will be used in calculation of inverses also\
\>", "Text",ExpressionUUID->"693a8320-1a64-4d03-84d1-6d88534d36f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"allZeroTest", "::", "zero"}], "=", 
   "\"\<Zero catched when calculating expression `1` inside function \
`2`.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[818]:=",ExpressionUUID->"74826a15-5714-480d-a45b-c7829612f1d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"allZeroTest", "[", 
    RowBox[{
    "expr_List", ",", "exprBeforeExpansion_", ",", "theTransfrom_", ",", 
     "chopTol_", ",", " ", "name_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"theTransfrom", "/@", "expr"}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], ")"}], ",", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{
          RowBox[{"Abs", "[", "#", "]"}], "<", "chopTol"}], "]"}], "&"}]}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"allZeroTest", "::", "zero"}], ",", "exprBeforeExpansion", 
        ",", "name"}], "]"}], ";", 
      RowBox[{"Throw", "[", "Infinity", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[819]:=",ExpressionUUID->"e9dc2406-c012-4fe7-9b57-de9f063df025"],

Cell["\<\
Optimize general gaFromMatrixRepresentation[ ] function for inversion. It \
will use Dot and SparseArrays for faster matrix multiplication. We do not \
include identity matrix representation, therefore \
(Length[gaOrthonormalBasis[al]]-1).\
\>", "Text",ExpressionUUID->"b34db859-bf61-46b9-a121-cec6a5d200b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentationSparseNoQuaternions", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dimensionFactor", "=", 
        RowBox[{"First", "[", 
         RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], ",", 
       RowBox[{"theIdentityMatrix", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "matrix", "]"}], "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"MatrixQ", "[", 
               RowBox[{"Last", "[", "#", "]"}], "]"}], "&"}], "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\""}], "]"}], "]"}], "-", 
             "1"}], ")"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Tr", "[", 
               RowBox[{"Dot", "[", 
                RowBox[{"matrix", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"SparseArray", "/@", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", "theIdentityMatrix", "}"}], ",", 
                 RowBox[{"Last", "/@", 
                  RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}]}], 
                "]"}]}], ")"}]}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{"GeometricAlgebra`p`baseElementInverse", "/@", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\""}], "]"}]}], ")"}]}], 
          ")"}], ")"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input",
 CellLabel->
  "In[820]:=",ExpressionUUID->"b177e3f5-1cee-448a-a74c-ed2fee12b8b0"],

Cell["Explicit formulas for inverse and determinant", "Text",ExpressionUUID->"0fd7087d-0361-43e0-b5c0-f209cbbdb4d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "6"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "involutionInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"TheFormula", "\[Rule]", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "6", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], "]"}]}],
            ",", "hh", ",", "h4h4", ",", "s1", ",", "denom", ",", "numerat"}],
           "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"hh", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{"h", "\[GeometricProduct]", "h"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"h4h4", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"hh", ",", "h4h4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"h", "\[GeometricProduct]", "h"}], ",", 
                 RowBox[{
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}]}]}], "}"}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"s1", "=", 
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"theExpandFunction", "[", 
                 RowBox[{"h", "\[GeometricProduct]", 
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"hh", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                 "]"}], "+", 
                RowBox[{"2", "*", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{
                   RowBox[{"theExpandFunction", "[", 
                    RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                   RowBox[{"{", "4", "}"}]}], "]"}]}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "s1", "}"}], ",", 
               RowBox[{
                RowBox[{"h", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"hh", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], "+", 
                
                RowBox[{"2", "*", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], ",", 
                   
                   RowBox[{"{", "4", "}"}]}], "]"}]}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"skip", " ", "factor", " ", 
                RowBox[{"1", "/", "3"}], " ", "for", " ", "inverse", " ", 
                "in", " ", "the", " ", "formula"}], ",", " ", 
               RowBox[{"it", " ", "cancels", " ", "out"}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h", "\[GeometricProduct]", "s1"}], "]"}], "]"}]}], 
             ";", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", "s1"}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", "s1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "6"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "involutionDet", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"TheFormula", "\[Rule]", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "6", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], "]"}]}],
            ",", "hh", ",", "h4h4", ",", "s1", ",", "denom"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"hh", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", "h"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"h4h4", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"denom", "=", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"Expand", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "3"}], ")"}], "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"theExpandFunction", "[", 
                    RowBox[{"hh", "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"hh", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"theExpandFunction", "[", 
                    RowBox[{"h", "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{
                    RowBox[{"theExpandFunction", "[", 
                    RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}]}], ")"}]}], 
                "]"}], "]"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[821]:=",ExpressionUUID->"63d04127-4c3f-452e-8c7e-95f882607677"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "5"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "5", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "h14", ",", "s1", ",", "denom", ",", "numerat"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,5,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"h14", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h14", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,5,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h14", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h14", ",", 
                   RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h14", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h14", ",", 
                  RowBox[{"{", "5", "}"}]}], "]"}]}], ",", "Identity", ",", 
               "chopTol", ",", "\"\<involutionInverse[_,5,__]\>\""}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"s1", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h14", ",", 
                  RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", "s1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "5"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "5", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "h14", ",", "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"h14", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"denom", "=", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h14", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h14", ",", 
                   RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}], "]"}], 
              "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[825]:=",ExpressionUUID->"96ef3f93-9b5a-45db-98bf-4dab7e9770f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "4"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "4", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,4,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,4,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "4"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "4", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theAssociationFunction", "[", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}]}],
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[827]:=",ExpressionUUID->"14d362b8-803f-419e-9729-cb1cd8ce8578"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "3"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "3", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,3,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "denom", "}"}], ",", 
             RowBox[{"h", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,3,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "3"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "3", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", 
           RowBox[{"theDiscriminantFunction", "[", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"h", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "]"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[829]:=",ExpressionUUID->"e00fc2cf-f759-4e7b-af04-d4082c9f4c59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "2"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "2", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,2,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", "h", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"gaGradeNegate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "2"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "2", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", "h", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[831]:=",ExpressionUUID->"1b6e5568-5fd2-43ec-a11e-cc317d935eb6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "1"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "1", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "denom", 
           ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,1,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", "h", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"gaGradeNegate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "1"}], ",", " ", 
     RowBox[{"the", " ", "determinant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "1", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", "#", "]"}], "&"}], ",", 
            "expandFunction"}], "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAssociationTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaPlainRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "denom"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", "h", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[833]:=",ExpressionUUID->"d0c37fb4-3b6f-46dd-877e-88e6cffd3559"],

Cell["\<\
Recursive functions for determinant calculation to use with algebras of \
dimension n> 6 (see [Shirokov2020]: arxiv:2005.04015v1 for details )\
\>", "Text",ExpressionUUID->"4ebf6a85-149d-434e-b7fd-0cf5479293ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"detCRec", "[", 
     RowBox[{"1", ",", "mv_", ",", "al_Cl"}], "]"}], ":=", "1"}], "*)"}], 
  "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"detCRec", "[", 
      RowBox[{
       RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
      "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{"2", "^", 
        RowBox[{"Ceiling", "[", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
         "]"}]}], ")"}], "*", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"detURec", "[", 
         RowBox[{"k", ",", "mv", ",", "al"}], "]"}], ",", 
        RowBox[{"{", "0", "}"}]}], "]"}]}]}], ";"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"detCRec", "[", 
      RowBox[{
       RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
      "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", "k"}], ")"}]}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{"2", "^", 
        RowBox[{"Ceiling", "[", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
         "]"}]}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"detURec", "[", 
         RowBox[{"k", ",", "mv"}], "]"}], "+", 
        RowBox[{"gaNonZeroGradeInverse", "[", 
         RowBox[{"detURec", "[", 
          RowBox[{"k", ",", "mv"}], "]"}], "]"}]}], ")"}]}]}], ";"}], 
   "*)"}]}]], "Input",ExpressionUUID->"f632001d-c1a4-43b6-88dd-30e0fd929656"]
}, Open  ]],

Cell["\<\
Recursive implementation using Nest tend to be much faster. Still needs to \
decide how to handle expansion in this case (at the moment non expanded \
version implemented)\
\>", "Text",ExpressionUUID->"e69f5364-a095-4719-b486-26c543943f1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"determinantFormulaByLeftNest", "[", 
    RowBox[{"expr_", ",", "theAlgebra_Cl"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "theNumberOfNestLevels", "}"}], ",", 
     RowBox[{
      RowBox[{"theNumberOfNestLevels", "=", 
       RowBox[{"(", 
        RowBox[{"2", "^", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
           "2"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Last", "[", 
       RowBox[{"Nest", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{"expr", ",", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", 
                   RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}]}], ")"}], 
                 "*", "theNumberOfNestLevels", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                   RowBox[{"gaNonZeroGradeInverse", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], 
                ")"}]}]}], "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "expr"}], "}"}], ",", 
         RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",ExpressionUUID->"f5e61b77-eeed-4dab-b50c-8696615498c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"determinantFormulaByRightNest", "[", 
    RowBox[{"expr_", ",", "theAlgebra_Cl"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "theNumberOfNestLevels", "}"}], ",", 
     RowBox[{
      RowBox[{"theNumberOfNestLevels", "=", 
       RowBox[{"(", 
        RowBox[{"2", "^", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
           "2"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Last", "[", 
       RowBox[{"Nest", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
            RowBox[{"GeometricProduct", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "+", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", 
                   RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ")"}]}], ")"}]}], ")"}], 
                 "*", "theNumberOfNestLevels", "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", 
                   RowBox[{"gaNonZeroGradeInverse", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ")"}]}], ")"}]}],
               ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "expr"}], "}"}], ",", 
         RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",ExpressionUUID->"d7cda6df-\
f2c8-4d4f-b57c-8fbffbd14289"],

Cell["\<\
Functions for determinant calculation using explicit formula to use with \
algebras of dimension n> 6 (see [Shirokov2020]: arxiv:2005.04015v1 for \
details )\
\>", "Text",ExpressionUUID->"30aaddc1-929b-40e8-9547-4bfa1b3d7d31"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"detSRec", "[", 
    RowBox[{
     RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", 
     RowBox[{"(", 
      RowBox[{"k", "-", "1"}], ")"}]}], "*", 
    RowBox[{"(", 
     RowBox[{"2", "^", 
      RowBox[{"Ceiling", "[", 
       RowBox[{
        RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
       "]"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"Factorial", "[", 
      RowBox[{"k", "-", "1"}], "]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"detU", "[", 
        RowBox[{"k", ",", "mv"}], "]"}], ",", 
       RowBox[{"{", "0", "}"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCompleteBellPolynomial", "[", "x_List", "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"BellY", "[", 
      RowBox[{
       RowBox[{"Length", "[", "x", "]"}], ",", "k", ",", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"detCExpl", "[", 
    RowBox[{
     RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_", ",", "al_Cl"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", 
     RowBox[{"(", 
      RowBox[{"k", "+", "1"}], ")"}]}], "*", 
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"Factorial", "[", "k", "]"}]}], ")"}], "*", 
    RowBox[{"gaCompleteBellPolynomial", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"detSRec", "[", 
        RowBox[{"i", ",", "mv", ",", "al"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "k"}], "}"}]}], "]"}], "]"}]}]}], ";"}]}], "Input",E\
xpressionUUID->"c471a59e-c8d7-4854-a9a1-94f2c05b4fb6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector inverse, determinant norm of multivector"
}], "Subsubsection",ExpressionUUID->"b13efc83-bc7c-46ab-9a4a-914c637b0c2d"],

Cell["Main multivector inverse function. ", "Text",ExpressionUUID->"5b2efb92-da2e-4f90-a75c-ec537b3c7c89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"three", " ", "methods", " ", 
     RowBox[{"realized", ":", " ", "Blade"}]}], ",", " ", 
    RowBox[{"Involutions", " ", "and", " ", "Det"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"ZeroTolerance", "->", 
        RowBox[{"10.", "^", 
         RowBox[{"(", 
          RowBox[{"-", "10"}], ")"}]}]}], ",", 
       RowBox[{"Expand", "\[Rule]", "Automatic"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInverse", "::", "unknownMethod"}], "=", 
     "\"\<Inversion method Method->`1` is unknown. Possible values are \
Automatic, Blade, Involutions and Det. The Method\[Rule]Blade will only give \
correct inverse for blades and versors. For general multivector it will give \
what is called pseudoinverse in the literature. Method\[Rule]Det will give \
true inverse for general multivector. It is based, however, on inverse of \
multivector matrix representation and therefore is slow. The default is to \
use Method\[Rule]Blade for base vectors and factored versors, \
Method->Involutions for algebras with p+q<=6 and Method\[Rule]Det in all \
other cases.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "scalar", " ", "case"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"1", "/", "expr"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"bs", "|", "MV"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"the", " ", "factored", " ", "product", " ", "case"}], ",", 
        " ", 
        RowBox[{"including", " ", "factored", " ", "versor"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"prod_GeometricProduct", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{
         RowBox[{"gaInverse", "[", 
          RowBox[{"#", ",", "opts"}], "]"}], "&"}], " ", "/@", 
        RowBox[{"Reverse", "[", "prod", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"the", " ", "general", " ", "case"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"method", "=", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "Method"}], "]"}]}]}], ",", 
            RowBox[{"theExpandFunction", "=", 
             RowBox[{
              RowBox[{"Expand", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "Expand"}], "]"}]}]}], ",", 
            RowBox[{"chopTol", "=", 
             RowBox[{
              RowBox[{"ZeroTolerance", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "ZeroTolerance"}], "]"}]}]}], ",", 
            "theMethod", ",", "testResult", ",", "\[IndentingNewLine]", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"whichAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{
               "Message", "\[Rule]", "\"\<Inside gaInverse[ ]. \>\""}]}], 
              "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"theScalarFunction", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity",
                ",", "gaPlainRepresentation"}], "]"}]}], ",", "theResult", 
            ",", "dim"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"dim", "=", 
              RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], 
               ",", " ", 
               RowBox[{
               "decide", " ", "which", " ", "one", " ", "of", " ", "methods", 
                " ", "to", " ", "use"}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"method", "===", "Automatic"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Which", "[", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "if", " ", "expr", " ", "is", " ", "base", " ", "element", "  ",
                   "or", " ", "vector", " ", "use", " ", 
                  "gaNorm2ReverseSigned"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Or", "[", 
                  RowBox[{
                   RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"theScalarFunction", "===", "Identity"}], ",", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"Times", "[", 
                    RowBox[{"c_.", ",", "_bs"}], "]"}], "]"}]}], "]"}]}], 
                    "]"}], ",", 
                   RowBox[{
                    RowBox[{"gaGetGrade", "[", "expr", "]"}], "===", 
                    RowBox[{"{", "1", "}"}]}]}], "]"}], ",", 
                 RowBox[{"theMethod", "=", "Blade"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                   RowBox[{
                   "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
                 RowBox[{"theMethod", "=", "Involutions"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                   " ", "do", " ", "generic", " ", "inverse", " ", "using", 
                   " ", "matrix", " ", "representations"}], "*)"}], 
                 "\[IndentingNewLine]", "True", ",", 
                 RowBox[{"theMethod", "=", "Det"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"theMethod", "=", "method"}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "calculate", " ", "inverse", " ", "using", " ", "chosen", " ", 
               "method"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Catch", "[", 
              RowBox[{"Switch", "[", 
               RowBox[{
               "theMethod", ",", "\[IndentingNewLine]", "Blade", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "vector", " ", "and", " ", "base", " ", "element", " ", 
                  "blade", " ", "case"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"testResult", "=", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"gaNorm2ReverseSigned", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"allZeroTest", "[", 
                  RowBox[{
                  "testResult", ",", "expr", ",", "theScalarFunction", ",", 
                   "chopTol", ",", "\"\<gaInverse[_,Method->Blade]\>\""}], 
                  "]"}], ";", 
                 RowBox[{"theResult", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"expr", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], ",", "al__"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Signature", "[", 
                    RowBox[{"Reverse", "[", "a", "]"}], "]"}], "*", 
                    RowBox[{"Signature", "[", 
                    RowBox[{"Reverse", "[", "b", "]"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], ",", "al"}], "]"}]}], 
                    ")"}]}], "}"}]}], ")"}], "/", 
                   RowBox[{
                   "theScalarFunction", "[", "testResult", "]"}]}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "algebras", " ", "for", " ", "which", " ", "involution", " ",
                   "formula", " ", "is", " ", "known"}], " ", "*)"}], 
                "\[IndentingNewLine]", "Involutions", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"theResult", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"involutionInverse", "[", 
                    RowBox[{
                    "expr", ",", "dim", ",", "theExpandFunction", ",", 
                    "chopTol"}], "]"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                  ")"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
                "\[IndentingNewLine]", "Det", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Off", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"gaDefineMatrixRepresentation", "[", 
                  RowBox[{"theAlgebra", ",", 
                   RowBox[{"Method", " ", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<TensorProduct\>\"", ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
                 ";", "\[IndentingNewLine]", 
                 RowBox[{"On", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"testResult", "=", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{
                    RowBox[{"gaPlainRepresentation", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                    "theAlgebra"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"allZeroTest", "[", 
                  RowBox[{
                  "testResult", ",", "expr", ",", "Identity", ",", "chopTol", 
                   ",", "\"\<gaInverse[_,Method->Det]\>\""}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"theResult", "=", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{
                   "gaFromMatrixRepresentationSparseNoQuaternions", "[", 
                    RowBox[{
                    RowBox[{"Inverse", "[", "testResult", "]"}], ",", 
                    "theAlgebra"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
                ",", "\[IndentingNewLine]", "_", ",", 
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaInvertibleQ", "::", "unknownMethod"}], ",", 
                  "method"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_bs"}], "]"}]}]}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellLabel->
  "In[835]:=",ExpressionUUID->"8ce879f3-043c-464a-8920-b1037d5dd40f"],

Cell[TextData[{
 "Definitions of  determinants of matrices with quaternions can be found in  \
Joao Pedro Morais, Svetlin Georgiev, Wolfgang Spro\[Beta]ig, \
\[OpenCurlyDoubleQuote]Real quaternionic calculus handbook\
\[CloseCurlyDoubleQuote], Birkhauser, 2014. These definitions, however are \
useless, because no interpretation is given for the determinant being the \
quaternion. Ian Porteous in  ",
 ButtonBox["[RA-LoCGAaA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 42 says that \[OpenCurlyDoubleQuote]determinant of n\[Cross]n \
quaternionic matrix is defined to be square root of determinant of the matrix \
regarded as 2n\[Cross]2n complex matrix, the later necesarry having \
determinant of nonnegative real number\[CloseCurlyDoubleQuote]. The \
realization below calculates determinant exactly this way, except it do not \
take square root (user can easily take it itself). The other source about \
quaternionic determinants is in Andrzej Trautmann, \
\[OpenCurlyDoubleQuote]Clifford algebras and their representations\
\[CloseCurlyDoubleQuote], Encyclopedia of Mathematical physics, eds. J.-P. \
Francoise, G.L. Naber and Tsou S.T., Oxford, Elsevier, 2006, vol 1., pages \
518-530. In the Algebras section he describes exactly the same approach, \
except no square root is mentioned. He also gives two explicit formulas for \
determinant. "
}], "Text",ExpressionUUID->"d1d20f09-1cfd-43fd-861a-226c7cee16f4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDeterminantOfMV", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Expand", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"gaDeterminantFormula", "\[Rule]", "\"\<Recursive\>\""}], ",", 
     RowBox[{"Direction", "\[Rule]", "\"\<Left\>\""}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "unknownMethod"}], "=", 
   "\"\<Inversion method Method->`1` is unknown. Possible values are \
Automatic, Involutions and Det. Method\[Rule]Det will first calculate matrix \
representation of MV. The default is to use Method->Involutions for algebras \
with p+q<=6 and Method\[Rule]Det in all other cases.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantOfMV", "::", "fail"}], "=", 
   "\"\<Failed to replace quaternion entries by complex 2x2 matrices in \
`1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDeterminantOfMV", "::", "unexpectedDim"}], "=", 
    "\"\<The calculated matrix dimension `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"y_", "+", "w_"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"y", ",", "op"}], "]"}], "+", 
            RowBox[{"x", "[", 
             RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"Times", "[", 
              RowBox[{"c_", ",", "d__"}], "]"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaPureLinearity", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"the", " ", "factored", " ", "product", " ", "case"}], ",", 
       " ", 
       RowBox[{"including", " ", "factored", " ", "versor"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantOfMV", "[", 
       RowBox[{"prod_GeometricProduct", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaDeterminantOfMV", "[", 
         RowBox[{"#", ",", "opts"}], "]"}], "&"}], " ", "/@", "prod"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "the", " ", "matrix", " ", "with", " ", "quaternionic", " ", "entries", 
       " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantOfMV", "[", 
       RowBox[{"mat_", "?", "MatrixQ"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"mat", ",", 
           RowBox[{"MV", "|", "bs"}]}], "]"}], ",", 
         RowBox[{"Det", "[", "mat", "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"quaternionFreeMatrix", ",", 
             RowBox[{"repRuls", "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"Rest", "[", 
                 RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}],
                  "]"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "c_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"c", "*", 
                  RowBox[{"IdentityMatrix", "[", "2", "]"}]}]}]}], "]"}]}]}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"quaternionFreeMatrix", "=", 
             RowBox[{"ArrayFlatten", "[", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"gaPureLinearity", ",", "mat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
                  RowBox[{"gaPureLinearity", "\[Rule]", "gaTensorProduct"}]}],
                  ")"}], "/.", "repRuls"}], ")"}], "\[IndentingNewLine]", 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"quaternionFreeMatrix", ",", 
                 RowBox[{"MV", "|", "bs"}]}], "]"}], "&&", 
               RowBox[{"MatrixQ", "[", "quaternionFreeMatrix", "]"}]}], ",", 
              RowBox[{"Det", "[", "quaternionFreeMatrix", "]"}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDeterminantOfMV", "::", "fail"}], ",", 
                "quaternionFreeMatrix"}], "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
       
       RowBox[{"(", 
        RowBox[{
         RowBox[{"SameQ", "@@", 
          RowBox[{"Dimensions", "[", "mat", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Dimensions", "[", "mat", "]"}], "]"}], "===", "2"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "general", " ", "MV", " ", "case"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantOfMV", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"MV", "|", "bs"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"EvenQ", "[", 
           RowBox[{"gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}], 
           "]"}], ",", 
          RowBox[{"expr", "^", 
           RowBox[{"(", 
            RowBox[{"2", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}], "/", 
               "2"}], ")"}]}], ")"}]}], ",", 
          RowBox[{"expr", "^", 
           RowBox[{"(", 
            RowBox[{"2", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                 "gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}], 
                 "+", "1"}], ")"}], "/", "2"}], ")"}]}], ")"}]}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"the", ",", 
            RowBox[{"method", "=", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"Method", "/.", 
                RowBox[{"{", "opts", "}"}]}], "/.", 
               RowBox[{"Options", "[", 
                RowBox[{"gaDeterminantOfMV", ",", "Method"}], "]"}]}], 
              "]"}]}], ",", 
            RowBox[{"theExpandFunction", "=", 
             RowBox[{
              RowBox[{"Expand", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaDeterminantOfMV", ",", "Expand"}], "]"}]}]}], ",", 
            "theMethod", ",", "testResult", ",", "\[IndentingNewLine]", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"theScalarFunction", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity",
                ",", "gaPlainRepresentation"}], "]"}]}], ",", "theResult", 
            ",", "dim", ",", "theMatrix", ",", "theMatrixDet"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"the", "[", "gaDeterminantFormula", "]"}], "=", 
            RowBox[{
             RowBox[{"gaDeterminantFormula", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaDeterminantOfMV", ",", "gaDeterminantFormula"}], 
              "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"the", "[", "Direction", "]"}], "=", 
            RowBox[{
             RowBox[{"Direction", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaDeterminantOfMV", ",", "Direction"}], "]"}]}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"dim", "=", 
               RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
              ";", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], 
                ",", " ", 
                RowBox[{
                "decide", " ", "which", " ", "one", " ", "of", " ", "methods",
                  " ", "to", " ", "use"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"method", "===", "\"\<Automatic\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Which", "[", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                   RowBox[{
                   "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
                  RowBox[{"theMethod", "=", "\"\<Involutions\>\""}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                   "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                    " ", "do", " ", "generic", " ", "inverse", " ", "using", 
                    " ", "matrix", " ", "representations"}], "*)"}], 
                  "\[IndentingNewLine]", "True", ",", 
                  RowBox[{"theMethod", "=", "\"\<Det\>\""}]}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"theMethod", "=", "method"}]}], "\[IndentingNewLine]",
                "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "inverse", " ", "using", " ", "chosen", " ", 
                "method"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"Switch", "[", 
               RowBox[{"theMethod", ",", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "algebras", " ", "for", " ", "which", " ", "involution", " ",
                   "formula", " ", "is", " ", "known"}], " ", "*)"}], 
                "\[IndentingNewLine]", "\"\<Involutions\>\"", ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"dim", "\[LessEqual]", "5"}], ",", " ", 
                   RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{"for", " ", "dim"}], " ", "\[LessEqual]", " ", 
                    RowBox[{
                    "6", " ", "we", " ", "have", " ", "explicit", " ", 
                    "optimized", " ", "functions"}]}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"theResult", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"involutionDet", "[", 
                    RowBox[{"expr", ",", "dim", ",", "theExpandFunction"}], 
                    "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                    ")"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"the", "[", "gaDeterminantFormula", "]"}], ",", 
                    "\"\<Recursive\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{"1", ",", "mv_"}], "]"}], ":=", "mv"}], ";"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"the", "[", "Direction", "]"}], ",", 
                    "\"\<Left\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"for", " ", "dim"}], " ", ">", " ", 
                    RowBox[{
                    "6", " ", "can", " ", "use", " ", "recursime", " ", "or", 
                    " ", "explicit", " ", "implementation", " ", 
                    RowBox[{"using", " ", "[", "Shirokov2020", "]"}]}]}], ":",
                     " ", "arxiv", ":", 
                    RowBox[{"2005.04015", "v1"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "commented", " ", "is", " ", "direct", " ", "recursive", 
                    " ", "implementation"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Print", "[", 
                    "\"\<Warning: Recursive experimental implementation\>\"", 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"mv", "\[GeometricProduct]", 
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}]}], "]"}], 
                    "]"}], "-", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"mv", "\[GeometricProduct]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{"k", "-", "1"}], ")"}]}], ")"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"2", "^", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
                    "2"}], "]"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], "+", 
                    RowBox[{"gaNonZeroGradeInverse", "[", 
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], "]"}]}], 
                    ")"}]}], ")"}]}], "]"}], "]"}]}], ")"}], "/;", 
                    RowBox[{"k", ">", "1"}]}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"determinantFormulaByLeftNest", "[", 
                    RowBox[{"expr", ",", "theAlgebra"}], "]"}]}]}], 
                    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                    "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Print", "[", 
                    "\"\<right recursive formula badly implemented. For a \
moment use left f=direction formula, Aborting\>\"", "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{"k", ",", "mv"}], "]"}], "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detURec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], "-", 
                    RowBox[{"detCRec", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv", ",", "theAlgebra"}], 
                    "]"}]}], ")"}], "\[GeometricProduct]", "mv"}]}], ")"}], "/;", 
                    RowBox[{"k", ">", "1"}]}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"determinantFormulaByRightNest", "[", 
                    RowBox[{"expr", ",", "theAlgebra"}], "]"}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                    "\"\<Explicit\>\"", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Print", "[", 
                    "\"\<Warning: Explicit experimental implementation\>\"", 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{"1", ",", "mv_"}], "]"}], ":=", "mv"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{
                    RowBox[{"k_Integer", "?", "Positive"}], ",", "mv_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{"k", ",", "mv"}], "]"}], "=", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"detU", "[", 
                    RowBox[{
                    RowBox[{"k", "-", "1"}], ",", "mv"}], "]"}], 
                    "\[GeometricProduct]", "mv"}], "]"}]}], ")"}], "/;", 
                    RowBox[{"k", ">", "1"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"-", 
                    RowBox[{"detCExpl", "[", 
                    RowBox[{
                    RowBox[{"2", "^", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
                    "2"}], "]"}]}], ",", "expr", ",", "theAlgebra"}], 
                    "]"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"remove", " ", "memorized", " ", "values"}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "detU", "]"}], ";"}], ",", 
                    "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "Print", "[", 
                    "\"\<Unknown value for option gaDeterminantFormula.\>\"", 
                    "]"}], ";", 
                    RowBox[{"theResult", "=", " ", "$Failed"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  "]"}], ";", "theResult"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
                "\[IndentingNewLine]", "\"\<Det\>\"", ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Off", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"gaDefineMatrixRepresentation", "[", 
                  RowBox[{"theAlgebra", ",", 
                   RowBox[{"Method", " ", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<TensorProduct\>\"", ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
                 ";", "\[IndentingNewLine]", 
                 RowBox[{"On", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"theMatrix", "=", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{
                    RowBox[{"gaPlainRepresentation", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                    "theAlgebra"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"if", " ", "dimenion", " ", "smaller"}], ",", " ", 
                   
                   RowBox[{"multiply", " ", "by", " ", "complex", " ", 
                    RowBox[{"conjugate", ":", " ", 
                    RowBox[{
                    "the", " ", "complex", " ", "matrix", " ", "case"}]}]}]}],
                   " ", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"Switch", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Dimensions", "[", "theMatrix", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"2", "^", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
                    "2"}], "]"}]}], ",", 
                   RowBox[{"theResult", "=", 
                    RowBox[{"Det", "[", "theMatrix", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"2", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
                    "2"}], "]"}], "-", "1"}], ")"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"theMatrixDet", "=", 
                    RowBox[{"Det", "[", "theMatrix", "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"theResult", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"theMatrixDet", "*", 
                    RowBox[{"(", 
                    RowBox[{"theMatrixDet", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Complex", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"Complex", "[", 
                    RowBox[{"a", ",", 
                    RowBox[{"-", "b"}]}], "]"}]}], "}"}]}], ")"}]}], 
                    "]"}]}]}], ",", "\[IndentingNewLine]", "_", ",", 
                   RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaDeterminantOfMV", "::", "unexpectedDim"}], ",", 
                    RowBox[{"Dimensions", "[", "theMatrix", "]"}]}], "]"}], 
                    ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], 
                  "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                 "theResult"}], "\[IndentingNewLine]", ",", 
                "\[IndentingNewLine]", "_", ",", 
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaDeterminantOfMV", "::", "unknownMethod"}], ",", 
                  "method"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",ExpressionUUID->"cf1587eb-56b9-4d0e-9141-1216a6462173"],

Cell["\<\
Two methods for invertibility test. One is to check if  gaNorm2ReverseSigned \
is zero, or convert to matrix representation and check if determinant is \
zero. In the case if symbolic coefficients are present, just return \
calculated magnitude square and the determinant. This might be useful for \
further precession.\
\>", "Text",ExpressionUUID->"8821b710-7077-4005-9e9b-d5fdea06ead8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNormDeterminant", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"theVectorSpaceDimension", "=", 
        RowBox[{"gaVectorSpaceDimension", "[", 
         RowBox[{"FirstCase", "[", 
          RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], "]"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"gaDeterminantOfMV", "[", 
          RowBox[{"expr", ",", "opts"}], "]"}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{"1", "/", 
          RowBox[{"Power", "[", 
           RowBox[{"2", ",", 
            RowBox[{"Ceiling", "[", 
             RowBox[{"theVectorSpaceDimension", "/", "2"}], "]"}]}], "]"}]}], 
         ")"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[843]:=",ExpressionUUID->"d0a1c123-9fc1-40c0-9474-d7135866213c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"two", " ", "methods", " ", 
    RowBox[{"realized", ":", " ", 
     RowBox[{"gaNorm2ReverseSigned", " ", "and", " ", "Det"}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInvertibleQ", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "gaDeterminantOfMV"}], ",", 
       RowBox[{"ZeroTolerance", "->", 
        RowBox[{"10", "^", 
         RowBox[{"-", "10"}]}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertibleQ", "::", "unknownMethod"}], "=", 
     "\"\<Invertibility check method Method->`1` is unknown. Possible value \
gaDeterminantNorm.\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertibleQ", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theMethod", "=", 
          RowBox[{"ToExpression", "[", 
           RowBox[{"OptionValue", "[", "Method", "]"}], "]"}]}], ",", 
         RowBox[{"chopTol", "=", 
          RowBox[{"OptionValue", "[", "ZeroTolerance", "]"}]}], ",", 
         "testResult", ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"gaGetAlgebra", "[", "expr", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "theMethod", ",", "\[IndentingNewLine]", "gaDeterminantOfMV", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"testResult", "=", 
           RowBox[{"Chop", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"gaDeterminantOfMV", "[", 
               RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], ",", 
             "chopTol"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"PossibleZeroQ", "[", "testResult", "]"}], ",", "False", 
            ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"NumericQ", "[", "testResult", "]"}], ",", "True", ",", 
              
              RowBox[{"testResult", "\[NotEqual]", "0"}]}], "]"}]}], "]"}]}], 
         ",", "\[IndentingNewLine]", "_", ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaInvertibleQ", "::", "unknownMethod"}], ",", "method"}], 
          "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellLabel->
  "In[844]:=",ExpressionUUID->"0aa770b1-4cf8-4c69-ae65-99f96ff18d08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Other multivector norms (Hermitian norm, etc... ) "
}], "Subsubsection",ExpressionUUID->"f5e4679a-51f2-4f30-a4a6-39a186a4006a"],

Cell[TextData[{
 "Implementation closely follows Staple, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". This functions calculate norm only if all multivectors are expanded in \
orthogonal base. ",
 StyleBox["Warning",
  FontColor->RGBColor[1, 0.5, 0.5]],
 " have we blocked Abs function when calculating ",
 StyleBox["Norm[ ]",
  FontWeight->"Bold"],
 ". If algebra is not real, then this do yield wrong result!!!."
}], "Text",ExpressionUUID->"a63eafb2-f5c5-4388-9bce-3aa6994c6dd3"],

Cell["\<\
There are many norms defined for  general Clifford algebras: 
1)Norm of coefficients,  
2) Norm of coefficients normalized (when coefficient norm is not zero)
3)gaNorm2ReverseSigned, where MV is multiplied by reversed MV and scalar part \
is taken 
4) gaNormReverseAbs, which is obtained from 3 by taking absolute value and \
then square root 
5) gaNorm2CliffordConjugateSigned, similar to 3, except that reverse is \
replaced by Clifford conjugate
6) gaNormCliffordConjugateAbs,  obtained from 5 in the same way as 4 (from 3)
7) gaNormHermitian \
\>", "Text",ExpressionUUID->"033eda36-7d45-4fef-82bd-9fab1b89348d"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["NormOfCoefficients[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaNormalize[ ]",
  FontWeight->"Bold"]
}], "Item",ExpressionUUID->"4cc22a17-6e08-4600-94b5-8895e582b4f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormOfCoefficients", "[", 
       RowBox[{"u_", ",", 
        RowBox[{"n_:", "2"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaGetMVComponents", "[", "uexp", "]"}], "/.", 
            RowBox[{"_bs", "\[Rule]", "1"}]}], ",", "n"}], "]"}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[847]:=",ExpressionUUID->"d6ff4e1c-0345-46f4-ac37-67cf4d377f65"],

Cell["\<\
gaNormalize normalizes multivector if Norm is numeric and not equal 0. For 0 \
warn and normalize using gaNormOfCoefficients. This, for example apply to \
null vectors.\
\>", "Text",ExpressionUUID->"f56b90ca-9305-463d-b1cb-05676de050c4"],

Cell["\<\
gaNormalize normalizes multivector if magnitude  squared is numeric and not \
equal 0. For 0 warn and normalize using gaNorm. This, for example apply to \
null vectors.\
\>", "Text",ExpressionUUID->"5faeaee6-a6b8-44f2-bf67-0510e5142bac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "zeroNorm"}], "=", 
   "\"\<Warning. Multivector `1` has zero Norm. gaNormOfCoefficients[ ] will \
be used for normalization.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "norm"}], "=", 
   "\"\<The required norm `1` is not defined.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when computing norm `1` of MV \
`2`. Will take scalar part.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaNormalize", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Norm", "->", "\"\<gaNormReverseAbs\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormalize", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", ",", 
          RowBox[{"normType", "=", 
           RowBox[{"OptionValue", "[", "Norm", "]"}]}], ",", "theNorm", ",", 
          "theVectorSpaceDimension"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"{", " ", 
             RowBox[{
             "\"\<gaNormReverseAbs\>\"", ",", " ", 
              "\"\<gaNormCliffordConjugateAbs\>\"", ",", 
              "\"\<gaDeterminantOfMV\>\"", ",", "\"\<gaNormHermitian\>\""}], 
             "}"}], ",", "normType"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"nsq", "=", 
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", 
              RowBox[{
               RowBox[{"ToExpression", "[", "normType", "]"}], "[", "expr", 
               "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormalize", "::", "nonscalar"}], ",", "normType", 
               ",", "expr"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", "\"\<gaDeterminantOfMV\>\"", "}"}], ",", 
               "normType"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"theVectorSpaceDimension", "=", 
               RowBox[{"gaVectorSpaceDimension", "[", 
                RowBox[{"FirstCase", "[", 
                 RowBox[{"expr", ",", "_Cl", ",", "0", ",", "Infinity"}], 
                 "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"expr", "/", 
               RowBox[{"Power", "[", 
                RowBox[{"nsq", ",", 
                 RowBox[{"(", 
                  RowBox[{"1", "/", 
                   RowBox[{"Power", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{"theVectorSpaceDimension", "/", "2"}], "]"}]}], 
                    "]"}]}], ")"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"NumericQ", "[", "nsq", "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Switch", "[", 
                RowBox[{"nsq", ",", 
                 RowBox[{"_", "?", "Positive"}], ",", 
                 RowBox[{"expr", "/", "nsq"}], ",", 
                 RowBox[{"_", "?", "Negative"}], ",", 
                 RowBox[{"expr", "/", 
                  RowBox[{"(", 
                   RowBox[{"-", "nsq"}], ")"}]}], ",", 
                 RowBox[{"_", "?", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Equal", "[", 
                    RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", 
                 RowBox[{
                  RowBox[{"Message", "[", 
                   RowBox[{
                    RowBox[{"gaNormalize", "::", "zeroNorm"}], ",", "expr"}], 
                   "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"expr", "/", 
                   RowBox[{"gaNormOfCoefficients", "[", "expr", "]"}]}]}], 
                 ",", "_", ",", 
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaNormalize", "::", "unexpected"}], ",", "nsq"}], 
                  "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "for", " ", "symbolic", " ", "answer", " ", "remove", " ", 
                 "Abs"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"nsq", "=!=", "0"}], ",", 
                 RowBox[{"expr", "/", 
                  RowBox[{"(", 
                   RowBox[{"nsq", "/.", 
                    RowBox[{"{", 
                    RowBox[{"Abs", "\[Rule]", "Identity"}], "}"}]}], ")"}]}], 
                 ",", 
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaNormalize", "::", "zeroNorm"}], ",", "expr"}], 
                  "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "unknown", " ", "norm", " ", "is", " ", "provided"}], 
            ",", " ", 
            RowBox[{"just", " ", "stop"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaNormalize", "::", "norm"}], ",", "normType"}], "]"}], 
           ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[848]:=",ExpressionUUID->"d38c3062-cd4b-4bbd-be63-569b36c7b5cb"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaNorm2ReverseSigned[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaNormReverseAbs[ ]",
  FontWeight->"Bold"]
}], "Item",ExpressionUUID->"7fd57813-76f4-4624-a0ef-9f010a40e535"],

Cell["The always working, thought non-optimal solution.", "Text",ExpressionUUID->"9cbf9e04-51c1-4680-9faa-42bbb7dc4750"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2ReverseSigned", "[", "expr_", "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", "expr", "]"}], ",", "expr"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[854]:=",ExpressionUUID->"5b066951-cbd9-40a6-8b8b-2ba5239821be"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by reversed multivector.\
\>", "Text",ExpressionUUID->"382de8fa-0b4e-46d2-acf0-849cacaf7801"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormReverseAbs", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNormReverseAbs", "::", "nonscalar"}], "=", 
    "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and reversed multivector.\>\""}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormReverseAbs", "[", "expr_", "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaNorm2ReverseSigned", "[", "expr", "]"}], "]"}]}], "}"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"-", "nsq"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", ",",
             "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaNormReverseAbs", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaNormReverseAbs", "::", "nonscalar"}], "]"}]}], "]"}],
            ";", "\[IndentingNewLine]", " ", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"Abs", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"nsq", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[855]:=",ExpressionUUID->"a9e194d9-db80-4282-ad33-34ac121154fc"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaNorm2CliffordConjugateSigned[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaNormCliffordConjugateAbs[ ]",
  FontWeight->"Bold"]
}], "Item",ExpressionUUID->"6b585bd4-bcf6-4930-938e-b3ad9f37ee03"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm2CliffordConjugateSigned", "[", "expr_", "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", "expr", "]"}], ",", "expr"}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[858]:=",ExpressionUUID->"c0b50bab-b314-4bee-9b70-b689f9e7bbbd"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by Clifford conjugated multivector.\
\>", "Text",ExpressionUUID->"f09509cc-5b23-4ded-a3b2-756166317ed3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormCliffordConjugateAbs", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNormCliffordConjugateAbs", "::", "nonscalar"}], "=", 
    "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and Clifford conjugate multivector.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormCliffordConjugateAbs", "[", "expr_", "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaNorm2CliffordConjugateSigned", "[", "expr", "]"}], 
           "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"-", "nsq"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", ",",
             "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaNormCliffordConjugateAbs", "::", "unexpected"}], ",",
               "nsq"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaNormCliffordConjugateAbs", "::", "nonscalar"}], 
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", " ", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"Abs", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"nsq", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[859]:=",ExpressionUUID->"9c60d8a2-6960-42ec-818e-d2d8f685bd08"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaNormHermitian[ ]",
  FontWeight->"Bold"],
 " "
}], "Item",ExpressionUUID->"b7d090f9-7727-4901-936f-47cda74c93ee"],

Cell["\<\
HermitianNorm is calculated as up and down geometric product (applies to \
spinors)\
\>", "Text",ExpressionUUID->"47ae94ea-e54a-4bad-bde8-7c30c3d4bcf4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormHermitian", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaPE", "[", 
     RowBox[{
      RowBox[{"gaIndexDown", "[", 
       RowBox[{"gaHermitianConjugate", "[", 
        RowBox[{"expr", ",", "opts"}], "]"}], "]"}], "\[GeometricProduct]", 
      "expr"}], "]"}], "/;", 
    RowBox[{"Not", "[", 
     RowBox[{"MatrixQ", "[", "expr", "]"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->
  "In[862]:=",ExpressionUUID->"f2bfe04c-57de-4b26-8524-64e6182075d1"],

Cell["HermitianNorm for matrices acts differently", "Text",ExpressionUUID->"7f64cc47-0e6b-4c90-8277-f66c712868c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaNormHermitian", "[", 
   RowBox[{"expr_List", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"gaQuaternionicConjugate", "[", 
       RowBox[{"gaComplexConjugate", "[", 
        RowBox[{"expr", ",", "opts"}], "]"}], "]"}], "]"}], ",", "expr"}], 
    "]"}], "/;", 
   RowBox[{"MatrixQ", "[", "expr", "]"}]}]}]], "Input",
 CellLabel->
  "In[863]:=",ExpressionUUID->"28aabb57-1710-4c06-a6c3-c5519111a91f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Reciprocal base and bivector commutator algebra (Lie algebra) functions"
}], "Subsection",ExpressionUUID->"e83bcc65-c8fc-497f-8060-6331473310c2"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection",ExpressionUUID->"55b37984-e8cf-48d8-8415-dacb11869c71"],

Cell["\<\
First, for test puposes it is usefull to have random nonorthonormal base.\
\>", "Text",ExpressionUUID->"52b99a4f-4433-405b-a330-39a386374be6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaRandomBasis", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ZeroTolerance", "->", 
      RowBox[{"10.", "^", 
       RowBox[{"(", 
        RowBox[{"-", "2"}], ")"}]}]}], ",", 
     RowBox[{"CoefficientFunction", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "100"}], "}"}], "]"}], "&"}], ")"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaRandomBasis", "[", 
   RowBox[{"al_Cl", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"chopTol", "=", 
       RowBox[{
        RowBox[{"ZeroTolerance", "/.", 
         RowBox[{"{", "opts", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaRandomBasis", ",", "ZeroTolerance"}], "]"}]}]}], ",", 
      RowBox[{"cf", "=", 
       RowBox[{
        RowBox[{"CoefficientFunction", "/.", 
         RowBox[{"{", "opts", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaRandomBasis", ",", "CoefficientFunction"}], "]"}]}]}], 
      ",", "pseudoscalar", ",", "co", ",", "vecBase", ",", 
      "pseudoscalarMagnitude", ",", "genVec"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"genVec", "=", 
      RowBox[{"gaGeneralMultivector", "[", 
       RowBox[{"co", ",", "al", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vecBase", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"genVec", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"co", "[", "any_", "]"}], "\[RuleDelayed]", 
           RowBox[{"cf", "[", "any", "]"}]}], "}"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "}"}]}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"pseudoscalar", "=", 
      RowBox[{"gaPE", "[", 
       RowBox[{"OuterProduct", "@@", "vecBase"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pseudoscalarMagnitude", "=", 
      RowBox[{"gaPE", "[", 
       RowBox[{"pseudoscalar", "\[GeometricProduct]", 
        RowBox[{"gaReverse", "[", "pseudoscalar", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{"allZeroTest", "[", 
       RowBox[{
        RowBox[{"{", "pseudoscalarMagnitude", "}"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"OuterProduct", "@@", "vecBase"}], ")"}], 
         "\[GeometricProduct]", 
         RowBox[{"gaReverse", "[", 
          RowBox[{"OuterProduct", "@@", "vecBase"}], "]"}]}], ",", "Identity",
         ",", "chopTol", ",", "\"\<gaRandomBasis[ ]\>\""}], "]"}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaPE", "[", 
          RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
        RowBox[{"Rest", "[", 
         RowBox[{"Subsets", "[", "vecBase", "]"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}], "[", 
        RowBox[{
         RowBox[{"GeometricAlgebra`mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->
  "In[864]:=",ExpressionUUID->"57371974-8cea-485c-bdb4-080b6b8cda5a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Reciprocal vectors and full bases"
}], "Subsubsection",ExpressionUUID->"974bbbe1-0bdf-40b6-a835-c9d90bda2266"],

Cell["\<\
The main function computes reciprocal vectors. Because given set of vectors \
can be linearly dependent we add some checks and tolerances in when we \
consider them linearly independent.\
\>", "Text",ExpressionUUID->"d3a15c70-bd0b-4607-b4cb-4a2a0bdf27b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "::", "NotABase"}], "=", 
   "\"\<There are not enought linearly independent vectors in `1` in order to \
compute reciprocal basis for `2` algebra.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaReciprocalVectors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ZeroTolerance", "->", 
     RowBox[{"10.", "^", 
      RowBox[{"(", 
       RowBox[{"-", "2"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "[", 
    RowBox[{"vectorBase_List", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAssociationFunction", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"vectorBase", ",", "_Association"}], "]"}], ",", 
          "Identity", ",", "gaAssociationTogether"}], "]"}]}], ",", 
       RowBox[{"theResultFunction", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"vectorBase", ",", "_Association"}], "]"}], ",", 
          "Identity", ",", "gaPlainRepresentation"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"chopTol", "=", 
        RowBox[{
         RowBox[{"ZeroTolerance", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaReciprocalVectors", ",", "ZeroTolerance"}], "]"}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"GeometricAlgebra`p`whichAlgebra", "[", "vectorBase", "]"}]}],
        ",", 
       RowBox[{"pseudoscalar", "=", 
        RowBox[{"gaPE", "[", 
         RowBox[{"OuterProduct", "@@", "vectorBase"}], "]"}]}], ",", 
       "pseudoscalarMagnitude", ",", "inversePseudoscalar"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "=!=", 
         RowBox[{"Length", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"vectorBase", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
        ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaReciprocalVectors", "::", "NotABase"}], ",", 
           "vectorBase", ",", "theAlgebra"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"pseudoscalarMagnitude", "=", 
       RowBox[{"theAssociationFunction", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"pseudoscalar", "\[GeometricProduct]", 
          RowBox[{"gaReverse", "[", "pseudoscalar", "]"}]}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Catch", "[", 
       RowBox[{"GeometricAlgebra`p`allZeroTest", "[", 
        RowBox[{
         RowBox[{"{", "pseudoscalarMagnitude", "}"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"OuterProduct", "@@", "vectorBase"}], ")"}], 
          "\[GeometricProduct]", 
          RowBox[{"gaReverse", "[", 
           RowBox[{"OuterProduct", "@@", "vectorBase"}], "]"}]}], ",", 
         "theResultFunction", ",", "chopTol", ",", 
         "\"\<gaReciprocalVectors[ ]\>\""}], "]"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inversePseudoscalar", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"-", "1"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "*", 
             
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], 
                "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], "/", 
          "pseudoscalarMagnitude"}], ")"}], "\[GeometricProduct]", 
        "pseudoscalar"}]}], ";", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"gaPE", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{"i", "-", "1"}], ")"}]}], "\[GeometricProduct]", 
            RowBox[{"(", 
             RowBox[{"OuterProduct", "@@", 
              RowBox[{"ReplacePart", "[", 
               RowBox[{"vectorBase", ",", 
                RowBox[{"i", "->", "Nothing"}]}], "]"}]}], ")"}]}], ")"}], 
          "\[LeftContract]", "inversePseudoscalar"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",\

 CellLabel->
  "In[866]:=",ExpressionUUID->"4b829deb-360d-4c32-b0e3-60aee7b2dfc1"],

Cell["\<\
After we know how to compute reciprocal vectors, we can generate entire \
reciprocal base. 
In the case of orthonormal base we just rise indices\
\>", "Text",ExpressionUUID->"e755e141-998c-44cb-ae4a-ef5eade99fd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaReciprocalBasis", "[", "downIndexBase_List", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"downIndexBase", "/.", 
     RowBox[{"{", 
      RowBox[{"x_mvDownUp", "\[RuleDelayed]", 
       RowBox[{"Reverse", "[", "x", "]"}]}], "}"}]}], ")"}], "/;", 
   RowBox[{"downIndexBase", "===", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"whichAlgebra", "[", "downIndexBase", "]"}], 
     "]"}]}]}]}]], "Input",
 CellLabel->
  "In[869]:=",ExpressionUUID->"14447705-1254-45ba-82d1-3e185e6839bb"],

Cell["For general case we are forced to do calculations", "Text",ExpressionUUID->"349dfad9-45f4-4db5-938f-a3753cdd0a02"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalBasis", "::", "ordering"}], "=", 
   "\"\<Warning. Provided full basis `1` do not match or is inconsistent with \
given basis vectors `2`. Calculated reciprocal basis of higher grade elements \
will not match the provided basis higher grade elements. Provide properly \
prepared basis!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "reciprocalVectors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ZeroTolerance", "->", 
     RowBox[{"10.", "^", 
      RowBox[{"(", 
       RowBox[{"-", "2"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaReciprocalBasis", "[", 
   RowBox[{"algebraBase_List", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], "&"}], "/@", "algebraBase"}], 
          ",", "0"}], "]"}]}], ",", "reciprocVec"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
          RowBox[{"Rest", "[", 
           RowBox[{"Subsets", "[", "vectors", "]"}], "]"}]}], "=!=", 
         RowBox[{"Rest", "[", "algebraBase", "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaReciprocalBasis", "::", "ordering"}], ",", "algebraBase",
           ",", "vectors"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"reciprocVec", "=", 
       RowBox[{"gaReciprocalVectors", "[", 
        RowBox[{"vectors", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaPE", "[", 
           RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
         RowBox[{"Rest", "[", 
          RowBox[{"Subsets", "[", "reciprocVec", "]"}], "]"}]}], ",", 
        RowBox[{"algebraBase", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "algebraBase", "]"}], "===", 
    RowBox[{"Power", "[", 
     RowBox[{"2", ",", 
      RowBox[{"gaVectorSpaceDimension", "[", 
       RowBox[{"whichAlgebra", "[", "algebraBase", "]"}], "]"}]}], 
     "]"}]}]}]}]}], "Input",
 CellLabel->
  "In[870]:=",ExpressionUUID->"fb2db81e-fa4c-40c7-add6-628f75ec57b6"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Structure constants and bilinear forms (including the metric and  Killing \
form)"
}], "Subsubsection",ExpressionUUID->"d37128c4-0f6b-4e8e-9a83-e1c102c447d6"],

Cell["\<\
Given some base it is trivial to compute general homogeneous bilinear forms, \
which are required for Casimir operator expressions (the standard Lie algebra \
formulas). Table[InnerProduct[list[[i]], list[[j]]], {i, 1, Length[list]}, \
{j, i,  Length[list]}]; might be faster according to \
https://mathematica.stackexchange.com/questions/163240/specialized-form-of-\
outerf-list-list-for-symmetric-f  .\
\>", "Text",ExpressionUUID->"26d3c6ca-c90a-40b5-a20c-5733e617020e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBilinearForm", "[", 
     RowBox[{"base_List", ",", 
      RowBox[{"{", "grade_Integer", "}"}]}], "]"}], ":=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"homogeneusElements", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"base", ",", 
            RowBox[{"{", "grade", "}"}]}], "]"}], ",", "0"}], "]"}]}], "}"}], 
      ",", 
      RowBox[{"Map", "[", 
       RowBox[{"gaPE", ",", 
        RowBox[{"Outer", "[", 
         RowBox[{
         "InnerProduct", ",", "homogeneusElements", ",", 
          "homogeneusElements"}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMetric", "[", "base_List", "]"}], ":=", 
   RowBox[{"gaBilinearForm", "[", 
    RowBox[{"base", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaKillingMetric", "[", "base_List", "]"}], ":=", 
   RowBox[{"gaBilinearForm", "[", 
    RowBox[{"base", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[873]:=",ExpressionUUID->"a29f11e7-1801-4317-9284-6d97263cd49b"],

Cell[TextData[{
 "General formula for structure constants can be easily derived from the \
bivector algebra definition: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "/", "2"}], ")"}], "[", 
     RowBox[{
      SubscriptBox["\[ScriptCapitalB]", "i"], ",", 
      SubscriptBox["\[ScriptCapitalB]", "j"]}], "]"}], "=", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["c", 
       RowBox[{"i", ",", "j"}]], "k"], 
     SubscriptBox["\[ScriptCapitalB]", "k"]}]}], TraditionalForm]],
  ExpressionUUID->"b3f0f6fa-93b7-4b88-bef5-ea81d253b2b9"],
 " by taking inner product from the right with reciprocal bivector ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]],ExpressionUUID->
  "f1d47e69-8a6f-42f9-a0a1-39a0b1b8a21e"],
 " (no sum). Then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]],ExpressionUUID->
  "5b871442-7558-47fb-a854-b6f464bdc9df"],
 "\[InnerProduct]",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]],ExpressionUUID->
  "cbff668d-ccdf-442d-84f9-6aee18fe7047"],
 "(no sum) will yield -1, and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["c", 
      RowBox[{"i", ",", "j"}]], "k"], "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", "2"}], ")"}], "[", 
       RowBox[{
        SubscriptBox["\[ScriptCapitalB]", "i"], ",", 
        SubscriptBox["\[ScriptCapitalB]", "j"]}], "]"}]}], "\[InnerProduct]", 
     
     SuperscriptBox["\[ScriptCapitalB]", "k"]}]}], TraditionalForm]],
  ExpressionUUID->"cbadf646-135b-41bb-a628-6b1be1fb1c29"],
 ", which is valid for general nonorthonormal set of bivectors (which should \
make base).  Because of explicit anti commutativity we slightly save time \
remembering structure constant values. Indices represent bivector order \
number in given base, therefore it is important to provide the same order in \
reciprocal base (otherwise computation will go wrong)."
}], "Text",ExpressionUUID->"7695d990-bbc8-49b0-b14c-c49e950c787f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_", ",", "i_"}], "}"}], ",", "__"}], "]"}], ":=", "0"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], ",", "k_Integer", ",", 
     "baseBivectors_List", ",", "recoprocalBaseBivectors_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"gaStructureConstant", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"j", ",", "i"}], "}"}], ",", "k", ",", "baseBivectors", ",", 
       "recoprocalBaseBivectors"}], "]"}]}], "/;", 
    RowBox[{"i", "<", "j"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaStructureConstant", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], ",", "k_Integer", ",", 
    "baseBivectors_List", ",", "recoprocalBaseBivectors_List"}], "]"}], ":=", 
  
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaStructureConstant", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "baseBivectors", ",", 
       "recoprocalBaseBivectors"}], "]"}], "=", 
     RowBox[{"-", 
      RowBox[{"gaPE", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutatorExpand", "[", 
          RowBox[{"1", "/", "2"}], "]"}], "[", 
         RowBox[{"gaCommutator", "[", 
          RowBox[{
           RowBox[{"baseBivectors", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"baseBivectors", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], "\[InnerProduct]", 
        RowBox[{"recoprocalBaseBivectors", "[", 
         RowBox[{"[", "k", "]"}], "]"}]}], "]"}]}]}], ")"}], "/;", 
   RowBox[{"i", ">", "j"}]}]}]}], "Input",
 CellLabel->
  "In[876]:=",ExpressionUUID->"89caa8c2-a89a-47e7-b5f9-99161efb5310"],

Cell["\<\
Define general Casimir operator using Lie algebras formulas:  C_m =\\sum \
c_{i_1j_1}^{j_2} c_{i_2 j_2}^{j_3}
  \\cdots c_{i_m j_m}^{j_1} g^{i_1l_1} g^{i_2l_2} \\cdots g^{i_ml_m} \
\\cX_{l_1} \\cX_{l_2}\\cdots\\cX_{l_m}\\, \
\>", "Text",ExpressionUUID->"50cab821-cde1-4aab-b197-cfbcdf25dc14"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["C", "2"], TraditionalForm]],ExpressionUUID->
  "c92d876f-58ff-4a12-9a9d-95c345d27294"],
 " operator gives the number of bivectors of the algebra. What is less clear \
is how to interpret numbers of formulas ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["C", "3"], TraditionalForm]],ExpressionUUID->
  "78229f8e-f8d3-42ea-8357-fcd0f28ff572"],
 ", etc... Seems, that infinite number of these exist and they are definitely \
not higher order Casimir operators of Lie groups."
}], "Text",ExpressionUUID->"9b1ee343-2dc8-4864-beaf-3685354f2a59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCasimir", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"{", "order_Integer", "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"reciprocalBase", "=", 
        RowBox[{"gaReciprocalBasis", "[", "fullBase", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
       ",", "theStructureConstants", ",", 
       "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
       ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
       "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "dynkinFactor", ",", 
       "mySum", ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", 
       ",", "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"iterRange", "=", 
       RowBox[{"Binomial", "[", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "theBivectors", "]"}], "===", "1"}], ",", "0",
         ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theBivectors", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"fullBase", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theReciprocalBivectors", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"reciprocalBase", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theStructureConstants", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"gaStructureConstant", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
              ",", "theReciprocalBivectors"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"uniqueSymbolsC", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Unique", "[", "cas", "]"}], ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"uniqueSymbolsB", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Unique", "[", "bii", "]"}], ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"inverseKillingMetric", "=", 
          RowBox[{"Inverse", "[", 
           RowBox[{"gaKillingMetric", "[", "fullBase", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theStructureConstantsSummedWithMetric", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"theStructureConstants", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "j", ",", "k"}], "]"}], "]"}], "*", 
               RowBox[{"inverseKillingMetric", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "l"}], "]"}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "iterRange"}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"l", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterators", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
           RowBox[{"NestList", "[", 
            RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
             RowBox[{
              RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
            "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"dynkinFactor", "=", 
          RowBox[{"gaDynkinFactor", "[", "fullBase", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dynkinFactor", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ReleaseHold", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Hold", "@@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"mySum", "@@", 
                  RowBox[{"Prepend", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsB"}], ")"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"mySum", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Append", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"gp", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"theBivectors", ",", "#"}], "]"}], "&"}], "/@", 
                    "uniqueSymbolsB"}], ")"}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "scWm", "->", "theStructureConstantsSummedWithMetric"}], ",", 
                
                RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
                RowBox[{"mySum", "\[Rule]", "Sum"}]}], "}"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{"gp", "\[Rule]", "GeometricProduct"}], "}"}]}], 
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"order", ">", "1"}]}]}]], "Input",
 CellLabel->
  "In[879]:=",ExpressionUUID->"06c5696b-2d5a-46f3-9aa8-067e9ac1cb1a"],

Cell[CellGroupData[{

Cell["\<\
 One can instead of summing structure constants with metric use reciprocal \
bivectors instead. This however is slower, therefore inactivated.\
\>", "Text",
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"7e939409-fed8-49a4-a9c0-48f82a1abac2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCasimirOther", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"{", "order_Integer", "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"reciprocalBase", "=", 
        RowBox[{"gaReciprocalBasis", "[", "fullBase", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
       ",", "theStructureConstants", ",", 
       "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
       ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
       "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "dynkinFactor", ",", 
       "mySum", ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", 
       ",", "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"iterRange", "=", 
       RowBox[{"Binomial", "[", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"theBivectors", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"gaGetMV", "[", 
          RowBox[{"fullBase", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"theReciprocalBivectors", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"gaGetMV", "[", 
          RowBox[{"reciprocalBase", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"theStructureConstants", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"gaStructureConstant", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
           ",", "theReciprocalBivectors"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"uniqueSymbolsC", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Unique", "[", "cas", "]"}], ",", 
         RowBox[{"{", "order", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"uniqueSymbolsB", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Unique", "[", "bii", "]"}], ",", 
         RowBox[{"{", "order", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"iterators", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
        RowBox[{"NestList", "[", 
         RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
          RowBox[{
           RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dynkinFactor", "=", 
       RowBox[{"gaDynkinFactor", "[", "fullBase", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dynkinFactor", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ReleaseHold", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Hold", "@@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"mySum", "@@", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                   "uniqueSymbolsB"}], ")"}], ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"mySum", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"gp", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"theReciprocalBivectors", ",", "#"}], "]"}], 
                    "&"}], "/@", 
                    RowBox[{"Reverse", "[", "uniqueSymbolsB", "]"}]}], 
                    ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "]"}]}], 
              "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"scWm", "->", "theStructureConstants"}], ",", 
             RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
             RowBox[{"mySum", "\[Rule]", "Sum"}]}], "}"}]}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{"gp", "\[Rule]", "GeometricProduct"}], "}"}]}], ")"}]}]}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"order", ">", "1"}]}]}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{
  GroupTogetherGrouping, 
   10000.},ExpressionUUID->"6e8f9dac-25bf-41cb-866e-364cd0b1ba14"]
}, Open  ]],

Cell["\<\
Dynkin index we compute using the trick that numbers given by two different \
formulas should yield the same number. From that we comute ratio. In \
particularly we compute Killing metric using structure constants  K_{ij}= \
\\delta\\sum_{k,l=1}^d c_{il}^k  c_{jk}^l, (where \\delta is the Dynkin \
factor). The function below is hidden from the user, because it is used in \
gaDynkinFactor[ ] only.\
\>", "Text",ExpressionUUID->"2a3f16db-e620-4876-bc07-b5beff4182b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaKillingMetric", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<StructureConstants\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[880]:=",ExpressionUUID->"edf1561c-7ae3-4a91-aa59-f949141bf133"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaKillingMetric", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"reciprocalBase", "=", 
       RowBox[{"gaReciprocalBasis", "[", "fullBase", "]"}]}], ",", 
      RowBox[{"theAlgebra", "=", 
       RowBox[{"whichAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
      ",", "theStructureConstants", ",", 
      "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
      ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
      "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "mySum", ",", "myTable", 
      ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", ",", 
      "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"OptionValue", "[", "Method", "]"}], "===", 
       "\"\<StructureConstants\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"the", " ", "only", " ", "impemented", " ", "method"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"iterRange", "=", 
        RowBox[{"Binomial", "[", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], ",", 
          "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"theBivectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"fullBase", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"theReciprocalBivectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"reciprocalBase", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"theStructureConstants", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"gaStructureConstant", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
            ",", "theReciprocalBivectors"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"uniqueSymbolsC", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Unique", "[", "cas", "]"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"uniqueSymbolsB", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Unique", "[", "bii", "]"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"theStructureConstantsSummedWithMetric", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"theStructureConstants", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "j", ",", "k"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"iterators", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
         RowBox[{"NestList", "[", 
          RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
           RowBox[{
            RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ReleaseHold", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Hold", "@@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"myTable", "@@", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                 "uniqueSymbolsB"}], ")"}], ",", 
               RowBox[{"(", 
                RowBox[{"mySum", "@@", 
                 RowBox[{"Prepend", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}]}], 
              "\[IndentingNewLine]", "]"}]}], "}"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"scWm", "->", "theStructureConstantsSummedWithMetric"}], 
           ",", 
           RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
           RowBox[{"mySum", "\[Rule]", "Sum"}], ",", 
           RowBox[{"myTable", "\[Rule]", "Table"}]}], "}"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 CellLabel->
  "In[881]:=",ExpressionUUID->"9995e218-5bed-4a6e-8674-45488a6abd78"],

Cell["\<\
and then do the same computations directly with bivectors \
K_{ij}=\\cB_i\\d\\cB_j=\\langle\\cB_i\\cB_j\\rangle_0. Comparing these \
numbers the Dynkin factor is computed.\
\>", "Text",ExpressionUUID->"3046382d-6c11-480e-9258-dcecff12adc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDynkinFactor", "[", "fullBase_", "]"}], ":=", 
  RowBox[{"First", "[", 
   RowBox[{"Divide", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaKillingMetric", "[", "fullBase", "]"}], ",", 
        RowBox[{"gaKillingMetric", "[", 
         RowBox[{"fullBase", ",", 
          RowBox[{"Method", "\[Rule]", "\"\<StructureConstants\>\""}]}], 
         "]"}]}], "}"}]}], ")"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[882]:=",ExpressionUUID->"bfa7b7be-bebf-4a74-9c09-e7af6d6a46d5"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into geometric product"
}], "Subsection",ExpressionUUID->"1b9f7abf-8765-4fae-9d0f-70fe33580228"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help and decomposition test functions (gaCliffordDecomposableQ[ ], \
gaVersorQ[ ])"
}], "Subsubsection",ExpressionUUID->"d66323cc-d3bd-4d9f-b606-d464679436a2"],

Cell["Here are some criteria when ", "Text",ExpressionUUID->"14dd85b8-7d43-454e-aa92-91777034d6bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "True", " ", "if", " ", "all", " ", "terms", " ", "of", " ", "u", " ", 
    "are", " ", "of", " ", "even", " ", "grade", " ", "or", " ", "all", " ", 
    "terms", " ", "are", " ", "of", " ", "odd", " ", "grade"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaMultivectorParityCheck", "[", "u_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"allGrades", "=", 
        RowBox[{"gaGetGrade", "[", "u", "]"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "EvenQ"}], "]"}], "||", 
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "OddQ"}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gradeParityCheck", "[", "gradeList_List", "]"}], ":=", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "EvenQ"}], "]"}], "||", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "OddQ"}], "]"}]}]}]}]}]], "Input",
 CellLabel->
  "In[883]:=",ExpressionUUID->"e78aa264-a06f-4ab4-afb3-5d06b373e7b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Decomposability", " ", 
    RowBox[{"Test", ".", " ", "Necessary"}], " ", "in", " ", "indefinite", 
    " ", "signatures"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "[", "u_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"allGrades", "=", 
       RowBox[{"gaGetGrade", "[", "u", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
             RowBox[{"Equal", "[", 
              RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaNorm2ReverseSigned", "[", "u", "]"}], "]"}], "]"}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaNorm2ReverseSigned", "[", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"u", ",", 
              RowBox[{"{", 
               RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], "]"}],
            "]"}], "===", "0"}], ",", 
         RowBox[{"Throw", "[", "False", "]"}], ",", 
         RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[885]:=",ExpressionUUID->"d4d7fc55-bf6b-42d1-8a0d-c06edd481337"],

Cell["\<\

This is experimental (unproved) versor test. Versor here is defined as a \
geometric product of vectors. Important note: vectors cannot be  isotropic \
(null) here [GSSDW-CADoCOGE]. \
\>", "Text",ExpressionUUID->"ebe71984-d4d8-443f-a870-69cbe52d137a"],

Cell[TextData[{
 "It checks if multivector consist of either of only even or only odd grades \
and then computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", "A", "]"}], " ", 
     SubscriptBox["e", "i"], " ", 
     RowBox[{"gaInverse", "[", "A", "]"}]}], ")"}], TraditionalForm]],
  ExpressionUUID->"b089d9ff-91a0-4c4f-b276-e88e4f7136e1"],
 " for each of basis vectors [Bouma2001a,b] . If after transformation basis \
vectors remains vectors, then we assume A is a versor. If for some vectors \
after transformation  we get zero, this means we have at least one isotropic \
vector. This test applies to non isotropic product of vectors.  MV with \
symbolic coefficients are ignored."
}], "Text",ExpressionUUID->"646d3284-4920-4b7a-834e-6bd4e44a4e13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaVersorQ", "[", "generalMV_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "generalMV", "]"}]}], ",", 
       RowBox[{"generalMVexpanded", "=", 
        RowBox[{"gaGradeInverse", "[", 
         RowBox[{"gaPE", "[", "generalMV", "]"}], "]"}]}], ",", "baseVectors",
        ",", "inversedMV"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
          "gaMultivectorParityCheck", "[", "generalMVexpanded", "]"}]}], ",", 
         
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"baseVectors", "=", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{"theAlgebra", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"gaInvertibleQ", "[", "generalMV", "]"}], ",", 
         RowBox[{"inversedMV", "=", 
          RowBox[{"gaInverse", "[", "generalMVexpanded", "]"}]}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"gaGetGrade", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{
              RowBox[{"gaPE", "[", 
               RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
               "]"}], "\[GeometricProduct]", "inversedMV"}], "]"}], "]"}], 
           ",", 
           RowBox[{"{", "1", "}"}], ",", "\"\<ok\>\"", ",", "_", ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
        "baseVectors"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"gaInvertibleQ", "[", "generalMV", "]"}], "]"}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}], ";"}], "\[IndentingNewLine]", 
      "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{
    RowBox[{"gaVariables", "[", 
     RowBox[{"gaPE", "[", "generalMV", "]"}], "]"}], "===", 
    RowBox[{"{", "}"}]}]}]}]], "Input",
 CellLabel->
  "In[886]:=",ExpressionUUID->"6ccb1b19-a494-480d-83e0-9946b48cdf99"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Decomposition of versor"
}], "Subsubsection",ExpressionUUID->"1d3235a4-3b8f-4c32-afd4-1fb53e2e4d39"],

Cell["\<\
 Reimplementation of Staples versor factorization  [GSSDW-CADoCOGE] algorithm.\
\>", "Text",ExpressionUUID->"9a3e8745-803b-4717-be54-0b20100bcce0"],

Cell[TextData[{
 "Vector wrapping x->B x ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]],ExpressionUUID->
  "320a2fc7-cc54-463d-89ae-f6a0b0887618"],
 "/|B|^2 , where B is assumed to be a blade and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]],ExpressionUUID->
  "b6277a8a-f3fe-4461-9a81-b70a7523dc2e"],
 " denotes its Clifford conjugation (reverse and grade inverse) \
transformation is important enought to give name ,"
}], "Text",ExpressionUUID->"39968301-8ed4-4ea5-9b43-796bfb5fd05a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wrapCliffordConjugate", "[", 
   RowBox[{"wrapArg_", ",", "wrappingBlade_"}], "]"}], ":=", 
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"wrappingBlade", "\[GeometricProduct]", "wrapArg"}], "]"}], 
      "\[GeometricProduct]", 
      RowBox[{"gaCliffordConjugate", "[", "wrappingBlade", "]"}]}], "]"}], 
    "/", 
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"gaNorm2ReverseSigned", "[", "wrappingBlade", "]"}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[887]:=",ExpressionUUID->"88006b3c-8976-40a1-956f-624b2afa906d"],

Cell["\<\
It is useful to have single decomposition step of factoring one vector per \
step. In the last step we reverse obtained vectors order in order it be ready \
for multiplication of entire set.  Note, that due to huge numbers procedure \
might not be stable numerically.\
\>", "Text",ExpressionUUID->"520ff151-457d-4d62-afd3-fc43642b387a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "oneStepCliffordDecompose", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"NextVector", "\[Rule]", 
      RowBox[{"{", "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{"decomposableMV_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"oneStepCliffordDecompose", "[", 
       RowBox[{
        RowBox[{"{", "decomposableMV", "}"}], ",", "opts"}], "]"}], "/;", 
      RowBox[{"NumericQ", "[", 
       RowBox[{"decomposableMV", "/.", 
        RowBox[{
         RowBox[{"bs", "[", "__", "]"}], "\[RuleDelayed]", "1"}]}], "]"}]}]}],
     ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"decomposableMV_", ",", "outputVectors___"}], "}"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"allGrades", "=", 
          RowBox[{"gaGetGrade", "[", "decomposableMV", "]"}]}], ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"First", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"decomposableMV", ",", "_Cl", ",", "Infinity"}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"theElement", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"NextVector", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"oneStepCliffordDecompose", ",", "NextVector"}], "]"}]}],
            ")"}]}], ",", " ", "maxGrade", ",", "selVector", ",", 
         "wrappedSelVector", ",", "wrappedSelVectorSignedMagnitudeSquare"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"maxGrade", "=", 
            RowBox[{"Last", "[", "allGrades", "]"}]}], ")"}], ">", "1"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"theElement", "=!=", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"selVector", "=", "theElement"}], ",", 
            RowBox[{"selVector", "=", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"RandomChoice", "[", 
                   RowBox[{"Union", "@@", 
                    RowBox[{"gaGetIndex", "[", "decomposableMV", "]"}]}], 
                   "]"}], "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVector", "=", 
           RowBox[{"(", 
            RowBox[{"selVector", "-", 
             RowBox[{"wrapCliffordConjugate", "[", 
              RowBox[{"selVector", ",", "decomposableMV"}], "]"}]}], ")"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "=", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", "wrappedSelVector", "]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "!=", "0."}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "[", 
                 RowBox[{
                 "decomposableMV", "\[GeometricProduct]", 
                  "wrappedSelVector"}], "]"}], "/", 
                "wrappedSelVectorSignedMagnitudeSquare"}], "]"}], ",", 
              "outputVectors", ",", "wrappedSelVector"}], "}"}]}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Reverse", "[", 
          RowBox[{"{", 
           RowBox[{"outputVectors", ",", "decomposableMV"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[888]:=",ExpressionUUID->"555b31e7-67b4-45fd-b4c0-79e74b2b81e9"],

Cell["\<\
Before starting decomposition we check if input is decomposible (this is \
slowdown) . \
\>", "Text",ExpressionUUID->"5f7590fe-66b2-4ddd-b4b7-e36d7e001e8a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCliffordDecompose", "::", "unable"}], "=", 
    "\"\<Multivector failed decomposition test. This method fails if versor \
contains an isotropic vector.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCliffordDecompose", "[", "decomposibleMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allGrades", "=", 
      RowBox[{"gaGetGrade", "[", "decomposibleMV", "]"}]}], "}"}], ",", " ", 
    RowBox[{"If", "[", 
     RowBox[{"(*", " ", 
      RowBox[{"test", " ", "decomposability", " ", "before", " ", "start"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Catch", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
              RowBox[{"Equal", "[", 
               RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", "decomposibleMV", "]"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaNorm2ReverseSigned", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"decomposibleMV", ",", 
               RowBox[{"{", 
                RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], 
             "]"}], "]"}], "===", "0"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}], ",", 
          RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"(*", " ", 
       RowBox[{
       "start", " ", "decomposition", " ", "step", " ", "by", " ", "step"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"(", 
        RowBox[{"Nest", "[", 
         RowBox[{"oneStepCliffordDecompose", ",", "decomposibleMV", ",", 
          RowBox[{"Last", "[", 
           RowBox[{"gaGetGrade", "[", "decomposibleMV", "]"}], "]"}]}], "]"}],
         ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"gaCliffordDecompose", "::", "unable"}], "]"}], ";", 
       "$Failed"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellLabel->
  "In[890]:=",ExpressionUUID->"f96a4f9f-f0d9-4338-b2f6-045b28b9b240"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Factor when one term is known"
}], "Subsubsection",ExpressionUUID->"febb48c3-948a-454c-9e8c-e77d907052e2"],

Cell["\<\
This function try to factor expr into sum of given (known) factors, i.e \
gaFactorTerm[expr,{fac1, fac2}]-> expr=answer1\[GeometricProduct]fac1+answer2\
\[GeometricProduct]fac2. The result is returned in the form {{answer1,fac1}, \
{answer2,fac2},...}. \
\>", "Text",ExpressionUUID->"ba9dc594-c6ec-4895-8707-1cfec3d233d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "multipleSolutions"}], "=", 
   "\"\<SolveAlways provided multiple solutions taking the first.\>\""}], ";", 
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "SolveAlways"}], "=", 
   "\"\<SolveAlways did not find solution of equation `1` with respect to \
variables `2`. Factorization attempt failed.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[892]:=",ExpressionUUID->"9319a5b5-e257-4ca8-ab6e-c9bb819de7a4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaFactorTerm", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<SolveAlways\>\""}], ",", 
      RowBox[{"GeneratedParameters", "\[Rule]", "C"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"{", "knownfactor__", "}"}], ",", "opts___"}], "]"}], ":=", 
   RowBox[{"factorTerm", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "knownfactor", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Direction", "\[Rule]", "Left"}], ",", "opts"}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "[", 
    RowBox[{
     RowBox[{"{", "knownfactor__", "}"}], ",", "expr_", ",", "opts___"}], 
    "]"}], ":=", 
   RowBox[{"factorTerm", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "knownfactor", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Direction", "\[Rule]", "Right"}], ",", "opts"}], "}"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[893]:=",ExpressionUUID->"2d5e4afa-7584-4ecd-8821-a3590b737c99"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"help", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"singleCoefficientSolve", "[", 
        RowBox[{"{", 
         RowBox[{"eq_", ",", "vars_List"}], "}"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "fictiveVars", ",", "varName", ",", "sol", ",", "theEqLHS"}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theEqLHS", "=", 
           RowBox[{"(", 
            RowBox[{"Last", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"CoefficientRules", "[", 
                RowBox[{"eq", ",", "vars"}], "]"}], "/.", 
               RowBox[{"_bs", "\[Rule]", "0"}]}], ")"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"fictiveVars", "=", 
           RowBox[{"varName", "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "theEqLHS", "]"}], "]"}]}]}], ";", 
          RowBox[{"sol", "=", 
           RowBox[{"SolveAlways", "[", 
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{"Equal", "[", 
               RowBox[{
                RowBox[{"theEqLHS", "*", "fictiveVars"}], ",", "0"}], "]"}], 
              "]"}], ",", "fictiveVars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "sol", "]"}], ",", "\[IndentingNewLine]", 
            "0", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaFactorTerm", "::", "SolveAlways"}], ",", 
               RowBox[{"Thread", "[", 
                RowBox[{"Equal", "[", 
                 RowBox[{
                  RowBox[{"theEqLHS", "*", "fictiveVars"}], ",", "0"}], "]"}],
                 "]"}], ",", "fictiveVars"}], "]"}], ";", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", "1", ",", 
            RowBox[{"Flatten", "[", "sol", "]"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"gaFactorTerm", "::", "multipleSolutions"}], "]"}], ";", 
             RowBox[{"sol", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"trivial", " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"factorTerm", "[", 
        RowBox[{"exprToFactor_", ",", 
         RowBox[{"{", 
          RowBox[{"knownFactor_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{"#", ",", "_bs"}], "]"}], "&"}], ")"}]}], "}"}], ",", 
         RowBox[{"{", "___", "}"}]}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", "knownFactor"}], ")"}], "*", "exprToFactor"}], 
         ",", "knownFactor"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"main", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"factorTerm", "[", 
        RowBox[{"exprToFactor_", ",", 
         RowBox[{"{", "knownfactor__", "}"}], ",", 
         RowBox[{"{", "opts___", "}"}]}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"theDirection", "=", 
            RowBox[{"Direction", "/.", 
             RowBox[{"{", "opts", "}"}]}]}], ",", 
           RowBox[{"theMethod", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", "gaFactorTerm", "]"}]}], ")"}]}], ",", 
           RowBox[{"theCoef", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"GeneratedParameters", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", "gaFactorTerm", "]"}]}], ")"}]}], ",", 
           RowBox[{"alg", "=", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"exprToFactor", ",", "_Cl", ",", 
              RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"theBody", "=", 
            RowBox[{"gaPE", "/@", 
             RowBox[{"{", "knownfactor", "}"}]}]}], ",", "tempC", ",", "expr",
            ",", "testMV", ",", "prototypes", ",", "freeVars", ",", 
           "exprSeparatedByFreeCoeffs", ",", "baseElemsOfEachCoeff", ",", 
           "answerWithoutFreeVars", ",", "vars", ",", "solAns", ",", 
           "answer"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"initialize", " ", "data"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeVars", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Variables", "[", "exprToFactor", "]"}], ",", 
             RowBox[{"_bs", "|", "_MV"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "if", " ", "there", " ", "are", " ", "no", " ", "symbolic", " ", 
            "coefficient", " ", "add", " ", "one", " ", "and", " ", "then", 
            " ", "remove", " ", "in", " ", "the", " ", "end"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"freeVars", "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"expr", "=", 
              RowBox[{"tempC", "*", "exprToFactor"}]}], ";", 
             RowBox[{"freeVars", "=", "tempC"}]}], ",", 
            RowBox[{"expr", "=", "exprToFactor"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"exprSeparatedByFreeCoeffs", "=", 
           RowBox[{"CoefficientRules", "[", 
            RowBox[{"expr", ",", "freeVars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"baseElemsOfEachCoeff", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{"#", ",", "_bs", ",", "Infinity"}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}], ")"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theMethod", ",", "\[IndentingNewLine]", "\"\<SolveAlways\>\"", 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"testMV", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"#", ",", "alg"}], "]"}], "&"}], "/@", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"theCoef", "[", "i", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                  "]"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"theCoef", "[", "i_", "]"}], "[", "j_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"theCoef", "[", 
                  RowBox[{"i", ",", "j"}], "]"}]}], "}"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"theDirection", ",", "\[IndentingNewLine]", "Left", ",", 
               RowBox[{
                RowBox[{"prototypes", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"theBody", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     "-", "#"}], "]"}], "]"}], ",", "_bs"}], "]"}], "&"}], 
                   ",", 
                   RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}]}], 
                  "]"}]}], ";"}], ",", "\[IndentingNewLine]", "Right", ",", 
               RowBox[{
                RowBox[{"prototypes", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"theBody", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     "-", "#"}], "]"}], "]"}], ",", "_bs"}], "]"}], "&"}], 
                   ",", 
                   RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}]}], 
                  "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "solveAlways", " ", "obtained", " ", "equations", " ", "for", 
               " ", "each", " ", "of", " ", "symbolic", " ", "coefficient", 
               " ", "separatelly"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"solAns", "=", 
              RowBox[{"singleCoefficientSolve", "/@", 
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", 
                   RowBox[{"prototypes", ",", "baseElemsOfEachCoeff"}], "}"}],
                   "]"}], ")"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "substitute", " ", "answer", " ", "for", " ", "each", " ", "of",
                " ", "symbolic", " ", "coefficient"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"solAns", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"answerWithoutFreeVars", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vars", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"solAns", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "_theCoef", ",", 
                    "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "vars"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_theCoef", "\[RuleDelayed]", "0"}], "}"}]}], ",",
                     "vars"}], "]"}], "/.", 
                    RowBox[{"solAns", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "solAns", "]"}]}], "}"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                
                RowBox[{"(*", " ", 
                 RowBox[{"construct", " ", "final", " ", "answer"}], " ", 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"Switch", "[", 
                 RowBox[{
                 "theDirection", ",", "\[IndentingNewLine]", "Left", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "exprSeparatedByFreeCoeffs"}], ",", 
                    RowBox[{"answerWithoutFreeVars", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "freeVars"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     ",", 
                    RowBox[{"{", "knownfactor", "}"}]}], "}"}], "]"}], "/.", 
                   RowBox[{"tempC", "\[Rule]", "1"}]}], ",", 
                  "\[IndentingNewLine]", "Right", ",", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "knownfactor", "}"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "exprSeparatedByFreeCoeffs"}], ",", 
                    RowBox[{"answerWithoutFreeVars", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "freeVars"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], "]"}], "/.", 
                   RowBox[{"tempC", "\[Rule]", "1"}]}]}], 
                 "\[IndentingNewLine]", "]"}]}], 
               RowBox[{"(*", " ", 
                RowBox[{"end", " ", "swich", " ", "direction"}], " ", "*)"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"{", "}"}]}], "]"}]}], 
            RowBox[{"(*", " ", 
             RowBox[{"end", " ", "solution", " ", "existance"}], " ", "*)"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "_", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[896]:=",ExpressionUUID->"d87499b4-82a3-47f8-84ea-ff8267f5a1f7"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into blades"
}], "Subsection",ExpressionUUID->"da778ee9-3516-4215-a7f0-0dfb8240a529"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help an test functions (gaBladeQ[ ])"
}], "Subsubsection",ExpressionUUID->"20753717-d784-4393-9387-3ea09072cc8e"],

Cell[TextData[{
 "The gaBladeFactor[ ] is Fontijne blade factorization algorithm, which is \
based on projection operator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["q", "i"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["p", "i"], "\[LeftContract]", " ", 
       SuperscriptBox["B", 
        RowBox[{"-", "1"}]]}], ")"}], "B"}]}], TraditionalForm]],
  ExpressionUUID->"fa626386-6c8a-46a7-a44b-d11127473300"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["q", "i"], TraditionalForm]],ExpressionUUID->
  "2c07bed5-37df-4c0d-9eb1-ba8574b71584"],
 " is (if not zero) a factor of B.  This is described in D. Fontijne \
\[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and Join of \
Blades\[CloseCurlyDoubleQuote].  Works only with numerical coefficients."
}], "Text",ExpressionUUID->"1c34fd9c-65d4-4942-ab3b-bae6e6633225"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"makeContractionPairsForVersorBlade", ",", "dat", ",", "pairs"}], 
   "]"}], ";"}], "\n", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"makeContractionPairsForVersorBlade", ",", "Listable"}], 
  "]"}]}], "Input",
 CellLabel->
  "In[897]:=",ExpressionUUID->"d5eeb054-5508-4cfb-adbf-80d3f0b790ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"makeContractionPairsForVersorBlade", "[", 
    RowBox[{"dat", "[", 
     RowBox[{
      RowBox[{"pairs", "[", "sel___", "]"}], ",", 
      RowBox[{"{", "indToList__", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"dat", "[", 
      RowBox[{
       RowBox[{"pairs", "[", 
        RowBox[{"sel", ",", "#"}], "]"}], ",", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"{", "indToList", "}"}], ",", "#"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Subsets", "[", 
     RowBox[{
      RowBox[{"{", "indToList", "}"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeContractionPairsForVersorBlade", "[", 
    RowBox[{"dat", "[", 
     RowBox[{
      RowBox[{"pairs", "[", "sel___", "]"}], ",", 
      RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"dat", "[", 
    RowBox[{
     RowBox[{"pairs", "[", "sel", "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeContractionPairsForVersorBlade", "[", 
    RowBox[{"dat", "[", 
     RowBox[{
      RowBox[{"pairs", "[", "sel___", "]"}], ",", 
      RowBox[{"{", "i_Integer", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"dat", "[", 
    RowBox[{
     RowBox[{"pairs", "[", "sel", "]"}], ",", 
     RowBox[{"{", "i", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[899]:=",ExpressionUUID->"e2139db2-c3f4-43d6-acf4-20a1dfb2af86"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"phaseVersorBlade", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n_Integer", ",", "u_List"}], "}"}], ",", "newpair_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newRange", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{
           RowBox[{"newpair", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"newpair", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", "newpair"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n", "+", 
        RowBox[{"Length", "[", 
         RowBox[{"Complement", "[", 
          RowBox[{"newRange", ",", "u"}], "]"}], "]"}]}], ",", 
       RowBox[{"Union", "[", 
        RowBox[{"u", ",", "newpair"}], "]"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"phaseFactorVersor2Blade", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"a_Integer", ",", "b_Integer"}], "}"}], "}"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Abs", "[", 
     RowBox[{"b", "-", "a"}], "]"}], "-", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"phaseFactorVersor2Blade", "[", "xlists_List", "]"}], ":=", 
    RowBox[{
     RowBox[{"Plus", "@@", 
      RowBox[{"First", "[", 
       RowBox[{"Fold", "[", 
        RowBox[{"phaseVersorBlade", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"{", "}"}]}], "}"}], ",", "xlists"}], "]"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"Length", "[", "xlists", "]"}], ">", "1"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeTermForVersor2Blade", "[", 
    RowBox[{
     RowBox[{"dat", "[", 
      RowBox[{
       RowBox[{"pairs", "[", "]"}], ",", "outerP_List"}], "]"}], ",", 
     "vectors_List", ",", "fun_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"OuterProduct", "@@", 
     RowBox[{"Part", "[", 
      RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeTermForVersor2Blade", "[", 
    RowBox[{
     RowBox[{"dat", "[", 
      RowBox[{
       RowBox[{"pairs", "[", "contr__", "]"}], ",", "outerP_List"}], "]"}], 
     ",", "vectors_List", ",", "fun_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "^", 
      RowBox[{"phaseFactorVersor2Blade", "[", 
       RowBox[{"{", "contr", "}"}], "]"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"Times", "@@", 
      RowBox[{"(", 
       RowBox[{"fun", "[", 
        RowBox[{"InnerProduct", "@@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Part", "[", 
             RowBox[{"vectors", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "contr", "}"}]}], ")"}]}], "]"}], ")"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"Part", "[", 
        RowBox[{"vectors", ",", "outerP"}], "]"}], ",", 
       RowBox[{"{", "}"}], ",", "1", ",", 
       RowBox[{"{", "__", "}"}], ",", 
       RowBox[{"(", 
        RowBox[{"OuterProduct", "@@", 
         RowBox[{"Part", "[", 
          RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], "]"}], 
     ")"}]}]}], ";"}]}], "Input",
 CellLabel->
  "In[902]:=",ExpressionUUID->"7ba2dc29-220a-4248-a842-4497827ba3e5"],

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"phaseFactorBlade2Versor", "[", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"a_Integer", ",", "b_Integer"}], "}"}], "}"}], "]"}], ":=", 
     RowBox[{"Abs", "[", 
      RowBox[{"b", "-", "a"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"phaseFactorBlade2Versor", "[", "xlists_List", "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"First", "[", 
          RowBox[{"Fold", "[", 
           RowBox[{"phaseVersorBlade", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"{", "}"}]}], "}"}], ",", "xlists"}], "]"}], "]"}]}], 
        ")"}], "+", 
       RowBox[{"Length", "[", "xlists", "]"}]}], "/;", 
      RowBox[{
       RowBox[{"Length", "[", "xlists", "]"}], ">", "1"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"makeTermForBlade2Versor", "[", 
      RowBox[{
       RowBox[{"dat", "[", 
        RowBox[{
         RowBox[{"pairs", "[", "]"}], ",", "outerP_List"}], "]"}], ",", 
       "vectors_List", ",", "fun_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"Part", "[", 
        RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"makeTermForBlade2Versor", "[", 
      RowBox[{
       RowBox[{"dat", "[", 
        RowBox[{
         RowBox[{"pairs", "[", "contr__", "]"}], ",", "outerP_List"}], "]"}], 
       ",", "vectors_List", ",", "fun_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"phaseFactorBlade2Versor", "[", 
         RowBox[{"{", "contr", "}"}], "]"}]}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{"Times", "@@", 
        RowBox[{"(", 
         RowBox[{"fun", "[", 
          RowBox[{"InnerProduct", "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Part", "[", 
               RowBox[{"vectors", ",", "#"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "contr", "}"}]}], ")"}]}], "]"}], ")"}]}], ")"}], 
      "*", 
      RowBox[{"(", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"vectors", ",", "outerP"}], "]"}], ",", 
         RowBox[{"{", "}"}], ",", "1", ",", 
         RowBox[{"{", "__", "}"}], ",", 
         RowBox[{"(", 
          RowBox[{"GeometricProduct", "@@", 
           RowBox[{"Part", "[", 
            RowBox[{"vectors", ",", "outerP"}], "]"}]}], ")"}]}], "]"}], 
       ")"}]}]}], ";"}]}]}]], "Input",
 CellLabel->
  "In[907]:=",ExpressionUUID->"1a1b5c9d-fc59-4813-af59-18a40f0cbbb1"],

Cell[TextData[{
 "The gaBladeQ[ ]  uses test ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"Jayme", " ", "Vaz"}], ",", 
   RowBox[{"jr", " ", "Roldao", " ", "da", " ", "Rocha"}], ",", " ", 
   RowBox[{
    RowBox[{"jr", ".", " ", "Clifford"}], " ", "algebras", " ", "and", " ", 
    "spinors"}], ",", "2016", ",", " ", 
   RowBox[{"page", " ", "26"}]}]], "Input",
  CellChangeTimes->{{3.784436718154747*^9, 3.784436720658662*^9}, {
    3.784444268582802*^9, 3.7844445043194857`*^9}, {3.784444550384075*^9, 
    3.784444584588913*^9}, {3.784444965959812*^9, 3.784444992410701*^9}, {
    3.7844450426457043`*^9, 3.784445047804226*^9}, {3.784445092742909*^9, 
    3.7844452261652117`*^9}, {3.784445408807775*^9, 3.784445436329281*^9}, {
    3.784445466372163*^9, 3.784445594073523*^9}, {3.784445657840872*^9, 
    3.7844456619659023`*^9}, {3.7844457050364847`*^9, 3.784445824345138*^9}, {
    3.784445894245768*^9, 3.784445941954825*^9}, {3.78444618154585*^9, 
    3.784446343655994*^9}, 3.784446382973947*^9, {3.784446434896864*^9, 
    3.784446465317155*^9}, {3.784446773491581*^9, 3.784446776877256*^9}, {
    3.784451386369042*^9, 3.784451398692127*^9}},ExpressionUUID->
  "141a8a78-0fa0-4c5c-bd93-b11ee0ba0176"],
 " for bivectors and for general Blade criteria the article ",
 Cell[BoxData[
  RowBox[{"[", "Bouma2001a", "]"}]], "Input",
  CellChangeTimes->{{3.784436718154747*^9, 3.784436720658662*^9}, {
    3.784444268582802*^9, 3.7844445043194857`*^9}, {3.784444550384075*^9, 
    3.784444584588913*^9}, {3.784444965959812*^9, 3.784444992410701*^9}, {
    3.7844450426457043`*^9, 3.784445047804226*^9}, {3.784445092742909*^9, 
    3.7844452261652117`*^9}, {3.784445408807775*^9, 3.784445436329281*^9}, {
    3.784445466372163*^9, 3.784445594073523*^9}, {3.784445657840872*^9, 
    3.7844456619659023`*^9}, {3.7844457050364847`*^9, 3.784445824345138*^9}, {
    3.784445894245768*^9, 3.784445941954825*^9}, {3.78444618154585*^9, 
    3.784446343655994*^9}, 3.784446382973947*^9, {3.784446434896864*^9, 
    3.784446465317155*^9}, {3.784446773491581*^9, 3.784446776877256*^9}, {
    3.784451386369042*^9, 3.784451398692127*^9}},ExpressionUUID->
  "332db0f5-bc5d-483f-bfab-688a25f1c1b8"],
 "."
}], "Text",ExpressionUUID->"a73f2d00-6670-4285-876e-9627039d1d23"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBladeQ", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Method", "\[Rule]", "\"\<Automatic\>\""}], "}"}]}], ";"}], " ", 
  
  RowBox[{"(*", " ", 
   RowBox[{
   "the", " ", "other", " ", "possible", " ", "value", " ", "is", " ", 
    "\"\<Universal\>\""}], " ", "*)"}]}]], "Input",
 CellLabel->
  "In[911]:=",ExpressionUUID->"8ce9d379-0662-44cf-b4e9-87ab921b03ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeQ", "[", 
    RowBox[{"generalMV_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"theMethod", "=", 
         RowBox[{"ToString", "[", 
          RowBox[{"OptionValue", "[", "Method", "]"}], "]"}]}], ",", 
        RowBox[{"theAlgebra", "=", 
         RowBox[{"gaGetAlgebra", "[", "generalMV", "]"}]}], ",", 
        RowBox[{"generalMVexpanded", "=", 
         RowBox[{"gaPE", "[", "generalMV", "]"}]}], ",", "theGrade"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Catch", "[", 
       RowBox[{"(*", " ", 
        RowBox[{"Homogenenity", " ", "check"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"theGrade", "=", 
             RowBox[{"gaGetGrade", "[", "generalMVexpanded", "]"}]}], "]"}], "=!=",
            "1"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"determine", " ", "trivial", " ", "cases"}], "   ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", 
              RowBox[{
               RowBox[{"gaVectorSpaceDimension", "[", "testAlgebra", "]"}], 
               "-", "1"}], ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "testAlgebra", "]"}]}], 
             "}"}], ",", 
            RowBox[{"theGrade", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"special", " ", "criterium", " ", "for", " ", "bivectors"}],
           ",", " ", 
          RowBox[{"see", " ", "Jayme", " ", "Vaz"}], ",", 
          RowBox[{"jr", " ", "Roldao", " ", "da", " ", "Rocha"}], ",", " ", 
          RowBox[{
           RowBox[{"jr", ".", " ", "Clifford"}], " ", "algebras", " ", "and", 
           " ", "spinors"}], ",", "2016", ",", " ", 
          RowBox[{"page", " ", "26"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"theGrade", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "===", "2"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"theMethod", "===", "\"\<Automatic\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"PossibleZeroQ", "[", 
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", 
                 RowBox[{"OuterProduct", "[", 
                  RowBox[{"generalMVexpanded", ",", "generalMVexpanded"}], 
                  "]"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"Throw", "[", "True", "]"}], ",", 
              RowBox[{"Throw", "[", "False", "]"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "general", " ", "check", " ", 
          RowBox[{"using", " ", "[", "Bouma2001a", "]"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"check", " ", 
          RowBox[{"gaVersorQ", "[", "]"}], " ", "includes", " ", "also", " ", 
          "test", " ", "of", " ", "invertibility"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"gaVersorQ", "[", "generalMVexpanded", "]"}], ",", 
          RowBox[{"Throw", "[", "True", "]"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"gaVariables", "[", 
      RowBox[{"gaPE", "[", "generalMV", "]"}], "]"}], "===", 
     RowBox[{"{", "}"}]}]}]}], ";"}]], "Input",
 CellLabel->
  "In[912]:=",ExpressionUUID->"c27640a3-0488-41d7-8159-f6fd1dc3c8f6"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Fontinje blade factorisation (unfinished, untested)"
}], "Subsubsection",ExpressionUUID->"ee7ba460-0963-42d8-b7a6-ebe38c6eab0e"],

Cell[TextData[{
 "The gaBladeFactor[ ] is Fontijne blade factorization algorithm, which is \
based on projection operator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["q", "i"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["p", "i"], "\[LeftContract]", " ", 
       SuperscriptBox["B", 
        RowBox[{"-", "1"}]]}], ")"}], "B"}]}], TraditionalForm]],
  ExpressionUUID->"cdc65c35-4f96-4f77-8497-87362db41f3e"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["q", "i"], TraditionalForm]],ExpressionUUID->
  "9b91ee07-82be-48c6-8e85-6b7fd34d8b18"],
 " is (if not zero) a factor of B.  This is described in D. Fontijne \
\[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and Join of \
Blades\[CloseCurlyDoubleQuote].  Works only with numerical coefficients."
}], "Text",ExpressionUUID->"3d8a73fa-b39d-45e8-b7d8-36193ae27a2a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaBladeFactor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<Fontijne\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBladeFactor", "::", "unknownMethod"}], "=", 
    "\"\<Specified method Method->`1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBasisSymbolName", "]"}]}], ",", 
     RowBox[{"wrap", "=", "wrapHead"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaBladeFactor", "[", 
     RowBox[{"blade_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"method", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Method", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaBladeFactor", ",", "Method"}], "]"}]}], ")"}]}], ",", 
        RowBox[{"expandedBlade", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", "blade", "]"}], "]"}]}], ",", "allBlades", ",",
         "largestAbsCoef", ",", "maxCoef", ",", "normalizedBlade", ",", 
        "theBlade", ",", "inversedTheBlade", ",", "bladeVectors"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"method", ",", "\"\<Fontijne\>\"", ",", 
        RowBox[{
         RowBox[{"allBlades", "=", 
          RowBox[{"List", "@@@", 
           RowBox[{"List", "@@", 
            RowBox[{"(", 
             RowBox[{"Collect", "[", 
              RowBox[{"expandedBlade", ",", "_bs", ",", "wrapHead"}], "]"}], 
             ")"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"largestAbsCoef", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"allBlades", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_bs", "\[Rule]", "1"}], ",", 
              RowBox[{"wrapHead", "\[Rule]", "Abs"}]}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"maxCoef", ",", "theBlade"}], "}"}], "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"Extract", "[", 
              RowBox[{"allBlades", ",", 
               RowBox[{"Position", "[", 
                RowBox[{"allBlades", ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", "largestAbsCoef", "]"}], ",", 
                    "_"}], "}"}], "|", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", 
                    RowBox[{"-", "largestAbsCoef"}], "]"}], ",", "_"}], 
                   "}"}]}]}], "]"}]}], "]"}], "]"}], "/.", 
            RowBox[{"wrapHead", "\[Rule]", "Identity"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"normalizedBlade", "=", 
          RowBox[{"Collect", "[", 
           RowBox[{
            RowBox[{"expandedBlade", "/", "maxCoef"}], ",", "_bs"}], "]"}]}], 
         ";", 
         RowBox[{"inversedTheBlade", "=", 
          RowBox[{"gaInverse", "[", "theBlade", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bladeVectors", "=", 
          RowBox[{"theBlade", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"ind_List", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "alg_", ",", "any___"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "alg", ",", "any"}], 
                 "]"}], "&"}], "/@", "ind"}], ")"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Prepend", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"LeftContract", "[", 
               RowBox[{
                RowBox[{"LeftContract", "[", 
                 RowBox[{"#", ",", "inversedTheBlade"}], "]"}], ",", 
                "normalizedBlade"}], "]"}], "]"}], "&"}], "/@", 
            "bladeVectors"}], ",", "maxCoef"}], "]"}]}], 
        "\[IndentingNewLine]", ",", "_", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaBladeFactor", "::", "unknownMethod"}], ",", "method"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[913]:=",ExpressionUUID->"cf74ba3a-4062-48e6-bd0d-877ce7e5e5de"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Versor decomposition into sum of blades"
}], "Subsubsection",ExpressionUUID->"d17ecdfd-8880-484e-845d-2aa96e0c11fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaVersorToSumOfBlades", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientFunction", "\[Rule]", "gaPE"}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<None\>\""}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorToSumOfBlades", "::", "argument"}], "=", 
   "\"\<The argument `1` is not recognised as an geometric product of grade 1 \
elements (versor).\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[916]:=",ExpressionUUID->"5bc7d203-d8aa-4a4b-acad-cd5c832c085d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"gaVersorToSumOfBlades", "[", 
       RowBox[{
        RowBox[{"c_.", "*", "expr_GeometricProduct"}], ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"cf", "=", 
            RowBox[{"OptionValue", "[", "CoefficientFunction", "]"}]}], ",", 
           RowBox[{"sortOP", "=", 
            RowBox[{
            "OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], ",", 
           RowBox[{"vectors", "=", 
            RowBox[{"List", "@@", "expr"}]}], ",", "resul", ",", 
           "allNonTrivialPairs"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"allNonTrivialPairs", "=", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"NestList", "[", 
               RowBox[{"makeContractionPairsForVersorBlade", ",", 
                RowBox[{"{", 
                 RowBox[{"dat", "[", 
                  RowBox[{
                   RowBox[{"pairs", "[", "]"}], ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "expr", "]"}], "]"}]}], "]"}], 
                 "}"}], ",", 
                RowBox[{"Floor", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", "expr", "]"}], "/", "2"}], "]"}]}], 
               "]"}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"pairs", "[", "x__", "]"}], "\[RuleDelayed]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"pairs", "@@", 
                  RowBox[{"Sort", "[", 
                   RowBox[{"{", "x", "}"}], "]"}]}], ")"}], "/;", 
                RowBox[{"!", 
                 RowBox[{"OrderedQ", "[", 
                  RowBox[{"{", "x", "}"}], "]"}]}]}]}], "}"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"resul", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"makeTermForVersor2Blade", "[", 
              RowBox[{"#", ",", "vectors", ",", "cf"}], "]"}], "&"}], "/@", 
            "allNonTrivialPairs"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "by", " ", "default", " ", "vectors", " ", "in", " ", "the", " ", 
            "blades", " ", "are", " ", "not", " ", "ordered"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "sortOP", ",", "\"\<None\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{"Plus", "@@", 
             RowBox[{"(", "resul", ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "we", " ", "can", " ", "them", " ", "put", " ", "into", " ", 
              "some", " ", "order", " ", "if", " ", "we", " ", 
              RowBox[{"want", ".", " ", "This"}], " ", "can", " ", "simplify",
               " ", "finall", " ", "expression"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
             "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", 
              "|", "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
              "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
              "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
              "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
              "\"\<InvDeg[InvRevLex]\>\""}], ")"}], ",", 
            RowBox[{"Plus", "@@", 
             RowBox[{"(", 
              RowBox[{"resul", "/.", 
               RowBox[{"{", 
                RowBox[{"argggs_OuterProduct", "\[RuleDelayed]", 
                 RowBox[{
                  RowBox[{"Signature", "[", 
                   RowBox[{"gaOrdering", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "argggs"}], ",", "sortOP"}], "]"}], 
                   "]"}], "*", 
                  RowBox[{"OuterProduct", "@@", 
                   RowBox[{"(", 
                    RowBox[{"gaSort", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "argggs"}], ",", "sortOP"}], "]"}], 
                    ")"}]}]}]}], "}"}]}], ")"}]}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "basisSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
        RowBox[{
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"gaGetGrade", "/@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "expr"}], ")"}]}], "]"}], "]"}], "===", 
         RowBox[{"{", "1", "}"}]}]}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaVersorToSumOfBlades", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaVersorToSumOfBlades", "::", "argument"}], ",", "expr"}], 
         "]"}], ";", "expr"}], ")"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
   ";"}]], "Input",
 CellLabel->
  "In[918]:=",ExpressionUUID->"735ee708-19bb-48d2-97d2-3768b197d6b4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaBladeToSumOfVersors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"CoefficientFunction", "\[Rule]", "gaPE"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeToSumOfVersors", "::", "argument"}], "=", 
   "\"\<The argument `1` is not recognised as a outer product of grade 1 \
elements (blade).\>\""}], ";"}]}], "Input",
 CellLabel->
  "In[919]:=",ExpressionUUID->"2c3d5b66-90f2-46fe-adc5-e41bc63f311a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"basisSymbol", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBladeToSumOfVersors", "[", 
       RowBox[{
        RowBox[{"c_.", "*", "expr_OuterProduct"}], ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"cf", "=", 
            RowBox[{"OptionValue", "[", "CoefficientFunction", "]"}]}], ",", 
           RowBox[{"vectors", "=", 
            RowBox[{"List", "@@", "expr"}]}], ",", "allNonTrivialPairs"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"allNonTrivialPairs", "=", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"NestList", "[", 
               RowBox[{"makeContractionPairsForVersorBlade", ",", 
                RowBox[{"{", 
                 RowBox[{"dat", "[", 
                  RowBox[{
                   RowBox[{"pairs", "[", "]"}], ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "expr", "]"}], "]"}]}], "]"}], 
                 "}"}], ",", 
                RowBox[{"Floor", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", "expr", "]"}], "/", "2"}], "]"}]}], 
               "]"}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"pairs", "[", "x__", "]"}], "\[RuleDelayed]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"pairs", "@@", 
                  RowBox[{"Sort", "[", 
                   RowBox[{"{", "x", "}"}], "]"}]}], ")"}], "/;", 
                RowBox[{"!", 
                 RowBox[{"OrderedQ", "[", 
                  RowBox[{"{", "x", "}"}], "]"}]}]}]}], "}"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"Plus", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"makeTermForBlade2Versor", "[", 
               RowBox[{"#", ",", "vectors", ",", "cf"}], "]"}], "&"}], "/@", 
             "allNonTrivialPairs"}], ")"}]}]}]}], "\[IndentingNewLine]", 
        "]"}], "/;", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "basisSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
        RowBox[{
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"gaGetGrade", "/@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "expr"}], ")"}]}], "]"}], "]"}], "===", 
         RowBox[{"{", "1", "}"}]}]}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaBladeToSumOfVersors", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaBladeToSumOfVersors", "::", "argument"}], ",", "expr"}], 
         "]"}], ";", "expr"}], ")"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
   ";"}]], "Input",
 CellLabel->
  "In[921]:=",ExpressionUUID->"18bd291e-6378-49a5-853a-ecd758f95173"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linear equation solving "
}], "Subsection",ExpressionUUID->"f9892ec5-e908-4215-a4cf-0a7f89fa3b11"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Sylvester equation solvers "
}], "Subsubsection",ExpressionUUID->"261a7080-1915-4a2e-9da0-5a68060c863f"],

Cell["\<\
The general dimension solver is implemented by forward nesting. In the \
article [Shirokov2020]  it was given by recursive algorithm.  Explicit \
formulas can be used for N\[LessEqual]5. \
\>", "Text",ExpressionUUID->"9a565e42-1531-417c-a796-88935052ed37"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "::", "zero"}], "=", 
   "\"\<The value of helpD MV `1` is zero. Try the alternative (other side \
multiplication) formula (to do yet).\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.801198558147855*^9, 3.801198652282577*^9}, {
   3.8011998785219097`*^9, 3.801199891320641*^9}, 
   3.801201446523411*^9},ExpressionUUID->"0909644d-152d-426a-94af-\
e734fd27572e"],

Cell["\<\
General dimension case, when taking scalar part is realized with gaGetMV[ \
,{0}]. This is preferable with numeric inputs.\
\>", "Text",ExpressionUUID->"7d137e0b-63b1-46e2-9911-fe5111ff955d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"solSylvesterDetFromRight", "[", 
   RowBox[{
   "mvA_", ",", "mvB_", ",", "mvC_", ",", "theAlgebra_Cl", ",", 
    "\"\<gaGetMV\>\""}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theNumberOfNestLevels", "=", 
       RowBox[{"(", 
        RowBox[{"2", "^", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
           "2"}], "]"}]}], ")"}]}], ",", "dataForDandF", ",", "coefB", ",", 
      "helpB", ",", "mvD", ",", "mvF", ",", "dataForhelpD", ",", "answer"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dataForDandF", "=", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"k", "="}], "*)"}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"b_k", "="}], "*)"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", 
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], 
                  ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"mvB", ",", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}]}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"B_k", "="}], "*)"}], 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"mvB", ",", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"theNumberOfNestLevels", "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"mvB", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}]}], ",", "mvB"}], "}"}], ",", 
          "theNumberOfNestLevels"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mvD", "=", 
      RowBox[{"-", 
       RowBox[{"Expand", "[", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"gaPE", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "*", 
               RowBox[{"GeometricProduct", "@@", 
                RowBox[{"Table", "[", 
                 RowBox[{"mvA", ",", 
                  RowBox[{"{", 
                   RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
              ")"}], "]"}], "&"}], "/@", "dataForDandF"}], ")"}]}], "]"}]}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"mvF", "=", 
      RowBox[{"Plus", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"GeometricProduct", "@@", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"GeometricProduct", "@@", 
                RowBox[{"Table", "[", 
                 RowBox[{"mvA", ",", 
                  RowBox[{"{", 
                   RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}]}], 
                   "}"}]}], "]"}]}], ")"}], ",", "mvC", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}]}], ")"}], 
          "&"}], "/@", 
         RowBox[{"Most", "[", 
          RowBox[{"Most", "[", "dataForDandF", "]"}], "]"}]}], ")"}]}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"dataForhelpD", "=", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"k", "="}], "*)"}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"d_k", "="}], "*)"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", 
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], 
                  ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"mvD", ",", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}]}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"D_k", "="}], "*)"}], 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"mvD", ",", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], "-", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"theNumberOfNestLevels", "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"mvD", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}]}], ",", "mvD"}], "}"}], ",", 
          RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], ",", 
        RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"answer", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"dataForhelpD", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ")"}], "*", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"dataForhelpD", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "3"}], "]"}], "]"}], "-", 
          RowBox[{"dataForhelpD", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ",", "mvF"}], 
        "]"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",ExpressionUUID\
->"807d5ecd-b32c-4819-91ed-b8b099ea6cf5"],

Cell["\<\
General dimension case, when taking scalar part is realized with \
gaNonScalarGradeInverse[ ]. This is preferable with symbolic inputs since the \
answer will not contain grade projectors.\
\>", "Text",ExpressionUUID->"aec00b51-cb0e-4f37-aeb9-cb3e23f571d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{
    "mvA_", ",", "mvB_", ",", "mvC_", ",", "theAlgebra_Cl", ",", 
     "\"\<gaNonScalarGradeInverse\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theNumberOfNestLevels", "=", 
        RowBox[{"(", 
         RowBox[{"2", "^", 
          RowBox[{"Ceiling", "[", 
           RowBox[{
            RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "/", 
            "2"}], "]"}]}], ")"}]}], ",", "dataForDandF", ",", "coefB", ",", 
       "helpB", ",", "mvD", ",", "mvF", ",", "dataForhelpD", ",", "answer"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dataForDandF", "=", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"k", "="}], "*)"}], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"b_k", "="}], "*)"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}]}], 
                   ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"mvB", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "+", 
                  RowBox[{"gaNonZeroGradeInverse", "[", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"mvB", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "]"}]}], 
                 ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"B_k", "="}], "*)"}], 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"mvB", ",", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "-", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"theNumberOfNestLevels", "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"mvB", "+", 
                 RowBox[{"gaNonZeroGradeInverse", "[", "mvB", "]"}]}], ")"}], 
               "/", "2"}]}], ",", "mvB"}], "}"}], ",", 
           "theNumberOfNestLevels"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mvD", "=", 
       RowBox[{"-", 
        RowBox[{"Expand", "[", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "*", 
                RowBox[{"GeometricProduct", "@@", 
                 RowBox[{"Table", "[", 
                  RowBox[{"mvA", ",", 
                   RowBox[{"{", 
                    RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
               ")"}], "]"}], "&"}], "/@", "dataForDandF"}], ")"}]}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mvF", "=", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"GeometricProduct", "@@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"GeometricProduct", "@@", 
                 RowBox[{"Table", "[", 
                  RowBox[{"mvA", ",", 
                   RowBox[{"{", 
                    RowBox[{"theNumberOfNestLevels", "-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}]}], 
                    "}"}]}], "]"}]}], ")"}], ",", "mvC", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "-", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "}"}]}], ")"}], 
           "&"}], "/@", 
          RowBox[{"Most", "[", 
           RowBox[{"Most", "[", "dataForDandF", "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"dataForhelpD", "=", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"k", "="}], "*)"}], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"d_k", "="}], "*)"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "/", 
                  RowBox[{"(", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ")"}], 
                   ")"}]}], ")"}], "*", "theNumberOfNestLevels", "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"mvD", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "+", 
                  RowBox[{"gaNonZeroGradeInverse", "[", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"mvD", ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "]"}]}], 
                 ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"D_k", "="}], "*)"}], 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"mvD", ",", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "-", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"theNumberOfNestLevels", "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"mvB", "+", 
                 RowBox[{"gaNonZeroGradeInverse", "[", "mvB", "]"}]}], ")"}], 
               "/", "2"}]}], ",", "mvD"}], "}"}], ",", 
           RowBox[{"theNumberOfNestLevels", "-", "1"}]}], "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{"dataForhelpD", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "2"}], "]"}], "]"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", " ", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", 
           RowBox[{"dataForhelpD", "[", 
            RowBox[{"[", 
             RowBox[{"2", ",", "2"}], "]"}], "]"}]}], "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"dataForhelpD", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"dataForhelpD", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "3"}], "]"}], "]"}], "-", 
             RowBox[{"dataForhelpD", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ",", "mvF"}], 
           "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.800934853460228*^9, 3.800934993785631*^9}, {
   3.800935071217236*^9, 3.800935140387992*^9}, {3.8009351849141207`*^9, 
   3.8009352448186083`*^9}, {3.8009353011693897`*^9, 3.800935384906329*^9}, {
   3.800935615837181*^9, 3.800935702801791*^9}, {3.800935934279648*^9, 
   3.800935964592354*^9}, {3.8009360334835176`*^9, 3.800936056237419*^9}, 
   3.800936399790627*^9, {3.800936437976371*^9, 3.800936462601116*^9}, {
   3.800936498223633*^9, 3.800936530438993*^9}, {3.8009366171617317`*^9, 
   3.800936620342105*^9}, {3.800936736126872*^9, 3.800936736487172*^9}, {
   3.80093689576989*^9, 3.800936924028458*^9}, {3.8009370601647863`*^9, 
   3.800937156735827*^9}, {3.800937295566339*^9, 3.8009373626140127`*^9}, {
   3.8009374793113937`*^9, 3.800937612041267*^9}, {3.8009379929258747`*^9, 
   3.8009380001429873`*^9}, {3.800938034902688*^9, 3.800938377264*^9}, {
   3.800938450121928*^9, 3.800938556377162*^9}, {3.8009442370917873`*^9, 
   3.800944238983576*^9}, {3.800944606960081*^9, 3.800944608891156*^9}, 
   3.800944741802373*^9, {3.8009448403664207`*^9, 3.800944883563634*^9}, {
   3.8009458804146852`*^9, 3.800945880463229*^9}, {3.8009460103781424`*^9, 
   3.8009460125264683`*^9}, {3.8009463049776907`*^9, 3.800946313443428*^9}, {
   3.800946465215681*^9, 3.800946466802032*^9}, {3.800946511445322*^9, 
   3.800946515025982*^9}, {3.8009469893042603`*^9, 3.8009470226029387`*^9}, {
   3.800947183417922*^9, 3.800947198212833*^9}, {3.800947423646966*^9, 
   3.80094744516416*^9}, {3.800947511024578*^9, 3.8009475374374523`*^9}, {
   3.800947651360443*^9, 3.800947658672372*^9}, 3.8009477793603373`*^9, 
   3.800947865883099*^9, {3.800948405805718*^9, 3.8009484122144957`*^9}, 
   3.800948458886161*^9, {3.800948769128243*^9, 3.800948771958359*^9}, {
   3.800948909264576*^9, 3.800948915024329*^9}, {3.80094905327491*^9, 
   3.800949070599821*^9}, 3.800949111772194*^9, {3.800949242252138*^9, 
   3.80094925288885*^9}, 3.8009493155352182`*^9, {3.800953611373898*^9, 
   3.8009536145247593`*^9}, 3.800954014114121*^9, {3.800954182445016*^9, 
   3.8009542583747063`*^9}, {3.8009542957779207`*^9, 3.800954296556006*^9}, {
   3.800954452047769*^9, 3.800954645900167*^9}, {3.800954676446073*^9, 
   3.800954684437254*^9}, {3.800954816414302*^9, 3.800954829554501*^9}, {
   3.800954988665091*^9, 3.800954989586328*^9}, {3.800955087457059*^9, 
   3.800955097131518*^9}, 3.8009555398638563`*^9, {3.800955593466509*^9, 
   3.800955598685356*^9}, {3.800955671567823*^9, 3.800955673468865*^9}, {
   3.800955736119288*^9, 3.800955736553581*^9}, {3.8009557803727217`*^9, 
   3.800955801270485*^9}, {3.800955942796364*^9, 3.800955968865185*^9}, {
   3.800956061858157*^9, 3.800956088404814*^9}, {3.80095612389699*^9, 
   3.800956178095619*^9}, {3.800956219566422*^9, 3.8009563212787533`*^9}, {
   3.800956428110709*^9, 3.800956430725371*^9}, {3.800956480963517*^9, 
   3.8009564979876957`*^9}, {3.800956563273809*^9, 3.80095671440294*^9}, {
   3.800956779539364*^9, 3.800956823641802*^9}, 3.800956900198141*^9, 
   3.800965786908186*^9, {3.8009658347373533`*^9, 3.80096595094556*^9}, {
   3.8009660103157797`*^9, 3.800966012117663*^9}, {3.8009660449352417`*^9, 
   3.800966076742591*^9}, 3.8009661460405083`*^9, {3.800966196030283*^9, 
   3.8009663296059*^9}, {3.801198309651307*^9, 3.801198342046172*^9}, {
   3.801198373009448*^9, 3.801198432465434*^9}, {3.801198484455851*^9, 
   3.8011985019708853`*^9}, {3.801199908898671*^9, 3.801199944224444*^9}, 
   3.801201439804043*^9},ExpressionUUID->"44ffa5f5-4460-4526-bfd7-\
1285b4b5e654"],

Cell["Explicit optimized formulas for dimensions n<=5.", "Text",ExpressionUUID->"c2c48508-6709-4e7f-9ce2-0bc739ee5b22"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{"mvA_", ",", "mvB_", ",", "mvC_", ",", "5"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftMV", "=", "mvA"}], ",", 
       RowBox[{"rightMV", "=", "mvB"}], ",", 
       RowBox[{"freeMV", "=", "mvC"}], ",", "coeffDfor5", ",", "coeffFfor5", 
       ",", "detD"}], "}"}], ",", 
     RowBox[{
      RowBox[{"coeffDfor5", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "leftMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"rightMV", "+", 
             RowBox[{"gaReverse", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
               "3"}], "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
               "3"}], "]"}]}], ")"}]}], "-", 
          RowBox[{"leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
                "3"}], "]"}]}]}], ")"}]}], "+", 
          RowBox[{"rightMV", "\[GeometricProduct]", 
           RowBox[{"gaReverse", "[", "rightMV", "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
             "3"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"coeffFfor5", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "freeMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaReverse", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
               "3"}], "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaReverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], ",", 
                "3"}], "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
               "3"}], "]"}]}], ")"}]}], "-", 
          RowBox[{"freeMV", "\[GeometricProduct]", 
           RowBox[{"gaReverse", "[", "rightMV", "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], ",", 
             "3"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"detD", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"coeffDfor5", "\[GeometricProduct]", 
          RowBox[{"gaReverse", "[", "coeffDfor5", "]"}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], ",", 
            "3"}], "]"}], "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{"coeffDfor5", "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], 
               ",", "3"}], "]"}]}], ",", "3"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "detD", "]"}], "]"}], "]"}], "]"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", "detD"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", "\"\<Wrong answer, the formula contains error\>\"", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "detD"}], ")"}], "*", 
           RowBox[{"gaReverse", "[", "coeffDfor5", "]"}]}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], ",", 
            "3"}], "]"}], "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{"coeffDfor5", "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor5", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "coeffDfor5", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaCliffordConjugate", "[", "coeffDfor5", "]"}]}], 
               ",", "3"}], "]"}]}], ",", "3"}], "]"}], "\[GeometricProduct]", 
          "coeffFfor5"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",ExpressionUUID->"156b6d13-\
ae86-4a24-9acd-0258ce2011de"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{"mvA_", ",", "mvB_", ",", "mvC_", ",", "4"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftMV", "=", "mvA"}], ",", 
       RowBox[{"rightMV", "=", "mvB"}], ",", 
       RowBox[{"freeMV", "=", "mvC"}], ",", "coeffDfor4", ",", "coeffFfor4", 
       ",", "detD"}], "}"}], ",", 
     RowBox[{
      RowBox[{"coeffDfor4", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "leftMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"rightMV", "+", 
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
              "]"}]}], ")"}]}], "-", 
          RowBox[{"leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"rightMV", "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                 "\[GeometricProduct]", 
                 RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
               "]"}]}]}], ")"}]}], "+", 
          RowBox[{"rightMV", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
           "\[GeometricProduct]", 
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"coeffFfor4", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "leftMV", "\[GeometricProduct]", "freeMV"}], "-", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "leftMV", "\[GeometricProduct]", 
           "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
              "]"}]}], ")"}]}], "+", 
          RowBox[{
          "leftMV", "\[GeometricProduct]", "freeMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{
              RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaBinomialConjugate", "[", 
               RowBox[{
                RowBox[{"gaReverse", "[", "rightMV", "]"}], ",", "3"}], 
               "]"}]}], "+", 
             RowBox[{"gaBinomialConjugate", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
              "]"}]}], ")"}]}], "-", 
          RowBox[{"freeMV", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}], 
           "\[GeometricProduct]", 
           RowBox[{"gaBinomialConjugate", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "rightMV", "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaReverse", "[", "rightMV", "]"}]}], ",", "3"}], 
            "]"}]}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"detD", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"coeffDfor4", "\[GeometricProduct]", 
          RowBox[{"gaCliffordConjugate", "[", "coeffDfor4", "]"}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor4", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor4", "]"}]}], ",", "3"}], 
           "]"}]}], "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "detD", "]"}], "]"}], "]"}], "]"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", "detD"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", "\"\<Wrong answer, the formula contains error\>\"", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", "detD"}], ")"}], "*", 
           RowBox[{"gaCliffordConjugate", "[", "coeffDfor4", "]"}]}], 
          "\[GeometricProduct]", 
          RowBox[{"gaBinomialConjugate", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaGradeInverse", "[", "coeffDfor4", "]"}], 
             "\[GeometricProduct]", 
             RowBox[{"gaReverse", "[", "coeffDfor4", "]"}]}], ",", "3"}], 
           "]"}], "\[GeometricProduct]", "coeffFfor4"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"5675d625-6002-4f65-881d-041d21bfb4aa"],

Cell["\<\
Note, that explicit formulas for n=1,2,3 is for equation AX+XB==C,  whereas \
for n=4,5 is for AX-XB==C (the signs!), therefore rightMV=-mvB in order to \
match general call from gaLinearSolve\
\>", "Text",ExpressionUUID->"80f63ccf-7158-487d-9d88-3c6ae67b51bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solSylvesterDetFromRight", "[", 
    RowBox[{"mvA_", ",", "mvB_", ",", "mvC_", ",", 
     RowBox[{"3", "|", "2", "|", "1"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftMV", "=", "mvA"}], ",", 
       RowBox[{"rightMV", "=", 
        RowBox[{"-", "mvB"}]}], ",", 
       RowBox[{"freeMV", "=", "mvC"}], ",", "helpD", ",", "detD", ",", 
       "helpDInverse"}], "}"}], ",", 
     RowBox[{
      RowBox[{"helpD", "=", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{
          RowBox[{"leftMV", "\[GeometricProduct]", "leftMV"}], "+", 
          RowBox[{"rightMV", "\[GeometricProduct]", 
           RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], "+", 
          RowBox[{"leftMV", "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"rightMV", "+", 
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}], 
            ")"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"detD", "=", 
       RowBox[{"gaPlainRepresentation", "[", 
        RowBox[{"gaAssociationTogether", "[", 
         RowBox[{"Expand", "[", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaDeterminantOfMV", "[", "helpD", "]"}], "]"}], "]"}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", "detD", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"solSylvesterDetFromRight", "::", "zero"}], ",", "detD"}], 
          "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"helpDInverse", "=", 
          RowBox[{"gaInverse", "[", "helpD", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", "answer", " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"helpDInverse", "\[GeometricProduct]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"leftMV", "\[GeometricProduct]", "freeMV"}], "+", 
            RowBox[{"freeMV", "\[GeometricProduct]", 
             RowBox[{"gaCliffordConjugate", "[", "rightMV", "]"}]}]}], 
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\n", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"e134cd94-e06e-474c-8530-47f73a8a8d71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". All linear equation solvers are wrapped by single command gaLinearSolve[ ]"
}], "Subsubsection",ExpressionUUID->"e0588dfe-52f4-4fd0-b517-25b6647b3a29"],

Cell["\<\
At the moment only Sylvester equation (written in explicit form as \
AX+XB+C==0) can be solved by general method described by D. Shirokov \
\[OpenCurlyDoubleQuote]On basis-free solution to Sylvester equation in \
geometric algebra\[CloseCurlyDoubleQuote] (in print ).\
\>", "Text",ExpressionUUID->"a64dd85f-d558-49ac-adf5-122755a29978"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "::", "Type"}], "=", 
   "\"\<The equation `1` was not recognized as Sylvester equation AX-XB+C==0. \
gaLinearSolve at the moment can solve only this type of equation written in \
the above explicit form.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "::", "SylvesterDimensions"}], "=", 
   "\"\<Explicit formula for algebra of vector space dimension `1` is not \
implemented, will use ExplicitFormula -> \\\"gaGetMV\\\".\>\""}], 
  ";"}]}], "Input",ExpressionUUID->"b294a9c4-4e7f-4701-9335-8a80deab1924"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLinearSolve", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Sylvester\>\"", ",", " ", 
        RowBox[{"ExplicitFormula", "\[Rule]", "True"}]}], "}"}]}], ",", 
     RowBox[{"Expand", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}]], "Input",Express\
ionUUID->"005d52ff-aa6e-4166-b157-9c9d58b00584"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearSolve", "[", 
    RowBox[{
     RowBox[{"eq_Equal", "|", " ", 
      RowBox[{"{", "eq_Equal", "}"}]}], ",", 
     RowBox[{
      RowBox[{"MV", "[", "x_", "]"}], "|", 
      RowBox[{"{", 
       RowBox[{"MV", "[", "x_", "]"}], "}"}]}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theAlgebra", ",", "the", ",", 
       RowBox[{"quiet", "=", 
        RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", 
       RowBox[{"lhs", "=", 
        RowBox[{"Subtract", "@@", "eq"}]}], ",", "freeMV", ",", 
       "termsWithVars", ",", "extractLeft", ",", "extractRight", ",", 
       "pureMV", ",", "leftMV", ",", "rightMV", ",", "theSylvesterOptions", 
       ",", "coeffDfor4"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"theAlgebra", "=", 
       RowBox[{"gaGetAlgebra", "[", "lhs", "]"}]}], ";", 
      RowBox[{
       RowBox[{"the", "[", "Method", "]"}], "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"gaLinearSolve", ",", "Method"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"determine", " ", "Sylvester", " ", "equation", " ", 
         RowBox[{"structure", ":", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"A", " ", 
             RowBox[{"MV", "[", "x", "]"}]}], " ", "-", 
            RowBox[{
             RowBox[{"MV", "[", "x", "]"}], " ", "B"}]}], "\[Equal]", " ", 
           "C"}]}]}], ",", " ", 
        RowBox[{
         RowBox[{"with", " ", "A"}], "=", "leftMV"}], ",", 
        RowBox[{"B", "=", "rightMV"}], ",", 
        RowBox[{"C", "=", "freeMV"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"freeMV", "=", 
       RowBox[{"lhs", "/.", 
        RowBox[{
         RowBox[{"MV", "[", "x", "]"}], "\[RuleDelayed]", "0"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"TextCell", "[", "\"\<The free term is \>\"", "]"}], 
                ",", 
                RowBox[{"ExpressionCell", "[", "freeMV", "]"}]}], "}"}], 
              "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"termsWithVars", "=", 
       RowBox[{"(", 
        RowBox[{"lhs", "-", "freeMV"}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pureMV", "=", 
       RowBox[{"termsWithVars", "/.", 
        RowBox[{"{", 
         RowBox[{"_GeometricProduct", "\[RuleDelayed]", "0"}], "}"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<The term with bare (i.e. either side) unknown is \>\"", 
                 "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "pureMV", "]"}]}], "}"}], 
              "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"leftMV", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"termsWithVars", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"anyScalar_.", "*", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any__", ",", 
                RowBox[{"MV", "[", "x", "]"}]}], "]"}]}], "]"}], 
            "\[RuleDelayed]", 
            RowBox[{
             RowBox[{"anyScalar", "*", 
              RowBox[{"GeometricProduct", "[", "any", "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "any", "}"}], ",", "_MV"}], "]"}]}]}], "}"}]}], 
         ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"_MV", "\[Rule]", "0"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<The LHS MV (with the unknown in the RHS) is \>\"", 
                 "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "leftMV", "]"}]}], "}"}], 
              "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"extractRight", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"termsWithVars", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"anyScalar_.", "*", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{
                RowBox[{"MV", "[", "x", "]"}], ",", "any__"}], "]"}]}], "]"}],
             "\[RuleDelayed]", 
            RowBox[{
             RowBox[{"anyScalar", "*", 
              RowBox[{"GeometricProduct", "[", "any", "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "any", "}"}], ",", "_MV"}], "]"}]}]}], "}"}]}], 
         ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"_MV", "\[Rule]", "0"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"join", " ", "terms", " ", "scalar", "*", 
        RowBox[{"MV", "[", "x", "]"}], " ", "to", " ", "right"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"rightMV", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"extractRight", "+", "pureMV"}], ")"}], "/.", 
        RowBox[{
         RowBox[{"MV", "[", "x", "]"}], "\[Rule]", "1"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<The RHS MV (with the unknown in the LHS + bare unknown) \
is \>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "extractRight", "]"}]}], "}"}],
               "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "If", " ", "other", " ", "than", " ", "Sylvester", " ", "equation", 
        " ", "is", " ", "provided", " ", "warn", " ", "and", " ", "do", " ", 
        "nothing"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"PossibleZeroQ", "[", 
         RowBox[{"gaPlainRepresentation", "[", 
          RowBox[{"gaAssociationTogether", "[", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{
                  RowBox[{"MV", "[", "x", "]"}], ",", "rightMV"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"leftMV", ",", 
                  RowBox[{"MV", "[", "x", "]"}]}], "]"}], "+", "freeMV"}], 
               ")"}], "-", "lhs"}], "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{
            RowBox[{"the", "[", "Method", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<Sylvester\>\"", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"ExplicitFormula", "/.", 
              RowBox[{"Rest", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"the", "[", "Method", "]"}], "}"}], ",", "1"}], 
                "]"}], "]"}]}], ")"}], ",", 
            RowBox[{"True", "|", "\"\<True\>\""}], ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"0", "<", 
               RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], 
               "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"MV", "[", "x", "]"}], "->", 
                RowBox[{"solSylvesterDetFromRight", "[", 
                 RowBox[{"leftMV", ",", 
                  RowBox[{"-", "rightMV"}], ",", 
                  RowBox[{"-", "freeMV"}], ",", 
                  RowBox[{
                  "gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaLinearSolve", "::", "SylvesterDimensions"}], ",", 
                 
                 RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}],
                 "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "x", "]"}], "->", 
                 RowBox[{"solSylvesterDetFromRight", "[", 
                  RowBox[{"leftMV", ",", 
                   RowBox[{"-", "rightMV"}], ",", 
                   RowBox[{"-", "freeMV"}], ",", "theAlgebra", ",", 
                   "\"\<gaGetMV\>\""}], "]"}]}], "}"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"False", "|", "\"\<False\>\"", "|", "\"\<gaGetMV\>\""}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "general", " ", "method", " ", "using", " ", "projector"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"MV", "[", "x", "]"}], "->", 
              RowBox[{"solSylvesterDetFromRight", "[", 
               RowBox[{"leftMV", ",", 
                RowBox[{"-", "rightMV"}], ",", 
                RowBox[{"-", "freeMV"}], ",", "theAlgebra", ",", 
                "\"\<gaGetMV\>\""}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", "\"\<gaNonScalarGradeInverse\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"MV", "[", "x", "]"}], "->", 
              RowBox[{"solSylvesterDetFromRight", "[", 
               RowBox[{"leftMV", ",", 
                RowBox[{"-", "rightMV"}], ",", 
                RowBox[{"-", "freeMV"}], ",", "theAlgebra", ",", 
                "\"\<gaNonScalarGradeInverse\>\""}], "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaLinearSolve", "::", "Type"}], ",", "eq"}], "]"}], ";", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"7907ef6a-cdad-4c37-81f5-af96b87b1e06"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[922]:=",ExpressionUUID->"c50a192a-fdbe-4095-8414-96a18d130267"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector derivatives (for further work)"
}], "Section",ExpressionUUID->"5b23eb1c-28c0-4d0b-9820-6be0fd061178"],

Cell["IntricitDerivative, covariantderivative.... Just started", "Text",ExpressionUUID->"19597fd8-38dc-4ca5-9104-7b185439a9bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "mvD", ",", "mvDArg", ",", "e\[EmptyDownTriangle]", ",", 
     "mvDerivativesToBase", ",", "mvExpandDerivatives"}], "}"}]}], 
  ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"37a657e0-f635-4ec5-b475-558f77f43cc0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"b29aa174-915b-47ac-80e9-024ce4a271e9"],

Cell["Function description", "Text",ExpressionUUID->"532141b6-92bf-4d16-a3d5-14cf502bbdf1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "::", "usage"}], "=", 
   "\"\<The nabla operator of geometric algebra.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"e\[EmptyDownTriangle]", "::", "usage"}], "=", 
   "\"\<Notation and shortcut of the nabla operator of geometric algebra in \
orthogonal e[n] base.\>\""}], ";"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"b9eb16ca-b7a3-4ed3-8386-e455006edabe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDerivativesToBase", "::", "usage"}], "=", 
   "\"\<DerivativesToToBase[expr_] expands expr with derivatives into \
standard base of gaRunningAlgebra.\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"ee86f90b-e0dd-4769-8285-19fd7ef4391d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"92d91222-c569-425c-85ea-6714ade952c0"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection",ExpressionUUID->"9e66e948-14d8-4115-bf84-22af1cefc153"],

Cell["\<\
Explicitly state what operators are differentiation operators. This \
information is necessary when converting into base representation.\
\>", "Text",ExpressionUUID->"702cd687-ea17-4c57-ab90-47db7e0ade4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"differentiationSymbolList", "=", 
   RowBox[{"{", "e\[EmptyDownTriangle]", "}"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"1bd97ce2-1822-4262-99d8-881cfade08ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notations and input aliases"
}], "Subsection",ExpressionUUID->"28948ded-23a4-4250-acdc-02b66af8dc95"],

Cell["\<\
 mvArg[ ] uses brackets to denote expression on which differentiation \
operator is acting. \
\>", "Text",ExpressionUUID->"cfab8c08-dcf5-4b23-85d5-bd668ba395f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDArg", "[", 
      RowBox[{"expr_", ",", "id_mvDTarget"}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bras", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<(\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<(\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           RowBox[{"Reverse", "[", "id", "]"}]}], ")"}]}]}], ",", 
       RowBox[{"kets", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<)\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<)\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           "id"}], ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TemplateBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "expr", "]"}], ",", "id"}], "}"}], ",", 
       "\"\<mvDArg\>\"", ",", 
       RowBox[{"DisplayFunction", "\[Rule]", 
        RowBox[{"Evaluate", "[", 
         RowBox[{
          RowBox[{"StyleBox", "[", 
           RowBox[{
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"bras", ",", "#1", ",", "kets"}], "}"}], "]"}], ",", 
            RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
            RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
          "&"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"c48e6db5-390c-42a4-948e-020bd4bde286"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linearity, main properties"
}], "Subsection",ExpressionUUID->"453e507f-d03a-4e8a-89cd-e5beeeb371e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaSetCommutative", "/@", 
   RowBox[{"{", "mvD", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "e\[EmptyDownTriangle]", "}"}]}], ";"}]}], "Input",
 Evaluatable->False,ExpressionUUID->"df1bd995-c081-4254-885f-aab4b1655db0"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector argument differentiation function ",
 "mvDArg[ ] "
}], "Subsubsection",ExpressionUUID->"7e3f8c0c-e784-4ba1-9900-5807d7511546"],

Cell[TextData[{
 " ",
 StyleBox["mvArg[expr, id ] ",
  FontWeight->"Bold"],
 " wraps expression which is differentiated by operator with target id"
}], "Text",ExpressionUUID->"9a60cffb-ed66-44f0-a68c-3dfff885873b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDArg", "[", 
    RowBox[{"ex_", ",", 
     RowBox[{"mvDTarget", "[", "]"}]}], "]"}], ":=", "ex"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"44ccdccf-57cd-41d7-99a7-38f4bf98beb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricAlgebra`check", "::", "Derivative"}], "=", 
   "\"\<Something wrong `1`\>\""}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"f7c00697-ca98-4ab9-a8c9-144109901a1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False,ExpressionUUID->"cbde21cc-c001-467c-abd7-e4d86f5f7285"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Linear transformations"
}], "Section",ExpressionUUID->"397235bf-72f8-40b1-a6e8-1714dd53ba85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTransformation", ",", "ExtendOutermorphismToBasisElements", ",", 
     "gaTransformationMatrix", ",", "gaAdjointTransformation", ",", 
     "gaAdjointTransformationMatrix", ",", "gaAdjointInnerOperation"}], 
    "}"}]}], ";"}]], "Input",ExpressionUUID->"8b2f4629-48f3-4237-af66-\
064a6c4ba886"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 CellLabel->
  "In[924]:=",ExpressionUUID->"82366b6b-c0a8-4434-a122-da6f3ba211b6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformation", "::", "usage"}], "=", 
   "\"\<gaTransformation[(any_MV)&] is a container that represents a linear \
operator in GA. The argument any is a pure function, which should include at \
least one expression with head MV[]. For example,  gaTransformation[a1\
\[InnerProduct](MV[#1]\[OuterProduct]b1)&]. When applied to argument it \
returns a value of linear operator value on that argument. For example, \
gaTransformation[a1\[InnerProduct](MV[#1]\[OuterProduct]b1)&][\[DoubleStruckE]\
[1]], will return valid GA expressions, for defined MVs a1,b1 and e[1] of \
some algebra.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtendOutermorphismToBasisElements", "::", "usage"}], "=", 
   "\"\<ExtendOutermorphismToBasisElements->True|False is the option for \
gaTransformation, which instructs to extend the given transormation to basis \
elements of grade>1. Default is False (not to extend).\>\""}], 
  ";"}]}], "Input",ExpressionUUID->"0c339d39-4bba-44cf-99b8-1a9ccc9747b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "::", "usage"}], "=", 
   "\"\<gaTransformation[(any_MV)&][basis_] yields a linear operator matrix \
in the provided basis. For example, gaTransformation[a1\[InnerProduct](MV[#1]\
\[OuterProduct]b1)&][{e1,e2,e3}], will return a 3x3 matrix.\>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[927]:=",ExpressionUUID->"bef88ed4-c287-4f9f-aabd-895016026f55"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "usage"}], "=", 
   "\"\<gaAdjointTransformation[tr_gaTransformation,mvOfgaTransform_,\
mvOfDualTransform_] yields adjoint transformation of linear operator in GA \
(in basis). The first argument should be gaTransformation[ ] object (a pure \
function, which includes MV[#] somewhere,see gaTransformation[ ]). The second \
argument is a multivector which is to be inserted into given \
gaTransformation[ ], i.e mvOfgaTransform of space V. The third argument is a \
multivector of a adjoint space, i.e mvOfDualTransform is of space U, and the \
transformation tr is a map V->U. In general both vectors are just \
representatives of two different spaces (aka dummy vectors). \>\""}], 
  ";"}]], "Input",
 CellLabel->
  "In[928]:=",ExpressionUUID->"f7cb5a2a-ae55-4b94-b323-1269db86b2c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointInnerOperation", "::", "usage"}], "=", 
   "\"\<Option for gaAdjointTransformation, which specify inner operation \
before taking the scalar part. Default is InnerProduct. Other possible values \
LeftContract and RightContract.\>\""}], ";"}]], "Input",
 CellLabel->
  "In[929]:=",ExpressionUUID->"a6ccddc5-a7b1-49a8-aebd-4e01d261b80d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformationMatrix", "::", "usage"}], "=", 
   "\"\<gaAdjointTransformation[tr_gaTransformation][basis_list] yields \
adjoint transformation matrix. \>\""}], ";"}]], "Input",
 CellLabel->
  "In[930]:=",ExpressionUUID->"95efa299-3dba-43bb-8965-fa3bf42175cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[931]:=",ExpressionUUID->"03729c4b-c216-43d6-8efc-f2d63227e261"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection",ExpressionUUID->"b20fed30-eac9-47c5-9dbc-072b9822d3d8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myUnitize", "[", "any_", "]"}], ":=", 
  RowBox[{"1", "/;", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"any", "===", "0"}], ")"}]}]}]}]], "Input",
 CellLabel->
  "In[932]:=",ExpressionUUID->"ccd9e822-6499-4f01-9f7e-60dba4c640a8"]
}, Open  ]],

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linear transformation and its adjoint"
}], "Subsection",ExpressionUUID->"afac6941-9b52-4764-8988-f4b9d01e1bfc"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaTransformation[ ],  gaTransformationMatrix[  ]"
}], "Subsubsection",ExpressionUUID->"6118d800-4e71-455a-b238-4e51e72194d3"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"gaTransformation", ",", "HoldAll"}], "]"}]], "Input",
 Evaluatable->False,
 CellLabel->"In[28]:=",ExpressionUUID->"5cb41aba-8dda-4f05-b863-1c645399cf52"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "linearity", " ", "properties", " ", "of", " ", "gaTransformation"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"0", ",", 
        RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_Plus", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{"c_", ",", "d__"}], "]"}], ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"c", "*", 
       RowBox[{
        RowBox[{"gaTransformation", "[", "any", "]"}], "[", 
        RowBox[{
         RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"outermorphism", " ", "property", " ", "not", " ", "needed"}], 
    ",", " ", 
    RowBox[{
    "since", "  ", "transformation", " ", "itself", " ", "should", " ", 
     "include", " ", "all", " ", 
     RowBox[{"arguments", "!"}], " ", "Nevetherless", " ", "we", " ", "keep", 
     " ", "it", " ", "a", " ", "while"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_OuterProduct", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], 
    ";"}], "*)"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[933]:=",ExpressionUUID->"8a74037e-8c93-4975-be93-42a00b0a7fa8"],

Cell["\<\
Include also option how to handle outermorphism extension in basis elements\
\>", "Text",ExpressionUUID->"9283aa3a-b4dd-4859-9040-1120727a141d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"testOptionTransformation", "[", 
    RowBox[{"ExtendOutermorphismToBasisElements", ",", "val_"}], "]"}], ":=", 
   
   RowBox[{"BooleanQ", "[", "val", "]"}]}], ";"}]], "Input",ExpressionUUID->\
"921a41a5-9c43-4874-8350-021f71f021fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaTransformation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ExtendOutermorphismToBasisElements", "\[Rule]", "False"}], 
    "}"}]}], ";", 
  RowBox[{
   RowBox[{"gaTransformation", "::", "arg"}], "=", 
   "\"\<The transformation argument `1` on which acts the transformation `2` \
is a sequence. Don't know how to extend outermorphism in this case.\>\""}], 
  ";"}]], "Input",ExpressionUUID->"d7f6760c-39c1-4e65-bd17-32c28c41e51d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaTransformation", "[", 
     RowBox[{"transform_Function", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", "arggs___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"the", ",", "theOutermorphismOption", ",", "op"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOptionCheck", "[", "testOptionTransformation", "]"}], "[", 
       RowBox[{"theOutermorphismOption", "=", 
        RowBox[{"OptionValue", "[", 
         RowBox[{
         "gaTransformation", ",", "ExtendOutermorphismToBasisElements"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "theOutermorphismOption", ",", "\[IndentingNewLine]", "False", ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"transform", "[", "arggs", "]"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}], 
           "}"}]}], ")"}], ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"{", "arggs", "}"}], "]"}], "===", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"bs", "=", 
              RowBox[{
              "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
               "]"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "first", " ", "dealth", " ", "with", " ", "down", " ", 
               "indices"}], ",", " ", 
              RowBox[{"then", " ", "with", " ", "up"}]}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "expand", " ", "argss", " ", "to", " ", "prevent", " ", 
               "complication", " ", "when", " ", "combination", " ", 
               "ExtendOutermorphismToBasisElements"}], "\[Rule]", 
              RowBox[{
              "True", " ", "is", " ", "set", " ", "and", " ", "arggs", " ", 
               "is", " ", "in", " ", "outer", " ", "product", " ", "form", 
               " ", 
               RowBox[{"a", "^", 
                RowBox[{"b", "^", "c"}]}]}]}], " ", "*)"}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"gaPE", "[", "arggs", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"di_List", ",", "du_List"}], "]"}], ",", "al_", 
                    ",", "other___"}], "]"}], "\[RuleDelayed]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"transform", "/@", 
                    RowBox[{"(", 
                    RowBox[{"op", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", "du"}], "]"}], ",", "al", 
                    ",", "other"}], "]"}], "&"}], "/@", "di"}], ")"}]}], 
                    ")"}]}], "/.", 
                    RowBox[{"op", "\[Rule]", "OuterProduct"}]}], ")"}], "/;", 
                    
                    RowBox[{
                    RowBox[{"Length", "[", "di", "]"}], ">=", "1"}]}]}], 
                  "}"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"di_List", ",", "du_List"}], "]"}], ",", "al_", 
                   ",", "other___"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"transform", "/@", 
                    RowBox[{"(", 
                    RowBox[{"op", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"di", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", "al", ",", 
                    "other"}], "]"}], "&"}], "/@", "du"}], ")"}]}], ")"}]}], "/.", 
                    RowBox[{"op", "\[Rule]", "OuterProduct"}]}], ")"}], "/;", 
                  
                  RowBox[{
                   RowBox[{"Length", "[", "du", "]"}], ">=", "1"}]}]}], 
                "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}], 
              "}"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaTransformation", "::", "arg"}], ",", 
             RowBox[{"{", "arggs", "}"}], ",", "transform"}], "]"}], ";", 
           "$Failed"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"851f43f1-4f60-45bc-9dc4-db59809db0b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformation", "[", "transform_Function", "]"}], "[", 
   "arggs___", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"transform", "[", "arggs", "]"}], ")"}], "/.", 
    RowBox[{
     RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}]}], 
   ")"}]}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabel->
  "In[934]:=",ExpressionUUID->"12866bff-0485-46c7-a737-62b49d1a7b5d"],

Cell["\<\
Checking  for number of arguments is too restrictive, suspended\
\>", "Text",ExpressionUUID->"d83483cf-b1bb-49e8-9187-4b8966d68d54"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformation", "[", "transform_Function", "]"}], "[", 
   "arggs___", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"transform", "[", "arggs", "]"}], ")"}], "/.", 
     RowBox[{
      RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", "opar"}]}], ")"}], 
   "/;", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"{", "arggs", "}"}], "]"}], "===", 
    RowBox[{"Count", "[", 
     RowBox[{
      RowBox[{"Hold", "[", "transform", "]"}], ",", "MV", ",", "Infinity", 
      ",", 
      RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"0a69fca7-d2b6-4798-a203-bca2f47ce90e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "[", "expr_gaTransformation", "]"}], "[",
    "theElements_List", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"(", 
   RowBox[{"Outer", "[", 
    RowBox[{"InnerProduct", ",", 
     RowBox[{"gaIndexDown", "/@", 
      RowBox[{"(", 
       RowBox[{"gaHermitianConjugate", "/@", "theElements"}], ")"}]}], ",", 
     RowBox[{"(", 
      RowBox[{"expr", "/@", "theElements"}], ")"}]}], "]"}], ")"}]}]], "Input",\
ExpressionUUID->"c9771b53-0a04-4d0c-91de-47c1c64bd486"],

Cell["\<\
One attempts to write transformation matrix from it action on symbolic MV.  \
Note different (two argument) syntax. That might not work in general(?) and \
is suppressed\
\>", "Text",ExpressionUUID->"d8586ddd-ef21-4822-a845-3165b02c1ccb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "::", "testMVForm"}], "=", 
   "\"\<The test MV `1` on which acted the transformation `2` is not of the \
form x[1] e[1] +x[2] e[2]+..., where all  x[i] are different symbolic \
coefficients.\>\""}], ";"}]], "Input",ExpressionUUID->"b2618cb0-e034-4f86-\
a94d-716446240a3e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaTransformationMatrix", "[", 
       RowBox[{
       "transformationActionOnTestMV_", ",", "testMVforTransformation_"}], 
       "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"componentsFromTestMV", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"gaGetMVComponents", "[", 
              RowBox[{"testMVforTransformation", ",", 
               RowBox[{
               "gaNonCommutativeMonomialOrder", "\[Rule]", 
                "\"\<InvDeg[Lex]\>\""}]}], "]"}], ",", "0"}], "]"}]}], ",", 
          "extractedBasisFromTestMV", ",", "testCoefficients", ",", 
          "symbolicCoefficientsOfTestMV"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"extractedBasisFromTestMV", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"Collect", "[", 
             RowBox[{"#", ",", "_bs", ",", "myUnitize"}], "]"}], "&"}], "/@", 
           "componentsFromTestMV"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "test", " ", "MV", " ", "contains", " ", "simple", " ",
              "symbolic", " ", "coefficients"}], ",", " ", 
            RowBox[{
            "we", " ", "can", " ", "try", " ", "to", " ", "restore", " ", 
             "action"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"testCoefficients", "=", 
              RowBox[{"Flatten", "[", 
               RowBox[{"(", 
                RowBox[{"gaVariables", "/@", "componentsFromTestMV"}], ")"}], 
               "]"}]}], "]"}], "===", 
            RowBox[{"Length", "[", 
             RowBox[{"gaVariables", "[", "testMVforTransformation", "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"symbolicCoefficientsOfTestMV", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"Collect", "[", 
               RowBox[{"#", ",", "testCoefficients", ",", "myUnitize"}], 
               "]"}], "&"}], "/@", "componentsFromTestMV"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaTransformationMatrix", "::", "testMVForm"}], ",", 
              "testMVforTransformation", ",", 
              "transformationActionOnTestMV"}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "use", " ", "one", " ", "dual", " ", "basis", " ", "for", " ", 
           "non", " ", "Euclidean", " ", 
           RowBox[{"algebras", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Outer", "[", 
           RowBox[{"InnerProduct", ",", 
            RowBox[{"gaIndexDown", "/@", 
             RowBox[{"(", 
              RowBox[{
              "gaHermitianConjugate", "/@", "extractedBasisFromTestMV"}], 
              ")"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Coefficient", "[", 
               RowBox[{"transformationActionOnTestMV", ",", "#"}], "]"}], 
              "&"}], "/@", "symbolicCoefficientsOfTestMV"}]}], "]"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Outer", "[", 
          RowBox[{"InnerProduct", ",", "extractedBasisFromTestMV", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Coefficient", "[", 
              RowBox[{"transformationActionOnTestMV", ",", "#"}], "]"}], 
             "&"}], "/@", "symbolicCoefficientsOfTestMV"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",ExpressionUUID->"c9b7cc93-81bf-4706-9712-6176b5af33d3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaAdjointTransformation[ ] and gaAdjointTransformationMatrix[  ]"
}], "Subsubsection",ExpressionUUID->"eea5c0f7-93e5-4687-86c9-a8ce4acfa181"],

Cell["\<\
Realization of Adjoint transformation using SolveAlways[ ] and using direct \
formula for vectors \
\>", "Text",ExpressionUUID->"4cbe82e4-c001-4714-9c23-1cb7334c051f"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "linearity", " ", "properties", " ", "of", " ", "gaTransformation"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"0", ",", 
        RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_Plus", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaAdjointTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{"c_", ",", "d__"}], "]"}], ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"c", "*", 
       RowBox[{
        RowBox[{"gaAdjointTransformation", "[", "any", "]"}], "[", 
        RowBox[{
         RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"outermorphism", " ", "property", " ", "not", " ", "needed"}], 
      ",", " ", 
      RowBox[{
      "since", "  ", "transformation", " ", "itself", " ", "should", " ", 
       "include", " ", "all", " ", 
       RowBox[{"arguments", "!"}], " ", "Nevetherless", " ", "we", " ", 
       "keep", " ", "it", " ", "a", " ", "while"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaAdjointTransformation", "[", "any_", "]"}], "[", 
       RowBox[{"y_OuterProduct", ",", 
        RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"z", ",", 
         RowBox[{
          RowBox[{"gaAdjointTransformation", "[", "any", "]"}], "[", 
          RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}], 
    ";"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[938]:=",ExpressionUUID->"b0b2a43f-6892-462b-9ed0-82451615c5e4"],

Cell[TextData[{
 "This is ",
 StyleBox["preferable way: to be improved yet, ",
  FontColor->RGBColor[0, 1, 0]],
 " to pass options to all commands.   gaAdjointTransformation has methods \
\[OpenCurlyDoubleQuote]SolveAlways\[CloseCurlyDoubleQuote] and  \
\[OpenCurlyDoubleQuote]Vector\[CloseCurlyDoubleQuote]. Needs to add automatic \
help of possible values of options, special option for option->Automatic \
value handling, etc"
}], "Text",ExpressionUUID->"89dc981a-f71c-457f-9825-da04e158cf8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "If", " ", "there", " ", "are", " ", "few", " ", "different", " ", 
     "Options", " ", "with", " ", "suboptions"}], ",", " ", 
    RowBox[{
    "we", " ", "need", " ", "to", " ", "specify", " ", "default", " ", 
     "values", " ", "for", " ", "all", " ", "of", " ", 
     RowBox[{"them", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "is", " ", "implemented", " ", "by", " ", "introducing", " ", 
    "named", " ", "containers", " ", 
    RowBox[{"below", ".", "  ", "gaSubOptionContainer"}], " ", "is", " ", 
    "internal", " ", "name", " ", "for", " ", "the", " ", "containers"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaSubOptionContainer", "[", 
      RowBox[{"gaAdjointTransformation", ",", 
       RowBox[{"{", "\"\<SolveAlways\>\"", "}"}]}], "]"}], "=", 
     RowBox[{"(", 
      RowBox[{"Method", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<SolveAlways\>\"", ",", 
         RowBox[{"gaGradesOnly", "\[Rule]", "Automatic"}], ",", 
         RowBox[{"gaAdjointInnerOperation", "\[Rule]", "GeometricProduct"}]}],
         "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaSubOptionContainer", "[", 
      RowBox[{"gaAdjointTransformation", ",", 
       RowBox[{"{", "\"\<Vector\>\"", "}"}]}], "]"}], "=", 
     RowBox[{"(", 
      RowBox[{"Method", "\[Rule]", 
       RowBox[{"{", "\"\<Vector\>\"", "}"}]}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "then", " ", "we", " ", "include", " ", "of", " ", "one", " ", "of", " ", 
     "methods", " ", "inside", " ", "of", " ", 
     RowBox[{"Options", "[", " ", "]"}], " ", "itself"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaAdjointTransformation", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"gaSubOptionContainer", "[", 
       RowBox[{"gaAdjointTransformation", ",", 
        RowBox[{"{", "\"\<SolveAlways\>\"", "}"}]}], "]"}], "}"}]}], ";"}], 
   " ", 
   RowBox[{"(*", " ", 
    RowBox[{"OptionsPattern", " ", 
     RowBox[{"don", "'"}], "t", " ", "work", " ", "with", " ", 
     RowBox[{"subvalues", "?"}]}], "*)"}], "\[IndentingNewLine]"}]}]], "Input",\
ExpressionUUID->"feefbd14-6b63-4f07-9dd7-5a4f1a7d3002"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTransformationMatrix", "::", "notvector"}], "=", 
   "\"\<The Method `1` can be applied only vector transformations on vector \
argument (in orthonormal basis). Try Method->\\\"SolveAlways\\\".\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "noSolution"}], "=", 
   "\"\<SolveAlways was unable to solve a system `1` with respect to \
variables `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "noSolution1"}], "=", 
   "\"\<Unable to solve a system `1` with respect to variables `2` obtained \
form a solution from SolveAlways.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "notvector"}], "=", 
   "\"\<Grade of  `1` is not vector grade {1}.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjointTransformation", "::", "nonhomogeneousMV"}], "=", 
   "\"\<The argument has grades `1`. For pair product you use `2` product and \
not GeometricProduct. Hope your know what your are doing.\>\""}], 
  ";"}]}], "Input",ExpressionUUID->"35e116a3-ec36-4223-9a81-6a74851b2285"],

Cell["\<\
Next we provide test functions to test values for each of option. If option \
has suboptions, then define two test functions, one without suboptions, the \
other with suboptions\
\>", "Text",ExpressionUUID->"25b20d6d-773b-4ebe-b3ec-c74cb68d46ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testOptionAdjointTransformation", "[", 
    RowBox[{"Method", ",", "val_String"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{"\"\<SolveAlways\>\"", ",", "\"\<Vector\>\""}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"testOptionAdjointTransformation", "[", 
     RowBox[{"Method", ",", "val_List"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"MatchQ", "[", 
       RowBox[{"val", ",", 
        RowBox[{"Alternatives", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<SolveAlways\>\"", ",", 
            RowBox[{"___", "?", "OptionQ"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Vector\>\"", ",", "___OptionQ"}], "}"}]}], "]"}]}], 
       "]"}], "&&", 
      RowBox[{"TrueQ", "[", 
       RowBox[{"AllTrue", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "val", "]"}], ",", 
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{
            RowBox[{
            "testOptionAdjointTransformation", "[", "\"\<SolveAlways\>\"", 
             "]"}], ",", "#"}], "]"}], "&"}]}], "]"}], "]"}]}], ")"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"TrueQ", "[", " ", "]"}], " ", "above", " ", "prevents", " ", 
     "form", " ", "unecidable", " ", "test", " ", "of", " ", "unknown", " ", 
     "option"}], ",", " ", 
    RowBox[{
    "for", " ", "which", " ", "test", " ", "function", " ", "is", " ", "not", 
     " ", "defined"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "for", " ", "suboption", " ", "test", " ", "defeine", " ", "test", " ", 
    "functions", " ", "which", " ", "explicitly", " ", "includes", " ", "the",
     " ", "method", " ", "for", " ", "which", " ", "it", " ", "applies"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionAdjointTransformation", "[", "\"\<SolveAlways\>\"", "]"}], "[", 
    RowBox[{"gaGradesOnly", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{"All", ",", "Automatic", ",", 
       RowBox[{"{", 
        RowBox[{"__Integer", "?", "Positive"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "testOptionAdjointTransformation", "[", "\"\<SolveAlways\>\"", "]"}], "[", 
    RowBox[{"gaAdjointInnerOperation", ",", "val_"}], "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"val", ",", 
     RowBox[{"Alternatives", "[", 
      RowBox[{
      "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
       "GeometricProduct"}], "]"}]}], "]"}]}], ";"}]}], "Input",ExpressionUUID\
->"8858a1ef-e05e-45c6-aa3e-b5c261cf436d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAdjointTransformation", "[", 
     RowBox[{"tr_gaTransformation", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
    "mvOfDualTransform_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"gaGetAlgebra", "[", "mvOfDualTransform", "]"}]}], ",", "the",
        ",", "theMethodAndItsOptions", ",", "theMethod", ",", 
       "theMethodOptions", ",", "theScalarProductOnArgOfgaTransform", ",", 
       "thetransformationGrade", ",", "theEq", ",", "y", ",", "yMV", ",", 
       "sol", ",", "playMV", ",", "mvName", ",", "theArgumentGrade", ",", 
       "solPlay", ",", 
       RowBox[{"mvOfDualTransformExpanded", "=", 
        RowBox[{"gaPE", "[", "mvOfDualTransform", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "expand", " ", "mvOfDualTransform", " ", "to", " ", "prevent", " ", 
        "complications", " ", "when", " ", "combination", " ", 
        "ExtendOutermorphismToBasisElements"}], "\[Rule]", 
       RowBox[{
       "True", " ", "in", " ", "gaTransformation", " ", "is", " ", "given", 
        " ", "and", " ", "mvOfDualTransform", " ", "is", " ", "in", " ", 
        "outer", " ", "product", " ", "form", " ", 
        RowBox[{"a", "^", 
         RowBox[{"b", "^", "c"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOptionCheck", "[", "testOptionAdjointTransformation", "]"}],
        "[", 
       RowBox[{"theMethodAndItsOptions", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"OptionValue", "[", 
            RowBox[{"gaAdjointTransformation", ",", "Method"}], "]"}], "}"}], 
          ",", "1"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "since", " ", "Method", " ", "can", " ", "have", " ", "suboptions", 
        " ", "we", " ", "wrapped", " ", "it", " ", "with", " ", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", "1"}], "]"}], ".", " ", "This"}], " ", 
        "ensures", " ", "we", " ", "always", " ", "will", " ", "have", " ", 
        "a", " ", "list", " ", "here"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "then", " ", "split", " ", "the", " ", "method", " ", "and", " ", 
         "its", " ", 
         RowBox[{"options", ".", " ", "user"}], " ", "provided", " ", 
         "values", " ", "are", " ", "listed", " ", "first"}], ",", " ", 
        RowBox[{"then", " ", "all", " ", "default", " ", "options"}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"theMethodOptions", "=", 
       RowBox[{"DeleteDuplicatesBy", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Rest", "[", "theMethodAndItsOptions", "]"}], ",", 
             RowBox[{"Rest", "[", 
              RowBox[{"Method", "/.", 
               RowBox[{"{", 
                RowBox[{"gaSubOptionContainer", "[", 
                 RowBox[{"gaAdjointTransformation", ",", 
                  RowBox[{"{", 
                   RowBox[{"theMethodAndItsOptions", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}], "}"}]}], 
              "]"}]}], "}"}], ",", "1"}], "]"}], ",", "First"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "theMethodOptions", "]"}], ">", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "wrap", " ", "all", " ", "option", " ", "names", " ", "with", " ", 
           "the"}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"i", ".", "e", ".", " ", "gaGradesOnly"}], " ", "becomes",
             " ", 
            RowBox[{"the", "[", "gaGradesOnly", "]"}], " ", "and", " ", "we", 
            " ", "provide", " ", "option", " ", "value", " ", "for", " ", 
            "that", " ", 
            RowBox[{"var", ":", " ", 
             RowBox[{"the", "[", "gaGradesOnly", "]"}]}]}], "=", "value"}]}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "The", " ", "below", " ", "setting", " ", "of", " ", "option", " ", 
           "value", " ", "needs", " ", "modification", " ", "if", " ", 
           "suboption", " ", "has", " ", "options"}], ",", " ", 
          RowBox[{
           RowBox[{"i", ".", "e", ".", " ", "in"}], " ", "subsuboption", " ", 
           
           RowBox[{"case", ":", " ", "later"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Set", "@@@", 
           RowBox[{"MapAt", "[", 
            RowBox[{"the", ",", "theMethodOptions", ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], ")"}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theMethodOptions", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "generate", " ", "formal", " ", "MV", " ", "which", " ", "has", " ", 
         "the", " ", "same", " ", "grades", " ", "as", "  ", "argument", " ", 
         "of", " ", "dual", " ", "transform", " ", 
         RowBox[{"vOfDualTransform", ":", " ", 
          RowBox[{"this", " ", "is", " ", "hypothesis"}]}]}], ",", " ", 
        RowBox[{
        "needs", " ", "rethinking", " ", "for", " ", "more", " ", "general", 
         " ", "case"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"theArgumentGrade", "=", 
       RowBox[{"gaGetGrade", "[", "mvOfDualTransformExpanded", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"thetransformationGrade", "=", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"tr", "[", "mvOfDualTransformExpanded", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "warn", " ", "when", " ", "using", " ", "true", " ", "inner", " ", 
         "product", " ", "with", " ", "argument", " ", "of", " ", "grade", 
         " ", "higher", " ", "than", " ", "2", " ", "or", " ", 
         "inhomogeneous", " ", "MV"}], ",", " ", 
        RowBox[{"since", " ", "in", " ", "this", " ", "case", " ", 
         RowBox[{"(", 
          RowBox[{"only", "?"}], ")"}], " ", "GeometricProduct", " ", "makes",
          " ", "sence"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "theArgumentGrade", "]"}], ">", "1"}], 
            ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"Max", "[", 
             RowBox[{"theArgumentGrade", ">", "2"}], "]"}], ")"}]}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"the", "[", "gaAdjointInnerOperation", "]"}], "=!=", 
           "GeometricProduct"}], ")"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAdjointTransformation", "::", "nonhomogeneousMV"}], ",", 
          "theArgumentGrade", ",", 
          RowBox[{"the", "[", "gaAdjointInnerOperation", "]"}]}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"theMethodAndItsOptions", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<SolveAlways\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"the", "[", "gaGradesOnly", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "if", " ", "agument", " ", "is", " ", "a", " ", "scalar"}], ",", 
             " ", 
             RowBox[{
             "we", " ", "should", " ", "extend", " ", "playMV", " ", "to", 
              " ", "larger", " ", "MV", " ", "than", " ", "just", " ", 
              "scalar"}], ",", " ", 
             RowBox[{"take", " ", "full", " ", "MV"}], ",", " ", 
             RowBox[{"for", " ", "example"}]}], "*)"}], "\[IndentingNewLine]",
            "Automatic", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"theArgumentGrade", "=!=", 
              RowBox[{"{", "0", "}"}]}], ",", 
             RowBox[{"playMV", "=", 
              RowBox[{"gaGeneralMultivector", "[", 
               RowBox[{"mvName", ",", "theAlgebra", ",", "theArgumentGrade"}],
                "]"}]}], ",", 
             RowBox[{"playMV", "=", 
              RowBox[{"gaGeneralMultivector", "[", 
               RowBox[{"mvName", ",", "theAlgebra"}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", "All", ",", 
           RowBox[{"playMV", "=", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"mvName", ",", "theAlgebra"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"__Integer", "?", "Positive"}], "}"}], ",", " ", 
           RowBox[{"playMV", "=", 
            RowBox[{"gaGeneralMultivector", "[", 
             RowBox[{"mvName", ",", "theAlgebra", ",", 
              RowBox[{"the", "[", "gaGradesOnly", "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"theScalarProductOnArgOfgaTransform", "=", 
          RowBox[{"tr", "[", "playMV", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"yMV", "=", 
          RowBox[{"gaGeneralMultivector", "[", 
           RowBox[{"y", ",", "theAlgebra", ",", 
            RowBox[{"gaGetGrade", "[", "playMV", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "The", " ", "eauations", " ", "are", " ", "obtained", " ", 
            "taking", " ", "in", " ", "addition", " ", "grade"}], "-", 
           RowBox[{"0", " ", "part", " ", "of", " ", "inner", " ", 
            RowBox[{"product", ".", " ", "One"}], " ", "may", " ", "want", 
            " ", "to", " ", "replace", " ", "inner", " ", "product", " ", 
            "with", " ", "left", " ", "or", " ", "right", " ", 
            "contraction"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"theEq", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{"the", "[", "gaAdjointInnerOperation", "]"}], "[", 
                 RowBox[{
                 "theScalarProductOnArgOfgaTransform", ",", 
                  "mvOfDualTransformExpanded"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", "0", "}"}]}], "]"}], "==", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{"gaPE", "[", 
                RowBox[{
                 RowBox[{"the", "[", "gaAdjointInnerOperation", "]"}], "[", 
                 RowBox[{"playMV", ",", "yMV"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", "0", "}"}]}], "]"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"SolveAlways", "[", 
           RowBox[{"theEq", ",", 
            RowBox[{"gaVariables", "[", "playMV", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "sol", "]"}], "===", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solPlay", "=", 
             RowBox[{"Solve", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sol", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/.", 
                 RowBox[{"Rule", "\[Rule]", "Equal"}]}], ")"}], ",", 
               RowBox[{"gaVariables", "[", "yMV", "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "solPlay", "]"}], "===", "1"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"yMV", "/.", 
                RowBox[{"solPlay", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaAdjointTransformation", "::", "noSolution1"}], 
                 ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"sol", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "/.", 
                   RowBox[{"Rule", "\[Rule]", "Equal"}]}], ")"}], " ", ",", 
                 RowBox[{"gaVariables", "[", "yMV", "]"}]}], "]"}], ";", 
               RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaAdjointTransformation", "::", "noSolution"}], ",", 
              "theEq", " ", ",", 
              RowBox[{"gaVariables", "[", "playMV", "]"}]}], "]"}], ";", 
            RowBox[{"{", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        "\"\<Vector\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"theArgumentGrade", ",", "thetransformationGrade"}], 
              "}"}], "]"}], "]"}], "===", 
           RowBox[{"{", "1", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"bs", "=", 
              RowBox[{
              "Symbol", "[", "GeometricAlgebra`p`orthonormalBasisSymbolName", 
               "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mvOfDualTransformExpanded", "\[InnerProduct]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"tr", "[", 
                   RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "i", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}], 
                   "]"}], "/.", 
                  RowBox[{
                   RowBox[{"MV", "[", "opar_", "]"}], "\[RuleDelayed]", 
                   "opar"}]}], ")"}]}], "\[GeometricProduct]", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "i", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
               "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaAdjointTransformation", "::", "notvector"}], ",", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"theArgumentGrade", ",", "thetransformationGrade"}], 
                "}"}], "]"}], "]"}]}], " ", "]"}], ";", 
           RowBox[{"{", "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", "_", 
        ",", "$Failed"}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",ExpressionUUID->"6b74d658-\
c12b-4eae-9ba1-08882ba5b125"],

Cell["\<\
For non Euclidean algebras we made modification: \
gaIndexDown/@(gaHermitianConjugate/@theElements) instead of just, theElements\
\
\>", "Text",ExpressionUUID->"321c499b-ff89-4187-ba66-0092226b331b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
   "gaAdjointTransformationMatrix", "[", "expr_gaTransformation", "]"}], "[", 
   "theElements_List", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Outer", "[", 
    RowBox[{"InnerProduct", ",", 
     RowBox[{"gaIndexDown", "/@", 
      RowBox[{"(", 
       RowBox[{"gaHermitianConjugate", "/@", "theElements"}], ")"}]}], ",", 
     RowBox[{"(", 
      RowBox[{"expr", "/@", "theElements"}], ")"}]}], "]"}], "]"}]}]], "Input",\
ExpressionUUID->"cb2f9407-a8d3-4976-ab9f-8794dd3e8dc7"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[950]:=",ExpressionUUID->"1534fbd9-3e62-4bb5-a925-823469dd8ece"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Close Package"
}], "Section",ExpressionUUID->"a0ee7a7a-e0cc-4e37-a81a-b39acd14152a"],

Cell["\<\
Execute this section in order to test if all functions are defined in proper \
order\
\>", "Text",ExpressionUUID->"0b6639ef-2ba6-4ef7-ab51-640fec59e455"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[951]:=",ExpressionUUID->"388eac7b-da56-4046-b97e-c7bfae0c6704"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heads", " ", "=", " ", 
  RowBox[{"MissingForwardDeclarations", "[", "]"}]}]], "Input",
 CellLabel->
  "In[952]:=",ExpressionUUID->"f50ee0c9-9a57-415f-827e-b347dbe032b6"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->
  "Out[952]=",ExpressionUUID->"35862f3e-f004-4b49-ae1f-b9d777221304"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"heads", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{"a", " ", "nice", " ", "development", " ", "aid"}], " ", "*)"}], 
    "  ", 
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<ERROR, need forwards, or make calls only from private context:\\n\>\
\"", " ", "<>", "  ", 
      RowBox[{"StringListPrintableString", "[", "heads", "]"}]}], "]"}]}], 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[953]:=",ExpressionUUID->"4a3af236-8b0b-4e19-9e71-6e9b00be3778"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "heads", "]"}], ";"}], " "}]], "Input",
 CellLabel->
  "In[954]:=",ExpressionUUID->"719e4bdb-7aed-4d01-b068-3cf999752d08"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[955]:=",ExpressionUUID->"d7b751f8-e824-460f-a29b-532c4c400823"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaPackageHasBeenLoaded", " ", "=", " ", "True"}], ";"}]], "Input",\

 CellLabel->
  "In[956]:=",ExpressionUUID->"bc7a9c03-3fa3-432c-946a-bc0fcf2b5c0e"],

Cell["\<\
No need for EndPackage[]?, because End[] was used in DeclareIntoContext[]??? \
Seems we need it.\
\>", "Text",ExpressionUUID->"24aab53d-ad7f-41c8-bb1f-fd481c77fd4f"]
}, Open  ]],

Cell["\<\
Adjust Out[ ] labels that they start from 1 in a calling notebook.\
\>", "Text",ExpressionUUID->"6b8a9e60-56b1-4523-bcd3-e973fb2d3468"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Unprotect", "[", "Out", "]"}], ";"}]], "Input",
 CellLabel->
  "In[957]:=",ExpressionUUID->"ba40136d-2ef2-4141-934b-94b725bd9466"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "Out", "]"}], ";"}]], "Input",
 CellLabel->
  "In[958]:=",ExpressionUUID->"1df6d245-f656-476e-88e1-5b45197f27c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", "Out", "]"}], ";"}]], "Input",
 CellLabel->
  "In[959]:=",ExpressionUUID->"9beba473-7230-405d-aa56-98479428718a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]], "Input",
 CellLabel->
  "In[960]:=",ExpressionUUID->"e04a551f-a51a-48a5-b449-4e60ee9932e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackageContext", "<>", " ", "\"\<*\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[961]:=",ExpressionUUID->"10f6f9b5-2df3-40fb-8123-cb11a494f0b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BaseVectorAlgebra\"\>", ",", "\<\"BasisVectorsMultipliers\"\>",
    ",", "\<\"BasisVectorsReordering\"\>", ",", "\<\"BeginPrivate\"\>", 
   ",", "\<\"Blade\"\>", ",", "\<\"Cl\"\>", 
   ",", "\<\"CoefficientFunction\"\>", ",", "\<\"CollectCoefficients\"\>", 
   ",", "\<\"DeclareIntoContext\"\>", ",", "\<\"DorstProduct\"\>", 
   ",", "\<\"DP\"\>", ",", "\<\"ElementaryRepresentations\"\>", 
   ",", "\<\"EndPrivate\"\>", ",", "\<\"Evaluation\"\>", 
   ",", "\<\"gaAdjointInnerOperation\"\>", 
   ",", "\<\"gaAdjointTransformation\"\>", 
   ",", "\<\"gaAdjointTransformationMatrix\"\>", 
   ",", "\<\"gaAlgebraMultiplicationTable\"\>", 
   ",", "\<\"gaAntiCommutator\"\>", 
   ",", "\<\"gaAssociationRepresentation\"\>", 
   ",", "\<\"gaAssociationTogether\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeries\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeriesData\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffTermLogarithm\"\>", 
   ",", "\<\"gaBCHSeries\"\>", ",", "\<\"gaBilinearForm\"\>", 
   ",", "\<\"gaBladeFactor\"\>", ",", "\<\"gaBladeQ\"\>", 
   ",", "\<\"gaBladeToSumOfVersors\"\>", ",", "\<\"gaCasimir\"\>", 
   ",", "\<\"gaCE\"\>", ",", "\<\"gaCliffordConjugate\"\>", 
   ",", "\<\"gaCliffordDecomposableQ\"\>", ",", "\<\"gaCliffordDecompose\"\>",
    ",", "\<\"gaCommutativeAllQ\"\>", 
   ",", "\<\"gaCommutativeMonomialOrder\"\>", ",", "\<\"gaCommutativeQ\"\>", 
   ",", "\<\"gaCommutator\"\>", ",", "\<\"gaCommutatorExpand\"\>", 
   ",", "\<\"gaCompactAssociationRepresentation\"\>", 
   ",", "\<\"gaCompactPlainRepresentation\"\>", 
   ",", "\<\"gaComplexCliffordConjugate\"\>", 
   ",", "\<\"gaComplexConjugate\"\>", ",", "\<\"gaComplexSymbols\"\>", 
   ",", "\<\"gaCos\"\>", ",", "\<\"gaCosh\"\>", 
   ",", "\<\"gaDefineAssociationRepresentationKeyOrder\"\>", 
   ",", "\<\"gaDefineInput\"\>", ",", "\<\"gaDefineMatrixRepresentation\"\>", 
   ",", "\<\"gaDefineNotation\"\>", ",", "\<\"gaDefineOrthonormalBasis\"\>", 
   ",", "\<\"gaDeterminantOfMV\"\>", ",", "\<\"gaDoubleSidedIdeal\"\>", 
   ",", "\<\"gaDynkinFactor\"\>", ",", "\<\"gaEliminateGrade\"\>", 
   ",", "\<\"gaExp\"\>", ",", "\<\"gaExpand\"\>", ",", "\<\"gaExpandedQ\"\>", 
   ",", "\<\"gaFactorTerm\"\>", ",", "\<\"gaFromMatrixRepresentation\"\>", 
   ",", "\<\"gaFromTensorProduct\"\>", ",", "\<\"gaGeneralMultivector\"\>", 
   ",", "\<\"gaGeometricCos\"\>", ",", "\<\"gaGeometricCosh\"\>", 
   ",", "\<\"gaGeometricExp\"\>", ",", "\<\"gaGeometricMatrixProduct\"\>", 
   ",", "\<\"gaGeometricProductSeries\"\>", ",", "\<\"gaGeometricSin\"\>", 
   ",", "\<\"gaGeometricSinh\"\>", ",", "\<\"gaGeometricTan\"\>", 
   ",", "\<\"gaGeometricTanh\"\>", ",", "\<\"gaGetAlgebra\"\>", 
   ",", "\<\"gaGetGrade\"\>", ",", "\<\"gaGetIndex\"\>", 
   ",", "\<\"gaGetMV\"\>", ",", "\<\"gaGetMVComponents\"\>", 
   ",", "\<\"gaGetSignature\"\>", ",", "\<\"gaGPMatrixPower\"\>", 
   ",", "\<\"gaGPPower\"\>", ",", "\<\"gaGradeInverse\"\>", 
   ",", "\<\"gaGradeNegate\"\>", ",", "\<\"gaGradesOnly\"\>", 
   ",", "\<\"gaHermitianConjugate\"\>", ",", "\<\"gaHermitianQ\"\>", 
   ",", "\<\"gaHodgeDual\"\>", ",", "\<\"gaHomogeneusGradeQ\"\>", 
   ",", "\<\"gaHomogeneusSubspaceBasis\"\>", ",", "\<\"gaI\"\>", 
   ",", "\<\"gaIdealBasisMultipliers\"\>", 
   ",", "\<\"gaIdealBasisReordering\"\>", 
   ",", "\<\"\
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\"\>", 
   ",", "\<\"gaIdempotentQ\"\>", ",", "\<\"gaIndexDown\"\>", 
   ",", "\<\"gaIndexSort\"\>", ",", "\<\"gaIndexUp\"\>", 
   ",", "\<\"gaInverse\"\>", ",", "\<\"gaInvertibleQ\"\>", 
   ",", "\<\"gaKillingMetric\"\>", ",", "\<\"gaLeftIdeal\"\>", 
   ",", "\<\"gaLeftIdealBasis\"\>", ",", "\<\"gaLinearQ\"\>", 
   ",", "\<\"gaListDefinedElementaryRepresentations\"\>", 
   ",", "\<\"gaMakeAlias\"\>", ",", "\<\"gaMatrixRepresentation\"\>", 
   ",", "\<\"gaMetric\"\>", ",", "\<\"gaMultivectorParityCheck\"\>", 
   ",", "\<\"gaNegativeSignatureIndexList\"\>", 
   ",", "\<\"gaNonCommutativeMonomialOrder\"\>", 
   ",", "\<\"gaNorm2CliffordConjugateSigned\"\>", 
   ",", "\<\"gaNorm2ReverseSigned\"\>", ",", "\<\"gaNormalize\"\>", 
   ",", "\<\"gaNormCliffordConjugateAbs\"\>", 
   ",", "\<\"gaNormDeterminant\"\>", ",", "\<\"gaNormHermitian\"\>", 
   ",", "\<\"gaNormOfCoefficients\"\>", ",", "\<\"gaNormReverseAbs\"\>", 
   ",", "\<\"gaNotation\"\>", ",", "\<\"gaOPMatrixPower\"\>", 
   ",", "\<\"gaOPPower\"\>", ",", "\<\"gaOptionCheck\"\>", 
   ",", "\<\"gaOrderedQ\"\>", ",", "\<\"gaOrdering\"\>", 
   ",", "\<\"gaOrthonormalBasis\"\>", ",", "\<\"gaOuterMatrixProduct\"\>", 
   ",", "\<\"gaParameterSeries\"\>", ",", "\<\"gaPE\"\>", 
   ",", "\<\"gaPlainRepresentation\"\>", ",", "\<\"gaPrimitiveIdempotent\"\>",
    ",", "\<\"gaPrincipalInvolution\"\>", ",", "\<\"gaProductExpand\"\>", 
   ",", "\<\"gaProductPairExpand\"\>", ",", "\<\"gaQuaternionicConjugate\"\>",
    ",", "\<\"gaRadonHurwitzNumber\"\>", ",", "\<\"gaRandomBasis\"\>", 
   ",", "\<\"gaRandomMultivector\"\>", ",", "\<\"gaReciprocalBasis\"\>", 
   ",", "\<\"gaReciprocalVectors\"\>", ",", "\<\"gaReplaceDivisionRing\"\>", 
   ",", "\<\"gaReverse\"\>", ",", "\<\"gaRunningAlgebra\"\>", 
   ",", "\<\"gaRunningOrdering\"\>", 
   ",", "\<\"gaSemisimpleAlgebraExtension\"\>", 
   ",", "\<\"gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\"\>", 
   ",", "\<\"gaSeries\"\>", ",", "\<\"gaSeriesData\"\>", 
   ",", "\<\"gaSetCommutative\"\>", ",", "\<\"gaSetLinear\"\>", 
   ",", "\<\"gaSetNonCommutative\"\>", ",", "\<\"gaSin\"\>", 
   ",", "\<\"gaSinh\"\>", ",", "\<\"gaSort\"\>", ",", "\<\"gaSpinor\"\>", 
   ",", "\<\"gaSpinorHalf\"\>", ",", "\<\"gaSpinorIdempotent\"\>", 
   ",", "\<\"gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\"\>", 
   ",", "\<\"gaSqrt\"\>", ",", "\<\"gaStructureConstant\"\>", 
   ",", "\<\"gaTan\"\>", ",", "\<\"gaTanh\"\>", 
   ",", "\<\"gaTensorProduct\"\>", ",", "\<\"gaTestIndexOrdering\"\>", 
   ",", "\<\"gaToMatrixRepresentation\"\>", ",", "\<\"gaToTensorProduct\"\>", 
   ",", "\<\"gaTransformation\"\>", ",", "\<\"gaTransformationMatrix\"\>", 
   ",", "\<\"gaVariables\"\>", ",", "\<\"gaVectorSpaceDimension\"\>", 
   ",", "\<\"gaVersorQ\"\>", ",", "\<\"gaVersorToSumOfBlades\"\>", 
   ",", "\<\"gaZassenhausCoefficient\"\>", ",", "\<\"gaZassenhausSeries\"\>", 
   ",", "\<\"gaZassenhausSeriesData\"\>", ",", "\<\"gbLeadingCoefficient\"\>",
    ",", "\<\"gbLeadingMonomial\"\>", ",", "\<\"gbLeadingTerm\"\>", 
   ",", "\<\"GeometricProduct\"\>", ",", "\<\"GP\"\>", 
   ",", "\<\"HermitianOnly\"\>", ",", "\<\"InnerProduct\"\>", 
   ",", "\<\"InvolutionPosition\"\>", ",", "\<\"Involutions\"\>", 
   ",", "\<\"IP\"\>", ",", "\<\"LC\"\>", ",", "\<\"LeftContract\"\>", 
   ",", "\<\"MatrixOuterProductOrder\"\>", 
   ",", "\<\"MissingForwardDeclarations\"\>", ",", "\<\"MV\"\>", 
   ",", "\<\"mvDownUp\"\>", ",", "\<\"mvPoint\"\>", 
   ",", "\<\"mvZeroGradeQ\"\>", ",", "\<\"NextVector\"\>", 
   ",", "\<\"NumberOfPrimitiveFactors\"\>", ",", "\<\"OmitGrades\"\>", 
   ",", "\<\"OP\"\>", ",", "\<\"OuterProduct\"\>", ",", "\<\"OutputType\"\>", 
   ",", "\<\"QuaternionIsomorphismRules\"\>", ",", "\<\"RC\"\>", 
   ",", "\<\"ReductionOrder\"\>", ",", "\<\"RightContract\"\>", 
   ",", "\<\"ShowStatus\"\>", ",", "\<\"SignChangeGrades\"\>", 
   ",", "\<\"StartingElement\"\>", ",", "\<\"StringListPrintableString\"\>", 
   ",", "\<\"TargetMatrices\"\>", ",", "\<\"TheContextSymbolList\"\>", 
   ",", "\<\"ZeroTolerance\"\>", 
   ",", "\<\"\[DoubleStruckD]\[DoubleStruckE]\"\>", 
   ",", "\<\"\[DoubleStruckE]\"\>", ",", "\<\"$GAPackageContext\"\>", 
   ",", "\<\"$gaPackageHasBeenLoaded\"\>", 
   ",", "\<\"$GAPackageInputAliases\"\>", 
   ",", "\<\"$GAPackageOnlyContextPath\"\>", ",", "\<\"$gaPackageOptions\"\>",
    ",", "\<\"$GAPackagePrivateContext\"\>", 
   ",", "\<\"$GAUnprotectionList\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[961]=",ExpressionUUID->"d5ad4b85-39fe-4290-ab2f-2de22e4b1940"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackagePrivateContext", "<>", " ", "\"\<*\>\""}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[962]:=",ExpressionUUID->"eb3e8177-ef22-4af0-a3c5-b7103cf3d8f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"A\"\>", ",", "\<\"a1\"\>", 
   ",", "\<\"a1$\"\>", ",", "\<\"a2\"\>", ",", "\<\"a2$\"\>", 
   ",", "\<\"a3\"\>", ",", "\<\"a3$\"\>", ",", "\<\"aa\"\>", 
   ",", "\<\"aAlgebra\"\>", ",", "\<\"aAlgebra$\"\>", ",", "\<\"aa$\"\>", 
   ",", "\<\"accepted\"\>", ",", "\<\"acl\"\>", ",", "\<\"acl$\"\>", 
   ",", "\<\"additionalTestFunction\"\>", ",", "\<\"addVectorList\"\>", 
   ",", "\<\"addVectorList$\"\>", ",", "\<\"al\"\>", ",", "\<\"al1\"\>", 
   ",", "\<\"al1$\"\>", ",", "\<\"al2\"\>", ",", "\<\"al2$\"\>", 
   ",", "\<\"alB\"\>", ",", "\<\"alB$\"\>", ",", "\<\"alc\"\>", 
   ",", "\<\"alc$\"\>", ",", "\<\"alg\"\>", ",", "\<\"algBoxes\"\>", 
   ",", "\<\"algebra\"\>", ",", "\<\"algebraBase\"\>", 
   ",", "\<\"algebraSeq\"\>", ",", "\<\"algebraSeq$\"\>", 
   ",", "\<\"algebra$\"\>", ",", "\<\"algIso\"\>", ",", "\<\"algIso$\"\>", 
   ",", "\<\"algRep\"\>", ",", "\<\"algRepRules\"\>", 
   ",", "\<\"algRepRules$\"\>", ",", "\<\"algRep$\"\>", ",", "\<\"algTP\"\>", 
   ",", "\<\"algTP$\"\>", ",", "\<\"algTrueMinusAlgHelp\"\>", 
   ",", "\<\"algTrueMinusAlgHelp$\"\>", ",", "\<\"alg$\"\>", 
   ",", "\<\"aliasName\"\>", ",", "\<\"aliasReplacementRul\"\>", 
   ",", "\<\"all\"\>", ",", "\<\"allBasisInvDegLex\"\>", 
   ",", "\<\"allBasisInvDegLex$\"\>", ",", "\<\"allBlades\"\>", 
   ",", "\<\"allBlades$\"\>", ",", "\<\"allCl\"\>", ",", "\<\"allCl$\"\>", 
   ",", "\<\"allGrades\"\>", ",", "\<\"allGrades$\"\>", 
   ",", "\<\"allNonScalars\"\>", ",", "\<\"allNonScalars$\"\>", 
   ",", "\<\"allNonTrivialPairs\"\>", ",", "\<\"allNonTrivialPairs$\"\>", 
   ",", "\<\"allObtained\"\>", ",", "\<\"allObtained$\"\>", 
   ",", "\<\"allScalars\"\>", ",", "\<\"allScalars$\"\>", 
   ",", "\<\"allSpecRules1\"\>", ",", "\<\"allSpecRules1$\"\>", 
   ",", "\<\"allSpecRules2\"\>", ",", "\<\"allSpecRules2$\"\>", 
   ",", "\<\"allTable\"\>", ",", "\<\"allTable$\"\>", 
   ",", "\<\"allZeroTest\"\>", ",", "\<\"alout\"\>", ",", "\<\"alout$\"\>", 
   ",", "\<\"alP\"\>", ",", "\<\"alposition\"\>", ",", "\<\"alposition$\"\>", 
   ",", "\<\"alP$\"\>", ",", "\<\"alreadyCalculatedProducts\"\>", 
   ",", "\<\"alreadyCalculatedProductsAdoptedToSingle\"\>", 
   ",", "\<\"alreadyPrintedList\"\>", ",", "\<\"alreadyUsedColors\"\>", 
   ",", "\<\"alsty\"\>", ",", "\<\"alsty$\"\>", ",", "\<\"alvectors\"\>", 
   ",", "\<\"alvectors$\"\>", ",", "\<\"al$\"\>", ",", "\<\"aMethod\"\>", 
   ",", "\<\"aMethod$\"\>", ",", "\<\"answer\"\>", ",", "\<\"answerFin\"\>", 
   ",", "\<\"answerFin$\"\>", ",", "\<\"answerWithoutFreeVars\"\>", 
   ",", "\<\"answerWithoutFreeVars$\"\>", ",", "\<\"answer$\"\>", 
   ",", "\<\"any\"\>", ",", "\<\"any1\"\>", ",", "\<\"any1$\"\>", 
   ",", "\<\"any2\"\>", ",", "\<\"any2$\"\>", ",", "\<\"any3\"\>", 
   ",", "\<\"anycoef\"\>", ",", "\<\"anyCoef1\"\>", ",", "\<\"anyCoef1$\"\>", 
   ",", "\<\"anyCoef2\"\>", ",", "\<\"anyCoef2$\"\>", ",", "\<\"anycoef$\"\>",
    ",", "\<\"any$\"\>", ",", "\<\"ap1\"\>", ",", "\<\"ap1$\"\>", 
   ",", "\<\"ap2\"\>", ",", "\<\"ap2$\"\>", 
   ",", "\<\"applyQuaternionIsomorphismRule\"\>", ",", "\<\"ar\"\>", 
   ",", "\<\"arep\"\>", ",", "\<\"arep$\"\>", ",", "\<\"arg\"\>", 
   ",", "\<\"arg0\"\>", ",", "\<\"arg0$\"\>", ",", "\<\"arg1\"\>", 
   ",", "\<\"arg1$\"\>", ",", "\<\"arg2\"\>", ",", "\<\"arg2$\"\>", 
   ",", "\<\"argg1\"\>", ",", "\<\"argg1$\"\>", ",", "\<\"argg2\"\>", 
   ",", "\<\"argg2$\"\>", ",", "\<\"argggs\"\>", ",", "\<\"argggs$\"\>", 
   ",", "\<\"arggs\"\>", ",", "\<\"argh\"\>", ",", "\<\"argh$\"\>", 
   ",", "\<\"argsa\"\>", ",", "\<\"argsa$\"\>", ",", "\<\"arg$\"\>", 
   ",", "\<\"ar$\"\>", ",", "\<\"as\"\>", ",", "\<\"as1\"\>", 
   ",", "\<\"as1$\"\>", ",", "\<\"as2\"\>", ",", "\<\"as2$\"\>", 
   ",", "\<\"assoc\"\>", ",", "\<\"associationForm\"\>", 
   ",", "\<\"associationForm$\"\>", ",", "\<\"associationKeySortRules\"\>", 
   ",", "\<\"as$\"\>", ",", "\<\"aTemp\"\>", ",", "\<\"a$\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"B\"\>", ",", "\<\"b1\"\>", ",", "\<\"b1$\"\>", 
   ",", "\<\"base\"\>", ",", "\<\"baseBivectors\"\>", 
   ",", "\<\"baseElementInverse\"\>", ",", "\<\"baseElems\"\>", 
   ",", "\<\"baseElemsOfEachCoeff\"\>", ",", "\<\"baseElemsOfEachCoeff$\"\>", 
   ",", "\<\"baseElems$\"\>", ",", "\<\"baseProd\"\>", 
   ",", "\<\"baseProd$\"\>", ",", "\<\"baseSymbol\"\>", 
   ",", "\<\"baseSymbolN\"\>", ",", "\<\"baseSymbol$\"\>", 
   ",", "\<\"baseVectorRepresentation\"\>", 
   ",", "\<\"baseVectorRepresentation$\"\>", ",", "\<\"baseVectors\"\>", 
   ",", "\<\"baseVectors$\"\>", ",", "\<\"basisSymbol\"\>", 
   ",", "\<\"basisSymbol$\"\>", ",", "\<\"basisVectorsMultipliers\"\>", 
   ",", "\<\"basisVectorsMultipliers$\"\>", ",", "\<\"basisVectorsOrder\"\>", 
   ",", "\<\"basisVectorsOrder$\"\>", ",", "\<\"bb\"\>", ",", "\<\"bb$\"\>", 
   ",", "\<\"bCCb0\"\>", ",", "\<\"bCCb0$\"\>", ",", "\<\"bCCbI0\"\>", 
   ",", "\<\"bCCbI0$\"\>", ",", "\<\"be\"\>", ",", "\<\"be$\"\>", 
   ",", "\<\"bii\"\>", ",", "\<\"bii$\"\>", 
   ",", "\<\"bivectorsOfSpecialAlgebra\"\>", ",", "\<\"blade\"\>", 
   ",", "\<\"bladeVectors\"\>", ",", "\<\"bladeVectors$\"\>", 
   ",", "\<\"blade$\"\>", ",", "\<\"bnames\"\>", ",", "\<\"bnames$\"\>", 
   ",", "\<\"bs\"\>", ",", "\<\"bs$\"\>", ",", "\<\"bTemp\"\>", 
   ",", "\<\"b$\"\>", ",", "\<\"c\"\>", ",", "\<\"c1\"\>", 
   ",", "\<\"c1Name\"\>", ",", "\<\"c1Name$\"\>", ",", "\<\"c1$\"\>", 
   ",", "\<\"c2\"\>", ",", "\<\"c2Name\"\>", ",", "\<\"c2Name$\"\>", 
   ",", "\<\"c2$\"\>", ",", "\<\"c3\"\>", ",", "\<\"c3$\"\>", 
   ",", "\<\"candidateForUnit\"\>", ",", "\<\"candidateForUnit$\"\>", 
   ",", "\<\"candidates\"\>", ",", "\<\"cas\"\>", ",", "\<\"cas$\"\>", 
   ",", "\<\"catch\"\>", ",", "\<\"catch$\"\>", ",", "\<\"cc\"\>", 
   ",", "\<\"cc$\"\>", ",", "\<\"cf\"\>", ",", "\<\"cf$\"\>", 
   ",", "\<\"checkAssociationRepresentation\"\>", 
   ",", "\<\"checkFunction\"\>", ",", "\<\"checkValueRules\"\>", 
   ",", "\<\"checkValueRules$\"\>", ",", "\<\"chopTol\"\>", 
   ",", "\<\"chopTol$\"\>", ",", "\<\"cl\"\>", ",", "\<\"cleanRCHList\"\>", 
   ",", "\<\"co\"\>", ",", "\<\"code\"\>", ",", "\<\"code$\"\>", 
   ",", "\<\"coefficientFreedom\"\>", ",", "\<\"coefficientName\"\>", 
   ",", "\<\"coefficientName$\"\>", 
   ",", "\<\"coefficientReplacementRules\"\>", 
   ",", "\<\"coefficientReplacementRules$\"\>", ",", "\<\"coeffs\"\>", 
   ",", "\<\"coeffs$\"\>", ",", "\<\"coeffv1\"\>", ",", "\<\"coeffV1\"\>", 
   ",", "\<\"coeffv1$\"\>", ",", "\<\"coeffV1$\"\>", ",", "\<\"coefName\"\>", 
   ",", "\<\"col\"\>", ",", "\<\"collectOnDemand\"\>", 
   ",", "\<\"collectQ\"\>", ",", "\<\"colorDistanceFunction\"\>", 
   ",", "\<\"commutingPositiveBlades\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree\"\>", 
   ",", "\<\"commutingPositiveBladesProductFreeTransformed\"\>", 
   ",", "\<\"commutingPositiveBladesProductFreeTransformed$\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree$\"\>", 
   ",", "\<\"commutingPositiveBlades$\"\>", ",", "\<\"commutingWith3Pos\"\>", 
   ",", "\<\"commutingWith3Pos$\"\>", ",", "\<\"commutingWithAll\"\>", 
   ",", "\<\"commutingWithAllPos\"\>", ",", "\<\"commutingWithAllPos$\"\>", 
   ",", "\<\"commutingWithAll$\"\>", ",", "\<\"commutingWithElement\"\>", 
   ",", "\<\"comOrd\"\>", ",", "\<\"comOrdMod\"\>", ",", "\<\"comOrdMod$\"\>",
    ",", "\<\"comOrd$\"\>", 
   ",", "\<\"compactRepresentationReplacementRules\"\>", 
   ",", "\<\"CompileTo\"\>", ",", "\<\"complexSymb\"\>", 
   ",", "\<\"complexSymb$\"\>", ",", "\<\"componentsFromTestMV\"\>", 
   ",", "\<\"componentsFromTestMV$\"\>", ",", "\<\"confirmed\"\>", 
   ",", "\<\"confirmed$\"\>", ",", "\<\"contr\"\>", ",", "\<\"counter\"\>", 
   ",", "\<\"counter$\"\>", ",", "\<\"co$\"\>", ",", "\<\"c$\"\>", 
   ",", "\<\"d\"\>", ",", "\<\"dat\"\>", ",", "\<\"dat1\"\>", 
   ",", "\<\"dat2\"\>", ",", "\<\"data\"\>", ",", "\<\"data$\"\>", 
   ",", "\<\"decomposableMV\"\>", ",", "\<\"decomposableMV$\"\>", 
   ",", "\<\"decomposibleMV\"\>", ",", "\<\"def\"\>", ",", "\<\"defCol\"\>", 
   ",", "\<\"defCol$\"\>", ",", "\<\"definedGrades\"\>", 
   ",", "\<\"definedGrades$\"\>", ",", "\<\"definedReps\"\>", 
   ",", "\<\"definedReps$\"\>", ",", "\<\"defineInput\"\>", 
   ",", "\<\"defineMatrixRepresentationIdealBasisMethod\"\>", 
   ",", "\<\"defineMatrixRepresentationTensorProductMethod\"\>", 
   ",", "\<\"denom\"\>", ",", "\<\"denom$\"\>", ",", "\<\"det\"\>", 
   ",", "\<\"detSqrt\"\>", ",", "\<\"detSqrt$\"\>", ",", "\<\"det$\"\>", 
   ",", "\<\"dfs\"\>", ",", "\<\"dfsN\"\>", ",", "\<\"di\"\>", 
   ",", "\<\"diff\"\>", ",", "\<\"difference\"\>", ",", "\<\"difference$\"\>",
    ",", "\<\"differentialFormSymbolInputA\"\>", 
   ",", "\<\"differentialFormSymbolInputAlias\"\>", 
   ",", "\<\"differentialFormSymbolInputA$\"\>", 
   ",", "\<\"differentialFormSymbolName\"\>", ",", "\<\"diff$\"\>", 
   ",", "\<\"dim\"\>", ",", "\<\"dimensionFactor\"\>", 
   ",", "\<\"dimensionFactor$\"\>", ",", "\<\"dim$\"\>", 
   ",", "\<\"directLogTempMatrix\"\>", ",", "\<\"divisionRing\"\>", 
   ",", "\<\"divisionRingA\"\>", ",", "\<\"divisionRingA$\"\>", 
   ",", "\<\"divisionRingB\"\>", ",", "\<\"divisionRingB$\"\>", 
   ",", "\<\"divisionRingPrecomp\"\>", ",", "\<\"divisionRingPrecomp$\"\>", 
   ",", "\<\"divisionRingWithReplacementRules\"\>", 
   ",", "\<\"divisionRingWithReplacementRules$\"\>", 
   ",", "\<\"divisionRing$\"\>", ",", "\<\"di$\"\>", ",", "\<\"do\"\>", 
   ",", "\<\"downIndex\"\>", ",", "\<\"downIndexBase\"\>", 
   ",", "\<\"downIndex$\"\>", ",", "\<\"do$\"\>", ",", "\<\"du1\"\>", 
   ",", "\<\"du1$\"\>", ",", "\<\"du2\"\>", ",", "\<\"du2$\"\>", 
   ",", "\<\"duu\"\>", ",", "\<\"duu$\"\>", ",", "\<\"dynkinFactor\"\>", 
   ",", "\<\"dynkinFactor$\"\>", ",", "\<\"d$\"\>", ",", "\<\"el\"\>", 
   ",", "\<\"elem\"\>", ",", "\<\"elementaryTPAlgebras\"\>", 
   ",", "\<\"elementaryVRep\"\>", ",", "\<\"eliminateGrade\"\>", 
   ",", "\<\"eliminateGrade$\"\>", ",", "\<\"el$\"\>", ",", "\<\"eq\"\>", 
   ",", "\<\"eqs\"\>", ",", "\<\"eqsvV\"\>", ",", "\<\"eqsvV$\"\>", 
   ",", "\<\"eqs$\"\>", ",", "\<\"equalsSCase\"\>", 
   ",", "\<\"equalsSCase$\"\>", ",", "\<\"eq$\"\>", ",", "\<\"ex\"\>", 
   ",", "\<\"exceptHeads\"\>", ",", "\<\"exceptHeads$\"\>", 
   ",", "\<\"exExCC\"\>", ",", "\<\"exExCC$\"\>", 
   ",", "\<\"expandedBlade\"\>", ",", "\<\"expandedBlade$\"\>", 
   ",", "\<\"expandedExpr\"\>", ",", "\<\"expandedExpr$\"\>", 
   ",", "\<\"expandFunction\"\>", ",", "\<\"expandZasExp\"\>", 
   ",", "\<\"expansion\"\>", ",", "\<\"expansionOrder\"\>", 
   ",", "\<\"expansionOrder$\"\>", ",", "\<\"expansion$\"\>", 
   ",", "\<\"expArgs\"\>", ",", "\<\"expArgs$\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotentsAutomatic\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotentsAutomatic$\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents$\"\>", ",", "\<\"expr\"\>", 
   ",", "\<\"exprBeforeExpansion\"\>", ",", "\<\"expression\"\>", 
   ",", "\<\"exprExpanded\"\>", ",", "\<\"exprExpanded$\"\>", 
   ",", "\<\"exprList\"\>", ",", "\<\"exprList$\"\>", ",", "\<\"exprs\"\>", 
   ",", "\<\"exprSeparatedByFreeCoeffs\"\>", 
   ",", "\<\"exprSeparatedByFreeCoeffs$\"\>", ",", "\<\"exprToFactor\"\>", 
   ",", "\<\"exprToFactor$\"\>", ",", "\<\"exprtotest\"\>", 
   ",", "\<\"exprtotest$\"\>", ",", "\<\"expr$\"\>", 
   ",", "\<\"extractedBasisFromTestMV\"\>", 
   ",", "\<\"extractedBasisFromTestMV$\"\>", ",", "\<\"ex$\"\>", 
   ",", "\<\"f\"\>", ",", "\<\"factorIndex\"\>", ",", "\<\"factorIndex$\"\>", 
   ",", "\<\"factors\"\>", ",", "\<\"factors$\"\>", ",", "\<\"factorTerm\"\>",
    ",", "\<\"fe\"\>", ",", "\<\"feature\"\>", ",", "\<\"fe$\"\>", 
   ",", "\<\"ff\"\>", ",", "\<\"FFGGm1\"\>", ",", "\<\"FFGGm1$\"\>", 
   ",", "\<\"fictiveVars\"\>", ",", "\<\"fictiveVars$\"\>", 
   ",", "\<\"field\"\>", ",", "\<\"fieldOnly\"\>", 
   ",", "\<\"fieldReplacementRules\"\>", 
   ",", "\<\"fieldReplacementRulesGradeInversed\"\>", 
   ",", "\<\"fieldReplacementRulesGradeInversed$\"\>", 
   ",", "\<\"fieldReplacementRules$\"\>", ",", "\<\"filterNumbers\"\>", 
   ",", "\<\"fin\"\>", ",", "\<\"findAll\"\>", ",", "\<\"findAll$\"\>", 
   ",", "\<\"formalMV\"\>", ",", "\<\"formalMV$\"\>", 
   ",", "\<\"formSymbol\"\>", ",", "\<\"formSymbol$\"\>", 
   ",", "\<\"found\"\>", ",", "\<\"foundAlgebras\"\>", 
   ",", "\<\"foundAlgebras$\"\>", ",", "\<\"found$\"\>", 
   ",", "\<\"freeParamRules\"\>", ",", "\<\"freeParamRulesMissed\"\>", 
   ",", "\<\"freeParamRulesMissed$\"\>", ",", "\<\"freeParamRules$\"\>", 
   ",", "\<\"freeVars\"\>", ",", "\<\"freeVars$\"\>", ",", "\<\"fullBase\"\>",
    ",", "\<\"fun\"\>", ",", "\<\"f$\"\>", 
   ",", "\<\"gaAdjointForZassenhaus\"\>", 
   ",", "\<\"gaAlwaysTestInputIndexOrdering\"\>", 
   ",", "\<\"gaAssociationRepresentationClean\"\>", 
   ",", "\<\"gaCliffordConjugateGrades\"\>", ",", "\<\"gaCom\"\>", 
   ",", "\<\"gaDefaultMatrixRepresentationData\"\>", 
   ",", "\<\"gaDefineExpandedPairProduct\"\>", 
   ",", "\<\"gaDefineOrthonormalBasisMain\"\>", 
   ",", "\<\"gaDifferentialFormSymbolInputAlias\"\>", 
   ",", "\<\"gaDifferentialFormSymbolName\"\>", 
   ",", "\<\"gaElementaryAlgebraToMatrixRepresentationRules\"\>", 
   ",", "\<\"gaff\"\>", 
   ",", "\<\"gaFromMatrixRepresentationSparseNoQuaternions\"\>", 
   ",", "\<\"gaGeneralBasisSymbolInputAlias\"\>", 
   ",", "\<\"gaGradeInverseGrades\"\>", 
   ",", "\<\"gaInternalMultivectorRepresentation\"\>", 
   ",", "\<\"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ\"\>", 
   ",", "\<\"gaMemorizeBasisElementProduct\"\>", 
   ",", "\<\"gaMethodOptionContainer\"\>", ",", "\<\"gaOptionValue\"\>", 
   ",", "\<\"gaOrthonormalBasisSymbolInputAlias\"\>", 
   ",", "\<\"gaOrthonormalBasisSymbolName\"\>", ",", "\<\"gap\"\>", 
   ",", "\<\"gaPassMethodOptionValue\"\>", 
   ",", "\<\"gaPrecomputedPairProduct\"\>", ",", "\<\"gaPureLinearity\"\>", 
   ",", "\<\"gap$\"\>", ",", "\<\"gaq\"\>", ",", "\<\"gaq$\"\>", 
   ",", "\<\"gar\"\>", ",", "\<\"gaRA\"\>", ",", "\<\"gaRA$\"\>", 
   ",", "\<\"gaReverseGrades\"\>", ",", "\<\"gar$\"\>", 
   ",", "\<\"gaSqrtN\"\>", ",", "\<\"gaTensorProductI\"\>", 
   ",", "\<\"gaValidVersionQ\"\>", ",", "\<\"gblt\"\>", ",", "\<\"gblt$\"\>", 
   ",", "\<\"generalBasisSymbolInputAlias\"\>", 
   ",", "\<\"generalDefaultMatrixRepresentationSetting\"\>", 
   ",", "\<\"generalMV\"\>", ",", "\<\"generalMVexpanded\"\>", 
   ",", "\<\"generalMVexpanded$\"\>", ",", "\<\"generalOpts\"\>", 
   ",", "\<\"generalOpts$\"\>", ",", "\<\"generateCommutatorForm\"\>", 
   ",", "\<\"genericAnswer\"\>", ",", "\<\"genericAnswer$\"\>", 
   ",", "\<\"genericMV\"\>", ",", "\<\"genericMV$\"\>", 
   ",", "\<\"genParam\"\>", ",", "\<\"genParam$\"\>", ",", "\<\"genVec\"\>", 
   ",", "\<\"genVec$\"\>", ",", "\<\"getBase\"\>", 
   ",", "\<\"getGradeHelp\"\>", ",", "\<\"getRCHFactor\"\>", 
   ",", "\<\"gp\"\>", ",", "\<\"gp$\"\>", ",", "\<\"gr\"\>", 
   ",", "\<\"grade\"\>", ",", "\<\"gradeList\"\>", 
   ",", "\<\"gradeParityCheck\"\>", ",", "\<\"grades\"\>", 
   ",", "\<\"gradesForOutput\"\>", ",", "\<\"gradesForOutput$\"\>", 
   ",", "\<\"gradesOnly\"\>", ",", "\<\"gradesOnly$\"\>", 
   ",", "\<\"grades$\"\>", ",", "\<\"grade$\"\>", ",", "\<\"gro\"\>", 
   ",", "\<\"grOnly\"\>", ",", "\<\"groupByGrade\"\>", 
   ",", "\<\"grouping\"\>", ",", "\<\"grouping$\"\>", ",", "\<\"gro$\"\>", 
   ",", "\<\"grRequested\"\>", ",", "\<\"gr$\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"h14\"\>", ",", "\<\"h14$\"\>", ",", "\<\"h4h4\"\>", 
   ",", "\<\"h4h4$\"\>", ",", "\<\"half1\"\>", ",", "\<\"half1$\"\>", 
   ",", "\<\"hd\"\>", ",", "\<\"hd$\"\>", ",", "\<\"hermitianCase\"\>", 
   ",", "\<\"hermitianCase$\"\>", ",", "\<\"hh\"\>", ",", "\<\"hh$\"\>", 
   ",", "\<\"homogeneusElements\"\>", ",", "\<\"homogeneusElements$\"\>", 
   ",", "\<\"HyperbolicUnit\"\>", ",", "\<\"hyperbolicUnits\"\>", 
   ",", "\<\"hyperbolicUnits$\"\>", ",", "\<\"h$\"\>", ",", "\<\"i\"\>", 
   ",", "\<\"i1\"\>", ",", "\<\"i1$\"\>", ",", "\<\"i2\"\>", 
   ",", "\<\"i2$\"\>", ",", "\<\"idealBasis\"\>", ",", "\<\"idealBasisA\"\>", 
   ",", "\<\"idealBasisAUnordered\"\>", ",", "\<\"idealBasisAUnordered$\"\>", 
   ",", "\<\"idealBasisA$\"\>", ",", "\<\"idealBasisB\"\>", 
   ",", "\<\"idealBasisBUnordered\"\>", ",", "\<\"idealBasisBUnordered$\"\>", 
   ",", "\<\"idealBasisB$\"\>", ",", "\<\"idealBasisMultipliers\"\>", 
   ",", "\<\"idealBasisMultipliers$\"\>", ",", "\<\"idealBasisOrder\"\>", 
   ",", "\<\"idealBasisOrder$\"\>", ",", "\<\"idealBasis$\"\>", 
   ",", "\<\"idempotent\"\>", ",", "\<\"idempotentData\"\>", 
   ",", "\<\"idempotentData$\"\>", ",", "\<\"idempotentList\"\>", 
   ",", "\<\"idempotentList$\"\>", ",", "\<\"idempotent$\"\>", 
   ",", "\<\"idMatrix\"\>", ",", "\<\"idMatrix$\"\>", ",", "\<\"ifPrint\"\>", 
   ",", "\<\"ignoreMe\"\>", ",", "\<\"ignoreMe$\"\>", ",", "\<\"iI\"\>", 
   ",", "\<\"imaginaryIReplacement\"\>", 
   ",", "\<\"imaginaryIReplacement$\"\>", ",", "\<\"imaginaryUnits\"\>", 
   ",", "\<\"imaginaryUnits$\"\>", ",", "\<\"in\"\>", ",", "\<\"inc\"\>", 
   ",", "\<\"inc$\"\>", ",", "\<\"ind\"\>", ",", "\<\"ind1\"\>", 
   ",", "\<\"ind1$\"\>", ",", "\<\"ind2\"\>", ",", "\<\"ind2$\"\>", 
   ",", "\<\"indd\"\>", ",", "\<\"indD\"\>", ",", "\<\"indd$\"\>", 
   ",", "\<\"indD$\"\>", ",", "\<\"inDegLexOrder\"\>", 
   ",", "\<\"inDegLexOrder$\"\>", ",", "\<\"index2Repl\"\>", 
   ",", "\<\"index2Repl$\"\>", ",", "\<\"indexCases\"\>", 
   ",", "\<\"indexCases$\"\>", ",", "\<\"indexList\"\>", 
   ",", "\<\"indexListWithSortMark\"\>", 
   ",", "\<\"indexListWithSortMark$\"\>", ",", "\<\"indexList$\"\>", 
   ",", "\<\"indexPairs\"\>", ",", "\<\"indexPairs$\"\>", 
   ",", "\<\"indexRange\"\>", ",", "\<\"indexRange$\"\>", 
   ",", "\<\"indices\"\>", ",", "\<\"indices$\"\>", ",", "\<\"indown\"\>", 
   ",", "\<\"indown$\"\>", ",", "\<\"indRange\"\>", ",", "\<\"indSet\"\>", 
   ",", "\<\"indSetReplRul\"\>", ",", "\<\"indToList\"\>", 
   ",", "\<\"indu\"\>", ",", "\<\"indU\"\>", ",", "\<\"indu$\"\>", 
   ",", "\<\"indU$\"\>", ",", "\<\"ind$\"\>", ",", "\<\"inEx\"\>", 
   ",", "\<\"inEx$\"\>", ",", "\<\"inf0\"\>", ",", "\<\"infn\"\>", 
   ",", "\<\"initialSeq\"\>", ",", "\<\"initialSeq$\"\>", 
   ",", "\<\"inpOpt\"\>", ",", "\<\"inpOpt$\"\>", 
   ",", "\<\"intesectionIJ\"\>", ",", "\<\"intesectionIJ$\"\>", 
   ",", "\<\"inup\"\>", ",", "\<\"inup$\"\>", 
   ",", "\<\"invdeglexIndexList\"\>", ",", "\<\"inversedMV\"\>", 
   ",", "\<\"inversedMV$\"\>", ",", "\<\"inversedRules\"\>", 
   ",", "\<\"inversedTheBlade\"\>", ",", "\<\"inversedTheBlade$\"\>", 
   ",", "\<\"inverseKillingMetric\"\>", ",", "\<\"inverseKillingMetric$\"\>", 
   ",", "\<\"inversePseudoscalar\"\>", ",", "\<\"inversePseudoscalar$\"\>", 
   ",", "\<\"involutionDet\"\>", ",", "\<\"involutionInverse\"\>", 
   ",", "\<\"invPos\"\>", ",", "\<\"invPos$\"\>", 
   ",", "\<\"inWhichCommand\"\>", ",", "\<\"inWhichCommand$\"\>", 
   ",", "\<\"in$\"\>", ",", "\<\"isomorphismPreRules\"\>", 
   ",", "\<\"isomorphismRules\"\>", ",", "\<\"iterators\"\>", 
   ",", "\<\"iterators$\"\>", ",", "\<\"iterRange\"\>", 
   ",", "\<\"iterRange$\"\>", ",", "\<\"i$\"\>", ",", "\<\"j\"\>", 
   ",", "\<\"j1\"\>", ",", "\<\"j1$\"\>", ",", "\<\"j2\"\>", 
   ",", "\<\"j2$\"\>", ",", "\<\"jJ\"\>", ",", "\<\"j$\"\>", ",", "\<\"k\"\>",
    ",", "\<\"keyMV\"\>", ",", "\<\"keyMV$\"\>", ",", "\<\"keyReplace\"\>", 
   ",", "\<\"keyReplaceAndSort\"\>", ",", "\<\"keysB\"\>", 
   ",", "\<\"knownfactor\"\>", ",", "\<\"knownFactor\"\>", 
   ",", "\<\"knownfactor$\"\>", ",", "\<\"knownFactor$\"\>", ",", "\<\"l\"\>",
    ",", "\<\"largestAbsCoef\"\>", ",", "\<\"largestAbsCoef$\"\>", 
   ",", "\<\"leftideal\"\>", ",", "\<\"leftIdeal\"\>", 
   ",", "\<\"leftIdeal$\"\>", ",", "\<\"len\"\>", ",", "\<\"lena1\"\>", 
   ",", "\<\"lena1$\"\>", ",", "\<\"lena2\"\>", ",", "\<\"lena2$\"\>", 
   ",", "\<\"lengthOfDivisionRing\"\>", ",", "\<\"lengthOfDivisionRing$\"\>", 
   ",", "\<\"lengthOfIdealBasis\"\>", ",", "\<\"lengthOfIdealBasis$\"\>", 
   ",", "\<\"lengthOfMutuallyAnihilatingIdempotents\"\>", 
   ",", "\<\"lengthOfMutuallyAnihilatingIdempotents$\"\>", 
   ",", "\<\"len$\"\>", ",", "\<\"logTempMatrix\"\>", ",", "\<\"ls\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"makeAlias\"\>", 
   ",", "\<\"makeContractionPairsForVersorBlade\"\>", 
   ",", "\<\"makeProductTerm\"\>", ",", "\<\"makeReplRule\"\>", 
   ",", "\<\"makeRule\"\>", ",", "\<\"makeTermForBlade2Versor\"\>", 
   ",", "\<\"makeTermForVersor2Blade\"\>", ",", "\<\"mark\"\>", 
   ",", "\<\"marks\"\>", ",", "\<\"marks$\"\>", ",", "\<\"mark$\"\>", 
   ",", "\<\"mat\"\>", ",", "\<\"matrix\"\>", 
   ",", "\<\"matrixOuterProductOrder\"\>", 
   ",", "\<\"matrixOuterProductOrder$\"\>", ",", "\<\"matrixRepr\"\>", 
   ",", "\<\"matrixRepresentation\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsA\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsANorepl\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsANorepl$\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsA$\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsB\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsB$\"\>", 
   ",", "\<\"matrixRepr$\"\>", ",", "\<\"matrProd\"\>", 
   ",", "\<\"matrProd$\"\>", ",", "\<\"mat$\"\>", ",", "\<\"max\"\>", 
   ",", "\<\"maxCoef\"\>", ",", "\<\"maxCoef$\"\>", ",", "\<\"maxGrade\"\>", 
   ",", "\<\"maxGrade$\"\>", ",", "\<\"maxIter\"\>", ",", "\<\"maxOrder\"\>", 
   ",", "\<\"maxOrder$\"\>", ",", "\<\"max$\"\>", 
   ",", "\<\"memorizeProducts\"\>", ",", "\<\"method\"\>", 
   ",", "\<\"methodName\"\>", ",", "\<\"methodOpts\"\>", 
   ",", "\<\"methodOpts$\"\>", ",", "\<\"method$\"\>", ",", "\<\"msg\"\>", 
   ",", "\<\"msgHelp\"\>", ",", "\<\"msgHelp$\"\>", ",", "\<\"msg$\"\>", 
   ",", "\<\"mult\"\>", ",", "\<\"multIndex\"\>", ",", "\<\"multIndex$\"\>", 
   ",", "\<\"multipleApplyQuaternionIsomorphismRules\"\>", 
   ",", "\<\"mult$\"\>", ",", "\<\"mutuallyAnihilatingIdempotents\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotentsFull\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotentsFull$\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotents$\"\>", ",", "\<\"mv\"\>", 
   ",", "\<\"mvAntisymmetricProductSignatureMapC\"\>", 
   ",", "\<\"mvDownUpToAssociationRules\"\>", 
   ",", "\<\"mvIndexToBinaryLikeRepresentationC\"\>", 
   ",", "\<\"mvInvDegLexSortedIndexList\"\>", ",", "\<\"mvMu\"\>", 
   ",", "\<\"mvMuS\"\>", ",", "\<\"mvName\"\>", ",", "\<\"mvName$\"\>", 
   ",", "\<\"mvNonCommutativeDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvLexC\"\>", 
   ",", "\<\"mvNonCommutativeInvRevLexC\"\>", 
   ",", "\<\"mvNonCommutativeLexC\"\>", 
   ",", "\<\"mvNonCommutativeRevLexC\"\>", ",", "\<\"mvOfDualTransform\"\>", 
   ",", "\<\"mvOfDualTransform$\"\>", ",", "\<\"mvProductSignatureMapC\"\>", 
   ",", "\<\"mvSetSymmetricDifference\"\>", 
   ",", "\<\"mvSignatureOfIncreasingPermutation\"\>", ",", "\<\"mv$\"\>", 
   ",", "\<\"myexressions\"\>", ",", "\<\"myStrings\"\>", 
   ",", "\<\"mySum\"\>", ",", "\<\"mySum$\"\>", ",", "\<\"myTable\"\>", 
   ",", "\<\"myTable$\"\>", ",", "\<\"myUnitize\"\>", ",", "\<\"n\"\>", 
   ",", "\<\"name\"\>", ",", "\<\"name$\"\>", ",", "\<\"nbames\"\>", 
   ",", "\<\"nbames$\"\>", ",", "\<\"nestedQuaternionIsomorphismRule\"\>", 
   ",", "\<\"nestNumber\"\>", ",", "\<\"nestNumber$\"\>", 
   ",", "\<\"newAl\"\>", ",", "\<\"newAl$\"\>", ",", "\<\"newColor\"\>", 
   ",", "\<\"newColor$\"\>", ",", "\<\"newpair\"\>", ",", "\<\"newRange\"\>", 
   ",", "\<\"newRange$\"\>", ",", "\<\"newRep\"\>", ",", "\<\"newRep$\"\>", 
   ",", "\<\"nextAccept\"\>", ",", "\<\"nonCommutingQuaternionLike\"\>", 
   ",", "\<\"nonCommutingQuaternionLike$\"\>", 
   ",", "\<\"nonCommutingWithFirstList\"\>", 
   ",", "\<\"nonCommutingWithFirstList$\"\>", ",", "\<\"nonNegativeQ\"\>", 
   ",", "\<\"nonScalars\"\>", ",", "\<\"nonScalarsFin\"\>", 
   ",", "\<\"nonScalarsFin$\"\>", ",", "\<\"nonScalars$\"\>", 
   ",", "\<\"nontrivialEntries\"\>", ",", "\<\"nontrivialEntries$\"\>", 
   ",", "\<\"nonzeroQ\"\>", ",", "\<\"normalizedBlade\"\>", 
   ",", "\<\"normalizedBlade$\"\>", ",", "\<\"normType\"\>", 
   ",", "\<\"normType$\"\>", ",", "\<\"notOption\"\>", ",", "\<\"nsq\"\>", 
   ",", "\<\"nsq$\"\>", ",", "\<\"num\"\>", ",", "\<\"numberConjugate\"\>", 
   ",", "\<\"numberConjugate$\"\>", ",", "\<\"numberOfIdempotents\"\>", 
   ",", "\<\"numberOfIdempotents$\"\>", 
   ",", "\<\"numberOfPrimitiveIdempotents\"\>", ",", "\<\"numerat\"\>", 
   ",", "\<\"numerat$\"\>", ",", "\<\"num$\"\>", ",", "\<\"n$\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"of\"\>", ",", "\<\"of$\"\>", 
   ",", "\<\"oneGradeRule\"\>", ",", "\<\"oneStepCliffordDecompose\"\>", 
   ",", "\<\"op\"\>", ",", "\<\"opar\"\>", ",", "\<\"opar$\"\>", 
   ",", "\<\"opConj\"\>", ",", "\<\"opElement\"\>", ",", "\<\"opElement$\"\>",
    ",", "\<\"opMatrix\"\>", ",", "\<\"opMatrix$\"\>", 
   ",", "\<\"optimizedMultiplicationOrder\"\>", 
   ",", "\<\"optimizedMultiplicationOrder$\"\>", ",", "\<\"optionName\"\>", 
   ",", "\<\"opts\"\>", ",", "\<\"opts$\"\>", ",", "\<\"op$\"\>", 
   ",", "\<\"ord\"\>", ",", "\<\"order\"\>", ",", "\<\"orderAttempt\"\>", 
   ",", "\<\"orderAttempt$\"\>", ",", "\<\"orderedQCommutative\"\>", 
   ",", "\<\"orderedQNoncommutative\"\>", ",", "\<\"ordering\"\>", 
   ",", "\<\"order$\"\>", ",", "\<\"ord$\"\>", 
   ",", "\<\"orthogonalBaseElements\"\>", 
   ",", "\<\"orthogonalBasisElements\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputA\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputAlias\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputA$\"\>", 
   ",", "\<\"orthonormalBasisSymbolName\"\>", ",", "\<\"other\"\>", 
   ",", "\<\"other1\"\>", ",", "\<\"other1$\"\>", ",", "\<\"other2\"\>", 
   ",", "\<\"other2$\"\>", ",", "\<\"other$\"\>", ",", "\<\"outerCtx\"\>", 
   ",", "\<\"outerP\"\>", ",", "\<\"outputType\"\>", 
   ",", "\<\"outputType$\"\>", ",", "\<\"outputVectors\"\>", 
   ",", "\<\"outputVectors$\"\>", ",", "\<\"o$\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"pair\"\>", ",", "\<\"pairs\"\>", ",", "\<\"pfd\"\>", 
   ",", "\<\"pfdProto\"\>", ",", "\<\"pfdProto$\"\>", ",", "\<\"pfd$\"\>", 
   ",", "\<\"pfi\"\>", ",", "\<\"pfiProto\"\>", ",", "\<\"pfiProto$\"\>", 
   ",", "\<\"pfi$\"\>", ",", "\<\"phaseFactorBlade2Versor\"\>", 
   ",", "\<\"phaseFactorVersor2Blade\"\>", ",", "\<\"phaseVersorBlade\"\>", 
   ",", "\<\"pickNextColor\"\>", ",", "\<\"pickNextRandomColor\"\>", 
   ",", "\<\"playMV\"\>", ",", "\<\"playMV$\"\>", ",", "\<\"po\"\>", 
   ",", "\<\"poEx\"\>", ",", "\<\"poEx$\"\>", ",", "\<\"point\"\>", 
   ",", "\<\"positiveBlades\"\>", ",", "\<\"positiveBlades$\"\>", 
   ",", "\<\"positiveQ\"\>", ",", "\<\"possibleSolutions\"\>", 
   ",", "\<\"possibleSolutions$\"\>", ",", "\<\"po$\"\>", ",", "\<\"pp\"\>", 
   ",", "\<\"precomputedInput\"\>", ",", "\<\"precomputedInput$\"\>", 
   ",", "\<\"precomputedProductComponents\"\>", 
   ",", "\<\"precomputedProductComponents$\"\>", 
   ",", "\<\"predefinedColorList\"\>", ",", "\<\"preReadMessage\"\>", 
   ",", "\<\"prevRules\"\>", ",", "\<\"prevRules$\"\>", 
   ",", "\<\"privateCtx\"\>", ",", "\<\"prod\"\>", 
   ",", "\<\"productAlgebra\"\>", ",", "\<\"productIndex\"\>", 
   ",", "\<\"productMatrices\"\>", ",", "\<\"productMatrices$\"\>", 
   ",", "\<\"productSignatureMap\"\>", ",", "\<\"productsOfFound\"\>", 
   ",", "\<\"productsOfFound$\"\>", ",", "\<\"productWithPrototype\"\>", 
   ",", "\<\"productWithPrototype$\"\>", ",", "\<\"prod$\"\>", 
   ",", "\<\"prototype\"\>", ",", "\<\"prototypes\"\>", 
   ",", "\<\"prototypes$\"\>", ",", "\<\"prototype$\"\>", ",", "\<\"ps\"\>", 
   ",", "\<\"pseudoscalar\"\>", ",", "\<\"pseudoscalarMagnitude\"\>", 
   ",", "\<\"pseudoscalarMagnitude$\"\>", ",", "\<\"pseudoscalar$\"\>", 
   ",", "\<\"ps$\"\>", ",", "\<\"pt\"\>", ",", "\<\"ptr\"\>", 
   ",", "\<\"ptr$\"\>", ",", "\<\"pt$\"\>", ",", "\<\"p$\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"qp\"\>", ",", "\<\"qthpower\"\>", 
   ",", "\<\"qthpower$\"\>", ",", "\<\"qu\"\>", 
   ",", "\<\"quaternionFreeMatrix\"\>", ",", "\<\"quaternionFreeMatrix$\"\>", 
   ",", "\<\"quaternionReplacement\"\>", 
   ",", "\<\"quaternionReplacement$\"\>", ",", "\<\"quaternionUnits\"\>", 
   ",", "\<\"quaternionUnits$\"\>", ",", "\<\"quiet\"\>", 
   ",", "\<\"quiet$\"\>", ",", "\<\"qu$\"\>", ",", "\<\"q$\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"ra\"\>", ",", "\<\"raEx\"\>", 
   ",", "\<\"raEx$\"\>", ",", "\<\"rang\"\>", ",", "\<\"range\"\>", 
   ",", "\<\"range$\"\>", ",", "\<\"rawAnswer\"\>", ",", "\<\"rawAnswer$\"\>",
    ",", "\<\"ra$\"\>", ",", "\<\"reciprocalBase\"\>", 
   ",", "\<\"reciprocalBase$\"\>", ",", "\<\"reciprocalVectors\"\>", 
   ",", "\<\"reciprocVec\"\>", ",", "\<\"reciprocVec$\"\>", 
   ",", "\<\"recoprocalBaseBivectors\"\>", ",", "\<\"reductionAlgebras\"\>", 
   ",", "\<\"reductionInstruction\"\>", 
   ",", "\<\"reductionInstructionNo00\"\>", 
   ",", "\<\"reductionInstructionNo00$\"\>", 
   ",", "\<\"reductionInstruction$\"\>", ",", "\<\"reductionOrder\"\>", 
   ",", "\<\"reductionOrder$\"\>", ",", "\<\"relevantPairs\"\>", 
   ",", "\<\"relevantPairs$\"\>", ",", "\<\"relGrades\"\>", 
   ",", "\<\"relGrades$\"\>", ",", "\<\"rem\"\>", ",", "\<\"remaining\"\>", 
   ",", "\<\"remaining$\"\>", ",", "\<\"removeElems\"\>", 
   ",", "\<\"removeElems$\"\>", ",", "\<\"removeFunctionRules\"\>", 
   ",", "\<\"removeProductsOfElements\"\>", ",", "\<\"removeVectorList\"\>", 
   ",", "\<\"removeVectorList$\"\>", ",", "\<\"remPos\"\>", 
   ",", "\<\"remPos$\"\>", ",", "\<\"rep\"\>", ",", "\<\"replaceDR\"\>", 
   ",", "\<\"replaceDR$\"\>", ",", "\<\"replaceFieldElement\"\>", 
   ",", "\<\"replaceTensorProducts\"\>", 
   ",", "\<\"replaceTensorProducts$\"\>", ",", "\<\"replRules\"\>", 
   ",", "\<\"replRules$\"\>", ",", "\<\"repMatrix\"\>", 
   ",", "\<\"repMatrix$\"\>", ",", "\<\"repNames\"\>", 
   ",", "\<\"repNames$\"\>", ",", "\<\"repRules\"\>", 
   ",", "\<\"repRulesSetting\"\>", ",", "\<\"repRulesSetting$\"\>", 
   ",", "\<\"repRules$\"\>", ",", "\<\"repRuls\"\>", ",", "\<\"repRuls$\"\>", 
   ",", "\<\"rep$\"\>", ",", "\<\"requiredVersion\"\>", 
   ",", "\<\"requireOrdering\"\>", ",", "\<\"res\"\>", 
   ",", "\<\"restBasisParameters\"\>", ",", "\<\"restBasisParameters$\"\>", 
   ",", "\<\"restElems\"\>", ",", "\<\"restElems$\"\>", 
   ",", "\<\"restGrades\"\>", ",", "\<\"restGrades$\"\>", 
   ",", "\<\"restOpts\"\>", ",", "\<\"restOpts$\"\>", 
   ",", "\<\"restoredList\"\>", ",", "\<\"restoredList$\"\>", 
   ",", "\<\"resul\"\>", ",", "\<\"resultWithoutQuaternionRepl\"\>", 
   ",", "\<\"resultWithoutQuaternionRepl$\"\>", 
   ",", "\<\"resultWithQuaternionReplButWithoutIRepl\"\>", 
   ",", "\<\"resultWithQuaternionReplButWithoutIRepl$\"\>", 
   ",", "\<\"resul$\"\>", ",", "\<\"res$\"\>", 
   ",", "\<\"reverseCompactRepresentationReplacementRules\"\>", 
   ",", "\<\"rule\"\>", ",", "\<\"ruleListList\"\>", ",", "\<\"rules\"\>", 
   ",", "\<\"rulesForNonScalars\"\>", ",", "\<\"rulesForNonScalars$\"\>", 
   ",", "\<\"rulesMultScalarAssociation\"\>", 
   ",", "\<\"rulesPlusIntoAssociation\"\>", 
   ",", "\<\"rulesPlusMultScalarAssociation\"\>", 
   ",", "\<\"rulesScalarInsidePlusIntoAssociation\"\>", 
   ",", "\<\"rulesScalarIntoAssociation\"\>", ",", "\<\"r$\"\>", 
   ",", "\<\"s\"\>", ",", "\<\"S\"\>", ",", "\<\"s1\"\>", ",", "\<\"s1$\"\>", 
   ",", "\<\"s2pS2\"\>", ",", "\<\"s2pS2$\"\>", ",", "\<\"sa\"\>", 
   ",", "\<\"sameTestForUnion\"\>", ",", "\<\"sa$\"\>", ",", "\<\"sb\"\>", 
   ",", "\<\"scalars\"\>", ",", "\<\"scalars$\"\>", 
   ",", "\<\"scalarTerms\"\>", ",", "\<\"scalarTerms$\"\>", 
   ",", "\<\"scWm\"\>", ",", "\<\"scWm$\"\>", ",", "\<\"sd\"\>", 
   ",", "\<\"sd$\"\>", ",", "\<\"sel\"\>", ",", "\<\"selectedBE\"\>", 
   ",", "\<\"selectedBE$\"\>", ",", "\<\"selVector\"\>", 
   ",", "\<\"selVector$\"\>", ",", "\<\"semisimpleBlockPosition\"\>", 
   ",", "\<\"semisimpleBlockPosition$\"\>", 
   ",", "\<\"semisimpleClAlgebraQ\"\>", ",", "\<\"semisimpleQ\"\>", 
   ",", "\<\"semisimpleQ$\"\>", ",", "\<\"sEOM\"\>", 
   ",", "\<\"seriesType\"\>", ",", "\<\"seriesType$\"\>", 
   ",", "\<\"setSymDiff4TP\"\>", ",", "\<\"setSymDiff4TP$\"\>", 
   ",", "\<\"sf\"\>", ",", "\<\"sf$\"\>", 
   ",", "\<\"signatureSplittedSortedVectors\"\>", 
   ",", "\<\"signatureSplittedSortedVectors$\"\>", 
   ",", "\<\"signatureSplittedVectors\"\>", 
   ",", "\<\"signatureSplittedVectors$\"\>", ",", "\<\"signProdSigMap4TP\"\>",
    ",", "\<\"signProdSigMap4TP$\"\>", ",", "\<\"simplify\"\>", 
   ",", "\<\"simplify$\"\>", ",", "\<\"singleCoefficientSolve\"\>", 
   ",", "\<\"singleElementOuterMultiply\"\>", ",", "\<\"singlet\"\>", 
   ",", "\<\"singleton\"\>", ",", "\<\"singlet$\"\>", 
   ",", "\<\"smartColors\"\>", ",", "\<\"sol\"\>", ",", "\<\"solAns\"\>", 
   ",", "\<\"solAns$\"\>", ",", "\<\"solEqs\"\>", ",", "\<\"solEqs$\"\>", 
   ",", "\<\"solPlay\"\>", ",", "\<\"solPlay$\"\>", 
   ",", "\<\"solTemplate\"\>", ",", "\<\"solTemplateSpec00\"\>", 
   ",", "\<\"solTemplateSpec00$\"\>", ",", "\<\"solTemplateSpec1\"\>", 
   ",", "\<\"solTemplateSpec1$\"\>", ",", "\<\"solTemplateSpec2\"\>", 
   ",", "\<\"solTemplateSpec2$\"\>", ",", "\<\"solTemplate$\"\>", 
   ",", "\<\"sol$\"\>", ",", "\<\"sortedAnswer\"\>", 
   ",", "\<\"sortedAnswer$\"\>", ",", "\<\"sortOP\"\>", 
   ",", "\<\"sortOP$\"\>", ",", "\<\"specAlgebra\"\>", 
   ",", "\<\"specAlgebra$\"\>", ",", "\<\"specAnswer\"\>", 
   ",", "\<\"specAnswer00\"\>", ",", "\<\"specAnswer00$\"\>", 
   ",", "\<\"specAnswer1\"\>", ",", "\<\"specAnswer1$\"\>", 
   ",", "\<\"specAnswer2\"\>", ",", "\<\"specAnswer2$\"\>", 
   ",", "\<\"specAnswer$\"\>", ",", "\<\"spinorCoeffs\"\>", 
   ",", "\<\"spinorCoeffs$\"\>", ",", "\<\"spinorIdempotent\"\>", 
   ",", "\<\"spinorIdempotent$\"\>", ",", "\<\"ssd\"\>", ",", "\<\"ssd$\"\>", 
   ",", "\<\"sSRules\"\>", ",", "\<\"sSRulesNegative\"\>", 
   ",", "\<\"sSRulesNegativeT\"\>", ",", "\<\"sSRulesNegativeT$\"\>", 
   ",", "\<\"sSRulesNegative$\"\>", ",", "\<\"sSRulesPositive\"\>", 
   ",", "\<\"sSRulesPositiveT\"\>", ",", "\<\"sSRulesPositiveT$\"\>", 
   ",", "\<\"sSRulesPositive$\"\>", ",", "\<\"sSRulesT\"\>", 
   ",", "\<\"sSRulesT$\"\>", ",", "\<\"sSRules$\"\>", ",", "\<\"sSSqrt\"\>", 
   ",", "\<\"sSSqrt$\"\>", ",", "\<\"startEl\"\>", 
   ",", "\<\"startElement\"\>", ",", "\<\"startElementOption\"\>", 
   ",", "\<\"startElementOption$\"\>", ",", "\<\"startElement$\"\>", 
   ",", "\<\"status\"\>", ",", "\<\"step\"\>", ",", "\<\"stepRev\"\>", 
   ",", "\<\"stringNames\"\>", ",", "\<\"stringNames$\"\>", 
   ",", "\<\"stS\"\>", ",", "\<\"stSs2pS2\"\>", ",", "\<\"stSs2pS2$\"\>", 
   ",", "\<\"stS$\"\>", ",", "\<\"sty\"\>", ",", "\<\"sty$\"\>", 
   ",", "\<\"submethodBVA\"\>", ",", "\<\"submethodBVA$\"\>", 
   ",", "\<\"subsRules\"\>", ",", "\<\"subsRules$\"\>", ",", "\<\"sum\"\>", 
   ",", "\<\"sum$\"\>", ",", "\<\"sym\"\>", 
   ",", "\<\"symbolicCoefficientsOfTestMV\"\>", 
   ",", "\<\"symbolicCoefficientsOfTestMV$\"\>", ",", "\<\"symbolName\"\>", 
   ",", "\<\"symbolName$\"\>", ",", "\<\"synm\"\>", ",", "\<\"synm$\"\>", 
   ",", "\<\"s$\"\>", ",", "\<\"S$\"\>", ",", "\<\"t\"\>", ",", "\<\"tag\"\>",
    ",", "\<\"tag$\"\>", ",", "\<\"takeMe\"\>", ",", "\<\"takeMe$\"\>", 
   ",", "\<\"target\"\>", ",", "\<\"target$\"\>", ",", "\<\"temp\"\>", 
   ",", "\<\"tempC\"\>", ",", "\<\"tempC$\"\>", ",", "\<\"tempvar\"\>", 
   ",", "\<\"tempvar$\"\>", ",", "\<\"temp$\"\>", 
   ",", "\<\"tensorProductIsomorphicToAlgebra\"\>", ",", "\<\"term\"\>", 
   ",", "\<\"termsToTake\"\>", ",", "\<\"termsToTake$\"\>", 
   ",", "\<\"term$\"\>", ",", "\<\"testAlgebra\"\>", 
   ",", "\<\"testCoefficients\"\>", ",", "\<\"testCoefficients$\"\>", 
   ",", "\<\"testFunction\"\>", ",", "\<\"testIndexUnion\"\>", 
   ",", "\<\"testList\"\>", ",", "\<\"testMV\"\>", 
   ",", "\<\"testMVforTransformation\"\>", 
   ",", "\<\"testMVforTransformation$\"\>", ",", "\<\"testMV$\"\>", 
   ",", "\<\"testOptionAdjointTransformation\"\>", ",", "\<\"testResult\"\>", 
   ",", "\<\"testResult$\"\>", ",", "\<\"tf\"\>", ",", "\<\"tf$\"\>", 
   ",", "\<\"the\"\>", ",", "\<\"theAction\"\>", ",", "\<\"theAction$\"\>", 
   ",", "\<\"theAlg\"\>", ",", "\<\"theAlgBasis\"\>", 
   ",", "\<\"theAlgBasis$\"\>", ",", "\<\"theAlgebra\"\>", 
   ",", "\<\"theAlgebraMarks\"\>", ",", "\<\"theAlgebraMarks$\"\>", 
   ",", "\<\"theAlgebra$\"\>", ",", "\<\"theAlg$\"\>", 
   ",", "\<\"theAnswer\"\>", ",", "\<\"theAnswer$\"\>", 
   ",", "\<\"theArgumentGrade\"\>", ",", "\<\"theArgumentGrade$\"\>", 
   ",", "\<\"theAssociationFunction\"\>", 
   ",", "\<\"theAssociationFunction$\"\>", ",", "\<\"theBasis\"\>", 
   ",", "\<\"theBasisWithoutScalar\"\>", 
   ",", "\<\"theBasisWithoutScalar$\"\>", ",", "\<\"theBasis$\"\>", 
   ",", "\<\"theBivectors\"\>", ",", "\<\"theBivectors$\"\>", 
   ",", "\<\"theBlade\"\>", ",", "\<\"theBlade$\"\>", ",", "\<\"theBody\"\>", 
   ",", "\<\"theBody$\"\>", ",", "\<\"theCoef\"\>", ",", "\<\"theCoef$\"\>", 
   ",", "\<\"theDirection\"\>", ",", "\<\"theDirection$\"\>", 
   ",", "\<\"theDiscriminantFunction\"\>", 
   ",", "\<\"theDiscriminantFunction$\"\>", ",", "\<\"theDomain\"\>", 
   ",", "\<\"theDomain$\"\>", ",", "\<\"theDoubleRealFieldOrdering\"\>", 
   ",", "\<\"theDoubleRealFieldOrdering$\"\>", ",", "\<\"theElement\"\>", 
   ",", "\<\"theElements\"\>", ",", "\<\"theElement$\"\>", 
   ",", "\<\"theEq\"\>", ",", "\<\"theEqLHS\"\>", ",", "\<\"theEqLHS$\"\>", 
   ",", "\<\"theEquationsToCheck\"\>", ",", "\<\"theEquationsToCheck$\"\>", 
   ",", "\<\"theEq$\"\>", ",", "\<\"theExpandFunction\"\>", 
   ",", "\<\"theExpandFunction$\"\>", ",", "\<\"theFieldAndName\"\>", 
   ",", "\<\"theFieldAndName$\"\>", ",", "\<\"theFormula\"\>", 
   ",", "\<\"TheFormula\"\>", ",", "\<\"theFormula$\"\>", 
   ",", "\<\"theGrade\"\>", ",", "\<\"theGradesToExtract\"\>", 
   ",", "\<\"theGradesToExtract$\"\>", ",", "\<\"theGrade$\"\>", 
   ",", "\<\"theIdealBoxes\"\>", ",", "\<\"theIdealBoxes$\"\>", 
   ",", "\<\"theIdempotent\"\>", ",", "\<\"theIdempotentOptions\"\>", 
   ",", "\<\"theIdempotentOptions$\"\>", ",", "\<\"theIdempotentSetting\"\>", 
   ",", "\<\"theIdempotentSetting$\"\>", ",", "\<\"theIdempotent$\"\>", 
   ",", "\<\"theIdentityMatrix\"\>", ",", "\<\"theIdentityMatrix$\"\>", 
   ",", "\<\"theImaginaryIReplacementRules\"\>", 
   ",", "\<\"theImaginaryIReplacementRules$\"\>", 
   ",", "\<\"theInternalMVRepresentation\"\>", 
   ",", "\<\"theLeftMinimaIdealBasisA\"\>", 
   ",", "\<\"theLeftMinimaIdealBasisA$\"\>", ",", "\<\"theMatrix\"\>", 
   ",", "\<\"theMatrixDet\"\>", ",", "\<\"theMatrixDet$\"\>", 
   ",", "\<\"theMatrix$\"\>", ",", "\<\"theMethod\"\>", 
   ",", "\<\"theMethodAndItsOptions\"\>", 
   ",", "\<\"theMethodAndItsOptions$\"\>", ",", "\<\"theMethodData\"\>", 
   ",", "\<\"theMethodOptions\"\>", ",", "\<\"theMethodOptions$\"\>", 
   ",", "\<\"theMethod$\"\>", ",", "\<\"theMode\"\>", ",", "\<\"theMode$\"\>",
    ",", "\<\"theNorm\"\>", ",", "\<\"theNorm$\"\>", 
   ",", "\<\"theOmitedGrades\"\>", ",", "\<\"theOmitedGrades$\"\>", 
   ",", "\<\"theOrderA\"\>", ",", "\<\"theOrderA$\"\>", 
   ",", "\<\"theOrderB\"\>", ",", "\<\"theOrderB$\"\>", 
   ",", "\<\"theOrdering\"\>", ",", "\<\"theOrderingRules\"\>", 
   ",", "\<\"theOrderingRules$\"\>", ",", "\<\"theOrdering$\"\>", 
   ",", "\<\"theOtherOptions\"\>", ",", "\<\"theOtherOptions$\"\>", 
   ",", "\<\"theProprocessingRules\"\>", ",", "\<\"thePseudoFactor\"\>", 
   ",", "\<\"thePseudoFactor$\"\>", 
   ",", "\<\"theQuaternionReplacementRules\"\>", 
   ",", "\<\"theQuaternionReplacementRules$\"\>", 
   ",", "\<\"theReciprocalBivectors\"\>", 
   ",", "\<\"theReciprocalBivectors$\"\>", ",", "\<\"theRest\"\>", 
   ",", "\<\"theRest$\"\>", ",", "\<\"theResult\"\>", 
   ",", "\<\"theResultFunction\"\>", ",", "\<\"theResultFunction$\"\>", 
   ",", "\<\"theResult$\"\>", ",", "\<\"theRule\"\>", 
   ",", "\<\"theScalarFunction\"\>", ",", "\<\"theScalarFunction$\"\>", 
   ",", "\<\"theScalarProductOnArgOfgaTransform\"\>", 
   ",", "\<\"theScalarProductOnArgOfgaTransform$\"\>", 
   ",", "\<\"theSortedField\"\>", ",", "\<\"theSortedField$\"\>", 
   ",", "\<\"theStructureConstants\"\>", 
   ",", "\<\"theStructureConstantsSummedWithMetric\"\>", 
   ",", "\<\"theStructureConstantsSummedWithMetric$\"\>", 
   ",", "\<\"theStructureConstants$\"\>", ",", "\<\"theTransformation\"\>", 
   ",", "\<\"thetransformationGrade\"\>", 
   ",", "\<\"thetransformationGrade$\"\>", ",", "\<\"theTransformation$\"\>", 
   ",", "\<\"theTransfrom\"\>", ",", "\<\"theUserMethodOptions\"\>", 
   ",", "\<\"theVectorBasis\"\>", ",", "\<\"theVectorBasis$\"\>", 
   ",", "\<\"theVectorSpaceDimension\"\>", 
   ",", "\<\"theVectorSpaceDimension$\"\>", ",", "\<\"the$\"\>", 
   ",", "\<\"thisBase\"\>", ",", "\<\"thisBase$\"\>", ",", "\<\"thisRep\"\>", 
   ",", "\<\"thisRep$\"\>", ",", "\<\"tocheck\"\>", ",", "\<\"toKeep\"\>", 
   ",", "\<\"toKeep$\"\>", ",", "\<\"toModify\"\>", ",", "\<\"toModify$\"\>", 
   ",", "\<\"toRCHFactors\"\>", ",", "\<\"tr\"\>", ",", "\<\"transform\"\>", 
   ",", "\<\"transformationActionOnTestMV\"\>", 
   ",", "\<\"transformationActionOnTestMV$\"\>", 
   ",", "\<\"triangularNumber\"\>", ",", "\<\"trowCondition\"\>", 
   ",", "\<\"trowCondition$\"\>", ",", "\<\"trueHeads\"\>", 
   ",", "\<\"trueHeadsBlanks\"\>", ",", "\<\"trueHeadsBlanks$\"\>", 
   ",", "\<\"trueHeadsHeads\"\>", ",", "\<\"trueHeadsHeads$\"\>", 
   ",", "\<\"trueHeads$\"\>", ",", "\<\"tr$\"\>", ",", "\<\"type\"\>", 
   ",", "\<\"t$\"\>", ",", "\<\"u\"\>", ",", "\<\"u1\"\>", ",", "\<\"u2a\"\>",
    ",", "\<\"u2b\"\>", ",", "\<\"u3\"\>", ",", "\<\"uexp\"\>", 
   ",", "\<\"uMVec\"\>", ",", "\<\"uniqueMaskForArbitraryAlgebra\"\>", 
   ",", "\<\"uniqueMaskForSpecAlgebra\"\>", ",", "\<\"uniqueSymbolsB\"\>", 
   ",", "\<\"uniqueSymbolsB$\"\>", ",", "\<\"uniqueSymbolsC\"\>", 
   ",", "\<\"uniqueSymbolsC$\"\>", ",", "\<\"unitElement\"\>", 
   ",", "\<\"up\"\>", ",", "\<\"up1\"\>", ",", "\<\"up1$\"\>", 
   ",", "\<\"up2\"\>", ",", "\<\"up2$\"\>", ",", "\<\"updateInputAlias\"\>", 
   ",", "\<\"up$\"\>", ",", "\<\"userMethodOptionValues\"\>", 
   ",", "\<\"u$\"\>", ",", "\<\"v\"\>", ",", "\<\"V\"\>", ",", "\<\"v1\"\>", 
   ",", "\<\"V1\"\>", ",", "\<\"v1$\"\>", ",", "\<\"V1$\"\>", 
   ",", "\<\"val\"\>", ",", "\<\"value\"\>", ",", "\<\"value$\"\>", 
   ",", "\<\"val$\"\>", ",", "\<\"var\"\>", ",", "\<\"variants\"\>", 
   ",", "\<\"variants$\"\>", ",", "\<\"varName\"\>", ",", "\<\"varName$\"\>", 
   ",", "\<\"vars\"\>", ",", "\<\"varsWithMarks\"\>", 
   ",", "\<\"varsWithMarks$\"\>", ",", "\<\"vars$\"\>", 
   ",", "\<\"vecBase\"\>", ",", "\<\"vecBase$\"\>", ",", "\<\"vectorBase\"\>",
    ",", "\<\"vectorMatrices\"\>", ",", "\<\"vectorMatricesFin\"\>", 
   ",", "\<\"vectorMatricesFin$\"\>", ",", "\<\"vectorMatrices$\"\>", 
   ",", "\<\"vectors\"\>", ",", "\<\"vectorsOfArbitraryAlgebra\"\>", 
   ",", "\<\"vectorsOfSpecialAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebraMetricSorted\"\>", 
   ",", "\<\"vectors$\"\>", ",", "\<\"vRep\"\>", ",", "\<\"vsdim\"\>", 
   ",", "\<\"vsdim$\"\>", ",", "\<\"vVRules\"\>", 
   ",", "\<\"vVRulesNegative\"\>", ",", "\<\"vVRulesNegative$\"\>", 
   ",", "\<\"vVRulesPositive\"\>", ",", "\<\"vVRulesPositive$\"\>", 
   ",", "\<\"vVRules$\"\>", ",", "\<\"v$\"\>", ",", "\<\"V$\"\>", 
   ",", "\<\"w\"\>", ",", "\<\"what\"\>", ",", "\<\"whi\"\>", 
   ",", "\<\"whichAlgebra\"\>", ",", "\<\"whi$\"\>", ",", "\<\"wrap\"\>", 
   ",", "\<\"wrapArg\"\>", ",", "\<\"wrapCliffordConjugate\"\>", 
   ",", "\<\"wrapHead\"\>", ",", "\<\"wrappedSelVector\"\>", 
   ",", "\<\"wrappedSelVectorSignedMagnitudeSquare\"\>", 
   ",", "\<\"wrappedSelVectorSignedMagnitudeSquare$\"\>", 
   ",", "\<\"wrappedSelVector$\"\>", ",", "\<\"wrappingBlade\"\>", 
   ",", "\<\"wrap$\"\>", ",", "\<\"w$\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"x1\"\>", ",", "\<\"x1$\"\>", ",", "\<\"x2\"\>", 
   ",", "\<\"x2$\"\>", ",", "\<\"xlists\"\>", ",", "\<\"x$\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"y1\"\>", ",", "\<\"y2\"\>", ",", "\<\"yMV\"\>",
    ",", "\<\"yMV$\"\>", ",", "\<\"y$\"\>", ",", "\<\"z\"\>", 
   ",", "\<\"zeroGradeQ\"\>", ",", "\<\"zeroQ\"\>", ",", "\<\"z$\"\>", 
   ",", "\<\"\[CurlyPhi]\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[962]=",ExpressionUUID->"46afd5e4-1033-44b1-ab33-2deed4bf8102"]
}, Open  ]],

Cell["\<\
Check if global context remains clear . {args,dims} are generated by paclet? \
See, https://mathematica.stackexchange.com/questions/202841/why-does-args-\
symbol-exist-in-a-fresh-kernel\
\>", "Text",ExpressionUUID->"e56e9ed7-be98-44f8-8648-f968bde76cc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", 
  RowBox[{"\"\<Global`\>\"", "<>", " ", "\"\<*\>\""}], "]"}]], "Input",
 CellLabel->
  "In[963]:=",ExpressionUUID->"375fc3fd-513a-46c7-8e6e-e73d53013289"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"args\"\>", ",", "\<\"dims\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[963]=",ExpressionUUID->"ab272044-319b-4806-8170-8721e5bdd5fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Notes, drawbacks, future plans"
}], "Section",ExpressionUUID->"64646392-2c84-44bd-8289-d306a45113a6"],

Cell["End notes, drawbacks", "Text",ExpressionUUID->"bab34d23-1b76-4352-b58e-022940b57c10"],

Cell["\<\
Implement calculation of derivatives (orthonormal base first)\
\>", "Text",ExpressionUUID->"956ce372-fcd8-4472-822b-34694829c265"],

Cell["\<\
Implement groebner basis for outer product, then for whole clifford algebra \
(in orthonormal basis).\
\>", "Text",ExpressionUUID->"80108326-12d4-491c-bc95-b4cd66a2d378"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CurrentValue", "[", 
    RowBox[{
     RowBox[{"Cells", "[", "]"}], ",", "CellChangeTimes"}], "]"}], "=", 
   "Inherited"}], ";"}]], "Input",
 Evaluatable->False,
 CellLabel->"In[1]:=",ExpressionUUID->"1d24a5e1-25e1-4fae-bac2-02dadb8d60de"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "GeometricAlgebra`ShowStatus", "[", "\"\<Package has been loaded\>\"", 
   "]"}], ";"}]], "Input",
 CellLabel->
  "In[964]:=",ExpressionUUID->"17e7264a-859c-460c-8fd6-fef4eb23506e"]
}, Open  ]]
},
CellGrouping->Manual,
WindowSize->{1416.75, 1516.5},
WindowMargins->{{20.25, Automatic}, {Automatic, 3}},
ShowSelection->True,
ShowCellTags->True,
TrackCellChangeTimes->False,
FrontEndVersion->"12.1 for Linux x86 (64-bit) (June 19, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b2e34cb7-41f4-490f-838e-cf4fa00019f1"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "references"->{
  Cell[3840, 116, 3838, 57, 651, "Text",ExpressionUUID->"fdcddf3a-5c67-4f6c-942b-58d193f3ebb3",
   CellTags->"references"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"references", 2411540, 60055}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 98, "Title",ExpressionUUID->"9afea453-cc25-4c79-a71c-e5dfbdd1d324",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[743, 27, 300, 6, 36, "Text",ExpressionUUID->"615112f4-db50-4aab-b1c6-f617fbb0d2d1",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1046, 35, 195, 4, 36, "Text",ExpressionUUID->"4e44f443-be07-4aab-b2e3-346b3c4e2be1",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[1278, 44, 165, 4, 68, "Section",ExpressionUUID->"d8cfecff-afda-4dd1-b50c-05b0a8572010"],
Cell[1446, 50, 310, 7, 104, "Text",ExpressionUUID->"c5ddf8d2-d89f-4a90-8cbb-9616b54633e9"],
Cell[CellGroupData[{
Cell[1781, 61, 173, 7, 54, "Subsection",ExpressionUUID->"5ab1a0e8-d419-4628-8b9e-2ebe95d67c7b"],
Cell[1957, 70, 747, 13, 132, "Text",ExpressionUUID->"97123780-4ced-4e59-a65d-76df0236e407"],
Cell[2707, 85, 928, 17, 204, "Text",ExpressionUUID->"7c683e00-8827-40be-8e7d-038ae45de9ca"]
}, Closed]],
Cell[CellGroupData[{
Cell[3672, 107, 165, 7, 38, "Subsection",ExpressionUUID->"df23ec16-d2a7-4dbe-82f7-821dafb79d59"],
Cell[3840, 116, 3838, 57, 651, "Text",ExpressionUUID->"fdcddf3a-5c67-4f6c-942b-58d193f3ebb3",
 CellTags->"references"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7727, 179, 138, 4, 68, "Section",ExpressionUUID->"246089b4-9667-4177-8ba9-b641a2c1b982"],
Cell[7868, 185, 268, 4, 35, "Text",ExpressionUUID->"e45fff8b-d694-4e96-824b-c0d2bc44d02d"],
Cell[CellGroupData[{
Cell[8161, 193, 212, 7, 54, "Subsection",ExpressionUUID->"2610ed77-853f-41eb-98ea-89584ea30de3"],
Cell[8376, 202, 356, 9, 60, "Text",ExpressionUUID->"69f6482c-edd1-4cb9-a59b-819ce1daf925"],
Cell[CellGroupData[{
Cell[8757, 215, 133, 1, 31, "Input",ExpressionUUID->"c03170e6-d233-4851-9c4d-82d02f5c2293",
 Evaluatable->False],
Cell[8893, 218, 185, 2, 35, "Output",ExpressionUUID->"583bcd21-ee4f-4cab-b611-6e1486539603"]
}, Open  ]],
Cell[9093, 223, 206, 3, 36, "Text",ExpressionUUID->"0468086a-a29a-4898-8577-261219699f2b"],
Cell[CellGroupData[{
Cell[9324, 230, 375, 8, 55, "Input",ExpressionUUID->"1d8df92f-1bbd-4d47-bcbd-2c20a1c3a58b",
 Evaluatable->False],
Cell[9702, 240, 523, 7, 115, "Print",ExpressionUUID->"9384fc44-5ea3-4a7f-89cc-998ee6fa7169"]
}, Open  ]],
Cell[10240, 250, 266, 4, 36, "Text",ExpressionUUID->"f5afd523-ac2a-47b2-810f-166ed32d6a48"],
Cell[10509, 256, 259, 5, 31, "Input",ExpressionUUID->"f36a0a7f-b7a3-4027-95e8-bf37fd6ede29",
 Evaluatable->False],
Cell[10771, 263, 252, 5, 36, "Text",ExpressionUUID->"9b29f7bf-0560-475a-b323-3f7b8af8d744"],
Cell[CellGroupData[{
Cell[11048, 272, 111, 0, 46, "Subsubsection",ExpressionUUID->"904f0503-da29-4f1a-b4a0-869b5316e2c9"],
Cell[11162, 274, 1444, 22, 156, "Text",ExpressionUUID->"316209da-babf-4b86-9d9b-13ce12580169"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[12655, 302, 217, 7, 38, "Subsection",ExpressionUUID->"8d974aa8-a064-47d5-ae02-89ce99d96779"],
Cell[12875, 311, 351, 9, 36, "Text",ExpressionUUID->"d38dbf2a-4a2a-4d6f-8be4-b9934d77054e"],
Cell[13229, 322, 3050, 59, 86, "Text",ExpressionUUID->"2ff29d69-c109-424c-b7d0-796fe49bccc2"],
Cell[16282, 383, 441, 13, 34, "Input",ExpressionUUID->"8351f0c5-2162-4e7c-b33d-57f9728b1c5f",
 Evaluatable->False],
Cell[16726, 398, 601, 8, 60, "Text",ExpressionUUID->"ad1c4e6c-0e36-4471-8d1c-a7c7b20fcd6f"],
Cell[17330, 408, 443, 6, 60, "Text",ExpressionUUID->"3de50969-e4e5-49c7-bc8b-0712109c3114"],
Cell[17776, 416, 1869, 47, 124, "Input",ExpressionUUID->"45a0b0a1-0b54-4bab-aeb2-e3c97f729186",
 Evaluatable->False],
Cell[19648, 465, 192, 3, 31, "Input",ExpressionUUID->"05ff0ea3-e078-42bf-9da6-2875b3b1b48d",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[19877, 473, 209, 7, 38, "Subsection",ExpressionUUID->"a0a93512-3275-4b9a-99e6-70411fd0e935"],
Cell[20089, 482, 1037, 24, 108, "Text",ExpressionUUID->"719e9c23-5f02-41fd-9a19-8cbbf7325690"],
Cell[CellGroupData[{
Cell[21151, 510, 131, 0, 46, "Subsubsection",ExpressionUUID->"f596c1eb-5661-4b9f-93dc-9f17f2b7924f"],
Cell[21285, 512, 327, 5, 36, "Text",ExpressionUUID->"077012fb-06af-4966-824e-7c5c8f3a4365"],
Cell[CellGroupData[{
Cell[21637, 521, 180, 3, 55, "Input",ExpressionUUID->"450d29ef-22b3-4209-a631-e5451cefccd6",
 Evaluatable->False],
Cell[21820, 526, 842, 19, 59, "Output",ExpressionUUID->"f59ea091-020a-4f64-887f-5ecb9ce435c0"]
}, Open  ]],
Cell[22677, 548, 187, 3, 36, "Text",ExpressionUUID->"ba762656-3b4a-4adc-a874-2da7fe0b9836"],
Cell[CellGroupData[{
Cell[22889, 555, 341, 9, 31, "Input",ExpressionUUID->"64e2981c-ef8f-4568-8f83-65bbf03cf794",
 Evaluatable->False],
Cell[23233, 566, 1391, 36, 59, "Output",ExpressionUUID->"3d65e147-31c2-4018-aa40-99e6cfb48e51"]
}, Open  ]],
Cell[24639, 605, 568, 8, 60, "Text",ExpressionUUID->"da9b4a89-255e-4b88-85ab-899b50aa0aac"],
Cell[CellGroupData[{
Cell[25232, 617, 388, 10, 31, "Input",ExpressionUUID->"a0537915-cf9e-43f9-a4fb-b42cce4b9205",
 Evaluatable->False],
Cell[25623, 629, 452, 10, 35, "Output",ExpressionUUID->"2f6a2498-cb86-4b10-82e4-1fa3ea6bc3b1"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[26136, 646, 189, 7, 38, "Subsection",ExpressionUUID->"50f8bc01-2789-4fac-82fa-e8778037a4cc"],
Cell[26328, 655, 204, 3, 36, "Text",ExpressionUUID->"0e5b73d3-1786-42c2-bd01-d8f7bb285509"],
Cell[26535, 660, 737, 12, 108, "Text",ExpressionUUID->"635b9c7c-44f1-462d-8dac-28a8f0c190db"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[27321, 678, 131, 4, 68, "Section",ExpressionUUID->"2153a712-150f-4eab-9c82-4673c6899f50"],
Cell[27455, 684, 178, 4, 35, "Text",ExpressionUUID->"4ed2df02-7f07-4f85-b67a-c2615b4ed048"],
Cell[CellGroupData[{
Cell[27658, 692, 170, 7, 54, "Subsection",ExpressionUUID->"8d836bc1-612a-4ef7-bf7d-d3cc6865c1f5"],
Cell[27831, 701, 563, 9, 108, "Text",ExpressionUUID->"3e980c74-baf4-4688-b2c4-a6e143f018d9"],
Cell[28397, 712, 602, 15, 31, "Input",ExpressionUUID->"2ea5594d-cdde-4f43-b954-38dce8511373"],
Cell[29002, 729, 188, 4, 31, "Input",ExpressionUUID->"c7472096-2977-471b-a66b-7007ac37d9d0"],
Cell[29193, 735, 806, 21, 124, "Input",ExpressionUUID->"efdd2539-df2c-4265-9c81-b8c06d5390ad"],
Cell[30002, 758, 3451, 93, 400, "Input",ExpressionUUID->"6490e68b-4e3b-4310-85a0-8dff46ae47dc"],
Cell[33456, 853, 1188, 31, 78, "Input",ExpressionUUID->"3de305cf-bdc9-436e-96dd-36d4ca81524d"]
}, Closed]],
Cell[CellGroupData[{
Cell[34681, 889, 191, 7, 38, "Subsection",ExpressionUUID->"886b8993-5e4a-450e-8746-a36a2ff6b3b7"],
Cell[34875, 898, 351, 7, 29, "Input",ExpressionUUID->"9bde0319-c8e3-4153-adfc-0a0bcc9765ea"],
Cell[35229, 907, 85, 0, 35, "Text",ExpressionUUID->"209148b3-5465-4f8e-9b16-31b478270ba0"],
Cell[35317, 909, 301, 6, 29, "Input",ExpressionUUID->"c2f6715e-92ec-4d7d-9c38-8cc7f0584597"]
}, Open  ]],
Cell[35633, 918, 724, 12, 113, "Input",ExpressionUUID->"689131d9-e6ae-4d7f-93c1-8251ee7378ce"],
Cell[36360, 932, 318, 6, 29, "Input",ExpressionUUID->"ff8edc3e-cbe9-4e2e-b189-db2ceb438dac"],
Cell[36681, 940, 157, 3, 29, "Input",ExpressionUUID->"e905e4d5-32c9-47a1-856d-3be2a433605a"],
Cell[CellGroupData[{
Cell[36863, 947, 251, 10, 45, "Subsubsection",ExpressionUUID->"00842a3b-eb89-4e00-95a1-b8b3c52ae039"],
Cell[37117, 959, 336, 7, 36, "Text",ExpressionUUID->"f06c4c80-376a-4c26-8dbb-338391a84f4d"],
Cell[37456, 968, 1310, 32, 170, "Input",ExpressionUUID->"98f71124-f634-4b49-9a2e-191c82343783"],
Cell[38769, 1002, 768, 14, 108, "Text",ExpressionUUID->"c802f3d0-0110-4e58-bff7-7d0112d2846d"],
Cell[39540, 1018, 635, 12, 60, "Text",ExpressionUUID->"234b8e39-659c-446d-8ce7-2b5a83ec26dc"],
Cell[40178, 1032, 719, 14, 60, "Text",ExpressionUUID->"fc5dae69-f1a1-4b2d-859f-69175461b3b4"],
Cell[40900, 1048, 383, 7, 36, "Text",ExpressionUUID->"21671e90-11ac-43fa-b7f3-43d4fab8c985"],
Cell[41286, 1057, 370, 7, 36, "Text",ExpressionUUID->"59d3ff1a-9d5a-483f-9024-0532d2d57226"],
Cell[41659, 1066, 314, 7, 36, "Text",ExpressionUUID->"32b0faae-ac94-4560-9cc3-cd0bd1146d5a"],
Cell[41976, 1075, 557, 10, 60, "Text",ExpressionUUID->"462f1179-ebf5-4160-94f9-2a4b0671d595"],
Cell[42536, 1087, 688, 13, 60, "Text",ExpressionUUID->"2da9675f-c36c-4843-bc6f-fc8dd434b7b9"],
Cell[43227, 1102, 375, 9, 84, "Text",ExpressionUUID->"321e54c4-b843-4749-b258-7582a9b3e8a2"],
Cell[43605, 1113, 914, 22, 55, "Input",ExpressionUUID->"362f1c82-2248-4ec9-894e-99f37161f8e8"],
Cell[44522, 1137, 425, 9, 84, "Text",ExpressionUUID->"e0635e1e-ecb9-45a4-856e-914ccc3eee12"],
Cell[44950, 1148, 1379, 35, 193, "Input",ExpressionUUID->"0d7fe44c-ecd9-4d11-bffa-9cc051abc80a"]
}, Closed]],
Cell[CellGroupData[{
Cell[46366, 1188, 182, 7, 38, "Subsection",ExpressionUUID->"d1eb5dad-cb2a-4045-9fca-9329c85467bc"],
Cell[46551, 1197, 702, 14, 132, "Text",ExpressionUUID->"ba37dffc-0dc2-404e-ac1e-fc8db397ae3b"],
Cell[CellGroupData[{
Cell[47278, 1215, 239, 10, 46, "Subsubsection",ExpressionUUID->"5096be12-ace0-44fa-b8a3-9de2ef62f20e"],
Cell[47520, 1227, 307, 6, 36, "Text",ExpressionUUID->"96238029-9e09-4af6-82f1-9ee6c686782a"],
Cell[47830, 1235, 810, 22, 78, "Input",ExpressionUUID->"e16f7d9f-daa4-4d48-b697-87f357b8e236"],
Cell[48643, 1259, 105, 0, 36, "Text",ExpressionUUID->"a0ca8ad7-47ac-45ff-bbb0-1210c8f8d74b"],
Cell[48751, 1261, 1286, 34, 78, "Input",ExpressionUUID->"ae356dac-09c2-43e0-8723-ff5e6a3afd97"],
Cell[50040, 1297, 322, 6, 36, "Text",ExpressionUUID->"1dac2f39-30ec-4256-964e-7a008bac8c0b"],
Cell[50365, 1305, 507, 13, 55, "Input",ExpressionUUID->"346a029b-4156-4677-aa32-df0ab7ab81ab"],
Cell[50875, 1320, 332, 7, 36, "Text",ExpressionUUID->"fab87387-fbd1-4864-bccf-1e217a792418"],
Cell[51210, 1329, 1367, 36, 147, "Input",ExpressionUUID->"b377dce3-2b6c-497c-8ef5-3d897d908b7c"],
Cell[52580, 1367, 150, 2, 36, "Text",ExpressionUUID->"fbce78b8-15af-46e6-a551-c836bad3ad06"],
Cell[52733, 1371, 412, 9, 31, "Input",ExpressionUUID->"f073d6d5-f160-4949-b797-c4584a172983",
 Evaluatable->False],
Cell[53148, 1382, 264, 6, 31, "Input",ExpressionUUID->"1bed88a6-8612-4f12-856e-8afbc90b96f8"],
Cell[53415, 1390, 422, 7, 60, "Text",ExpressionUUID->"53d48343-e73d-4f0c-9ae0-9947bd67a262"],
Cell[53840, 1399, 760, 19, 55, "Input",ExpressionUUID->"80f4b513-c1f0-454c-bdc5-52af43adeb26"]
}, Open  ]],
Cell[54615, 1421, 383, 9, 36, "Text",ExpressionUUID->"ee6e59a7-2576-4efc-b346-e0f22834402a"],
Cell[55001, 1432, 2377, 61, 124, "Input",ExpressionUUID->"21c98b3e-6f96-4488-888a-1ce7911e22a0"],
Cell[57381, 1495, 299, 5, 36, "Text",ExpressionUUID->"3df23eac-ddb3-4df8-823a-18ff99fad35a"],
Cell[57683, 1502, 1022, 28, 148, "Input",ExpressionUUID->"8607c24e-f106-45ee-8713-84a9b64c7cc2",
 Evaluatable->False],
Cell[58708, 1532, 155, 3, 31, "Input",ExpressionUUID->"ef62a6e8-3574-411c-b3a6-cded0bae00b2"]
}, Closed]],
Cell[CellGroupData[{
Cell[58900, 1540, 163, 7, 38, "Subsection",ExpressionUUID->"ca56193e-0ba3-4dce-b13c-b55cbbada6f2"],
Cell[59066, 1549, 329, 5, 60, "Text",ExpressionUUID->"9ce94b90-a686-4389-845f-903099a323aa"],
Cell[59398, 1556, 267, 6, 36, "Text",ExpressionUUID->"99ec54da-9587-461e-b217-9fc9885edc68"],
Cell[59668, 1564, 169, 3, 31, "Input",ExpressionUUID->"f198b81e-89e0-458b-a801-f0606d52083a"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[59886, 1573, 194, 5, 68, "Section",ExpressionUUID->"d373e055-74a0-4e3d-a30c-88ebbd8d41d2"],
Cell[60083, 1580, 317, 6, 35, "Text",ExpressionUUID->"d80b2b4e-d28d-44ca-98cc-040c244ce09a"],
Cell[60403, 1588, 1174, 20, 113, "Input",ExpressionUUID->"00dbf0b9-27f4-4d3d-8a2f-67d8c132381b"],
Cell[61580, 1610, 405, 8, 51, "Input",ExpressionUUID->"046ba6a5-0d69-44bf-a93d-407098ab79f6"],
Cell[61988, 1620, 85, 0, 35, "Text",ExpressionUUID->"d0948ae5-2b71-4371-8bb1-6e52adbba70e"],
Cell[62076, 1622, 482, 9, 71, "Input",ExpressionUUID->"d08ad10e-f0be-4189-b482-588b253e92d6"],
Cell[62561, 1633, 462, 8, 71, "Input",ExpressionUUID->"9acbf8b2-cf52-4115-afce-ad1aa345db21"],
Cell[63026, 1643, 475, 11, 51, "Input",ExpressionUUID->"f64c5108-a8b9-40db-819a-ba603303f8a4"],
Cell[63504, 1656, 379, 7, 71, "Input",ExpressionUUID->"4f3e3998-2990-430a-9853-2f45a85fd723"],
Cell[63886, 1665, 599, 10, 92, "Input",ExpressionUUID->"d99ece2b-d78f-4194-a6a5-3768a0d86550"],
Cell[64488, 1677, 491, 9, 92, "Input",ExpressionUUID->"d58bce33-3cc2-48af-bddd-e6d7e5406aa0"],
Cell[64982, 1688, 317, 7, 29, "Input",ExpressionUUID->"76ebcf02-c23b-48d2-bc48-439f67e686f5"],
Cell[65302, 1697, 315, 6, 29, "Input",ExpressionUUID->"1bb27943-b18c-48ef-8958-15354bf96edb"],
Cell[65620, 1705, 1441, 22, 216, "Input",ExpressionUUID->"19ef61f1-a9ea-4553-b9ca-c21746df2272"],
Cell[67064, 1729, 351, 7, 51, "Input",ExpressionUUID->"45b93db7-3f74-42b0-9eb1-2b294050391b"],
Cell[67418, 1738, 243, 6, 29, "Input",ExpressionUUID->"f74e8daa-730b-4ad3-b780-3f9fed38d3d7"],
Cell[67664, 1746, 350, 7, 51, "Input",ExpressionUUID->"d90cd20d-f281-477a-97e2-7d4c8b1375f0"],
Cell[68017, 1755, 384, 8, 71, "Input",ExpressionUUID->"7bb06143-1a49-4c36-b4f6-a18cbd10dcb9"],
Cell[68404, 1765, 364, 8, 51, "Input",ExpressionUUID->"f4e33292-dfce-4ce8-8c67-fba4131bc8a3"],
Cell[68771, 1775, 375, 7, 71, "Input",ExpressionUUID->"4263cef4-73b4-4158-aded-a9ee4a2a1f8e"],
Cell[69149, 1784, 337, 7, 29, "Input",ExpressionUUID->"0990dc1f-a39b-41de-bc74-8378983549f4"],
Cell[69489, 1793, 671, 11, 92, "Input",ExpressionUUID->"2dd93f57-82ea-412c-bf27-adc1246f5ffa"],
Cell[70163, 1806, 201, 5, 29, "Input",ExpressionUUID->"76637aad-cf78-4bbe-96fa-01430e35fe5e"],
Cell[70367, 1813, 875, 15, 133, "Input",ExpressionUUID->"444e41b8-8a9c-47fb-8999-ee70ab13bc93"],
Cell[71245, 1830, 260, 6, 29, "Input",ExpressionUUID->"aea22571-b444-4683-9209-781394b7b30d"],
Cell[71508, 1838, 243, 6, 29, "Input",ExpressionUUID->"c6492878-05ab-4836-9178-3d3b8c83534f"],
Cell[71754, 1846, 548, 10, 92, "Input",ExpressionUUID->"144790d8-c40a-412a-a1e8-f0c1369d8173"],
Cell[72305, 1858, 264, 6, 29, "Input",ExpressionUUID->"1d253ce2-0b3f-4399-b487-c24478f63206"],
Cell[72572, 1866, 256, 6, 29, "Input",ExpressionUUID->"cd5ec600-4fe6-4392-94f7-1a1d8229041b"],
Cell[72831, 1874, 400, 8, 71, "Input",ExpressionUUID->"97c8bcce-6b8f-48ed-b8ee-79e4fea19e0a"],
Cell[73234, 1884, 461, 8, 51, "Input",ExpressionUUID->"1ecb4567-8071-4285-93b8-cf2e01c34dd4"],
Cell[73698, 1894, 377, 7, 71, "Input",ExpressionUUID->"72eab6d7-a2ee-4ed2-9274-9a2db3d6c9ed"],
Cell[74078, 1903, 438, 8, 71, "Input",ExpressionUUID->"b231e4ab-2317-4e77-bae3-d0a56f812e37"],
Cell[74519, 1913, 607, 10, 92, "Input",ExpressionUUID->"d5a35528-e299-46de-b45a-95f3881b11c9"],
Cell[75129, 1925, 229, 5, 29, "Input",ExpressionUUID->"c64278f2-0725-4ed8-9173-115917a6f24e"],
Cell[75361, 1932, 157, 3, 29, "Input",ExpressionUUID->"9b2388e2-395c-42f6-9c10-0fd1072d4e1e"],
Cell[CellGroupData[{
Cell[75543, 1939, 182, 7, 54, "Subsection",ExpressionUUID->"575a4778-1d41-4eb0-a884-bb2a8a6d44a6"],
Cell[CellGroupData[{
Cell[75750, 1950, 210, 10, 45, "Subsubsection",ExpressionUUID->"9f5198d3-924b-4335-87c2-d9497bfbb414"],
Cell[75963, 1962, 317, 7, 36, "Text",ExpressionUUID->"46576a84-e290-4998-b543-ca390eef2ea8",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[76283, 1971, 705, 18, 55, "Input",ExpressionUUID->"d150b294-1328-4def-a4e5-e1bcaf5ffe9d",
 Evaluatable->False],
Cell[76991, 1991, 94, 0, 36, "Text",ExpressionUUID->"982d5351-e9bb-44e4-a815-d0776200de1d"],
Cell[77088, 1993, 182, 4, 31, "Input",ExpressionUUID->"aa960293-0ff2-4507-a694-1a26181880b3"],
Cell[77273, 1999, 189, 5, 36, "Text",ExpressionUUID->"50699e74-a9e3-4262-95e3-a427a6b04eec"],
Cell[77465, 2006, 1597, 41, 124, "Input",ExpressionUUID->"24c4d90d-45ad-4fb0-82ec-75761d9b8c4e"],
Cell[79065, 2049, 131, 2, 36, "Text",ExpressionUUID->"97fbaf5d-6474-46f4-bf40-03598db3439b"],
Cell[79199, 2053, 536, 11, 60, "Text",ExpressionUUID->"bfb4a716-d01c-46b6-a382-a3fdbb4d9f8f"],
Cell[79738, 2066, 198, 5, 36, "Text",ExpressionUUID->"21937f38-b479-494e-947c-952383679990"],
Cell[79939, 2073, 5972, 152, 561, "Input",ExpressionUUID->"60455b28-a2ec-4c1e-a7d8-30622a7fd8d4"],
Cell[85914, 2227, 131, 2, 36, "Text",ExpressionUUID->"50c373e7-fc5a-49fa-a936-c06fd2cafff0"],
Cell[86048, 2231, 386, 6, 36, "Text",ExpressionUUID->"c4830ec1-fd76-4d0d-9834-e97bfe72d90b"],
Cell[86437, 2239, 707, 16, 78, "Input",ExpressionUUID->"0de20e67-fe79-4994-b468-cf99d0d4982a"],
Cell[87147, 2257, 161, 3, 36, "Text",ExpressionUUID->"2393b299-a3ec-4801-9c5f-891709a4b530"],
Cell[87311, 2262, 3486, 86, 354, "Input",ExpressionUUID->"c51d0f53-2390-4054-857d-d4dd787b7f35"],
Cell[90800, 2350, 244, 4, 36, "Text",ExpressionUUID->"2d76b753-c54e-444b-8a93-8d28a00c6316"],
Cell[91047, 2356, 5553, 131, 423, "Input",ExpressionUUID->"cf67761d-740a-4230-b849-812662090eee"],
Cell[96603, 2489, 203, 3, 36, "Text",ExpressionUUID->"f32b48a1-99c7-4e8a-ab7c-343f54c9f0f4"],
Cell[96809, 2494, 563, 14, 55, "Input",ExpressionUUID->"edb73b66-1b1c-4813-bed2-a7c7a748410d"],
Cell[97375, 2510, 2331, 62, 239, "Input",ExpressionUUID->"72421505-b0a1-4325-9ff7-ff16454160f0"],
Cell[99709, 2574, 131, 2, 36, "Text",ExpressionUUID->"337ffd37-72f2-48dd-98f9-3038dac98550"],
Cell[99843, 2578, 174, 3, 36, "Text",ExpressionUUID->"848cdddc-1819-4413-8827-9bd8a15aa6b2"],
Cell[100020, 2583, 590, 17, 78, "Input",ExpressionUUID->"fd8be902-4eeb-447b-997a-a40e584f8d94"],
Cell[100613, 2602, 175, 4, 36, "Text",ExpressionUUID->"4de7e83f-1926-44aa-9587-82222c3bcda5"],
Cell[100791, 2608, 811, 15, 84, "Text",ExpressionUUID->"cf55662e-7e87-45ba-b87e-85232764dd15"],
Cell[101605, 2625, 476, 10, 60, "Text",ExpressionUUID->"98b8bce6-162c-408c-a832-517713d52368"],
Cell[102084, 2637, 580, 13, 55, "Input",ExpressionUUID->"66b24610-a2fc-4ad2-9487-c48051bd23f9"],
Cell[102667, 2652, 3375, 87, 262, "Input",ExpressionUUID->"dd0fd207-8b82-46cc-b663-036cb8769c5b"],
Cell[106045, 2741, 209, 3, 36, "Text",ExpressionUUID->"9aa7f018-416a-4d25-a81f-6c737aeb1ccb"],
Cell[106257, 2746, 353, 11, 31, "Input",ExpressionUUID->"2bc1a2f2-bce4-44e7-a36d-a47ec8f70844"]
}, Closed]],
Cell[CellGroupData[{
Cell[106647, 2762, 229, 11, 37, "Subsubsection",ExpressionUUID->"e65b5705-e5f5-4a7f-af30-64b28ac054fc"],
Cell[106879, 2775, 121, 2, 36, "Text",ExpressionUUID->"aafc3bc8-bc13-475d-89a1-3cbbaa6d0222"],
Cell[107003, 2779, 255, 6, 36, "Text",ExpressionUUID->"ee6454dc-99ee-428d-951f-1b08348379c0",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[107261, 2787, 290, 8, 31, "Input",ExpressionUUID->"09eb6667-043c-4487-a35c-1cfac1fb086e",
 CellID->1126827235],
Cell[107554, 2797, 174, 3, 36, "Text",ExpressionUUID->"89d084f4-4ec1-48de-9f1b-3d08c7af00e6",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[107731, 2802, 2787, 72, 170, "Input",ExpressionUUID->"f0674546-8c57-4c57-8ef2-5f23bb0f9f76"],
Cell[110521, 2876, 119, 2, 36, "Text",ExpressionUUID->"2fb28224-3a32-4c41-87e0-0934940fc98d"],
Cell[110643, 2880, 906, 26, 84, "Text",ExpressionUUID->"cdaf6078-668a-40e6-83f2-2e6f9c259342",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[111552, 2908, 308, 4, 36, "Text",ExpressionUUID->"08d2ba17-10dc-439e-9f4c-7b08a57d86b7"],
Cell[111863, 2914, 672, 10, 84, "Text",ExpressionUUID->"904f9925-3fac-4e0b-8d39-48b210a2ce7d"],
Cell[CellGroupData[{
Cell[112560, 2928, 350, 7, 36, "Text",ExpressionUUID->"4a6e11a8-20c4-43b3-980f-903d53923693",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[112913, 2937, 1877, 53, 1044, "Text",ExpressionUUID->"b941d9ce-16da-4bbb-832f-1590bb457d0e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[114805, 2993, 5223, 126, 350, "Input",ExpressionUUID->"26b68dd9-b24d-4adc-a1c6-32b1ebcfcba8"],
Cell[120031, 3121, 230, 4, 36, "Text",ExpressionUUID->"9aca7a27-9cca-431d-9195-df4d5219f35d"],
Cell[120264, 3127, 3156, 78, 308, "Input",ExpressionUUID->"1bf757b5-7416-42f6-afa4-f22ede33f7a1"],
Cell[123423, 3207, 234, 6, 36, "Text",ExpressionUUID->"4c6bc7ca-c397-4508-81c5-393c84211952",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[123660, 3215, 2103, 62, 147, "Input",ExpressionUUID->"0260a9ad-0110-4768-bd70-055f3af9cb12"],
Cell[125766, 3279, 143, 2, 36, "Text",ExpressionUUID->"c5204a6a-0225-4cc8-91b5-74bddca7f436"],
Cell[125912, 3283, 1759, 41, 354, "Input",ExpressionUUID->"1f53ee80-41f3-4df8-a4e8-bab5fcaf9829"]
}, Closed]],
Cell[CellGroupData[{
Cell[127708, 3329, 249, 11, 37, "Subsubsection",ExpressionUUID->"3c75efe5-cff0-400d-855c-5e1ea4f8d304"],
Cell[127960, 3342, 688, 17, 60, "Text",ExpressionUUID->"8f0b1dba-e885-4c6f-adc0-24d3d599fda7",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[128651, 3361, 2915, 75, 124, "Input",ExpressionUUID->"c2cf8625-8c29-4a4b-b689-9ec5714f4ee1"],
Cell[131569, 3438, 3454, 87, 147, "Input",ExpressionUUID->"7a1342dd-4a69-4a8d-8430-b38e8494db85"],
Cell[135026, 3527, 141, 2, 36, "Text",ExpressionUUID->"06c8788e-fede-42bc-be23-fb77d06d8300"],
Cell[135170, 3531, 2817, 70, 147, "Input",ExpressionUUID->"8cd5315f-5b76-49b7-b876-281431f52969"],
Cell[137990, 3603, 2817, 70, 147, "Input",ExpressionUUID->"f30cfa08-50e7-4627-8c16-29b3c12d3bfa"],
Cell[140810, 3675, 140, 2, 36, "Text",ExpressionUUID->"f299dd7c-0e27-4ac0-b1ef-28e7c1325a88"],
Cell[140953, 3679, 310, 8, 36, "Text",ExpressionUUID->"982f37f6-d845-4f00-8abb-0f9df2a05ae1",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[141266, 3689, 6413, 153, 308, "Input",ExpressionUUID->"3733995d-f379-477d-8bc0-b765819a346d"],
Cell[147682, 3844, 143, 2, 36, "Text",ExpressionUUID->"1d2d3748-442a-4c53-9205-7c3544281c90"],
Cell[147828, 3848, 352, 7, 36, "Text",ExpressionUUID->"d0859635-64e5-4934-9830-6e998c588649",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[148183, 3857, 3808, 97, 193, "Input",ExpressionUUID->"47258637-fe95-4ad7-a385-a44c95ed735f"],
Cell[151994, 3956, 152, 2, 36, "Text",ExpressionUUID->"9d2bbeca-200f-40fa-8ef2-a31bb63a2bcb"],
Cell[152149, 3960, 621, 14, 60, "Text",ExpressionUUID->"952e2f0c-5092-44cd-b803-146352e13bcd",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[152773, 3976, 971, 28, 101, "Input",ExpressionUUID->"18803abb-da1d-417e-9db0-45e5560c28fc"]
}, Closed]],
Cell[CellGroupData[{
Cell[153781, 4009, 319, 14, 37, "Subsubsection",ExpressionUUID->"d4882fb5-f621-4b24-8f62-ead97d7ff155"],
Cell[154103, 4025, 236, 4, 36, "Text",ExpressionUUID->"53338077-23cc-42b6-8f35-1213cf10944a"],
Cell[154342, 4031, 2926, 75, 285, "Input",ExpressionUUID->"ecab1246-33bf-42fd-9efd-adfa732c965e"],
Cell[157271, 4108, 201, 7, 36, "Text",ExpressionUUID->"4f14947a-5c8d-403e-9859-c7ad7fd6c7b8"],
Cell[157475, 4117, 819, 26, 84, "Text",ExpressionUUID->"dc9b7870-2767-421a-80a3-eeed2d488801"],
Cell[158297, 4145, 351, 8, 55, "Input",ExpressionUUID->"a5625491-4e89-4c8a-b49a-6e6b01f26fd7"],
Cell[158651, 4155, 39366, 806, 2162, "Input",ExpressionUUID->"bf02247b-d677-4f12-9775-0548653185ff"],
Cell[198020, 4963, 408, 8, 60, "Text",ExpressionUUID->"a215171a-d865-40bb-9058-9f62d26c451b"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[198477, 4977, 207, 7, 54, "Subsection",ExpressionUUID->"8ebdc9e3-b1e6-49fc-a3b6-be8285d6f741"],
Cell[CellGroupData[{
Cell[198709, 4988, 222, 10, 45, "Subsubsection",ExpressionUUID->"a45c58c1-8a12-438d-8f9c-8ef477ef3f8e"],
Cell[198934, 5000, 284, 6, 36, "Text",ExpressionUUID->"f44a03f6-60f2-46e1-8d73-126fdb53c0f5",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[199221, 5008, 589, 16, 31, "Input",ExpressionUUID->"4f9d55b1-3ba1-40f9-be18-c0a05c8894b6",
 Evaluatable->False],
Cell[199813, 5026, 1786, 48, 101, "Input",ExpressionUUID->"32d0b600-1f15-474d-ad3b-f0523618fb95"],
Cell[CellGroupData[{
Cell[201624, 5078, 147, 3, 33, "Item",ExpressionUUID->"355b6c00-ac2e-4250-932a-92aa4739dafe",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[201774, 5083, 640, 19, 36, "Text",ExpressionUUID->"c0732ef1-c401-426b-aa1f-bcc5268842cb",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[202417, 5104, 1277, 37, 78, "Input",ExpressionUUID->"79394e91-c038-45f9-a338-56c57ae3bbc6",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[203697, 5143, 897, 19, 60, "Text",ExpressionUUID->"3d2ffe28-8ccb-4398-8c76-af639ed61f4a",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[204597, 5164, 4320, 105, 285, "Input",ExpressionUUID->"addeb727-b8e6-4b77-ba2c-a9a92ca0e760",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[208920, 5271, 647, 19, 36, "Text",ExpressionUUID->"458fccd4-1973-4a13-b7b1-95fb2250fa1d",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[209570, 5292, 1279, 37, 78, "Input",ExpressionUUID->"a6829ea1-b2d9-49fc-9701-89c3c692948d",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[210852, 5331, 937, 21, 60, "Text",ExpressionUUID->"240b7621-241f-4814-a3f6-024c7ad7648b",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[211792, 5354, 4350, 107, 285, "Input",ExpressionUUID->"81684214-4201-4ff5-883a-2c81dade93e1",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[216145, 5463, 647, 19, 36, "Text",ExpressionUUID->"2ff79d8d-5be9-458d-a385-8dc54813b925",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[216795, 5484, 1279, 37, 78, "Input",ExpressionUUID->"6c9081ba-f5d8-4994-8ed8-7b67bf972ac6",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[218077, 5523, 4190, 104, 239, "Input",ExpressionUUID->"e7faed67-141f-4926-bb46-f89604974415",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[222270, 5629, 651, 19, 36, "Text",ExpressionUUID->"f39303db-d1db-410f-b754-44684e92d74b",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[222924, 5650, 1306, 37, 101, "Input",ExpressionUUID->"75441b51-d6c5-44bb-9e51-a6cea373e038",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[224233, 5689, 937, 21, 60, "Text",ExpressionUUID->"017a87be-074f-4bb0-8b4d-2e0933902804",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[225173, 5712, 4359, 107, 285, "Input",ExpressionUUID->"66fe8a24-2571-40f4-876c-7dd369d90036",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[229569, 5824, 155, 3, 29, "Item",ExpressionUUID->"00768868-8bf6-4399-bd6b-90126ec3154f",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[229727, 5829, 164, 3, 70, "Text",ExpressionUUID->"9626474e-f5da-41a1-82ea-4fec3498faa4",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[229894, 5834, 824, 22, 70, "Input",ExpressionUUID->"9912a0d6-e726-4395-9d85-8c930c75443d",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[230721, 5858, 779, 16, 70, "Text",ExpressionUUID->"442d8e11-1ab9-4cc4-bbda-f911327bd915",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[231503, 5876, 16263, 398, 70, "Input",ExpressionUUID->"bebf2a99-d950-4ae3-a828-9ce4bd97e569",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[247803, 6279, 163, 3, 29, "Item",ExpressionUUID->"8b4ba894-5f95-496a-a32a-2214c0214e4d",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[247969, 6284, 164, 3, 36, "Text",ExpressionUUID->"359c28d6-a497-4b9a-8034-76c605ca0f4a",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[248136, 6289, 798, 21, 31, "Input",ExpressionUUID->"03793bac-a42e-424e-b255-789a7264e5f1",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[248937, 6312, 16241, 398, 730, "Input",ExpressionUUID->"1d65b70e-be39-47ca-8a60-0195eb77e1b2",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[265181, 6712, 901, 17, 60, "Text",ExpressionUUID->"3301732d-7446-466c-bc73-99b95d191cc5",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[266119, 6734, 223, 6, 29, "Item",ExpressionUUID->"5a5f425b-3309-483f-aad1-c6edac30e3b3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[266345, 6742, 220, 6, 36, "Text",ExpressionUUID->"307e8066-5055-457b-ab05-69b06ce856e6",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[266568, 6750, 10383, 266, 653, "Input",ExpressionUUID->"64d5f5c5-2aaa-4d95-9595-238133080adb",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[276954, 7018, 3198, 76, 285, "Input",ExpressionUUID->"8eef9ec3-b209-4dce-8a8f-bc488687b41a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[280155, 7096, 2836, 76, 263, "Input",ExpressionUUID->"d4a4408c-3db7-4304-abd4-3e662989cbce",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[282994, 7174, 1504, 42, 101, "Input",ExpressionUUID->"424892f9-44de-4517-8210-b7556db67f9f",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[284501, 7218, 1505, 42, 101, "Input",ExpressionUUID->"7d499801-7707-470a-b17b-62f52a80733b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[286009, 7262, 830, 18, 60, "Text",ExpressionUUID->"fdaf5c03-1347-47a4-ba28-af9098c137ae",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[286842, 7282, 1259, 34, 79, "Input",ExpressionUUID->"447a6565-d17f-4815-a1ac-db6008a2e5b5",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[288104, 7318, 1676, 45, 125, "Input",ExpressionUUID->"42e4153a-ae53-4955-96a9-90c9a59c29e3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[289783, 7365, 2377, 62, 171, "Input",ExpressionUUID->"1324cd74-5edb-497d-9883-a75e299b6560",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[292163, 7429, 809, 17, 60, "Text",ExpressionUUID->"439390e9-0bfb-4562-89bc-7e7e04d18f0b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[292975, 7448, 1268, 35, 102, "Input",ExpressionUUID->"522bf9aa-61cc-4df3-8e76-02d86f2c1771",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[294246, 7485, 1658, 45, 125, "Input",ExpressionUUID->"a5bfbbba-7abc-4705-b018-de5b373bd5d1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[295907, 7532, 2358, 62, 148, "Input",ExpressionUUID->"0e12fbb5-4861-43c6-a3a0-1692f5aeb132",
 Evaluatable->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[298268, 7596, 460, 12, 36, "Text",ExpressionUUID->"bffa6eab-6128-47e3-a941-21a4d5d221f3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[298731, 7610, 1436, 37, 102, "Input",ExpressionUUID->"7d7ee2cc-7599-49d1-b8f0-4d296dbe707e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[300170, 7649, 256, 6, 36, "Text",ExpressionUUID->"fb84627e-5356-4d4b-ad85-fc761581c067",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[300429, 7657, 1954, 54, 102, "Input",ExpressionUUID->"3e4b9f1c-899b-4dc6-95e1-c1f98a6c80af",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[302386, 7713, 553, 13, 60, "Text",ExpressionUUID->"7101ff3f-c272-497f-8b43-0c126c1f8c2d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[302942, 7728, 1371, 38, 78, "Input",ExpressionUUID->"eeafc362-b1a2-4501-a3f5-1405692a6781",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[304316, 7768, 343, 10, 36, "Text",ExpressionUUID->"00f31b6e-df08-4082-940c-fd0bba862c8a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[304662, 7780, 955, 28, 55, "Input",ExpressionUUID->"fb57f780-cc6a-4a45-ad46-56323795d1e2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[305620, 7810, 168, 3, 36, "Text",ExpressionUUID->"d6b30169-d098-4738-9689-0bf2d9efa5cd",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[305791, 7815, 4384, 112, 354, "Input",ExpressionUUID->"9017cb67-e252-44f4-8043-67b55ea001ff",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[310178, 7929, 1039, 24, 76, "Text",ExpressionUUID->"58e1d979-4c15-4e97-a74d-ef60bc1a1a6d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[311254, 7958, 390, 8, 29, "Item",ExpressionUUID->"0be1fbab-1dec-4f1a-b929-25d65090157b",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[311647, 7968, 449, 11, 36, "Text",ExpressionUUID->"bfad9668-b459-4757-aab2-88f5969b0d50",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[312099, 7981, 1274, 36, 55, "Input",ExpressionUUID->"8bb530dc-95aa-4b6a-8019-f4ee2256ac74",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[313376, 8019, 3045, 75, 217, "Input",ExpressionUUID->"cb1a5e06-d6dd-45fe-ba9e-be34aa0cf8a8",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[316470, 8100, 245, 10, 37, "Subsubsection",ExpressionUUID->"e2a96baa-47f0-4f92-bf63-74067dd81ef8"],
Cell[316718, 8112, 416, 11, 36, "Text",ExpressionUUID->"92a19aa5-4a51-410d-ad5c-aa36f3a43068",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[317137, 8125, 19384, 445, 1872, "Input",ExpressionUUID->"18bb5eec-fbd6-4a59-bf3e-88fd4576ad9d"],
Cell[336524, 8572, 486, 15, 36, "Text",ExpressionUUID->"3bf21853-2a3c-425b-975a-66491ac3c9cb",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[337013, 8589, 3186, 79, 309, "Input",ExpressionUUID->"2e867d9e-b84d-44df-b321-752805289dec"],
Cell[340202, 8670, 246, 6, 36, "Text",ExpressionUUID->"d0f46017-df4c-4e74-adfc-24cc842507cf",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[340451, 8678, 2095, 53, 125, "Input",ExpressionUUID->"891e92eb-0e8f-4778-b80e-0726d2bdd370"]
}, Closed]],
Cell[CellGroupData[{
Cell[342583, 8736, 221, 10, 37, "Subsubsection",ExpressionUUID->"b7167849-e29f-4adb-b633-7d62b9f2acf5"],
Cell[342807, 8748, 409, 8, 36, "Text",ExpressionUUID->"52d4e086-26ba-4e5c-b802-26ca6d77afe7",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[343219, 8758, 291, 4, 36, "Text",ExpressionUUID->"77a4d372-f3de-4fb6-a8ac-3b0360093a29"],
Cell[343513, 8764, 581, 10, 60, "Text",ExpressionUUID->"930e2f45-aa74-492c-bddb-51ea41f22bb0"],
Cell[344097, 8776, 111, 0, 36, "Text",ExpressionUUID->"615e2e5e-1158-44d3-ae93-14baac1f2249"],
Cell[344211, 8778, 4993, 134, 377, "Input",ExpressionUUID->"f17c5dca-4d8f-464d-9fb8-dee3be310239"]
}, Closed]],
Cell[CellGroupData[{
Cell[349241, 8917, 250, 10, 37, "Subsubsection",ExpressionUUID->"678624ab-5cd1-4468-a812-34f05aac1122"],
Cell[349494, 8929, 455, 10, 60, "Text",ExpressionUUID->"5647c695-e310-4afc-b287-bedd7e8cb38c",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[349952, 8941, 325, 9, 31, "Input",ExpressionUUID->"37eee292-7004-4ffd-a5f0-59a1bd2bb2a2"],
Cell[350280, 8952, 3845, 101, 263, "Input",ExpressionUUID->"a9324bd4-cf17-4377-8267-91d6b66ce402"],
Cell[354128, 9055, 162, 3, 36, "Text",ExpressionUUID->"083c9b66-babf-4219-946d-3dd5d8a7a275",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[354293, 9060, 1166, 33, 103, "Input",ExpressionUUID->"12a78ab1-a7c7-4c33-b26c-5f6c2b7f6881"],
Cell[355462, 9095, 274, 4, 36, "Text",ExpressionUUID->"a597b444-f8d8-46f3-9342-16293deb9f93"],
Cell[355739, 9101, 159, 4, 31, "Input",ExpressionUUID->"84181645-666d-4bbb-a3da-362a3bd0e096"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[355959, 9112, 140, 4, 68, "Section",ExpressionUUID->"94c9fa84-bdb6-442c-a5ee-d807e475d8b6"],
Cell[356102, 9118, 417, 7, 58, "Text",ExpressionUUID->"2689dbbd-e650-448b-9602-cff530178fa6"],
Cell[356522, 9127, 1494, 29, 113, "Input",ExpressionUUID->"9a2c2391-ceee-499a-b866-8da8b79af742"],
Cell[358019, 9158, 409, 9, 51, "Input",ExpressionUUID->"4fb5f8c7-76ef-42b6-a8e7-1218b29d146c"],
Cell[358431, 9169, 85, 0, 35, "Text",ExpressionUUID->"7c389cbc-04be-44b6-b532-be981c4a0f38"],
Cell[358519, 9171, 192, 5, 35, "Text",ExpressionUUID->"079f0941-ea2f-40ea-84ea-5d0e245b88d7"],
Cell[358714, 9178, 546, 11, 58, "Text",ExpressionUUID->"fa4f22a7-e1ec-460a-be5c-68894c0fef32"],
Cell[359263, 9191, 290, 7, 29, "Input",ExpressionUUID->"382ceea2-835b-4689-846a-4d7f7a06c67a"],
Cell[359556, 9200, 284, 7, 29, "Input",ExpressionUUID->"276b40a7-5ee4-41c3-9cc9-1efff3b5e528"],
Cell[359843, 9209, 285, 7, 29, "Input",ExpressionUUID->"b0f86863-a141-42cb-af65-ee645befd0b5"],
Cell[360131, 9218, 275, 7, 29, "Input",ExpressionUUID->"619bd5f9-aeca-4a9c-b6eb-358ff2cd95a1"],
Cell[360409, 9227, 492, 10, 71, "Input",ExpressionUUID->"c8662328-e4ed-4e92-9f3d-f0206af5add6"],
Cell[360904, 9239, 366, 11, 35, "Text",ExpressionUUID->"11439d0f-cdff-4fba-ae18-3ac42b8fb419"],
Cell[361273, 9252, 910, 16, 113, "Input",ExpressionUUID->"54aa302b-5363-4520-a4c2-8e02b738e841"],
Cell[362186, 9270, 216, 6, 29, "Input",ExpressionUUID->"cde335d4-f84d-4f98-af43-3dda2d30a506"],
Cell[362405, 9278, 1008, 18, 113, "Input",ExpressionUUID->"cacefd1b-9c65-4bea-ad17-1894d26f74da"],
Cell[363416, 9298, 212, 6, 29, "Input",ExpressionUUID->"bf26f563-ee7a-4ca2-9c2b-e7cd9eb80618"],
Cell[363631, 9306, 1081, 18, 133, "Input",ExpressionUUID->"f632f8ba-8df1-45aa-9fcb-087a04a665ea"],
Cell[364715, 9326, 212, 6, 29, "Input",ExpressionUUID->"b2e9e164-7893-4ec7-93df-9639fdb7f30a"],
Cell[364930, 9334, 259, 6, 58, "Text",ExpressionUUID->"5cfd98e0-5b33-4cba-91ed-f6a7eef4b381"],
Cell[365192, 9342, 1104, 19, 133, "Input",ExpressionUUID->"25d12f0b-193b-4dda-9018-55f5b5c5350b"],
Cell[366299, 9363, 212, 6, 29, "Input",ExpressionUUID->"78bddc09-a55d-42b7-bd0a-93e412724c92"],
Cell[366514, 9371, 1108, 19, 133, "Input",ExpressionUUID->"19610402-6577-4a88-a56e-6a14d59fbaab"],
Cell[367625, 9392, 213, 6, 29, "Input",ExpressionUUID->"4c9368d7-9c75-41db-b42d-dfe2a262006e"],
Cell[367841, 9400, 1093, 19, 133, "Input",ExpressionUUID->"8ba322de-68c1-4533-9dee-5bebada78e8e"],
Cell[368937, 9421, 212, 6, 29, "Input",ExpressionUUID->"4ca1862a-2051-42e8-a19d-aba51db598be"],
Cell[369152, 9429, 194, 3, 35, "Text",ExpressionUUID->"8de6acdf-886e-4d48-89a5-8e1f949a83ba"],
Cell[369349, 9434, 331, 7, 29, "Input",ExpressionUUID->"6244ddc6-32c0-4c53-8d69-e3f15d48baaa",
 Evaluatable->False],
Cell[369683, 9443, 359, 7, 71, "Input",ExpressionUUID->"d4efee08-5c33-490f-aa4b-e3676f2ec224",
 Evaluatable->False],
Cell[370045, 9452, 461, 8, 71, "Input",ExpressionUUID->"e576a8f3-5f9a-4bf5-a487-90530cc1c5bf",
 Evaluatable->False],
Cell[370509, 9462, 423, 8, 71, "Input",ExpressionUUID->"2c7588cd-daa2-4ae4-b955-398e750eb8b0",
 Evaluatable->False],
Cell[370935, 9472, 311, 6, 29, "Input",ExpressionUUID->"818295e0-afaa-4c16-a920-a5b8c34faed1",
 Evaluatable->False],
Cell[371249, 9480, 98, 0, 35, "Text",ExpressionUUID->"fe6d1f4e-70ad-48d9-a714-01f426bdacb8"],
Cell[371350, 9482, 2334, 39, 339, "Input",ExpressionUUID->"bd8baedf-512f-4065-a614-d91ddeef8e2a"],
Cell[373687, 9523, 1645, 27, 236, "Input",ExpressionUUID->"43efd9c9-8ba3-4ca5-a2cb-0a263cd8103f"],
Cell[375335, 9552, 222, 6, 29, "Input",ExpressionUUID->"60ddf78d-0917-4f73-aa31-734071e535cd"],
Cell[375560, 9560, 259, 7, 29, "Input",ExpressionUUID->"8051c5e2-dbe7-4c14-9ed4-10c564d00d4a"],
Cell[375822, 9569, 338, 8, 29, "Input",ExpressionUUID->"7fb7b715-f418-4107-8bce-b2959ec56081"],
Cell[376163, 9579, 362, 8, 51, "Input",ExpressionUUID->"ab5f453b-c100-42e7-a900-d2e252603db3"],
Cell[376528, 9589, 324, 8, 29, "Input",ExpressionUUID->"bad5055a-8f4b-4cc2-bb63-9a9c63f63a31"],
Cell[376855, 9599, 359, 8, 51, "Input",ExpressionUUID->"d1ae9238-23a8-40a9-bfda-9fab45e9ab7d"],
Cell[377217, 9609, 381, 8, 51, "Input",ExpressionUUID->"262e5730-f1ac-4982-99b2-6421312f69c7"],
Cell[377601, 9619, 369, 8, 51, "Input",ExpressionUUID->"97da4b43-9336-4e74-89f4-6ca4de750221"],
Cell[377973, 9629, 849, 14, 113, "Input",ExpressionUUID->"d13c1d7a-f43c-4b53-80b8-a8d5f11ece9c"],
Cell[378825, 9645, 839, 18, 92, "Input",ExpressionUUID->"f8c87548-a7e8-450e-8550-38af95f59cd4"],
Cell[379667, 9665, 429, 9, 71, "Input",ExpressionUUID->"ade821c9-0118-4c3f-b1b5-900b916ca986"],
Cell[380099, 9676, 472, 9, 71, "Input",ExpressionUUID->"641c5424-2cf6-4635-8177-76013c468bbe"],
Cell[380574, 9687, 472, 10, 71, "Input",ExpressionUUID->"b27850dd-40d0-404c-b013-d330db6787df"],
Cell[381049, 9699, 549, 10, 92, "Input",ExpressionUUID->"0e023f4d-15c7-4116-8afa-39d964b58fcd"],
Cell[381601, 9711, 603, 11, 92, "Input",ExpressionUUID->"cc7660da-f93a-4b11-98b7-294a8745ff3b"],
Cell[382207, 9724, 161, 4, 29, "Input",ExpressionUUID->"ae83877f-7cbd-4270-93d0-66d35f040385"],
Cell[CellGroupData[{
Cell[382393, 9732, 227, 7, 54, "Subsection",ExpressionUUID->"84a94e28-33d9-4608-9ab2-3fba6764580b"],
Cell[382623, 9741, 274, 8, 35, "Text",ExpressionUUID->"7f3389da-126f-43d9-9036-906ee06b1009"],
Cell[382900, 9751, 1196, 38, 81, "Text",ExpressionUUID->"e77a1ef4-dc24-4e58-b49e-b1082062ee07"],
Cell[384099, 9791, 2043, 59, 174, "Input",ExpressionUUID->"d231b95c-c852-4d7b-8515-f1ba20bcb4b6"],
Cell[386145, 9852, 116, 0, 35, "Text",ExpressionUUID->"602a1fe4-1181-4333-983b-75d21ac46128"],
Cell[386264, 9854, 1368, 38, 71, "Input",ExpressionUUID->"7c656424-e49d-41fb-b7c5-184c4a404fcb"],
Cell[387635, 9894, 116, 0, 35, "Text",ExpressionUUID->"c14d5ef7-579f-4e65-9966-850bc9bbd4b3"],
Cell[387754, 9896, 262, 7, 29, "Input",ExpressionUUID->"228e3b1f-9bf9-486b-83ac-3b8160bc593f"],
Cell[388019, 9905, 573, 15, 58, "Text",ExpressionUUID->"c9725c37-2783-4ca1-a0ab-48ae74b865da"],
Cell[388595, 9922, 1073, 31, 92, "Input",ExpressionUUID->"bc9e2474-ae35-44e6-b03e-12d73e0fe706"],
Cell[389671, 9955, 371, 10, 29, "Input",ExpressionUUID->"fdc642c3-5ee6-4e9f-93f8-07493a8e4713"]
}, Open  ]],
Cell[CellGroupData[{
Cell[390079, 9970, 203, 7, 54, "Subsection",ExpressionUUID->"c4a8e051-e144-4158-b2de-282d927fc285"],
Cell[CellGroupData[{
Cell[390307, 9981, 234, 10, 45, "Subsubsection",ExpressionUUID->"8d2c1f00-591b-4b6d-bce1-3979b151deba"],
Cell[390544, 9993, 264, 6, 36, "Text",ExpressionUUID->"33d1fd10-1528-43a7-a3cc-6765debe4dea",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[390811, 10001, 6786, 183, 519, "Input",ExpressionUUID->"31099284-9089-4878-b327-9dc5d024f9b7"],
Cell[397600, 10186, 177, 3, 36, "Text",ExpressionUUID->"5dd01ae6-8476-4293-8b60-30b6406fab22",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[397780, 10191, 402, 11, 31, "Input",ExpressionUUID->"40dede22-7242-4794-9a65-1e0b70e708b3"]
}, Closed]],
Cell[CellGroupData[{
Cell[398219, 10207, 218, 10, 37, "Subsubsection",ExpressionUUID->"c536075c-62a4-487c-8311-242064e6ecfb"],
Cell[398440, 10219, 481, 12, 58, "Text",ExpressionUUID->"b3cb14e0-eae7-4a61-92f5-005007cdf060"],
Cell[398924, 10233, 365, 10, 35, "Text",ExpressionUUID->"aa4d26bf-8478-4974-85df-1cb202f726d8"],
Cell[399292, 10245, 230, 3, 35, "Text",ExpressionUUID->"73339649-8df3-4d46-8c39-6bdaab3888f3"],
Cell[399525, 10250, 801, 22, 29, "Input",ExpressionUUID->"1f8a9c8e-170e-490c-8138-411ae589c5b9",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[400363, 10277, 250, 10, 45, "Subsubsection",ExpressionUUID->"9ca6c5e4-41b7-43e3-83c6-3953203d92f9"],
Cell[400616, 10289, 88, 0, 36, "Text",ExpressionUUID->"1f6c4d24-4f45-43a1-a7c6-50ed0a917256"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[400753, 10295, 183, 7, 54, "Subsection",ExpressionUUID->"a62900ed-b279-404b-81d8-85f9b651fb39"],
Cell[CellGroupData[{
Cell[400961, 10306, 270, 13, 45, "Subsubsection",ExpressionUUID->"0a543b84-2e7f-434c-b124-a6be086d30ff"],
Cell[401234, 10321, 291, 6, 36, "Text",ExpressionUUID->"9094dc92-145d-45cd-aa4f-848ea85d5830"],
Cell[401528, 10329, 3088, 79, 308, "Input",ExpressionUUID->"d85816dd-3d3a-4cf1-b21b-b92016e63bad"],
Cell[404619, 10410, 260, 4, 60, "Text",ExpressionUUID->"e56b2386-5abf-432e-9968-b774c655fe62"],
Cell[404882, 10416, 5525, 147, 359, "Input",ExpressionUUID->"d082948a-1fd2-4ddf-92fe-e85f46d3e628"],
Cell[410410, 10565, 102, 0, 36, "Text",ExpressionUUID->"94a1a76b-c4d8-4d69-9b42-bcaae70300eb"],
Cell[410515, 10567, 429, 15, 33, "Input",ExpressionUUID->"34801117-5e83-4a45-8694-4522fc882b5e"],
Cell[410947, 10584, 1094, 31, 56, "Input",ExpressionUUID->"98902828-a1f8-441c-b9ac-5d5efdd3a09c"],
Cell[412044, 10617, 125, 0, 36, "Text",ExpressionUUID->"87e20aac-b4e0-4478-b9cd-428798323f78"],
Cell[412172, 10619, 584, 18, 31, "Input",ExpressionUUID->"2f999dd2-eaba-410a-900a-557f15bab918"],
Cell[412759, 10639, 1276, 39, 55, "Input",ExpressionUUID->"64a44bcd-e25a-47e7-a838-0d4b5bf79efc"],
Cell[414038, 10680, 206, 3, 36, "Text",ExpressionUUID->"f7d2ad1e-e704-4011-aded-ed43a0a04307"],
Cell[414247, 10685, 2074, 58, 101, "Input",ExpressionUUID->"72a59e0c-b446-4a14-b983-25b0993e5cf2"],
Cell[416324, 10745, 2367, 64, 217, "Input",ExpressionUUID->"26d193fc-3b02-4df0-b311-f19935f59b91"],
Cell[418694, 10811, 106, 0, 36, "Text",ExpressionUUID->"cf41bda3-7b88-4d6d-b5eb-d6a8f7d26924"],
Cell[418803, 10813, 613, 18, 31, "Input",ExpressionUUID->"6dd52d31-2b03-438a-af8b-7767510b45f8"]
}, Closed]],
Cell[CellGroupData[{
Cell[419453, 10836, 274, 11, 37, "Subsubsection",ExpressionUUID->"4cf3f2c0-5917-4164-bf4f-cdca7c184238"],
Cell[419730, 10849, 322, 8, 36, "Text",ExpressionUUID->"20558c36-3664-40ab-b33b-7d7965b3b445",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[420055, 10859, 1049, 24, 124, "Input",ExpressionUUID->"38bdbeb0-6e29-4c00-97f1-2f29b190a8b0"],
Cell[421107, 10885, 253, 6, 36, "Text",ExpressionUUID->"fc5dc490-4cc8-408a-bc8c-011993c08b60",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[421363, 10893, 390, 11, 31, "Input",ExpressionUUID->"69967c07-ef71-4430-8a81-d8a21805200a"],
Cell[421756, 10906, 4928, 125, 401, "Input",ExpressionUUID->"344452f5-3aa0-49ac-835f-edec00c70776"],
Cell[426687, 11033, 316, 7, 36, "Text",ExpressionUUID->"ff98eb19-3af0-40e7-afe1-b5cc0dfc45d4",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[427006, 11042, 3351, 85, 240, "Input",ExpressionUUID->"0cff690a-5d7f-4bff-a41c-b3a3d440baba"],
Cell[430360, 11129, 233, 6, 36, "Text",ExpressionUUID->"c8c3e373-71e7-4b43-b30e-0ac149b1bde3",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[430596, 11137, 4637, 115, 378, "Input",ExpressionUUID->"fe8e12e2-fee0-4c9b-9f8d-576c546c53e5"],
Cell[435236, 11254, 573, 17, 31, "Input",ExpressionUUID->"1e70b1c9-a246-4052-b455-4d9809ae7834"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[435858, 11277, 255, 8, 54, "Subsection",ExpressionUUID->"c9df98d3-ca60-4eb2-b344-c657f5b39844"],
Cell[436116, 11287, 703, 12, 108, "Text",ExpressionUUID->"5c4c0480-ee81-45db-bdc4-93b9d8e5eda1"],
Cell[436822, 11301, 569, 14, 147, "Input",ExpressionUUID->"8bb1937b-98d2-48aa-baab-e617ca9245d1"],
Cell[CellGroupData[{
Cell[437416, 11319, 212, 10, 46, "Subsubsection",ExpressionUUID->"967dea32-c1d9-41f3-a1ae-c0ce942bab83"],
Cell[437631, 11331, 5525, 172, 266, "Input",ExpressionUUID->"8323b868-11c1-4316-bdce-c335d8396994"],
Cell[443159, 11505, 684, 14, 60, "Text",ExpressionUUID->"c71efdac-cd74-4b33-9ce3-7fab5f8e64a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[443880, 11524, 206, 10, 46, "Subsubsection",ExpressionUUID->"b0bfdbb7-d6c0-41b6-bb13-66b36655b036"],
Cell[444089, 11536, 1272, 26, 156, "Text",ExpressionUUID->"9c3003ed-0b98-437c-aa4d-040c08e607f1"],
Cell[445364, 11564, 115, 0, 36, "Text",ExpressionUUID->"242d8632-58b1-4351-83b9-99ae75242b04"],
Cell[445482, 11566, 6825, 200, 400, "Input",ExpressionUUID->"54a536bc-217a-4d36-81f3-c20796f2b279"],
Cell[452310, 11768, 113, 0, 36, "Text",ExpressionUUID->"f4d9b477-3367-4439-88d9-dce9708e5327"],
Cell[452426, 11770, 4106, 117, 201, "Input",ExpressionUUID->"bb7771a4-d74f-488f-8c5a-6ae12f746956"],
Cell[456535, 11889, 3874, 114, 201, "Input",ExpressionUUID->"b62a3453-aabf-4042-b007-24514f30e4ee"],
Cell[460412, 12005, 3790, 114, 147, "Input",ExpressionUUID->"36192cb6-8adb-4232-9aa7-50a863e14e09"],
Cell[464205, 12121, 3668, 110, 101, "Input",ExpressionUUID->"37f7fd2c-a502-416a-b3a3-da396df64a9a"],
Cell[467876, 12233, 3731, 110, 101, "Input",ExpressionUUID->"26b6263b-cfd6-429e-8f4b-918eeda80b37"],
Cell[471610, 12345, 3147, 92, 101, "Input",ExpressionUUID->"bd21d5f9-d937-47b5-a43c-f66bc7c77cc9"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[474806, 12443, 280, 9, 38, "Subsection",ExpressionUUID->"a8aceff9-a87b-42e5-8dfc-a90c786d9977"],
Cell[475089, 12454, 302, 8, 36, "Text",ExpressionUUID->"5330e783-1866-4883-ae54-1ef2a1ca93d2"],
Cell[475394, 12464, 2080, 56, 193, "Input",ExpressionUUID->"83e5cb03-21f4-4caf-9e70-ca3ba5de882d"],
Cell[477477, 12522, 515, 14, 36, "Text",ExpressionUUID->"ccd3f2e7-9148-4ecd-8fb4-712e2e5e0c70"],
Cell[477995, 12538, 1062, 21, 108, "Text",ExpressionUUID->"b0a42307-735a-4360-a53a-761934847ac2"],
Cell[479060, 12561, 2438, 67, 216, "Input",ExpressionUUID->"96f86582-6adb-4250-a80f-9bc25d05acf5"],
Cell[481501, 12630, 269, 5, 36, "Text",ExpressionUUID->"252d3d30-e0a6-4528-880d-d5796471fdb1"],
Cell[481773, 12637, 794, 23, 36, "Text",ExpressionUUID->"92e30106-00ff-47f0-99fd-a4df8bec1d5a"],
Cell[482570, 12662, 219, 5, 36, "Text",ExpressionUUID->"81b9dc61-8531-4e06-960b-3c6cbf234918"],
Cell[482792, 12669, 2313, 69, 124, "Input",ExpressionUUID->"358a07af-05de-4b55-9ffe-86a8abc9074c"],
Cell[485108, 12740, 2306, 69, 124, "Input",ExpressionUUID->"0b5b3de3-17d5-46a1-a471-da7eb1565938"],
Cell[487417, 12811, 340, 9, 36, "Text",ExpressionUUID->"0f74d4ad-5b8d-498a-a244-85d3981dcd46"],
Cell[487760, 12822, 1622, 48, 101, "Input",ExpressionUUID->"5e89b10f-1684-48ab-81bc-fd567460ae6b"]
}, Closed]],
Cell[CellGroupData[{
Cell[489419, 12875, 203, 8, 38, "Subsection",ExpressionUUID->"7695be57-3f3b-44a9-8a8b-5c23e4b265a4"],
Cell[489625, 12885, 255, 6, 70, "Text",ExpressionUUID->"4a350b32-9138-4aa9-84a0-a5b38f27dec1"],
Cell[489883, 12893, 265, 7, 70, "Input",ExpressionUUID->"9a64fc49-d22e-4a1c-a972-af4534f920c6"],
Cell[490151, 12902, 840, 25, 70, "Input",ExpressionUUID->"8a86b558-6cec-48be-bbf1-3bf037f613fb"],
Cell[490994, 12929, 696, 20, 70, "Input",ExpressionUUID->"48207d98-fe2d-4efd-b855-fe98cce579b0"]
}, Closed]],
Cell[CellGroupData[{
Cell[491727, 12954, 239, 8, 38, "Subsection",ExpressionUUID->"85654450-a970-4086-9d91-06c19b83cdcb"],
Cell[CellGroupData[{
Cell[491991, 12966, 311, 11, 45, "Subsubsection",ExpressionUUID->"e2f24493-7542-43db-b94b-2ea51686d25b"],
Cell[492305, 12979, 199, 3, 36, "Text",ExpressionUUID->"6c119003-b38f-4dd8-af42-f61c17389d9c"],
Cell[CellGroupData[{
Cell[492529, 12986, 180, 3, 55, "Input",ExpressionUUID->"00654b36-7ee8-4f6d-a8a8-430e98085f71",
 Evaluatable->False],
Cell[492712, 12991, 842, 19, 59, "Output",ExpressionUUID->"d2ca4bfe-e20f-4e6a-9da7-b4ff1e1b74a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[493591, 13015, 463, 12, 55, "Input",ExpressionUUID->"8338534b-f278-44c8-9dd1-65b24649a503",
 Evaluatable->False],
Cell[494057, 13029, 824, 12, 92, "Print",ExpressionUUID->"7c9d16fb-0a14-4446-b80a-ad96e4c9da0b"],
Cell[494884, 13043, 12469, 277, 67, "Output",ExpressionUUID->"92fa9612-8704-42c7-85e4-4c1f8f86a731"]
}, Open  ]],
Cell[507368, 13323, 488, 14, 55, "Input",ExpressionUUID->"d70f5406-c802-46fa-afee-be23e606e6f7",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[507893, 13342, 221, 10, 37, "Subsubsection",ExpressionUUID->"14de2333-5152-4197-8ae7-ee605722393c"],
Cell[508117, 13354, 585, 12, 60, "Text",ExpressionUUID->"3ea69762-6a84-442f-aa16-e4c99563a62c"],
Cell[508705, 13368, 2921, 78, 193, "Input",ExpressionUUID->"056a8a0d-d52a-47d2-ad44-57e1bdc00726"],
Cell[511629, 13448, 188, 3, 36, "Text",ExpressionUUID->"86b48b07-c41b-4d00-b0e6-a1b21633887e"],
Cell[511820, 13453, 3264, 87, 216, "Input",ExpressionUUID->"6587a7b3-fa74-4469-aa5b-8d243aff74b0",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[515121, 13545, 342, 14, 37, "Subsubsection",ExpressionUUID->"5d97638b-a6bc-47bf-9962-cc2d1685e6f6"],
Cell[CellGroupData[{
Cell[515488, 13563, 205, 5, 32, "Item",ExpressionUUID->"829aad39-3e08-4363-9dcf-ec9c2acbb933",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[515696, 13570, 268, 6, 36, "Text",ExpressionUUID->"db996de3-b64e-401e-ab90-6069c72cc9da",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[515967, 13578, 630, 11, 60, "Text",ExpressionUUID->"854dba88-575b-4965-b734-24f13664aeea",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[516600, 13591, 411, 8, 60, "Text",ExpressionUUID->"212b8c4d-3c6d-431f-b34c-ee6befc4f4af",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[517014, 13601, 895, 19, 60, "Text",ExpressionUUID->"28a4ab7c-01b8-49ad-a117-886d302f6f89",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[517912, 13622, 9698, 256, 538, "Input",ExpressionUUID->"2866123b-71e6-4500-b680-c8de0c7f06e8",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[527613, 13880, 191, 3, 36, "Text",ExpressionUUID->"c4568d30-c21f-4b9f-b6aa-cc0a49d0cb45"],
Cell[527807, 13885, 1099, 28, 78, "Input",ExpressionUUID->"06dc5628-111e-4101-beea-b872d1160f1b"],
Cell[528909, 13915, 1106, 29, 78, "Input",ExpressionUUID->"0325b2ad-41d0-4a9e-ab18-2ddde716dc81"]
}, Closed]],
Cell[CellGroupData[{
Cell[530052, 13949, 189, 3, 28, "Item",ExpressionUUID->"109455b9-911c-4e1f-b69c-d50257d10caf",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[530244, 13954, 659, 11, 60, "Text",ExpressionUUID->"a5a7ae99-b472-431b-b5fc-af5d2723292d",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[530906, 13967, 5919, 161, 308, "Input",ExpressionUUID->"6d028b5e-1c98-46aa-9585-1fa40f4fdde1",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]],
Cell[CellGroupData[{
Cell[536862, 14133, 205, 5, 28, "Item",ExpressionUUID->"052cb297-b77a-40dd-b62c-5b90d4bc3c2e",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[537070, 14140, 463, 9, 60, "Text",ExpressionUUID->"3a1e7fed-422f-4667-90a1-42b708a91152",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[537536, 14151, 5327, 146, 400, "Input",ExpressionUUID->"a4521bb2-27fb-4506-9791-910a06308c07",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[542866, 14299, 191, 3, 36, "Text",ExpressionUUID->"bb635bfe-d382-4941-8012-b3395590a9cd"],
Cell[543060, 14304, 1118, 30, 78, "Input",ExpressionUUID->"8784d2a7-f062-422f-8810-d68d587f3ca1"],
Cell[544181, 14336, 1115, 29, 78, "Input",ExpressionUUID->"5c35e9e1-2974-4e22-b01f-83077ce9558a"]
}, Closed]],
Cell[CellGroupData[{
Cell[545333, 14370, 218, 6, 28, "Item",ExpressionUUID->"0c5ad0b3-e3c8-446a-b8d2-79ee3aa2bac6",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[545554, 14378, 240, 6, 36, "Text",ExpressionUUID->"ab5525bb-473a-453b-a6af-611a68d264e6",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[545797, 14386, 1384, 40, 55, "Input",ExpressionUUID->"4ff53f18-931f-4943-a2ee-2e61287e832b",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[547184, 14428, 1385, 40, 55, "Input",ExpressionUUID->"2bd666eb-a136-4743-b578-5f29dbea0975",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[548572, 14470, 352, 7, 36, "Text",ExpressionUUID->"a3ccd934-a7a1-473f-9443-b28f5f2e1345",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[548927, 14479, 2663, 76, 101, "Input",ExpressionUUID->"d1bf0dc2-8754-4186-896a-dfc276665fc2",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[551593, 14557, 191, 3, 36, "Text",ExpressionUUID->"c107d3a7-65aa-48be-8ff8-a5894333eaaf"],
Cell[551787, 14562, 1190, 31, 79, "Input",ExpressionUUID->"3322879b-e4a9-41a1-88dc-55a832950a43"],
Cell[552980, 14595, 1199, 32, 79, "Input",ExpressionUUID->"7c60e1fb-9cd9-4a98-8744-f9473ebb8a57"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[554228, 14633, 229, 10, 45, "Subsubsection",ExpressionUUID->"d81635c8-8de8-4f33-852f-7a9068b7c98e"],
Cell[554460, 14645, 548, 13, 60, "Text",ExpressionUUID->"fa1e69b3-e8a8-4369-aef7-ad50a1b71c85",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[555011, 14660, 479, 13, 31, "Input",ExpressionUUID->"ec2a8ef9-4a7f-4273-9768-a0fe524c1905"],
Cell[555493, 14675, 594, 18, 60, "Text",ExpressionUUID->"51c92034-3f12-496f-8730-5abe2aef0613",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[556090, 14695, 899, 26, 31, "Input",ExpressionUUID->"89e1f5cd-7dae-4686-a83b-10e0fc105b6b"],
Cell[556992, 14723, 910, 28, 31, "Input",ExpressionUUID->"672d679c-6efa-424d-97e9-db1031d0c155"],
Cell[557905, 14753, 414, 10, 36, "Text",ExpressionUUID->"c445d15b-00b3-41f5-8443-ca5c4567a6cc",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[558322, 14765, 1406, 40, 78, "Input",ExpressionUUID->"45c72040-5346-4b64-b018-29c845039c75"],
Cell[559731, 14807, 171, 3, 36, "Text",ExpressionUUID->"53cc7b76-4d21-480c-afd5-0e02ebf6664a",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[559905, 14812, 585, 17, 31, "Input",ExpressionUUID->"aa89f28e-74a9-432a-a7d5-dac1c5802503"],
Cell[560493, 14831, 235, 6, 36, "Text",ExpressionUUID->"be1e035c-5046-4245-b654-b9ce10d4a12a",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[560731, 14839, 1044, 30, 55, "Input",ExpressionUUID->"4bc3a8f9-2ddd-40d6-a190-970e7b0e7be2"],
Cell[561778, 14871, 1046, 30, 55, "Input",ExpressionUUID->"15f3191a-397d-41cc-bcdf-ee744a75761f"],
Cell[562827, 14903, 212, 5, 36, "Text",ExpressionUUID->"acd7f983-37e6-4cdc-9347-c16819a9548d",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[563042, 14910, 591, 16, 31, "Input",ExpressionUUID->"88397326-d5b5-43ee-98b4-024e9d1c3f02"],
Cell[563636, 14928, 185, 3, 36, "Text",ExpressionUUID->"c0b5bac7-3af4-4c8c-9b40-2c8e306b9105"],
Cell[563824, 14933, 1610, 42, 125, "Input",ExpressionUUID->"d470ece5-6b9a-4a11-9b64-1aca2636c05b"],
Cell[565437, 14977, 1607, 41, 125, "Input",ExpressionUUID->"6ffb0be9-e434-4c53-8aeb-388557aa7851"]
}, Closed]],
Cell[CellGroupData[{
Cell[567081, 15023, 236, 10, 37, "Subsubsection",ExpressionUUID->"602ab620-c63f-46ce-9af1-a8bfe920b639"],
Cell[567320, 15035, 248, 6, 35, "Text",ExpressionUUID->"5374b4dd-68e0-4c86-933e-9d5c2ef7c3f9"],
Cell[567571, 15043, 645, 9, 81, "Text",ExpressionUUID->"38a71231-42fd-4520-8561-f2d1697414a7"],
Cell[568219, 15054, 2212, 57, 154, "Input",ExpressionUUID->"2d82903a-0ba8-452a-b1b3-679e3df9d3e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[570468, 15116, 232, 10, 45, "Subsubsection",ExpressionUUID->"81c4db85-e744-436d-8d84-2fda9df44134"],
Cell[570703, 15128, 308, 9, 36, "Text",ExpressionUUID->"4936ce43-ec1a-44ff-90c6-864dd3ea56f9",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[571014, 15139, 1880, 49, 147, "Input",ExpressionUUID->"5ed0c813-9ace-4b35-8b74-6f28c6db4842"],
Cell[572897, 15190, 109, 2, 31, "Input",ExpressionUUID->"d27fb44b-fdf5-41bd-8d0c-e698f5792fe9"]
}, Closed]],
Cell[CellGroupData[{
Cell[573043, 15197, 259, 10, 37, "Subsubsection",ExpressionUUID->"b29d3395-8734-48c6-9de1-f8d0b643401b"],
Cell[573305, 15209, 105, 0, 36, "Text",ExpressionUUID->"ccfb5ffa-9966-4f3c-8517-6ffa8d38153d"],
Cell[573413, 15211, 378, 6, 36, "Text",ExpressionUUID->"c3aebbbd-4044-4685-a57d-c7979dba5547"],
Cell[573794, 15219, 1155, 32, 78, "Input",ExpressionUUID->"6c42c073-88d0-4689-87db-1403aaabba28"],
Cell[574952, 15253, 1439, 38, 101, "Input",ExpressionUUID->"e2e5cce5-5a33-4928-85ee-0a6fa49aaabd"],
Cell[576394, 15293, 106, 0, 36, "Text",ExpressionUUID->"a7781fed-513f-40d4-82aa-1ec259a79744"],
Cell[576503, 15295, 1391, 37, 101, "Input",ExpressionUUID->"dc0fd9f1-4764-4a15-89a3-97c72bc5181a"],
Cell[577897, 15334, 111, 0, 36, "Text",ExpressionUUID->"b2efd4b9-771c-45a8-a5f5-f6a08af68345"],
Cell[578011, 15336, 1651, 45, 124, "Input",ExpressionUUID->"af1d9480-3ea8-4624-b40d-bbe6bf7f46fa"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[579711, 15387, 208, 7, 54, "Subsection",ExpressionUUID->"9842db4f-7771-4a2c-a368-bdec5ed23ca8"],
Cell[CellGroupData[{
Cell[579944, 15398, 338, 13, 45, "Subsubsection",ExpressionUUID->"f6a2b87b-9402-467a-b60e-fe0f7dfa7061"],
Cell[580285, 15413, 483, 7, 60, "Text",ExpressionUUID->"4e6b59c2-fcdc-4a5c-b25a-af456f2b083b"],
Cell[580771, 15422, 590, 14, 60, "Text",ExpressionUUID->"73149cf0-6e09-4b6d-bf54-aab072a074f4"],
Cell[581364, 15438, 733, 22, 60, "Text",ExpressionUUID->"cbcd8db5-7c82-4d01-88aa-1b9b8ac5656a"],
Cell[582100, 15462, 293, 4, 36, "Text",ExpressionUUID->"b5e59ea4-41e0-41a2-968b-32cb72b2341e"],
Cell[582396, 15468, 1525, 40, 78, "Input",ExpressionUUID->"0816fdb1-96f7-4f58-8044-ee9d607f3349"],
Cell[583924, 15510, 14357, 358, 822, "Input",ExpressionUUID->"02152d0f-2b6b-41f1-a651-59ee93ed1e6f"],
Cell[598284, 15870, 2268, 55, 332, "Input",ExpressionUUID->"67cdfe79-40b5-4e7c-bb22-03845676cf70"],
Cell[600555, 15927, 4593, 113, 446, "Input",ExpressionUUID->"cbd76819-f105-4990-9107-7ab949c2d90f"],
Cell[605151, 16042, 113, 0, 36, "Text",ExpressionUUID->"0b8f8200-ccb8-4657-a4a8-fe4649c6320a"],
Cell[605267, 16044, 243, 6, 31, "Input",ExpressionUUID->"290fb7ad-9f0f-4027-9282-7a2a02646b29"],
Cell[605513, 16052, 4801, 115, 401, "Input",ExpressionUUID->"db931ce1-4bd9-4d5d-83df-9f0ede84065f"],
Cell[610317, 16169, 157, 4, 36, "Text",ExpressionUUID->"b4115f39-a5b7-4d49-a710-78e12006cc0b"],
Cell[610477, 16175, 7993, 189, 469, "Input",ExpressionUUID->"574324eb-148e-418e-8ba1-487c9b513fb7"]
}, Closed]],
Cell[CellGroupData[{
Cell[618507, 16369, 273, 11, 37, "Subsubsection",ExpressionUUID->"17ae3335-b69b-4bb5-b4f1-e5d1687609de"],
Cell[618783, 16382, 194, 3, 36, "Text",ExpressionUUID->"a947def1-2ad1-4bc4-b3a3-7fa50f24d621"],
Cell[618980, 16387, 1067, 29, 55, "Input",ExpressionUUID->"14097973-5ad2-4ea7-b26c-c7da8aec6148"],
Cell[620050, 16418, 1169, 30, 55, "Input",ExpressionUUID->"e3268b0f-229b-4de3-9621-2c0ccb1b2016"],
Cell[621222, 16450, 220, 3, 36, "Text",ExpressionUUID->"1c127f23-d111-42ea-bb5e-6415f7355ac2"],
Cell[621445, 16455, 539, 13, 78, "Input",ExpressionUUID->"cd3339ae-76e7-4b9d-931b-aee3b237170c"],
Cell[621987, 16470, 2695, 68, 170, "Input",ExpressionUUID->"19ce5d1d-44e8-45d2-9510-94b7333574ea"],
Cell[624685, 16540, 617, 18, 31, "Input",ExpressionUUID->"efdcc58f-59cd-47b1-9df9-3cc10e5eade8"],
Cell[625305, 16560, 326, 5, 36, "Text",ExpressionUUID->"db2bd680-bda6-472e-acc0-a77a1d86df47"],
Cell[625634, 16567, 3141, 77, 285, "Input",ExpressionUUID->"3ff442c9-bf3a-4d9c-b9cc-d184f5cacc3a"]
}, Closed]],
Cell[CellGroupData[{
Cell[628812, 16649, 313, 12, 37, "Subsubsection",ExpressionUUID->"89da74a1-75fb-4c88-a898-278a51d089e6"],
Cell[629128, 16663, 771, 12, 60, "Text",ExpressionUUID->"89d81c62-70a5-4c9b-ac5d-058f406e4e04"],
Cell[629902, 16677, 280, 4, 36, "Text",ExpressionUUID->"338f47d3-3b81-4a1d-912b-afaed242da17"],
Cell[630185, 16683, 335, 6, 36, "Text",ExpressionUUID->"3bd3730b-9ae7-45c8-a21f-fc314ce39af9"],
Cell[630523, 16691, 354, 5, 60, "Text",ExpressionUUID->"c332820f-6dca-43ad-83db-9e2b13b1c01e"],
Cell[630880, 16698, 5543, 135, 379, "Input",ExpressionUUID->"4c8f9483-02ce-4b2b-ba59-11f7ab8af315"],
Cell[636426, 16835, 10464, 262, 795, "Input",ExpressionUUID->"382fa209-1031-4c4c-98d5-cf31d7bca2b3"]
}, Closed]],
Cell[CellGroupData[{
Cell[646927, 17102, 328, 11, 37, "Subsubsection",ExpressionUUID->"0ab3eab8-1d3d-4100-ab71-593cb6967f53"],
Cell[647258, 17115, 116, 0, 36, "Text",ExpressionUUID->"c17f9827-9e68-4a89-81dc-945548272c56"],
Cell[647377, 17117, 837, 22, 33, "Input",ExpressionUUID->"d3f1a89d-1d67-4bd6-a36a-87d29a129c69",
 Evaluatable->False],
Cell[648217, 17141, 516, 8, 60, "Text",ExpressionUUID->"d07db8b5-9a91-46b0-a681-f6458df91498"],
Cell[648736, 17151, 5454, 135, 470, "Input",ExpressionUUID->"cad7ea13-aa65-4b5c-90a0-8b0cb4061885"],
Cell[654193, 17288, 556, 8, 60, "Text",ExpressionUUID->"64826dfe-4eb3-4d29-a918-2e2b4cd371cd"],
Cell[654752, 17298, 534, 17, 101, "Input",ExpressionUUID->"81655319-0de5-41aa-9142-7b1bc0f6c689"],
Cell[655289, 17317, 1006, 14, 84, "Text",ExpressionUUID->"eb1b614d-343d-4727-9e24-af8d8fe0fbfb"],
Cell[656298, 17333, 4407, 106, 315, "Input",ExpressionUUID->"7327d958-2540-4a40-b762-dcbceaf5ea55"],
Cell[660708, 17441, 248, 4, 36, "Text",ExpressionUUID->"0902450e-f99e-4893-a317-b94c0d031684"],
Cell[660959, 17447, 1419, 21, 132, "Text",ExpressionUUID->"138424f0-bd1d-4c98-9a21-b3b210d0eb48"],
Cell[662381, 17470, 859, 14, 84, "Text",ExpressionUUID->"55b4e479-795d-41f7-be66-9d4f48376c44"],
Cell[663243, 17486, 1053, 33, 101, "Input",ExpressionUUID->"f9085a54-4b3d-492b-881d-9890607272e1"],
Cell[664299, 17521, 765, 15, 101, "Input",ExpressionUUID->"98b41fa9-f08e-444c-aef4-f2c860d29212"],
Cell[665067, 17538, 168, 3, 36, "Text",ExpressionUUID->"b2e09b0e-55ec-4936-b10d-fbb2f1999dfc"],
Cell[665238, 17543, 29306, 651, 1600, "Input",ExpressionUUID->"c827b010-68f7-4325-94f6-e8f815412710"]
}, Closed]],
Cell[CellGroupData[{
Cell[694581, 18199, 224, 10, 37, "Subsubsection",ExpressionUUID->"0448ac83-0765-4982-82c1-39f9ead2d5e1"],
Cell[694808, 18211, 1015, 17, 84, "Text",ExpressionUUID->"7c2ee06b-a5f5-419a-97dc-d7e8c1cd7a4e"],
Cell[695826, 18230, 362, 5, 36, "Text",ExpressionUUID->"eb9a7399-6043-4267-9511-a938f5857789"],
Cell[696191, 18237, 677, 14, 55, "Input",ExpressionUUID->"aafc5dec-8485-4a90-9d7d-5eb97ef83702"],
Cell[696871, 18253, 437, 12, 55, "Input",ExpressionUUID->"021bc6fa-42d9-4670-9d1d-2362e05b6cda"],
Cell[697311, 18267, 110, 0, 36, "Text",ExpressionUUID->"c76fc2cf-e657-4549-bffb-c4396730ae65"],
Cell[697424, 18269, 614, 18, 31, "Input",ExpressionUUID->"1fa16ea5-5c31-4d18-b975-749311e3e226"],
Cell[698041, 18289, 18980, 429, 1165, "Input",ExpressionUUID->"13c4ae59-d5a1-4a31-b988-77d9db68979c"],
Cell[717024, 18720, 279, 4, 36, "Text",ExpressionUUID->"1b491b00-38e7-4122-9007-d010877959c9"],
Cell[717306, 18726, 498, 13, 31, "Input",ExpressionUUID->"55d8dedd-d467-4c3b-b177-c2c5317c633b",
 Evaluatable->False],
Cell[717807, 18741, 534, 15, 31, "Input",ExpressionUUID->"20d29dc6-79a7-4ecf-bb08-55c5fdbfb895",
 Evaluatable->False],
Cell[718344, 18758, 332, 5, 36, "Text",ExpressionUUID->"e32028d4-92b2-43e3-b8ec-81c78a10cc57"],
Cell[718679, 18765, 1504, 42, 148, "Input",ExpressionUUID->"14405df8-7d0e-4e46-9d5f-35206c4b48ec"]
}, Closed]],
Cell[CellGroupData[{
Cell[720220, 18812, 209, 10, 37, "Subsubsection",ExpressionUUID->"e9852e09-3768-4c6e-b64d-bf2bf6152f36"],
Cell[720432, 18824, 236, 5, 36, "Text",ExpressionUUID->"ef793601-d00d-43c0-aa04-7e819fefb9c2"],
Cell[720671, 18831, 1375, 36, 101, "Input",ExpressionUUID->"f28afc16-3269-4c4f-a2b9-80319a23d6f0"],
Cell[722049, 18869, 1600, 40, 101, "Input",ExpressionUUID->"a1b1155a-56f9-4926-b7ae-dddaf5faf899"],
Cell[723652, 18911, 525, 12, 60, "Text",ExpressionUUID->"d11091e8-0c4d-4efc-9d9a-fb5df010a8ad"],
Cell[724180, 18925, 1410, 37, 101, "Input",ExpressionUUID->"d8b591fb-d604-47ae-aea8-9889b4f309ab"],
Cell[725593, 18964, 1588, 40, 101, "Input",ExpressionUUID->"f89425b2-664c-4cb7-a8c9-7eec6569a3c5"]
}, Closed]],
Cell[CellGroupData[{
Cell[727218, 19009, 276, 11, 37, "Subsubsection",ExpressionUUID->"8b7e22b4-3ee7-4a88-b0c3-6670cd5a9840"],
Cell[727497, 19022, 307, 4, 36, "Text",ExpressionUUID->"15609a48-176c-4b5b-be51-8872e9ad0be6"],
Cell[727807, 19028, 1460, 39, 101, "Input",ExpressionUUID->"f4b307cc-d22c-47fe-bf48-a08eafb31869"],
Cell[729270, 19069, 4437, 110, 286, "Input",ExpressionUUID->"6968128c-9b02-4473-985d-f47f22ebb6ec"],
Cell[733710, 19181, 1060, 31, 55, "Input",ExpressionUUID->"2be4857a-b924-40e5-9a10-3fb636b00bef"],
Cell[734773, 19214, 159, 4, 31, "Input",ExpressionUUID->"bd5d123f-28d6-42e3-be00-8b3c31286653"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[734993, 19225, 175, 4, 68, "Section",ExpressionUUID->"4ab2a7de-c546-41d1-8323-9e22cf95d22f"],
Cell[735171, 19231, 86, 0, 35, "Text",ExpressionUUID->"a19554e5-b070-4348-818f-75d5881618a9"],
Cell[735260, 19233, 323, 9, 29, "Input",ExpressionUUID->"cac0dba3-af78-423c-9ff3-d8f5cbe1fc52"],
Cell[735586, 19244, 409, 9, 51, "Input",ExpressionUUID->"5a53a32b-db79-4b6b-b474-2ebb16d38fa1"],
Cell[735998, 19255, 85, 0, 35, "Text",ExpressionUUID->"c6a88457-c242-4231-b9df-496a4d350c30"],
Cell[736086, 19257, 719, 13, 113, "Input",ExpressionUUID->"b284e6cc-34e9-4ef2-ac37-67e0ddadf05b"],
Cell[736808, 19272, 638, 12, 92, "Input",ExpressionUUID->"498fbaa8-87d1-416b-bce1-12e135b724a4"],
Cell[737449, 19286, 572, 11, 92, "Input",ExpressionUUID->"9eb3812d-a392-414e-93b4-91d2f63db6cd"],
Cell[738024, 19299, 584, 11, 92, "Input",ExpressionUUID->"c3eb2f0a-5849-4e15-93ab-16c52f163801"],
Cell[738611, 19312, 593, 11, 92, "Input",ExpressionUUID->"32458326-dcd6-43a5-80e4-90a391ddb388"],
Cell[739207, 19325, 161, 4, 29, "Input",ExpressionUUID->"b35f5199-a110-430f-b087-037131104cfa"],
Cell[CellGroupData[{
Cell[739393, 19333, 183, 7, 54, "Subsection",ExpressionUUID->"b6561516-a159-44f7-b06a-b5d67a310748"],
Cell[739579, 19342, 333, 7, 35, "Text",ExpressionUUID->"c3ea3536-4405-4b03-93be-17d807aa1710"],
Cell[739915, 19351, 339, 9, 29, "Input",ExpressionUUID->"66234a28-0812-40f6-87a1-9562fb888996"]
}, Open  ]],
Cell[CellGroupData[{
Cell[740291, 19365, 175, 7, 54, "Subsection",ExpressionUUID->"b118506b-84ea-4b48-80f1-482afa798ea4"],
Cell[740469, 19374, 386, 6, 36, "Text",ExpressionUUID->"50dd7adb-330e-428e-8822-72e1906a7f5f"],
Cell[740858, 19382, 6551, 145, 539, "Input",ExpressionUUID->"85c32c5d-3f91-482c-9ac3-4eeda7931393"],
Cell[747412, 19529, 251, 4, 36, "Text",ExpressionUUID->"87e938b2-1eb8-49f8-b371-35dbcfb60051"],
Cell[747666, 19535, 1125, 29, 55, "Input",ExpressionUUID->"e7b16c75-933a-40cf-9092-e3b6c8fde391",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[748794, 19566, 111, 0, 36, "Text",ExpressionUUID->"c3555e1b-7746-432b-b852-1cf08df5994b"],
Cell[748908, 19568, 4116, 96, 378, "Input",ExpressionUUID->"b694e195-62ce-4ce9-a848-7a47c89dde3d"],
Cell[753027, 19666, 217, 3, 36, "Text",ExpressionUUID->"662d848b-727d-419d-b9e4-93c8a07a6e97"],
Cell[753247, 19671, 1313, 37, 79, "Input",ExpressionUUID->"b4274ece-80bb-4cf5-8fbd-6e9ba4e39573"]
}, Closed]],
Cell[CellGroupData[{
Cell[754597, 19713, 209, 7, 38, "Subsection",ExpressionUUID->"c634a8cb-e675-4382-85b2-fadcea828263"],
Cell[754809, 19722, 2269, 38, 108, "Text",ExpressionUUID->"70b1ba68-52a1-434d-962b-3bafdab513ed"],
Cell[757081, 19762, 1104, 33, 78, "Input",ExpressionUUID->"9fa3df2c-46dd-403a-9a0b-2957debe925d"],
Cell[758188, 19797, 1166, 34, 147, "Input",ExpressionUUID->"fd3ae217-7046-419e-a796-2cf5864b5537"],
Cell[759357, 19833, 1275, 36, 148, "Input",ExpressionUUID->"21235549-6f81-4d20-9857-024ea390f5fc"]
}, Closed]],
Cell[CellGroupData[{
Cell[760669, 19874, 166, 7, 38, "Subsection",ExpressionUUID->"6706b0e2-401f-4048-8445-0c1b6126600c"],
Cell[760838, 19883, 159, 4, 29, "Input",ExpressionUUID->"4fb56c53-a0e3-4f0c-96fd-9417e209296b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[761046, 19893, 171, 4, 68, "Section",ExpressionUUID->"60614cca-24a6-49cb-92b4-25008c1bebb7"],
Cell[761220, 19899, 1546, 25, 154, "Input",ExpressionUUID->"b0301431-7e33-45f7-b611-76bf5cd3a1d8"],
Cell[762769, 19926, 409, 9, 51, "Input",ExpressionUUID->"585bae98-0c4c-4892-933a-80a72f2361d7"],
Cell[763181, 19937, 193, 3, 35, "Text",ExpressionUUID->"d597e3be-ab15-4a42-a8e2-b20d6c8a9059"],
Cell[763377, 19942, 268, 7, 29, "Input",ExpressionUUID->"1c371f64-8a8d-4d31-bf4d-8fd5d661e1e6"],
Cell[763648, 19951, 286, 7, 29, "Input",ExpressionUUID->"4feaa52d-8c0a-4ca0-aa42-f19630b7f5bc"],
Cell[763937, 19960, 283, 7, 29, "Input",ExpressionUUID->"09daab01-931a-4deb-ac00-3c4d8321a640"],
Cell[764223, 19969, 600, 11, 92, "Input",ExpressionUUID->"c129ccd2-d6b3-450d-8b91-509ace1ab821"],
Cell[764826, 19982, 454, 9, 71, "Input",ExpressionUUID->"e6c7fa0a-3c9f-4ffb-a3c6-5da322637076"],
Cell[765283, 19993, 480, 10, 71, "Input",ExpressionUUID->"fcd8fab9-6709-46fb-aba0-785db6374489"],
Cell[765766, 20005, 372, 8, 71, "Input",ExpressionUUID->"9e3d0343-866e-4310-9157-a84ae33507e7"],
Cell[766141, 20015, 855, 14, 133, "Input",ExpressionUUID->"adb2a710-8839-4238-b5a2-499d788c1bac"]
}, Open  ]],
Cell[767011, 20032, 261, 6, 29, "Input",ExpressionUUID->"9e78862b-52a4-4df8-b2d4-539cf5e8ef51"],
Cell[767275, 20040, 641, 15, 92, "Input",ExpressionUUID->"0c0a2ce7-0c6c-4efd-a115-f118831f7224"],
Cell[767919, 20057, 451, 9, 71, "Input",ExpressionUUID->"ad960b19-b171-4f7f-a026-4a690360db70"],
Cell[768373, 20068, 241, 6, 29, "Input",ExpressionUUID->"62758656-7ac9-4083-93f5-3e4633f743db"],
Cell[768617, 20076, 1329, 25, 174, "Input",ExpressionUUID->"ba3b4aa9-06eb-416c-92d0-3e0e216ab39a"],
Cell[769949, 20103, 425, 9, 71, "Input",ExpressionUUID->"1b896655-3298-4781-acf8-5103b3e486bc"],
Cell[770377, 20114, 1077, 21, 174, "Input",ExpressionUUID->"861ce4db-13c5-4c7e-94a6-7b3f35ef7cae"],
Cell[771457, 20137, 842, 17, 133, "Input",ExpressionUUID->"84ebfeb6-7030-4797-afa4-a79e6a54a0f2"],
Cell[772302, 20156, 519, 12, 92, "Input",ExpressionUUID->"f5d96872-53bc-4f7d-a5a7-cbd84d63c468"],
Cell[772824, 20170, 526, 12, 71, "Input",ExpressionUUID->"ed6a9a3d-6f4a-4673-9a42-0baf2c6bd4e9"],
Cell[773353, 20184, 535, 13, 71, "Input",ExpressionUUID->"5c8cb435-c6c8-42b4-8a07-e9717c9feb89"],
Cell[773891, 20199, 526, 12, 71, "Input",ExpressionUUID->"72caff6f-be9c-4f41-b72b-2ed2e1e9991e"],
Cell[774420, 20213, 535, 13, 71, "Input",ExpressionUUID->"d4490cd1-aeab-49d5-806e-ea5b8d4962fa"],
Cell[774958, 20228, 528, 12, 71, "Input",ExpressionUUID->"8db50add-b5b8-42d0-9fbe-7a9a66111008"],
Cell[775489, 20242, 534, 13, 71, "Input",ExpressionUUID->"d0cb4cf8-70fe-48e4-90a0-a9c3ea1c884d"],
Cell[776026, 20257, 441, 12, 51, "Input",ExpressionUUID->"e384b261-2123-4b8d-88e9-c6cb6e5f2b75"],
Cell[776470, 20271, 487, 12, 51, "Input",ExpressionUUID->"692a523b-9d93-418f-9e67-bffdf19172a5"],
Cell[776960, 20285, 1348, 26, 195, "Input",ExpressionUUID->"aa99f970-4d97-4bc5-ab98-c0d524c38a57"],
Cell[778311, 20313, 504, 12, 51, "Input",ExpressionUUID->"db452ee5-75a9-48f9-99e9-4067d5988622"],
Cell[778818, 20327, 1367, 29, 195, "Input",ExpressionUUID->"04758cf9-aabd-4db6-9456-fd14a71f8b01"],
Cell[780188, 20358, 294, 7, 29, "Input",ExpressionUUID->"76d8a988-8e94-420a-a49c-b1af16deeda4"],
Cell[780485, 20367, 161, 4, 29, "Input",ExpressionUUID->"9bc1bbf6-00c7-4426-9b76-917704014ddb"],
Cell[CellGroupData[{
Cell[780671, 20375, 170, 7, 54, "Subsection",ExpressionUUID->"c5c60def-87c3-4330-baa1-b293dc3443c3"],
Cell[CellGroupData[{
Cell[780866, 20386, 210, 10, 45, "Subsubsection",ExpressionUUID->"1edec70e-eee8-4931-919e-8773f9ffca82"],
Cell[781079, 20398, 184, 4, 35, "Text",ExpressionUUID->"fdf572c0-d401-4a53-950c-68c52f128df5"],
Cell[781266, 20404, 2802, 73, 195, "Input",ExpressionUUID->"4e40f4f3-5c87-4696-8725-0f10d9147e6c"],
Cell[784071, 20479, 499, 11, 58, "Text",ExpressionUUID->"9bb42de4-6b10-4feb-8031-ba4df2929e47"],
Cell[784573, 20492, 1447, 44, 154, "Input",ExpressionUUID->"c50dc0b5-0ee1-43c0-b42f-cf51fbabd09f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[786057, 20541, 236, 10, 45, "Subsubsection",ExpressionUUID->"cbda8825-46d2-4dbc-bf15-a559fedee625"],
Cell[CellGroupData[{
Cell[786318, 20555, 229, 7, 32, "Item",ExpressionUUID->"3a4c7849-eff5-42dd-ae60-6e3be65eafac",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[786550, 20564, 414, 12, 35, "Text",ExpressionUUID->"9a33b4ac-7379-4e62-8a40-385bcdfde8eb",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[786967, 20578, 217, 5, 35, "Text",ExpressionUUID->"03cdbebb-2295-4f14-bfc4-2ee415357226",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[787187, 20585, 1663, 45, 113, "Input",ExpressionUUID->"ab2733b9-263f-486f-af2a-d9a0d85c61d9",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[788853, 20632, 277, 6, 35, "Text",ExpressionUUID->"13175fdd-adbc-4931-bbe0-0a9afa5b1ef2",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[789133, 20640, 2194, 58, 216, "Input",ExpressionUUID->"e73be8c6-9995-4b89-a428-2ea47cba4c0d",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[791364, 20703, 468, 16, 32, "Item",ExpressionUUID->"4d438efb-1de9-48d5-8d50-93f50cf53c5d",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[791835, 20721, 327, 6, 55, "Input",ExpressionUUID->"46cdf012-fc66-4328-a4a8-3e6de087afc1"],
Cell[792165, 20729, 217, 5, 36, "Text",ExpressionUUID->"f7a609c8-8365-4b8a-b896-14ab4fd2011d",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[792385, 20736, 5249, 130, 423, "Input",ExpressionUUID->"af74f7b8-709e-475c-93c3-aa5551fbe212",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[797637, 20868, 1636, 46, 252, "Text",ExpressionUUID->"d61ff425-67ff-4709-bef3-1219df3ea905",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[799276, 20916, 163, 3, 36, "Text",ExpressionUUID->"57d8ab61-daeb-47ab-a058-2df7846e1814",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[799442, 20921, 564, 17, 55, "Input",ExpressionUUID->"19244310-2bd4-4d5a-a02e-5199645dd295",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[800009, 20940, 188, 3, 36, "Text",ExpressionUUID->"96dd64e1-c224-475e-8c93-7725f3a00a70",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[800200, 20945, 9016, 223, 632, "Input",ExpressionUUID->"6eb1d731-c1c1-4d40-8986-5c937894cdf8",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[809219, 21170, 1075, 35, 108, "Text",ExpressionUUID->"95c9b705-3ceb-41e5-bdc9-98bf2fb1c942",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[810297, 21207, 575, 17, 33, "Input",ExpressionUUID->"85c05500-c011-4b71-b2a4-a52f5d759d64",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[810875, 21226, 546, 16, 33, "Input",ExpressionUUID->"1d45e7e8-9e92-49ba-b747-5bc56d42637c",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[811424, 21244, 595, 17, 33, "Input",ExpressionUUID->"20c8ee5a-4eeb-44e5-bb08-4f1057a3e407",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[812056, 21266, 437, 14, 28, "Item",ExpressionUUID->"c1d34d6c-d454-4342-8916-a5fd0473bed1",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[812496, 21282, 238, 6, 36, "Text",ExpressionUUID->"4fdfe02a-e14c-46f9-a550-2baae2c5cfbe",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[812737, 21290, 300, 7, 36, "Text",ExpressionUUID->"5b2f92e0-4bae-402b-ab3a-ff9711bece93",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[813040, 21299, 2124, 55, 194, "Input",ExpressionUUID->"39ef3650-16ff-4a15-9eff-7245f94114d9",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[815167, 21356, 351, 9, 31, "Input",ExpressionUUID->"90b2f013-84d7-49b9-8afd-cb53b7651a4d",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[815521, 21367, 1065, 29, 78, "Input",ExpressionUUID->"00761f48-ca41-4d5e-9496-8c4ac7ad1a0f",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[816589, 21398, 957, 16, 60, "Text",ExpressionUUID->"e6a02e8c-c72f-4132-bd2d-0ab60754f5c6",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[817549, 21416, 708, 19, 55, "Input",ExpressionUUID->"ba5b3748-0948-43cb-b209-c925280af2ac"],
Cell[818260, 21437, 1251, 33, 55, "Input",ExpressionUUID->"58eadc76-7fac-4f07-a7c4-d80bb00af769"],
Cell[819514, 21472, 684, 10, 84, "Text",ExpressionUUID->"a4d94896-bf4d-47af-87fd-33f775a9997b"],
Cell[820201, 21484, 14406, 327, 1044, "Input",ExpressionUUID->"3d0276be-571d-41b5-abef-0f57665610c5",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[834610, 21813, 205, 5, 36, "Text",ExpressionUUID->"83a67d7e-e271-4aa7-8009-3b13acc80e7e",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[834818, 21820, 192, 5, 31, "Input",ExpressionUUID->"8db31956-0f57-43fc-82e3-46fb78bc97a2"],
Cell[835013, 21827, 788, 21, 36, "Text",ExpressionUUID->"cadde639-c713-40c2-a319-1de3ec620ab6",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[835804, 21850, 3840, 99, 196, "Input",ExpressionUUID->"6fca29bd-360b-4a0e-a67b-a12034875a5f",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[839647, 21951, 164, 3, 36, "Text",ExpressionUUID->"e9a8d41a-5b40-42f0-a972-ee81bb3bcd54",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[839814, 21956, 511, 14, 31, "Input",ExpressionUUID->"0e0ef88b-f054-48c2-a0d1-4897ad906fa2",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],
Cell[CellGroupData[{
Cell[840362, 21975, 222, 7, 28, "Item",ExpressionUUID->"ed478fd6-8b0c-4e38-9cea-8c84931c9dee",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[840587, 21984, 1003, 27, 38, "Text",ExpressionUUID->"58ebd07a-a708-4c7b-8344-229c8660fce4",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[841593, 22013, 3800, 96, 285, "Input",ExpressionUUID->"0dec8b13-bba0-4c2c-acbc-e8e9bc93f1bb",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],
Cell[CellGroupData[{
Cell[845430, 22114, 312, 9, 28, "Item",ExpressionUUID->"6d0cb4c2-0d15-4321-826a-9aff885a5b2b",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[845745, 22125, 304, 7, 36, "Text",ExpressionUUID->"b13b6fce-2f0d-49d4-ad75-161c51c20775",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[846052, 22134, 10561, 250, 860, "Input",ExpressionUUID->"269103f7-1b09-472e-9d30-30f51e79cf13",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[856662, 22390, 241, 10, 45, "Subsubsection",ExpressionUUID->"4752c398-43a4-45e3-97b3-28112bde453f"],
Cell[CellGroupData[{
Cell[856928, 22404, 169, 3, 36, "Text",ExpressionUUID->"58de283e-5610-4dc9-8dc9-070c4976700d"],
Cell[CellGroupData[{
Cell[857122, 22411, 146, 3, 33, "Item",ExpressionUUID->"32c12529-7849-486e-89a9-69ba227b5a1b",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[857271, 22416, 180, 3, 36, "Text",ExpressionUUID->"e8647c23-339e-4c90-817b-d00dd41117c6"],
Cell[857454, 22421, 6183, 145, 400, "Input",ExpressionUUID->"e5542a98-dda4-4ed2-a9da-0e70a77573c1"],
Cell[863640, 22568, 6179, 157, 400, "Input",ExpressionUUID->"fdf686ac-d973-4a1a-96b9-eeeef646c5e1"],
Cell[869822, 22727, 5904, 150, 377, "Input",ExpressionUUID->"320c1fd9-2c1f-4690-b7da-8b52eb4d68ef"],
Cell[875729, 22879, 155, 4, 36, "Text",ExpressionUUID->"4ff226a4-2f04-46ef-8a78-ec99f393841e"],
Cell[875887, 22885, 1060, 32, 101, "Input",ExpressionUUID->"f1e67b12-9351-49ef-b1d2-67ecd077fab7"]
}, Closed]],
Cell[CellGroupData[{
Cell[876984, 22922, 147, 3, 29, "Item",ExpressionUUID->"6a4d6afd-f483-4ea8-bcd5-d7efc8ebc2bc",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[877134, 22927, 102, 0, 36, "Text",ExpressionUUID->"58ccba73-06f7-42b4-9dda-3ca5231ed05f"],
Cell[877239, 22929, 573, 16, 55, "Input",ExpressionUUID->"71089eed-51f7-44d7-abed-8d0aaa3cf3fa"],
Cell[877815, 22947, 2797, 71, 193, "Input",ExpressionUUID->"9e5f6de5-b136-45eb-b35e-feb565f56d72"]
}, Closed]],
Cell[CellGroupData[{
Cell[880649, 23023, 83, 0, 29, "Item",ExpressionUUID->"e0bb99f1-b6b2-4fae-be26-6d65ff645b34"],
Cell[880735, 23025, 17135, 395, 1642, "Input",ExpressionUUID->"583eed70-e129-4d3e-a372-817114be155d"]
}, Closed]],
Cell[CellGroupData[{
Cell[897907, 23425, 83, 0, 29, "Item",ExpressionUUID->"8ab08e55-bec0-44d6-b19f-ec3f874690e3"],
Cell[897993, 23427, 17299, 400, 1504, "Input",ExpressionUUID->"1084e821-5e43-4ea5-b447-e8eea822ee14"]
}, Closed]],
Cell[CellGroupData[{
Cell[915329, 23832, 83, 0, 29, "Item",ExpressionUUID->"5489a124-a492-4370-89c2-8bea07b23fcc"],
Cell[915415, 23834, 22770, 522, 1550, "Input",ExpressionUUID->"9bed5b40-59d5-4674-8cd1-450bd33201bb"]
}, Closed]],
Cell[CellGroupData[{
Cell[938222, 24361, 123, 0, 29, "Item",ExpressionUUID->"328d4f1e-abf1-46c3-adff-d0b4b0b9d828"],
Cell[938348, 24363, 22698, 520, 1757, "Input",ExpressionUUID->"7d839d58-17e2-469b-8a90-02c1b91dd383"]
}, Closed]],
Cell[CellGroupData[{
Cell[961083, 24888, 83, 0, 29, "Item",ExpressionUUID->"797bfead-0439-49d6-891f-45f3f52db796"],
Cell[961169, 24890, 22700, 522, 1711, "Input",ExpressionUUID->"d886fe9c-ba1f-4439-8c5c-39fdbdbb47c3"]
}, Closed]],
Cell[CellGroupData[{
Cell[983906, 25417, 83, 0, 29, "Item",ExpressionUUID->"bfe6d47a-c8fe-4120-a368-9b9f9f8ad02f"],
Cell[983992, 25419, 94314, 2113, 4609, "Input",ExpressionUUID->"7f172efb-1641-453b-9665-359c59f30340"]
}, Closed]],
Cell[CellGroupData[{
Cell[1078343, 27537, 83, 0, 29, "Item",ExpressionUUID->"64049c0c-c575-4904-a093-abd750ee256f"],
Cell[1078429, 27539, 112724, 2512, 5353, "Input",ExpressionUUID->"b69ef5de-a255-4916-8aa9-9108fcb606b2"]
}, Closed]],
Cell[CellGroupData[{
Cell[1191190, 30056, 123, 0, 29, "Item",ExpressionUUID->"74f8001e-15e4-4704-8e61-b6f416fbfeb2"],
Cell[1191316, 30058, 90148, 2039, 4563, "Input",ExpressionUUID->"d86a50c8-e258-460e-9c03-bd22c334874d"]
}, Closed]],
Cell[CellGroupData[{
Cell[1281501, 32102, 83, 0, 29, "Item",ExpressionUUID->"3d0c09a2-0346-4269-b483-eccb54055148"],
Cell[1281587, 32104, 123, 0, 36, "Text",ExpressionUUID->"38cf0923-a785-41e0-b03a-42e8980406f7"],
Cell[1281713, 32106, 111124, 2496, 4801, "Input",ExpressionUUID->"183d1da1-7cd0-447e-b98f-37402b018610"]
}, Closed]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1392910, 34610, 162, 7, 54, "Subsection",ExpressionUUID->"428fe170-9580-456c-92aa-566a8eacd33a"],
Cell[CellGroupData[{
Cell[1393097, 34621, 218, 10, 45, "Subsubsection",ExpressionUUID->"1840d34c-5c9e-4787-ac73-64c3e404248d"],
Cell[1393318, 34633, 347, 9, 36, "Text",ExpressionUUID->"3efa313c-07df-41f7-9f58-5daf56b3abd0"],
Cell[1393668, 34644, 209, 5, 31, "Input",ExpressionUUID->"fc729999-dc29-4fc4-bbe3-601d7ec6c95d"],
Cell[1393880, 34651, 400, 8, 55, "Input",ExpressionUUID->"be3a10ac-ba3f-42ff-9baa-71cc64b90efd"],
Cell[1394283, 34661, 3238, 90, 195, "Input",ExpressionUUID->"f0a8dcf1-f632-4be3-91e1-ed081f37fe44"],
Cell[1397524, 34753, 788, 26, 60, "Text",ExpressionUUID->"6f185173-1f5b-4652-9017-be5ad3b694c0"],
Cell[1398315, 34781, 484, 14, 31, "Input",ExpressionUUID->"0f46725f-b604-44e7-ba5b-d068ae0b010a"],
Cell[1398802, 34797, 743, 22, 31, "Input",ExpressionUUID->"fe399153-f549-477a-9372-0204e9af6bc6"],
Cell[1399548, 34821, 208, 4, 36, "Text",ExpressionUUID->"fd2cfa14-fe02-4313-8577-1ee919c17602"],
Cell[1399759, 34827, 1528, 40, 78, "Input",ExpressionUUID->"26431bf5-2b4a-4c87-b885-e9bee719ef70"],
Cell[1401290, 34869, 228, 5, 36, "Text",ExpressionUUID->"412613fa-9e0f-47b1-af2c-4daf1a856d97"],
Cell[1401521, 34876, 928, 27, 31, "Input",ExpressionUUID->"014c3035-e3e4-4d75-92d3-df5e3db128ea"],
Cell[1402452, 34905, 950, 27, 31, "Input",ExpressionUUID->"34e6ef61-dd02-41b8-b80b-66a94cf34452"],
Cell[1403405, 34934, 404, 11, 36, "Text",ExpressionUUID->"3482516d-dae2-425e-b53d-a7ef6a487c38"],
Cell[1403812, 34947, 3070, 79, 147, "Input",ExpressionUUID->"3d393635-e47b-43b9-b113-09576e728d50"],
Cell[1406885, 35028, 661, 17, 55, "Input",ExpressionUUID->"10819bd1-abd8-417c-80a9-b79fcf7dfffc"],
Cell[1407549, 35047, 215, 5, 36, "Text",ExpressionUUID->"9f01afff-5d82-4eae-b3d3-a2e4b4e781ef"],
Cell[1407767, 35054, 1365, 43, 170, "Input",ExpressionUUID->"74113379-1f94-4f8a-b951-50602255ec72"],
Cell[1409135, 35099, 8792, 261, 499, "Input",ExpressionUUID->"7e8ec40a-8163-4512-a57c-833691e36d4c"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1417976, 35366, 221, 7, 54, "Subsection",ExpressionUUID->"f0ffaedd-c797-495c-a4a1-46bccc4f47f7"],
Cell[CellGroupData[{
Cell[1418222, 35377, 210, 10, 45, "Subsubsection",ExpressionUUID->"09a7d234-0784-49e3-9839-c5ce1f546c10"],
Cell[1418435, 35389, 115, 0, 35, "Text",ExpressionUUID->"85136167-d851-4998-925f-0fc4adec8faa"],
Cell[1418553, 35391, 2965, 79, 174, "Input",ExpressionUUID->"3f4cf023-ab0f-4097-8543-aff9cc43f02a"],
Cell[1421521, 35472, 285, 6, 35, "Text",ExpressionUUID->"de59bf16-7d4c-4c2f-9ade-324a1c0ca78d"],
Cell[1421809, 35480, 2938, 77, 175, "Input",ExpressionUUID->"eca5b081-d731-4791-9cb9-30e68802f9b7",
 Evaluatable->False],
Cell[1424750, 35559, 3109, 81, 175, "Input",ExpressionUUID->"139c3cbf-c9d9-48a8-a98b-8c19d4fe948b",
 Evaluatable->False],
Cell[1427862, 35642, 108, 0, 35, "Text",ExpressionUUID->"20e9f64c-3c09-41e2-8372-dfb95c80af9b"],
Cell[1427973, 35644, 3359, 90, 216, "Input",ExpressionUUID->"15741003-769c-46be-bb35-dbf39c515240"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1431369, 35739, 213, 10, 45, "Subsubsection",ExpressionUUID->"7ddc9247-79aa-40c5-a85f-35ca34778aa8"],
Cell[1431585, 35751, 431, 6, 60, "Text",ExpressionUUID->"bfe9fefa-af6b-4e2e-8262-41892805098a"],
Cell[1432019, 35759, 1697, 47, 126, "Input",ExpressionUUID->"148073d1-ddc9-47f5-8e03-4863df33a9cc"],
Cell[1433719, 35808, 339, 5, 60, "Text",ExpressionUUID->"4c8ec0f2-20a5-49a7-af21-9cb377cb30dd"],
Cell[1434061, 35815, 213, 4, 31, "Input",ExpressionUUID->"cd7be513-d8d2-441d-82c2-8174c5cf2c2b",
 Evaluatable->False],
Cell[1434277, 35821, 97, 0, 36, "Text",ExpressionUUID->"c990bdbb-1c95-406a-9a7a-76d02b96c725"],
Cell[1434377, 35823, 259, 7, 31, "Input",ExpressionUUID->"07fedce7-d4fc-46a9-9d8f-0638d489408b"],
Cell[1434639, 35832, 483, 9, 60, "Text",ExpressionUUID->"2ccc7200-5cac-454b-a51f-f81d3bd25e31"],
Cell[1435125, 35843, 3783, 116, 170, "Input",ExpressionUUID->"a8694b99-dadd-413f-9c65-eac31f0fbc1a"],
Cell[1438911, 35961, 619, 17, 36, "Text",ExpressionUUID->"fd1ded1c-7cff-41d3-bc12-c5520ef4b4ac"],
Cell[1439533, 35980, 4483, 114, 331, "Input",ExpressionUUID->"de5c5767-c327-4ee3-91e3-2422209110e1"],
Cell[1444019, 36096, 125, 0, 36, "Text",ExpressionUUID->"0f0b3a26-ee76-425e-9768-41fad4df86d0"],
Cell[1444147, 36098, 548, 16, 31, "Input",ExpressionUUID->"f6d9b3ef-502c-4134-b775-9edb1be9c7db"],
Cell[1444698, 36116, 2503, 73, 101, "Input",ExpressionUUID->"bcc2d301-6d80-40d2-8037-d985b676f7d1"],
Cell[1447204, 36191, 1941, 53, 170, "Input",ExpressionUUID->"8cdff088-68a8-413b-b549-25dfce854577"],
Cell[1449148, 36246, 2003, 55, 170, "Input",ExpressionUUID->"d8baf1de-e919-4a37-8b7f-c61eef64bdb4"],
Cell[1451154, 36303, 238, 6, 31, "Input",ExpressionUUID->"e6eeb7f0-9348-44b4-922f-04bcd9ccf8f4"],
Cell[1451395, 36311, 389, 9, 31, "Input",ExpressionUUID->"df7fb41f-53b7-4247-86f4-96f4c33a704a"]
}, Closed]],
Cell[CellGroupData[{
Cell[1451821, 36325, 206, 10, 37, "Subsubsection",ExpressionUUID->"000b37fb-664f-4af7-afdd-f24b1ea3233b"],
Cell[1452030, 36337, 530, 10, 60, "Text",ExpressionUUID->"c4379cdf-d7ab-4471-a7b3-5bbe481cf4a2"],
Cell[1452563, 36349, 2648, 75, 101, "Input",ExpressionUUID->"5ce5bc77-f81e-4b55-acf3-375f8c27c69a"],
Cell[1455214, 36426, 1392, 41, 55, "Input",ExpressionUUID->"13c3de3e-0894-437f-b8f3-6a797057a1a1"],
Cell[1456609, 36469, 362, 5, 60, "Text",ExpressionUUID->"7c359209-ca67-4feb-9719-69c071d09068"],
Cell[1456974, 36476, 10943, 262, 492, "Input",ExpressionUUID->"1563b761-d0db-4a86-9b22-b5ae328c4170"],
Cell[1467920, 36740, 781, 20, 101, "Input",ExpressionUUID->"e231240a-fd8f-4565-aaf4-20afc5c120e0"],
Cell[1468704, 36762, 452, 8, 60, "Text",ExpressionUUID->"2e2035f8-a7b6-4ab8-8a88-96692c364e2e"],
Cell[1469159, 36772, 2865, 77, 124, "Input",ExpressionUUID->"0d060885-f303-4d8d-9efc-e4281e06c289"],
Cell[1472027, 36851, 226, 3, 36, "Text",ExpressionUUID->"efc77767-2f0b-4b4c-b4b5-610c13dca05e"],
Cell[1472256, 36856, 7415, 172, 539, "Input",ExpressionUUID->"4d9e015e-2e9b-42a5-ad38-8ed8f0916c59"],
Cell[1479674, 37030, 192, 5, 31, "Input",ExpressionUUID->"d3a28ee5-b273-4243-be10-f8ea3d1ebe22"],
Cell[1479869, 37037, 151, 2, 36, "Text",ExpressionUUID->"d8d3f85b-cbd2-44fc-bbb7-565847e558f9"],
Cell[1480023, 37041, 1137, 35, 55, "Input",ExpressionUUID->"df422bb9-8104-444a-8290-a94f4eb40263"],
Cell[1481163, 37078, 2803, 69, 170, "Input",ExpressionUUID->"7ffce8e8-82a8-451d-a517-0291f62bf414"],
Cell[1483969, 37149, 430, 10, 31, "Input",ExpressionUUID->"34ff6798-e968-442e-9cb8-75a76e0c10e1"],
Cell[1484402, 37161, 159, 4, 31, "Input",ExpressionUUID->"470f0de9-b2ec-45d8-9dc3-536959d1ac05"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1484610, 37171, 172, 4, 68, "Section",ExpressionUUID->"2e36cfc7-e28c-4536-a20a-ba3dfeac0510"],
Cell[1484785, 37177, 667, 13, 71, "Input",ExpressionUUID->"306c1950-971e-4a4e-8e3d-674f810a521f"],
Cell[1485455, 37192, 409, 9, 51, "Input",ExpressionUUID->"c3d91181-805f-4fd5-96a2-7de5fb0baaf1"],
Cell[1485867, 37203, 455, 9, 71, "Input",ExpressionUUID->"ff94e806-3f01-45dc-9d7e-f9672972e47a"],
Cell[1486325, 37214, 304, 7, 29, "Input",ExpressionUUID->"cf3e33b3-d97b-4ed7-aa7f-82d92b3da953"],
Cell[1486632, 37223, 2073, 37, 339, "Input",ExpressionUUID->"172f6040-d1dd-492e-92c2-9c473efc2b13"],
Cell[1488708, 37262, 500, 10, 71, "Input",ExpressionUUID->"4aaebdad-35b3-4d80-a1c1-d20c6841d897"],
Cell[1489211, 37274, 495, 10, 71, "Input",ExpressionUUID->"2cd03471-40b9-47da-9e3c-76715c4977bf"],
Cell[1489709, 37286, 2084, 43, 319, "Input",ExpressionUUID->"e50347d4-aa81-4418-ae98-8994f84276e2"],
Cell[1491796, 37331, 161, 4, 29, "Input",ExpressionUUID->"301c3ead-b153-4915-acd8-588bfe8bfdf1"],
Cell[CellGroupData[{
Cell[1491982, 37339, 166, 7, 54, "Subsection",ExpressionUUID->"31776a9e-5c60-4496-bc16-0f75cd878c1d"],
Cell[CellGroupData[{
Cell[1492173, 37350, 210, 10, 45, "Subsubsection",ExpressionUUID->"8b4c3182-a2f4-4e23-9a93-b47e438f7335"],
Cell[1492386, 37362, 608, 11, 60, "Text",ExpressionUUID->"956d7a27-bc80-4788-a8f9-055d6169aba7"],
Cell[1492997, 37375, 1479, 40, 101, "Input",ExpressionUUID->"7c234573-da53-4378-8a59-137fa5129077"],
Cell[1494479, 37417, 495, 8, 60, "Text",ExpressionUUID->"b43165da-3bb3-4990-9a15-452bd9be7baf"],
Cell[1494977, 37427, 921, 25, 78, "Input",ExpressionUUID->"11687818-5d43-4ccb-9b1a-a386bf876164"]
}, Closed]],
Cell[CellGroupData[{
Cell[1495935, 37457, 248, 10, 37, "Subsubsection",ExpressionUUID->"ec6d0a04-6d38-4937-aef3-02991cb05389"],
Cell[1496186, 37469, 607, 17, 60, "Text",ExpressionUUID->"d6a06861-cd56-42fe-b285-42345f351971"],
Cell[1496796, 37488, 3168, 85, 193, "Input",ExpressionUUID->"576e9621-987d-4255-b1f8-d245a5568d5e"],
Cell[1499967, 37575, 568, 8, 60, "Text",ExpressionUUID->"4b5e3860-c016-4497-bfb8-c0da48d267d6"],
Cell[1500538, 37585, 2722, 80, 170, "Input",ExpressionUUID->"ba594d6f-3819-4f8f-b211-d5a6f3f99bbe"],
Cell[1503263, 37667, 554, 10, 60, "Text",ExpressionUUID->"d78be527-b83c-43cc-ada5-5e64c2484c1d"],
Cell[1503820, 37679, 1506, 34, 170, "Input",ExpressionUUID->"dea4a981-3a46-4c32-877c-b2fed5b7e6be"],
Cell[1505329, 37715, 19444, 434, 1734, "Input",ExpressionUUID->"1097e10a-28ac-46c1-9265-70117b5e0929"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1524822, 38155, 161, 7, 54, "Subsection",ExpressionUUID->"3a3abbe5-3902-4336-b5da-2902681c5259"],
Cell[CellGroupData[{
Cell[1525008, 38166, 210, 10, 46, "Subsubsection",ExpressionUUID->"7f955be0-4edd-4113-a5e6-96bceb7668ca"],
Cell[1525221, 38178, 242, 4, 36, "Text",ExpressionUUID->"9f7c5c94-ac60-4997-be1e-58bb6e38fc3d"],
Cell[1525466, 38184, 1612, 35, 147, "Input",ExpressionUUID->"c5c128cf-b607-4545-b4a2-b8ea79224d4c"],
Cell[1527081, 38221, 202, 3, 36, "Text",ExpressionUUID->"622a898b-b5e4-4494-8eee-2463f4c1f24d"],
Cell[1527286, 38226, 356, 10, 31, "Input",ExpressionUUID->"fce54413-8de9-4eb3-bcd0-0193015afbb5"],
Cell[1527645, 38238, 123, 0, 36, "Text",ExpressionUUID->"a1348cc7-3f8f-45a0-929e-c63d8f27d257"],
Cell[1527771, 38240, 602, 18, 31, "Input",ExpressionUUID->"fc1e8314-e5af-48e0-aaa3-6e5d02f80c37"],
Cell[1528376, 38260, 5258, 128, 400, "Input",ExpressionUUID->"eef13236-ee54-441a-aed0-2a91d14eb097"],
Cell[1533637, 38390, 192, 3, 36, "Text",ExpressionUUID->"cfbeb5c6-3cae-455f-bd53-56b06eb6c0ac"],
Cell[1533832, 38395, 256, 7, 31, "Input",ExpressionUUID->"d22e8443-b5f0-4761-aa0a-f4708e768ab8"],
Cell[1534091, 38404, 12048, 279, 768, "Input",ExpressionUUID->"c494daba-d1ca-41e9-bd03-0e1b250c38fe"],
Cell[1546142, 38685, 1129, 33, 31, "Input",ExpressionUUID->"55730541-4165-4dc0-9be5-83864a153d7b"],
Cell[1547274, 38720, 898, 25, 56, "Input",ExpressionUUID->"b3e532d1-2d13-4932-9d9d-6f5b59bf635f"],
Cell[1548175, 38747, 1843, 57, 101, "Input",ExpressionUUID->"07e42029-8425-4d9c-a50e-eec83346d934"]
}, Closed]],
Cell[CellGroupData[{
Cell[1550055, 38809, 207, 10, 38, "Subsubsection",ExpressionUUID->"72150ce5-87ae-4aa2-a8d3-dccee38e5126"],
Cell[1550265, 38821, 249, 5, 36, "Text",ExpressionUUID->"a3025936-6284-43e5-9d45-9672198d3380"],
Cell[1550517, 38828, 473, 12, 55, "Input",ExpressionUUID->"6c7c9df7-3c4d-4c07-a925-e1aa17d74f58"],
Cell[1550993, 38842, 7998, 196, 723, "Input",ExpressionUUID->"db23dc80-a7f9-4bfb-88f8-2da668610973"],
Cell[1558994, 39040, 810, 19, 56, "Input",ExpressionUUID->"9ccab754-5c14-490c-af12-d97668f0c73f"]
}, Closed]],
Cell[CellGroupData[{
Cell[1559841, 39064, 226, 10, 38, "Subsubsection",ExpressionUUID->"96041e09-1730-4586-a599-a2b3e68ceeda"],
Cell[1560070, 39076, 412, 10, 31, "Input",ExpressionUUID->"2132d6b2-c08d-4339-82a2-a15e76083af0"],
Cell[1560485, 39088, 246, 4, 36, "Text",ExpressionUUID->"d4b0fd2f-3f55-4121-a87b-e462b32139de"],
Cell[1560734, 39094, 9376, 233, 838, "Input",ExpressionUUID->"a53f6062-30fe-437d-b029-bac818bfe878"]
}, Closed]],
Cell[CellGroupData[{
Cell[1570147, 39332, 212, 10, 38, "Subsubsection",ExpressionUUID->"cc1c688a-a953-4ad1-8c00-207a00d3d390"],
Cell[1570362, 39344, 563, 15, 55, "Input",ExpressionUUID->"d8204356-31ec-41bf-85a3-329d71af5919"],
Cell[1570928, 39361, 4603, 109, 355, "Input",ExpressionUUID->"4515f70e-fd90-4284-90ae-48aaaefc5f59"],
Cell[1575534, 39472, 2053, 51, 194, "Input",ExpressionUUID->"0bc372bd-4879-41a1-9608-420aebbe9d76"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1577636, 39529, 162, 7, 38, "Subsection",ExpressionUUID->"9da2536e-5255-40c8-9d5f-6c80a71c9ba9"],
Cell[1577801, 39538, 1074, 26, 55, "Input",ExpressionUUID->"51869ead-39dc-4326-b16e-f284363edc72"],
Cell[1578878, 39566, 263, 7, 31, "Input",ExpressionUUID->"18de30f7-f9bc-4e58-899b-c25a70d6e576"],
Cell[1579144, 39575, 22340, 523, 2356, "Input",ExpressionUUID->"0e8a08fa-b6e2-47b2-9ddc-c88669648bb5"],
Cell[1601487, 40100, 22765, 534, 2402, "Input",ExpressionUUID->"451122a3-ea7f-4eb2-afd0-97576bbb0b4d"],
Cell[1624255, 40636, 159, 4, 31, "Input",ExpressionUUID->"96bf7a12-2465-47ed-a4c0-1ee77155c9c0"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1624463, 40646, 169, 4, 68, "Section",ExpressionUUID->"1a5eceee-b69b-4f22-96c7-8e73e72a41a3"],
Cell[1624635, 40652, 1013, 19, 113, "Input",ExpressionUUID->"94c59a73-0d0a-4e85-9324-d6b5a0a0358c"],
Cell[1625651, 40673, 409, 9, 51, "Input",ExpressionUUID->"b3f75340-83d6-4f56-84d9-1dce12ac7c2d"],
Cell[1626063, 40684, 276, 7, 29, "Input",ExpressionUUID->"3c0352af-5991-4289-8f2d-bdcef561871f"],
Cell[1626342, 40693, 378, 8, 51, "Input",ExpressionUUID->"05536d25-65ec-49d0-bf5d-5596468379be"],
Cell[1626723, 40703, 772, 14, 113, "Input",ExpressionUUID->"0e8a696a-6c76-4943-bb77-2ae201723d80"],
Cell[1627498, 40719, 383, 8, 71, "Input",ExpressionUUID->"4e18438a-e695-4fe8-a9f1-b92ee04def53"],
Cell[1627884, 40729, 3709, 74, 546, "Input",ExpressionUUID->"995b814d-9fd4-4556-82a2-9bdf37627324"],
Cell[1631596, 40805, 386, 9, 71, "Input",ExpressionUUID->"fdfce7ad-9182-480b-beae-bb4def33a27c"],
Cell[1631985, 40816, 453, 9, 71, "Input",ExpressionUUID->"09693627-693f-4657-b33a-7711891b5fb4"],
Cell[1632441, 40827, 932, 15, 133, "Input",ExpressionUUID->"81617218-c397-44be-9d25-b20f16782d70"],
Cell[1633376, 40844, 471, 10, 71, "Input",ExpressionUUID->"dde496ea-e0b5-48c9-8d9d-f7b1d801b65d"],
Cell[1633850, 40856, 1626, 37, 257, "Input",ExpressionUUID->"892e04a4-7d31-4b14-bba7-020fbe603504"],
Cell[1635479, 40895, 326, 8, 35, "Text",ExpressionUUID->"84c69218-171a-41bc-8219-ed60ff00aca1",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1635808, 40905, 161, 4, 29, "Input",ExpressionUUID->"e47b49c9-e5e0-4a21-b4a5-fe8e39628986"],
Cell[1635972, 40911, 358, 7, 58, "Text",ExpressionUUID->"e748c0f3-df64-42d6-87f5-28272dacc2b8",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[CellGroupData[{
Cell[1636355, 40922, 201, 7, 54, "Subsection",ExpressionUUID->"b421c4a5-f9af-45e4-9e55-e86c4b1f2173"],
Cell[1636559, 40931, 571, 10, 60, "Text",ExpressionUUID->"6ede69b5-9cd3-40d6-8030-7f30f6e16e45",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1637133, 40943, 1291, 31, 78, "Input",ExpressionUUID->"1582d3a9-c8cc-426c-8ab3-212145dbcfd9"],
Cell[1638427, 40976, 4683, 106, 402, "Input",ExpressionUUID->"1c7c3caf-7ab3-4ba1-9303-8f735c3074af"],
Cell[1643113, 41084, 184, 3, 36, "Text",ExpressionUUID->"96468a92-9280-4668-9fd6-d8b45ffcae1c"],
Cell[1643300, 41089, 7884, 190, 538, "Input",ExpressionUUID->"d6c4b3fa-068f-4426-8cfb-03cc135e9999"],
Cell[1651187, 41281, 89, 0, 36, "Text",ExpressionUUID->"d07f32ca-e009-4c97-9ef5-2d2d35fca7f1"],
Cell[1651279, 41283, 726, 16, 78, "Input",ExpressionUUID->"2683869c-5a0d-4f99-8163-03e3e6c6e4c1"],
Cell[1652008, 41301, 147, 1, 36, "Text",ExpressionUUID->"722a37c4-a4d0-4b05-8bf8-9c366eb6f46e"],
Cell[1652158, 41304, 645, 14, 78, "Input",ExpressionUUID->"f5015e46-e498-4b07-a0ac-d75b53617e72"],
Cell[1652806, 41320, 173, 2, 36, "Text",ExpressionUUID->"c8c68ec7-03ea-4e29-ba44-3015f200f85e"],
Cell[1652982, 41324, 344, 7, 31, "Input",ExpressionUUID->"3106667a-11eb-4780-926d-baf2b5d3a0e2"],
Cell[1653329, 41333, 2132, 42, 285, "Input",ExpressionUUID->"30428b62-019d-4462-a5c4-caf71e72d582"]
}, Closed]],
Cell[CellGroupData[{
Cell[1655498, 41380, 204, 7, 38, "Subsection",ExpressionUUID->"f1dbc753-d435-4a6d-b4c7-d4c5d80e2489"],
Cell[1655705, 41389, 336, 5, 36, "Text",ExpressionUUID->"8a59d881-3445-4f2a-b48e-5e32bf7183ce"],
Cell[1656044, 41396, 974, 28, 55, "Input",ExpressionUUID->"1f01aab2-4378-445b-a72d-37d60be47253"],
Cell[1657021, 41426, 2931, 81, 147, "Input",ExpressionUUID->"d314e179-4bbc-4d98-b9e4-7873d470a5b4"],
Cell[1659955, 41509, 1536, 37, 124, "Input",ExpressionUUID->"945fa8de-0371-4ec8-8bf9-5b2ba32db6e7"],
Cell[1661494, 41548, 45661, 1004, 4915, "Input",ExpressionUUID->"ae1065c1-9835-4724-90da-fb0ca984691d"]
}, Closed]],
Cell[CellGroupData[{
Cell[1707192, 42557, 207, 7, 38, "Subsection",ExpressionUUID->"55d41403-b71f-4712-8945-0b997fc3e9fc"],
Cell[CellGroupData[{
Cell[1707424, 42568, 210, 10, 45, "Subsubsection",ExpressionUUID->"290be3bd-6cd6-42a9-b0b4-2daac816a3f7"],
Cell[1707637, 42580, 796, 19, 84, "Text",ExpressionUUID->"447f1ff7-f6f1-4b68-b225-18d5b84df69c"],
Cell[1708436, 42601, 263, 7, 31, "Input",ExpressionUUID->"2abdcb7e-a329-4c28-89a4-c0712a671e8c"],
Cell[1708702, 42610, 292, 6, 36, "Text",ExpressionUUID->"48a2f804-bb3f-4b96-8514-12623bf46dd2"],
Cell[1708997, 42618, 3325, 85, 308, "Input",ExpressionUUID->"81285ccd-5c79-4ca6-a5bb-962031654f49"],
Cell[1712325, 42705, 153, 3, 36, "Text",ExpressionUUID->"bf79b8e3-b266-4a1c-85d1-49546d42b6d5",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1712481, 42710, 787, 24, 31, "Input",ExpressionUUID->"f0cb170a-4656-43f9-8752-10329083bf70"],
Cell[1713271, 42736, 221, 6, 36, "Text",ExpressionUUID->"3fc1bac3-6a2c-4450-ad3d-e56bb8f6e756",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1713495, 42744, 1828, 49, 101, "Input",ExpressionUUID->"9350bb9e-aefc-4ba0-b2e9-da8e7c773415"],
Cell[1715326, 42795, 307, 7, 36, "Text",ExpressionUUID->"7e7b5344-f3aa-4ff7-9a93-655aa5981cdd",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1715636, 42804, 4125, 105, 193, "Input",ExpressionUUID->"608773a7-0343-4a33-a275-7d15ebd221ff"],
Cell[1719764, 42911, 453, 11, 36, "Text",ExpressionUUID->"8ed856c5-c355-4898-b1c2-bef1edda5791",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[1720220, 42924, 6497, 175, 331, "Input",ExpressionUUID->"f707761b-1ad8-4aa9-b776-21942ab6643e"],
Cell[1726720, 43101, 852, 14, 228, "Text",ExpressionUUID->"cbedef98-4127-444b-9ee9-ffb4bed25228"],
Cell[1727575, 43117, 5093, 143, 150, "Input",ExpressionUUID->"cc8e3ff8-7076-4368-a895-c8519c248787"]
}, Closed]],
Cell[CellGroupData[{
Cell[1732705, 43265, 205, 10, 37, "Subsubsection",ExpressionUUID->"55b41415-b87f-45d6-ae5e-aca2435e11de"],
Cell[1732913, 43277, 119, 0, 36, "Text",ExpressionUUID->"0885b392-b2fd-4780-9903-0fbd5a195227"],
Cell[1733035, 43279, 3380, 86, 239, "Input",ExpressionUUID->"c7254d77-2d03-49be-839d-bfdbbe6b49bc"],
Cell[1736418, 43367, 362, 8, 36, "Text",ExpressionUUID->"1e2561e4-ffc8-4f67-b3fe-5c4746621e15"],
Cell[1736783, 43377, 510, 15, 31, "Input",ExpressionUUID->"428ff97f-47b8-45c6-9353-57dd5f0c65f4"]
}, Closed]],
Cell[CellGroupData[{
Cell[1737330, 43397, 251, 10, 37, "Subsubsection",ExpressionUUID->"81d67273-9b26-414a-a5f0-80d08ea001b8"],
Cell[1737584, 43409, 577, 10, 60, "Text",ExpressionUUID->"ce4ea755-2d49-4d31-a237-73868146b97e"],
Cell[1738164, 43421, 4658, 114, 239, "Input",ExpressionUUID->"0268e5a1-685a-4320-8297-c39e08915f9f"],
Cell[1742825, 43537, 598, 17, 60, "Text",ExpressionUUID->"9221967a-f63c-4744-988c-c5f303490c92"],
Cell[1743426, 43556, 1874, 48, 101, "Input",ExpressionUUID->"698ff176-71ea-4237-8313-e6913c60ad17",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[1745337, 43609, 253, 10, 37, "Subsubsection",ExpressionUUID->"d1fab53a-de07-48f1-93f0-70bc5cde1457"],
Cell[1745593, 43621, 733, 10, 84, "Text",ExpressionUUID->"dc6837e1-787c-442c-80cd-520333ce3f5f"],
Cell[1746329, 43633, 532, 12, 60, "Text",ExpressionUUID->"e8c0dde9-119e-450e-a13c-b7bbc49d9f1f"],
Cell[1746864, 43647, 2674, 70, 125, "Input",ExpressionUUID->"6bb5f098-1b81-4ff9-8347-a41be479755a"],
Cell[1749541, 43719, 250, 8, 36, "Text",ExpressionUUID->"cff90433-d8ab-476a-ad2c-1532a1f446d2"],
Cell[1749794, 43729, 29509, 684, 2310, "Input",ExpressionUUID->"17491090-7169-444d-b2da-af5b9d96d2d9"],
Cell[1779306, 44415, 641, 13, 101, "Input",ExpressionUUID->"f72f2ae8-e5ad-4b2e-8d85-c74a81e34d37",
 Evaluatable->False],
Cell[1779950, 44430, 277, 7, 36, "Text",ExpressionUUID->"2004339b-a5ed-4d7c-b973-c688b4490b2b"],
Cell[1780230, 44439, 948, 28, 78, "Input",ExpressionUUID->"7c51d151-19a1-417a-95a4-dd52acd99d83"],
Cell[1781181, 44469, 471, 9, 60, "Text",ExpressionUUID->"0dc33902-e4f9-45e2-992f-be3c58c2bc19"],
Cell[1781655, 44480, 6930, 181, 584, "Input",ExpressionUUID->"f0cac43a-a5b5-414c-9ba9-84c76d1035cb"],
Cell[1788588, 44663, 297, 6, 36, "Text",ExpressionUUID->"05bf773e-bea5-4d74-8f4a-bfdbd69f354f"],
Cell[1788888, 44671, 4603, 137, 308, "Input",ExpressionUUID->"e2b95f55-d196-4acd-946c-7969f350f8e6"],
Cell[1793494, 44810, 242, 4, 36, "Text",ExpressionUUID->"a44a8f39-8078-43d6-8469-d67e5178d3b6"],
Cell[1793739, 44816, 1164, 38, 78, "Input",ExpressionUUID->"2e03cc5f-3e40-447c-a7ab-d9d15462853c"],
Cell[1794906, 44856, 529, 16, 55, "Input",ExpressionUUID->"16fbb544-26f0-494c-85d5-878560147981"]
}, Closed]],
Cell[CellGroupData[{
Cell[1795472, 44877, 239, 10, 37, "Subsubsection",ExpressionUUID->"6b939310-0ac4-4f83-be43-f67d5d5a528e"],
Cell[1795714, 44889, 569, 8, 60, "Text",ExpressionUUID->"5e04349c-e89b-4453-bdf9-a0c8881e0241"],
Cell[1796286, 44899, 508, 16, 78, "Input",ExpressionUUID->"cc91ff43-d28b-482a-be73-3ba36c80c350"],
Cell[1796797, 44917, 188, 3, 36, "Text",ExpressionUUID->"2d39579c-cb56-4b14-97e8-b5a458470a2b"],
Cell[1796988, 44922, 1204, 38, 101, "Input",ExpressionUUID->"eb8a3752-a219-4986-8081-23da3b90344f"],
Cell[1798195, 44962, 84, 0, 36, "Text",ExpressionUUID->"1158ca6d-7a2b-4078-832c-c1c5afb310fb"],
Cell[1798282, 44964, 1080, 33, 101, "Input",ExpressionUUID->"58f6f4ea-7bc7-409c-a237-5e64d7f13d66"],
Cell[1799365, 44999, 84, 0, 36, "Text",ExpressionUUID->"b38a2216-04d4-4e65-8628-b4f0c0bbbf33"],
Cell[1799452, 45001, 9333, 269, 239, "Input",ExpressionUUID->"2b946737-44b6-451d-9d2e-6e6d73d49ef9"],
Cell[1808788, 45272, 84, 0, 36, "Text",ExpressionUUID->"2c5fdd3a-19a6-4dce-bd2e-97d71e72f516"],
Cell[1808875, 45274, 9515, 273, 308, "Input",ExpressionUUID->"cb52c7bd-0855-49a8-859e-4de8a9ef6df0"],
Cell[1818393, 45549, 84, 0, 36, "Text",ExpressionUUID->"3bef303a-2d39-473f-83a0-e62c7ff49610"],
Cell[1818480, 45551, 14955, 404, 515, "Input",ExpressionUUID->"0328597e-8fe7-4b0d-92f9-a316bbe443df"],
Cell[1833438, 45957, 8148, 220, 540, "Input",ExpressionUUID->"ab6bea84-001b-4b02-9aa9-6b8fb29d0ba7"],
Cell[1841589, 46179, 868, 25, 84, "Text",ExpressionUUID->"8b74032a-596c-4fee-b8ce-04141b63b542"],
Cell[1842460, 46206, 4229, 112, 285, "Input",ExpressionUUID->"554103e6-a29b-4723-9efd-93a40e169911"],
Cell[1846692, 46320, 152, 2, 36, "Text",ExpressionUUID->"47be6f27-a1e2-4cb4-a3be-3ca2063d46e3"],
Cell[1846847, 46324, 5961, 162, 331, "Input",ExpressionUUID->"d673cd2d-15a8-4500-b2c4-5a6883ae1b9f"],
Cell[1852811, 46488, 258, 4, 36, "Text",ExpressionUUID->"9962236f-dfbf-487d-aa34-55b0ca8cecff"],
Cell[1853072, 46494, 30069, 784, 1161, "Input",ExpressionUUID->"af198689-fe63-473c-952c-2aa5f912deba"],
Cell[1883144, 47280, 347, 8, 36, "Text",ExpressionUUID->"2444e767-719e-43aa-bcf8-ac696b7ebc2b"],
Cell[1883494, 47290, 4130, 115, 265, "Input",ExpressionUUID->"c92ebfe4-be39-406a-9c4e-556bcfdb6856"],
Cell[1887627, 47407, 223, 5, 36, "Text",ExpressionUUID->"25567cf3-ccfa-4176-a986-2401bfb33078"],
Cell[1887853, 47414, 13486, 302, 908, "Input",ExpressionUUID->"e15179ba-0719-4a98-a6c6-9518331698c8"],
Cell[1901342, 47718, 1176, 20, 108, "Text",ExpressionUUID->"cb6f7345-5eaa-463d-8231-cb699aa451e1"],
Cell[1902521, 47740, 851, 22, 31, "Input",ExpressionUUID->"6217af8e-f291-4a5f-a58d-8f82e1c54e27"],
Cell[1903375, 47764, 146, 2, 36, "Text",ExpressionUUID->"2c3ab399-4e9f-4e2a-8d99-3660d335853f"],
Cell[1903524, 47768, 1049, 28, 55, "Input",ExpressionUUID->"9bbc0161-7f45-4686-bd06-988971ddfd73"],
Cell[1904576, 47798, 14769, 330, 1389, "Input",ExpressionUUID->"d4890554-90e0-42a9-86f4-1d2a82521921"],
Cell[1919348, 48130, 155, 2, 36, "Text",ExpressionUUID->"6af371d5-cdce-42d3-9d00-718c673adabd"],
Cell[1919506, 48134, 968, 25, 55, "Input",ExpressionUUID->"020ae9ac-d0ef-4107-9b7a-be91adf56222"],
Cell[1920477, 48161, 47637, 1119, 3947, "Input",ExpressionUUID->"857d310c-9b2c-4477-b16e-d7de6f6b376e"],
Cell[1968117, 49282, 451, 7, 84, "Text",ExpressionUUID->"47037364-9723-4221-935c-8aebf6fdf2b6"],
Cell[1968571, 49291, 2317, 61, 170, "Input",ExpressionUUID->"5dd2c4d8-520c-4852-829b-8d525069cb08"],
Cell[1970891, 49354, 170, 3, 36, "Text",ExpressionUUID->"ef4f3899-ff66-40e2-9dbd-b2e162e19d53"],
Cell[1971064, 49359, 2964, 77, 310, "Input",ExpressionUUID->"52dd6b39-b977-4b09-b4ef-47ceafdaa18c"],
Cell[1974031, 49438, 168, 3, 36, "Text",ExpressionUUID->"b0a4a4db-d801-48f0-8aab-b04a6133df77"],
Cell[1974202, 49443, 757, 21, 101, "Input",ExpressionUUID->"b02ea6a8-ef58-4136-9ce4-e0a6d6be6cde"],
Cell[1974962, 49466, 495, 7, 60, "Text",ExpressionUUID->"ad4dec47-a002-415e-a4a5-6916aa5fd1a4"],
Cell[1975460, 49475, 278, 7, 31, "Input",ExpressionUUID->"3079c51e-3f79-47ce-a638-aec09bde9b3b"],
Cell[1975741, 49484, 1817, 50, 124, "Input",ExpressionUUID->"8f3e3a30-ed23-48ba-a50c-1d2287fa14fb"]
}, Closed]]
}, Open  ]],
Cell[1977585, 49538, 326, 5, 58, "Text",ExpressionUUID->"20d3877f-ed51-4b81-aebd-1ae658cddb64"],
Cell[1977914, 49545, 3795, 96, 248, "Input",ExpressionUUID->"b843e462-9dfd-499b-842d-5565bf7e505a"],
Cell[1981712, 49643, 308, 5, 35, "Text",ExpressionUUID->"5ce43845-2468-4e8a-b2d3-e30f3c09302a"],
Cell[1982023, 49650, 686, 11, 127, "Text",ExpressionUUID->"193e1a05-11a4-4e74-a26e-16179a029270"],
Cell[1982712, 49663, 384, 9, 35, "Text",ExpressionUUID->"02c3bac8-40ad-4d2e-963e-4379fbcf843f"],
Cell[1983099, 49674, 159, 4, 29, "Input",ExpressionUUID->"b3bd9c2f-ff11-4018-ab02-e9be1a13e50e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1983295, 49683, 238, 5, 107, "Section",ExpressionUUID->"ad8cc3f7-6a4a-450d-b8fa-5c494d1a4c52"],
Cell[1983536, 49690, 303, 6, 81, "Text",ExpressionUUID->"a5d2a1c8-1acc-4371-a78f-446ab0a15ad9"],
Cell[1983842, 49698, 1138, 19, 113, "Input",ExpressionUUID->"6e81be12-42b0-46a0-bbc1-929a9df266d3"],
Cell[1984983, 49719, 409, 9, 51, "Input",ExpressionUUID->"6e77c918-e972-442c-8856-24ff3f70a33d"],
Cell[1985395, 49730, 718, 14, 113, "Input",ExpressionUUID->"ec6ba39a-9e84-47f4-aa64-4f781899963e"],
Cell[1986116, 49746, 449, 9, 71, "Input",ExpressionUUID->"bf9010a6-3cd6-4ec3-832a-5dd15604e12c"],
Cell[1986568, 49757, 227, 6, 29, "Input",ExpressionUUID->"39b7f38c-330c-4df2-8301-f3f6a30c9def"],
Cell[1986798, 49765, 1175, 24, 195, "Input",ExpressionUUID->"a1337e2d-f168-48bc-a6d7-e7b1f36d9ba9"],
Cell[1987976, 49791, 233, 6, 29, "Input",ExpressionUUID->"28e24135-f389-4678-972c-67ea4b45fb0a"],
Cell[1988212, 49799, 250, 6, 29, "Input",ExpressionUUID->"754235ca-845b-4266-bf05-f180d1449716"],
Cell[1988465, 49807, 247, 6, 29, "Input",ExpressionUUID->"7703a856-ace5-4f1d-a927-380606f4b4b2"],
Cell[1988715, 49815, 802, 19, 113, "Input",ExpressionUUID->"0afea192-e094-4eb6-a9d9-8a3fd4768973"],
Cell[1989520, 49836, 826, 14, 92, "Input",ExpressionUUID->"d6e72a7a-93df-4d0a-9eb5-406e94e664f9"],
Cell[1990349, 49852, 493, 10, 71, "Input",ExpressionUUID->"92960c84-eff0-47ef-be15-1312655ea2cf"],
Cell[1990845, 49864, 410, 8, 71, "Input",ExpressionUUID->"46ec411f-65b8-459d-8bd8-68740977287d"],
Cell[1991258, 49874, 291, 7, 29, "Input",ExpressionUUID->"ce70a08f-62ea-47b9-b6b6-6b6a9c2a3e81"],
Cell[1991552, 49883, 292, 7, 29, "Input",ExpressionUUID->"45f86e9b-62a2-4eaf-a40e-79682206084b"],
Cell[1991847, 49892, 287, 7, 29, "Input",ExpressionUUID->"0eab2c32-15eb-446f-bef3-732c13a0fc2c"],
Cell[1992137, 49901, 385, 8, 71, "Input",ExpressionUUID->"fecca069-d895-44fe-b82f-9d39a316f333"],
Cell[1992525, 49911, 271, 7, 29, "Input",ExpressionUUID->"b953d84b-7e50-4a17-ac88-788223a98417"],
Cell[1992799, 49920, 725, 13, 113, "Input",ExpressionUUID->"8e651f5e-364c-451d-ad9a-f629cb3dd5b9"],
Cell[1993527, 49935, 327, 8, 29, "Input",ExpressionUUID->"c52028b0-7b3f-4a86-a9ce-426845494f03"],
Cell[1993857, 49945, 346, 8, 29, "Input",ExpressionUUID->"df9cef97-9ac7-40f4-bedf-f7efc5d28b6f"],
Cell[1994206, 49955, 297, 7, 29, "Input",ExpressionUUID->"f2e72c64-73db-40d1-99fa-90e9427adfd9"],
Cell[1994506, 49964, 413, 9, 71, "Input",ExpressionUUID->"b9b35ec4-7176-45cb-b538-949a6b741942"],
Cell[1994922, 49975, 271, 7, 29, "Input",ExpressionUUID->"edc0e87c-f6f7-4217-b581-ffa1160b4094"],
Cell[1995196, 49984, 453, 9, 71, "Input",ExpressionUUID->"6bdc207a-e012-4d00-b1fd-79db51396307"],
Cell[1995652, 49995, 291, 7, 29, "Input",ExpressionUUID->"12619815-3228-42a2-8d89-7269ac4ad49e"],
Cell[1995946, 50004, 496, 10, 71, "Input",ExpressionUUID->"6f4a2303-236e-4946-879c-8f85ce698b85"],
Cell[1996445, 50016, 383, 8, 29, "Input",ExpressionUUID->"339161dc-6228-4b0a-9e68-3490f6dd1020"],
Cell[1996831, 50026, 375, 8, 29, "Input",ExpressionUUID->"ed238c6d-e570-4607-af71-367633facbde"],
Cell[1997209, 50036, 290, 7, 29, "Input",ExpressionUUID->"598c2736-42c5-4a71-b2da-4bb7cc904f0a"],
Cell[1997502, 50045, 826, 15, 133, "Input",ExpressionUUID->"89be4443-1bf5-4b2d-80b6-b5fb9fe04e1b"],
Cell[1998331, 50062, 161, 4, 29, "Input",ExpressionUUID->"ab7c6c8e-f4cf-434e-b920-24939b0fb2cd"],
Cell[CellGroupData[{
Cell[1998517, 50070, 281, 8, 54, "Subsection",ExpressionUUID->"2e0a9323-c2a9-4d92-a4c3-d72783be4955"],
Cell[CellGroupData[{
Cell[1998823, 50082, 210, 10, 45, "Subsubsection",ExpressionUUID->"609fedae-f0a6-4e20-8d3a-a7d69b794a56"],
Cell[1999036, 50094, 147, 2, 35, "Text",ExpressionUUID->"693a8320-1a64-4d03-84d1-6d88534d36f1"],
Cell[1999186, 50098, 266, 7, 29, "Input",ExpressionUUID->"74826a15-5714-480d-a45b-c7829612f1d9"],
Cell[1999455, 50107, 1006, 29, 71, "Input",ExpressionUUID->"e9dc2406-c012-4fe7-9b57-de9f063df025"],
Cell[2000464, 50138, 318, 5, 58, "Text",ExpressionUUID->"b34db859-bf61-46b9-a121-cec6a5d200b6"],
Cell[2000785, 50145, 2876, 74, 165, "Input",ExpressionUUID->"b177e3f5-1cee-448a-a74c-ed2fee12b8b0"],
Cell[2003664, 50221, 116, 0, 35, "Text",ExpressionUUID->"0fd7087d-0361-43e0-b5c0-f209cbbdb4d6"],
Cell[2003783, 50223, 13219, 306, 917, "Input",ExpressionUUID->"63d04127-4c3f-452e-8c7e-95f882607677"],
Cell[2017005, 50531, 8951, 210, 711, "Input",ExpressionUUID->"96ef3f93-9b5a-45db-98bf-4dab7e9770f6"],
Cell[2025959, 50743, 7359, 175, 628, "Input",ExpressionUUID->"14d362b8-803f-419e-9729-cb1cd8ce8578"],
Cell[2033321, 50920, 6497, 158, 525, "Input",ExpressionUUID->"e00fc2cf-f759-4e7b-af04-d4082c9f4c59"],
Cell[2039821, 51080, 5259, 131, 504, "Input",ExpressionUUID->"1b6e5568-5fd2-43ec-a11e-cc317d935eb6"],
Cell[2045083, 51213, 5108, 127, 504, "Input",ExpressionUUID->"d0c37fb4-3b6f-46dd-877e-88e6cffd3559"],
Cell[2050194, 51342, 221, 3, 35, "Text",ExpressionUUID->"4ebf6a85-149d-434e-b7fd-0cf5479293ac"],
Cell[2050418, 51347, 1703, 53, 75, "Input",ExpressionUUID->"f632001d-c1a4-43b6-88dd-30e0fd929656"]
}, Open  ]],
Cell[2052136, 51403, 250, 4, 35, "Text",ExpressionUUID->"e69f5364-a095-4719-b486-26c543943f1f"],
Cell[2052389, 51409, 2046, 52, 95, "Input",ExpressionUUID->"f5e61b77-eeed-4dab-b50c-8696615498c0"],
Cell[2054438, 51463, 2120, 55, 95, "Input",ExpressionUUID->"d7cda6df-f2c8-4d4f-b57c-8fbffbd14289"],
Cell[2056561, 51520, 236, 4, 35, "Text",ExpressionUUID->"30aaddc1-929b-40e8-9547-4bfa1b3d7d31"],
Cell[2056800, 51526, 1968, 63, 75, "Input",ExpressionUUID->"c471a59e-c8d7-4854-a9a1-94f2c05b4fb6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2058817, 51595, 256, 10, 45, "Subsubsection",ExpressionUUID->"b13efc83-bc7c-46ab-9a4a-914c637b0c2d"],
Cell[2059076, 51607, 106, 0, 35, "Text",ExpressionUUID->"5b2efb92-da2e-4f90-a75c-ec537b3c7c89"],
Cell[2059185, 51609, 14449, 316, 1266, "Input",ExpressionUUID->"8ce879f3-043c-464a-8920-b1037d5dd40f"],
Cell[2073637, 51927, 1441, 23, 150, "Text",ExpressionUUID->"d1d20f09-1cfd-43fd-861a-226c7cee16f4"],
Cell[2075081, 51952, 27000, 594, 2203, "Input",ExpressionUUID->"cf1587eb-56b9-4d0e-9141-1216a6462173"],
Cell[2102084, 52548, 398, 6, 58, "Text",ExpressionUUID->"8821b710-7077-4005-9e9b-d5fdea06ead8"],
Cell[2102485, 52556, 1090, 29, 98, "Input",ExpressionUUID->"d0a1c123-9fc1-40c0-9474-d7135866213c"],
Cell[2103578, 52587, 2651, 69, 257, "Input",ExpressionUUID->"0aa770b1-4cf8-4c69-ae65-99f96ff18d08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2106266, 52661, 246, 10, 45, "Subsubsection",ExpressionUUID->"f5e4679a-51f2-4f30-a4a6-39a186a4006a"],
Cell[2106515, 52673, 523, 13, 58, "Text",ExpressionUUID->"a63eafb2-f5c5-4388-9bce-3aa6994c6dd3"],
Cell[2107041, 52688, 625, 12, 196, "Text",ExpressionUUID->"033eda36-7d45-4fef-82bd-9fab1b89348d"],
Cell[CellGroupData[{
Cell[2107691, 52704, 200, 6, 32, "Item",ExpressionUUID->"4cc22a17-6e08-4600-94b5-8895e582b4f0"],
Cell[2107894, 52712, 1154, 33, 101, "Input",ExpressionUUID->"d6ff4e1c-0345-46f4-ac37-67cf4d377f65"],
Cell[2109051, 52747, 247, 4, 36, "Text",ExpressionUUID->"f56b90ca-9305-463d-b1cb-05676de050c4"],
Cell[2109301, 52753, 247, 4, 36, "Text",ExpressionUUID->"5faeaee6-a6b8-44f2-bf67-0510e5142bac"],
Cell[2109551, 52759, 6741, 159, 608, "Input",ExpressionUUID->"d38c3062-cd4b-4bbd-be63-569b36c7b5cb"]
}, Closed]],
Cell[CellGroupData[{
Cell[2116329, 52923, 207, 6, 28, "Item",ExpressionUUID->"7fd57813-76f4-4624-a0ef-9f010a40e535"],
Cell[2116539, 52931, 120, 0, 36, "Text",ExpressionUUID->"9cbf9e04-51c1-4680-9faa-42bbb7dc4750"],
Cell[2116662, 52933, 320, 9, 31, "Input",ExpressionUUID->"5b066951-cbd9-40a6-8b8b-2ba5239821be"],
Cell[2116985, 52944, 267, 4, 36, "Text",ExpressionUUID->"382de8fa-0b4e-46d2-acf0-849cacaf7801"],
Cell[2117255, 52950, 2741, 69, 286, "Input",ExpressionUUID->"a9e194d9-db80-4282-ad33-34ac121154fc"]
}, Closed]],
Cell[CellGroupData[{
Cell[2120033, 53024, 227, 6, 28, "Item",ExpressionUUID->"6b585bd4-bcf6-4930-938e-b3ad9f37ee03"],
Cell[2120263, 53032, 342, 9, 31, "Input",ExpressionUUID->"c0b50bab-b314-4bee-9b70-b689f9e7bbbd"],
Cell[2120608, 53043, 278, 4, 36, "Text",ExpressionUUID->"f09509cc-5b23-4ded-a3b2-756166317ed3"],
Cell[2120889, 53049, 2818, 69, 286, "Input",ExpressionUUID->"9c60d8a2-6960-42ec-818e-d2d8f685bd08"]
}, Closed]],
Cell[CellGroupData[{
Cell[2123744, 53123, 142, 4, 28, "Item",ExpressionUUID->"b7d090f9-7727-4901-936f-47cda74c93ee"],
Cell[2123889, 53129, 162, 3, 35, "Text",ExpressionUUID->"47ae94ea-e54a-4bad-bde8-7c30c3d4bcf4"],
Cell[2124054, 53134, 574, 16, 29, "Input",ExpressionUUID->"f2bfe04c-57de-4b26-8524-64e6182075d1"],
Cell[2124631, 53152, 114, 0, 35, "Text",ExpressionUUID->"7f64cc47-0e6b-4c90-8277-f66c712868c2"],
Cell[2124748, 53154, 569, 15, 29, "Input",ExpressionUUID->"28aabb57-1710-4c06-a6c3-c5519111a91f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2125366, 53175, 226, 7, 54, "Subsection",ExpressionUUID->"e83bcc65-c8fc-497f-8060-6331473310c2"],
Cell[CellGroupData[{
Cell[2125617, 53186, 210, 10, 45, "Subsubsection",ExpressionUUID->"55b37984-e8cf-48d8-8415-dacb11869c71"],
Cell[2125830, 53198, 152, 2, 36, "Text",ExpressionUUID->"52b99a4f-4433-405b-a330-39a386374be6"],
Cell[2125985, 53202, 3527, 94, 262, "Input",ExpressionUUID->"57371974-8cea-485c-bdb4-080b6b8cda5a"]
}, Closed]],
Cell[CellGroupData[{
Cell[2129549, 53301, 229, 10, 37, "Subsubsection",ExpressionUUID->"974bbbe1-0bdf-40b6-a835-c9d90bda2266"],
Cell[2129781, 53313, 265, 4, 36, "Text",ExpressionUUID->"d3a15c70-bd0b-4607-b4cb-4a2a0bdf27b7"],
Cell[2130049, 53319, 5054, 130, 291, "Input",ExpressionUUID->"4b829deb-360d-4c32-b0e3-60aee7b2dfc1"],
Cell[2135106, 53451, 223, 4, 60, "Text",ExpressionUUID->"e755e141-998c-44cb-ae4a-ef5eade99fd8"],
Cell[2135332, 53457, 539, 14, 31, "Input",ExpressionUUID->"14447705-1254-45ba-82d1-3e185e6839bb"],
Cell[2135874, 53473, 120, 0, 36, "Text",ExpressionUUID->"349dfad9-45f4-4db5-938f-a3753cdd0a02"],
Cell[2135997, 53475, 2752, 72, 216, "Input",ExpressionUUID->"fb2db81e-fa4c-40c7-add6-628f75ec57b6"]
}, Closed]],
Cell[CellGroupData[{
Cell[2138786, 53552, 277, 11, 37, "Subsubsection",ExpressionUUID->"d37128c4-0f6b-4e8e-9a83-e1c102c447d6"],
Cell[2139066, 53565, 482, 7, 60, "Text",ExpressionUUID->"26d3c6ca-c90a-40b5-a20c-5733e617020e"],
Cell[2139551, 53574, 1332, 38, 124, "Input",ExpressionUUID->"a29f11e7-1801-4317-9284-6d97263cd49b"],
Cell[2140886, 53614, 2146, 56, 88, "Text",ExpressionUUID->"7695d990-bbc8-49b0-b14c-c49e950c787f"],
Cell[2143035, 53672, 1922, 54, 101, "Input",ExpressionUUID->"89caa8c2-a89a-47e7-b5f9-99161efb5310"],
Cell[2144960, 53728, 302, 5, 60, "Text",ExpressionUUID->"50cab821-cde1-4aab-b197-cfbcdf25dc14"],
Cell[2145265, 53735, 597, 13, 36, "Text",ExpressionUUID->"9b1ee343-2dc8-4864-beaf-3685354f2a59"],
Cell[2145865, 53750, 7571, 180, 469, "Input",ExpressionUUID->"06c5696b-2d5a-46f3-9aa8-067e9ac1cb1a"],
Cell[CellGroupData[{
Cell[2153461, 53934, 281, 6, 36, "Text",ExpressionUUID->"7e939409-fed8-49a4-a9c0-48f82a1abac2",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[2153745, 53942, 6086, 148, 377, "Input",ExpressionUUID->"6e8f9dac-25bf-41cb-866e-364cd0b1ba14",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[2159846, 54093, 478, 7, 60, "Text",ExpressionUUID->"2a3f16db-e620-4876-bc07-b5beff4182b0"],
Cell[2160327, 54102, 287, 8, 31, "Input",ExpressionUUID->"edf1561c-7ae3-4a91-aa59-f949141bf133"],
Cell[2160617, 54112, 6179, 149, 446, "Input",ExpressionUUID->"9995e218-5bed-4a6e-8674-45488a6abd78"],
Cell[2166799, 54263, 250, 4, 36, "Text",ExpressionUUID->"3046382d-6c11-480e-9258-dcecff12adc8"],
Cell[2167052, 54269, 703, 19, 31, "Input",ExpressionUUID->"bfa7b7be-bebf-4a74-9c09-e7af6d6a46d5"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2167804, 54294, 192, 7, 54, "Subsection",ExpressionUUID->"1b9f7abf-8765-4fae-9d0f-70fe33580228"],
Cell[CellGroupData[{
Cell[2168021, 54305, 278, 11, 45, "Subsubsection",ExpressionUUID->"d66323cc-d3bd-4d9f-b606-d464679436a2"],
Cell[2168302, 54318, 99, 0, 36, "Text",ExpressionUUID->"14dd85b8-7d43-454e-aa92-91777034d6bd"],
Cell[2168404, 54320, 1151, 30, 78, "Input",ExpressionUUID->"e78aa264-a06f-4ab4-afb3-5d06b373e7b7"],
Cell[2169558, 54352, 1929, 50, 170, "Input",ExpressionUUID->"d4d7fc55-bf6b-42d1-8a0d-c06edd481337"],
Cell[2171490, 54404, 262, 5, 60, "Text",ExpressionUUID->"ebe71984-d4d8-443f-a870-69cbe52d137a"],
Cell[2171755, 54411, 801, 16, 60, "Text",ExpressionUUID->"646d3284-4920-4b7a-834e-6bd4e44a4e13"],
Cell[2172559, 54429, 2540, 64, 216, "Input",ExpressionUUID->"6ccb1b19-a494-480d-83e0-9946b48cdf99"]
}, Closed]],
Cell[CellGroupData[{
Cell[2175136, 54498, 219, 10, 37, "Subsubsection",ExpressionUUID->"1d3235a4-3b8f-4c32-afd4-1fb53e2e4d39"],
Cell[2175358, 54510, 157, 2, 36, "Text",ExpressionUUID->"9a3e8745-803b-4717-be54-0b20100bcce0"],
Cell[2175518, 54514, 583, 15, 44, "Text",ExpressionUUID->"39968301-8ed4-4ea5-9b43-796bfb5fd05a"],
Cell[2176104, 54531, 664, 17, 31, "Input",ExpressionUUID->"88006b3c-8976-40a1-956f-624b2afa906d"],
Cell[2176771, 54550, 346, 5, 36, "Text",ExpressionUUID->"520ff151-457d-4d62-afd3-fc43642b387a"],
Cell[2177120, 54557, 4577, 112, 423, "Input",ExpressionUUID->"555b31e7-67b4-45fd-b4c0-79e74b2b81e9"],
Cell[2181700, 54671, 166, 3, 36, "Text",ExpressionUUID->"5f7590fe-66b2-4ddd-b4b7-e36d7e001e8a"],
Cell[2181869, 54676, 2930, 73, 285, "Input",ExpressionUUID->"f96a4f9f-f0d9-4338-b2f6-045b28b9b240"]
}, Closed]],
Cell[CellGroupData[{
Cell[2184836, 54754, 225, 10, 37, "Subsubsection",ExpressionUUID->"febb48c3-948a-454c-9e8c-e77d907052e2"],
Cell[2185064, 54766, 332, 5, 36, "Text",ExpressionUUID->"ba9dc594-c6ec-4895-8707-1cfec3d233d7"],
Cell[2185399, 54773, 472, 10, 55, "Input",ExpressionUUID->"9319a5b5-e257-4ca8-ab6e-c9bb819de7a4"],
Cell[2185874, 54785, 1223, 36, 101, "Input",ExpressionUUID->"2d5e4afa-7584-4ecd-8821-a3590b737c99"],
Cell[2187100, 54823, 16383, 371, 1275, "Input",ExpressionUUID->"d87499b4-82a3-47f8-84ea-ff8267f5a1f7"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2203532, 55200, 181, 7, 54, "Subsection",ExpressionUUID->"da778ee9-3516-4215-a7f0-0dfb8240a529"],
Cell[CellGroupData[{
Cell[2203738, 55211, 232, 10, 45, "Subsubsection",ExpressionUUID->"20753717-d784-4393-9387-3ea09072cc8e"],
Cell[2203973, 55223, 884, 22, 62, "Text",ExpressionUUID->"1c34fd9c-65d4-4942-ab3b-bae6e6633225"],
Cell[2204860, 55247, 357, 9, 55, "Input",ExpressionUUID->"d5eeb054-5508-4cfb-adbf-80d3f0b790ac"],
Cell[2205220, 55258, 1507, 44, 78, "Input",ExpressionUUID->"e2139db2-c3f4-43d6-acf4-20a1dfb2af86"],
Cell[2206730, 55304, 3470, 105, 170, "Input",ExpressionUUID->"7ba2dc29-220a-4248-a842-4497827ba3e5"],
Cell[2210203, 55411, 2824, 82, 170, "Input",ExpressionUUID->"1a1b5c9d-fc59-4813-af59-18a40f0cbbb1"],
Cell[2213030, 55495, 2255, 38, 36, "Text",ExpressionUUID->"a73f2d00-6670-4285-876e-9627039d1d23"],
Cell[2215288, 55535, 440, 13, 31, "Input",ExpressionUUID->"8ce9d379-0662-44cf-b4e9-87ab921b03ad"],
Cell[2215731, 55550, 4295, 102, 377, "Input",ExpressionUUID->"c27640a3-0488-41d7-8159-f6fd1dc3c8f6"]
}, Closed]],
Cell[CellGroupData[{
Cell[2220063, 55657, 247, 10, 37, "Subsubsection",ExpressionUUID->"ee7ba460-0963-42d8-b7a6-ebe38c6eab0e"],
Cell[2220313, 55669, 884, 22, 62, "Text",ExpressionUUID->"3d8a73fa-b39d-45e8-b7d8-36193ae27a2a"],
Cell[2221200, 55693, 5076, 128, 424, "Input",ExpressionUUID->"cf74ba3a-4062-48e6-bd0d-877ce7e5e5de"]
}, Closed]],
Cell[CellGroupData[{
Cell[2226313, 55826, 235, 10, 38, "Subsubsection",ExpressionUUID->"d17ecdfd-8880-484e-845d-2aa96e0c11fc"],
Cell[2226551, 55838, 606, 15, 55, "Input",ExpressionUUID->"5bc7d203-d8aa-4a4b-acad-cd5c832c085d"],
Cell[2227160, 55855, 5691, 133, 379, "Input",ExpressionUUID->"735ee708-19bb-48d2-97d2-3768b197d6b4"],
Cell[2232854, 55990, 501, 13, 55, "Input",ExpressionUUID->"2c3d5b66-90f2-46fe-adc5-e41bc63f311a"],
Cell[2233358, 56005, 3451, 89, 194, "Input",ExpressionUUID->"18bd291e-6378-49a5-853a-ecd758f95173"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2236858, 56100, 179, 7, 55, "Subsection",ExpressionUUID->"f9892ec5-e908-4215-a4cf-0a7f89fa3b11"],
Cell[CellGroupData[{
Cell[2237062, 56111, 223, 10, 46, "Subsubsection",ExpressionUUID->"261a7080-1915-4a2e-9da0-5a68060c863f"],
Cell[2237288, 56123, 266, 4, 36, "Text",ExpressionUUID->"9a565e42-1531-417c-a796-88935052ed37"],
Cell[2237557, 56129, 435, 9, 31, "Input",ExpressionUUID->"0909644d-152d-426a-94af-e734fd27572e"],
Cell[2237995, 56140, 201, 3, 36, "Text",ExpressionUUID->"7d137e0b-63b1-46e2-9911-fe5111ff955d"],
Cell[2238199, 56145, 7831, 203, 354, "Input",ExpressionUUID->"807d5ecd-b32c-4819-91ed-b8b099ea6cf5"],
Cell[2246033, 56350, 267, 4, 36, "Text",ExpressionUUID->"aec00b51-cb0e-4f37-aeb9-cb3e23f571d6"],
Cell[2246303, 56356, 13247, 291, 446, "Input",ExpressionUUID->"44ffa5f5-4460-4526-bfd7-1285b4b5e654"],
Cell[2259553, 56649, 119, 0, 36, "Text",ExpressionUUID->"c2c48508-6709-4e7f-9ce2-0bc739ee5b22"],
Cell[2259675, 56651, 10939, 247, 584, "Input",ExpressionUUID->"156b6d13-ae86-4a24-9acd-0258ce2011de"],
Cell[2270617, 56900, 9756, 221, 538, "Input",ExpressionUUID->"5675d625-6002-4f65-881d-041d21bfb4aa"],
Cell[2280376, 57123, 271, 4, 36, "Text",ExpressionUUID->"80f63ccf-7158-487d-9d88-3c6ae67b51bd"],
Cell[2280650, 57129, 2406, 57, 240, "Input",ExpressionUUID->"e134cd94-e06e-474c-8530-47f73a8a8d71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2283093, 57191, 270, 10, 46, "Subsubsection",ExpressionUUID->"e0588dfe-52f4-4fd0-b517-25b6647b3a29"],
Cell[2283366, 57203, 346, 5, 36, "Text",ExpressionUUID->"a64dd85f-d558-49ac-adf5-122755a29978"],
Cell[2283715, 57210, 594, 12, 55, "Input",ExpressionUUID->"b294a9c4-4e7f-4701-9335-8a80deab1924"],
Cell[2284312, 57224, 480, 12, 31, "Input",ExpressionUUID->"005d52ff-aa6e-4166-b157-9c9d58b00584"],
Cell[2284795, 57238, 11953, 291, 886, "Input",ExpressionUUID->"7907ef6a-cdad-4c37-81f5-af96b87b1e06"]
}, Open  ]],
Cell[2296763, 57532, 159, 4, 31, "Input",ExpressionUUID->"c50a192a-fdbe-4095-8414-96a18d130267"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2296959, 57541, 159, 4, 68, "Section",ExpressionUUID->"5b23eb1c-28c0-4d0b-9820-6be0fd061178"],
Cell[2297121, 57547, 127, 0, 36, "Text",ExpressionUUID->"19597fd8-38dc-4ca5-9104-7b185439a9bb"],
Cell[2297251, 57549, 318, 8, 31, "Input",ExpressionUUID->"37a657e0-f635-4ec5-b475-558f77f43cc0",
 Evaluatable->False],
Cell[2297572, 57559, 402, 8, 55, "Input",ExpressionUUID->"b29aa174-915b-47ac-80e9-024ce4a271e9",
 Evaluatable->False],
Cell[2297977, 57569, 91, 0, 36, "Text",ExpressionUUID->"532141b6-92bf-4d16-a3d5-14cf502bbdf1"],
Cell[2298071, 57571, 449, 11, 55, "Input",ExpressionUUID->"b9eb16ca-b7a3-4ed3-8386-e455006edabe",
 Evaluatable->False],
Cell[2298523, 57584, 299, 6, 31, "Input",ExpressionUUID->"ee86f90b-e0dd-4769-8285-19fd7ef4391d",
 Evaluatable->False],
Cell[2298825, 57592, 154, 3, 31, "Input",ExpressionUUID->"92d91222-c569-425c-85ea-6714ade952c0",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[2299004, 57599, 183, 7, 55, "Subsection",ExpressionUUID->"9e66e948-14d8-4115-bf84-22af1cefc153"],
Cell[2299190, 57608, 215, 3, 36, "Text",ExpressionUUID->"702cd687-ea17-4c57-ab90-47db7e0ade4f"],
Cell[2299408, 57613, 211, 4, 31, "Input",ExpressionUUID->"1bd97ce2-1822-4262-99d8-881cfade08ad",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[2299656, 57622, 182, 7, 55, "Subsection",ExpressionUUID->"28948ded-23a4-4250-acdc-02b66af8dc95"],
Cell[2299841, 57631, 171, 3, 36, "Text",ExpressionUUID->"cfab8c08-dcf5-4b23-85d5-bd668ba395f9"],
Cell[2300015, 57636, 2390, 61, 101, "Input",ExpressionUUID->"c48e6db5-390c-42a4-948e-020bd4bde286",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[2302442, 57702, 181, 7, 55, "Subsection",ExpressionUUID->"453e507f-d03a-4e8a-89cd-e5beeeb371e4"],
Cell[2302626, 57711, 301, 7, 55, "Input",ExpressionUUID->"df1bd995-c081-4254-885f-aab4b1655db0",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[2302952, 57722, 257, 11, 46, "Subsubsection",ExpressionUUID->"7e3f8c0c-e784-4ba1-9900-5807d7511546"],
Cell[2303212, 57735, 214, 5, 36, "Text",ExpressionUUID->"9a60cffb-ed66-44f0-a68c-3dfff885873b"],
Cell[2303429, 57742, 240, 6, 31, "Input",ExpressionUUID->"44ccdccf-57cd-41d7-99a7-38f4bf98beb4",
 Evaluatable->False],
Cell[2303672, 57750, 228, 5, 31, "Input",ExpressionUUID->"f7c00697-ca98-4ab9-a8c9-144109901a1f",
 Evaluatable->False],
Cell[2303903, 57757, 152, 3, 31, "Input",ExpressionUUID->"cbde21cc-c001-467c-abd7-e4d86f5f7285",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2304116, 57767, 139, 4, 68, "Section",ExpressionUUID->"397235bf-72f8-40b1-a6e8-1714dd53ba85"],
Cell[2304258, 57773, 395, 9, 31, "Input",ExpressionUUID->"8b2f4629-48f3-4237-af66-064a6c4ba886"],
Cell[2304656, 57784, 409, 9, 55, "Input",ExpressionUUID->"82366b6b-c0a8-4434-a122-da6f3ba211b6"],
Cell[2305068, 57795, 1061, 18, 147, "Input",ExpressionUUID->"0c339d39-4bba-44cf-99b8-1a9ccc9747b9"],
Cell[2306132, 57815, 422, 9, 31, "Input",ExpressionUUID->"bef88ed4-c287-4f9f-aabd-895016026f55"],
Cell[2306557, 57826, 863, 15, 124, "Input",ExpressionUUID->"f7cb5a2a-ae55-4b94-b323-1269db86b2c2"],
Cell[2307423, 57843, 391, 8, 31, "Input",ExpressionUUID->"a6ccddc5-a7b1-49a8-aebd-4e01d261b80d"],
Cell[2307817, 57853, 315, 7, 31, "Input",ExpressionUUID->"95efa299-3dba-43bb-8965-fa3bf42175cd"],
Cell[2308135, 57862, 161, 4, 31, "Input",ExpressionUUID->"03729c4b-c216-43d6-8efc-f2d63227e261"],
Cell[CellGroupData[{
Cell[2308321, 57870, 183, 7, 55, "Subsection",ExpressionUUID->"b20fed30-eac9-47c5-9dbc-072b9822d3d8"],
Cell[2308507, 57879, 270, 8, 31, "Input",ExpressionUUID->"ccd9e822-6499-4f01-9f7e-60dba4c640a8"]
}, Open  ]],
Cell[2308792, 57890, 192, 7, 55, "Subsection",ExpressionUUID->"afac6941-9b52-4764-8988-f4b9d01e1bfc"],
Cell[CellGroupData[{
Cell[2309009, 57901, 244, 10, 38, "Subsubsection",ExpressionUUID->"6118d800-4e71-455a-b238-4e51e72194d3"],
Cell[2309256, 57913, 210, 4, 31, "Input",ExpressionUUID->"5cb41aba-8dda-4f05-b863-1c645399cf52",
 Evaluatable->False],
Cell[2309469, 57919, 2903, 80, 217, "Input",ExpressionUUID->"8a74037e-8c93-4975-be93-42a00b0a7fa8"],
Cell[2312375, 58001, 154, 2, 36, "Text",ExpressionUUID->"9283aa3a-b4dd-4859-9040-1120727a141d"],
Cell[2312532, 58005, 280, 7, 31, "Input",ExpressionUUID->"921a41a5-9c43-4874-8350-021f71f021fe"],
Cell[2312815, 58014, 496, 11, 78, "Input",ExpressionUUID->"d7f6760c-39c1-4e65-bd17-32c28c41e51d"],
Cell[2313314, 58027, 5621, 135, 423, "Input",ExpressionUUID->"851f43f1-4f60-45bc-9dc4-db59809db0b8"],
Cell[2318938, 58164, 469, 15, 31, "Input",ExpressionUUID->"12866bff-0485-46c7-a737-62b49d1a7b5d",
 Evaluatable->False],
Cell[2319410, 58181, 142, 2, 36, "Text",ExpressionUUID->"d83483cf-b1bb-49e8-9187-4b8966d68d54"],
Cell[2319555, 58185, 717, 21, 55, "Input",ExpressionUUID->"0a69fca7-d2b6-4798-a203-bca2f47ce90e",
 Evaluatable->False],
Cell[2320275, 58208, 538, 13, 55, "Input",ExpressionUUID->"c9771b53-0a04-4d0c-91de-47c1c64bd486"],
Cell[2320816, 58223, 248, 4, 36, "Text",ExpressionUUID->"d8586ddd-ef21-4822-a845-3165b02c1ccb"],
Cell[2321067, 58229, 345, 7, 78, "Input",ExpressionUUID->"b2618cb0-e034-4f86-a94d-716446240a3e"],
Cell[2321415, 58238, 4143, 97, 377, "Input",ExpressionUUID->"c9b7cc93-81bf-4706-9712-6176b5af33d3"]
}, Closed]],
Cell[CellGroupData[{
Cell[2325595, 58340, 260, 10, 38, "Subsubsection",ExpressionUUID->"eea5c0f7-93e5-4687-86c9-a8ce4acfa181"],
Cell[2325858, 58352, 177, 3, 36, "Text",ExpressionUUID->"4cbe82e4-c001-4714-9c23-1cb7334c051f"],
Cell[2326038, 58357, 2938, 79, 217, "Input",ExpressionUUID->"b0b2a43f-6892-462b-9ed0-82451615c5e4"],
Cell[2328979, 58438, 496, 9, 60, "Text",ExpressionUUID->"89dc981a-f71c-457f-9825-da04e158cf8c"],
Cell[2329478, 58449, 2387, 58, 216, "Input",ExpressionUUID->"feefbd14-6b63-4f07-9dd7-5a4f1a7d3002"],
Cell[2331868, 58509, 1209, 27, 193, "Input",ExpressionUUID->"35e116a3-ec36-4223-9a81-6a74851b2285"],
Cell[2333080, 58538, 256, 4, 36, "Text",ExpressionUUID->"25b20d6d-773b-4ebe-b3ec-c74cb68d46ee"],
Cell[2333339, 58544, 2900, 78, 216, "Input",ExpressionUUID->"8858a1ef-e05e-45c6-aa3e-b5c261cf436d"],
Cell[2336242, 58624, 16276, 369, 1412, "Input",ExpressionUUID->"6b74d658-c12b-4eae-9ba1-08882ba5b125"],
Cell[2352521, 58995, 209, 4, 36, "Text",ExpressionUUID->"321c499b-ff89-4187-ba66-0092226b331b"],
Cell[2352733, 59001, 562, 14, 55, "Input",ExpressionUUID->"cb2f9407-a8d3-4976-ab9f-8794dd3e8dc7"]
}, Closed]],
Cell[2353310, 59018, 159, 4, 27, "Input",ExpressionUUID->"1534fbd9-3e62-4bb5-a925-823469dd8ece"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2353506, 59027, 130, 4, 68, "Section",ExpressionUUID->"a0ee7a7a-e0cc-4e37-a81a-b39acd14152a"],
Cell[2353639, 59033, 163, 3, 36, "Text",ExpressionUUID->"0b6639ef-2ba6-4ef7-ab51-640fec59e455"],
Cell[2353805, 59038, 161, 4, 31, "Input",ExpressionUUID->"388eac7b-da56-4046-b97e-c7bfae0c6704"],
Cell[CellGroupData[{
Cell[2353991, 59046, 194, 4, 31, "Input",ExpressionUUID->"f50ee0c9-9a57-415f-827e-b347dbe032b6"],
Cell[2354188, 59052, 128, 3, 35, "Output",ExpressionUUID->"35862f3e-f004-4b49-ae1f-b9d777221304"]
}, Open  ]],
Cell[2354331, 59058, 606, 17, 31, "Input",ExpressionUUID->"4a3af236-8b0b-4e19-9e71-6e9b00be3778"],
Cell[2354940, 59077, 183, 5, 31, "Input",ExpressionUUID->"719e4bdb-7aed-4d01-b068-3cf999752d08"],
Cell[2355126, 59084, 159, 4, 31, "Input",ExpressionUUID->"d7b751f8-e824-460f-a29b-532c4c400823"],
Cell[2355288, 59090, 187, 5, 31, "Input",ExpressionUUID->"bc7a9c03-3fa3-432c-946a-bc0fcf2b5c0e"],
Cell[2355478, 59097, 175, 3, 36, "Text",ExpressionUUID->"24aab53d-ad7f-41c8-bb1f-fd481c77fd4f"]
}, Open  ]],
Cell[2355668, 59103, 145, 2, 36, "Text",ExpressionUUID->"6b8a9e60-56b1-4523-bcd3-e973fb2d3468"],
Cell[2355816, 59107, 165, 4, 31, "Input",ExpressionUUID->"ba40136d-2ef2-4141-934b-94b725bd9466"],
Cell[2355984, 59113, 161, 4, 31, "Input",ExpressionUUID->"1df6d245-f656-476e-88e1-5b45197f27c1"],
Cell[2356148, 59119, 163, 4, 31, "Input",ExpressionUUID->"9beba473-7230-405d-aa56-98479428718a"],
Cell[2356314, 59125, 159, 4, 31, "Input",ExpressionUUID->"e04a551f-a51a-48a5-b449-4e60ee9932e4"],
Cell[CellGroupData[{
Cell[2356498, 59133, 370, 10, 31, "Input",ExpressionUUID->"10f6f9b5-2df3-40fb-8123-cb11a494f0b8"],
Cell[2356871, 59145, 7908, 127, 496, "Output",ExpressionUUID->"d5ad4b85-39fe-4290-ab2f-2de22e4b1940"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2364816, 59277, 381, 11, 31, "Input",ExpressionUUID->"eb3e8177-ef22-4af0-a3c5-b7103cf3d8f0"],
Cell[2365200, 59290, 44089, 688, 2290, "Output",ExpressionUUID->"46afd5e4-1033-44b1-ab33-2deed4bf8102"]
}, Open  ]],
Cell[2409304, 59981, 264, 4, 36, "Text",ExpressionUUID->"e56e9ed7-be98-44f8-8648-f968bde76cc3"],
Cell[CellGroupData[{
Cell[2409593, 59989, 192, 4, 31, "Input",ExpressionUUID->"375fc3fd-513a-46c7-8e6e-e73d53013289"],
Cell[2409788, 59995, 178, 4, 35, "Output",ExpressionUUID->"ab272044-319b-4806-8170-8721e5bdd5fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2410003, 60004, 147, 4, 68, "Section",ExpressionUUID->"64646392-2c84-44bd-8289-d306a45113a6"],
Cell[2410153, 60010, 91, 0, 36, "Text",ExpressionUUID->"bab34d23-1b76-4352-b58e-022940b57c10"],
Cell[2410247, 60012, 140, 2, 36, "Text",ExpressionUUID->"956ce372-fcd8-4472-822b-34694829c265"],
Cell[2410390, 60016, 180, 3, 36, "Text",ExpressionUUID->"80108326-12d4-491c-bc95-b4cd66a2d378"],
Cell[2410573, 60021, 287, 8, 31, "Input",ExpressionUUID->"1d24a5e1-25e1-4fae-bac2-02dadb8d60de",
 Evaluatable->False],
Cell[2410863, 60031, 218, 6, 31, "Input",ExpressionUUID->"17e7264a-859c-460c-8fd6-fef4eb23506e"]
}, Open  ]]
}
]
*)

