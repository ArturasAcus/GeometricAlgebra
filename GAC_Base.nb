(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1030893,      28143]
NotebookOptionsPosition[    987947,      26969]
NotebookOutlinePosition[    988478,      26993]
CellTagsIndexPosition[    988402,      26988]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Geometric Algebra & Calculus",
 StyleBox["PART I",
  FontSize->16]
}], "Title",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[StyleBox["initialization, products, orthogonal base, main \
operations (involutions, grade manipulation, magnitude...), matrix \
representations",
 FontSize->16]], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[StyleBox["Version 0.1.0.4 (2016-12-22)",
 FontSize->16]], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".Copyright,  License, credit, references and notes"
}], "Section"],

Cell["\<\
GeometricAlgebra&Calculus:  Software for calculation with Clifford \
multivectors.
Copyright, 2016  A. Acus (arturas.acus@tfai.vu.lt) ,  A. Dargys \
(adolfas.dargys@ftmc.lt)

This file is part of Geometric Algebra&Calculus package.\
\>", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". License and credit"
}], "Subsection"],

Cell["\<\
GeometricAlgebra&Calculus is free software:  you can redistribute it and/or \
modify it under the terms of the GNU Affero General Public License as \
published by the Free Software Foundation, either version 3 of the License, \
or (at your option) any later version.

GeometricAlgebra is distributed in the hope that it will be useful, but \
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or \
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License \
for more details.

You should have received a copy of the GNU Affero General Public License \
along with GeometricAlgebra.  If not, see <http://www.gnu.org/licenses/>.\
\>", "Text"],

Cell["\<\
Ideas of efficient implementation of geometric algebra multiplication of  \
orthogonal base vectors were borrowed form G. Stacey Staples articles and \
programming packages CliffMath11, CliffOC11, CliffSymNil11. ( \
http://www.siue.edu/~sstaple/index_files/research.htm).

A number of important functions were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). We \
also much like it general structure, test and  development solutions. 

Improved product precedence was implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

A lot of other sources was used to implement Clifford algebra and calculus \
algorithms (see references for more details).\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". References"
}], "Subsection"],

Cell[TextData[{
 "[DH-STAx.y ]\t   Hastenes, David \"Space-time algebra\", 1966 (third \
printing 1992), D. Reidel Publishing Company, Dordrecht Holland,  \n\
[DH-CA2GCx.y]    Hastenes, David \"Clifford algebra to geometric calculus\", \
1987, D. Reidel Publishing Company, Dordrecht Holland,  \n[CHAL-GA4Px.y]  \
Chris Doran, Anthony Lasenby \"Geometric Algebra for physicists\" Cambridge \
University, 2003\n[AB-I2GA&C]\t   Bromborsky, Alan \"An Introduction to \
Geometric Algebra and Calculus\", version of December 11, 2011 \n\
[KG-HFinP&Sp]   Klaus Gurlebeck, Klaus Habetha, Wolfgang Sprossib, \
\"Holomorphics functions in the plane and n-dimensional space\", Springer, \
2008\n[EH-VDC]\t  Eckhard MS Hitzer, \"Vector differential calculus\" Mem. \
Fac. Eng. Fukui., Vol 50 No1, 2002\n[EH-MDC] \t  Eckhard MS Hitzer, \
\"Multivector differential calculus\", Advances in Applied Clifford Algebras \
12(2) pp. 135-182, 2002\n[ECh-GA]\t  Eric Chisolm \"Geometric Algebra\" , \
arXiv 1205.5935v1\n[SS-OCICAS]\tRene Schott, G Stacey Staples \"Operator \
calculus and invertible Clifford Appel systems: theory and applications to \
n-particle fermion algebra\" and other same authors articles\n[WCS-TAGA]     \
William C. Schulz  \[OpenCurlyDoubleQuote]Theory and application of Grassmann \
Algebra\[CloseCurlyDoubleQuote], 2011, Vienna\n[RA-CoNCGBinG&CA]     Rafal \
Ablamowicz, Computation of non-commutative Grobner bases in Grassmann and \
Clifford algebras, Adv. appl. Clifford alg. 20 (2010),  447\[Dash]476\n\
[TB-GBA4GAinMP ]     Troy Brachey, Grobner Bases Algorithms for Grassmann \
Algebras in Maple package, 2008\n[NDNO-CoMISoMvCA] Nedim Degirmenci, Bulifer \
Ozdemir \[OpenCurlyDoubleQuote]The Construction of Maximum Independent Set of \
Matrices via Clifford Algebras\[CloseCurlyDoubleQuote] Turk J. Math. 31, \
(2007) 193-205\n[NDSK-EIoRCA] Nedim Degirmenci, S. Karapazar \
\[OpenCurlyDoubleQuote] Explicit Isomorphisms of Real Clifford Algebras\
\[CloseCurlyDoubleQuote], Int. Journal of Mathematics and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "l Sciencesm, (2006), 1-13, ID 78613\n[MRdT] Michael Rausch de Traubennerg \
\[OpenCurlyDoubleQuote]Clifford Algebras in Physics\[CloseCurlyDoubleQuote] \
Adv. appl. Clifford alg. 19 (2009), 869-908\n[PL-GPW] Perti Lounesto, G.P. \
Wene \[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173\n[RA-LoCGAaA]     (ed. Rafal Ablamowicz, Garret \
Sobczyk) Lectures on Clifford (Geometric) algebras and applications, \
Springer, 2004\n[GSSDW-CADoCOGE]G.S. Staples, D. Wylie. Clifford algebra \
decompositions of conformal orthogonal group elements, Clifford Analysis, \
Clifford Algebras and Their Applications, 4 (2015), 223-240\n[DF-EAfFaJoB] D. \
Fontijne \[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and \
Join of Blades\[CloseCurlyDoubleQuote]. \n"
}], "Text",
 CellTags->"references"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Setup & configuration"
}], "Section"],

Cell["\<\
In order to setup the package follow three steps below. Note, that evaluation \
property was removed from all input cells in this section (copy their content \
and evaluate in your system).\
\>", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Add interpretation to geometric algebra operation symbols"
}], "Subsection"],

Cell[TextData[{
 "It is assumed that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version is 8 or above. You need to have writing permisions to \nto system \
file pointed by system variable (evaluate it in your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " system !!!)"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData["System`Dump`unicodeCharactersTR"], "Input",
 Evaluatable->False],

Cell[BoxData["\<\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/FrontEnd/\
TextResources/UnicodeCharacters.tr\"\>"], "Output"]
}, Open  ]],

Cell["\<\
in order to append contents of the file UnicodeCharactersAdd.tr  (windows \
users should use file UnicodeCharactersAddWin10.tr)\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"appendFile", "=", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", 
     RowBox[{"EvaluationNotebook", "[", "]"}], "]"}], "<>", 
    "\"\<UnicodeCharactersAdd.tr\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", "appendFile", "]"}]}], "Input",
 Evaluatable->False],

Cell["\<\
0x26AC      \[GeometricProduct] ($gp$)      Infix       440 None    5   5
0x22CE      \[OuterProduct]     ($op$)      Infix       450 None    5   5
0x26ab      \[DorstProduct]     ($id$)      Infix       459 None    5   5
0x2219      \[InnerProduct]     ($ip$)      Infix       460 None    5   5
0x23A6      \[LeftContract]     ($il$)      Infix       461 None    5   5
0x23A3      \[RightContract]    ($ir$)      Infix       462 None    5   5\
\>", "Print"]
}, Open  ]],

Cell["\<\
 This is needed in order to ensure correct precedences and  infix notations \
for inner, outer and geometric products. Do not forget to make copy of the \
system file before modification!\
\>", "Text"],

Cell[BoxData[
 RowBox[{"CopyFile", "[", 
  RowBox[{"System`Dump`unicodeCharactersTR", ",", 
   RowBox[{"System`Dump`unicodeCharactersTR", "<>", "\"\<.old\>\""}]}], 
  "]"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "For Linux and Mac users this is all what needed. Restart ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and go to example files. Windows users need next step."
}], "Text"],

Cell[CellGroupData[{

Cell["Notes and details on the change", "Subsubsection"],

Cell[TextData[{
 "Note that 0x22CF char was replaced by 0x22CE.There seems to be some \
inconsistency about these two chars, because in text cells it prints \
differently than in input cells (different fonts?). However, if after typing \
\[EscapeKey]op\[EscapeKey] instead wedge symbol you see vee symbol, replace \
0x22CE by 0x22CF. \n Also \\[EmptySmallCircle ]  (\[EmptySmallCircle], which \
already has definition in UnicodeSymbols.tr file) was replaced by unicode \
0x26AC for geometric product notation in order to avoid symbols clash. \
Precedence order is tricky, geometric product will not work correctly if 440 \
is replaced by 430. Also 540 ... precedences was tested and should be \
avoided.  UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, as was noted above, input \
cells are ok.), GeometricProduct(\[GeometricProduct]), Plus (lowest). We use  \
:il: (inner left) for left contraction and :ir: (inner right) for right \
contraction, because :lc: and :rc: already have meaning in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  "
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Private style sheet creation (required for Windows users only)"
}], "Subsection"],

Cell[TextData[{
 "This step only concerns only users which run ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " on Windows. The Mac and linux users can skip this step unless they want to \
change ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " default font (not recommended)."
}], "Text"],

Cell[TextData[{
 "The problem is OS specific, because on Windows default font used for input \
and output has very limited set of unicode characters. Below is a command \
from  ",
 ButtonBox["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/113478/is-there-a-global-\
setting-for-mathematicas-base-fonts"],
 ", which install private user style sheet with modified input and output \
fonts. As far as we know this is only needed for Windows user. If in the cell \
below you see list of symbols, which are  {empty small circle, wedge, center \
dot, left contract, right contract, fat dot},, i.e.",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCECxNuBGMTe+n/L
KBpFo4guaMOSI0312zrmfd1MBdP+rVt4uLF+e9eC79QwbRQNEvR3SZUlFwOX
Qtq9DVQw7ffCIhMOBh6V/EcbB95ro4haaDSRjCKCaDSR0Bn927T+z1Cri4dL
Ill1xExKXsG0rmHpL2wKfs4vzdQUFxAwOLByYAN809OGuLMD7AaS0VBKJBuW
7EpwdlKW19O0LC6a9hklP275MnvijhQdMXGPc2sw9a496yYurp9zZMYi3C3q
ze864v1lBYRElCNS+z/QKLNvXrrGUCG5fw09o5hyNGQSyeZVR/ykORgZoICZ
37NgAVqh8b7NRFLC98JaTO3rLvpKSpl0vMdj/uq+JBnl6rbFn+bX58nJl05d
T4vQ/rOo3FlYXM2t9yNNYnPzl8VLvmyivslDJZH8W97sxgtPIiDAKRd3cz2y
mg234uXF1MqeYQmlzc/L1cXQ1aNFX4mNgv9FUAJbc8JO1rllJQ0iceO9NF2H
5No8dZsty7ZQ3fAH2bqCTEyCOtkPqBGVyGioJJK/i8vNOZHTCAObBCRO4WjT
k2IDUV71pGS0ymLL+974WBVeMcPSp3hctX52l4aEW0TJ+oIgWwmDOfM3UjsS
t/5b1ZOlZrdl2fp7Gbo28TO/U9n8zS/r3IwFBY3d615SuzAZKonk/4Z5UzW5
meBJhJFFwbP3I0pi2PyqzlaKU9TJp/U1SihtedPq7ybOJWPX8BpvS+P38t7p
AY7hbuELJq76i9cxv5Y09kZFtBbM/kqCFzbcSta1ipkBTBt/V7QnKVuuWryZ
2lYQRuQZSzCRkGQs8YmEDNf+XFiVq87HysjAyMihap16bjVaib3+WriMqHrl
CywpYcvzCg0x2ZgbuKsbUhCw1lDkZhYIaliOPy0ho+8zUp2U/Y6ugrh507Ny
S32Hqhc4Q4kcK2jk8v+EEwlpxhKdSMgNhM0b386bfXfxOmy6tryu1xWXDLq8
DlNq/eUgKQmDlrdU6bNsmDdBkYNDOhybRbicvWyzvX5Vz+p/cJGNS9e66JRN
XEs1K2jkcjAikEhINJbYREKLQNi88Vm9hZSo0yksXeA1Jx1EpSybqFJZ/5qb
ps/B41i86Ddpztv8j6AIhVbQyOWEEgmpxhKZSGgQCKsOGvAysYkFpEzHNlO5
5cuUBFchFiZeo0NDbSBrANGfJfWx2irGKirGipI8TFRuuDJziOupgAy3tit7
Qqeh1y0/li77sA5vv3Lz+g9Ll/0YakPiA4ggsQkH1E0kVDd2FA0M2rzp25o1
n2Hoy7qNuOrHQWHsKBpFo2gUDRgCAHomup0=
     "], {{0, 20}, {183, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{183, 20},
   PlotRange->{{0, 183}, {0, 20}}]], "Input",
  Evaluatable->False,
  ImageSize->{187, 19},
  ImageMargins->{{0, 0}, {0, 0}},
  ImageRegion->{{0, 1}, {0, 1}}],
 " then there is no need for private style sheet. If you see instead some \
empty squares you need to find font which has the mentioned characters"
}], "Text"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[GeometricProduct]", 
   RowBox[{",", 
    RowBox[{"\[OuterProduct]", 
     RowBox[{",", 
      RowBox[{"\[InnerProduct]", 
       RowBox[{",", 
        RowBox[{"\[LeftContract]", 
         RowBox[{",", 
          RowBox[{"\[RightContract]", 
           RowBox[{",", "\[DorstProduct]"}]}]}]}]}]}]}]}]}]}], "}"}]], "Input",\

 Evaluatable->False],

Cell["\<\
The simplest way to test a font is just select the cell above and change font \
with front end Format/Font. When you will find a font where all chars are \
represented correctly, you can set it as default for Standard form using \
command below.  In particularly  we noticed that \
\[OpenCurlyDoubleQuote]Microsoft Sans Serif\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]OpenSymbols\[CloseCurlyDoubleQuote] are ok for Windows \
10.  In order to generate and install private style sheet do the folowing\
\>", "Text"],

Cell["\<\
Make both cells below Evaluatable and execute. Once style sheet  \
\"GAC_Style.nb\" is installed in you private Mathematica folder use it with \
all notebooks were you load this package. After that do this don\
\[CloseCurlyQuote]t forget to make both cells nonexecutable again, i.e.  \
remove front end command Cell/Cell Properties/Evaluatable mark from them\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"setFont", "[", 
   RowBox[{"fontFamily_", ",", "fontSize_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"styleNB", "=", 
       RowBox[{"Notebook", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cell", "[", 
           RowBox[{"StyleData", "[", 
            RowBox[{"StyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}], 
            "]"}], "]"}], ",", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"StyleData", "[", "\"\<StandardForm\>\"", "]"}], ",", 
            RowBox[{"FontFamily", "\[Rule]", 
             RowBox[{"ToString", "[", "fontFamily", "]"}]}], ",", 
            RowBox[{"FontSize", "\[Rule]", 
             RowBox[{"ToExpression", "[", "fontSize", "]"}]}]}], "]"}]}], 
         "}"}], "]"}]}], ",", 
      RowBox[{"styleSheetName", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
         "$UserBaseDirectory", ",", "\"\<SystemFiles\>\"", ",", 
          "\"\<FrontEnd\>\"", ",", "\"\<StyleSheets\>\"", ",", 
          "\"\<GAC_Style.nb\>\""}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FileExistsQ", "[", "styleSheetName", "]"}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"$FrontEnd", ",", 
         RowBox[{
         "DefaultStyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}]}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"styleSheetName", ",", "styleNB"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SetOptions", "[", 
      RowBox[{"$FrontEnd", ",", 
       RowBox[{"DefaultStyleDefinitions", "\[Rule]", "styleSheetName"}]}], 
      "]"}]}]}], "]"}]}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"setFont", "[", 
  RowBox[{"\"\<Microsoft Sans Serif\>\"", " ", ",", "14"}], "]"}]], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Adjust compilation target (optional optimization step)"
}], "Subsection"],

Cell[TextData[{
 "\nGo to next section ",
 StyleBox["Initialization",
  FontWeight->"Bold"],
 " (below) and find variable ",
 StyleBox["$gaGlobalProperties",
  FontWeight->"Bold"],
 ".  It contains a number of settings, the most important of which is  ",
 StyleBox["CompilationTarget",
  FontWeight->"Bold"],
 ". It defines the way some package functions are compiled. The safe choice \
is to set it to  ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ", which, however, is slower that ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " (compilation to \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] binary \
code, the default). If you have C compiler installed, read how to test if it \
works properly below. If not, just set  ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " and go to next step."
}], "Text"],

Cell[CellGroupData[{

Cell["\<\
Notes and details how to test wheater compilation to C works properly\
\>", "Subsubsection"],

Cell["\<\
The speed of base elements products depends on compilation type.  In order to \
make decision make cells below evaluatabe. First test what C compilers your \
system has installed. By default on OS windows external compilers are absent)\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
If you get nonempty list,  then try to compile trivial function. The output \
should be CompiledFunction[ ].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], "//", 
  "FullForm"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CompiledFunction", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"10", ",", "10.3`", ",", "5468"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"Blank", "[", "Real", "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"List", "[", "1", "]"}], "]"}], ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"List", "[", "x", "]"}], ",", "x"}], "]"}], ",", "Evaluate", 
     ",", 
     RowBox[{"LibraryFunction", "[", 
      RowBox[{
      "\"\</home/acus/.Mathematica/ApplicationData/CCompilerDriver/\
BuildFolder/acus-7694/compiledFunction26.so\>\"", ",", 
       "\"\<compiledFunction26\>\"", ",", 
       RowBox[{"List", "[", 
        RowBox[{"List", "[", 
         RowBox[{"Real", ",", "0", ",", "\"\<Constant\>\""}], "]"}], "]"}], 
       ",", "Real"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output"]
}, Open  ]],

Cell[TextData[{
 "If compilation was succesfull, then in subsection \
\[OpenCurlyDoubleQuote]Help functions, instalations options below\
\[CloseCurlyDoubleQuote] the list $gaGlobalProperties option  should be \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]. If \
compilation to C was not possible, then change this option to \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\[CloseCurlyDoubleQuote] in \
section ",
 StyleBox["2.Initialization",
  FontWeight->"Bold"],
 " below. After adjusting, make these cells unevaluatable again."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CompilePrint", "[", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
     RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}]}], "]"}], "]"}], 
  "//", "FullForm"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   "\"\<\\n\\t\\t1 argument\\n\\t\\t1 Real register\\n\\t\\tUnderflow \
checking off\\n\\t\\tOverflow checking off\\n\\t\\tInteger overflow checking \
on\\n\\t\\tRuntimeAttributes -> {}\\n\\n\\t\\tR0 = A1\\n\\t\\tResult = \
R0\\n\\n1\\tReturn\\n\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Tested versions and known problems"
}], "Subsection"],

Cell["\<\
Tested with versions: 10.2 for windows 10,  10.3 for linux ubuntu 14.04 and \
10.3 for Mac.\
\>", "Text"],

Cell[TextData[{
 " Known problems: \n1) Version 10.0 complains about shadowed symbol z. It is \
 ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " bug, avoid this version. \n2) You have to wait until evaluation of this \
notebook is finished and only then evaluate other cells in your notebook. If \
you press shift + enter on next evaluation cell while package load was not \
finished for some unknown reasons the evaluation of marked cell can be \
ignored, i.e. simply not sent to kernel (you have to reevaluate it after \
package was loaded). The reason is unclear (sometimes happens, sometimes not, \
probably front end and OS related bug or some internal evaluation delay time \
limit exceeded.). "
}], "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Initialization"
}], "Section"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Package Context"
}], "Subsection"],

Cell["\<\
Context manipulation commands were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). \
Context code has several goals, primarily: 1. \[OpenCurlyDoubleQuote]Private \
context sharing across discontinuous sections.\[CloseCurlyDoubleQuote] 2.  \
\[OpenCurlyDoubleQuote]Easy manual reentry of any one section for developing \
work. \[OpenCurlyDoubleQuote]

DeclareIntoContext creates and/or clears symbols in package context.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"GeometricAlgebra`$GAPackageHasLoaded", ",", 
    RowBox[{"CompoundExpression", "[", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<The package already has been loaded.\>\"", "]"}], 
      ",", " ", 
      RowBox[{"FrontEndTokenExecute", "[", "\"\<EvaluatorAbort\>\"", "]"}]}], 
     "]"}], ",", 
    RowBox[{
    "GeometricAlgebra`$GAPackageHasLoaded", " ", "=", " ", "False"}]}], "]"}],
   ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<GeometricAlgebra`\>\"", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$GAUnprotectionList", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageInputAliases", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$GAPackageContext", " ", "=", " ", 
   RowBox[{"Context", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageOnlyContextPath", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"System`$ContextPath", ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"$GAPackagePrivateContext", " ", "=", " ", 
   RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<p`\>\""}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "DeclareIntoContext", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"HoldAll", ",", "Listable"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DeclareIntoContext", "]"}], " ", "=", "  ", 
   RowBox[{"{", 
    RowBox[{"Context", " ", "\[Rule]", " ", "$GAPackageContext"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "normal", " ", "package", " ", 
    RowBox[{"load", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x__", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Quiet", "[", " ", 
      RowBox[{
       RowBox[{"Unprotect", "[", "x", "]"}], ";", " ", 
       RowBox[{"Clear", "[", "x", "]"}], ";"}], " ", "]"}], " ", "/;", " ", 
     RowBox[{"SameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "Global`", " ", "scratchpad", " ", 
    "dev", " ", "work"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "symbolName", " ", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"symbolName", " ", "=", "  ", 
         RowBox[{"SymbolName", "[", 
          RowBox[{"Unevaluated", "[", "x", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Unprotect", "[", "x", "]"}], " ", ";", " ", 
          RowBox[{"Remove", "[", "x", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"BeginPackage", "[", 
         RowBox[{"OptionValue", "[", "Context", "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Symbol", "[", "symbolName", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"EndPackage", "[", "]"}]}]}], "]"}], " ", "/;", " ", 
     RowBox[{"UnsameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"same", " ", "flavor"}], ",", " ", 
    RowBox[{"multiple", " ", "arguments", " ", "pattern"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeclareIntoContext", "[", 
    RowBox[{"x__", ",", " ", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"{", "x", "}"}], "]"}], " ", "/;", " ", 
    RowBox[{"UnsameQ", "[", 
     RowBox[{
      RowBox[{"Context", "[", "]"}], ",", 
      RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";", 
  RowBox[{"End", "[", "]"}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPrivate", "[", "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"$GAPackageOnlyContextPath", ",", 
         RowBox[{"{", "$GAPackagePrivateContext", "}"}]}], "]"}]}], "]"}], 
     ";", " ", 
     RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";", " ", 
     RowBox[{"If", "[", 
      RowBox[{"$GAPackageHasLoaded", ",", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Unprotect", "[", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<*\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], ";"}], " ", ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EndPrivate", "[", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", "$GAPackageOnlyContextPath"}], 
      "]"}], ";", " ", 
     RowBox[{"End", "[", "]"}], ";"}], " ", ")"}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions, installation options"
}], "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", 
   RowBox[{
   "$gaGlobalProperties", ",", "TheContextSymbolList", ",", 
    "StringListPrintableString", ",", "MissingForwardDeclarations", ",", 
    "ShowStatus"}], "]"}], ";"}]], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "::", "usage"}], "=", 
   "\"\<ShowStatus[_String] displays curent evaluation status on bottom panel \
of the evaluation notebook window.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$gaGlobalProperties", "::", "usage"}], "=", 
   "\"\<Contains global notation, behaviour and performance options, which \
can be se BEFORE executing package notebook.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$gaGlobalProperties", "::", "SlowImplementationPart"}], "=", 
   "\"\<Warning. Entered slow implementation code of `1`.\>\""}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ".Installation options,  restrictions and default settings"
}], "Subsubsection"],

Cell[TextData[{
 "Input of geometric, inner and outer products and realization of proper \
precedences requires modern ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " front end. Version 8 seems to be minimal, where  inpu/output formating \
works properly. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"ValueQ", "[", 
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "]"}], 
     "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "=", 
      "\"\<Input of geometric, inner and outer products and realization of \
proper products precedences requires modern \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\) front end. Version 8 seems to be minimal, where \
input/output works properly.  $VersionNumber says your version is `1`. \
Package load is aborted.\>\""}], ";"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "<=", " ", "7"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], ",", 
       RowBox[{"NumberForm", "[", 
        RowBox[{"System`$VersionNumber", ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Quit", "[", "]"}]}]}], "]"}], ";"}]}], "Input"],

Cell["\<\
Here is the list of options that can be used to modify global package \
function definitions.  Setting CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote] (or any other string) will replace compilation to \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] to more slow Wolfram virtual \
machine code (bytecode).\
\>", "Text"],

Cell[TextData[{
 "Option ",
 StyleBox["gaAlwaysTestInputIndexOrdering",
  FontWeight->"Bold"],
 " seeks for unordered index sets of indices (in ",
 StyleBox["mvDownUp[down_List, up_List]",
  FontWeight->"Bold"],
 ". Unordered index sets should never appear in calculations. Appearance of \
unordered index list will definitely mean that that user input or program \
code contains error. This option modifies $Pre and $Post behaviour. Can \
disable testing by setting the option to False.  "
}], "Text"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
Change  CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]   \
setting in the cell below to  CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote] if needed
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[1, 0, 0]],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaGlobalProperties", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CompileTo", "\[Rule]", "\"\<WVM\>\""}], ",", 
     RowBox[{
     "gaOrthonormalBaseSymbolName", "\[Rule]", "\"\<\[DoubleStruckE]\>\""}], 
     ",", 
     RowBox[{"gaOrthonormalBaseSymbolInputAlias", "\[Rule]", "\"\<e\>\""}], 
     ",", 
     RowBox[{
     "gaGeneralBaseSymbolInputAlias", "\[Rule]", "\"\<\[DoubleStruckF]\>\""}],
      ",", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "\[Rule]", "True"}], ",", 
     RowBox[{
     "gaWarnAboutPotentiallySlowImplementation", "\[Rule]", "True"}]}], 
    "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"orthonormalBaseSymbolName", "=", 
   RowBox[{"gaOrthonormalBaseSymbolName", "/.", "$gaGlobalProperties"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"slowImplementation", "=", 
    RowBox[{
    "gaWarnAboutPotentiallySlowImplementation", "/.", 
     "$gaGlobalProperties"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orthonormalBaseSymbolInputAlias", "=", 
   RowBox[{
   "gaOrthonormalBaseSymbolInputAlias", "/.", "$gaGlobalProperties"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generalBaseSymbolInputAlias", "=", 
   RowBox[{"gaGeneralBaseSymbolInputAlias", "/.", "$gaGlobalProperties"}]}], 
  ";"}]}], "Input"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
No editable data or configuration information below this line for ordinary user
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[1, 0, 0]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notes of general character:"
}], "Subsection"],

Cell[TextData[{
 "1. All command names are in singular form (ie. ",
 StyleBox["GetIndex[ ]",
  FontWeight->"Bold"],
 ", not ",
 StyleBox["GetIndices[ ]",
  FontWeight->"Bold"],
 ", even if  it returns list of indices).  \n2. If some particular function \
needs to be used before its actual definition is given we include its name in \
declarations of Forwards section.\n3. Usage and error messages are defined \
along with the definitions.\n4. Context swich commands are used in Sections\n\
5. When possible for options we use symbols already used by ",
 StyleBox["Mathematica, i.e Quiet, Method,Down,...",
  FontSlant->"Italic"]
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Useful functions for developing and control"
}], "Subsubsection"],

Cell[TextData[{
 "Functions ",
 StyleBox["StringListPrintableString,MissingForwardDeclarations",
  FontWeight->"Bold"],
 "  are taken from DesignerUnits` package (copyright 2009 to present Mark \
Evans, http://designerunits.com/overview). "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"ls", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"#1", ",", "\"\<, \>\"", ",", "#2"}], "]"}], "&"}], ",", 
     RowBox[{"First", "[", "ls", "]"}], ",", 
     RowBox[{"Rest", "[", "ls", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"{", "}"}], "]"}], " ", "=", " ", "\"\<\>\""}], ";"}]}], "Input"],

Cell["Empty list if everything is ok.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"outerCtx_String", ",", "privateCtx_String"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"synm", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}]}], 
      "}"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{
       RowBox[{"synm", " ", "/@", "  ", 
        RowBox[{"Names", "[", 
         RowBox[{"outerCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}], ",", 
       RowBox[{"synm", " ", "/@", " ", 
        RowBox[{"Names", "[", 
         RowBox[{"privateCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", "]"}], " ", ":=", " ", 
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"$GAPackageContext", ",", "$GAPackagePrivateContext"}], "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["ShowStatus[]",
  FontWeight->"Bold"],
 " is borrowed from Paul\[CloseCurlyQuote]s Abbot \
\[OpenCurlyDoubleQuote]Tricks of the Trade\[CloseCurlyDoubleQuote],The MMa \
Journal 7-3,2000 Author:Theodore Gray (theodore@wolfram.com)"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "[", "status_String", "]"}], ":=", 
   RowBox[{"LinkWrite", "[", 
    RowBox[{"$ParentLink", ",", 
     RowBox[{"SetNotebookStatusLine", "[", 
      RowBox[{
       RowBox[{"FrontEnd`EvaluationNotebook", "[", "]"}], ",", "status"}], 
      "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Forwards"
}], "Subsection"],

Cell["\<\
This subsection does not have private context!
If some particular function needs to used before its actual definition is \
given we include its name in declarations of THIS Forwards section.  \
\>", "Text"],

Cell[TextData[{
 "General multivectors will have head ",
 StyleBox["MV",
  FontWeight->"Bold"],
 ".  With numerical indices they will denote multivectors in general (non \
orthonormal) base as well. Definitions for general multivectors are moved to  \
separate notebook GAC_MV.nb. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", "MV", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Objects: orthonormal base notation and definition"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"gaRunningAlgebra", ",", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}], 
     ",", "Cl", ",", "mvDownUp", ",", "gaDefineInput", ",", 
     "gaDefineNotation", ",", "gaNotation", ",", "gaDefineOrthonormalBase", 
     ",", "gaOrthonormalBase", ",", "gaOrthonormalToReciprocal", ",", 
     "gaNonCommutativeMonomialOrder", ",", "gaCommutativeMonomialOrder", ",", 
     "gaVectorSpaceDimension", ",", "gaGetGrade", ",", "gaGetSignature", ",", 
     "gaGetMV", ",", "gaGetIndex", ",", "gaIndexSort", ",", 
     "gaTestIndexOrdering", ",", "gaOrderedQ", ",", "gaGradesOnly", ",", 
     "gaNegativeSignatureIndexList", ",", "gaGeneralMultivector"}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningAlgebra", "::", "usage"}], "=", 
   "\"\<gaRunningAlgebra returns an algebra Cl[p,q,r] for which input aliases \
takes place at given moment. The numbers denotes correspondingly the number \
of positive (p), negative (q) and zero (r) norm base vectors. For example \
Cl[3,0,0] is geometric algebra for Euclidian space.\>\""}], " ", 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}], 
     "]"}], "::", "usage"}], "=", 
   "\"\<Notation for predefined global orthonormal base multivectors. \
Orthogonal base symbol name can be changed modifying option \
gaOrthonormalBaseSymbolName of package global options list \
$gaGlobalProperties.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "::", "usage"}], "=", 
   "\"\<Cl[p_Integer?NonNegative,q_Integer?NonNegative,r_Integer?NonNegative] \
denotes Clifford algebra with signature of corresponding positive (p), \
negative (q) and zero (r) squared vectors.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUp", "::", "usage"}], "=", 
   "\"\<mvDownUp[{s_Integer?Positive | s_gaTensorProduct | s_Symbol  | \
s_iterator},{same for upper symbols}] is a container for down (the first \
list) and up (the second list) indices.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "usage"}], "=", 
   "\"\<gaDefineInput[Cl[p_Integer,q_Integer,r_Integer:0],opts___] sets input \
aliases for algebras. Unfinished....\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "::", "usage"}], "=", 
   "\"\<gaDefineNotation[algebra_] sets style of representation of algebra. \
At the moment only FontColor option is realized. Automatically called by \
gaDefineOrthonormalBase[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNotation", "::", "usage"}], "=", 
   "\"\<Style options container.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBase", "::", "usage"}], "=", 
   "\"\<gaDefineOrthonormalBase[Cl[p_Integer,q_Integer,r_Integer:0]] defines \
orthonormal (plain space) base of geometric algebra of signature {p,q,r}, \
where p,q,r is number of base vectors with positive square, negative and zero \
squares respectivelly. Only direct (down indices) base is defined. Dual base \
can be obtained with gaOrthonormalToReciprocal[]. Base vectors are ordered \
can be changed using option gaNonCommutativeMonomialOrder. Base vectors color \
is selected automatically. You can be set it manually calling gaNotation[] or \
using option FontColor->color. This command also set values for \
gaVectorSpaceDimension[algebra], gaOrthonormalBase[algebra], \
mvGrade[baseElements]. gaDefineOrthonormalBase[gaTensorProduct[algebras__]] \
defines orthonormal base for tensor products of algebras. Option \
gaGradesOnly->{{},{},...} can be used to construct only specific grade base \
elements {{0},{1},{2},... (used to speedup calculation of tensor product \
base).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorSpaceDimension", "::", "usage"}], "=", 
   "\"\<gaVectorSpaceDimension[algebra] returns number of vector space \
dimension of the algebra. Defined in gaDefineOrthonormalBase[].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNegativeSignatureIndexList", "::", "usage"}], "=", 
   "\"\<gaNegativeSignatureIndexList[algebra] returns list of negative \
signature indices. Defined in gaDefineOrthonormalBase[].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBase", "::", "usage"}], "=", 
   "\"\<Variable gaOrthonormalBase[algebra_] stores computed base vectors \
with down indices. This variable is computed by \
gaDefineOrthonormalBase[].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalToReciprocal", "::", "usage"}], "=", 
   "\"\<gaOrthonormalToReciprocal[exprWithDownBaseElements_] computes \
reciprocal base vectors (with up indices) of list. \
gaOrthonormalToReciprocal[exprWithDownBaseElements_,algebra_|{algebra__}], \
converts only elements that belongs to given algebras\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaDefineOrthonormalBase[] and ..., which allows to set \
algebras base elements monomial order. Possible orderings are \\\"Lex\\\", \\\
\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure orderings can be \
proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, totally giving \
4*3 possible orderings. Orders \\\"RevLex\\\", \\\"InvRevLex\\\" and the \
default order \\\"InvDeg[Lex]\\\" are not addmissible and cannot be used as \
Grobner base monomial orders.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaNonCommutativeMonomialOrder, which defines commutative \
coefficient order for same noncommutative base elements. Uses Monomialorders \
implemented by Mathematica, i.e. \\\"Lexicographic\\\", \
\\\"DegreeLexicographic\\\", \\\"DegreeReverseLexicographic\\\", \
\\\"NegativeLexicographic\\\", \\\"NegativeDegreeLexicographic\\\", \
\\\"NegativeDegreeReverseLexicographic\\\" and \n\\\"Reverse[Lexicographic]\\\
\", \\\"Reverse[DegreeLexicographic]\\\", \
\\\"Reverse[DegreeReverseLexicographic]\\\", \
\\\"Reverse[NegativeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeReverseLexicographic]\\\".\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetIndex", "::", "usage"}], "=", 
   "\"\<gaGetIndex[multivector] returns list of indices of \
multivector.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "::", "usage"}], "=", 
   "\"\<gaGetGrade[expr] returns grade of multivector.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetSignature", "::", "usage"}], "=", 
   "\"\<gaGetSignature[expr] returns signature of multivector.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "::", "usage"}], "=", 
   "\"\<gaGetMV[expr, {n__Integer?Positive}] returns multivector of grades \
{n}. gaGetMV[expr,_mvDownUp] returns (to do) multivectors with given pattern \
of indices,... other criteria can be implemented\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "usage"}], "=", 
   "\"\<gaOrderedQ[ordering_String][#1,#2] gives True if pair of base \
elements is ordered according to one of defined orderings \n \\\"Lex\\\", \
\\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\", which can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "::", "usage"}], "=", 
   "\"\<gaIndexSort[ind:{{__Integer?Positive}..}, order_String] sorts ind \
with respect to gaNonCommutativeMonomialOrder. Sorts monomials acording to \
given order.... other possibilities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "usage"}], "=", 
   "\"\<gaTestIndexOrdering[expr] tests if inices inside \
mvDownUp[{__Integer},{__interger}] are sorted. This test is set to $Pre by \
default an can be removed setting package global option to \
gaAlwaysTestInputIndexOrdering\[Rule]False.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeneralMultivector", "::", "usage"}], "=", 
   "\"\<gaGeneralMultivector[coef_,al_Cl,grade_:{}] generates algebras al \
multivector with symbolic coefficients named as coef[_integer] of specified \
grade. If grade list is empty {} or All all grades are generated.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notation and help functions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["\<\
Insert some output after evaluated cell (taken form \
http://mathematica.stackexchange.com/questions/15134/a-debug-utility-to-print-\
or-extract-intermediate-data-from-a-program)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"insertBelowEvaluationCell", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SelectionMove", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "After", ",", 
       "EvaluationCell"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"BoxData", "@", 
          RowBox[{"ToBoxes", "[", "expr", "]"}]}], ",", "\"\<Print\>\""}], 
        "]"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["One message per session", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alreadyPrintedList", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Alias modification in order to match ",
 StyleBox["gaRunningAlgebra ",
  FontWeight->"Bold"],
 "color. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"updateInputAlias", ",", "HoldRest"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"updateInputAlias", "[", 
    RowBox[{"aliasName_String", ",", "aliasReplacementRul__Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"alposition", ",", 
       RowBox[{"inpOpt", "=", 
        RowBox[{"Options", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", "InputAliases"}], 
         "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"inpOpt", ",", "aliasName"}], "]"}]}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
         RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{"inpOpt", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"alposition", "=", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"inpOpt", ",", 
                 RowBox[{"aliasName", "->", "_"}]}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Extract", "[", 
               RowBox[{"inpOpt", ",", "alposition"}], "]"}], "/.", 
              RowBox[{"{", "aliasReplacementRul", "}"}]}], ")"}]}]}], "]"}]}],
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Automated color picking is full of heuristic. For first 3 colors maximize \
ColorDistance function explicitly. After that pick colors randomly decreasing \
allowed distance (accept treshold) between colors with increasing number of \
colors. If  there is a need, say blue family, call  ",
 StyleBox["pickNextRandomColor[RGBColor[_,_,1],1/3] ",
  FontWeight->"Bold"],
 " with reduced threshold (i.e . for example 1/3 instead of 1). Threshold \
function ",
 StyleBox["accept=1/(quality*Log[2,N[oldlength+1]])",
  FontWeight->"Bold"],
 " gives up to 23 colors. Then color generation stops, because threshold \
decreases too slowly and is unable to guarantee required minimal distance \
between colors. After that we simply pick colors randomly. [Mathematical \
task: find a decrease function, which will allow optimally (with equal and \
chosen in advance constant probablility) generation of any number of colors). \
Solution. For one dimensional case we can immediatelly write formula: p[n]= \
1-2(n-1)len[n]. So if distance between colors will decrease as \
len[n]=(1-p[n])/(2(n-1)), then probability for picking next color will remain \
constant: p[n]=const., For 3D case an analog would be \
accept=Power[quality/((4Pi/3)(oldlength+1)),1/3.] law. Unfortunatelly, this \
does not work well enought.] "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pickNextColor", "::", "maxColorLimit"}], "=", 
   "\"\<Smart color picking limit `1` was reached. Start picking colors \
randomly.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "pickNextColor", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alreadyUsedColors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "1.", ",", "1."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "0."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"predefinedColorList", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1.", ",", "0.", ",", "0."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "1.", ",", "0."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "0.", ",", "1."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "1.", ",", "1."}], "]"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pickNextRandomColor", "[", 
     RowBox[{"channel_RGBColor", ",", 
      RowBox[{"quality_", "?", "NumberQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"newColor", ",", 
        RowBox[{"oldlength", "=", 
         RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"accept", "=", 
        RowBox[{"quality", "/", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", 
           RowBox[{"N", "[", 
            RowBox[{"oldlength", "+", "1"}], "]"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}], "===", 
          "oldlength"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Min", "[", 
             RowBox[{"ColorDistance", "[", 
              RowBox[{"alreadyUsedColors", ",", 
               RowBox[{"newColor", "=", 
                RowBox[{"RandomColor", "[", "channel", "]"}]}], ",", 
               RowBox[{"DistanceFunction", "\[Rule]", "\"\<CIE94\>\""}]}], 
              "]"}], "]"}], ">", "accept"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", "newColor"}], "]"}]}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "newColor"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"smartColors", "=", "21"}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "\[GreaterEqual]", "10.2"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", 
      RowBox[{"opts___", "?", "OptionQ"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"len", "=", 
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}], ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"pickNextColor", ",", "Quiet"}], "]"}]}], ")"}]}], ",", 
         "newColor"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"predefinedColorList", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"predefinedColorList", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{"predefinedColorList", ",", "alreadyUsedColors"}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "predefinedColorList", "]"}], ">", "0"}], 
          ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", 
             RowBox[{"newColor", "=", 
              RowBox[{"predefinedColorList", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";", "newColor"}], 
          ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"len", "<", "smartColors"}], ",", 
            RowBox[{"pickNextRandomColor", "[", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"_", ",", "_", ",", "_"}], "]"}], ",", "1."}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Not", "[", "quiet", "]"}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"pickNextColor", "::", "maxColorLimit"}], ",", 
                 "smartColors"}], "]"}]}], "]"}], ";", 
             RowBox[{"RandomColor", "[", "]"}]}]}], "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", "___", "]"}], ":=", 
     RowBox[{"RGBColor", "[", 
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input"],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions is less than 10.2 picking of color is random."
}], "Text"],

Cell["\<\
If  global option gaTestIndexOrdering was set to True, then try to detect not \
strictly ordered index sets. Repeated indices inside mvDownUp[ ] are also \
forbiden. The resulting slowdown of this testing was not measured, however \
for modest output/input size should be acceptable. Input of indices with \
larger values that number of base vectors are allowed, thought they are \
meaningless in computations. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], "=", 
   "\"\<Error. Not properly ordered index set `1` in expression input/output \
was detected. Only ordered sets can appear in calculations.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], "=", 
   "\"\<Error. Index set `1` contains repeated indices. All indices in base \
element should be different.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{"gaTestIndexOrdering", ",", " ", "HoldAll"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "[", "expr_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"indexPairs", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Unevaluated", "[", "expr", "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "___Integer", "}"}], ",", 
           RowBox[{"{", "___Integer", "}"}]}], "]"}], ",", "Infinity"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
             RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"indexCases", "=", 
           RowBox[{"indexPairs", "/.", 
            RowBox[{"mvDownUp", "\[Rule]", "Sequence"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}], " ", "]"}], 
           ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], ",", 
              RowBox[{"Pick", "[", 
               RowBox[{"indexCases", ",", 
                RowBox[{"Not", "/@", 
                 RowBox[{"(", 
                  RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}]}], 
               "]"}]}], "]"}], ";"}], ",", "expr"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], ",", 
          RowBox[{"Pick", "[", 
           RowBox[{"indexPairs", ",", 
            RowBox[{"Not", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
                  RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
               RowBox[{"(", 
                RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}]}], 
           "]"}]}], "]"}], ";"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "/.", "$gaGlobalProperties"}], 
     ")"}], ",", 
    RowBox[{
     RowBox[{"$Pre", "=", "gaTestIndexOrdering"}], ";", 
     RowBox[{"$Post", "=", "gaTestIndexOrdering"}]}]}], "]"}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Algebra and Index notations"
}], "Subsubsection"],

Cell["\<\
Algebras always use three signatures, positive (p), negative (q) and zero \
(r). \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_"}], "]"}], "=", 
   RowBox[{"Cl", "[", 
    RowBox[{"p", ",", "q", ",", "0"}], "]"}]}], ";"}]], "Input",
 CellID->1126827235],

Cell["Nice output for Clifford algebra identificator", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alsty", "=", 
        RowBox[{"gaNotation", "[", 
         RowBox[{"Cl", "[", 
          RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"r", "===", "0"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", "\"\<0\>\""}], "}"}], ",", 
          "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{
               RowBox[{"StyleBox", "[", 
                RowBox[{"\"\<Cl\>\"", ",", "alsty"}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"#1", ",", "\"\<,\>\"", ",", "#2"}], "}"}], "]"}]}], 
              "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"r", ",", "sf"}], "]"}]}], "}"}], ",", "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<Cl\>\"", ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                  "#3"}], "}"}], "]"}]}], "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaNotation", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "=!=", 
     "gaNotation"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Nice representation of indices. System` context have protected ",
 StyleBox["Up",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Down",
  FontWeight->"Bold"],
 " symbols, therefore we introduce our own ",
 StyleBox[" mvDownUp[{down},{up}]",
  FontWeight->"Bold"],
 " instead of separate down and up indices. Single head will simplify pattern \
matcher. By default for base multivectors we use down indices, i.e. ",
 StyleBox["mvDownUp[{down},{}] ",
  FontWeight->"Bold"],
 " and dual base  is represented by upper indices  i.e. ",
 StyleBox["mvDownUp[{},{up}]",
  FontWeight->"Bold"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
In oder to allow editing we explicitly enumerated slots. Unfortunatelly, this \
imply, that at the moment it is impossible to change number of indices, so \
editing make sense only if number of up and down indices remain the same\
\>", "Text"],

Cell[TextData[{
 StyleBox["mvDownUp[indown_List,inup_List]",
  FontWeight->"Bold"],
 " keeps down indices in the first list and up indices in the second. Both \
index list should be strictly ordered (no two same indices anywhere) for \
numeric indices. Note, however, that in calculations, when both type of \
indices are present we authomatically sort indices of both types into common \
ordered index list. For convenience of  input, however  separate ordered up \
and down index lists are used (otherwise we should indicate type of index for \
each index, which would result into long input sequence)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown___Integer", "}"}], ",", 
       RowBox[{"{", "inup___Integer", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"argsa", "=", 
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Rest", "/@", 
           RowBox[{"Sort", "[", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"indown", ",", "inup"}], "}"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", 
                    RowBox[{"-", "1"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "inup", "}"}], "]"}]}]}], "}"}]}], "]"}]}], 
                "]"}]}], "}"}], "]"}], "]"}]}], "]"}], ",", "\"\<,\>\""}], 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", "argsa", "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}], ",", 
                   RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}]}], "}"}], 
                 ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "&"}]}]}], "}"}], 
       ",", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "indown", "}"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "inup", "}"}]}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "indown", "}"}], ",", 
             RowBox[{"{", "inup", "}"}]}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notation for orthogonal base symbol (default setting is \[DoubleStruckE] )"
}], "Subsubsection"],

Cell[TextData[{
 "Orthogonal  base multivectors  are represented by letter  \[DoubleStruckE] \
with subscripts or superscripts (or mixed). It is assumed that up and down \
indices commute (can be permuted). This is true at least in orthonormal \
frame.  Notation will not work if algebra was not defined with ",
 StyleBox["gaDefineOrthonormalBase[ ]",
  FontWeight->"Bold"],
 " or ",
 StyleBox["gaDefineInput[]",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"baseSymbol", "[", 
        RowBox[{"in_", ",", "ra_"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                  "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], 
           "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input"],

Cell["Special bold notation for quaternion", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"baseSymbol", "[", 
        RowBox[{"in_", ",", "ra_", ",", "mark_String"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sty", "=", 
          RowBox[{"(", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"inEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"raEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"StyleBox", "[", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                  "#1"}], "}"}], "]"}], ",", 
               RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
               RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
             "]"}]}], ",", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
               "}"}], "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
           "baseSymbolN", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "For speed reasons we do not want rules for base vectors of the form  \
\[DoubleStruckE][_[],_]:=xxx; Unfortunatelly it is very usefull to make \
exception for unit element. Setting it to 1 will solve many ordering \
problems, hovewer will result in complications when generating tensor \
products. Therefore in these functions we need to ",
 StyleBox["Block[ ] ",
  FontWeight->"Bold"],
 "baseSymbol. For quaternions we always want this replacement to happen"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"baseSymbol", "/:", 
      RowBox[{"HoldPattern", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_", ",", "\"\<Quaternion\>\"", 
         ",", "___"}], "]"}], "]"}], "=", "1"}], ";", 
     RowBox[{"baseSymbol", "/:", 
      RowBox[{"HoldPattern", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "=", "1"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Setting notation for algebra and its elements"
}], "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaNotation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"FontColor", "->", "Automatic"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNotation", "::", "newcolor"}], "=", 
    "\"\<Generating new color for `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", "gaNotation"}],
        ")"}], "||", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], ",", 
        RowBox[{"{", "__Rule", "}"}]}], "]"}]}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gaNotation", "[", "al", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"FontColor", "->", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "value", "}"}], ",", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"value", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}]}], 
                 ")"}], "/.", 
                RowBox[{"Options", "[", "gaNotation", "]"}]}], ")"}]}], ",", 
             "_RGBColor", ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"alreadyUsedColors", ",", 
                RowBox[{"ColorConvert", "[", 
                 RowBox[{"value", ",", "\"\<RGB\>\""}], "]"}]}], "]"}], ";", 
              "value"}], ",", "Automatic", ",", 
             RowBox[{"pickNextColor", "[", "opts", "]"}], ",", 
             "\[IndentingNewLine]", "_", ",", 
             RowBox[{"ColorConvert", "[", 
              RowBox[{"Black", ",", "\"\<RGB\>\""}], "]"}]}], "]"}]}], 
          "]"}]}], "}"}]}], ")"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " modifies ",
 StyleBox["$PreRead",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[TextData[{
 "Rule \[DoubleStruckE][_]:>\[DoubleStruckE][__] in $PreRead ensures that \
never encountered (because of mandatory \[DoubleStruckE][index,algebra] \
syntax)  pattern with single blank is automatically replaced by blank \
sequence.  $PreRead is made dynamic with := in order to prevent input aliases \
when gaRunningAlgebra is set to be gaTensorProduct of algebras. This function \
also includes definitions for ",
 StyleBox["MV[ ]",
  FontWeight->"Bold"],
 ", which is defined in GAC_Multivector.nb. ",
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " is far from finished. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], "=", 
   "\"\<gaRunningAlgebra was set to tensor product `1`. Input alias of base \
element was disabled, it only works with Cl[p,q] algebras.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"preReadMessage", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineInput", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"defCol", ",", "downIndex"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaRunningAlgebra", "=", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{"gaNotation", "[", 
             RowBox[{"Cl", "[", 
              RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "===", 
           "gaNotation"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mv\>\"", ",", 
             RowBox[{
              RowBox[{"RGBColor", "[", "__", "]"}], "->", 
              RowBox[{"(", 
               RowBox[{"FontColor", "/.", 
                RowBox[{"gaNotation", "[", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], 
               ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mv\>\"", ",", 
             RowBox[{"\"\<gaRunningAlgebra\>\"", "->", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"Cl", "[", 
                RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}]}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mvb\>\"", ",", 
             RowBox[{
              RowBox[{"RGBColor", "[", "__", "]"}], "->", 
              RowBox[{"(", 
               RowBox[{"FontColor", "/.", 
                RowBox[{"gaNotation", "[", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], 
               ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mvb\>\"", ",", 
             RowBox[{"\"\<gaRunningAlgebra\>\"", "->", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"Cl", "[", 
                RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}]}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "nested", " ", "inputs", " ", "ReplaceAll", " ", "in", " ",
         "future", " ", "can", " ", "be", " ", "replaced", " ", "by", " ", 
        "more", " ", "dangerous", " ", "ReplaceRepeated"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"baseSymbol", "=", "orthonormalBaseSymbolName"}], "}"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$PreRead", ":=", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], 
             ",", 
             RowBox[{
              RowBox[{"preReadMessage", "=", "False"}], ";", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"(*", 
                 RowBox[{
                 "orthogonal", " ", "base", " ", "symbol", " ", 
                  "replacements"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ":>", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<_\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<__\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                  
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                  
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                  
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", 
                    ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"MV", " ", "symbol", " ", "replacements"}], ",", 
                   " ", 
                   RowBox[{"not", " ", "yet", " ", "in", " ", "use"}]}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<MV\>\"", ",", "\"\<[\>\"", ",", "name_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    "\"\<MV[\>\"", "<>", "name", "<>", 
                    "\"\<,{},{},{},gaRunningAlgebra]\>\""}]}], ",", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "name_String", ",", "\"\<,\>\"", ",", "grade_String"}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{
                    "\"\<MV[\>\"", "<>", "name", "<>", "\"\<,{},{},{\>\"", "<>",
                     "grade", "<>", "\"\<},gaRunningAlgebra]\>\""}], "/;", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Integer", ",", "Symbol"}], "}"}], ",", 
                    RowBox[{"Head", "[", 
                    RowBox[{"ToExpression", "[", "grade", "]"}], "]"}]}], 
                    "]"}]}]}], ",", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"name_String", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", "grade_", "]"}]}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", "name", "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", "grade", "]"}], ",", "\"\<,\>\"", 
                    ",", "\"\<gaRunningAlgebra]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"RowBox", "[", "grade", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "|", "_Symbol"}], ")"}], "..."}], 
                    "}"}]}], "]"}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"name", ",", "grade"}], "}"}], ",", 
                    RowBox[{
                    "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"name_String", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", "index_", "]"}]}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rangas", ",", 
                    RowBox[{"indeksaiPerdirbti", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"RowBox", "[", "index", "]"}], "]"}], "/.", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"j_", ",", "k__"}], "]"}], ":>", 
                    RowBox[{"#", "/@", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "k"}], "}"}]}]}], ")"}], "&"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{"mvUp", ",", "mvDown", ",", "mvAbsent"}], "}"}]}],
                     "]"}]}], ",", "1"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"rangas", "=", 
                    RowBox[{"Length", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"indeksaiPerdirbti", ",", "_mvAbsent"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", "name", "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    
                    RowBox[{"ToBoxes", "[", "indeksaiPerdirbti", "]"}], ",", 
                    "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"ToString", "[", "rangas", "]"}], ",", 
                    "\"\<}\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra]\>\""}], "}"}], "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"RowBox", "[", "index", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_mvDown", "|", "_mvUp", "|", "_mvAbsent"}], 
                    ")"}], "..."}], "}"}]}], "]"}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"name", ",", "index"}], "}"}], ",", 
                    RowBox[{
                    "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}]}]}], 
                  "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
                 "}"}]}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", "preReadMessage"}], ",", 
                RowBox[{
                 RowBox[{"preReadMessage", "=", "True"}], ";", 
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], 
                   ",", "gaRunningAlgebra"}], "]"}]}]}], "]"}], ";", "#"}]}], 
            "]"}], "&"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "clear", " ", "and", " ", "set", " ", "autoreplacements", " ", 
           "for", " ", "orthogonal", " ", "base", " ", "vector", " ", 
           "symbol"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", " ", "\[Rule]", " ", 
            RowBox[{"Fold", "[", 
             RowBox[{"DeleteCases", ",", 
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{"Blank", "[", "]"}], ",", 
                RowBox[{"Blank", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", "->", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
               "orthonormalBaseSymbolInputAlias", "\[Rule]", "baseSymbol"}], 
               "}"}]}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"Options", "[", "gaDefineInput", "]"}]}], ")"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"BoxData", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Running algebra is: gaRunningAlgebra= \>\"", ",", 
                RowBox[{"TagBox", "[", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{
                    RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "gaRunningAlgebra", "]"}], 
                    "]"}]}], "]"}], ",", "DisplayForm"}], "]"}]}], "}"}], 
              "]"}], "]"}], ",", "\"\<Print\>\"", ",", 
            RowBox[{"CellAutoOverwrite", "\[Rule]", "True"}], ",", 
            RowBox[{"GeneratedCell", "\[Rule]", "True"}]}], "]"}], "}"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Orthogonal base definition"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index ordering and sorting"
}], "Subsubsection"],

Cell["\<\
Help functions, which convert index set to binary like representations by \
inserting zeroes in proper places. Uncompiled versions are inactive\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvIndexToBinaryLikeRepresentation", "[", 
    RowBox[{"a_List", ",", 
     RowBox[{"al_:", "gaRunningAlgebra"}]}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Rule", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", 
    RowBox[{
     RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
        ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", 
    RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  Lex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "lex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero \
\[DoubleStruckE]ntry is positive.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}], ",", 
       RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
       RowBox[{"CompilationOptions", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], ",", 
          RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
          RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
         "}"}]}], ",", 
       RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  InvLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Invlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero \
\[DoubleStruckE]ntry is positive.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvLexC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"max", "=", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"Max", "[", "a1", "]"}], ",", 
               RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
            "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ap1", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
           RowBox[{"ap2", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"diff", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
              ">", "0"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  RevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Revlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero \
\[DoubleStruckE]ntry is negative.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeRevLexC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"max", "=", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"Max", "[", "a1", "]"}], ",", 
               RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
            "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ap1", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
           RowBox[{"ap2", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"diff", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
              ">", "0"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeRevLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " InvRevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "InvRevlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero \
\[DoubleStruckE]ntry is negative.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvRevLexC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"max", "=", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"Max", "[", "a1", "]"}], ",", 
               RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
            "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ap1", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
           RowBox[{"ap2", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"diff", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
              ">", "0"}], ",", 
             RowBox[{
              RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvRevLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell["Degree modificated orders. Uncompiled version is inactive.", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"mvNonCommutativeDeg", "[", "order_String", "]"}], "[", 
     RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
    RowBox[{"Switch", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "a1", "]"}], "-", 
        RowBox[{"Length", "[", "a2", "]"}]}], ",", 
       RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
       RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
       RowBox[{
        RowBox[{"Symbol", "[", 
         RowBox[{
         "\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}], 
         "]"}], "[", 
        RowBox[{"a1", ",", "a2"}], "]"}]}]}]}]}], "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell["Compiled versions", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Inverse Degree modificated orders. Uncompiled version is inactive.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeInvDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "a2", "]"}], "-", 
      RowBox[{"Length", "[", "a1", "]"}]}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["Compiled versions", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Commutative coefficients are ordered using ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s MonomialList orders, which are \[OpenCurlyDoubleQuote]Lexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeReverseLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeDegreeLexicographic\
\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NegativeDegreeReverseLexicographic\
\[CloseCurlyDoubleQuote]. These orders are expanded to include  \
\[OpenCurlyDoubleQuote]Reverse[Lexicographic]\[CloseCurlyDoubleQuote],... \
etc., which reverses monomial list order."
}], "Text"],

Cell["\<\
Below we define functions, which use above orderings to orthonormal base \
elements and index sets. \
\>", "Text"],

Cell["\<\
Ordering is defined only for same set (empty or not) of up indices. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQNoncommutative", "[", 
    RowBox[{"ord_String", ",", "ind1_", ",", "ind2_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"mvNonCommutativeLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvLex\>\"", ",", 
     RowBox[{"mvNonCommutativeInvLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<RevLex\>\"", ",", 
     RowBox[{"mvNonCommutativeRevLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvRevLex\>\"", ",", 
     RowBox[{"mvNonCommutativeInvRevLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[InvLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[RevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[InvRevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[Lex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[RevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvRevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", "_", 
     ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBase", "::", "UndefinedOrdering"}], ",", 
        "ord"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQCommutative", "[", 
    RowBox[{"comOrd_String", ",", "anyCoef1_", ",", "anyCoef2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vars", "=", 
        RowBox[{"Variables", "[", 
         RowBox[{"anyCoef1", "+", "anyCoef2"}], "]"}]}], ",", "comOrdMod"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"vars", "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"OrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{"comOrd", ",", "\[IndentingNewLine]", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Lexicographic\>\"", ",", "\"\<DegreeLexicographic\>\"", ",", 
            "\"\<DegreeReverseLexicographic\>\"", ",", 
            "\"\<NegativeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeReverseLexicographic\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MonomialList", "[", 
           RowBox[{
            RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
            "comOrd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Reverse[Lexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeReverseLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeReverseLexicographic]\>\""}], "}"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"comOrdMod", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"comOrd", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<Reverse[\>\"", "\[Rule]", "\"\<\>\""}], ",", 
               RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"MonomialList", "[", 
             RowBox[{
              RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
              "comOrdMod"}], "]"}], "]"}], "===", 
           RowBox[{"{", 
            RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", 
            "comOrd"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaOrderedQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaCommutativeMonomialOrder", "\[Rule]", "\"\<Lexicographic\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], "=", 
   "\"\<Unintended attempt `1` for gaOrderedQ detected. Unexpected sorting \
result possible.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], "=", 
    "\"\<Ordering `1` is undefined.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"anyCoef2_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], "=!=", 
            RowBox[{"{", "ind2", "}"}]}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQNoncommutative", "[", 
           RowBox[{"ord", ",", 
            RowBox[{"{", "ind1", "}"}], ",", 
            RowBox[{"{", "ind2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anyCoef1", ",", "anyCoef2"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anyCoef1", ",", 
       RowBox[{"anyCoef2", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind2", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "anyCoef2", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Scalar and base element ordering. For   \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[RevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvRevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]RevLex\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvRevLex\
\[CloseCurlyDoubleQuote] scalars are lowest elements. Note, that rules are \
complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["baseSymbol[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any_", ",", 
        RowBox[{"anycoef_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"any", ",", "anycoef", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
            "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
            "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", "ord"}],
          "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "any", ",", "anycoef"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Scalars and base element ordering. For   \[OpenCurlyDoubleQuote]Deg[Lex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[RevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvRevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Lex\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]InvLex\[CloseCurlyDoubleQuote]  scalars are highest \
elements.  Note, that rules are complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["baseSymbol[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anycoef_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", "any_", 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anycoef", ",", "any", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
            "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
            "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
         "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
                "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
                "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
             "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anycoef", ",", "any"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Scalar ordering uses ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " standard GroebnerBase orderings defined in ",
 "MonomialList[ ]"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_Plus", ",", "_", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], ",", "any1"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"_", ",", "any2_Plus", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], ",", "any2"}], 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any1_", ",", "any2_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"orderedQCommutative", "[", 
         RowBox[{"comOrd", ",", "any1", ",", "any2"}], "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any1", ",", "any2"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input"],

Cell["\<\
The same rules for dual base. When base elements have up and down indices the \
sorting is undefined (no rules). \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind1_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind2_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind1", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        RowBox[{"anyCoef2", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind2", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        "opts"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"SameQ", "[", 
         RowBox[{"ind", ",", "ind1", ",", "ind2"}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]IncreasingPermutatons\[CloseCurlyDoubleQuote] \
ordering {{1},{2},{3},{1,2}{1,3},{2,3},....} is the same as InvDeg[Lex] \
ordering. There is possibility to define IncreasingPermutatonsWithSignature \
where {1,3}->-{1,3} (due to Odd permutation of 1,2,3). Not implemented. See \
note in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 58."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Subsets", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], ",", 
     RowBox[{"{", "len", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", "len__Integer", "}"}]}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mvInvDegLexSortedIndexList", "[", 
          RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "len", "}"}]}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr_:", "All"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Signature of increasing i.e.  InvDeg[Lex], permutations are easier to \
determine, see formulas in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 59."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"triangularNumber", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"n", "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}], "/", "2"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mvSignatureOfIncreasingPermutation", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", "x"}], ")"}], "-", 
       RowBox[{"triangularNumber", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"OrderedQ", "[", "x", "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{"And", "@@", 
       RowBox[{"Positive", "[", "x", "]"}]}], ")"}]}]}]}], ";"}]}], "Input"],

Cell["Sorting index list with given order", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "[", 
    RowBox[{
     RowBox[{"ind", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"__Integer", "?", "Positive"}], "}"}], ".."}], "}"}]}], ",", 
     
     RowBox[{"ord_String:", "\"\<InvDeg[Lex]\>\""}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeRevLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvRevLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[InvRevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
         "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "_", ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", "ord"}], 
       "]"}], ";", "ind"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geomeric algebra orthonormal base construction"
}], "Subsubsection"],

Cell[TextData[{
 "This slightly modified approach of base construction is due to G. Stacey \
Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineOrthonormalBase", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
      "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
      ",", 
      RowBox[{"Quiet", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"gaGradesOnly", "\[Rule]", "All"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetAttributes", "[", 
      RowBox[{"baseSymbol", ",", "NHoldAll"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDefineOrthonormalBase", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"p_Integer", ",", "q_Integer", ",", 
          RowBox[{"r", ":", 
           RowBox[{"(", 
            RowBox[{"_", "?", "IntegerQ"}], ")"}], ":", "0"}]}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "baseSymbol", ",", "ord", ",", "invdeglexIndexList", ",", "indSet", 
          ",", "keysB", ",", "gr", ",", 
          RowBox[{"quiet", "=", "False"}], ",", 
          RowBox[{"al", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ",", "grOnly", ",", 
          "algBoxes"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"unitElement", "[", "al", "]"}], "=", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"set", " ", "color"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", 
              "gaNotation"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
              RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"gaDefineNotation", "[", 
            RowBox[{"al", ",", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "and", " ", "update", " ", "input", " ", "aliases"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"gaDefineInput", "[", 
          RowBox[{"al", ",", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"Options", "[", "gaDefineInput", "]"}]}], "]"}]}], "]"}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "=", 
          RowBox[{"p", "+", "q", "+", "r"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"p", "+", "1"}], ",", 
            RowBox[{"p", "+", "q"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"main", " ", "stuff"}], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{"ord", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{
             "gaDefineOrthonormalBase", ",", 
              "gaNonCommutativeMonomialOrder"}], "]"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"grOnly", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGradesOnly", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBase", ",", "gaGradesOnly"}], 
             "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"invdeglexIndexList", "=", 
          RowBox[{"mvInvDegLexSortedIndexList", "[", 
           RowBox[{"al", ",", "grOnly"}], "]"}]}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ord", "===", "\"\<InvDeg[Lex]\>\""}], ",", 
           RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
           RowBox[{"indSet", "=", 
            RowBox[{"gaIndexSort", "[", 
             RowBox[{"invdeglexIndexList", ",", "ord"}], "]"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}], "/@",
             "indSet"}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                 "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                 ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
               ",", "ord"}], "]"}], ",", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"al", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"al", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"al", ",", "grOnly"}], "]"}], "=", "keysB"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"assign", " ", "grades"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"gr", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
           "indSet"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"keysB", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
            RowBox[{"gr", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", " ", 
          RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Quiet", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaDefineOrthonormalBase", ",", "Quiet"}], "]"}]}], 
            ")"}], ",", "\[IndentingNewLine]", "Automatic", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
               "alreadyPrintedList", ",", "\"\<gaDefineOrthonormalBase\>\""}],
                "]"}]}], ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{
               "alreadyPrintedList", ",", "\"\<gaDefineOrthonormalBase\>\""}],
                "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"quiet", "=", "True"}]}], ",", 
             RowBox[{"quiet", "=", "False"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "True", ",", 
           RowBox[{"quiet", "=", "True"}], ",", "False", ",", 
           RowBox[{"quiet", "=", "False"}], ",", "_", ",", 
           RowBox[{"quiet", "=", "False"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{
            RowBox[{"algBoxes", "=", 
             RowBox[{"ToBoxes", "[", "al", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], 
                    "]"}], "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], 
               "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"grOnly", "===", "All"}], ")"}], ",", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "=", 
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"al", ",", "grOnly"}], "]"}]}], ",", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "grOnly"}], "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}]}], "]"}], ";"}]}], "Input"],

Cell["\<\
When direct base is calculated, dual base is obtained by interchanging up and \
down indices AND multiplying by signature of base vector. The signature of \
simple algebra is simply a number of base vectors of negative signatures\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_Cl", ",", "___"}], "]"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Power", "[", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{"Length", "/@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], 
                 ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", 
                RowBox[{"gaGetIndex", "[", "expr", "]"}]}], ")"}]}], ")"}]}], 
           ")"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetSignature", "[", "c__", "]"}], ":=", 
      RowBox[{"1", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Signature for tensor products defined in section 6. Direct products.\
\>", "Text"],

Cell["\<\
The reciprocial base definition at the moment is  not properly tested.  Just \
takes and base downbase and interchanges up/down indices and add signature. \
The replaceWithReciprocal[baseElement_] is a help function which construct \
explicit replacement rule\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceWithReciprocal", "[", "baseElement_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theGrade", "=", 
       RowBox[{"gaGetGrade", "[", "baseElement", "]"}]}], ",", 
      RowBox[{"replacement", "=", 
       RowBox[{"(", 
        RowBox[{"baseElement", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{"b", ",", "a"}], "]"}]}], "}"}]}], ")"}]}]}], "}"}], ",", 
    
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"IntegerQ", "@@", "theGrade"}], ",", 
       RowBox[{
        RowBox[{"gaGetGrade", "[", "replacement", "]"}], "=", "theGrade"}]}], 
      "]"}], ";", 
     RowBox[{"Times", "[", 
      RowBox[{
       RowBox[{"gaGetSignature", "[", "baseElement", "]"}], ",", 
       "replacement"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.683342929221025*^9, 3.68334295053986*^9}, {
  3.683343038008635*^9, 3.683343061083718*^9}, {3.683343103928992*^9, 
  3.683343134430406*^9}, {3.683343169839989*^9, 3.68334321843463*^9}, {
  3.683343259407411*^9, 3.683343301010282*^9}, {3.683343341362471*^9, 
  3.683343474630456*^9}}],

Cell["\<\
If algebra is not specified, then all elements convert to reciprocal. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaOrthonormalToReciprocal", "[", 
      RowBox[{"exprWithDownBaseElements_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"orthogonalBaseElements", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", "exprWithDownBaseElements", "}"}], ",", 
             RowBox[{"bs", "[", "allarg__", "]"}], ",", "Infinity"}], "]"}], 
           "]"}]}], ",", "theAlgebras", ",", "replRules"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theAlgebras", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"orthogonalBaseElements", ",", "_Cl", ",", "Infinity"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBase", "[", "#", "]"}], "]"}], "===", 
             "gaOrthonormalBase"}], ",", 
            RowBox[{"gaDefineOrthonormalBase", "[", 
             RowBox[{"#", ",", "opts"}], "]"}]}], "]"}], "&"}], "/@", 
         "theAlgebras"}], ";", "\[IndentingNewLine]", 
        RowBox[{"replRules", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "->", 
             RowBox[{"replaceWithReciprocal", "[", "#", "]"}]}], ")"}], "&"}],
           "/@", "orthogonalBaseElements"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"exprWithDownBaseElements", "/.", "replRules"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell["\<\
With specified algebras only replace elements of that algebra.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaOrthonormalToReciprocal", "[", 
   RowBox[{"exprWithDownBaseElements_", ",", "algebrasOnly_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"gaOrthonormalToReciprocal", "[", 
   RowBox[{"exprWithDownBaseElements", ",", 
    RowBox[{"{", "algebrasOnly", "}"}], ",", "opts"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.683345500289117*^9, 3.683345524748265*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaOrthonormalToReciprocal", "[", 
      RowBox[{"exprWithDownBaseElements_", ",", 
       RowBox[{"{", "algebrasOnly__Cl", "}"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "orthogonalBaseElements", ",", "replRules", ",", "algPattern"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"{", "algebrasOnly", "}"}], "]"}], "===", "1"}], ",", 
          RowBox[{"algPattern", "=", "algebrasOnly"}], ",", 
          RowBox[{"algPattern", "=", 
           RowBox[{"Alternatives", "[", "algebrasOnly", "]"}]}]}], "]"}], ";", 
        RowBox[{"orthogonalBaseElements", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"exprWithDownBaseElements", ",", 
            RowBox[{"bs", "[", 
             RowBox[{"_", ",", "algPattern", ",", "___"}], "]"}], ",", 
            "Infinity"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBase", "[", "#", "]"}], "]"}], "===", 
             "gaOrthonormalBase"}], ",", 
            RowBox[{"gaDefineOrthonormalBase", "[", 
             RowBox[{"#", ",", "opts"}], "]"}]}], "]"}], "&"}], "/@", 
         RowBox[{"{", "algebrasOnly", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"replRules", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "->", 
             RowBox[{"replaceWithReciprocal", "[", "#", "]"}]}], ")"}], "&"}],
           "/@", "orthogonalBaseElements"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"exprWithDownBaseElements", "/.", "replRules"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Sometimes it is useful to group base elements by grade, this is simply to \
implement using undocumented ",
 StyleBox["Internal`PartitionRagged[ ]",
  FontWeight->"Bold"],
 " function. Warning, code below will not work if ",
 StyleBox["Module[ ] ",
  FontWeight->"Bold"],
 "is replaced by ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaOrthonormalBase", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"GroupBy", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBase", "[", 
    RowBox[{"algebra_", ",", 
     RowBox[{"gr_:", "All"}], ",", 
     RowBox[{"opts__", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grouping", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"GroupBy", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaOrthonormalBase", ",", "GroupBy"}], "]"}]}], ")"}]}], 
       ",", 
       RowBox[{"currentAlg", "=", 
        RowBox[{"gaOrthonormalBase", "[", 
         RowBox[{"algebra", ",", "gr"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "currentAlg", "]"}], "=!=", 
        "gaOrthonormalBase"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "grouping", ",", "\"\<None\>\"", ",", "currentAlg", ",", 
         "\"\<Grade\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"Internal`PartitionRagged", "[", 
          RowBox[{"currentAlg", ",", 
           RowBox[{"Length", "/@", 
            RowBox[{"Split", "[", 
             RowBox[{"currentAlg", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
                 RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
             "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell["\<\
If all base was already calculated an now we need only some part of it, then \
simply take requested grades\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBase", "[", 
    RowBox[{"algebra_", ",", "gr_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"gaOrthonormalBase", "[", 
       RowBox[{"algebra", ",", "All"}], "]"}], ",", 
      RowBox[{"_", "?", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"gaGetGrade", "[", "#", "]"}], ",", "gr"}], "]"}], "]"}],
           ">", "0"}], "&"}], ")"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaOrthonormalBase", "[", 
       RowBox[{"algebra", ",", "All"}], "]"}], "]"}], "=!=", 
     "gaOrthonormalBase"}]}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Taking grades, indices and parts of base elements"
}], "Subsubsection"],

Cell["\<\
Grade of empty base element is zero, grade of base element multiplied by \
factor is grade of base element. Warning. Replacement of c in expression \
c_*bs_baseSymbol bu c_. would result in infinite loop. Grades of down  (by \
default) orthonormal base elements are defined during evaluation of \
gaDefineOrthonormalBase[ ] . These grades are explicitly set, for example  \
gaGetGrade[baseSymbol[mvDownUp[{1},{}],algebra]]=1 . This is useful from \
performance point of view. For base elements which contains both, down and up \
indices, however we calculate grade programically an dset it number of \
indices of up and down indices. This should not slowdown code significantly, \
because explicit set values takes place before definitions given below.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", "_"}], "]"}], 
        "]"}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"i1", ",", "j1"}], "}"}], "]"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"c_", "*", "bs_baseSymbol"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaGetGrade", "[", "bs", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Extract indices of multivectors", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetIndex", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{"in_mvDownUp", ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"in", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetIndex", "[", "c_", "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["\<\
Rules for operations (sumation, multiplications, etc.) will be given after \
definition of  these operations. Here we only define how to extract  \
,,primitive\[CloseCurlyDoubleQuote] monomials.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
For experimentation we often need to generate general multivector with \
specified grades. Here it is function for this\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGeneralMultivector", "[", 
   RowBox[{"coefName_", ",", "al_Cl", ",", 
    RowBox[{"grade_:", 
     RowBox[{"{", "}"}]}]}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
       "gaOrthonormalBase"}], ",", 
      RowBox[{"gaDefineOrthonormalBase", "[", "al", "]"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"grade", "===", 
         RowBox[{"{", "}"}]}], ")"}], "||", 
       RowBox[{"grade", "===", "All"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"coefName", "[", "i", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", 
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "-", 
            "1"}]}], "}"}]}], "]"}], ".", 
       RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Plus", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"coefName", "[", "i", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Sum", "[", 
                RowBox[{
                 RowBox[{"Binomial", "[", 
                  RowBox[{
                   RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                   "k"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "0", ",", 
                   RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], ",", 
               RowBox[{
                RowBox[{"Sum", "[", 
                 RowBox[{
                  RowBox[{"Binomial", "[", 
                   RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], "+", 
                RowBox[{"Binomial", "[", 
                 RowBox[{
                  RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                  "#"}], "]"}], "-", "1"}]}], "}"}]}], "]"}], ".", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", 
             RowBox[{"{", "#", "}"}]}], "]"}]}], "&"}], "/@", "grade"}], 
        ")"}]}]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.68480900635255*^9, 3.68480903035366*^9}, {
  3.684809112433199*^9, 3.68480921027266*^9}, {3.684809246361599*^9, 
  3.684809260519593*^9}, {3.684809292460817*^9, 3.684809381077023*^9}, {
  3.684809440262871*^9, 3.684809453217347*^9}, {3.684809549000749*^9, 
  3.684809564787587*^9}, {3.684809726333988*^9, 3.684809747190146*^9}, {
  3.684809815492196*^9, 3.684809836739888*^9}, {3.684809866774026*^9, 
  3.684809885180999*^9}, {3.684809925602337*^9, 3.684810038999764*^9}, {
  3.684810160751684*^9, 3.684810173781716*^9}, {3.684810264591937*^9, 
  3.68481026471461*^9}, {3.684810394486517*^9, 3.684810444258481*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Products and expansions"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"(*", 
     RowBox[{"help", " ", "functions"}], "*)"}], 
    RowBox[{
    "gaCommutativeQ", ",", "gaCommutativeAllQ", ",", "gaSetNonCommutative", 
     ",", "gaSetCommutative", ",", "mvZeroGradeQ", ",", 
     RowBox[{"(*", "operations", "*)"}], "GeometricProduct", ",", "GP", ",", 
     "OuterProduct", ",", "OP", ",", "LeftContract", ",", "LC", ",", 
     "RightContract", ",", "RC", ",", "InnerProduct", ",", "IP", ",", 
     RowBox[{"(*", 
      RowBox[{"product", " ", "expansion"}], "*)"}], "gaProductExpand", ",", 
     "CoefficientFunction", ",", "gaPE", ",", "gaExpand", ",", 
     "CollectCoefficients", ",", "gaGPPower", ",", "gaGPMatrixPower", ",", 
     "gaOPPower", ",", "gaOPMatrixPower", ",", "gaGeometricMatrixProduct", 
     ",", "gaOuterMatrixProduct", ",", "DorstProduct", ",", "DP"}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[TextData[{
 "Do not use ** (",
 StyleBox["NonCommutativeMultiply[ ]",
  FontWeight->"Bold"],
 ") for geometric product!"
}], "Text"],

Cell[TextData[{
 "There is one more product, called the \[OpenCurlyDoubleQuote]Shuffle \
product\[CloseCurlyDoubleQuote], defined by Perti Lounesto in \
\[OpenCurlyDoubleQuote]Lectures on Clifford algebra\[CloseCurlyDoubleQuote] \
",
 ButtonBox["[RA-LoCGAaA] ",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 26, which has geometrical meening for \[OpenCurlyDoubleQuote]meet\
\[CloseCurlyDoubleQuote], and denoted as \[Wedge].  It is not defined at the \
moment. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeQ[f] returns True if argument f is commutative (default \
for new symbol).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeAllQ[expr] returns True if all subparts of expr is \
commutative.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "::", "usage"}], "=", 
   "\"\<gaSetNonCommutative[heads] sets listed heads to be noncommuting \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "::", "usage"}], "=", 
   "\"\<gaSetCommutative[head] sets listed heads to be commuting \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "::", "usage"}], "=", 
   "\"\<mvZeroGradeQ[expr] returns True if it can  detect that multivector is \
scalar. Important note. The answer \\\"False\\\" can indicate detection \
failure, therefore the command intended only for positive decision purposes, \
i.e. on return of True. An alternative is to use gaGetGrade[ ].\>\""}], 
  ";"}]], "Input"],

Cell[TextData[{
 " If we set {",
 StyleBox["Flat",
  FontWeight->"Bold"],
 "} Attribute to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 ", we get infinite recursion limit in ",
 StyleBox["MakeBoxes",
  FontWeight->"Bold"],
 ". Therefore we implement that property without the attribute."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricProduct", "::", "usage"}], "=", 
   "\"\<GeometricProduct[a,b,...] denotes associative geometric product of \
multivectors a,b,... . Alias is GP[]. The StandardForm notation is \
\[GeometricProduct](unicode char \\ :0x26AC, in order to avoid clash with \
Mathematica EmptySmallCircle). For input use keyboard alias \[EscapeKey]gp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GP", "::", "usage"}], "=", "\"\<Alias for GeometricProduct\>\""}],
   ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OuterProduct", "::", "usage"}], "=", 
   "\"\<OuterProduct[a,b,...] denotes outer (wedge) product of multivectors \
a,b,... . Alias is OP[]. The StandardForm notation is \[OuterProduct] \
\!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{
RowBox[{\"unicode\", \" \", \"char\"}], \" \", \"\\\\:22ce\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)). For input use keyboard alias \[EscapeKey]op\[EscapeKey]. \
UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OP", "::", "usage"}], "=", "\"\<Alias for OuterProduct\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InnerProduct", "::", "usage"}], "=", 
   "\"\<InnerProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, inner product turns into scalar product. \
Alias is IP[]. The StandardForm notation is \[InnerProduct] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:2219\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]ip\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IP", "::", "usage"}], "=", "\"\<Alias for InnerProduct\>\""}], 
  ";"}]], "Input"],

Cell[TextData[{
 "\nUnortunatelly keyboad aliases  \[EscapeKey]lc\[EscapeKey] and   \
\[EscapeKey]rc\[EscapeKey] are already in use by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LeftContract", "::", "usage"}], "=", 
   "\"\<LeftContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[a]>=mvGrade[b] result is multivector of grade mvGrade[a]-mvGrade[b] \
and zero otherwise. Alias is LC[]. The StandardForm notation is \
\[LeftContract] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:23a6\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias \[EscapeKey]il\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LC", "::", "usage"}], "=", "\"\<Alias for LeftContract\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RightContract", "::", "usage"}], "=", 
   "\"\<RightContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[b]>=mvGrade[a] result is multivector of grade mvGrade[b]-mvGrade[a] \
and zero otherwise. Alias is RC[]. The StandardForm notation is \
\[RightContract] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:23a3\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]ir\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RC", "::", "usage"}], "=", "\"\<Alias for RightContract\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DorstProduct", "::", "usage"}], "=", 
   "\"\<DorstProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, Dorst product turns into scalar product. \
Alias is DP[]. The StandardForm notation is \[DorstProduct] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{
RowBox[{\"unicode\", \" \", \"char\"}], \" \", \"\\\\:26ab\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]dp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DP", "::", "usage"}], "=", "\"\<Alias for DorstProduct\>\""}], 
  ";"}]], "Input"],

Cell["\<\
Geometric product implementation. Keep these functions in private context, \
because they are only used internally.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMu", "::", "usage"}], "=", 
   "\"\<mvMu[i_Integer?NonNegativeQ,J_List] counts elements of subset J that \
are greater than nonnegative integer i. J is subset of natural numbers. \
\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMuS", "::", "usage"}], "=", 
   "\"\<mvMuS[I_List,J_List] for each i in I counts elements of subset J that \
are greater of i and then adds all these numbers. Uses function mvMu to count \
elements for each i.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvProductSignatureMap[I_List,J_List] provides correct sign for \
geometric product of two multivectors. Assumes that indices of base vectors \
are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAltProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAltProductSignatureMap[I_List,J_List] provides correct sign for \
alternating product of two multivectors. Assumes that indices of base vectors \
are properly ordered. Currently is not used by any other function.\>\""}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAntisymmetricProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAntisymmetricProductSignatureMap[I_List,J_List] provides correct \
sign for antisymmetric product of two multivectors. Assumes that indices of \
base vectors are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "::", "usage"}], "=", 
   "\"\<For developers. mvSetSymmetricDifference[I_List,J_List] gives \
set-symmetric difference of sets I and J.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell["Geometric product expansion", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "usage"}], "=", 
   "\"\<Expands geometric algebra products. Option \
Except->{InnerProduct,OuterProduct,LeftContract,RightContract} forbids \
expansion of listed products. Option CoefficientFunction->Expand expands each \
coefficient before collecting. Terms expansion might significantly speedup or \
slowdown calculations depending on input. The LeafCount of obtained result \
might also differ significantly. Instead of Expand any pure function can be \
applied. Working with numerical coefficients choice \
CoefficientFunction->Identity is usefull. To convert into GeometricProduct \
use gaToGeometricProduct[ ].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CoefficientFunction", "::", "usage"}], "=", 
  "\"\<Option for gaProductExpand, which performs given pure function on \
collected coefficients of multiplied terms. CoefficientFunction->Identity or \
CoefficientFunction->Expand are typical, Thought other choices like \
CoefficientFunction->(Simplify[Togeter[#]]&) are valid.\>\""}], "\
\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExpand", "::", "usage"}], "=", 
  "\"\<gaExpand[expr] repeatidly applies Expand and gaProductExpand command \
pair until result stop to change. In most cases just Expand[gaProductExpand[ \
]] is enought and is recommended.\>\""}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPE", "::", "usage"}], "=", 
   "\"\<Alias for GeometricProductExpand[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "::", "usage"}], "=", 
   "\"\<gaGPPower[x,n_Integer] computes geometric product of n elements  x \
\[GeometricProduct] x \[GeometricProduct] ... \[GeometricProduct] x.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaGPMatrixPower[X,n_Integer] computes product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "::", "usage"}], "=", 
   "\"\<gaOPPower[x,n_Integer] computes outer product of n elements  x  \
\[OuterProduct] x  \[OuterProduct] ... \[OuterProduct] x.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaOPMatrixPower[X,n_Integer] computes  product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaGeometricMatrixProduct[A,B,...] computes  product of matrices A and \
B, elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaOuterMatrixProduct[A,B,...] computes  product of matrices A and B, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation of noncommutativity and noncommutative element detection"
}], "Subsection"],

Cell[TextData[{
 "Common settings.  Explicitly declare all symbols i.e., ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ",",
 StyleBox["Power",
  FontWeight->"Bold"],
 ",etc... to be commutative by default. "
}], "Text"],

Cell[TextData[{
 "The gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " only tests commutativity of  the expressions head. The gaCommutativeAllQ",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "investigates entire expression looking at heads and arguments. If any part \
contains noncommutative head, ",
 "res",
 "ult is \[OpenCurlyDoubleQuote]False\[CloseCurlyDoubleQuote]. So, \
gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " \[Subset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". We can define even more powerfull operator ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 ", which will",
 StyleBox[" ",
  FontWeight->"Bold"],
 "look  if expression is a scalar (i.e. look for some specific inner products \
of multivectors).  Note that ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " might return",
 StyleBox[" True",
  FontWeight->"Bold"],
 " for expressions, which has ",
 StyleBox["noncommutative",
  FontWeight->"Bold"],
 " subexpressions! So  ",
 StyleBox["mvZeroGradeQ[ ] ",
  FontWeight->"Bold"],
 "\[NotSubset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeQ", "[", "_", "]"}], ":=", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{"_", "?", "NumericQ"}], "]"}], ":=", "True"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", "s_Symbol", "]"}], ":=", 
   RowBox[{"gaCommutativeQ", "[", "s", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeAllQ", "[", 
     RowBox[{"f_", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaCommutativeQ", "[", "f", "]"}], ",", 
      RowBox[{"Apply", "[", 
       RowBox[{"And", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"gaCommutativeAllQ", ",", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Derivatives", " ", "of", " ", "MV", " ", "are", " ", "handled", " ", 
     "separatelly"}], ",", " ", 
    RowBox[{"because", " ", 
     RowBox[{"gaCommutativeAllQ", "[", " ", "]"}], " ", "do", " ", "not", " ",
      "check", " ", "for", " ", "more", " ", "complex", " ", "structures", 
     " ", "like", " ", 
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "[", "y", "]"}]}]}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Derivative", "[", "_", "]"}], "[", "x___", "]"}], "[", "y___", 
     "]"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "y", "}"}]}], "]"}]}], ",", "False"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["Set commutative and noncommutative operators.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "False"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "False"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "True"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "True"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{
    "NonCommutativeMultiply", ",", "GeometricProduct", ",", "OuterProduct", 
     ",", "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
     "GP", ",", "OP", ",", "IP", ",", "LC", ",", "RC"}], "}"}]}], 
  ";"}]}], "Input"],

Cell["Set commutative and non-commutative objects. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "[", 
   RowBox[{
    RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}], ",", "MV"}], 
   "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Generally  ",
 StyleBox["False",
  FontWeight->"Bold"],
 "  of ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " can mean detection failure, even when expression do is scalar (say in the \
case  complicated inner product of multivectors). As a ",
 "res",
 "ult it cannot ensure that expression grade is zero, so only positive \
answers make sense and can be used as a test. Use gaGetGrade",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 " if you really want to know expression grade."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"additionalTestFunction", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"additionalTestFunction", "[", "expr_", "]"}], ":=", "False"}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"gaCommutativeAllQ", "[", "expr", "]"}], ",", "True", ",", 
     RowBox[{"additionalTestFunction", "[", "expr", "]"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Grade, index extraction from general expressions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for Times, Plus and nonelements"
}], "Subsubsection"],

Cell["\<\
Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"_", "?", "NumericQ"}], "]"}], "]"}], ":=", 
    RowBox[{"{", "0", "}"}]}], " ", ";"}], 
  RowBox[{"(*", 
   RowBox[{"first", " ", "for", " ", "speed"}], " ", "*)"}]}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", "expr_", "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"{", "0", "}"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "expr", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "only", " ", "multivectors", " ", "are", " ", "graded", " ", 
      "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Times", "[", 
        RowBox[{"c_", ",", "d__"}], "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Times", "[", "d", "]"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{"Union", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"gaGetGrade", "/@", 
       RowBox[{"{", "x", "}"}]}], "]"}], "]"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "Plus", " ", "means", " ", "that", " ", "in", " ", "general", " ", "we", 
    " ", "have", " ", "a", " ", "non", " ", "homogeneus", " ", 
    "multivector"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]}], "Input"],

Cell["Extracting all indices from all terms in a sum", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"gaGetIndex", "[", 
    RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
  RowBox[{"Union", "@@@", 
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{"gaGetIndex", "/@", 
      RowBox[{"{", "x", "}"}]}], ",", "mvDownUp"}], "]"}]}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for OuterProduct"
}], "Subsubsection"],

Cell[TextData[{
 "Rules for ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ". It is assumed, that multivectors denoted by different letters are \
linearly independent. ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " itself ensures that there are no two identical vectors in ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " . All grades which are higher than vector space dimension are removed. "
}], "Text"],

Cell[TextData[{
 "Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values. Note: gaGetGrade",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " ",
 "res",
 "ult depends on value of ",
 StyleBox["gaRunningAlgebra!",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"OuterProduct", "[", "x__", "]"}], "]"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Outer", "[", 
        RowBox[{"Plus", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"(", 
           RowBox[{"gaGetGrade", "/@", 
            RowBox[{"{", "x", "}"}]}], ")"}]}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", ">", 
         RowBox[{"gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}]}], 
        "&"}], ")"}]}]}], "]"}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for LeftContract, RightContract and InnerProduct"
}], "Subsubsection"],

Cell["Not an easy task.", "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Taking parts of multivector with gaGetMV"
}], "Subsection"],

Cell[TextData[{
 StyleBox["E",
  FontWeight->"Bold"],
 "xtract from expression part of specified grade"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaGetMV",
 "[ ]",
 " extract from expression part of specified grade"
}], "Subsubsection"],

Cell[TextData[{
 " gaGetMV",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " takes multivector of specified grade or index pattern (not the grade or \
index itself !)  (the latest not yet implemented, may need to set Hold Rest \
attribute). \nIf no multivector of requested grade is found return zero. \
Serve positive {} and negative Not[{}] requests."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"working", " ", "with", " ", "grades"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", 
           RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}], 
       "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "working", " ", "with", " ", "base", " ", "element", " ", "for", " ", 
       "convenience"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Take grades of multivector list", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_List", "|", "_Plus"}], ")"}]}], ",", "what_"}], "]"}], ":=", 
   
   RowBox[{
    RowBox[{
     RowBox[{"gaGetMV", "[", 
      RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{"expr_", ",", "what_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", 
       RowBox[{"gaPE", "[", "expr", "]"}]}], ")"}], "/;", 
     RowBox[{"!", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}], "[", 
         RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
   ";"}]}]], "Input"],

Cell["Scalar part projection and expressions without indices", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", "0"}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "ind", "}"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"Not", "[", 
       RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "ind", "}"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], "]"}], ",", "a", ",", "0"}], "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"a_", ",", 
          RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "be", "}"}], ",", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}]}], 
          ",", "a", ",", "0"}], "]"}], "/;", 
        RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"a_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
       
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "be", "}"}], ",", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}], ",",
           "a", ",", "0"}], "]"}], "/;", 
        RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"bad", " ", "implementation", " ", "of", " ", 
     RowBox[{"Not", "[", 
      RowBox[{"{", "}"}], "]"}]}], ",", " ", 
    RowBox[{"needs", " ", "carefull", " ", "check"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}],
         "]"}], ":=", 
       RowBox[{"expr", "/;", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", 
            RowBox[{"MV", "|", "baseSymbol"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
          RowBox[{"Not", "[", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", "0"}], "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n___", ",", "0", ",", "m___"}], "}"}], "]"}]}], "]"}], 
        "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", "expr", "]"}], ",", "0"}], "]"}]}], 
         ",", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"Not", "[", 
            RowBox[{"{", 
             RowBox[{"n", ",", "m"}], "}"}], "]"}]}], "]"}], ",", "0"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", "}"}], "]"}]}], "]"}], "]"}], ":=", "expr"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", "expr"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}]}]], "Input"],

Cell["All other rules seems to be excessive. Supressed", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{"expr_List", ",", 
     RowBox[{"{", 
      RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "x", "}"}], ",", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", "x", "]"}], "===", 
          RowBox[{"{", "#", "}"}]}]}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", "n", "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{"expr_List", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Select", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{
        RowBox[{"gaGetGrade", "[", "x", "]"}], "===", 
        RowBox[{"{", "n", "}"}]}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 Evaluatable->False],

Cell["Be carefull, when result is empty. For example Times@@{}=1!", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{"expr_", ",", "grades_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "res", "}"}], ",", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"thisHead", "=", 
          RowBox[{"Head", "[", "expr", "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"res", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"List", "@@", "expr"}], ",", "grades"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"res", "=!=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"thisHead", "@@", "res"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "NonCommutativeMultiply", ",", "GeometricProduct", ",", 
         "OuterProduct", ",", "InnerProduct", ",", "LeftContract", ",", 
         "RightContract"}], "}"}], ",", 
       RowBox[{"Head", "[", "expr", "]"}]}], "]"}]}]}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["Commuting factors out, last remains", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"a_", ",", "b__"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"Times", "[", "b", "]"}], ",", 
       RowBox[{"{", "n", "}"}]}], "]"}]}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["If expression is Plus[ ], take each term projections", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"expr_Plus", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetMV", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", "n", "}"}]}], "]"}], "&"}], "/@", "expr"}], ")"}]}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
If  one of arguments of noncommutative products is Plus[ ], expand expression\
\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"gaGetMV", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", "n", "}"}]}], "]"}], "&"}], "/@", 
      RowBox[{"Expand", "[", 
       RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Alternatives", "@@", "gaDefinedProducts"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]], "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Products notations and precedence implementation (based on modification \
of UnicodeSymbols.tr file)"
}], "Subsection"],

Cell["\<\
Based on product precedence implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstPruduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GP", "=", "GeometricProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OP", "=", "OuterProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LC", "=", "LeftContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RC", "=", "RightContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IP", "=", "InnerProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DP", "=", "DorstProduct"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make expressions"
}], "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[DorstProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<DorstProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[InnerProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<InnerProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[LeftContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<LeftContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[RightContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<RightContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[OuterProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<OuterProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"x", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"PatternSequence", "[", 
          RowBox[{"\"\<\[GeometricProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<GeometricProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
         "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], "]"}]}],
     ",", "sf"}], "]"}]}]}], "Input"],

Cell[TextData[{
 StyleBox["Known issue.",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 " If output is converted to ",
 StyleBox["InputForm[ ] ",
  FontWeight->"Bold"],
 "and then edited the ",
 "res",
 "ult obtained, for example as, ",
 StyleBox["Cell[\[OpenCurlyDoubleQuote]3*Sin[x]*\[DoubleStruckE][mvDownUp[{1, \
2, 3}, {}], Cl[3, 1, 0]]\[GeometricProduct]a\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Input\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 ", will not be correctly converted to expression. At the moment it is \
unclear how cells which contains no Box structures  (i.e., when cell content \
is single string) are interpreted. "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make boxes"
}], "Subsubsection"],

Cell[TextData[{
 "Make output boxes: use explicit brackets for multiple arguments acording to \
precedence rules (use brackets for any lower precedence operations). \
Precedeces are:  NonCommutativeMultiply (**, highest), Times (*, Space), \
RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), OuterProduct (\[OuterProduct], bad \
representation in text cells, input cells are ok.), GeometricProduct(\
\[GeometricProduct]), Plus (lowest).\n\nNote that ",
 StyleBox["Times",
  FontWeight->"Bold"],
 " have higher precedence than any of geometric products. This is somehow \
unusual assumption, however convenient one. These precedences  (except that \
of ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ") are used in many of books on GA (look for partial  list above), thought \
in some books precedences of ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " are reversed (for example, see Geometric Algebra by Eric Chisolm arXiv \
1205.5935v1). We prefer inner product to have highest priority, because from \
programming point of view we are happy to recognize scalars as soon as \
possible."
}], "Text"],

Cell["Formating expresions with single argument.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "=!=", 
    "Plus"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<(\>\"", ",", 
      RowBox[{"MakeBoxes", "[", 
       RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "===", "Plus"}]}]}]}], "Input"],

Cell["Formating expresions with two arguments.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[RightContract]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[RightContract]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], 
          ",", "\"\<\[RightContract]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[RightContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
       "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[LeftContract]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[LeftContract]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[InnerProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[InnerProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[DorstProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[DorstProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[OuterProduct]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
          "\"\<\[OuterProduct]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
        "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
         "]"}]}], "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[GeometricProduct]\>\"",
          ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
      "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
         ",", "\"\<\[GeometricProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}]}], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricProduct,",
 " OuterProduct,  LeftContract and RightContract book keeping (general \
multivectors, no ordering rules)"
}], "Subsection"],

Cell[TextData[{
 " ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " book keeping . Unfortunatelly rules for differentiation operator ",
 StyleBox["mvD[ ]",
  FontWeight->"Bold"],
 " have to be given in a more complicated way."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "asociativity", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"GeometricProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], ";"}],
    " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "singlet", " ", "rule", " ", "applies", " ", "after", " ", "moving", " ", 
     "scalar", " ", "from", " ", "GeometricProduct"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"GeometricProduct", "[", "]"}], ":=", "1"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"when", " ", "e_", "1", "*", "e_", "1"}], " ", "->", 
     RowBox[{"1", " ", "we", " ", "are", " ", "left", " ", "empty"}]}], " ", 
    "*)"}]}]}]], "Input"],

Cell[TextData[{
 "Even if argument is a scalar (i.e. satisfy ",
 "gaGetGrade",
 StyleBox["[b]={0})",
  FontWeight->"Bold"],
 ", we do not move it out of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " (it is oposite to the case with ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 "). GeometricProduct properties with respect to base of  ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " are defined in Base expansion section."
}], "Text"],

Cell[TextData[{
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " book keeping . Ordering of rules is important. Here two possibilities \
exist how to interpret outer product of scalars. 1) Outer product of scalars \
is simply Times. This possibility implemented below.  In particularly \
HoldPattern[OuterProduct[a_]]:=a ; should be checked before commuting out \
properties, otherwise we can end with empty outerproduct.\n2) Outer product \
of scalars is zero. For this we need to move HoldPattern[OuterProduct[a_]]:=a \
in the end (before OuterProduct[]:=) and replace OuterProduct[]:=$Failed to \
OuterProduct[]:=0. Both variants correspond to general definition that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A", "r"], "\[OuterProduct]", 
     SubscriptBox["B", "s"]}], "=", 
    SubscriptBox["C", 
     RowBox[{"r", "+", "s"}]]}], TraditionalForm]]],
 ". The question needs further investigation."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "asociativity", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"OuterProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"OuterProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"[", 
       RowBox[{"DH", "-", 
        RowBox[{"CA2GC1", ".22", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
     RowBox[{"singlet", " ", "rule"}], ",", " ", 
     RowBox[{
     "outer", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
      "scalar", " ", "behaves", " ", "like", " ", "geometric", " ", 
      "product"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OuterProduct", "[", "]"}], ":=", "$Failed"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "outer", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input"],

Cell[TextData[{
 StyleBox["Note.",
  FontColor->RGBColor[1, 0.5, 0]],
 " Rule OuterProduct[A,A]->0 is only valid if A is pure product. If A is a \
sum of different grades, then the product is NOT zero!"
}], "Text"],

Cell[TextData[{
 StyleBox["LeftContract",
  FontWeight->"Bold"],
 "  (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[LeftContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]]],
 ")and ",
 StyleBox["RightContract ",
  FontWeight->"Bold"],
 " (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[RightContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]]],
 ")book keeping .  Both products are not associative (a\[CenterDot]b\
\[CenterDot]c syntax is undefined, i.e. forbidden). Nevertheless the rules \
below are shorter when written for multiple arguments (programming trick)"
}], "Text"],

Cell[TextData[{
 "List of equal blades are scalars.  These scalars are detected by ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " condition."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"RightContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "d", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "RightContract", " ", "with", " ", "right", " ", "scalar", " ", "is", " ", 
    "simple", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "a", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "b_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "a_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], " ",
    ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"LeftContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "c", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "LeftContract", " ", "with", " ", "left", " ", "scalar", " ", "is", " ", 
    "simply", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "b", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "a_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "b_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input"],

Cell[TextData[{
 "The ",
 StyleBox[" InnerProduct[ ] ",
  FontWeight->"Bold"],
 "treates scalars differently! If singlet appears in ",
 StyleBox["InnerProduct[ ]",
  FontWeight->"Bold"],
 ", this means we had multiplication with scalar. Then ",
 "res",
 "ult should be set to zero."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", 
     RowBox[{"a___", ",", 
      RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"b", ",", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "]"}], "/;", 
    RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"InnerProduct", "[", 
      RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Times", "[", 
      RowBox[{"b", ",", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "c"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"CA2GC1", ".21", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
    RowBox[{"singlet", " ", "rule"}], ",", " ", 
    RowBox[{
    "inner", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
     "scalar", " ", "gives", " ", "0"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", "a_", "]"}], "]"}], ":=", "0"}], 
  ";"}]}], "Input"],

Cell["Ordering is needed only for general multivectors.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"STA3", ".13"}]}], "]"}], " ", "Canonical", " ", 
     RowBox[{"ordering", ":", " ", 
      RowBox[{
      "order", " ", "blades", " ", "by", " ", "increasing", " ", 
       "grade"}]}]}], ",", " ", 
    RowBox[{"when", " ", "equal"}], ",", " ", "lexicographically"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"GeometricProduct", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"Times", "@@", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"gaGetGrade", "[", "b", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"gaGetGrade", "[", "a", "]"}], "+", "1"}], ")"}]}], 
            "]"}]}], ")"}]}], ",", 
        RowBox[{"InnerProduct", "[", 
         RowBox[{"b", ",", "a"}], "]"}]}], "]"}], "/;", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{"Less", "@@", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"gaGetGrade", "[", "b", "]"}], ",", 
           RowBox[{"gaGetGrade", "[", "a", "]"}]}], "]"}]}], ")"}]}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"InnerProduct", "[", 
       RowBox[{"b", ",", "a"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaGetGrade", "[", "b", "]"}], "===", 
         RowBox[{"gaGetGrade", "[", "a", "]"}]}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{"Not", "[", 
         RowBox[{"OrderedQ", "[", 
          RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}], "]"}], "]"}], ")"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"InnerProduct", "[", "]"}], ":=", "$Failed"}], " ", ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "inner", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricMatrixProduct,",
 " OuterMatrixProduct "
}], "Subsection"],

Cell[TextData[{
 "Procedure to multiply matrices of multivectors. Implementation is taken \
from Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{"gaGeometricMatrixProduct", ",", "gaOuterMatrixProduct"}], 
    "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"GeometricProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaGeometricMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", "A_", "]"}], ":=", "A"}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"OuterProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaOuterMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation and book keeping for geometric, outer products in \
orthonormal base."
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Tools to analyse compilation to C problems (unevaluatable by default, \
useful in the case of compilation problems)"
}], "Subsubsection"],

Cell["\<\
For example after upgrade to ubuntu 14.04 I had to make symbolic link of \
/lib/libgcc_s.so link to /lib/i386-linux-gnu.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"GCCCompiler", "::", "shdw"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\(\\\"GCCCompiler\\\"\\)\[NoBreak] appears \
in multiple contexts \[NoBreak]\\!\\({\\\"CCompilerDriver`GCCCompiler`\\\", \
\\\"Global`\\\"}\\)\[NoBreak]; definitions in context \
\[NoBreak]\\!\\(\\\"CCompilerDriver`GCCCompiler`\\\"\\)\[NoBreak] may shadow \
or be shadowed by other definitions. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/shdw\\\", \
ButtonNote -> \
\\\"CCompilerDriver`GCCCompiler`GCCCompiler::shdw\\\"]\\)\"\>"}]], "Message", \
"MSG"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellCommandFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{"Compile", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", "x", "}"}], "}"}], ",", 
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData["\<\"/usr/bin/gcc -shared -o \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.so\\\" -m32 -fPIC -O2 \
-D\\\"MINT_32\\\" \
-I\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/IncludeFiles/C\\\" -I\\\
\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/DeveloperKit/\
Linux/CompilerAdditions\\\" \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.c\\\"  \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/\
DeveloperKit/Linux/CompilerAdditions\\\" \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Libraries/Linux\\\"    \
2>&1\"\>"], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               PaneBox[
                RowBox[{"{", "_Real", "}"}],
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               RowBox[{"{", "_Real", "}"}],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Variables: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", "x", "}"}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Expression: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               SuperscriptBox["x", "2"],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{10, 10.2, 5468}, {
    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
   0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {1}}, 
   Function[{$CellContext`x}, $CellContext`x^2], Evaluate, 
   LibraryFunction[
   "/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/compiledFunction0.so", "compiledFunction0", {{Real, 0, "Constant"}}, 
    Real]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellOutputFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", "x", "}"}], "}"}], ",", 
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], 
  ";"}]}], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Subset counting functions"
}], "Subsubsection"],

Cell["\<\
Counts  elements of subset j that are greater than nonnegative integer i. j \
is subset of natural numbers. Replace  to byte compiled function (WVM) if \
user uses older Mma version, for which compilation to C is not possible. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMu", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"sum", "=", "0"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"j", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
               RowBox[{"sum", "++"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", 
               RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
           "sum"}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvMu", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sum", "=", "0"}], "}"}], ",", 
         RowBox[{
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"j", "[", 
                RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
              RowBox[{"sum", "++"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", 
              RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
          "sum"}]}], "]"}]}], "]"}]}]}], "]"}], ";"}]], "Input"],

Cell["\<\
Counts total number of  elements of subset j that are greater of  each of \
integers, listed in the list i.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMuS", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"sum", "=", "0"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"sum", "=", 
              RowBox[{"sum", "+", 
               RowBox[{"mvMu", "[", 
                RowBox[{
                 RowBox[{"j", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
             
             RowBox[{"{", 
              RowBox[{"k", ",", 
               RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
           "sum"}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvMuS", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sum", "=", "0"}], "}"}], ",", 
         RowBox[{
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"sum", "=", 
             RowBox[{"sum", "+", 
              RowBox[{"mvMu", "[", 
               RowBox[{
                RowBox[{"j", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", 
              RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
          "sum"}]}], "]"}]}], "]"}]}]}], "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Various products signature maps, see ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " package implementation"
}], "Subsubsection"],

Cell[CellGroupData[{

Cell["\<\
Geometric product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
When both  down and up indices present we need take into account index number \
difference between initial and contracted upper index sets (we calculate \
everything using down indices). Note that term \
(-1)^(mvMu[gap,Join[{j1},{j2}]] + mvMu[gap,Join[{j1},{j2}]]) was dropped, \
because it comes twise (once, because we indices down, and second when count \
repeated indices which are both up, i.e. in that case remove from \
intersecting up and down indices that with negative signature)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"gap_", ",", "gaq_", ",", 
        RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"gap_", ",", "gaq_", ",", 
        RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "both"}], ",", " ", 
    RowBox[{"down", " ", "and", " ", "up", " ", "indices", " ", "present"}], 
    ",", " ", 
    RowBox[{
    "signature", " ", "is", " ", "calculated", " ", "from", " ", "Union", " ",
      "of", " ", 
     RowBox[{"indices", "!"}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"gap_", ",", "gaq_", ",", 
        RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"mvProductSignatureMapC", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i1", "}"}], ",", 
          RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i2", "}"}], ",", 
          RowBox[{"{", "j2", "}"}]}], "]"}], ",", "gap", ",", "gaq"}], "]"}], 
      "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "j1", "}"}]}], "]"}]}], "]"}], "+", 
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ")"}]}]}], ")"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"intesectionIJ", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"mvMu", "[", 
              RowBox[{
               RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
              "0"}], ",", "0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"mvMuS", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
               RowBox[{"mvMu", "[", 
                RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
           "]"}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"intesectionIJ", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mvMu", "[", 
             RowBox[{
              RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
             "0"}], ",", "0", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"mvMuS", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
              RowBox[{"mvMu", "[", 
               RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
          "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";"}]}], "Input"],

Cell["\<\
Alternating product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separatelly for speed. Alternating Product \
Signature map at the moment is not used. The signature map was not adopted \
for mixed up and down indices.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "i1", "}"}], ",", 
       RowBox[{"{", "i2", "}"}]}], "]"}], "*", 
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "j1", "}"}], ",", 
       RowBox[{"{", "j2", "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"sum", "=", "0"}], ",", 
               RowBox[{"intesectionIJ", "=", 
                RowBox[{"Intersection", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"OddQ", "[", 
                   RowBox[{"intesectionIJ", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"sum", "=", 
                   RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", 
                  RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
               "]"}], ";", "sum"}]}], "]"}]}], ")"}]}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAltProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"mvMuS", "[", 
           RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"sum", "=", "0"}], ",", 
              RowBox[{"intesectionIJ", "=", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", 
                  RowBox[{"intesectionIJ", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                 RowBox[{"sum", "=", 
                  RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
              "]"}], ";", "sum"}]}], "]"}]}], ")"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["\<\
Antisymmetric product signature map. Assumes natural index ordering. Down \
only and Up only cases are matched separatelly for speed.  \
AntisymmetricProductSignatureMap  in the presence of both up and down indices \
is calculated of the union of indices. Contrary to mvProductSignatureMap no \
additional sign correction here.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mvMu", "[", 
            RowBox[{"0", ",", 
             RowBox[{"Intersection", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
          "0", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"-", "1"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"mvMuS", "[", 
             RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"mvMu", "[", 
           RowBox[{"0", ",", 
            RowBox[{"Intersection", "[", 
             RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", "0",
          ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Set symmetric difference function"
}], "Subsubsection"],

Cell[TextData[{
 "Set symmetric difference function coinsides with  Stamples ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " implementation. Compilation of this function is not worthy (speedup is \
negligable)."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "[", 
    RowBox[{"iI_List", ",", "jJ_List"}], "]"}], ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Cannot apply the symmetric difference, ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Intersection[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " directly, because indices are inside ",
 StyleBox["mvDownUp[ ] ",
  FontWeight->"Bold"],
 "container. Therefore we need intermediate layer. When only down or up \
indices present, we simply pass corresponding functions to lists of integers"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", 
       RowBox[{"{", "}"}]}], "]"}]}], "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"mvSetSymmetricDifference", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j2_List"}], "]"}]}], "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"mvSetSymmetricDifference", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "When both type of indices present, then we have to find set symmetric \
difference of common index set. In addition we have to remember which indices \
are down and what are up. Note that ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " authomatically sorts integers."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ssd", "=", 
       RowBox[{"mvSetSymmetricDifference", "[", 
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{"i1", ",", "j1"}], "]"}], ",", 
         RowBox[{"Union", "[", 
          RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Intersection", "[", 
        RowBox[{"ssd", ",", 
         RowBox[{"Join", "[", 
          RowBox[{"i1", ",", "i2"}], "]"}]}], "]"}], ",", 
       RowBox[{"Intersection", "[", 
        RowBox[{"ssd", ",", 
         RowBox[{"Join", "[", 
          RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUpUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}]}], "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"Union", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric product for base multivectors"
}], "Subsubsection"],

Cell[CellGroupData[{

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
Fourth argument ignoreMe is needed when calculating gaTensorProduct of same \
Clifford algebras. It adds unique identificator which prevents mixing of \
different algebras base elements. Note, that in the result we keep the mark \
ignoreMe. This has an application in realization of multiplication of \
quaternions, which we want to be different from Cl[0,2] algebra base elements.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ssd", "=", 
         RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
          RowBox[{"du1", ",", "du2"}], "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ssd", "===", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"mvProductSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "al"}], "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"mvProductSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "al"}], "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"ssd", ",", "al", ",", "ignoreMe"}], "]"}], ",", 
             "other2"}], "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Outer product for base multivectors"
}], "Subsubsection"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples,",
 ButtonBox[" [SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", 
        "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"duu", "=", 
         RowBox[{"mvDownUpUnion", "[", 
          RowBox[{"du1", ",", "du2"}], "]"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"duu", "===", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
            RowBox[{"du1", ",", "du2"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
            RowBox[{"du1", ",", "du2"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUpUnion", "[", 
                RowBox[{"du1", ",", "du2"}], "]"}], ",", "al"}], "]"}], ",", 
             "other2"}], "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left and Right contract and InnerProduct for base multivectors"
}], "Subsubsection"],

Cell["LeftContract for two base elements", "Text"],

Cell["\<\
The definition assumes that we are dealing with Hestenes \
\[OpenCurlyDoubleQuote]mother algebra\[CloseCurlyDoubleQuote] (see C. Doran, \
D. Hestenes, F. Sommen and N. Van Acker, \[OpenCurlyDoubleQuote]Lie groups as \
spin groups\[CloseCurlyDoubleQuote], J. Math. Phys. 34 (8), 1993, pp \
3642-3669.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"LeftContract", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Union", "@@", "du1"}], ",", 
            RowBox[{"Union", "@@", "du2"}]}], "]"}], "]"}], "===", 
         RowBox[{"Length", "[", 
          RowBox[{"Union", "@@", "du1"}], "]"}]}], ",", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}], 
     " ", ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["RightContract for two base elements", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"RightContract", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"Union", "@@", "du1"}], ",", 
           RowBox[{"Union", "@@", "du2"}]}], "]"}], "]"}], "===", 
        RowBox[{"Length", "[", 
         RowBox[{"Union", "@@", "du2"}], "]"}]}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1", ",", "al"}], "]"}], ",", 
         RowBox[{"bs", "[", 
          RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}]}], 
   " ", "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Hestenes inner product for base elements", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<=", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du2", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"LeftContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", 
        RowBox[{"RightContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".Expansions and conversions between different products"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple expansions"
}], "Subsubsection"],

Cell["Test and development functions (inactivated)", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"onlyPairsQ", "[", "h_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"{", "h", "}"}], ",", 
       RowBox[{
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{
          RowBox[{"arg", ":", 
           RowBox[{"(", 
            RowBox[{
            "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
             "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
          RowBox[{"___", "?", "OptionQ"}]}], "]"}], "/;", 
        RowBox[{
         RowBox[{"Length", "[", "arg", "]"}], ">", "2"}]}], ",", "Infinity"}],
       "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "True", ",", "False"}], "]"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.686903559471763*^9, 3.686903698078131*^9}, {
  3.68690376025672*^9, 3.686903761377652*^9}, {3.686903801684821*^9, 
  3.686903835719135*^9}, {3.68690411435683*^9, 3.686904164088629*^9}, {
  3.686904370293089*^9, 3.686904406371628*^9}, {3.686904447694869*^9, 
  3.686904451786405*^9}}],

Cell["\<\
Help functions. collectQ[ ] check if we need collect terms before expansion. \
If so, collectOnDemand[ ] do this. Collected parts are wrapped by head \
singleton[ ]\
\>", "Text"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"collectQ", "[", "expr_Plus", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "all", "}"}], ",", 
       RowBox[{
        RowBox[{"all", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], "]"}]}],
         ";", 
        RowBox[{"Catch", "[", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"all", "=!=", 
            RowBox[{"Union", "[", "all", "]"}]}], ",", 
           RowBox[{"Throw", "[", "True", "]"}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "if", " ", "base", " ", "vectors", " ", "do", " ", "not", " ", 
              "repeat"}], ",", " ", 
             RowBox[{"then", " ", "test", " ", "scalar", " ", "form"}]}], " ",
             "*)"}], " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AtomQ", "[", 
               RowBox[{
                RowBox[{"(", "expr", ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                  RowBox[{"_singleton", "\[Rule]", "1"}]}], "}"}]}], "]"}], 
              ",", 
              RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
            RowBox[{"(*", 
             RowBox[{"short", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"{", "#", "}"}], ",", 
                   RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#", "]"}], "<", "2"}], "&"}], 
                    ")"}]}]}], "]"}], "=!=", 
                 RowBox[{"{", "}"}]}], ",", 
                RowBox[{"Throw", "[", "True", "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "expr"}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                 RowBox[{"singleton", "\[Rule]", "1"}]}], "}"}]}], ")"}]}], 
            ";", 
            RowBox[{"(*", " ", 
             RowBox[{"long", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Throw", "[", "False", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"collectQ", "[", "expr_", "]"}], ":=", "False"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"collectOnDemand", "[", "expr_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"collectQ", "[", "expr", "]"}], ",", 
       RowBox[{"Collect", "[", 
        RowBox[{"expr", ",", "_bs", ",", "singleton"}], "]"}], ",", "expr"}], 
      "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.686904655697677*^9, 3.68690469902877*^9}, {
   3.686904729376056*^9, 3.686905031629788*^9}, {3.686905073314669*^9, 
   3.686905131010779*^9}, {3.686905167507332*^9, 3.686905414662559*^9}, {
   3.686905592962188*^9, 3.686905613032292*^9}, {3.686905660871289*^9, 
   3.686905661416652*^9}, {3.686905781035566*^9, 3.686905781858693*^9}, {
   3.686906073965711*^9, 3.686906075699754*^9}, {3.686906277630612*^9, 
   3.68690632804411*^9}, {3.686906365044078*^9, 3.686906429859419*^9}, {
   3.686906565981008*^9, 3.686906652012243*^9}, {3.686906697744952*^9, 
   3.686906784996648*^9}, {3.686906824776302*^9, 3.686906832635084*^9}, {
   3.686906871380173*^9, 3.686906937859768*^9}, {3.686907024473916*^9, 
   3.686907035537152*^9}, 3.686907143680325*^9, {3.686908624511643*^9, 
   3.686908625444342*^9}, 3.687079162946175*^9, {3.687154780745018*^9, 
   3.687154818105929*^9}, {3.68715593428476*^9, 3.687155935072975*^9}}],

Cell["\<\
Head singleton serves for holding expressions in order to save number of \
expansion operations. For example, assume, that you need to geometrically \
multiply a+b+e[1] by c+d+e[2]. If we would wrap scalars by single head, say, \
sigleton[a+b]+e[1] and singleton[c+d]+e[2], then number of expensive \
geometric multiplicationsare significanlly reduced. This is especially \
important when coefficients contains many terms.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"singleton", ",", "HoldAll"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Integer", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Real", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Complex", "]"}], "=", "n"}], ";"}]}], "Input",\

 CellChangeTimes->{{3.687079820860025*^9, 3.687079831940874*^9}, {
   3.687152816471321*^9, 3.687152841113296*^9}, {3.687153743805259*^9, 
   3.687153744614175*^9}, 3.687154898285705*^9}],

Cell["\<\
The actual expansion is performed by gaProductPairExpand[ ]. \
\>", "Text"],

Cell["\<\
After distribution over sum we perform collection of terms. Note, that when \
expanding pair we modify singleton behaviour with \
CoefficientFunction->pureFunction, depending on our needs. Two most useful \
choices are   CoefficientFunction->Identity, and  CoefficientFunction->Expand \
(the default). The CoefficientFunction->Identity choice do not perform any \
operation on collected coefficients. This is usefull when dealing with \
numerical coefficients (except if numeric coefficients are expressions like \
Sqrt[2]+1/Sqrt[3], ... etc. When working with symbolic coefficients   \
CoefficientFunction->Expand is safe choice. Other possibilitieslike \
CoefficientFunction->Simplify[Together[#]]& are possible, thougth most \
probably will considerably slowdown computation.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair",
       " ", "expansion", " ", "work"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
           "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
        "opts_List"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"sf", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"CoefficientFunction", "/.", "opts"}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaProductExpand", ",", "CoefficientFunction"}], "]"}]}],
            ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"singleton", "[", "expr_", "]"}], ":=", 
          RowBox[{
           RowBox[{"singleton", "@@", 
            RowBox[{"{", 
             RowBox[{"sf", "[", 
              RowBox[{"(", 
               RowBox[{"expr", "/.", 
                RowBox[{"{", 
                 RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], ")"}],
               "]"}], "}"}]}], "/;", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_singleton"}], "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"collectOnDemand", "[", 
          RowBox[{"Distribute", "[", "h", "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"help", " ", "functions"}], ",", " ", 
       RowBox[{"which", " ", "are", " ", "inavoidable"}], ",", " ", 
       RowBox[{
       "because", " ", "these", " ", "patterns", " ", "occur", " ", "in", " ",
         "evaluation", " ", "steps"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "these", " ", "rules", " ", "occur", " ", "less", " ", "often"}], ",", 
       " ", 
       RowBox[{
       "therefore", " ", "speed", " ", "is", " ", "enhanced", " ", "when", 
        " ", "they", " ", "put", " ", "in", " ", "the", " ", "end"}]}], 
      "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{"c_", ",", "opts_List"}], "]"}], ":=", 
      RowBox[{"c", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"c_", "*", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
            "|", "_LeftContract", "|", "_RightContract"}], ")"}]}]}], ",", 
        "op_List"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{"h", ",", "op"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
The main command is gaProductExpand[ ]. It do not expands anything. It only \
makes pairs of product for expansion and don\[CloseCurlyQuote]t touch pieces \
which should not be expanded. In the end it removes sigleton from the end \
rezult. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Except", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaProductExpand", ",", "Listable"}], "]"}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"exceptHeads", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Except", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaProductExpand", ",", "Except"}], "]"}]}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"Except", ",", "_"}], "]"}]}], "]"}]}], ",", "trueHeads", 
       ",", "trueHeadsHeads", ",", "trueHeadsBlanks"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"trueHeads", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
           "LeftContract", ",", "RightContract"}], "}"}], ",", 
         RowBox[{"Alternatives", "@@", "exceptHeads"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"trueHeadsHeads", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Length", "[", "trueHeads", "]"}], ",", "0", ",", 
         RowBox[{"{", "}"}], ",", "1", ",", 
         RowBox[{"trueHeads", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
         RowBox[{"Alternatives", "@@", "trueHeads"}]}], "]"}]}], ";", 
      RowBox[{"trueHeadsBlanks", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Length", "[", "trueHeadsHeads", "]"}], ",", "0", ",", 
         RowBox[{"{", "}"}], ",", "1", ",", 
         RowBox[{"Blank", "[", "trueHeadsHeads", "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
         RowBox[{"Blank", "/@", "trueHeadsHeads"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"We", " ", "list", " ", "with", " ", 
        RowBox[{"Cases", "[", " ", "]"}], " ", "all", " ", "patterns", " ", 
        "matched", " ", "and", " ", "then", " ", "do", " ", "step", " ", "by",
         " ", "step", " ", "all", " ", "replacements"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "For", " ", "products", " ", "with", " ", "multiple", " ", "terms"}], 
        ",", " ", 
        RowBox[{"which", " ", "require", " ", "expansion"}], ",", " ", 
        RowBox[{
        "split", " ", "into", " ", "product", " ", "of", " ", "pairs", " ", 
         "for", " ", "speed"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Fold", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ReplaceAll", "[", 
               RowBox[{"#1", ",", 
                RowBox[{"Take", "[", 
                 RowBox[{
                  RowBox[{"Union", "[", 
                   RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", "trueHeadsBlanks"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOpts"}], "]"}], ")"}]}], ")"}]}], 
                    ",", "Infinity"}], "]"}], "]"}], ",", 
                  RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
             RowBox[{"Hold", "[", "expression", "]"}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"Hold", "[", "expression", "]"}], ",", 
                  RowBox[{"p", ":", "trueHeadsBlanks"}], ",", "Infinity"}], 
                 "]"}], "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaProductPairExpand", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"h", ":", "trueHeadsHeads"}], ")"}], "[", 
               RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], ",", 
              "restOpts___"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"gaProductPairExpand", "[", 
             RowBox[{
              RowBox[{"h", "[", 
               RowBox[{
                RowBox[{"gaProductPairExpand", "[", 
                 RowBox[{
                  RowBox[{"h", "[", 
                   RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts"}], 
                 "]"}], ",", "arg2"}], "]"}], ",", "restOpts"}], "]"}]}], 
           "}"}]}], "}"}]}], "/.", 
       RowBox[{"{", 
        RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"FreeQ", "[", 
    RowBox[{
     RowBox[{"{", "expression", "}"}], ",", "_gaProductExpand"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaPE", "=", "gaProductExpand"}], ";"}]}], "Input"],

Cell["\<\
In some rare cases we have to apply both Expand and gaProductExpand \
repeatidly until expression gets expanded. For this rare cases we can apply \
gaExpand[], which do full expansion of all products \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "[", 
    RowBox[{"expression_Plus", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaExpand", "[", 
      RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expression"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"FixedPoint", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Expand", "[", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "]"}], "&"}], ",", "expression"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "expression", "]"}], "=!=", "Plus"}]}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple expansions (first, rule based approach, ",
 StyleBox["inactivated",
  FontColor->RGBColor[1, 0, 0]],
 ")"
}], "Subsubsection"],

Cell["\<\
Define special command for expansion. It is more flexible, because can expand \
only specific products. This can be achieved by setting option \
Except->{RightContract, LeftContract, InnerProduct, OuterProduct}. Expansion \
realization using replacement rules, though indeed flexible is the slowest \
possible realization. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Except", "\[Rule]", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"Expand", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "geometric", " ", "or", " ", "outer", " ", "product", " ", 
    "has", " ", "more", " ", "than", " ", "two", " ", "arguments", " ", "it", 
    " ", "is", " ", "faster", " ", "to", " ", "multiply", " ", "pairwise"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{
     RowBox[{"head", ":", 
      RowBox[{"(", 
       RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaProductExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "head", "]"}], "[", "##", "]"}], ",", "opts"}],
         "]"}], "&"}], ",", 
      RowBox[{"First", "[", "head", "]"}], ",", 
      RowBox[{"Rest", "[", "head", "]"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "head", "]"}], ">", "2"}]}]}], ";"}]}], "Input",
 Evaluatable->False],

Cell["\<\
For two arguments check and expand each of argument. This gives significant \
speedup in the case, for example, \
(a1\[GeometricProduct]...\[GeometricProduct]an+b)\[GeometricProduct](same \
expression). Without first expanding a1\[GeometricProduct]...\
\[GeometricProduct]an part expansion would become extremely slow (there are \
too many rules to apply).\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"arg1_", ",", "arg2_"}], "]"}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{
     RowBox[{"GeometricProduct", "[", 
      RowBox[{
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"arg1", ",", "opts"}], "]"}], ",", "arg2"}], "]"}], ",", 
     "opts"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", "arg1", "}"}], ",", "_GeometricProduct"}], 
     "]"}]}]}]}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"arg1_", ",", "arg2_"}], "]"}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"arg1", ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"arg2", ",", "opts"}], "]"}]}], "]"}], ",", "opts"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", "arg2", "}"}], ",", "_GeometricProduct"}], 
     "]"}]}]}]}]], "Input",
 Evaluatable->False],

Cell["\<\
When all above rules was applied switch at last to actual expansion. 
In the last stage we expand and collect terms before orthogonal base \
elements. This significanly improves performance when dealing with irrational \
coefficients. Expansion is also very important for speed, as well as \
grouping/ordering of both definitions. Change with extreme care, because \
change of any step can have enormous impact on expanion performance in \
different situations.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaProductExpand", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"theRules", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "Plus", " ", "Rules", " ", "for", " ", "GeometricProduct"}], 
             "*)"}], 
            RowBox[{
             RowBox[{
              RowBox[{"HoldPattern", "[", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], "]"}],
               "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"GeometricProduct", "[", 
                  RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                "ba"}], ")"}]}], ",", 
             RowBox[{"(*", 
              RowBox[{"Plus", " ", "Rules", " ", "for", " ", "OuterProduct"}],
               "*)"}], 
             RowBox[{
              RowBox[{"HoldPattern", "[", 
               RowBox[{"OuterProduct", "[", 
                RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], "]"}],
               "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"OuterProduct", "[", 
                  RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                "ba"}], ")"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"Plus", " ", "Rules", " ", "for", " ", "LeftContract"}],
               "*)"}], 
             RowBox[{
              RowBox[{"HoldPattern", "[", 
               RowBox[{"LeftContract", "[", 
                RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], "]"}],
               "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"LeftContract", "[", 
                  RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                "ba"}], ")"}]}], ",", 
             RowBox[{"(*", 
              RowBox[{
              "Plus", " ", "Rules", " ", "for", " ", "RightContract"}], 
              "*)"}], 
             RowBox[{
              RowBox[{"HoldPattern", "[", 
               RowBox[{"RightContract", "[", 
                RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], "]"}],
               "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"RightContract", "[", 
                  RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                "ba"}], ")"}]}], ",", 
             RowBox[{"(*", 
              RowBox[{"Plus", " ", "Rules", " ", "for", " ", "InnerProduct"}],
               "*)"}], 
             RowBox[{
              RowBox[{"HoldPattern", "[", 
               RowBox[{"InnerProduct", "[", 
                RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], "]"}],
               "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"InnerProduct", "[", 
                  RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                "ba"}], ")"}]}]}], "}"}], ",", 
           RowBox[{"_", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"{", "#", "}"}], ",", 
                 RowBox[{"Alternatives", "@@", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                    RowBox[{"Options", "[", 
                    RowBox[{"gaProductExpand", ",", "Except"}], "]"}]}], 
                   ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
          "]"}]}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Collect", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Expand", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaProductExpand", ",", "Expand"}], "]"}]}], ")"}], 
            ",", "False", ",", 
            RowBox[{
             RowBox[{"Identity", "[", "#", "]"}], "&"}], ",", "True", ",", 
            RowBox[{
             RowBox[{"Expand", "[", "#", "]"}], "&"}], ",", "_", ",", 
            RowBox[{
             RowBox[{"Identity", "[", "#", "]"}], "&"}]}], "]"}], "[", 
          RowBox[{"FixedPoint", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", "#", ")"}], "/.", "theRules"}], ")"}], "&"}], ",",
             "expr"}], "]"}], "]"}], ",", "_bs"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", "\n", "\[IndentingNewLine]", 
    RowBox[{"gaPE", "=", "gaProductExpand"}], ";"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 Evaluatable->False],

Cell["\<\
Experimental faster expansion using Outer. Speed gain is significant for \
large multivectors. At least when two arguments are used in Outer. However in \
some other cases this performes slower than rule mechanism (for example, many \
smaller arguments). It is worth to be examined further.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpandExperimental", "[", 
    RowBox[{"head", ":", 
     RowBox[{"(", 
      RowBox[{
      "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|", 
       "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Outer", "[", 
         RowBox[{
          RowBox[{"Head", "[", "head", "]"}], ",", "##"}], "]"}], "&"}], "@@",
        "head"}], ",", "_bs"}], "]"}], "/;", 
    RowBox[{"MatchQ", "[", 
     RowBox[{
      RowBox[{"List", "@@", "head"}], ",", 
      RowBox[{"{", 
       RowBox[{"_Plus", ",", "_Plus"}], "}"}]}], "]"}]}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 " It is also posible to calculate expansion of outer products using \
determinants, i.e. without expanding sum of orthogonal vectors. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple expansions (a faster, outer product and rule based approach, ",
 StyleBox["inactivated",
  FontColor->RGBColor[1, 0, 0]],
 ")"
}], "Subsubsection"],

Cell["\<\
Help functions, which helps isolate sums of scalars. This allow instead of \
many geometric multiplications do only one multiplication with the scalar \
singleton[...]. After multiplication singleton head is removed, thus leaving \
correct expression.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"singleton", "[", "a_", "]"}], "]"}], ":=", 
   RowBox[{"a", "/;", 
    RowBox[{
     RowBox[{"Length", "[", "a", "]"}], "\[LessEqual]", "1"}]}]}], 
  "*)"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"collectIfNotCollected", "[", "expr_", "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"all", ",", "theScalar"}], "}"}], ",", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"all", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
            "]"}]}], ",", 
          RowBox[{"Union", "[", "all", "]"}], ",", 
          RowBox[{
           RowBox[{"theScalar", "=", 
            RowBox[{"expr", "/.", 
             RowBox[{"_bs", "\[Rule]", "0"}]}]}], ";", 
           RowBox[{
            RowBox[{"singleton", "[", "theScalar", "]"}], "-", "theScalar", 
            "+", "expr"}]}], ",", "_", ",", 
          RowBox[{"Collect", "[", 
           RowBox[{"expr", ",", "_bs", ",", "singleton"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
Define special command for expansion. It is more flexible, because can expand \
only specific products. This can be achieved by setting option \
Except->{RightContract, LeftContract, InnerProduct, OuterProduct}. Expansion \
realization using replacement rules, though indeed flexible is the slowest \
possible realization. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Except", "\[Rule]", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"Expand", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "geometric", " ", "or", " ", "outer", " ", "product", " ", 
    "has", " ", "more", " ", "than", " ", "two", " ", "arguments", " ", "it", 
    " ", "is", " ", "faster", " ", "to", " ", "multiply", " ", "pairwise"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{
     RowBox[{"head", ":", 
      RowBox[{"(", 
       RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaProductExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "head", "]"}], "[", "##", "]"}], ",", "opts"}],
         "]"}], "&"}], ",", 
      RowBox[{"First", "[", "head", "]"}], ",", 
      RowBox[{"Rest", "[", "head", "]"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "head", "]"}], ">", "2"}]}]}], ";"}]}], "Input",
 Evaluatable->False],

Cell["\<\
For two arguments check and expand each of argument. This gives significant \
speedup in the case, for example, \
(a1\[GeometricProduct]...\[GeometricProduct]an+b)\[GeometricProduct](same \
expression). Without first expanding a1\[GeometricProduct]...\
\[GeometricProduct]an part expansion would become extremely slow (there are \
too many rules to apply).\
\>", "Text"],

Cell["Trivial cases should then be considered first", "Text",
 Evaluatable->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"c_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"c", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"bs", "|", "MV"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{
        RowBox[{"c_", "*", "expr_Plus"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"expr", ",", "opts"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"bs", "|", "MV"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"expr_Plus", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"expr", "/;", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"(", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract"}], ")"}], ",", 
       RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{"expr_Plus", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}]}], "Input",
 Evaluatable->False],

Cell["\<\
Then go deeper and expand arguments first before expanding entire expression\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"arg1_", ",", "arg2_"}], "]"}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{
     RowBox[{"GeometricProduct", "[", 
      RowBox[{
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"arg1", ",", "opts"}], "]"}], ",", "arg2"}], "]"}], ",", 
     "opts"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", "arg1", "}"}], ",", "_GeometricProduct"}], 
     "]"}]}]}]}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"arg1_", ",", "arg2_"}], "]"}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"arg1", ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"arg2", ",", "opts"}], "]"}]}], "]"}], ",", "opts"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"{", "arg2", "}"}], ",", "_GeometricProduct"}], 
     "]"}]}]}]}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "[", 
    RowBox[{"head", ":", 
     RowBox[{"(", 
      RowBox[{
      "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|", 
       "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Outer", "[", 
         RowBox[{
          RowBox[{"Head", "[", "head", "]"}], ",", "##"}], "]"}], "&"}], "@@",
        "head"}], ",", "_bs"}], "]"}], "/;", 
    RowBox[{"MatchQ", "[", 
     RowBox[{
      RowBox[{"List", "@@", "head"}], ",", 
      RowBox[{"{", 
       RowBox[{"_Plus", ",", "_Plus"}], "}"}]}], "]"}]}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
When all above rules was applied switch to actual expansion below. 
In the last stage we expand and collect terms before orthogonal base \
elements. This significanly improves performance when dealing with irrational \
coefficients. Expansion is also very important for speed, as well as \
grouping/ordering of both definitions. Change with extreme care, because \
change of any step can have enormous impact on expanion performance in \
different situations. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaProductExpand", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"head", ":", 
            RowBox[{"(", 
             RowBox[{
             "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", 
              "|", "LeftContract", "|", "RightContract"}], ")"}]}], ")"}], 
          "[", 
          RowBox[{"arg1_Plus", ",", "arg2_Plus"}], "]"}], ",", "opts___"}], 
        "]"}], ":=", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaProductExpand", ",", "Expand"}], "]"}]}], ")"}], ",", 
         "\[IndentingNewLine]", "True", ",", 
         RowBox[{"Collect", "[", 
          RowBox[{
           RowBox[{"Plus", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Outer", "[", 
                RowBox[{"head", ",", "##"}], "]"}], "&"}], "@@", 
              RowBox[{"(", 
               RowBox[{"collectIfNotCollected", "/@", 
                RowBox[{"{", 
                 RowBox[{"arg1", ",", "arg2"}], "}"}]}], ")"}]}], ")"}]}], 
           ",", "_bs", ",", 
           RowBox[{
            RowBox[{"Expand", "[", 
             RowBox[{"#", "/.", 
              RowBox[{"{", 
               RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}], 
            "&"}]}], "]"}], ",", "\[IndentingNewLine]", "_", ",", 
         RowBox[{"Collect", "[", 
          RowBox[{
           RowBox[{"Plus", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Outer", "[", 
                RowBox[{"head", ",", "##"}], "]"}], "&"}], "@@", 
              RowBox[{"(", 
               RowBox[{"collectIfNotCollected", "/@", 
                RowBox[{"{", 
                 RowBox[{"arg1", ",", "arg2"}], "}"}]}], ")"}]}], ")"}]}], 
           ",", "_bs", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "/.", 
              RowBox[{"{", 
               RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], ")"}], 
            "&"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "the", " ", "code", " ", "below", " ", "theoretically", " ", "will", 
         " ", "only", " ", "be", " ", "used", " ", "in", " ", "very", " ", 
         "limited", " ", "cases"}], ",", " ", 
        RowBox[{"we", " ", "warn", " ", "about", " ", "it"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"theRules", "=", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "Plus", " ", "Rules", " ", "for", " ", "GeometricProduct"}], 
                "*)"}], 
               RowBox[{
                RowBox[{
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                  "]"}], "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                   "ba"}], ")"}]}], ",", 
                RowBox[{"(*", 
                 RowBox[{
                 "Plus", " ", "Rules", " ", "for", " ", "OuterProduct"}], 
                 "*)"}], 
                RowBox[{
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"OuterProduct", "[", 
                   RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                  "]"}], "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"OuterProduct", "[", 
                    RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                   "ba"}], ")"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "Plus", " ", "Rules", " ", "for", " ", "LeftContract"}], 
                 "*)"}], 
                RowBox[{
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"LeftContract", "[", 
                   RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                  "]"}], "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"LeftContract", "[", 
                    RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                   "ba"}], ")"}]}], ",", 
                RowBox[{"(*", 
                 RowBox[{
                 "Plus", " ", "Rules", " ", "for", " ", "RightContract"}], 
                 "*)"}], 
                RowBox[{
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"RightContract", "[", 
                   RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                  "]"}], "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"RightContract", "[", 
                    RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                   "ba"}], ")"}]}], ",", 
                RowBox[{"(*", 
                 RowBox[{
                 "Plus", " ", "Rules", " ", "for", " ", "InnerProduct"}], 
                 "*)"}], 
                RowBox[{
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"InnerProduct", "[", 
                   RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                  "]"}], "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"InnerProduct", "[", 
                    RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                   "ba"}], ")"}]}]}], "}"}], ",", 
              RowBox[{"_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"!", 
                  RowBox[{"FreeQ", "[", 
                   RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                    RowBox[{"Options", "[", 
                    RowBox[{"gaProductExpand", ",", "Except"}], "]"}]}], 
                    ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
             "]"}]}], ",", 
           RowBox[{"preRules", "=", 
            RowBox[{"{", 
             RowBox[{"he_Plus", ":>", 
              RowBox[{
               RowBox[{"collectIfNotCollected", "[", "he", "]"}], "/;", 
               RowBox[{
                RowBox[{"FreeQ", "[", 
                 RowBox[{"he", ",", 
                  RowBox[{"(", 
                   RowBox[{
                   "_GeometricProduct", "|", "_OuterProduct", "|", 
                    "_InnerProduct", "|", "_LeftContract", "|", 
                    "_RightContract"}], ")"}]}], "]"}], "&&", 
                RowBox[{"Not", "[", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"he", ",", 
                   RowBox[{"bs", "|", "MV"}], ",", 
                   RowBox[{"Heads", "->", "True"}]}], "]"}], "]"}]}]}]}], 
             "}"}]}], ",", 
           RowBox[{"expandQ", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Expand", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaProductExpand", ",", "Expand"}], "]"}]}], ")"}]}]}],
           "\[IndentingNewLine]", "}"}], ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"slowImplementation", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"$gaGlobalProperties", "::", "SlowImplementationPart"}],
               ",", 
              RowBox[{"Hold", "[", 
               RowBox[{"gaProductExpand", "[", "expr", "]"}], "]"}]}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"expandQ", ",", "\[IndentingNewLine]", "True", ",", 
            RowBox[{"Collect", "[", 
             RowBox[{
              RowBox[{"FixedPoint", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"#", "/.", "theRules"}], ")"}], "&"}], ",", 
                RowBox[{"(", 
                 RowBox[{"expr", "/.", "preRules"}], ")"}]}], "]"}], ",", 
              "_bs", ",", 
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{"#", "/.", 
                 RowBox[{"{", 
                  RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                "]"}], "&"}]}], "]"}], ",", "\[IndentingNewLine]", "_", ",", 
            RowBox[{"Collect", "[", 
             RowBox[{
              RowBox[{"FixedPoint", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"#", "/.", "theRules"}], ")"}], "&"}], ",", 
                RowBox[{"(", 
                 RowBox[{"expr", "/.", "preRules"}], ")"}]}], "]"}], ",", 
              "_bs", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "/.", 
                 RowBox[{"{", 
                  RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                ")"}], "&"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";"}]}], "\n", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaPE", "=", "gaProductExpand"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 Evaluatable->False],

Cell[TextData[{
 " It is also posible to calculate expansion of outer products using \
determinants, i.e. without expanding sum of orthogonal vectors. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple powers"
}], "Subsubsection"],

Cell[TextData[{
 "Powers of geometric product. Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaGPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", "expr", ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaGPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaGPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaGeometricMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaGPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Powers of outer product, Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". It is posible to calculate expansion of outer products of vectors (ONLY) \
using determinants, i.e. without expanding sum of orthogonal vectors. So, \
this is applied to powers as well. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaOPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"OuterProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", 
       RowBox[{"gaProductExpand", "[", "expr", "]"}], ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"OuterProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaOPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"OuterProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaOPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaOuterMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaOuterMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaOPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaOuterMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Involutions, idempotents, norms and mathematical functions of multivectors"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaLinearQ", ",", "gaSetLinear", ",", "gaHomogeneusGradeQ", ",", "gaNorm",
      ",", "gaMagnitude", ",", "gaSignedMagnitudeSquare", ",", "gaNormalize", 
     ",", "gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate", ",",
      "gaGeneralGradeInvolution", ",", "gaEliminateGradeByInvolution", ",", 
     "SignChangeGrades", ",", "Evaluation", ",", "OutputType", ",", 
     "InvolutionPosition", ",", "gaRadonHurwitzNumber", ",", 
     "gaPrimitiveIdempotent", ",", "StartingElement", ",", 
     "gaGeometricProductSeries", ",", "gaGeometricExp", ",", "gaExp", ",", 
     "gaGeometricSin", ",", "gaSin", ",", "gaGeometricSinh", ",", "gaSinh", 
     ",", "gaGeometricCos", ",", "gaCos", ",", "gaGeometricCosh", ",", 
     "gaCosh", ",", "gaGeometricTan", ",", "gaTan", ",", "gaGeometricTanh", 
     ",", "gaTanh", ",", "gaCommutator", ",", "gaAntiCommutator", ",", 
     "gaCommutatorExpand", ",", "gaCE", ",", "gaZassenhausCoefficient", ",", 
     " ", "gaZassenhausSeries", ",", "gaZassenhausSeriesData", ",", 
     "gaSeries", ",", "gaSeriesData", ",", "gaParameterSeries", ",", 
     "gaBakerCampbellHausdorffSeries", ",", "gaBCHSeries", ",", 
     "gaBakerCampbellHausdorffTermLogarithm", ",", 
     "gaBakerCampbellHausdorffSeriesData"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["\<\
Unary operations on multivectors are gaReverse, gaMagnitude, gaInverse, \
gaGradeInverse, gaCliffordConjugate\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearQ", "::", "usage"}], "=", 
   "\"\<gaLinearQ[a] returns True if function is linear in multivector \
space\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetLinear", "::", "usage"}], "=", 
   "\"\<gaSetLinear[a,b,...] sets functions a,b,...  to be linear functions \
of multivectors.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "::", "usage"}], "=", 
   "\"\<gaHomogeneusGradeQ[expr] returns True if multivector has homogeneus \
grade.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm", "::", "usage"}], "=", 
   "\"\<gaNorm[mv] or  gaNorm[mv,n_Integer] computes multivector norm. It is \
not the same as gaSignedMagnitudeSquare[]!\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSignedMagnitudeSquare", "::", "usage"}], "=", 
   "\"\<gaSignedMagnitudeSquare[mv] computes multivector magnitude as \
absolute value of scalar part of multivector multiplied by reversed \
multivector. Magnitude is NOT the same as gaNorm.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "usage"}], "=", 
   "\"\<gaNormalize[mv] or  gaNormalize[mv,n_Integer] returns normalized \
(unit) multivector of mv.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "::", "usage"}], "=", 
   "\"\<gaReverse[A_r], where A_r is single multivector (or geometric product \
of multivectors) realize reverse operation A_r -> (-1)^(r (r-1))/2 A_r (for \
homogeneus multivector of rank r) of geometric algebra (main \
antiauthomorphism, see [KG-HFinP&Sp], p.56). Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "usage"}], "=", 
   "\"\<gaMagnitude[f_multivector] gives magnitude of multivector. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "::", "usage"}], "=", 
   "\"\<gaGradeInverse[m] calculates the conjugate of a multivector \
m_r->(-1)^r m_r, see [DH-STA, formula 4.12]. Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaCliffordConjugate[m] is defined as a combination of gaReverse and \
gaGradeInverse operations, see [DH-STA, formula 6.10]. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeneralGradeInvolution", "::", "usage"}], "=", 
   "\"\<gaGeneralGradeInvolution[m,grade_List] is a general involution, which \
only changes signs of grades listed in grade. If grade list is empty list, \
initial multivector is returned.\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGradeByInvolution", "::", "usage"}], "=", 
   "\"\<gaEliminateGradeByInvolution[multivector_,eliminateGrade_List,opts___?\
OptionQ] is a command, which multiplies the given general multivector by the \
same multivector acted by involution from the right in attempt to remove from \
the product grades listed in eliminateGrade list. Empty output means that \
given grades cannot be eliminated by mentioned procedure.\>\""}], ";", 
  RowBox[{
   RowBox[{"OutputType", "::", "usage"}], "=", 
   "\"\<OutputType is an option for gaEliminateGradeByInvolution[], which \
change output presentation. Possible values are SignChangeGrades and \
Evaluation \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InvolutionPosition", "::", "usage"}], "=", 
  "\"\<InvolutionPosition is an option for gaEliminateGradeByInvolution[], \
which decides from which side invuluted multivector is multiplied. Possible \
values are Right (default) and Left.\>\""}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "::", "usage"}], "=", 
   "\"\<gaRadonHurwitzNumber[s_Integer] gives Radon-Hurwitz number, which is \
sequence A034584 in the On-Line Encyclopedia of Integer Sequences (OEIS). The \
number of primitive idempotents of algebra Cl[p,q,0] is equal to \
q-gaRadonHurwitzNumber[q-p].\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "usage"}], "=", 
   "\"\<gaPrimitiveIdempotent[algebra_Cl, opts___] returs a list of factors \
of the algebra of primitive idempotent. Representative factors of primitive \
idempotent are selected using options StartingElement->Integer (or list of \
integers) and gaNonCommutativeMonomialOrder\[Rule] (monomial ordering). \
Possible monomial orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \
\\\"InvRevLex\\\". These pure orderings can be proceeded with \\\"Deg[]\\\", \
and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 possible orderings. Use \
option OutputForm\[Rule]\\\"Blades\\\" to return set of blades instead of \
factors of primitive idempotent.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StartingElement", "::", "usage"}], "=", 
   "\"\<StartingElement-> Integer or StartingElement-> {Integers}. \
StartingElement is an option for gaPrimitiveIdempotent[], which determines a \
number of blade in a list. The blade is selected as a next candidate for \
primitive idempotent factor.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricProductSeries", "::", "usage"}], "=", 
    "\"\<gaGeometricProductSeries[f_functionHead,{m_multivector,{p_,n_Integer?\
Positive:10}}] calculates the series of the function f, of a multivector m at \
point p up to a power n. Option Expand->True can be used to expand series in \
time of generation. This is much faster than later expanding held \
series.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricProductSeries[ ]. Option Expand->True can be \
used to expand series in time of generation. This is much faster than later \
expanding held series.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricExp", "::", "usage"}], "=", 
   "\"\<gaGeometricExp[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaExp[m,n] calculates the series of the function Exp, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExp", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricExp[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSin", "::", "usage"}], "=", 
   "\"\<gaGeometricSin[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaSin[m,n] calculates the series of the function\nSin, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSin", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSin[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSinh", "::", "usage"}], "=", 
   "\"\<gaGeometricSinh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaSinh[m,n] calculates the series of the function\nSinh, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSinh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSinh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCos", "::", "usage"}], "=", 
   "\"\<gaGeometricCos[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaCos[m,n] calculates the series of the function\nCos, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCos", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCos[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCosh", "::", "usage"}], "=", 
   "\"\<gaGeometricCosh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaCosh[m,n] calculates the series of the function\nCosh, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCosh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCosh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTan", "::", "usage"}], "=", 
   "\"\<gaGeometricTan[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaTan[m,n] calculates the series of the function\ngaTan, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTan", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTan[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTanh", "::", "usage"}], "=", 
   "\"\<gaGeometricTanh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaTanh[m,n] calculates the series of the function\nTan, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTanh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTanh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutator", "::", "usage"}], "=", 
   "\"\<gaCommutator[a,b] defines notation fo quantity ab-ba\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAntiCommutator", "::", "usage"}], "=", 
   "\"\<gaAnticommutator[a,b] defines notation for quantity ab+ba\>\""}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutatorExpand", "::", "usage"}], "=", 
   "\"\<gaCommutatorExpand[a,b] (alias gaCE[ ]) expands to quantity ab-ba, \
Option Except->{gaAntiCommutator} prevents expansion of \
gaAntiCommutator.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "::", "usage"}], "=", "\"\<Short alias for gaCE[ ].\>\""}],
   ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "::", "usage"}], "=", 
   "\"\<gaZassenhausCoefficient[a_,b_][p_Integer] or \
gaZassenhausCoefficient[p_Integer] gives coefficients of Zassenhaus series.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeries", "::", "usage"}], "=", 
   "\"\<gaZassenhausSeries[Exp[aa_+bb_],n_Integer?(#\[GreaterEqual]2&),opts___\
] gives expansion of Zassenhaus series to n-th order. The result is presented \
as gaBakerCampbellHausdorffSeriesData, where each term represents homogenic \
polynomial. Option Format values \\\"Right\\\" or \\\"Left\\\" gives \
left-oriented, i.e.  exp[x+y]=...exp[c3[x,y]]exp[c2[x,y]]exp[y]exp[x] or \
right-oriented, i.e. exp[x+y]=exp[x]exp[y]exp[c2[x,y]]exp[c3[x,y]]... series \
form. Commutator in output of gaZassenhausSeriesData is defined as AB-BA, \
i.e. without overal factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaZassenhausSeries[ ] result. \
gaSeriesData[gaZassenhausSeriesData[ ]] converts the result to gaSeriesData[ \
]. Commutator in output is defined as AB-BA, i.e. without overal \
factor.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "::", "usage"}], "=", 
   "\"\<Represents transformation data of same infinitezimal size.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "::", "usage"}], "=", 
   "\"\<gaParameterSeries[a_gaSeriesData, var] Converts gaSeriesData like \
Normal, but adds infinitizimality parameter var.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffTermLogarithm[{exprs__String},n_Integer], \
gives n-th homogenic term of BCH series. Is used by \
gaBakerCampbellHausdorffSeries[ ] command.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries[GeometricProduct[expr__Exp],n_Integer?(\
#\[GreaterEqual]2&),opts___ ] gives expansion of BCH series to n-th order. \
The result is presented as gaBakerCampbellHausdorffSeriesData, where each \
term represents homogenic polynomial. Option Format values \
\\\"Commutators\\\" (not implemented yet), \\\"Expand\\\" or \\\"None\\\" \
rewrites the polynomials in required form.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBCHSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaBakerCampbellHausdorffSeries.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaBakerCampbellHausdorffSeries[ ] result. \
gaSeriesData[gaBakerCampbellHausdorffSeriesData[ ]] converts the result to \
gaSeriesData[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Unary operators"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell[TextData[{
 StyleBox["gaSetLinear[ ]",
  FontWeight->"Bold"],
 " implements linearity property for multivectors"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaLinearQ", "[", "___", "]"}], "=", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"y_", "+", "w_"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"y", ",", "op"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{
                RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
             
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", 
            RowBox[{"expr", "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}], 
         "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaHomogeneusGradeQ[ ] ",
  FontWeight->"Bold"],
 "checks if expression has homogeneus grade. The ",
 StyleBox["c_.*bs[__]",
  FontWeight->"Bold"],
 " pattern only makes sense for functions, which are not mvLinear. This is ",
 StyleBox["gaHomogeneusGradeQ[ ],  gaNorm[ ],  gaMagnitude[ ],  gaInverse[ ]",
  
  FontWeight->"Bold"],
 ",... For gaLinear functions this pattern is optional."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHomogeneusGradeQ", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"bs", "[", "__", "]"}]}], "]"}], "=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "s_Symbol", "]"}], "=", "True"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaHomogeneusGradeQ", "[", 
     RowBox[{"c_", "?", "NumericQ"}], "]"}], "=", "True"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "fast", " ", "decision", " ", "is", " ", "impossible", " ", 
    "call", " ", 
    RowBox[{"gaGetGrade", "[", " ", "]"}]}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "f_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{
     RowBox[{"gaGetGrade", "[", "f", "]"}], ",", 
     RowBox[{"{", "_Integer", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector norm and magnitude"
}], "Subsubsection"],

Cell[TextData[{
 "Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". This functions calculate norm only if all multivectors are expanded in \
orthogonal base. ",
 StyleBox["Warning",
  FontColor->RGBColor[1, 0.5, 0.5]],
 " have we blocked Abs function when calculating ",
 StyleBox["Norm[ ]",
  FontWeight->"Bold"],
 ". If algebra is not real, then this do yield wrong ",
 "res",
 "ult!!!."
}], "Text"],

Cell["\<\
The norm and magnitude are not the same characteristic for general Clifford \
algebras. In particularly, magnitude squared can be negative.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNorm", "[", 
       RowBox[{"u_", ",", 
        RowBox[{"n", ":", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_Integer", "?", "Positive"}], "|", "Infinity"}], 
          ")"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"Coefficient", "[", 
              RowBox[{"uexp", ",", 
               RowBox[{"Cases", "[", 
                RowBox[{"uexp", ",", "_bs", ",", "Infinity"}], "]"}]}], "]"}],
              ",", 
             RowBox[{"uexp", "/.", 
              RowBox[{"_bs", "->", "0"}]}]}], "]"}], ",", "n"}], "]"}]}], 
        "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", "\n", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNorm", "[", "u_", "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"Coefficient", "[", 
             RowBox[{"uexp", ",", 
              RowBox[{"Cases", "[", 
               RowBox[{"uexp", ",", "_bs", ",", "Infinity"}], "]"}]}], "]"}], 
            ",", 
            RowBox[{"uexp", "/.", 
             RowBox[{"_bs", "->", "0"}]}]}], "]"}], "]"}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["The always working, thought nonoptimal solution.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSignedMagnitudeSquare", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSignedMagnitudeSquare", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr", ",", "opts"}], "]"}], ",", "expr"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by reversed multivector.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and reversed multivector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaMagnitude", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaMagnitude", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaSignedMagnitudeSquare", "[", 
            RowBox[{"expr", ",", "opts"}], "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"-", "nsq"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", ",",
             "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaMagnitude", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaMagnitude", "::", "nonscalar"}], "]"}]}], "]"}], ";",
            "\[IndentingNewLine]", " ", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"Abs", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"nsq", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["\<\
gaNormalize normalizes multivector if magnitude  squared is numeric and not \
equal 0. For 0 warn and normalize using gaNorm. This, for example apply to \
null vectors.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "zeroMagnitude"}], "=", 
   "\"\<Warning. Multivector `1` has zero magnidude. gaNorm[ ] will be used \
for normalization.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaNormalize", "]"}], "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormalize", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaSignedMagnitudeSquare", "[", 
            RowBox[{"expr", ",", "opts"}], "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"expr", "/", 
             RowBox[{"Sqrt", "[", "nsq", "]"}]}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"expr", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"-", "nsq"}], "]"}]}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormalize", "::", "zeroMagnitude"}], ",", "expr"}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"expr", "/", 
              RowBox[{"gaNorm", "[", "expr", "]"}]}]}], ",", "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaMagnitude", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaMagnitude", "::", "nonscalar"}], "]"}]}], "]"}], ";", 
           RowBox[{"expr", "/", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"Abs", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Involutions and their notation"
}], "Subsubsection"],

Cell["\<\
 Syntax and notations.  Make expressions from boxes and vice versa.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"name_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"TemplateBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"TagBox", "[", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "name", "]"}], ",", 
         RowBox[{"#", "&"}], ",", 
         RowBox[{"Editable", "->", "True"}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"{", "opts", "}"}], "]"}], ">", "0"}], ",", 
         RowBox[{"MakeBoxes", "[", "opts", "]"}], ",", "\"\<Sequence[]\>\""}],
         "]"}]}], "}"}], ",", "\"\<gaReverse\>\"", ",", 
     RowBox[{"DisplayFunction", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SuperscriptBox", "[", 
         RowBox[{
          RowBox[{"RowBox", "[", 
           RowBox[{"{", "#1", "}"}], "]"}], ",", "\"\<\[Dagger]\>\""}], "]"}],
         "&"}], ")"}]}], ",", 
     RowBox[{"SyntaxForm", "\[Rule]", "SubscriptBox"}], ",", 
     RowBox[{"Tooltip", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Definitions. Reverse of multivector is a multivector itself with additional \
phase. According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56 it is named as involution R. (antiauthomorphism, i.e. changes order \
of multipliers)"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaReverse", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetLinear", "[", "gaReverse", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"bv_bs", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"grade", "=", 
          RowBox[{"First", "[", 
           RowBox[{"gaGetGrade", "[", "bv", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"grade", "*", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grade", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], "*", 
         "bv"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell["\<\
All involutions commute. If any one of them holds evaluating individual \
multivectors and other is not, then interchange evaluation order.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGradeInverse", "[", 
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaCliffordConjugate", "[", 
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], 
       ")"}]}]}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Reverse of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " rewrites expression from different side and then reverses  each term. \
Currently no rules for  ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ".\nNote on implementation. We should be carefull when operating on ",
 StyleBox["expr_GeometricProduct",
  FontWeight->"Bold"],
 ". For example, if in ",
 StyleBox["Reverse",
  FontWeight->"Bold"],
 " function we would first reverse expr, and then map gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", we would enter into infinite loop when applied to bivector. The reason is \
that after reversion we get ",
 StyleBox["Times[-1, GeometricProduct[expr]] ",
  FontWeight->"Bold"],
 "and the mapping would again map ",
 "gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " itself. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Representation of gaGradeInverse closely follows notation of gaReverse. \
Thought ",
 StyleBox["\\ [Star]",
  FontWeight->"Bold"],
 " (unlike ",
 StyleBox["Dagger",
  FontWeight->"Bold"],
 ") is not properly handled inside ",
 StyleBox["MakeExpression[ ]",
  FontWeight->"Bold"],
 ", it works fine using ",
 StyleBox["TemplateBox[ ]",
  FontWeight->"Bold"],
 " . In principle ",
 StyleBox["\\ [Star]",
  FontWeight->"Bold"],
 " can be replaced by \:2217 , the unicode \\ :2217 char. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"name_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"TemplateBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"TagBox", "[", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "name", "]"}], ",", 
         RowBox[{"#", "&"}], ",", 
         RowBox[{"Editable", "->", "True"}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"{", "opts", "}"}], "]"}], ">", "0"}], ",", 
         RowBox[{"MakeBoxes", "[", "opts", "]"}], ",", "\"\<Sequence[]\>\""}],
         "]"}]}], "}"}], ",", "\"\<gaGradeInverse\>\"", ",", 
     RowBox[{"DisplayFunction", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SuperscriptBox", "[", 
         RowBox[{
          RowBox[{"RowBox", "[", 
           RowBox[{"{", "#1", "}"}], "]"}], ",", 
          "\"\<\[NegativeThickSpace]\[NegativeThickSpace]\[NegativeThickSpace]\
\[Star]\>\""}], "]"}], "&"}], ")"}]}], ",", 
     RowBox[{"SyntaxForm", "\[Rule]", "SubscriptBox"}], ",", 
     RowBox[{"Tooltip", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Definition of  gaGradeInverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaGradeInverse",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "is involution M (main involution).  See also ",
 ButtonBox["[DH-STA4 .12 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 17. This operation change sign of all odd grade multivectors. It does \
not change order of terms (proper automorphism, i.e. order of multipliers \
remain the same)."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGradeInverse", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetLinear", "[", "gaGradeInverse", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"bv_bs", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"grade", "=", 
          RowBox[{"First", "[", 
           RowBox[{"gaGetGrade", "[", "bv", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", "grade", ")"}]}], "*", "bv"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input"],

Cell["\<\
All involutions commute. If any one of them holds  evaluation of individual \
multivectors and other is not, then interchange evaluation order.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaReverse", "[", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaCliffordConjugate", "[", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], 
       ")"}]}]}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "\nDefinitions of gaCliffordConjugate (see  ",
 ButtonBox["[DH-STA6 .10 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 21).  According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaCliffordConjugate",
 StyleBox[" [ ]",
  FontWeight->"Bold"],
 " is involution (antiauthomorphism, i.e. changes order of multipliers) C \
(Clifford conjugation ). Thought gaCliffordConjugate can be expressed using \
gaCliffordConjugate and ",
 StyleBox["gaReverse",
  FontWeight->"Bold"],
 " as ",
 "gaCliffordConjugate",
 StyleBox["[v_,opts___?OptionQ]:=",
  FontWeight->"Bold"],
 "gaGradeInverse",
 StyleBox["[gaReverse[v,opts],opts]",
  FontWeight->"Bold"],
 ", we preffer direct calculation"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCliffordConjugate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetLinear", "[", "gaCliffordConjugate", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"bv_bs", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"grade", "=", 
          RowBox[{"First", "[", 
           RowBox[{"gaGetGrade", "[", "bv", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"grade", "*", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grade", "+", "1"}], ")"}], "/", "2"}]}], ")"}]}], "*", 
         "bv"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "See implemetation note for ",
 "gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
All involutions commute. If any one of them  holds evaluation of individual \
multivectors and other is not, then interchange evaluation order.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaReverse", "[", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGradeInverse", "[", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell["\<\
 General grade involution, which changes signs of specified grades only. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGeneralGradeInvolution", "[", 
   RowBox[{"expr_", ",", "grade_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"exprExpanded", "=", 
       RowBox[{"gaPE", "[", "expr", "]"}]}], ",", "allGrades", ",", 
      "restGrades"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allGrades", "=", 
      RowBox[{"gaGetGrade", "[", "exprExpanded", "]"}]}], ";", 
     RowBox[{"restGrades", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"allGrades", ",", "grade"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"restGrades", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"-", "1"}], "*", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"exprExpanded", ",", "grade"}], "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", "allGrades", ",", "exprExpanded", ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{"gaPE", "[", 
         RowBox[{
          RowBox[{"-", "1"}], "*", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{"exprExpanded", ",", "grade"}], "]"}]}], "]"}], "+", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"exprExpanded", ",", "restGrades"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input"],

Cell["For internal usage we want version without gaPE ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaGeneralGradeInvolutionForExpanded", "[", 
   RowBox[{"expr_", ",", "grade_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"exprExpanded", "=", "expr"}], ",", "allGrades", ",", 
      "restGrades"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allGrades", "=", 
      RowBox[{"gaGetGrade", "[", "exprExpanded", "]"}]}], ";", 
     RowBox[{"restGrades", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"allGrades", ",", "grade"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"restGrades", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"-", "1"}], "*", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"exprExpanded", ",", "grade"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "allGrades", ",", "exprExpanded", ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "*", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"exprExpanded", ",", "grade"}], "]"}]}], "+", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"exprExpanded", ",", "restGrades"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input"],

Cell["\<\
gaEliminateGradeByInvolution takes multivector and by multiplying on the same \
multivector on the right, acted by gaGeneralGradeInvolution tries to remove \
listed grades in the product. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGradeByInvolution", "::", "zero"}], "=", 
   "\"\<Zero grade in elimination list not allowed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGradeByInvolution", "::", "nothingToDo"}], "=", 
   "\"\<Multivector doesn't have grades listed in elimination list.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaEliminateGradeByInvolution", "::", "involutionPosition"}], 
    "=", "\"\<Involution position can be Right (default) or Left only. \
Default is used\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Output", "\[Rule]", 
    RowBox[{
     RowBox[{"SignChangeGrades", " ", "or", " ", "Output"}], "\[Rule]", 
     "Evaluation"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaEliminateGradeByInvolution", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"OutputType", "\[Rule]", "Evaluation"}], ",", " ", 
     RowBox[{"InvolutionPosition", "\[Rule]", "Right"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaEliminateGradeByInvolution", "[", 
     RowBox[{"expr_", ",", "eliminateGrade_List", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "p", ",", "s", ",", "prototype", ",", "relGrades", ",", 
        "checkValueRules", ",", "productWithPrototype", ",", 
        "theEquationsToCheck", ",", "trowCondition", ",", "baseElems", ",", 
        "subsRules", ",", "possibleSolutions", ",", "gradesForOutput", ",", 
        RowBox[{"grades", "=", 
         RowBox[{"gaGetGrade", "[", "expr", "]"}]}], ",", 
        RowBox[{"outputType", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"OutputType", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaEliminateGradeByInvolution", ",", "OutputType"}], 
            "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"invPos", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"InvolutionPosition", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{
            "gaEliminateGradeByInvolution", ",", "InvolutionPosition"}], 
            "]"}]}], ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"exceptional", " ", "cases"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"eliminateGrade", ",", "0"}], "]"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"gaEliminateGradeByInvolution", "::", "zero"}], "]"}], ";", 
         
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"DeleteCases", "[", 
              RowBox[{"grades", ",", "0"}], "]"}], ",", "eliminateGrade"}], 
            "]"}], "===", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"gaEliminateGradeByInvolution", "::", "nothingToDo"}], 
            "]"}], ";", "expr"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"prototype", "=", 
            RowBox[{"Expand", "[", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaGetMV", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"p", "[", "#", "]"}]}], "}"}]}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"p", "[", "0", "]"}], "\[Rule]", "1"}]}], ")"}], 
                 "&"}], "/@", "grades"}], ")"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"invPos", ",", "Right", ",", 
             RowBox[{"productWithPrototype", "=", 
              RowBox[{"gaPE", "[", 
               RowBox[{"expr", "\[GeometricProduct]", "prototype"}], "]"}]}], 
             ",", "\[IndentingNewLine]", "Left", ",", 
             RowBox[{"productWithPrototype", "=", 
              RowBox[{"gaPE", "[", 
               RowBox[{"prototype", "\[GeometricProduct]", "expr"}], "]"}]}], 
             ",", "\[IndentingNewLine]", "_", ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
               "gaEliminateGradeByInvolution", "::", "involutionPosition"}], 
               "]"}], ";", 
              RowBox[{"productWithPrototype", "=", 
               RowBox[{"gaPE", "[", 
                RowBox[{"expr", "\[GeometricProduct]", "prototype"}], 
                "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"baseElems", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{"productWithPrototype", ",", "_bs", ",", "Infinity"}], 
              "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"subsRules", "=", 
            RowBox[{"Thread", "[", 
             RowBox[{"Rule", "[", 
              RowBox[{"baseElems", ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Unique", "[", "s", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"Length", "[", "baseElems", "]"}], "}"}]}], "]"}]}],
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"relGrades", "=", 
            RowBox[{"Rest", "[", "grades", "]"}]}], ";", 
           RowBox[{"checkValueRules", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Thread", "[", 
                RowBox[{"Rule", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"p", "/@", "relGrades"}], ")"}], ",", "#"}], "]"}],
                 "]"}], "&"}], ",", 
              RowBox[{"Tuples", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"-", "1"}]}], "}"}], ",", 
                RowBox[{"Length", "[", "relGrades", "]"}]}], "]"}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"theEquationsToCheck", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetMV", "[", 
                 RowBox[{"productWithPrototype", ",", 
                  RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
               "eliminateGrade"}], ")"}], "/.", "subsRules"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"trowCondition", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"{", 
               RowBox[{"Length", "[", "theEquationsToCheck", "]"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"possibleSolutions", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Last", "[", 
               RowBox[{"Reap", "[", 
                RowBox[{"Scan", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"theEquationsToCheck", "/.", "#"}], ")"}], "]"}], 
                    "===", "trowCondition"}], ",", 
                    RowBox[{"Sow", "[", "#", "]"}]}], "]"}], "&"}], ",", 
                  "checkValueRules"}], "]"}], "]"}], "]"}], ",", "1"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"gradesForOutput", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"First", "/@", 
                  RowBox[{"Cases", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "]"}]}], "&"}], "/@",
                 "possibleSolutions"}], ")"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"p", "->", "Identity"}], "}"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"outputType", "===", "SignChangeGrades"}], ",", 
             "gradesForOutput", ",", "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"invPos", ",", "Right", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"expr", "\[GeometricProduct]", 
                   RowBox[{"gaGeneralGradeInvolution", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                "gradesForOutput"}], ",", "\[IndentingNewLine]", "Left", ",", 
               
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaGeneralGradeInvolution", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}], "\[GeometricProduct]", 
                   "expr"}], ")"}], "&"}], "/@", "gradesForOutput"}], ",", 
               "\[IndentingNewLine]", "_", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"expr", "\[GeometricProduct]", 
                   RowBox[{"gaGeneralGradeInvolution", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                "gradesForOutput"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Idempotents and ideals"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell[TextData[{
 "Sequence A034584  in OEIS:  Radon-Hurwitz numbers: log_2 of dimension of an \
irreducible R-module for Clifford algebra Cl_n.  Generating function: x*(1+ x \
+ x^3 + x^7)/((1 - x)*(1 - x^8)), i.\[DoubleStruckE]. \
CoefficientList[Normal[Series[x*(1+x+x^3+x^7)/((1-x)*(1-x^8)),{x,0,100}]],x]\n\
This matches sequence [PL-GPW] Perti Lounesto, G.P. Wene \
\[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaRadonHurwitzNumber", "[", 
      RowBox[{"s", "-", "8"}], "]"}], "+", "4"}], "/;", 
    RowBox[{"s", "\[GreaterEqual]", "8"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", "s_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"s", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", 
      ",", "2", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "3", 
      ",", "6", ",", "3", ",", "7", ",", "3"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"-", "1"}], "\[LessEqual]", "s", "\[LessEqual]", "7"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Negative"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"s", "+", "8"}], "]"}], "-", "4"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberOfPrimitiveIdempotents", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"p_", ",", "q_", ",", "0"}], "]"}], "]"}], ":=", 
   RowBox[{"q", "-", 
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"q", "-", "p"}], "]"}]}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Primitive idempotents"
}], "Subsubsection"],

Cell[TextData[{
 "By [PL-GPW] primitive idempotent of Cl(p,q) is a product of type \
(1+blade)..., where blade squares to 1 and all blades forms commuting set. \
The  ",
 StyleBox["commutingWithElement[] ",
  FontWeight->"Bold"],
 " test if blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 " of the blade list ",
 StyleBox[" testList",
  FontWeight->"Bold"],
 " commutes with this blade. The function then deletes all blades, which do \
not commute with blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"commutingWithElement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"testList_List", ",", "startEl_List"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"in", "=", 
         RowBox[{"RotateLeft", "[", 
          RowBox[{"testList", ",", 
           RowBox[{
            RowBox[{"startEl", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ",", 
        RowBox[{"quiet", "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
        RowBox[{"ord", "=", 
         RowBox[{"(", 
          RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", "fe", ",", "res"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"Sow", "[", 
        RowBox[{"fe", "=", 
         RowBox[{"First", "[", "in", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Rest", "[", "in", "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"fe", ",", "#"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"#", ",", "fe"}], "]"}]}], "===", "0"}], ")"}], 
             "&"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"!", "quiet"}], "&&", 
          RowBox[{
           RowBox[{"Length", "[", "res", "]"}], ">", "0"}]}], ",", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"TextCell", "[", "\"\<Blade \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "fe", "]"}], ",", 
                  RowBox[{
                  "TextCell", "[", "\"\<commute with blades \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "res", "]"}]}], "}"}], "]"}],
                ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", "\"\<Next selected blade number is \>\"", 
                   "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", "startEl", "]"}], "]"}], 
                   "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
          "]"}]}], "]"}], ";", 
       RowBox[{"{", 
        RowBox[{"res", ",", 
         RowBox[{"RotateLeft", "[", "startEl", "]"}]}], "}"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "testList", "]"}], ">", "0"}]}]}], ";"}]], "Input"],

Cell["\<\
After system of commuting blades which square to 1 is formed, we need to \
remove of them all blades, which are products of blades which are in the \
beginning of the list. Recursive implementation of removing product blades, \
i.\[DoubleStruckE]. blades which are products of blades in the begining of \
given list. The initial blade ordering by default is \
\[OpenCurlyDoubleQuote]InvDeg[Lex]\[CloseCurlyDoubleQuote], which can be \
changed to any other by option gaNonCommutativeMonomialOrder->order.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other___"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", "nextAccept", "}"}], ",", 
       RowBox[{"{", "other", "}"}]}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other__"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"accepted", ",", "nextAccept"}], "}"}], ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"removeElems", "=", 
           RowBox[{"ReplaceAll", "[", 
            RowBox[{
             RowBox[{"GeometricProduct", "@@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "nextAccept"}], "}"}], "]"}], "&"}], "/@", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"{", "accepted", "}"}], "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{"-", "any_"}], "\[RuleDelayed]", "any"}]}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "other", "}"}], ",", 
           RowBox[{"Alternatives", "@@", "removeElems"}]}], "]"}]}], "]"}]}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "nextAccept_", "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", "Nothing"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "Nothing"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Function ",
 StyleBox["gaPrimitiveIdempotent[al_Cl] ",
  FontWeight->"Bold"],
 " returns list of primitive idempotens of algebra. Geometric multiplication \
of list element will give representative of primitive idempotent. Different \
representatives can be obtained either by using different sorting of \
monomials or by manually selecting prefered blades, or combining both. The ",
 "res",
 "ult then is checked if proper number of required product blades is \
obtained.  "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
    "=", "\"\<Radon-Hurwitz number of expected commuting idempotents for \
algebra `1` is `2`. It does not match length of result. Something goes wrong.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"StartingElement", "\[Rule]", "1"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "base", ",", "ord", ",", "startElement", ",", "positiveBlades", ",", 
       "commutingPositiveBlades", ",", "commutingPositiveBladesProductFree", 
       ",", "idempotentList", ",", 
       RowBox[{"of", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"OutputForm", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "OutputForm"}], "]"}]}], 
         ")"}]}], ",", 
       RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
        RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ord", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{
          "gaPrimitiveIdempotent", ",", "gaNonCommutativeMonomialOrder"}], 
          "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
          "gaOrthonormalBase"}], ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"base", "=", 
         RowBox[{"gaDefineOrthonormalBase", "[", 
          RowBox[{"al", ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
           RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"base", "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
              RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
         RowBox[{"gaRunningAlgebra", "=", "al"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"startElements", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"StartingElement", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaPrimitiveIdempotent", ",", "StartingElement"}], 
            "]"}]}], ")"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Quiet", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaPrimitiveIdempotent", ",", "Quiet"}], "]"}]}], ")"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"positiveBlades", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"DeleteCases", "[", 
            RowBox[{"base", ",", "1"}], "]"}], ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], "&"}], ")"}]}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
           RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", "\"\<Blades, which square to 1 are \>\"", 
                 "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "positiveBlades", "]"}]}], 
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"commutingPositiveBlades", "=", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"Reap", "[", 
          RowBox[{"NestWhile", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"commutingWithElement", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
               RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}]}], 
              "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"positiveBlades", ",", "startElements"}], "}"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "0"}], "&"}]}], 
           "]"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<Full system of commuting blades are\>\"", "]"}], ",", 
                RowBox[{
                "ExpressionCell", "[", "commutingPositiveBlades", "]"}]}], 
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"commutingPositiveBladesProductFree", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Reap", "[", 
         RowBox[{"removeProductsOfElements", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", "commutingPositiveBlades"}], "]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"idempotentList", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", "2"}], ")"}], 
          RowBox[{"(", 
           RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
        "commutingPositiveBladesProductFree"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
         RowBox[{"Length", "[", "commutingPositiveBladesProductFree", "]"}]}],
         ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{
          "gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], ",", 
          "al", ",", "expectedNumberOfPrimitiveIdempotents"}], "]"}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"of", "=!=", "\"\<Blades\>\""}], ",", "idempotentList", ",", 
        "commutingPositiveBladesProductFree"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Series "
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". GeometricProductSeries"
}], "Subsubsection"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaGeometricProductSeries[ ] ",
  FontWeight->"Bold"],
 "is taken  from package ",
 StyleBox["clifford.m",
  FontWeight->"Bold"],
 "  (version 1.3 (Oct,2007): authors G. Aragon-Camarasa, J.L. Aragon, G. \
Aragon and M.A. Rodriguez )."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "gaSeriesData", "}"}]}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "::", "function"}], "=", 
   "\"\<The expanded function `1` contains noncommutative operations \
(GeometricProduct or other). Current implementation is not ready to handle \
such cases. Use only with single argument!!!\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "[", 
    RowBox[{
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Function", "|", "_Symbol"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"point_", "?", "NumberQ"}], ",", 
         RowBox[{"n_Integer", "?", "Positive"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"Series", "[", 
         RowBox[{
          RowBox[{"sym", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "point", ",", "n"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"a", "=", "1"}], ",", 
       RowBox[{"expansion", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaGeometricProductSeries", ",", "Expand"}], "]"}]}], 
          ")"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"sym", ",", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}]}], "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaGeometricProductSeries", "::", "function"}], ",", 
          "sym"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[NotEqual]", "0"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{"expansion", ",", 
             RowBox[{"a", "=", 
              RowBox[{"gaProductExpand", "[", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", "m"}], "]"}], "]"}]}], ",", 
             RowBox[{"a", "=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"a", ",", "m"}], "]"}]}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"res", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Coefficient", "[", 
                RowBox[{"s", ",", "x", ",", "i"}], "]"}], "*", "a"}], "}"}], 
             ",", "i"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gaSeriesData", "@@", 
       RowBox[{"{", 
        RowBox[{"point", ",", "res"}], "}"}]}]}]}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 " returns ",
 StyleBox["gaSeriesData[ ] ",
  FontWeight->"Bold"],
 "series data (mimick ",
 StyleBox["Series[ ]",
  FontWeight->"Bold"],
 " behaviour). It can be converted either to ordinary geometric product (with \
",
 StyleBox["Normal[ ]",
  FontWeight->"Bold"],
 ") or user can explicitly include infinitesimal parameter with ",
 StyleBox["gaParameterSeries[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaSeriesData[]",
  FontWeight->"Bold"],
 " rules for ",
 StyleBox["Zassenhaus",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Baker-Campbell-Hausdorff",
  FontSlant->"Italic"],
 " series are added in these series definition sections."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Normal", "[", "a_gaSeriesData", "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "[", 
    RowBox[{"a_gaSeriesData", ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"var", "^", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"Plus", "@@", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " are automatically summed order by order and geometrically multiplied."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Plus", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any3___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxOrder", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", "dat1", "]"}], ",", 
         RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", " ", 
     RowBox[{"Plus", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"gaSeriesData", "[", 
        RowBox[{"point", ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat1", ",", "maxOrder"}], "]"}]}], ")"}], "+", 
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat2", ",", "maxOrder"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
        "]"}], ",", "any2", ",", "any3"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication by multivector is multiplication of every term of series by \
that factor."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Times", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication is realized first constructing pairs of infinitesimal of \
same power ",
 StyleBox["relevantPairs",
  FontWeight->"Bold"],
 ", then simply taking these terms with ",
 StyleBox["Extract[ ]",
  FontWeight->"Bold"],
 ", multiplying and at least summing."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any2___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"maxOrder", "=", 
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"Length", "[", "dat1", "]"}], ",", 
          RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], ",", 
       "relevantPairs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"relevantPairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "+", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "k"}], "}"}], ",", "k"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "maxOrder"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"any1", ",", 
        RowBox[{"gaSeriesData", "[", 
         RowBox[{"point", ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"List", "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat2"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}]}], "}"}], "]"}]}], ")"}], "&"}], "/@", 
                  RowBox[{"relevantPairs", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "maxOrder"}], "}"}]}], "]"}]}]}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", 
               RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
         "]"}], ",", "any2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Below follows shortcuts and simplified predefined usage of ",
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricExp", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSin", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSinh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCos", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCosh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTan", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTanh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricExp", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricExp", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Exp", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Exp", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExp", "=", "gaGeometricExp"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSin", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSin", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sin", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sin", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSin", "=", "gaGeometricSin"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSinh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSinh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sinh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sinh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSinh", "=", "gaGeometricSinh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCos", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCos", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cos", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cos", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCos", "=", "gaGeometricCos"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCosh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCosh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cosh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cosh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCosh", "=", "gaGeometricCosh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTan", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTan", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tan", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tan", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTan", "=", "gaGeometricTan"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTanh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTanh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tanh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tanh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTanh", "=", "gaGeometricTanh"}], ";"}]}], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Commutator, Zassenhaus and BakerCampbellHausdorff (BCH) expansions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["Nice output of commutator and anticommutator", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"gaCommutator", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
    RowBox[{"StyleBox", "[", 
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<\[LeftDoubleBracket]\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<,\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<\[RightDoubleBracket]\>\""}], "}"}], "]"}], ",", 
      RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
      RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaAntiCommutator", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
   RowBox[{"StyleBox", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<{\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<,\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<}\>\""}], "}"}], "]"}], ",", 
     RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
     RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaSetMultiLinear[ ] ",
  FontWeight->"Bold"],
 "is taken  from  Daniel Lichtblau<danl@wolfram.com>Re:[mg25540] MultiLinear \
and Linear function (old mathgroup mail list)"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", 
                RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", "c_", ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", "1", ",", "b"}], "]"}]}], "/;", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "=!=", "1"}], ")"}], "&&", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "c", "}"}], ",", 
                RowBox[{"MV", "|", "bs"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";", 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"c_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&"}], ")"}]}], 
                ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", 
               RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"c_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
                   RowBox[{"c", "=!=", "1"}]}], ")"}], "&"}], ")"}]}], ",", 
              "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "1", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False],

Cell["Expand commutator and anticommutator.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCommutatorExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "gaAntiCommutator", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaCommutatorExpand", "[", 
      RowBox[{"n", ":", 
       RowBox[{"(", 
        RowBox[{"_", "?", "NumberQ"}], ")"}], ":", "1"}], "]"}], "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"repRules", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plus", " ", "Rules", " ", "for", " ", "gaCommutator"}], 
            "*)"}], 
           RowBox[{
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "Plus", " ", "Rules", " ", "for", " ", "gaAntiCommutator"}], 
             "*)"}], 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaAntiCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"Alternatives", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{"gaCommutatorExpand", ",", "Except"}], "]"}]}], 
                  ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Expand", "[", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", "#", ")"}], "/.", "repRules"}], ")"}], "&"}], ",", 
         "expr"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "[", "n_", "]"}], "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{
      RowBox[{"gaCommutatorExpand", "[", "n", "]"}], "[", "x", "]"}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Zassenhaus series"
}], "Subsubsection"],

Cell["\<\
Optimize commutator linearity for Clifford algebras instead of using general \
gaSetMultiLinear[ ] . With this optimization $IterationLimit for \
gaZassenhausSeries for value 8 causes no problems. gaCommutator is nonzero \
only if it contains heads orthonormalBaseSymbolName or MV. If you need other \
noncommutative quantities, just use MV[yourhead].\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", "y_Plus", ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", "#", ",", "b"}], "]"}], "&"}], "/@", "y"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"___", ",", "a_", ",", "___"}], "]"}], "]"}], ":=", 
      RowBox[{"0", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", 
          RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
If one uses definition below,  one gets $IterationLimit for \
gaZassenhausSeries values 8 or higher. This can be avoided with 
Block[{$RecursionLimit=2048},gaZassenhausSeries[Exp[t1+t2],8]], however the \
better way is to optimize iteration procedure as above.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetMultiLinear", "[", 
   RowBox[{"gaCommutator", ",", "gaAntiCommutator"}], "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell["Add antisymmetry property ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaCommutator", "[", 
     RowBox[{"a_", ",", "a_"}], "]"}], "]"}], ":=", "0"}], ";"}]], "Input"],

Cell[TextData[{
 "Efficient computation of general Zassenhaus coefficients is literally taken \
form the article Fernando Casas, Ander Murua, Mladen Nadinic, \
\[OpenCurlyDoubleQuote]Efficient computation of the Zassenhaus formula\
\[CloseCurlyDoubleQuote],Computer Physics Communications, 183 (2012) \
2386-2391, where algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjoint", "[", 
    RowBox[{"a_", ",", "0", ",", "b_"}], "]"}], ":=", "b"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjoint", "[", 
    RowBox[{"a_", ",", "j_Integer", ",", "b_"}], "]"}], ":=", 
   RowBox[{"gaCommutator", "[", 
    RowBox[{"a", ",", 
     RowBox[{"gaAdjoint", "[", 
      RowBox[{"a", ",", 
       RowBox[{"j", "-", "1"}], ",", "b"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"1", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"1", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "k"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"j", "!"}], " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "-", "j"}], ")"}], "!"}]}], ")"}]}], ")"}], " ", 
       RowBox[{"gaAdjoint", "[", 
        RowBox[{
         RowBox[{"MV", "[", "bTemp", "]"}], ",", 
         RowBox[{"k", "-", "j"}], ",", 
         RowBox[{"gaAdjoint", "[", 
          RowBox[{
           RowBox[{"MV", "[", "aTemp", "]"}], ",", "j", ",", 
           RowBox[{"MV", "[", "bTemp", "]"}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "k"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "2", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], " ", 
    RowBox[{"gaff", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"p_", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaff", "[", 
     RowBox[{"p", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "j"}], "/", 
         RowBox[{"j", "!"}]}], ")"}], " ", 
       RowBox[{"gaAdjoint", "[", 
        RowBox[{
         RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], ",", "j", ",", 
         RowBox[{"gaff", "[", 
          RowBox[{
           RowBox[{"p", "-", "1"}], ",", 
           RowBox[{"k", "-", 
            RowBox[{"p", " ", "j"}]}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"k", "/", "p"}], "]"}], "-", "1"}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "p_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "=", 
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "p"}], ")"}], " ", 
      RowBox[{"gaff", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"p", "-", "1"}], ")"}], "/", "2"}], "]"}], ",", 
        RowBox[{"p", "-", "1"}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", 
     RowBox[{"a_", ",", "b_"}], "]"}], "[", "p_Integer", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
       RowBox[{
        RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], "}"}]}], 
    ")"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Right Zassenhaus series of Exp[A+B] is given as \
{Exp[A],Exp[B],Exp[C_2],Exp[C_3],...}. Whereas Left Zassenhaus series of \
Exp[A+B] is presented as {...,Exp[C\[CloseCurlyQuote]_3],Exp[C\
\[CloseCurlyQuote]_2],Exp[B],Exp[A]}. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"C", "'"}], "_n"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"n", "+", "1"}]], "C_n"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaZassenhausSeries", "}"}], ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaZassenhausSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<Right\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausSeries", "::", "format"}], "=", 
    "\"\<gaZasenhausSeries option Format-> `1` is unknown. Possible values \
are \\\"Right\\\" or \\\"Left\\\".\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaZassenhausSeries", "[", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"aa_", "+", "bb_"}], "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a", "=", 
           RowBox[{"Unevaluated", "[", "aa", "]"}]}], ",", 
          RowBox[{"b", "=", 
           RowBox[{"Unevaluated", "[", "bb", "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaZassenhausSeries", ",", "Format"}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "seriesType", ",", "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"gaZassenhausCoefficient", "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"2", ",", "n"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "aTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "bTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\"\<Left\>\"", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"Reverse", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2", ",", "n"}], "}"}]}], "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"gaZassenhausCoefficient", "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "bTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "aTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaZassenhausSeries", "::", "format"}], ",", 
            "seriesType"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["Conversion of Zassehaus series data to gaSeriesData. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"u1_", ",", 
     RowBox[{"{", 
      RowBox[{"u2a_", ",", "u2b_"}], "}"}], ",", "u3_", ",", "len_"}], "]"}], 
   ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2a", ",", "u3", ",", "len"}], "]"}], ",", 
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2b", ",", "u3", ",", "len"}], "]"}]}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"expansionOrder_", ",", "uMVec_", ",", "rang_", ",", "len_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"Series", "[", 
          RowBox[{
           RowBox[{"Exp", "[", "t", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"res", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"a", "=", "1"}], ",", 
        RowBox[{"initialSeq", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "0", "}"}], ",", "j"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "0", ",", "len"}], "}"}]}], "]"}]}]}], "}"}], 
      ",", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"i", "\[NotEqual]", "0"}], ",", 
            RowBox[{"a", "=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"a", ",", "uMVec"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"res", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Coefficient", "[", 
                 RowBox[{"s", ",", "t", ",", "i"}], "]"}], "*", "a"}], "}"}], 
              ",", 
              RowBox[{"rang", "*", "i"}]}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"initialSeq", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", 
             RowBox[{"rang", "*", "k"}]}], "]"}], "]"}], "=", 
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", "k"}], "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", 
           RowBox[{
            RowBox[{"Length", "[", "res", "]"}], "-", "1"}]}], "}"}]}], "]"}],
        ";", "initialSeq"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", "uMVec", "]"}], "=!=", "List"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", 
       "expansionOrder", ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"expansionOrder", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"len", "/", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"res", "=", 
       RowBox[{"MapAt", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"expandZasExp", "[", 
             RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"expansionOrder", ",", 
             RowBox[{"{", 
              RowBox[{"inf0", ",", "infn"}], "}"}], ",", 
             RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"gaSeriesData", "@@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", "res"}],
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "[", 
   RowBox[{"gaZassenhausSeriesData", "[", 
    RowBox[{"infn___", ",", "inf0_List"}], "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "expansionOrder",
       ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expansionOrder", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{"len", "/", "i"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Apply", "[", 
          RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"expandZasExp", "[", 
            RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"expansionOrder", ",", 
            RowBox[{"Reverse", "[", 
             RowBox[{"{", 
              RowBox[{"infn", ",", 
               RowBox[{"Reverse", "[", "inf0", "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GeometricProduct", "@@", 
      RowBox[{"gaSeriesData", "@@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", 
         RowBox[{"Reverse", "[", "res", "]"}]}], ")"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". BCH series"
}], "Subsubsection"],

Cell[TextData[{
 "Efficient computation of general BCH coefficients is literally taken form \
the Mattias W. Reinsch, \[OpenCurlyDoubleQuote]A simple expresion for the \
terms in the Baker-Campbell-Hausdorff \
series\[CloseCurlyDoubleQuote],(arXiv:math-ph/9905012v2 13 Jan,2000), where \
algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given. We only add speedup using SparseArray matrices (15% \
speedup for n=12 term)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myStrings__String", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Band", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], "]"}], "\[Rule]", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "+", "1"}], ",", 
            RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}]}], ",", "FFGGm1"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dot", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                 RowBox[{"Product", "[", 
                  RowBox[{
                   RowBox[{"sb", "[", 
                    RowBox[{"k", ",", "#"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "]"}], "&"}], "/@", 
            RowBox[{"{", "myStrings", "\[IndentingNewLine]", "}"}]}], ")"}]}],
          "-", "qthpower"}], ")"}]}], ";", 
      RowBox[{"Expand", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"qthpower", "=", 
             RowBox[{"qthpower", ".", "FFGGm1"}]}], ";", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
             "qthpower"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", 
           RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
    RowBox[{
     RowBox[{"{", "exprs__String", "}"}], ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"temp", "=", 
        RowBox[{"logTempMatrix", "[", 
         RowBox[{
          RowBox[{"{", "exprs", "}"}], ",", "n"}], "]"}]}], ",", "term"}], 
      "}"}], ",", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"term", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"List", ",", 
           RowBox[{"temp", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{"term", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*", 
         RowBox[{"Apply", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"term", ",", 
              RowBox[{"-", "n"}]}], "]"}], "/.", 
            RowBox[{
             RowBox[{"sb", "[", 
              RowBox[{"_", ",", "k_"}], "]"}], "\[Rule]", 
             RowBox[{"MV", "[", "k", "]"}]}]}]}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "temp", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
Nested commutator on the right or left hand side. This differs from \
traditional form presended in the literature, because some terms are equal \
and can be added. For example in 5-th order term two terms with coefficients \
add  1/360+1/180 to form 1/120 coefficient of their sum. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateCommutatorForm", "[", 
    RowBox[{"expr_", ",", "vars_List", ",", "type_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rules", ",", "gaCom", ",", "any1", ",", "any2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetNonCommutative", "[", 
       RowBox[{"gaCom", ",", "any1", ",", "any2"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "type", ",", "\[IndentingNewLine]", "\"\<DeepestRight\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}]}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "a", "]"}], ">", 
                RowBox[{"Depth", "[", "b", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "b", ",", "a", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "a"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}], ",", 
                 RowBox[{"c", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "\"\<DeepestLeft\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", "b"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "b", "]"}], ">", 
                RowBox[{"Depth", "[", "a", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", "any2___"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "a", ",", "b", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"a", ",", "b"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"c", ":", "_gaCom"}], ",", 
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}], ",", "b"}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "b"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"#", "/.", "rules"}], "]"}], "&"}], ",", "expr"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"gaCom", "\[Rule]", "gaCommutator"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaBakerCampbellHausdorffSeries", "}"}], ",", "HoldFirst"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBakerCampbellHausdorffSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "format"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries option Format-> `1` is unknown. \
Possible values are \\\"Commutators\\\",\\\"Expand\\\" or \
\\\"None\\\".\>\""}], ";"}]}], "Input"],

Cell[TextData[{
 "Note: ",
 StyleBox["directLogTempMatrix[ ]",
  FontWeight->"Bold"],
 " is much faster when expanding multivectors. For example for two 3D vectors \
9-th order BCH series (expanded) is 600sec compared to 5000 sec using \
commutative algorithm. All this due to slow expansion of large noncommutative \
expression. Therefore we switch to directLogTempMatrix[ ] for n>5."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"directLogTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myexressions__", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], ",", "FFGGm1"}], "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"gaPE", ",", 
           RowBox[{"gaGeometricMatrixProduct", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"1", "/", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "&"}], "/@", 
              RowBox[{"{", "myexressions", "\[IndentingNewLine]", "}"}]}], 
             ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", 
             RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "-", "qthpower"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"gaPE", "/@", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"qthpower", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"MapAt", "[", 
                 RowBox[{"gaPE", ",", "qthpower", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", "FFGGm1"}], "]"}]}], 
             ";", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
              "qthpower"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", 
            RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell["\<\
Note: rewrite using commutators to left or to right side. It is not rewrite \
into Hall or Lyndon base (don\[CloseCurlyQuote]t know how to do this)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBakerCampbellHausdorffSeries", "[", 
       RowBox[{
        RowBox[{"GeometricProduct", "[", "expr__Exp", "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"expArgs", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"List", "@@@", 
             RowBox[{"Unevaluated", "[", 
              RowBox[{"{", "expr", "}"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaBakerCampbellHausdorffSeries", ",", "Format"}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"stringNames", "=", 
           RowBox[{"(", 
            RowBox[{"ToString", "/@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Unique", "[", "\"\<vn\>\"", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "expr", "}"}], "]"}], "}"}]}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "seriesType", ",", "\[IndentingNewLine]", "\"\<None\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "gaBakerCampbellHausdorffSeriesData", "@@", "\[IndentingNewLine]", 
            
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", "expArgs"}], 
              "]"}], ")"}]}], ",", "\"\<Expand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "gaBakerCampbellHausdorffSeriesData", "@@", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", 
                 RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"directLogTempMatrix", "[", 
                  RowBox[{"expArgs", ",", "k"}], "]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Commutators\>\"", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<DeepestRight\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestRight\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Commutators\>\"", "|", 
            RowBox[{"{", 
             RowBox[{"\"\<Commutators\>\"", ",", 
              RowBox[{"Method", "\[Rule]", "\"\<DeepestLeft\>\""}]}], "}"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestLeft\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBCHSeries", "=", "gaBakerCampbellHausdorffSeries"}], 
  ";"}]], "Input"],

Cell["\<\
Conversion of BakerCampbellHausdorffSeries series data to gaSeriesData. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeProductTerm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pair", ":", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ".."}]}], "}"}], 
     ",", 
     RowBox[{"expansionOrder_Integer", "?", "Positive"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{"#", ",", 
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"Factorial", "[", 
          RowBox[{"Length", "[", "#", "]"}], "]"}]}], ")"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Permutations", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
       RowBox[{"{", "pair", "}"}]}], "]"}], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "termsToTake", 
       ",", "nontrivialEntries"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"0", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"termsToTake", "=", 
                RowBox[{"FrobeniusSolve", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "len", "]"}], ",", "order"}], "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"nontrivialEntries", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Plus", "@@", "inf0"}], ",", "infn"}], "}"}], ",",
                     "#"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "0"}], "}"}]}], "]"}], ")"}], "&"}], "/@",
                  "termsToTake"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"gaPE", "[", 
                RowBox[{"Plus", "@@", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{"GeometricProduct", ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"makeProductTerm", "[", 
                    RowBox[{"#", ",", "order"}], "]"}], "&"}], "/@", 
                    "nontrivialEntries"}], ")"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
              ",", "order"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"order", ",", "len"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "1", "}"}], ",", "0"}], "}"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Tensor products and matrix representation of algebra"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTensorProduct", ",", "gaAlgebraMultiplicationTable", ",", 
     "gaToTensorProduct", ",", "gaFromTensorProduct", ",", 
     "gaAlgebraToMatrixRepresentation", ",", "gaMatrixRepresentation", ",", 
     "gaToMatrixRepresentation", ",", "gaFromMatrixRepresentation", ",", 
     "gaListDefinedElementaryRepresentations", ",", "BaseVectorMultipliers", 
     ",", "BaseVectorAlgebra", ",", "TargetMatrices", ",", 
     "QuaternionIsomorphismRules", ",", "gaDet"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "::", "usage"}], "=", 
   "\"\<gaTensorProduct[any1,any2] is a notation for any1 \[CircleTimes] \
any2.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "::", "usage"}], "=", 
   "\"\<gaAlgebraMultiplicationTable[algebra] prints algebras multiplication \
table. Option gaGradesOnly->{{},{},...} selects only elements of grades \
{{0},{1},{2},...\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "usage"}], "=", 
   "\"\<gaToTensorProduct[(algebra|gaTensorProduct),opts_\
ReductionAlgebrasOrder] decomposes given algebra into product of algebras \
with p+q=0, i.e. algebras Cl[0,2,0],Cl[1,1,0],Cl[2,0,0]. These reduction \
algebras can be specified with an option in the form of list \
Order->{__algebras} or list of lists \
Order->{{__algebraList1},{__algebraList2},...}. In the first case reduction \
process takes  algebra one by one until list is exhausted. The second form \
aplies reduction cyclically, first using all algebras in the list \
algebraList1, then in algebraList2, ...\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "::", "usage"}], "=", 
   "\"\<gaFromTensorProduct[algebra_gaTensorProduct] returs Clifford algebra, \
which is isomorphics to tensors products of given algebras, i.e. is oposite \
to gaToTensorProduct[ ]. \>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaAlgebraToMatrixRepresentation[al_Cl] or \
gaAlgebraToMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
constructs matrix representation of algebra. The syntax \
gaAlgebraToMatrixRepresentation[al_gaTensorProduct], first calculates direct \
product representation of product al_gaTensorProduct into elementary algebras \
of p+q<=2. Then uses direct product of matrix representation of these \
algebras. When user provides matrix representations of base vectors as a list \
baseVectorRepresentation, all other elements are simply obtained multiplying \
the matrices of these vectors.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaAlgebraToMatrixRepresentation[al_Cl,baseVectorRepresentation_List] command.\
\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaToMatrixRepresentation[expr, alegbra] converts expression into \
matrix representation. Orthogonal base and algebras matrix representations \
should be calculated in advance (till authomatic representation settings will \
be implemented).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaFromMatrixRepresentation[expr_matrix, alegbra] converts matrix \
representation into multivector expression. Orthogonal base and algebras \
matrix representations should be calculated in advance (till authomatic \
representation settings will be implemented).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<gaListDefinedElementaryRepresentations[algebra] or \
gaListDefinedElementaryRepresentations[algebra, representation name] return \
names (or representation itself), which can be used in \
gaAlgebraToMatrixRepresentation[algebra_gaTensorProduct].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorMultipliers", "::", "usage"}], "=", 
   "\"\<Option, multiplies base matrices by given scalars\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorAlgebra", "::", "usage"}], "=", 
   "\"\<Option, uses given Clifford algebra base vector representation to \
produce required algebra representation. Number of base vectors for requested \
and option provided algebras need be the same\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TargetMatrices", "::", "usage"}], "=", 
   "\"\<Option, points which type, reals or complexes matrices to \
prefer.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"QuaternionIsomorphismRules", "::", "usage"}], "=", 
   "\"\<subOption for gaAlgebraToMatrixRepresentation Method, possible values \
are {\\\"Pauli[1,2]\\\", \\\"HH2R4\\\"} or True. Determines weather \
quaternions in matrices to be replaced by matrix representations or \
not.\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDet", "::", "usage"}], "=", 
   "\"\<Returns determinant of Clifford algebra representation matrices. The \
only nontrivial part is the calculation of determinant of matrices with \
quaternionic matrix elements. In this cace n\[Cross]n quaterminic matrix is \
replaced by 2n\[Cross]2n complex matrix, the determinant of which is \
returned.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
    "One", " ", "needs", " ", "still", " ", "to", " ", "take", " ", "square", 
     " ", "root", " ", "of", " ", "it", " ", "according", " ", "to", " ", 
     "Ian", " ", "Porteous", " ", "in", " ", 
     ButtonBox[
      RowBox[{"[", 
       RowBox[{"RA", "-", "LoCGAaA"}], "]"}],
      BaseStyle->"Hyperlink",
      ButtonData->"references"]}], ",", " ", 
    RowBox[{"page", " ", "42."}], ",", " ", 
    RowBox[{
    "however", " ", "other", " ", "authors", " ", "do", " ", "not", " ", 
     "mantion", " ", "that"}]}], ")"}]}]], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Direct products"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell[TextData[{
 "The help function ",
 StyleBox["tensorProductIsomorphicToAlgebra[ ] ",
  FontWeight->"Bold"],
 " is used in ",
 StyleBox["gaDefineOrthonormalBase[gaTensorProduct[ ]]",
  FontWeight->"Bold"],
 ", where it generates indices of isomorphics algebra. These indices then are \
substituted by corresponding tensor product indices.  The rule below helps to \
replace single algbra by fake tensor product (containing only one term), \
which then enables to use single definition (thougtht a bit more complicated) \
instead of two separate: one for ",
 StyleBox["gaTensorProduct[Cl, Cl]",
  FontWeight->"Bold"],
 ", the other for ",
 StyleBox["gaTensorProduct[ gaTensorProduct[Cl], Cl]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tensorProductIsomorphicToAlgebra", "[", 
    RowBox[{"gaTensorProduct", "[", "al_Cl", "]"}], "]"}], ":=", "al"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The function ",
 StyleBox["gaAlgebraMultiplicationTable[ ]",
  FontWeight->"Bold"],
 ", constructs product table of all elements and prints it in a clear way. \
Entire base  should be generated before call."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], "=", 
    "\"\<Option `1` is not a list of grades {{1},{3},...}. All multiplication \
table will be generated.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaAlgebraMultiplicationTable", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grades", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaAlgebraMultiplicationTable", ",", "gaGradesOnly"}], 
           "]"}]}], ")"}]}], ",", "selectedBE"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"grades", ",", "All", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"Outer", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "]"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "}"}]}]}], "]"}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_Integer", "?", "NonNegative"}], "}"}], ".."}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"selectedBE", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGetGrade", "[", "#", "]"}], "===", "x"}], 
                   "&"}], ")"}]}]}], "]"}]}], "]"}], ",", "grades"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", "selectedBE", ",", "selectedBE"}],
            "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"selectedBE", ",", "selectedBE"}], "}"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], 
          ",", "grades"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "}"}]}]}], 
         "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell["Set unit element to 1.", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
    RowBox[{"bs", "/:", 
     RowBox[{"HoldPattern", "[", 
      RowBox[{"bs", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "_"}], 
       "]"}], "]"}], "=", "1"}]}], "]"}], ";"}]], "Input"],

Cell["\<\
The signature of tensor product is a sum of signatures for each product \
algebras\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_gaTensorProduct", ",", "___"}], "]"}]}]}], 
       "]"}], ":=", 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{"Length", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{
                RowBox[{"gaNegativeSignatureIndexList", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Thread", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Thread", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"First", "/@", 
                    RowBox[{"gaGetIndex", "[", "expr", "]"}]}], ")"}]}], ",", 
                    "al"}], "}"}], "]"}], "/.", 
                  RowBox[{"gaTensorProduct", "\[Rule]", "List"}]}], ")"}]}], 
               ",", "1"}], "]"}]}], ")"}]}], ")"}]}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Decide, when base recalculation is unavoidable", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getBase", "[", 
    RowBox[{"al_", ",", "grRequested_List", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"variants", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"DownValues", "[", "gaOrthonormalBase", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"gaOrthonormalBase", "[", 
                   RowBox[{"al", ",", "_"}], "]"}]}], "]"}]}], "&"}], 
              ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RuleDelayed", "[", 
             RowBox[{"def_", ",", "_"}], "]"}], ":>", "def"}], "}"}]}], 
         ")"}]}], ",", "definedGrades"}], "}"}], ",", 
     RowBox[{
      RowBox[{"definedGrades", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Hold", "@@", "variants"}], ")"}], "/.", 
             RowBox[{"HoldPattern", "\[Rule]", "Sequence"}]}], ")"}], "/.", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"_", ",", "gr_"}], "]"}], "\[RuleDelayed]", "gr"}]}], 
          ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"definedGrades", ",", "All"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBase", "[", 
          RowBox[{"al", ",", "grRequested"}], "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "All"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Intersection", "[", 
          RowBox[{"grRequested", ",", 
           RowBox[{"(", 
            RowBox[{"Union", "@@", 
             RowBox[{"(", "definedGrades", ")"}]}], ")"}]}], "]"}], "===", 
         "grRequested"}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBase", "[", 
          RowBox[{"al", ",", "grRequested"}], "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Join", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBase", "[", 
                 RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
               "definedGrades"}], ")"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", "True", ",",
         "\[IndentingNewLine]", 
        RowBox[{"gaDefineOrthonormalBase", "[", 
         RowBox[{"al", ",", 
          RowBox[{"gaGradesOnly", "->", "grRequested"}], ",", "opts"}], 
         "]"}]}], "]"}]}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Lets provide user with \[OpenCurlyDoubleQuote]default\
\[CloseCurlyDoubleQuote] algebra representations. It may be  convenient  if \
user wants other representations that differ from universal representations \
set by  ",
 StyleBox["generalDefaultMatrixRepresentationSetting[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDefaultMatrixRepresentationData", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "4"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "5"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "6"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "7"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ","}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Diagonal\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
            "\"\<Antisymmetric\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], 
       ","}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"2", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Below we construct matrix representations for real clifford algebras, which \
is known to be of dimensions:\n\[DoubleStruckCapitalR](2^(n/2)),    if \
q-p=0,6 (mod 8); \n\[DoubleStruckCapitalC](2^((n-1)/2)),    if q-p=1,5(mod \
8); \n\[DoubleStruckCapitalH](2^((n-2)/2)),    if q-p=2,4(mod 8); \n\
\[DoubleStruckCapitalH](2^((n-3)/2))\[CirclePlus]\[DoubleStruckCapitalH](2^((\
n-3)/2)),   if q-p=3(mod 8); \n\[DoubleStruckCapitalR](2^((n-1)/2))\
\[CirclePlus]\[DoubleStruckCapitalR](2^((n-1)/2)),   if q-p=7(mod 8); \n\nIn \
order to get these matrices we generate automatic calculation instructions \
below. \nThese settings are applied only if particular settings were not \
found in ",
 StyleBox["gaDefaultMatrixRepresentationData[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_", ",", "_"}], "]"}], "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"q", "-", "p"}], ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"0", "|", "6"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1", "|", "5"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", "\"\<Pauli[1,2]\>\""}]}],
        "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"2", "|", "4"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "3", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "7", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}]}], "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notations"
}], "Subsubsection"],

Cell["Tensor product notation for products of algebras", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "al__Cl", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "#", "]"}], "]"}], "===", 
          "gaNotation"}], ",", 
         RowBox[{"gaDefineNotation", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"{", "al", "}"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", 
          RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}], "]"}], "===", 
        "gaNotation"}], ",", 
       RowBox[{"gaDefineNotation", "[", 
        RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"alB", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "al", "}"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfdProto", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"Slot", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", 
               RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", 
            RowBox[{"StyleBox", "[", 
             RowBox[{"\"\<\[CircleTimes]\>\"", ",", 
              RowBox[{"FontSize", "\[Rule]", "Medium"}], ",", 
              RowBox[{"gaNotation", "[", 
               RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}]}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfiProto", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<gaTensorProduct\>\"", ",", "\"\<[\>\""}], "}"}], 
            ",", 
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Slot", "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", "\"\<,\>\""}],
              "]"}], ",", 
            RowBox[{"{", "\"\<]\>\"", "}"}]}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfdProto", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfiProto", "]"}], "]"}]}]}], "}"}], ",", 
         
         RowBox[{"TemplateBox", "[", 
          RowBox[{"alB", ",", "\"\<gaTensorProduct\>\"", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
      "]"}]}], "\[IndentingNewLine]", ")"}]}], ";"}]], "Input"],

Cell[TextData[{
 "For other quantities, i.e. indices, simply use ",
 StyleBox["CircleTimes[ ] ",
  FontWeight->"Bold"],
 "trick, thus avoiding problems with bracketing. For speed reasons, dont\
\[CloseCurlyQuote] associate MakeBoxes with  ",
 StyleBox["gaTensorProduct/: ",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "args__", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"TagBox", "[", 
    RowBox[{
     RowBox[{"ToBoxes", "[", 
      RowBox[{"CircleTimes", "[", "args", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"gaTensorProduct", "@@", "#"}], "&"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multiplication of elements, which are tensor products. "
}], "Subsubsection"],

Cell[TextData[{
 "Tensor product indices are treated in a different way than indices of \
simple clifford algebras. Identifier ignoreMe deals with tensor products of \
identical algebras, which is unavoidable if we want to construct tensor \
product from simple algebras. After base elements are constructed we ignore \
them.  ignoreMe is used only in ",
 StyleBox["gaDefineOrthonormalBase[gaTensorProduct[]]",
  FontWeight->"Bold"],
 ". It is not needed when dealing with already defined base elements."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"other1___", ",", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du1_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du2_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"setSymDiff4TP", ",", "signProdSigMap4TP"}], "}"}], ",", 
        RowBox[{
         RowBox[{"setSymDiff4TP", "=", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "@@", 
              RowBox[{"(", 
               RowBox[{"List", "/@", 
                RowBox[{"gaTensorProduct", "@@@", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Apply", "[", 
                   RowBox[{"mvSetSymmetricDifference", ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ")"}]}], ",",
              "al"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", 
                "_"}], "]"}], "]"}], "->", "1"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "=", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Times", "@@@", 
             RowBox[{"Apply", "[", 
              RowBox[{"mvProductSignatureMapC", ",", 
               RowBox[{"MapThread", "[", 
                RowBox[{"List", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}]}], "}"}]}],
                     "]"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"other1", ",", "setSymDiff4TP", ",", "other2"}], 
           "]"}]}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Geometric product of ",
 StyleBox["gaTensorProduct[_,_]",
  FontWeight->"Bold"],
 ". Note, that ",
 StyleBox["gaTensorProduct[x_]:=x",
  FontWeight->"Bold"],
 " rule would spoil rearangement ",
 StyleBox["gaTensorProduct[gaTensorProduct[a],b]",
  FontWeight->"Bold"],
 ", therefore is not allowed. Associate these recursive definitions with ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " itself  for speed reasons (they are more rare than ",
 StyleBox["GeometricProduct[ ]",
  FontWeight->"Bold"],
 ")"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "/:", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1___", ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"x1_", ",", "x2__"}], "]"}], ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"y1_", ",", "y2__"}], "]"}], ",", "any2___"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
           "x"}], "}"}]}], ")"}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "x2", "]"}], ",", 
         RowBox[{"gaTensorProduct", "[", "y2", "]"}]}], "]"}], ",", "any2"}], 
      "]"}], ")"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTensorProduct", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaTensorProduct", "[", "x1_", "]"}], ",", 
     RowBox[{"gaTensorProduct", "[", "y1_", "]"}], ",", "any2___"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1", ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
          "x"}], "}"}]}], ")"}], ",", "any2"}], "]"}], ")"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Orthonormal base construction for tensor product algebras"
}], "Subsubsection"],

Cell["\<\
General note. The case with (Cl[2,0,0]|Cl[1,1,0]|Cl[0,2,0]) algebras is \
special, because we know what are base vectors. Then it follows that we can \
easily order and grade all elements. For tensor products of arbitrary \
algebras the nontrivial point is to find what tensor products play the role \
of vectors. The generation of orthonormal base of product of tensor algebras \
should not be confused with calculation of  geometric product between \
\[DoubleStruckE]lements of tensor algebra products. The later can be \
calculated directly (see \[OpenCurlyDoubleQuote]Multiplication of elements, \
which are tensor products\[CloseCurlyDoubleQuote] subsubsection).  \
\>", "Text"],

Cell[TextData[{
 "The  ",
 StyleBox["gaTensorProduct[Cl,Cl,...]",
  FontWeight->"Bold"],
 ", puts tensor products into ,,matroska\[CloseCurlyQuote]\[CloseCurlyQuote] \
form ",
 StyleBox["gaTensorProduct[ gaTensorProduct[gaTensorProduct[Cl],Cl] ,..]",
  FontWeight->"Bold"],
 " below. Then calls ",
 StyleBox["gaDefineOrthonormalBaseMain[ ] ",
  FontWeight->"Bold"],
 " to do all calculations step by step starting from the deepest product. \
Only necessary grades are calculated in intermediate steps."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBase", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"p_", ",", "q_", ",", 
         RowBox[{"r_:", "0"}]}], "]"}], ",", 
       RowBox[{"specAlgebra", ":", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}], ".."}]}]}], 
      "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gro", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDefineOrthonormalBase", ",", "gaGradesOnly"}], "]"}]}], 
         ")"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"gaGradesOnly", "->", "_"}]}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"gaDefineOrthonormalBaseMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBaseMain", "[", 
               RowBox[{
                RowBox[{"gaTensorProduct", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], ",", 
                RowBox[{"gaGradesOnly", "->", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], ",", 
                RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}], ";", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], ")"}], "&"}], ",", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], ",", 
           RowBox[{"Most", "[", 
            RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{"Last", "[", 
          RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"gaGradesOnly", "\[Rule]", "gro"}], ",", 
       RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Note ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 " is private context symbol (not ",
 StyleBox["Module[ ]",
  FontWeight->"Bold"],
 " local symbol)"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaDefineOrthonormalBaseMain", "[", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "algebraSeq__", "]"}], ",", 
          RowBox[{"specAlgebra", ":", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}]}]}], "]"}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "baseSymbol", ",", "ord", ",", "invdeglexIndexList", ",", "indSet", 
          ",", "keysB", ",", "gr", ",", "ifPrint", ",", 
          "vectorsOfArbitraryAlgebra", ",", "bivectorsOfSpecialAlgebra", ",", 
          "alreadyCalculatedProductsAdoptedToSingle", ",", 
          RowBox[{"uniqueMaskForArbitraryAlgebra", "=", 
           RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
          RowBox[{"uniqueMaskForSpecAlgebra", "=", 
           RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
          RowBox[{"productAlgebra", "=", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"algebraSeq", ",", "specAlgebra"}], "]"}], "//.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a___", ",", 
                RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
               "]"}], ":>", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}]}], ",", 
          RowBox[{"alreadyCalculatedProducts", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", "algebraSeq", "]"}], "//.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", 
                RowBox[{"a___", ",", 
                 RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
                "]"}], ":>", 
               RowBox[{"gaTensorProduct", "[", 
                RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], ")"}]}], 
          ",", "quiet", ",", "algBoxes"}], "}"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBase", ",", "Quiet"}], "]"}]}], 
           ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "grOnly", " ", "only", " ", "makes", " ", "sense", " ", "to", " ", 
           "specify", " ", "in", " ", "the", " ", "last", " ", "step", " ", 
           "of", " ", "gaTensorProduct"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"grOnly", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGradesOnly", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBase", ",", "gaGradesOnly"}], 
             "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "Other", " ", "commands", " ", "do", " ", "not", " ", "understand",
             " ", 
            RowBox[{"gaTensorProduct", "[", "cl", "]"}]}], ",", " ", 
           RowBox[{"therefore", " ", "define", " ", "usual", " ", "Cl"}]}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"alreadyCalculatedProductsAdoptedToSingle", "=", 
          RowBox[{"alreadyCalculatedProducts", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", "a_Cl", "]"}], "\[RuleDelayed]", 
             "a"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "In", " ", "order", " ", "to", " ", "define", " ", "orthonormal", 
           " ", "base", " ", "of", " ", "tensor", " ", "product", " ", "we", 
           " ", "need", " ", "to", " ", "know", " ", "orthonormal", " ", 
           "bases", " ", "of", " ", "all", " ", "intermediate", " ", 
           "algebras"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"getBase", "[", 
          RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"getBase", "[", 
          RowBox[{"specAlgebra", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"specific", " ", "algebra", " ", "cases"}], ",", " ", 
           RowBox[{
           "for", " ", "which", " ", "we", " ", "know", " ", "what", " ", 
            "are", " ", "grade", " ", "1", " ", "elements"}], ",", " ", 
           RowBox[{"i", ".", "e", ".", " ", "vectors"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"specAlgebra", ",", "\[IndentingNewLine]", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"definitions", " ", "for", " ", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "=", 
            RowBox[{"Cl", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", 
                  RowBox[{
                  "tensorProductIsomorphicToAlgebra", "[", 
                   "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"definitions", " ", "for", " ", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "=", 
            RowBox[{"Cl", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", 
                  RowBox[{
                  "tensorProductIsomorphicToAlgebra", "[", 
                   "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"definitions", " ", "for", " ", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "=", 
            RowBox[{"Cl", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", 
                  RowBox[{
                  "tensorProductIsomorphicToAlgebra", "[", 
                   "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], ")"}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaNotation", "[", "productAlgebra", "]"}], "]"}], "===",
               "gaNotation"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
              RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"gaDefineNotation", "[", 
            RowBox[{"productAlgebra", ",", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "color", " ", "of", " ", "tensor", " ", "product", " ", "and", " ", 
           "isomorphics", " ", "algebra", " ", "are", " ", "set", " ", "to", 
           " ", "be", " ", "the", " ", "same", " ", "by", " ", "default"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaNotation", "[", 
               RowBox[{
               "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
                "]"}], "]"}], "]"}], "===", "gaNotation"}], ")"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaDefineNotation", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"(", 
               RowBox[{"gaNotation", "[", 
                RowBox[{"productAlgebra", ",", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"(", 
                   RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}], 
                   ")"}]}]}], "]"}], ")"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"space", " ", "dimensions"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], "=", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", 
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "]"}], "=", 
           RowBox[{
            RowBox[{
            "gaVectorSpaceDimension", "[", 
             "alreadyCalculatedProductsAdoptedToSingle", "]"}], "+", 
            "2"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"the", " ", "standard", " ", "ordering", " ", "stuff"}], 
           ",", " ", 
           RowBox[{
           "same", " ", "as", " ", "for", " ", "simple", " ", "algebra", " ", 
            "case"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"ord", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{
             "gaDefineOrthonormalBase", ",", 
              "gaNonCommutativeMonomialOrder"}], "]"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grOnly", "===", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"invdeglexIndexList", "=", 
            RowBox[{"mvInvDegLexSortedIndexList", "[", 
             RowBox[{
              RowBox[{
              "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
               "]"}], ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"invdeglexIndexList", "=", 
            RowBox[{"mvInvDegLexSortedIndexList", "[", 
             RowBox[{
              RowBox[{
              "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
               "]"}], ",", "grOnly"}], "]"}]}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ord", "===", "\"\<InvDeg[Lex]\>\""}], ",", 
           RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
           RowBox[{"indSet", "=", 
            RowBox[{"gaIndexSort", "[", 
             RowBox[{"invdeglexIndexList", ",", "ord"}], "]"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "for", " ", "special", " ", "algebras", " ", "vectors", " ", "of", 
           " ", "tensor", " ", "product", " ", "are", " ", "vectors", " ", 
           "of", " ", "arbitrary", " ", "algebra", " ", "multiplied", " ", 
           "by", " ", "bivectors", " ", "of", " ", "special", " ", 
           "algebra"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "and", " ", "vectors", " ", "of", " ", "special", " ", "algebra", 
           " ", "multiplied", " ", "by", " ", "unit", " ", "element", " ", 
           "of", " ", "arbitrary", " ", "algebra"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Note", ":", " ", 
           RowBox[{
           "we", " ", "need", " ", "to", " ", "make", " ", "generated", " ", 
            "vectors", " ", "unique"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"vectorsOfArbitraryAlgebra", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
              RowBox[{"_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                  RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
              "inc", ",", "alc", ",", "uniqueMaskForArbitraryAlgebra"}], 
              "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"vectorsOfSpecialAlgebra", "=", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"specAlgebra", ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                 RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
              "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bivectorsOfSpecialAlgebra", "=", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"specAlgebra", ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                 RowBox[{"{", "2", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
              "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"unitElement", "[", "productAlgebra", "]"}], "=", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
             RowBox[{"gaTensorProduct", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", "}"}], " ", ",", 
                RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}], 
             "]"}], ",", "productAlgebra"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "construct", " ", "unsorted", " ", "list", " ", "of", " ", 
            "tensor", " ", "product", " ", "algebra", " ", "vectors"}], ",", 
           " ", 
           RowBox[{"very", " ", "inefficient"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vectorsOfTensorProductAlgebra", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"#", ",", "productAlgebra"}], "]"}], "&"}], "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"Outer", "[", 
                  RowBox[{
                  "GeometricProduct", ",", "vectorsOfArbitraryAlgebra", ",", 
                   "bivectorsOfSpecialAlgebra"}], "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"baseSymbol", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{
                    "Length", "[", "alreadyCalculatedProducts", "]"}]}], 
                    "]"}]}], "]"}], ",", "alreadyCalculatedProducts", ",", 
                    "uniqueMaskForArbitraryAlgebra"}], "]"}], ",", "#"}], 
                   "]"}], "&"}], "/@", "vectorsOfSpecialAlgebra"}]}], "]"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"baseSymbol", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "al1_", ",", 
                   "___"}], "]"}], ",", 
                 RowBox[{"baseSymbol", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"du2_", ",", "up2_"}], "]"}], ",", "al2_", ",", 
                   "___"}], "]"}]}], "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"du1", ",", "du2"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"up1", ",", "up2"}], "]"}], "}"}]}], "]"}], "}"}],
                   "//.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a___", ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", "b__", "]"}], "}"}], ",", 
                    "c___"}], "]"}], ":>", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], 
                 ")"}], ")"}]}], "}"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "sort", " ", "acording", " ", "to", " ", "vector", " ", "square"}],
            ",", " ", 
           RowBox[{"i", ".", "e", ".", " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "...", ",", 
              RowBox[{"-", "1"}], ",", 
              RowBox[{"-", "1"}], ",", 
              RowBox[{"-", "1"}]}], "}"}]}], ",", " ", 
           RowBox[{"in", " ", "analogy", " ", "with", " ", 
            RowBox[{"{", 
             RowBox[{"p", ",", "q"}], "}"}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"(", "vectorsOfTensorProductAlgebra", ")"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"indSetReplRul", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"Range", "[", 
              RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
              "]"}], ",", 
             RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "/.", 
              RowBox[{
               RowBox[{"baseSymbol", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "__"}], "]"}], 
               "\[RuleDelayed]", "du1"}]}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"GeometricProduct", "@@@", 
           RowBox[{"Apply", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "#", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}],
                    "}"}]}], "]"}], ",", "productAlgebra"}], "]"}], "&"}], 
             ",", 
             RowBox[{"(", 
              RowBox[{"indSet", "/.", "indSetReplRul"}], ")"}], ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                 "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                 ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
               ",", "ord"}], "]"}], ",", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"productAlgebra", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], 
               "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"productAlgebra", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], 
               "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"productAlgebra", ",", "grOnly"}], "]"}], "=", 
            "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "assign", " ", "grades", " ", "after", " ", "removing", " ", 
           "possible", " ", "minus", " ", "signs"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"keysB", ",", "_baseSymbol", ",", "Infinity"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"gr", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
           "indSet"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"keysB", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
            RowBox[{"gr", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"set", " ", "value", " ", "for", " ", "gaRunningAlgebra"}],
            ",", " ", 
           RowBox[{"because", " ", "many", " ", 
            RowBox[{"gaGetGrade", "[", " ", "]"}], " ", "and", " ", "others", 
            " ", "depend", " ", "on", " ", "it"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"gaRunningAlgebra", "=", "productAlgebra"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"quiet", ",", "True", ",", 
           RowBox[{"ifPrint", "=", "False"}], ",", "Automatic", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
              "<", "8"}], ",", 
             RowBox[{"ifPrint", "=", "True"}], ",", 
             RowBox[{"ifPrint", "=", "False"}]}], "]"}], ",", "False", ",", 
           RowBox[{"ifPrint", "=", "True"}], ",", "_", ",", 
           RowBox[{"ifPrint", "=", "True"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"ifPrint", ",", 
           RowBox[{
            RowBox[{"algBoxes", "=", 
             RowBox[{"ToBoxes", "[", "productAlgebra", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "productAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<,\>\"", 
                    ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"algBoxes", ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], 
                    "}"}], "]"}], "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}],
                "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grOnly", "===", "All"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "productAlgebra", "]"}], "=", 
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"productAlgebra", ",", "grOnly"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"productAlgebra", ",", "grOnly"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Set universal unit element grade, this will not influence",
 StyleBox[" private Context",
  FontColor->RGBColor[1, 0, 1]],
 " element ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "__"}],
          "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The ",
 StyleBox["gaToTensorProduct[ ]",
  FontWeight->"Bold"],
 " tries to decompose given algebra (or their tensor product, without term \
reordering) into elementary algebras, for which matrix representations are \
well known. Decomposition into algebras Cl[2,0],Cl[1,1],Cl[0,2] enables to \
find orthonormal base (possibly nonoptimal) using direct product of \
elementary algebras"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"elementaryTPAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reductionAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], "=", 
   "\"\<Reduction set `1` is not allowed\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaToTensorProduct", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Order", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_Cl", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reductionInstruction", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Order", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaToTensorProduct", ",", "Order"}], "]"}]}], ")"}]}], 
         ",", "reductionInstructionNo00"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", "reductionInstruction", "]"}], ",", 
             "reductionAlgebras"}], "]"}], "=!=", "reductionAlgebras"}], ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"reductionInstructionNo00", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"reductionInstruction", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "0"}], "]"}], ",", "Infinity"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"reductionInstruction", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "__Cl", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{"step", ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              "reductionInstructionNo00"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], ".."}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                RowBox[{"First", "[", 
                 RowBox[{"NestWhile", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "y", "}"}], ",", 
                    RowBox[{"step", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "y", "]"}], ",", 
                    RowBox[{"First", "[", 
                    RowBox[{"Last", "[", "y", "]"}], "]"}]}], "]"}]}], "]"}], 
                    "[", "#", "]"}], ",", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                   RowBox[{"SameTest", "\[Rule]", "UnsameQ"}], ",", 
                   RowBox[{"Plus", "@@", "al"}], ",", "Infinity", ",", "2"}], 
                  "]"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              RowBox[{"(", 
               RowBox[{"RotateRight", "/@", "reductionInstructionNo00"}], 
               ")"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", "al"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"al", "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaTensorProduct", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaToTensorProduct", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help steps of how each specific algebra acts on p\[CloseCurlyQuote]s and q\
\[CloseCurlyQuote]s. See ",
 ButtonBox["[NDNO-CoMISoMvCA], [NDSK-EIoRCA],[MRdT].",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}], "-", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"step", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"al", ",", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"col", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
The reverse step, i.e. reconstruction of algebra from tensor products is much \
simple, because we don\[CloseCurlyQuote]t need to realize different \
posibilities\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{"ar", "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_gaTensorProduct", "]"}], ":=", 
   RowBox[{"Cl", "@@", 
    RowBox[{"Fold", "[", 
     RowBox[{"stepRev", ",", 
      RowBox[{"List", "@@@", 
       RowBox[{"(", 
        RowBox[{"List", "@@", "al"}], ")"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_Cl", "]"}], ":=", "al"}], 
  ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Matrix representations of Clifford algebras"
}], "Subsubsection"],

Cell["\<\
Matrix representations of elementary algebras. For general representations we \
limit ouselfs only with simple one parameter representations. In general (see \
Cl2Allrepresentations.nb)  repesentations, which have up to 3 free parameters \
can be constructed. These representations, however, become singular for some \
parameter values, so not included here). Representations are listed in order \
of preference, i.e. Option Automatic will simply take first representation of \
the list.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input"],

Cell["\<\
For Cl[1,0,0]: note outer multiply with {{{0,1},{1,0}} choice will not give \
block diagonal representation! \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Diagonal\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[0,1,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", "\"\<Complex\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "I", "}"}], "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[2,0,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[1,2]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[2,3]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[3,1]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"this", " ", "is"}], " ", "-", 
       RowBox[{"I", "*", 
        RowBox[{"Pauli", "[", 
         RowBox[{"3", ",", "1"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input"],

Cell["For Cl[1,1,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<SymmetricComplex\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary1\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary2\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[0,2,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[1,2]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[2,3]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[3,1]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"-", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}],
        ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Real\>\""}], 
        "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        "}"}]}], ",", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"quaternionic", " ", "representations"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[1,2]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[2,3]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[3,1]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]", 
         "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", "al_Cl", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
        RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", 
     RowBox[{"al_Cl", ",", "rep_String", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"BaseVectorMultipliers", "/.", 
              RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"BaseVectorMultipliers", "\[Rule]", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
           ")"}]}], ",", 
         RowBox[{"repMatrix", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"vRep", "[", 
             RowBox[{"al", ",", "rep"}], "]"}], "/.", 
            RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
           RowBox[{"{", 
            RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaAlgebraToMatrixRepresentation", "::", 
              "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
           RowBox[{"mult", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{"repMatrix", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
           ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
           "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
         "rep"}], "]"}]}], "&&", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
        ",", "rep"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BaseVectorMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BaseVectorMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}], ",", "repMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaAlgebraToMatrixRepresentation", "::", 
             "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"arg", "=", 
            RowBox[{"Unique", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"repMatrix", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vRep", "[", 
               RowBox[{"al", ",", "rep", ",", "arg"}], "]"}], "/.", 
              RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}], ";", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mult", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{"repMatrix", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
         "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"x_Symbol", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"Symbol", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"SymbolName", "[", "x", "]"}], ",", 
              RowBox[{"\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
             "]"}], "]"}], "/;", 
           RowBox[{
            RowBox[{"Context", "[", "x", "]"}], "===", 
            "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
         ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
       "rep"}], "]"}], "&&", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
       ",", "rep"}], "]"}]}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help function ",
 StyleBox["gaElementaryAlgebraToMatrixRepresentationRules[ ] ",
  FontWeight->"Bold"],
 "construct replacement rules index->matrix for each of vectors (and identity \
element). Note. When dealing with function ",
 StyleBox["gaOrthonormalBase[ ]",
  FontWeight->"Bold"],
 ", which does not hold its arguments, then",
 StyleBox[" ValueQ[gaOrthonormalBase[ ]]",
  FontWeight->"Bold"],
 " returns True if argument was evaluated. So, in this way we cannot decide \
if  base was defined. Then instead of  ",
 StyleBox["ValueQ[ ]",
  FontWeight->"Bold"],
 " for base definition we use check ",
 StyleBox["Head[gaOrthonormalBase[al,{1}]]===gaOrthonormalBase",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
     "representation"}], "=", 
    "\"\<Algeba `1` matrix representation `2` is undefined or invalid.\>\""}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "replRules", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep"}], "]"}], "]"}], "===", 
          "gaListDefinedElementaryRepresentations"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", "rep"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"replRules", "=", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"index2Repl", ",", 
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", "rep", ",", "opts"}], "]"}]}], "]"}], "]"}],
            ")"}], ",", 
          RowBox[{
           RowBox[{"{", "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{"di", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
The explicit specification of elementary algebras matrix representations.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"rep__", "?", "MatrixQ"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "newRep", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"{", "rep", "}"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BaseVectorMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BaseVectorMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"{", "rep", "}"}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{
               RowBox[{"{", "rep", "}"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ")"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", 
            RowBox[{"{", "rep", "}"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaAlgebraToMatrixRepresentation", "::", 
             "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newRep", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"{", "rep", "}"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"index2Repl", ",", "newRep"}], "]"}], "]"}], ")"}], ",", 
         RowBox[{
          RowBox[{"{", "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"IdentityMatrix", "[", 
            RowBox[{"di", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input"],

Cell["\<\
Quaternion tensor product H\[CircleTimes]H ->R(4) isomorphism rules, taken \
from [NDSK-EIoRCA]. And simple C\[CircleTimes]H->C(2) rules, using Pauli 1,2 \
matrix representation  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<HH2R4\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "without", " ", "isomorphismPreRules", " ", "BaseVectorMultiplies", " ", 
       RowBox[{"don", "'"}], "t", " ", "properly", " ", "work", " ", "with", 
       " ", "above", " ", "isomorphism", " ", "rules"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"isomorphismPreRules", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", "c_", ",", "a3___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "1", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "c", "}"}], ",", 
             RowBox[{"MV", "|", "bs"}], ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
           RowBox[{"c", "=!=", "1"}]}]}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", 
           RowBox[{"c_", "*", "a2_"}], ",", "a3___"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "a2", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "c", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "}"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Help function",
 StyleBox[" applyQuaternionIsomorphismRules[ ]",
  FontWeight->"Bold"],
 ", which apply isomorphism rules under request. The  ",
 StyleBox["nestedApplyQuaternionIsomorphismRules[ ] ",
  FontWeight->"Bold"],
 "apply list of these rules repeatedly"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "a2_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        "\"\<Pauli[1,2]\>\""}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "a1", "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nestedQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{"rule_List", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], "]"}], ":=", 
   
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nestNumber", "=", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"Length", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
           "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"applyQuaternionIsomorphismRule", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"rule", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], "]"}], "&"}],
        ",", "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nestedQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{"rule_List", ",", "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nestNumber", "=", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"Length", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
           "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"applyQuaternionIsomorphismRule", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"rule", ",", "\"\<HH2R4\>\""}], "}"}]}], "]"}], "&"}], ",",
        "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", "ruleListList_", ",", 
     "type_List"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "ruleListList", "]"}], "===", 
      RowBox[{"Length", "[", "type", "]"}]}], ",", 
     RowBox[{"Fold", "[", 
      RowBox[{"nestedQuaternionIsomorphismRule", ",", "expr", ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"ruleListList", ",", "type"}], "}"}], "]"}]}], "]"}], ",", 
     "expr"}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help function",
 StyleBox[" singleElementOuterMultiply[ ]",
  FontWeight->"Bold"],
 " construct outer product for single algebra element."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"singleElementOuterMultiply", "[", 
       RowBox[{
        RowBox[{"c_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{"ind_mvDownUp", ",", "algTP_gaTensorProduct"}], "]"}]}], 
        ",", "algRepRules_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "productMatrices", ",", "opElement", ",", "opMatrix", ",", "marks", 
           ",", "vars", ",", "varsWithMarks", ",", 
           RowBox[{"replaceTensorProducts", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"theQuaternionReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "quaternionReplacement", ",", 
           "resultWithoutQuaternionRepl"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"quaternionReplacement", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"QuaternionIsomorphismRules", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"QuaternionIsomorphismRules", "\[Rule]", 
               RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRepRules", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"varsWithMarks", "=", 
              RowBox[{"Thread", "[", 
               RowBox[{"List", "[", 
                RowBox[{
                 RowBox[{"marks", "=", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}], "&"}], "/@",
                     "algRepRules"}], ")"}]}], ",", 
                 RowBox[{"vars", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"Unique", "[", "sEOM", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "algRepRules", "]"}], "}"}]}], 
                   "]"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{"marks", ",", "False"}], "]"}], "===", "1"}], 
                 ")"}], "&&", 
                RowBox[{"quaternionReplacement", "===", 
                 RowBox[{"{", "}"}]}]}], ",", 
               RowBox[{"(*", " ", 
                RowBox[{
                "for", " ", "single", " ", "quaternion", " ", "can", " ", 
                 "use", " ", "GeometricProduct", " ", "immediatelly", " ", 
                 "if", " ", "option", " ", "isomorphismRules", " ", "not", 
                 " ", "set"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"replaceTensorProducts", "=", 
                  RowBox[{"{", 
                   RowBox[{"RuleDelayed", "@@", 
                    RowBox[{
                    StyleBox["{",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{
                    StyleBox["(",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"Pattern", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Blank", "[", "]"}]}], "]"}], "&"}],
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    StyleBox["/@",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], "vars"}], ")"}]}], ",", 
                    RowBox[{"Times", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"True", "\[Rule]", "Nothing"}]}], "]"}]}], ")"}], 
                    ",", 
                    RowBox[{"(", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"False", "\[Rule]", "Nothing"}]}], "]"}]}], 
                    ")"}]}], "]"}]}], "}"}]}], "}"}]}], ")"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"theQuaternionReplacementRules", "=", 
                 RowBox[{
                 "isomorphismRules", "/@", "quaternionReplacement"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"opElement", "=", "gaTensorProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"productMatrices", "=", 
           RowBox[{"(", 
            RowBox[{"opMatrix", "@@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{"ReplaceAll", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"List", "@@", 
                  RowBox[{"(", 
                   RowBox[{"ind", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "a_", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", "a"}], "}"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", "algRepRules"}], "}"}]}], "]"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"resultWithoutQuaternionRepl", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "*", 
                 RowBox[{"Nest", "[", 
                  RowBox[{"ArrayFlatten", ",", 
                   RowBox[{"Outer", "[", 
                    RowBox[{"opElement", ",", 
                    RowBox[{"Sequence", "@@", "productMatrices"}]}], "]"}], 
                   ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "productMatrices", "]"}], "-", 
                    "1"}]}], "]"}]}], ")"}], "/.", "replaceTensorProducts"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[RuleDelayed]", "1"}],
               "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"quaternionReplacement", "===", 
             RowBox[{"{", "}"}]}], ",", "resultWithoutQuaternionRepl", ",", 
            RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
             RowBox[{
             "resultWithoutQuaternionRepl", ",", 
              "theQuaternionReplacementRules", ",", "quaternionReplacement"}],
              "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaAlgebraToMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " construct entire algebra matrix representation from known elementary \
algebras representation. For complex (\[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]) represenattions, when in the decomposion appears \
algebra Cl[1,0] we use the following trick. First restore Cl[p,q] algebra \
from direct from direct product decomposition. Then instead of Cl[p,q] take \
Cl[q,p], for which decomposition into direct product yields Cl[0,1] (instead \
of Cl[1,0]). Calculate orthonormal base and matrix representation for this \
algebra. Take matrices, which corresponds vectors of calculated matrices. \
Multiply these vectors by imaginary unit I. This efectivelly will turn \
algebra Cl[q,p] vectors into Cl[p,q] vectors which we are seeking. Construct \
entire base of algebra using these matrices. The little problem is how to \
ensure strict correspondence between matrices obtained in this way and \
Cl[p,q] elements (if this is possible in general). "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"groupByGrade", "[", 
    RowBox[{"x_List", ",", "algebra_"}], "]"}], ":=", 
   RowBox[{"Internal`PartitionRagged", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Length", "/@", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBase", "[", 
         RowBox[{"algebra", ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
           RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input"],

Cell["\<\
Simple usage when user don\[CloseCurlyQuote]t provide elementary \
representations. (First[Cases[ ] ] later can be replaced by FirstCase[ ] )\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "NoDefaultData"}], "=", 
   "\"\<No explicit default representations of elementary algebras for `1` \
was given. Will use `2` .\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "whi", "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"whi", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"gaDefaultMatrixRepresentationData", ",", 
            RowBox[{"{", 
             RowBox[{"al", ",", "__"}], "}"}]}], "]"}]}], ")"}], "=!=", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"gaAlgebraToMatrixRepresentation", "@@", 
        RowBox[{"(", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"First", "[", "whi", "]"}], ",", 
             RowBox[{"{", "opts", "}"}]}], "}"}], ",", "1"}], "]"}], ")"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraToMatrixRepresentation", "::", "NoDefaultData"}], 
          ",", "al", ",", 
          RowBox[{
          "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}], 
         "]"}], ";", 
        RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
         RowBox[{"al", ",", 
          RowBox[{"(", 
           RowBox[{"Sequence", "@@", 
            RowBox[{
            "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}], 
           ")"}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"repRules", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"definedReps", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
          "]"}]}], ",", 
        RowBox[{"thisRep", "=", 
         RowBox[{"(", 
          RowBox[{"al", "/.", "repRules"}], ")"}]}], ",", 
        "quaternionReplacement", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"thisRep", ",", 
          RowBox[{"{", 
           RowBox[{"__", "?", "MatrixQ"}], "}"}]}], "]"}], ",", "thisRep", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"thisRep", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", "thisRep", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "special", " ", "case", " ", "for", " ", "compatability", " ", "to",
            " ", "decide", " ", "if", " ", "we", " ", "need", " ", "to", " ", 
           "replace", " ", "quaternion", " ", "by", " ", "matrices"}], "*)"}],
          "\[IndentingNewLine]", 
         RowBox[{"quaternionReplacement", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"QuaternionIsomorphismRules", "/.", 
              RowBox[{"Rest", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"{", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Method", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{
                    "gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                    "]"}]}], ")"}], "}"}], "]"}], "]"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}], 
             "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"quaternionReplacement", "===", "True"}], ")"}], "||", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", "quaternionReplacement", "}"}], "]"}], ",", 
              "\"\<Pauli[1,2]\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"bs", "=", 
                RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"theQuaternionReplacementRules", "=", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "I"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
                "\[IndentingNewLine]", "}"}]}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Union", "[", 
             RowBox[{"definedReps", ",", "thisRep"}], "]"}], "===", 
            "definedReps"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaListDefinedElementaryRepresentations", "[", 
             RowBox[{"al", ",", 
              RowBox[{"First", "[", "thisRep", "]"}], ",", "opts"}], "]"}], "/.",
             "theQuaternionReplacementRules"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
               "representation"}], ",", "al", ",", "thisRep"}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}],
        "]"}]}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"repRules", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"method", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
             "]"}]}], ")"}], "}"}], "]"}]}], ",", "orderAttempt"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"orderAttempt", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Order", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"Rest", "[", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], "]"}], 
          "]"}]}], ")"}]}], ";", 
      RowBox[{
       RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
        RowBox[{
         RowBox[{"gaToTensorProduct", "[", 
          RowBox[{"al", ",", 
           RowBox[{"Order", "->", "orderAttempt"}]}], "]"}], ",", "repRules", 
         ",", "opts"}], "]"}], "/;", 
       RowBox[{"!", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}]}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
Possible values are: True,  QuaternionIsomorphismRules -> {\
\[OpenCurlyDoubleQuote]Pauli[1,2]\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]HH2R4\[CloseCurlyDoubleQuote]}. myfun[arg, opts : \
OptionsPattern[{myGrid, Grid}]\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaAlgebraToMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<TensorProduct\>\"", ",", 
        RowBox[{"BaseVectorAlgebra", "\[Rule]", "\"\<Automatic\>\""}], ",", 
        RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
        RowBox[{"Order", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}]}], 
       "}"}]}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"BaseVectorMultipliers", "\[Rule]", "1"}], ",", 
     RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "replist"}], "=", 
   "\"\<Not all algebras of `1` was given elementary matrix representations \
`2`. Your cab find defined representations for algebra Alg with \
gaListDefinedElementaryRepresentations[Alg].\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "smaller"}], "=", 
   "\"\<Tensor product decomposition `1` contains Cl[1,0] algebra. Smaller \
(complex) representation matrices can be obtained using Method \
->{\\\"TensorProduct\\\",BaseVectorAlgebra\[Rule]`2`,TargetMatrices\[Rule]\
Reals}. The smaller matrices realizes HOMOMORPHISM of the algebra (not an \
isomorphism).\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "option"}], "=", 
   "\"\<Given reduction to algebra tensor product order `1` is not valid, \
will use `2`\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "BaseVectorMultipliers"}],
    "=", "\"\<Option BaseVectorMultipliers `1` has wrong number of elements, \
will set all to unity.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraToMatrixRepresentation", "::", "BaseVectorAlgebra"}], 
    "=", "\"\<BaseVectorAlgebra `1` has different number of vectors than \
algebra `2`. Will proceed with original algebra\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"repRules", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "quiet", ",", "method", ",", "submethodBVA", ",", "algRep", ",", 
       "newAl", ",", "algIso", ",", "orderAttempt", ",", "reductionOrder", 
       ",", "counter", ",", "repNames", ",", "mult", ",", 
       "signatureSplittedVectors", ",", "signatureSplittedSortedVectors", ",",
        "target", ",", "algTrueMinusAlgHelp", ",", "removeVectorList", ",", 
       "addVectorList", ",", "remPos", ",", "quaternionReplacement", ",", 
       "theQuaternionReplacementRules"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"List", "@@", "al"}], ",", "elementaryTPAlgebras"}], "]"}],
          "=!=", "elementaryTPAlgebras"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaAlgebraToMatrixRepresentation", "::", "unable"}], ",", 
           "al"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"method", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Method", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
            "]"}]}], ")"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Quiet", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Quiet"}], "]"}]}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mult", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"BaseVectorMultipliers", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{
          "gaAlgebraToMatrixRepresentation", ",", "BaseVectorMultipliers"}], 
          "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mult", "===", "1"}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Plus", "@@@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "/@", "mult"}], "=!=", 
         RowBox[{"(", 
          RowBox[{"Plus", "@@@", 
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaAlgebraToMatrixRepresentation", "::", "BaseVectorMultipliers"}],
            ",", "mult"}], "]"}], ";", 
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"target", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"TargetMatrices", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], "}"}]}], ")"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"orderAttempt", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Order", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"Rest", "[", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], "]"}], 
          "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"orderAttempt", ",", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}]}], "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", "orderAttempt", "]"}], "]"}]}], "]"}], "===", 
           RowBox[{"{", "2", "}"}]}], ")"}]}], ",", 
        RowBox[{"reductionOrder", "=", "orderAttempt"}], ",", 
        RowBox[{
         RowBox[{"reductionOrder", "=", 
          RowBox[{"(", 
           RowBox[{"Order", "/.", 
            RowBox[{"Rest", "[", 
             RowBox[{"OptionValue", "[", 
              RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
              "]"}], "]"}]}], ")"}]}], ";", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaAlgebraToMatrixRepresentation", "::", "option"}], ",", 
           "orderAttempt", ",", "reductionOrder"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"submethodBVA", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BaseVectorAlgebra", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"BaseVectorAlgebra", "\[Rule]", "\"\<Automatic\>\""}], 
          "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"submethodBVA", "=!=", "\"\<Automatic\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Plus", "@@", 
             RowBox[{"(", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ")"}], "=!=", 
           
           RowBox[{"(", 
            RowBox[{"Plus", "@@", "submethodBVA"}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaAlgebraToMatrixRepresentation", "::", "BaseVectorAlgebra"}], 
             ",", "submethodBVA", ",", "al"}], "]"}], ";", 
           RowBox[{"submethodBVA", "=", "\"\<Automatic\>\""}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"quaternionReplacement", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"QuaternionIsomorphismRules", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}], "}"}]}],
         ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"quaternionReplacement", ",", 
        RowBox[{"True", "|", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}], "|", 
         RowBox[{"{", 
          RowBox[{"\"\<Pauli[1,2]\>\"", ",", "\"\<HH2R4\>\""}], "}"}]}], ",", 
        
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\"\<HH2R4\>\"", "}"}], "|", "\"\<HH2R4\>\""}], ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "\"\<HH2R4\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\"\<Pauli[1,2]\>\"", "}"}], "|", 
         "\"\<Pauli[1,2]\>\""}], ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "\"\<Pauli[1,2]\>\"", "}"}]}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"theQuaternionReplacementRules", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"method", " ", "\"\<TensorProduct\>\""}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"method", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "===", "\"\<TensorProduct\>\""}], 
        ",", 
        RowBox[{"(*", " ", 
         RowBox[{
         "TensorProduct", " ", "method", " ", "uses", " ", "results", " ", 
          "of", " ", "tensor", " ", "product", " ", "base", " ", 
          "calculation"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"submethodBVA", ",", 
           RowBox[{"\"\<Automatic\>\"", "|", "al"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaAlgebraToMatrixRepresentation", "::", "replist"}],
                  ",", "al", ",", "repRules"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"repNames", "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"alP_Cl", "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"alP", ",", 
                    RowBox[{"++", 
                    RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], 
                 "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], 
                "\[RuleDelayed]", 
                RowBox[{"MapAt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                    "}"}]}], ")"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"algRep", "=", 
             RowBox[{
             "gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
              RowBox[{"(", 
               RowBox[{"Append", "@@@", 
                RowBox[{"Transpose", "[", 
                 RowBox[{"{", 
                  RowBox[{"repNames", ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"BaseVectorMultipliers", ",", "mult"}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ",
                "already", " ", "defined"}], ",", " ", 
              RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"al", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "=", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"getBase", "[", 
                RowBox[{"al", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"Quiet", "->", "quiet"}]}], "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "suggest", " ", "method", " ", "for", " ", "smaller", " ", 
              "complex", " ", "matrix", " ", "representations", " ", "when", 
              " ", 
              RowBox[{"C", "[", 
               RowBox[{"1", ",", "0"}], "]"}], " ", "appears", " ", "in", " ",
               "decomposition", " ", "with", " ", "complex", " ", 
              "matrices"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"algRep", ",", "\"\<Quaternion\>\""}], "]"}], "&&", 
               RowBox[{"Not", "[", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{
                  RowBox[{"List", "@@", "al"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], "]"}], "]"}], "&&", 
               RowBox[{"!", "quiet"}]}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaAlgebraToMatrixRepresentation", "::", "smaller"}], 
                ",", "al", ",", 
                RowBox[{"Cl", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], 
                  ")"}]}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "matrix", " ", "representations", " ", "for", 
              " ", "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"singleElementOuterMultiply", "[", 
                    RowBox[{"#", ",", "algRep", ",", 
                    RowBox[{
                    "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"gaOrthonormalBase", "[", 
                   RowBox[{"al", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"x_Symbol", "\[RuleDelayed]", 
                  RowBox[{
                   RowBox[{"Symbol", "[", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                    "]"}], "]"}], "/;", 
                   RowBox[{
                    RowBox[{"Context", "[", "x", "]"}], "===", 
                    "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
                 "\[RuleDelayed]", "singlet"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
               "}"}]}], ")"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Cl", "[", "__", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"newAl", "=", 
             RowBox[{"gaToTensorProduct", "[", 
              RowBox[{
               RowBox[{"algIso", "=", "submethodBVA"}], ",", 
               RowBox[{"Order", "->", "reductionOrder"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mult", "===", "1"}], ",", 
              RowBox[{"mult", "=", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Table", "[", 
                   RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                 RowBox[{"Plus", "@@@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "/@", "mult"}], "=!=", 
               RowBox[{"(", 
                RowBox[{"Plus", "@@@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}]}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{
                 "gaAlgebraToMatrixRepresentation", "::", 
                  "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
               RowBox[{"mult", "=", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                  RowBox[{"Plus", "@@@", 
                   RowBox[{"(", 
                    RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}]}], 
             "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"(", 
                    RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaAlgebraToMatrixRepresentation", "::", "replist"}],
                  ",", "newAl", ",", "repRules"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ",
                "already", " ", "defined"}], ",", " ", 
              RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"newAl", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "=", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"getBase", "[", 
                RowBox[{"newAl", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"Quiet", "->", "quiet"}]}], "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"repNames", "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"alP_Cl", "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"alP", ",", 
                    RowBox[{"++", 
                    RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], 
                 "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], 
                "\[RuleDelayed]", 
                RowBox[{"MapAt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                    "}"}]}], ")"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"algRep", "=", 
             RowBox[{
             "gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
              RowBox[{"(", 
               RowBox[{"Append", "@@@", 
                RowBox[{"Transpose", "[", 
                 RowBox[{"{", 
                  RowBox[{"repNames", ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"BaseVectorMultipliers", ",", "mult"}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"signatureSplittedVectors", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"singleElementOuterMultiply", "[", 
                   RowBox[{"#", ",", "algRep", ",", 
                    RowBox[{
                    "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}]}], "]"}], "&"}], ",", 
                 RowBox[{"Split", "[", 
                  RowBox[{
                   RowBox[{"gaOrthonormalBase", "[", 
                    RowBox[{"newAl", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "===", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}],
                  ",", 
                 RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
                  "\[RuleDelayed]", "singlet"}], ",", 
                 RowBox[{
                  RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
                "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
            "signatureSplittedSortedVectors", "=", "\[IndentingNewLine]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "x", "}"}], ",", 
                 RowBox[{"Sort", "[", 
                  RowBox[{"x", ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                  "]"}]}], "]"}], ",", "signatureSplittedVectors"}], "]"}]}], 
            ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{"algIso", ",", 
                RowBox[{"Cl", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"_", "?", "Positive"}], ",", "0"}], "]"}]}], "]"}], 
              ",", 
              RowBox[{"PrependTo", "[", 
               RowBox[{"signatureSplittedSortedVectors", ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{"algIso", ",", 
                RowBox[{"Cl", "[", 
                 RowBox[{
                  RowBox[{"_", "?", "Positive"}], ",", "0", ",", "0"}], 
                 "]"}]}], "]"}], ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"signatureSplittedSortedVectors", ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"target", "=!=", "Reals"}], ",", 
              RowBox[{"signatureSplittedSortedVectors", "=", 
               RowBox[{
               "Reverse", "/@", "signatureSplittedSortedVectors"}]}]}], "]"}],
             ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"algTrueMinusAlgHelp", "=", 
             RowBox[{"(", 
              RowBox[{"Subtract", "@@", 
               RowBox[{"(", 
                RowBox[{"Most", "/@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@@", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaFromTensorProduct", "[", "al", "]"}], ",", 
                    "algIso"}], "}"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"Switch", "[", 
             RowBox[{"algTrueMinusAlgHelp", ",", 
              RowBox[{"(*", " ", 
               RowBox[{"0", ",", 
                RowBox[{
                "0", " ", "means", " ", "we", " ", "calculate", " ", "in", 
                 " ", "naitive", " ", "algebra"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}], ",", 
              RowBox[{"Flatten", "[", 
               RowBox[{"signatureSplittedSortedVectors", ",", "1"}], "]"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"_Integer", "?", "Negative"}], ",", 
                RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ",", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
                "has", " ", "more", " ", "positive", " ", "signature", " ", 
                "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"removeVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", 
               RowBox[{"addVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Drop", "[", 
                   RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
                  RowBox[{"Sort", "[", 
                   RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                   "]"}]}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"x_Symbol", "\[RuleDelayed]", 
                  RowBox[{
                   RowBox[{"Symbol", "[", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                    "]"}], "]"}], "/;", 
                   RowBox[{
                    RowBox[{"Context", "[", "x", "]"}], "===", 
                    "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"_Integer", "?", "Positive"}], ",", 
                RowBox[{"_Integer", "?", "Negative"}]}], "}"}], ",", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
                "has", " ", "more", " ", "negative", " ", "signature", " ", 
                "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"removeVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", 
               RowBox[{"addVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", 
               RowBox[{
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Sort", "[", 
                   RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"x_Symbol", "\[RuleDelayed]", 
                  RowBox[{
                   RowBox[{"Symbol", "[", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                    "]"}], "]"}], "/;", 
                   RowBox[{
                    RowBox[{"Context", "[", "x", "]"}], "===", 
                    "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "_", ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaAlgebraToMatrixRepresentation", "::", "method"}], ",",
              "method"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "A different syntax of same function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaAlgebraToMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " constructs entire algebra matrix representation if user provides vector \
representations. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "lenghtmismatch"}], "=", 
   "\"\<Number of provided base vector matrices do not match the algebra `1` \
vector number `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraToMatrixRepresentation", "::", "propertymismatch"}], 
    "=", "\"\<Signatures of provided base vectors do not match the algebra \
`1` signature.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{
     RowBox[{"alin", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
     "baseVectorRepresentation_List", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alvectors", ",", 
        RowBox[{"dim", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"First", "[", "baseVectorRepresentation", "]"}], "]"}]}], 
        ",", "sortedBaseVectors", ",", "index2Repl", ",", "replRules", ",", 
        "al", ",", "opElement", ",", "opMatrix"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"al", "=", 
        RowBox[{"gaFromTensorProduct", "[", "alin", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "All"}], "]"}], "]"}], "===", 
          "gaOrthonormalBase"}], ",", 
         RowBox[{"gaDefineOrthonormalBase", "[", 
          RowBox[{"al", ",", "opts"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"al", ",", "All"}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "alvectors", "]"}], "=!=", 
          RowBox[{"Length", "[", "baseVectorRepresentation", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaAlgebraToMatrixRepresentation", "::", "lenghtmismatch"}], ",", 
            "al", ",", 
            RowBox[{"Length", "[", "alvectors", "]"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"baseVectorRepresentation", ",", "\"\<Quaternion\>\""}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"opElement", "=", "Times"}], ";", 
          RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
          RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"IdentityMatrix", "[", "dim", "]"}], "*", "#"}], 
               ")"}], "&"}], "/@", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", "alvectors"}], 
              "]"}]}], "=!=", " ", 
            RowBox[{"opMatrix", "[", 
             RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"sortedBaseVectors", "=", 
            RowBox[{"Sort", "[", 
             RowBox[{"baseVectorRepresentation", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Dot", "[", 
                   RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                 RowBox[{
                  RowBox[{"opMatrix", "[", 
                   RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
             "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaAlgebraToMatrixRepresentation", "::", "propertymismatch"}], ",",
            "al"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "a_", "}"}], ",", 
             RowBox[{"{", "___", "}"}]}], "]"}], "\[RuleDelayed]", "a"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"replRules", "=", 
        RowBox[{"Thread", "[", 
         RowBox[{"Rule", "[", 
          RowBox[{"index2Repl", ",", "sortedBaseVectors"}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "=", 
         RowBox[{
          RowBox[{"opMatrix", "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"gaGetIndex", "/@", 
                 RowBox[{"gaOrthonormalBase", "[", 
                  RowBox[{"al", ",", "All"}], "]"}]}], ")"}], "/.", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"a_", ",", 
                  RowBox[{"{", "___", "}"}]}], "]"}], "\[RuleDelayed]", 
                "a"}]}], ")"}], "/.", "replRules"}], ")"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"opMatrix", "[", "]"}], "->", 
            RowBox[{"IdentityMatrix", "[", "dim", "]"}]}], "}"}]}]}], 
        ")"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{"MatrixQ", "/@", "baseVectorRepresentation"}], ")"}]}]}]}], 
  ";"}]}], "Input"],

Cell["\<\
Explicit check if matrix representation matches symbolic GA orthogonal base \
multiplication. Useless for end user, keep in private context. First argument \
is gaOrthonormalBase[testAlgebra], second argument is matrix representation \
list, which can be generated, for example, as  \
gaAlgebraToMatrixRepresentation[testAlgebra,gaAlgebraToMatrixRepresentation[\
testAlgebra]].\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ", "[", 
    RowBox[{"algebraBase_List", ",", " ", "matrixRepresentation_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"replRules", "=", 
        RowBox[{"Rule", "@@@", 
         RowBox[{"(", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Rest", "/@", 
            RowBox[{"{", 
             RowBox[{"algebraBase", ",", "matrixRepresentation"}], "}"}]}], 
           "]"}], ")"}]}]}], ",", "baseProd", ",", "matrProd", ",", 
       "allTable"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allTable", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"baseProd", "=", 
                RowBox[{
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[GeometricProduct]", 
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}]}], ")"}], "/.", 
              "replRules"}], " ", ",", 
             RowBox[{"matrProd", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
           "True", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"baseProd", "*", 
              RowBox[{"matrixRepresentation", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "===", "matrProd"}], ")"}]}],
           "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"Length", "[", "algebraBase", "]"}], "-", "1"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"And", "@@", 
       RowBox[{"Flatten", "[", "allTable", "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.685413141997261*^9, 3.68541315087189*^9}, {
  3.685413341198981*^9, 3.685413378162685*^9}}],

Cell["\<\
At last define function, which authomatically converts expression to matrix \
representation\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], "=", 
    "\"\<Algebra `1` matrix representation or orthonormal base elements \
either are not yet defined or do not match each other. First define with \
gaAlgebraToMatrixRepresentation[ ] and gaDefineOrthonormalBase[ ].\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"al", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rulesForNonScalars", ",", "allScalars", ",", "allNonScalars"}],
       "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{"MatrixQ", "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"rulesForNonScalars", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"Rest", "[", 
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], ",", 
            RowBox[{"Rest", "[", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
           "]"}], "]"}]}], ";", 
        RowBox[{"allScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", "0", "}"}]}], "]"}], "*", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allNonScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"!", 
             RowBox[{"{", "0", "}"}]}]}], "]"}], "/.", 
          "rulesForNonScalars"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allScalars", "+", "allNonScalars"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input"],

Cell["\<\
We need inverse base elements (not reciprocal) inside Tr !!! (need \
investigation still)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"baseElementInverse", "[", "el_bs", "]"}], ":=", 
      RowBox[{
       RowBox[{"gaReverse", "[", "el", "]"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaReverse", "[", "el", "]"}], "\[GeometricProduct]", "el"}],
         ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"baseElementInverse", "[", "1", "]"}], "=", "1"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentation", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dimensionFactor", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{"MatrixQ", "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Tr", "[", 
                RowBox[{"gaGeometricMatrixProduct", "[", 
                 RowBox[{"matrix", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
              RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
           ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"baseElementInverse", "/@", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], ")"}]}], ")"}]}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input"],

Cell["\<\
Possible ways to improve matrix representation code:
1. Use SparseArrays[ ] to represent large dimension matrices. This becomes \
important, when matrices becomes 32x32 or large.
2. For large algebras representation it would be usefull introduce direct \
multiplication by R(16) matrices. This represents Cl[0,8] and Cl[8,0] \
periodicity of Clifford algebras. Current implementation follows {0,2},{1,1} \
or {2,0} steps only.
3. One could get even more representations if user could specify row/column \
interchange transformation (this is always possible to do after matrix \
representation is calculated).\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Determinants of repsesentations of Clifford algebras"
}], "Subsubsection"],

Cell[TextData[{
 "Definitions of  determinants of matrices with quaternions can be found in  \
Joao Pedro Morais, Svetlin Georgiev, Wolfgang Spro\[Beta]ig, \
\[OpenCurlyDoubleQuote]Real quaternionic calculus handbook\
\[CloseCurlyDoubleQuote], Birkhauser, 2014. These definitons, however are \
useless, because no interpretation is given for the determinant being the \
quaternion. Ian Porteous in  ",
 ButtonBox["[RA-LoCGAaA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 42 says that \[OpenCurlyDoubleQuote]determinant of n\[Cross]n \
quaternionic matrix is defined to be square root of determinant of the matrix \
regarded as 2n\[Cross]2n complex matrix, the later necesarry having \
determinant of nonnegative real number\[CloseCurlyDoubleQuote]. The \
realization below calculates determinat exactly this way, except it do not \
take square root (user can easily take it itself). The other source about \
quaternionic determinants is in Andrzej Trautmann, \
\[OpenCurlyDoubleQuote]Clifford algebras and their representations\
\[CloseCurlyDoubleQuote], Encyclopedia of Mathematical physics, eds. J.-P. \
Francoise, G.L. Naber and Tsou S.T., Oxford, Elsevier, 2006, vol 1., pages \
518-530. In the Algebras section he describes exactly the same approach, \
except no square root is mentioned. He also gives two explicit formulas for \
determinans."
}], "Text"],

Cell[TextData[{
 "In order to calculate determinants the stackexchange link ",
 ButtonBox["http://mathematica.stackexchange.com/questions/21061/how-to-get-\
the-determinant-and-inverse-of-a-large-sparse-symmetric-matrix/21065#21065",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/21061/how-to-get-the-\
determinant-and-inverse-of-a-large-sparse-symmetric-matrix/21065#21065"], 
    None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/21061/how-to-get-the-\
determinant-and-inverse-of-a-large-sparse-symmetric-matrix/21065#21065"],
 " might be usefull. Unfortunatelly some test revealed that the built in ",
 StyleBox["Det[ ]",
  FontWeight->"Bold"],
 " works better."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"smarterDet", "[", "mat_", "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "mat", "]"}], "\[LessEqual]", "10"}]}], ":=", 
   RowBox[{"Det", "[", "mat", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"smarterDet", "[", "mat_", "]"}], ":=", 
   RowBox[{
    RowBox[{"smarterDet", "[", "mat", "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "j"}], "]"}], "]"}], "*", 
       RowBox[{"smarterDet", "[", 
        RowBox[{"Drop", "[", 
         RowBox[{"mat", ",", 
          RowBox[{"{", "1", "}"}], ",", 
          RowBox[{"{", "j", "}"}]}], "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}]}]}], 
  ";"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDet", "::", "fail"}], "=", 
    "\"\<Failed to replace quaternion entries by complex 2x2 matrices in `1`.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"y_", "+", "w_"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"y", ",", "op"}], "]"}], "+", 
            RowBox[{"x", "[", 
             RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"Times", "[", 
              RowBox[{"c_", ",", "d__"}], "]"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaPureLinearity", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDet", "[", 
       RowBox[{"mat_", "?", "MatrixQ"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"mat", ",", 
           RowBox[{"MV", "|", "bs"}]}], "]"}], ",", 
         RowBox[{"Det", "[", "mat", "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"quaternionFreeMatrix", ",", 
             RowBox[{"repRuls", "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"Rest", "[", 
                 RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}],
                  "]"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "c_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"c", "*", 
                  RowBox[{"IdentityMatrix", "[", "2", "]"}]}]}]}], "]"}]}]}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"quaternionFreeMatrix", "=", 
             RowBox[{"ArrayFlatten", "[", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"gaPureLinearity", ",", "mat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
                  RowBox[{"gaPureLinearity", "\[Rule]", "gaTensorProduct"}]}],
                  ")"}], "/.", "repRuls"}], ")"}], "\[IndentingNewLine]", 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"quaternionFreeMatrix", ",", 
                 RowBox[{"MV", "|", "bs"}]}], "]"}], "&&", 
               RowBox[{"MatrixQ", "[", "quaternionFreeMatrix", "]"}]}], ",", 
              RowBox[{"Det", "[", "quaternionFreeMatrix", "]"}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDet", "::", "fail"}], ",", 
                "quaternionFreeMatrix"}], "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
       
       RowBox[{"(", 
        RowBox[{
         RowBox[{"SameQ", "@@", 
          RowBox[{"Dimensions", "[", "mat", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Dimensions", "[", "mat", "]"}], "]"}], "===", "2"}]}], 
        ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell[TextData[{
 "Note.  In  ",
 StyleBox["repRuls",
  FontWeight->"Bold"],
 " rule ",
 StyleBox["gaTensorProduct[c_]\[RuleDelayed]c*IdentityMatrix[2]]",
  FontWeight->"Bold"],
 " should be given last. Otherwise expression  a +\[DoubleStruckE][x] would \
first become  {{a +\[DoubleStruckE][x],0},{0,a +\[DoubleStruckE][x]}} and \
matrix structure will be broken."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector inverse, blade and versor decomposition (not finished yet)"
}], "Section"],

Cell["\<\
Functions ... are rewrites from the article:
G.S. Staples, D. Wylie. Clifford algebra decompositions of conformal \
orthogonal group elements, Clifford Analysis, Clifford Algebras and Their \
Applications, 4 (2015), 223-240
\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaMultivectorParityCheck", ",", "gaInvertableQ", ",", "gaInverse", ",", 
     "ChopTolerance", ",", "Involutions", ",", "gaCliffordDecomposableQ", ",",
      "gaVersorQ", ",", "gaVersorNonIsotropicQ", ",", "NextVector", ",", 
     "gaCliffordDecompose", ",", "gaBladeFactor"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaInvertableQ", "::", "usage"}], "=", 
   "\"\<gaInvertableQ[generalMultivector,opts] returns True if multivector is \
invertable and False othewise. When symbolic coefficients are present return \
calculated expression, which depend on the method used. Two methods realized \
Method\[Rule]gaSignedMagnitudeSquare, and Method\[Rule]Det. The second method \
calculates the algebra matrix representation, then the determinant.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ChopTolerance", "::", "usage"}], "=", 
   "\"\<Option for gaInvertableQ\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMultivectorParityCheck", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecompose", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorQ", "::", "usage"}], "=", 
   "\"\<Test if given multivector is a versor. Experimental. No proof, the \
unclear part is isotropic vectors, which nulify some base vectors.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorNonIsotropicQ", "::", "usage"}], "=", 
   "\"\<Test if given multivector is a versor which contains no isotropic \
vectors. Experimental.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeFactor", "::", "usage"}], "=", 
   "\"\<Gives blade decomposition into vectors using D. Fontinje algorithm.\>\
\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaInverse", "::", "usage"}], "=", 
   "\"\<gaInverse[m] calculates the inverse of a multivector m.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NextVector", "::", "usage"}], 
   "\"\<Option for oneStepCliffordDecompose gaCliffordDecompose, which \
represents next vector to be selected in oneStepCliffordDecompose\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Multivector inverse"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["\<\
Optimize general gaFromMatrixRepresentation[ ] function for inversion. It \
will use Dot and SparseArrays for faster matrix multiplication.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentationSparseNoQuaternions", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dimensionFactor", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{"MatrixQ", "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Tr", "[", 
                RowBox[{"Dot", "[", 
                 RowBox[{"matrix", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{"MapAt", "[", 
                RowBox[{"SparseArray", ",", 
                 RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
                 "1"}], "]"}], ")"}]}], ")"}]}], ")"}], 
          RowBox[{"(", 
           RowBox[{"GeometricAlgebra`p`baseElementInverse", "/@", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], ")"}]}], ")"}]}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.685172019085404*^9, 3.685172034952691*^9}, {
   3.685172069010992*^9, 3.685172073357046*^9}, {3.685172123689754*^9, 
   3.685172162068685*^9}, {3.685172243510469*^9, 3.685172345643579*^9}, {
   3.68517246439253*^9, 3.685172495267591*^9}, {3.685172526205249*^9, 
   3.685172609158187*^9}, {3.68517265128634*^9, 3.68517270213994*^9}, 
   3.685172787173485*^9, {3.685173508713202*^9, 3.685173513464545*^9}, {
   3.685173812989736*^9, 3.685173816705535*^9}, {3.685175872826079*^9, 
   3.685175885353982*^9}, {3.685175928693378*^9, 3.685175940506804*^9}, {
   3.685176260327459*^9, 3.685176274808669*^9}, {3.685332523389624*^9, 
   3.685332545549267*^9}, {3.685414036718503*^9, 3.685414050110082*^9}, {
   3.685414127039034*^9, 3.685414130599573*^9}, {3.685677400675811*^9, 
   3.685677409235624*^9}, 3.685677724854748*^9, 3.685678306050111*^9, {
   3.685679146108881*^9, 3.68567917826972*^9}, {3.685681739376067*^9, 
   3.685681743062993*^9}, {3.685681783538465*^9, 3.685681794743952*^9}}],

Cell["\<\
Below is semi-universal formulas for Clifford algebras p+q<=5, for which fast \
inverse formulas exists. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "5"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "5"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"s1", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"expr", "\[GeometricProduct]", 
            RowBox[{"gaGeneralGradeInvolution", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", "s2", 
         ",", "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"s2", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"s1", "\[GeometricProduct]", 
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s1", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"denom", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"s2", "\[GeometricProduct]", 
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s2", ",", 
             RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numerat", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s1", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s2", ",", 
             RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "4"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "4"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"s1", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"expr", "\[GeometricProduct]", 
            RowBox[{"gaGeneralGradeInvolution", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", "s2", 
         ",", "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"denom", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"s1", "\[GeometricProduct]", 
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s1", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numerat", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s1", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "3"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "3"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"s1", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"expr", "\[GeometricProduct]", 
            RowBox[{"gaGeneralGradeInvolution", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
         "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"denom", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"s1", "\[GeometricProduct]", 
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s1", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numerat", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "\[GeometricProduct]", 
           
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"s1", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "2"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "2"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"denom", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"expr", "\[GeometricProduct]", 
            RowBox[{"gaGeneralGradeInvolution", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
         "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"numerat", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"gaGeneralGradeInvolution", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "1"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"involutionInverse", "[", 
     RowBox[{"expr_", ",", "1"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"denom", "=", 
         RowBox[{"gaPE", "[", 
          RowBox[{"expr", "\[GeometricProduct]", 
           RowBox[{"gaGeneralGradeInvolution", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "numerat"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"numerat", "=", 
        RowBox[{"gaPE", "[", 
         RowBox[{"gaGeneralGradeInvolution", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector invertability test and inverse "
}], "Subsubsection"],

Cell["\<\
Two methods for invertability test. One is to check if  \
gaSignedMagnitudeSquare is zero, or convert to matrix representation and \
check if determinant is zero. In the case if symbolic coefficients are \
present, just return calculated magnitude square and the determinant. This \
might be usefull for futher procesion.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"two", " ", "methods", " ", 
    RowBox[{"realized", ":", " ", 
     RowBox[{"gaSignedMagnitudeSquare", " ", "and", " ", "Det"}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInvertableQ", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "gaSignedMagnitudeSquare"}], ",", 
       RowBox[{"ChopTolerance", "->", 
        RowBox[{"10", "^", 
         RowBox[{"-", "10"}]}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertableQ", "::", "unknownMethod"}], "=", 
     "\"\<Invertability check method Method->`1` is unknown. Possible values \
are gaSignedMagnitudeSquare and Det.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertableQ", "::", "multipleAlgebras"}], "=", 
     "\"\<Expression contains elements of different algebras `1`. Don't know \
how to continue.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaInvertableQ", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"method", "=", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaInvertableQ", ",", "Method"}], "]"}]}]}], ",", 
          RowBox[{"chopTol", "=", 
           RowBox[{
            RowBox[{"ChopTolerance", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaInvertableQ", ",", "ChopTolerance"}], "]"}]}]}], ",", 
          "testResult", ",", "theAlgebra"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "method", ",", "\[IndentingNewLine]", "gaSignedMagnitudeSquare", ",", 
          RowBox[{
           RowBox[{"testResult", "=", 
            RowBox[{"Chop", "[", 
             RowBox[{
              RowBox[{"gaPE", "[", 
               RowBox[{"gaSignedMagnitudeSquare", "[", 
                RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], ",", 
              "chopTol"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"testResult", "===", "0"}], ",", "False", ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"AllTrue", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"testResult", "+", "Nothing"}], ")"}]}], ")"}], "/.", 
                  RowBox[{"_bs", "\[Rule]", "1"}]}], ",", "NumericQ"}], "]"}],
                ",", "True", ",", 
               RowBox[{"testResult", "\[NotEqual]", "0"}]}], "]"}]}], "]"}]}],
           ",", "\[IndentingNewLine]", "Det", ",", 
          RowBox[{
           RowBox[{"theAlgebra", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
           ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "theAlgebra", "]"}], ">", "1"}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaInvertableQ", "::", "multipleAlgebras"}], ",", 
               "theAlgebra"}], "]"}], ",", 
             RowBox[{
              RowBox[{"theAlgebra", "=", 
               RowBox[{"theAlgebra", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              
              RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
               RowBox[{"theAlgebra", ",", 
                RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
                 RowBox[{"theAlgebra", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
                  RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}], ",", 
                  RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}], ",", 
                RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"testResult", "=", 
               RowBox[{"Chop", "[", 
                RowBox[{
                 RowBox[{"Det", "[", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{"expr", ",", "theAlgebra"}], "]"}], "]"}], ",", 
                 "chopTol"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"testResult", "===", "0"}], ",", "False", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"NumericQ", "[", "testResult", "]"}], ",", "True", 
                  ",", 
                  RowBox[{"testResult", "\[NotEqual]", "0"}]}], "]"}]}], 
               "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
          "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaInvertableQ", "::", "unknownMethod"}], ",", "method"}],
            "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input"],

Cell["\<\
True multivector inverse of multivector. Method gaSignedMagnitudeSquare can \
be extended to include not factored vectors, but also any factors. Then one \
needs to calculate inverses of factors, not entire product. This is not yet \
implemented.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"two", " ", "methods", " ", 
    RowBox[{"realized", ":", " ", 
     RowBox[{"gaSignedMagnitudeSquare", " ", "and", " ", "Det"}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"ChopTolerance", "->", 
        RowBox[{"10", "^", 
         RowBox[{"-", "10"}]}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInverse", "::", "unknownMethod"}], "=", 
     "\"\<Inversion method Method->`1` is unknown. Possible values are \
gaSignedMagnitudeSquare and Det. The Method\[Rule]gaSignedMagnitudeSquare \
will only give true inverse for blades and versors. For general multivector \
it will give what is called pseudoinverse in the literature. Method\[Rule]Det \
will give true inverse for general multivector. It is based, however, on \
inverse of multivector matrix representation and therefore is slow. The \
default is to use Method\[Rule]gaSignedMagnitudeSquare for base vectors and \
factored versors, Method->Involutions for algrebras with p+q<=5 and Method\
\[Rule]Det in all other cases\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInverse", "::", "zero"}], "=", 
     "\"\<Magnitude or matrix representation determinant of multivector `1` \
is zero.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"1", "/", "expr"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"bs", "|", "MV"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"method", "=", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "Method"}], "]"}]}]}], ",", 
            RowBox[{"chopTol", "=", 
             RowBox[{
              RowBox[{"ChopTolerance", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "ChopTolerance"}], "]"}]}]}], ",", 
            "theMethod", ",", "testResult", ",", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"Union", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
            ",", "theResult", ",", "dim"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], ",",
             " ", 
            RowBox[{
            "decide", " ", "which", " ", "one", " ", "of", " ", "methods", 
             " ", "to", " ", "use"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"method", "===", "Automatic"}], ",", 
             RowBox[{"(*", " ", 
              RowBox[{
              "check", " ", "if", " ", "expr", " ", "is", " ", "base", " ", 
               "element", " ", "or", " ", "factored", " ", "versor"}], "*)"}],
              "\[IndentingNewLine]", 
             RowBox[{"Which", "[", 
              RowBox[{
               RowBox[{"MatchQ", "[", 
                RowBox[{"expr", ",", 
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"Times", "[", 
                   RowBox[{"c_.", ",", "_bs"}], "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"theMethod", "=", "gaSignedMagnitudeSquare"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"MemberQ", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"GeometricProduct", ",", "OuterProduct"}], "}"}], 
                   ",", 
                   RowBox[{"Head", "[", "expr", "]"}]}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"Union", "[", 
                   RowBox[{"gaGetGrade", "/@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "expr"}], ")"}]}], "]"}], "===", 
                  RowBox[{"{", 
                   RowBox[{"{", "1", "}"}], "}"}]}], ",", "False"}], "]"}], 
               ",", 
               RowBox[{"theMethod", "=", "gaSignedMagnitudeSquare"}], ",", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                 RowBox[{
                 "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"gaVectorSpaceDimension", "@@", "theAlgebra"}], 
                 ")"}], "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
               RowBox[{"theMethod", "=", "Involutions"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                 " ", "do", " ", "generic", " ", "inverse"}], "*)"}], 
               "\[IndentingNewLine]", "True", ",", 
               RowBox[{"theMethod", "=", "Det"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"theMethod", "=", "method"}]}], "\[IndentingNewLine]", 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"calculate", " ", "inverse"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{
            "theMethod", ",", "\[IndentingNewLine]", 
             "gaSignedMagnitudeSquare", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"testResult", "=", 
               RowBox[{"Chop", "[", 
                RowBox[{
                 RowBox[{"gaPE", "[", 
                  RowBox[{"gaSignedMagnitudeSquare", "[", 
                   RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], ",", 
                 "chopTol"}], "]"}]}], ";", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"testResult", "===", "0"}], ",", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaInverse", "::", "zero"}], ",", "expr"}], "]"}], 
                 ";", 
                 RowBox[{"theResult", "=", "Infinity"}]}], ",", 
                RowBox[{"theResult", "=", 
                 RowBox[{
                  RowBox[{"gaReverse", "[", 
                   RowBox[{"expr", ",", "opts"}], "]"}], "/", 
                  "testResult"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
             "Involutions", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"dim", "=", 
               RowBox[{"gaVectorSpaceDimension", "@@", 
                RowBox[{"(", "theAlgebra", ")"}]}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"theResult", "=", 
               RowBox[{"involutionInverse", "[", 
                RowBox[{"expr", ",", "dim"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", "Det", ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "theAlgebra", "]"}], ">", "1"}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaInvertableQ", "::", "multipleAlgebras"}], ",", 
                 "theAlgebra"}], "]"}], ",", 
               RowBox[{
                RowBox[{"theAlgebra", "=", 
                 RowBox[{"theAlgebra", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"Off", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", "::", "smaller"}],
                  "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
                 RowBox[{"theAlgebra", ",", 
                  RowBox[{"SparseArray", "/@", 
                   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
                    RowBox[{"theAlgebra", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
                    RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], 
                    "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"On", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", "::", "smaller"}],
                  "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"testResult", "=", 
                 RowBox[{"gaToMatrixRepresentation", "[", 
                  RowBox[{"expr", ",", "theAlgebra"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Chop", "[", 
                    RowBox[{
                    RowBox[{"Det", "[", "testResult", "]"}], ",", "chopTol"}],
                     "]"}], "===", "0"}], ",", 
                  RowBox[{
                   RowBox[{"Message", "[", 
                    RowBox[{
                    RowBox[{"gaInverse", "::", "zero"}], ",", "expr"}], "]"}],
                    ";", 
                   RowBox[{"theResult", "=", "Infinity"}]}], ",", 
                  RowBox[{"theResult", "=", 
                   RowBox[{"gaPE", "[", 
                    RowBox[{
                    "gaFromMatrixRepresentationSparseNoQuaternions", "[", 
                    RowBox[{
                    RowBox[{"Inverse", "[", "testResult", "]"}], ",", 
                    "theAlgebra"}], "]"}], "]"}]}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "_", 
             ",", 
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaInvertableQ", "::", "unknownMethod"}], ",", 
               "method"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           "theResult"}]}], "\[IndentingNewLine]", "]"}], "/;", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_bs"}], "]"}]}]}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into geometric product"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help and decomposition test functions"
}], "Subsubsection"],

Cell["Here are some criteria when ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "True", " ", "if", " ", "all", " ", "terms", " ", "of", " ", "u", " ", 
    "are", " ", "of", " ", "even", " ", "grade", " ", "or", " ", "all", " ", 
    "terms", " ", "are", " ", "of", " ", "odd", " ", "grade"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaMultivectorParityCheck", "[", "u_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"allGrades", "=", 
        RowBox[{"gaGetGrade", "[", "u", "]"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "EvenQ"}], "]"}], "||", 
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "OddQ"}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gradeParityCheck", "[", "gradeList_List", "]"}], ":=", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "EvenQ"}], "]"}], "||", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "OddQ"}], "]"}]}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Decomposability", " ", 
    RowBox[{"Test", ".", " ", "Necessary"}], " ", "in", " ", "indefinite", 
    " ", "signatures"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "[", "u_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"allGrades", "=", 
       RowBox[{"gaGetGrade", "[", "u", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
             RowBox[{"Equal", "[", 
              RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaSignedMagnitudeSquare", "[", "u", "]"}], "]"}], "]"}], 
         ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaSignedMagnitudeSquare", "[", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"u", ",", 
              RowBox[{"{", 
               RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], "]"}],
            "]"}], "===", "0"}], ",", 
         RowBox[{"Throw", "[", "False", "]"}], ",", 
         RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}]}]], "Input"],

Cell["\<\

This is experimental (unproved) versor test. Versor here is defined as a \
geometric product of vectors. Important note: vectors can be isotropic (null) \
here. If we do not allow isotropic vectors (like in [GSSDW-CADoCOGE]), then \
we should remove the zero check condition.\
\>", "Text"],

Cell[TextData[{
 "It checks if multivector consist of either of only even or only odd grades \
and then computes A ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["e", "i"], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["A", "~"], TraditionalForm]]],
 " for each of base vectors. If after transformation base vectors remains \
vectors, then we assume A is a versor. If for some vectors after \
transformation  we get zero, this means we have at least one izotropic \
vector. The zero position in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["e", "i"], TraditionalForm]]],
 "list  corresponds to that base vector. The question then is how to proceed \
further. Does this spoil the test? There can be more than one such vectors. \
Should we remove such base vectors and repeat test? If so, then versors which \
consist entirely from izotropic vectors will be entirely removed. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaVersorQ", "[", "generalMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theAlgebra", "=", 
       RowBox[{"Union", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"generalMV", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
      ",", 
      RowBox[{"generalMVexpanded", "=", 
       RowBox[{"gaPE", "[", "generalMV", "]"}]}], ",", "baseVectors", ",", 
      "reversedMV"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{
         "gaMultivectorParityCheck", "[", "generalMVexpanded", "]"}]}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"baseVectors", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"gaOrthonormalBase", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], "&"}], "@@", "theAlgebra"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"reversedMV", "=", 
       RowBox[{"gaReverse", "[", "generalMVexpanded", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
              "]"}], "\[GeometricProduct]", "reversedMV"}], "]"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}], ",", "\"\<ok\>\"", ",", 
          RowBox[{"{", "0", "}"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Unequal", "[", 
             RowBox[{
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaPE", "[", 
                 RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
                 "]"}], "\[GeometricProduct]", "reversedMV"}], "]"}], ",", 
              "0"}], "]"}], ",", 
            RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ",", "_", ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
       "baseVectors"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}], ";"}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaVersorNonIsotropicQ", "[", "generalMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theAlgebra", "=", 
       RowBox[{"Union", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"generalMV", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
      ",", 
      RowBox[{"generalMVexpanded", "=", 
       RowBox[{"gaPE", "[", "generalMV", "]"}]}], ",", "baseVectors", ",", 
      "reversedMV"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{
         "gaMultivectorParityCheck", "[", "generalMVexpanded", "]"}]}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"baseVectors", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"gaOrthonormalBase", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], "&"}], "@@", "theAlgebra"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"reversedMV", "=", 
       RowBox[{"gaReverse", "[", "generalMVexpanded", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
              "]"}], "\[GeometricProduct]", "reversedMV"}], "]"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}], ",", "\"\<ok\>\"", ",", "_", ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
       "baseVectors"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"gaInvertableQ", "[", "generalMV", "]"}], "]"}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}], ";"}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Decomposition of versor"
}], "Subsubsection"],

Cell["\<\
 Reimplementation of Staples versor factorization  [GSSDW-CADoCOGE] algorithm.\
\>", "Text"],

Cell[TextData[{
 "Vector wrapping x->B x ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]]],
 "/|B|^2 , where B is assumed to be a blade and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]]],
 " denotes its Clifford conjugation (reverse and grade inverse) \
transformation is important enought to give name ,"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wrapCliffordConjugate", "[", 
   RowBox[{"wrapArg_", ",", "wrappingBlade_"}], "]"}], ":=", 
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"wrappingBlade", "\[GeometricProduct]", "wrapArg"}], "]"}], 
      "\[GeometricProduct]", 
      RowBox[{"gaCliffordConjugate", "[", "wrappingBlade", "]"}]}], "]"}], 
    "/", 
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"gaSignedMagnitudeSquare", "[", "wrappingBlade", "]"}], "]"}]}], 
   "]"}]}]], "Input"],

Cell["\<\
It is useful to have single decomposition step of factoring one vector per \
step. In the last step we reverse obtained vectors order in order it be ready \
for multiplication of entire set.  Note, that due to huge numbers procedure \
might not be stable numerically.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "oneStepCliffordDecompose", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"NextVector", "\[Rule]", 
      RowBox[{"{", "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{"decomposableMV_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"oneStepCliffordDecompose", "[", 
       RowBox[{
        RowBox[{"{", "decomposableMV", "}"}], ",", "opts"}], "]"}], "/;", 
      RowBox[{"NumericQ", "[", 
       RowBox[{"decomposableMV", "/.", 
        RowBox[{
         RowBox[{"bs", "[", "__", "]"}], "\[RuleDelayed]", "1"}]}], "]"}]}]}],
     ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"decomposableMV_", ",", "outputVectors___"}], "}"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"allGrades", "=", 
          RowBox[{"gaGetGrade", "[", "decomposableMV", "]"}]}], ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"First", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"decomposableMV", ",", "_Cl", ",", "Infinity"}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"theElement", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"NextVector", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"oneStepCliffordDecompose", ",", "NextVector"}], "]"}]}],
            ")"}]}], ",", " ", "maxGrade", ",", "selVector", ",", 
         "wrappedSelVector", ",", "wrappedSelVectorSignedMagnitudeSquare"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"maxGrade", "=", 
            RowBox[{"Last", "[", "allGrades", "]"}]}], ")"}], ">", "1"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"theElement", "=!=", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"selVector", "=", "theElement"}], ",", 
            RowBox[{"selVector", "=", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"RandomChoice", "[", 
                   RowBox[{"Union", "@@", 
                    RowBox[{"gaGetIndex", "[", "decomposableMV", "]"}]}], 
                   "]"}], "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVector", "=", 
           RowBox[{"(", 
            RowBox[{"selVector", "-", 
             RowBox[{"wrapCliffordConjugate", "[", 
              RowBox[{"selVector", ",", "decomposableMV"}], "]"}]}], ")"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "=", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaSignedMagnitudeSquare", "[", "wrappedSelVector", "]"}],
             "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "!=", "0."}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "[", 
                 RowBox[{
                 "decomposableMV", "\[GeometricProduct]", 
                  "wrappedSelVector"}], "]"}], "/", 
                "wrappedSelVectorSignedMagnitudeSquare"}], "]"}], ",", 
              "outputVectors", ",", "wrappedSelVector"}], "}"}]}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Reverse", "[", 
          RowBox[{"{", 
           RowBox[{"outputVectors", ",", "decomposableMV"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input"],

Cell["\<\
Before starting decomposition we check if input is decomposible (this is \
slowdown) . \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCliffordDecompose", "::", "unable"}], "=", 
    "\"\<Multivector failed decomposition test. This method fails if versor \
contains an isotropic vector.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCliffordDecompose", "[", "decomposibleMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allGrades", "=", 
      RowBox[{"gaGetGrade", "[", "decomposibleMV", "]"}]}], "}"}], ",", " ", 
    RowBox[{"If", "[", 
     RowBox[{"(*", " ", 
      RowBox[{"test", " ", "decomposability", " ", "before", " ", "start"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Catch", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
              RowBox[{"Equal", "[", 
               RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaSignedMagnitudeSquare", "[", "decomposibleMV", "]"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaSignedMagnitudeSquare", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"decomposibleMV", ",", 
               RowBox[{"{", 
                RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], 
             "]"}], "]"}], "===", "0"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}], ",", 
          RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"(*", " ", 
       RowBox[{
       "start", " ", "decomposition", " ", "step", " ", "by", " ", "step"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"(", 
        RowBox[{"Nest", "[", 
         RowBox[{"oneStepCliffordDecompose", ",", "decomposibleMV", ",", 
          RowBox[{"Last", "[", 
           RowBox[{"gaGetGrade", "[", "decomposibleMV", "]"}], "]"}]}], "]"}],
         ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"gaCliffordDecompose", "::", "unable"}], "]"}], ";", 
       "$Failed"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into blades"
}], "Subsection"],

Cell[TextData[{
 "The gaBladeFactor[ ] is Fontijne blade factorization algotith, which is \
based on projection operator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["q", "i"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["p", "i"], "\[LeftContract]", " ", 
       SuperscriptBox["B", 
        RowBox[{"-", "1"}]]}], ")"}], "B"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["q", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is (if not zero) a factor of B.  This is described in D. Fontijne \
\[OpenCurlyDoubleQuote]Efficient Algorithms for factorrization and Join of \
Blades\[CloseCurlyDoubleQuote]. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaBladeFactor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<Fontijne\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBladeFactor", "::", "unknownMethod"}], "=", 
    "\"\<Specified method Method->`1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], ",", 
     RowBox[{"wrap", "=", "wrapHead"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaBladeFactor", "[", 
     RowBox[{"blade_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"method", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Method", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaBladeFactor", ",", "Method"}], "]"}]}], ")"}]}], ",", 
        "allBlades", ",", "largestAbsCoef", ",", "maxCoef", ",", 
        "normalizedBlade", ",", "theBlade", ",", "inversedTheBlade", ",", 
        "bladeVectors"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"method", ",", "\"\<Fontijne\>\"", ",", 
        RowBox[{
         RowBox[{"allBlades", "=", 
          RowBox[{"List", "@@@", 
           RowBox[{"List", "@@", 
            RowBox[{"(", 
             RowBox[{"Collect", "[", 
              RowBox[{"blade", ",", "_bs", ",", "wrapHead"}], "]"}], 
             ")"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"largestAbsCoef", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"allBlades", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_bs", "\[Rule]", "1"}], ",", 
              RowBox[{"wrapHead", "\[Rule]", "Abs"}]}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"maxCoef", ",", "theBlade"}], "}"}], "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"Extract", "[", 
              RowBox[{"allBlades", ",", 
               RowBox[{"Position", "[", 
                RowBox[{"allBlades", ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", "largestAbsCoef", "]"}], ",", 
                    "_"}], "}"}], "|", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", 
                    RowBox[{"-", "largestAbsCoef"}], "]"}], ",", "_"}], 
                   "}"}]}]}], "]"}]}], "]"}], "]"}], "/.", 
            RowBox[{"wrapHead", "\[Rule]", "Identity"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"normalizedBlade", "=", 
          RowBox[{"Collect", "[", 
           RowBox[{
            RowBox[{"blade", "/", "maxCoef"}], ",", "_bs"}], "]"}]}], ";", 
         RowBox[{"inversedTheBlade", "=", 
          RowBox[{"gaInverse", "[", "theBlade", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bladeVectors", "=", 
          RowBox[{"theBlade", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"ind_List", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "alg_", ",", "any___"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "alg", ",", "any"}], 
                 "]"}], "&"}], "/@", "ind"}], ")"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Prepend", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"LeftContract", "[", 
               RowBox[{
                RowBox[{"LeftContract", "[", 
                 RowBox[{"#", ",", "inversedTheBlade"}], "]"}], ",", 
                "normalizedBlade"}], "]"}], "]"}], "&"}], "/@", 
            "bladeVectors"}], ",", "maxCoef"}], "]"}]}], 
        "\[IndentingNewLine]", ",", "_", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaBladeFactor", "::", "unknownMethod"}], ",", "method"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Groebner Base (just very beginning)"
}], "Section"],

Cell[" Just beginning", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gbLeadingTerm", ",", "gbLeadingMonomial", ",", "gbLeadingCoefficient"}], 
    "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "::", "usage"}], "=", 
   "\"\<gbLeadingTerm[expr_,ordering_String] returns leading term of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "::", "usage"}], "=", 
   "\"\<gbLeadingMonomial[expr_,ordering_String] returns leading monomial of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "::", "usage"}], "=", 
   "\"\<gbLeadingCoefficient[expr_,ordering_String] returns leading \
coefficient of multivector polynomial written in orthonormal base. Defined \
orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". \
These pure orderings can be proceeded with \\\"Deg[]\\\", and \
\\\"InvDeg[]\\\" wrappers, i.e. \\\"Deg[InvLex]\\\", etc..., totally giving \
4*3 possible orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection"],

Cell["No", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Leading term, leading monomial and leading coefficient"
}], "Subsection"],

Cell[TextData[{
 " Ordering functions (i.e. ",
 StyleBox["gaOrderedQ",
  FontWeight->"Bold"],
 "[ ], etc... )  are realised in section ",
 StyleBox["3. Objects: orthonormal base notation and definition.",
  FontSlant->"Italic"],
 " Defined noncommutative orderings are \\\[CloseCurlyDoubleQuote] Lex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote]. These pure orderings can be proceeded with \\\
\[CloseCurlyDoubleQuote] Deg[]\\\[CloseCurlyDoubleQuote], and \\\
\[CloseCurlyDoubleQuote] InvDeg[]\\\[CloseCurlyDoubleQuote] wrappers, totally \
giving 4*3 possible orderings. Orders \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote] and the default order \\\[CloseCurlyDoubleQuote] \
InvDeg[Lex]\\\[CloseCurlyDoubleQuote] are not addmissible and cannot be used \
as Groebner base monomial orders.  Commutative coefficients use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s orderings i.e. \\\[CloseCurlyDoubleQuote]Lexicographic \
\\\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] DegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
DegreeReverseLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeDegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
NegativeDegreeReverseLexicographic \\\[CloseCurlyDoubleQuote] and \\\
\[CloseCurlyDoubleQuote] Reverse[Lexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[DegreeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[DegreeReverseLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[NegativeDegreeLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeDegreeReverseLexicographic]\\\
\[CloseCurlyDoubleQuote]."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exprList", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"Plus", "[", 
          RowBox[{"expr", ",", "Nothing"}], "]"}]}], ")"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "exprList", "]"}], "===", "1"}], ",", "expr", 
       ",", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], ",", "#1", ",", "#2"}], "]"}], 
          "&"}], ",", "exprList"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gbLeadingMonomial", "[", 
       RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "bs"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"mvZeroGradeQ", "[", "gblt", "]"}], ",", "1", " ", ",", 
       RowBox[{"gbLeadingMonomial", "[", "gblt", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", 
        RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "c"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", "c_", "]"}], ":=", 
       RowBox[{"c", "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "baseSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"gbLeadingCoefficient", "[", "gblt", "]"}]}], "]"}]}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". xxx"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 "yyy"
}], "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector derivatives (for further work)"
}], "Section"],

Cell["IntricitDerivative, covariantderivative.... Just started", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "mvD", ",", "mvDArg", ",", "\[DoubleStruckE]\[EmptyDownTriangle]", ",", 
     "mvDerivativesToBase", ",", "mvExpandDerivatives"}], "}"}]}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 Evaluatable->False],

Cell["Function description", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "::", "usage"}], "=", 
   "\"\<The nabla operator of geometric algebra.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[DoubleStruckE]\[EmptyDownTriangle]", "::", "usage"}], "=", 
   "\"\<Notation and shortcut of the nabla operator of geometric algebra in \
orthogonal \[DoubleStruckE][n] base.\>\""}], ";"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDerivativesToBase", "::", "usage"}], "=", 
   "\"\<DerivativesToToBase[expr_] expands expr with derivatives into \
standard base of gaRunningAlgebra.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection"],

Cell["\<\
Explicitly state what operators are differentiation operators. This \
information is necessary when converting into base representation.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"differentiationSymbolList", "=", 
   RowBox[{"{", "\[DoubleStruckE]\[EmptyDownTriangle]", "}"}]}], 
  ";"}]], "Input",
 Evaluatable->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notations and input aliases"
}], "Subsection"],

Cell["\<\
 mvArg[ ] uses brackets to denote expression on which differentiation \
operator is acting. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDArg", "[", 
      RowBox[{"expr_", ",", "id_mvDTarget"}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bras", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<(\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<(\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           RowBox[{"Reverse", "[", "id", "]"}]}], ")"}]}]}], ",", 
       RowBox[{"kets", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<)\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<)\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           "id"}], ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TemplateBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "expr", "]"}], ",", "id"}], "}"}], ",", 
       "\"\<mvDArg\>\"", ",", 
       RowBox[{"DisplayFunction", "\[Rule]", 
        RowBox[{"Evaluate", "[", 
         RowBox[{
          RowBox[{"StyleBox", "[", 
           RowBox[{
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"bras", ",", "#1", ",", "kets"}], "}"}], "]"}], ",", 
            RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
            RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
          "&"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linearity, main properties"
}], "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaSetCommutative", "/@", 
   RowBox[{"{", "mvD", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "\[DoubleStruckE]\[EmptyDownTriangle]", "}"}]}], 
  ";"}]}], "Input",
 Evaluatable->False],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector argument differentiation function ",
 "mvDArg[ ] "
}], "Subsubsection"],

Cell[TextData[{
 " ",
 StyleBox["mvArg[expr, id ] ",
  FontWeight->"Bold"],
 " wraps expression which is differentiated by operator with target id"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDArg", "[", 
    RowBox[{"ex_", ",", 
     RowBox[{"mvDTarget", "[", "]"}]}], "]"}], ":=", "ex"}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricAlgebra`check", "::", "Derivative"}], "=", 
   "\"\<Something wrong `1`\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Close Package"
}], "Section"],

Cell["\<\
Execute this section in order to test if all functions are defined in proper \
order\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heads", " ", "=", " ", 
  RowBox[{"MissingForwardDeclarations", "[", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"heads", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{"a", " ", "nice", " ", "development", " ", "aid"}], " ", "*)"}], 
    "  ", 
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<ERROR, need forwards, or make calls only from private context:\\n\>\
\"", " ", "<>", "  ", 
      RowBox[{"StringListPrintableString", "[", "heads", "]"}]}], "]"}]}], 
   "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "heads", "]"}], ";"}], " "}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$GAPackageHasLoaded", " ", "=", " ", "True"}], ";"}]], "Input"],

Cell["\<\
No need for EndPackage[], because End[] was used in DeclareIntoContext[]??? \
Seems we need it.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"EndPackage", "[", "]"}], ";"}], " "}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackageContext", "<>", " ", "\"\<*\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BaseVectorAlgebra\"\>", ",", "\<\"BaseVectorMultipliers\"\>", 
   ",", "\<\"BeginPrivate\"\>", ",", "\<\"Cl\"\>", 
   ",", "\<\"CollectCoefficients\"\>", ",", "\<\"DeclareIntoContext\"\>", 
   ",", "\<\"DorstProduct\"\>", ",", "\<\"DP\"\>", ",", "\<\"EndPrivate\"\>", 
   ",", "\<\"gaAlgebraMultiplicationTable\"\>", 
   ",", "\<\"gaAlgebraToMatrixRepresentation\"\>", 
   ",", "\<\"gaAntiCommutator\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeries\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeriesData\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffTermLogarithm\"\>", 
   ",", "\<\"gaBCHSeries\"\>", ",", "\<\"gaBladeFactor\"\>", 
   ",", "\<\"gaCE\"\>", ",", "\<\"gaCliffordConjugate\"\>", 
   ",", "\<\"gaCliffordDecomposableQ\"\>", ",", "\<\"gaCliffordDecompose\"\>",
    ",", "\<\"gaCommutativeAllQ\"\>", 
   ",", "\<\"gaCommutativeMonomialOrder\"\>", ",", "\<\"gaCommutativeQ\"\>", 
   ",", "\<\"gaCommutator\"\>", ",", "\<\"gaCommutatorExpand\"\>", 
   ",", "\<\"gaCos\"\>", ",", "\<\"gaCosh\"\>", ",", "\<\"gaDefineInput\"\>", 
   ",", "\<\"gaDefineNotation\"\>", ",", "\<\"gaDefineOrthonormalBase\"\>", 
   ",", "\<\"gaDet\"\>", ",", "\<\"gaExp\"\>", 
   ",", "\<\"gaFromTensorProduct\"\>", ",", "\<\"gaGeometricCos\"\>", 
   ",", "\<\"gaGeometricCosh\"\>", ",", "\<\"gaGeometricExp\"\>", 
   ",", "\<\"gaGeometricMatrixProduct\"\>", 
   ",", "\<\"gaGeometricProductSeries\"\>", ",", "\<\"gaGeometricSin\"\>", 
   ",", "\<\"gaGeometricSinh\"\>", ",", "\<\"gaGeometricTan\"\>", 
   ",", "\<\"gaGeometricTanh\"\>", ",", "\<\"gaGetGrade\"\>", 
   ",", "\<\"gaGetIndex\"\>", ",", "\<\"gaGetMV\"\>", 
   ",", "\<\"gaGetSignature\"\>", ",", "\<\"gaGPMatrixPower\"\>", 
   ",", "\<\"gaGPPower\"\>", ",", "\<\"gaGradeInverse\"\>", 
   ",", "\<\"gaGradesOnly\"\>", ",", "\<\"gaHomogeneusGradeQ\"\>", 
   ",", "\<\"gaIndexSort\"\>", ",", "\<\"gaInverse\"\>", 
   ",", "\<\"gaLinearQ\"\>", 
   ",", "\<\"gaListDefinedElementaryRepresentations\"\>", 
   ",", "\<\"gaMagnitude\"\>", ",", "\<\"gaMatrixRepresentation\"\>", 
   ",", "\<\"gaMultivectorParityCheck\"\>", 
   ",", "\<\"gaNegativeSignatureIndexList\"\>", 
   ",", "\<\"gaNonCommutativeMonomialOrder\"\>", ",", "\<\"gaNorm\"\>", 
   ",", "\<\"gaNormalize\"\>", ",", "\<\"gaNotation\"\>", 
   ",", "\<\"gaOPMatrixPower\"\>", ",", "\<\"gaOPPower\"\>", 
   ",", "\<\"gaOrderedQ\"\>", ",", "\<\"gaOrthonormalBase\"\>", 
   ",", "\<\"gaOrthonormalToReciprocal\"\>", 
   ",", "\<\"gaOuterMatrixProduct\"\>", ",", "\<\"gaParameterSeries\"\>", 
   ",", "\<\"gaPE\"\>", ",", "\<\"gaPrimitiveIdempotent\"\>", 
   ",", "\<\"gaProductExpand\"\>", ",", "\<\"gaRadonHurwitzNumber\"\>", 
   ",", "\<\"gaReverse\"\>", ",", "\<\"gaRunningAlgebra\"\>", 
   ",", "\<\"gaSeries\"\>", ",", "\<\"gaSeriesData\"\>", 
   ",", "\<\"gaSetCommutative\"\>", ",", "\<\"gaSetLinear\"\>", 
   ",", "\<\"gaSetNonCommutative\"\>", ",", "\<\"gaSignedMagnitudeSquare\"\>",
    ",", "\<\"gaSin\"\>", ",", "\<\"gaSinh\"\>", ",", "\<\"gaTan\"\>", 
   ",", "\<\"gaTanh\"\>", ",", "\<\"gaTensorProduct\"\>", 
   ",", "\<\"gaTestIndexOrdering\"\>", 
   ",", "\<\"gaToMatrixRepresentation\"\>", ",", "\<\"gaToTensorProduct\"\>", 
   ",", "\<\"gaVectorSpaceDimension\"\>", 
   ",", "\<\"gaZassenhausCoefficient\"\>", ",", "\<\"gaZassenhausSeries\"\>", 
   ",", "\<\"gaZassenhausSeriesData\"\>", ",", "\<\"gbLeadingCoefficient\"\>",
    ",", "\<\"gbLeadingMonomial\"\>", ",", "\<\"gbLeadingTerm\"\>", 
   ",", "\<\"GeometricProduct\"\>", ",", "\<\"GP\"\>", 
   ",", "\<\"InnerProduct\"\>", ",", "\<\"IP\"\>", ",", "\<\"LC\"\>", 
   ",", "\<\"LeftContract\"\>", ",", "\<\"MissingForwardDeclarations\"\>", 
   ",", "\<\"MV\"\>", ",", "\<\"mvDownUp\"\>", ",", "\<\"mvZeroGradeQ\"\>", 
   ",", "\<\"OP\"\>", ",", "\<\"OuterProduct\"\>", 
   ",", "\<\"QuaternionIsomorphismRules\"\>", ",", "\<\"RC\"\>", 
   ",", "\<\"RightContract\"\>", ",", "\<\"ShowStatus\"\>", 
   ",", "\<\"StartingElement\"\>", ",", "\<\"StringListPrintableString\"\>", 
   ",", "\<\"TargetMatrices\"\>", ",", "\<\"TheContextSymbolList\"\>", 
   ",", "\<\"\[DoubleStruckE]\"\>", ",", "\<\"$gaGlobalProperties\"\>", 
   ",", "\<\"$GAPackageContext\"\>", ",", "\<\"$GAPackageHasLoaded\"\>", 
   ",", "\<\"$GAPackageInputAliases\"\>", 
   ",", "\<\"$GAPackageOnlyContextPath\"\>", 
   ",", "\<\"$GAPackagePrivateContext\"\>", 
   ",", "\<\"$GAUnprotectionList\"\>"}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackagePrivateContext", "<>", " ", "\"\<*\>\""}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<a\>\"", ",", "\"\<A\>\"", ",", "\"\<a1\>\"", ",", "\"\<a1$\>\"", ",", 
   "\"\<a2\>\"", ",", "\"\<a2$\>\"", ",", "\"\<a3\>\"", ",", "\"\<a3$\>\"", 
   ",", "\"\<aa\>\"", ",", "\"\<aa$\>\"", ",", "\"\<accept\>\"", ",", 
   "\"\<accepted\>\"", ",", "\"\<acl\>\"", ",", "\"\<acl$\>\"", ",", 
   "\"\<additionalTestFunction\>\"", ",", "\"\<addVectorList\>\"", ",", 
   "\"\<addVectorList$\>\"", ",", "\"\<al\>\"", ",", "\"\<al1\>\"", ",", 
   "\"\<al1$\>\"", ",", "\"\<al2\>\"", ",", "\"\<al2$\>\"", ",", 
   "\"\<alB\>\"", ",", "\"\<alB$\>\"", ",", "\"\<alc\>\"", ",", 
   "\"\<alc$\>\"", ",", "\"\<alg\>\"", ",", "\"\<algBoxes\>\"", ",", 
   "\"\<algebra\>\"", ",", "\"\<algebraSeq\>\"", ",", "\"\<algebraSeq$\>\"", 
   ",", "\"\<algebrasOnly\>\"", ",", "\"\<algebrasOnly$\>\"", ",", 
   "\"\<algebra$\>\"", ",", "\"\<algIso\>\"", ",", "\"\<algIso$\>\"", ",", 
   "\"\<algPattern\>\"", ",", "\"\<algRep\>\"", ",", "\"\<algRepRules\>\"", 
   ",", "\"\<algRepRules$\>\"", ",", "\"\<algRep$\>\"", ",", "\"\<algTP\>\"", 
   ",", "\"\<algTP$\>\"", ",", "\"\<algTrueMinusAlgHelp\>\"", ",", 
   "\"\<algTrueMinusAlgHelp$\>\"", ",", "\"\<alg$\>\"", ",", 
   "\"\<aliasName\>\"", ",", "\"\<aliasReplacementRul\>\"", ",", 
   "\"\<alin\>\"", ",", "\"\<alin$\>\"", ",", "\"\<allarg\>\"", ",", 
   "\"\<allBlades\>\"", ",", "\"\<allBlades$\>\"", ",", "\"\<allGrades\>\"", 
   ",", "\"\<allGrades$\>\"", ",", "\"\<allNonScalars\>\"", ",", 
   "\"\<allNonScalars$\>\"", ",", "\"\<allScalars\>\"", ",", 
   "\"\<allScalars$\>\"", ",", "\"\<alP\>\"", ",", "\"\<alposition\>\"", ",", 
   "\"\<alposition$\>\"", ",", "\"\<alP$\>\"", ",", 
   "\"\<alreadyCalculatedProducts\>\"", ",", 
   "\"\<alreadyCalculatedProductsAdoptedToSingle\>\"", ",", 
   "\"\<alreadyPrintedList\>\"", ",", "\"\<alreadyUsedColors\>\"", ",", 
   "\"\<alsty\>\"", ",", "\"\<alsty$\>\"", ",", "\"\<alvectors\>\"", ",", 
   "\"\<alvectors$\>\"", ",", "\"\<al$\>\"", ",", "\"\<any\>\"", ",", 
   "\"\<any1\>\"", ",", "\"\<any1$\>\"", ",", "\"\<any2\>\"", ",", 
   "\"\<any2$\>\"", ",", "\"\<any3\>\"", ",", "\"\<any3$\>\"", ",", 
   "\"\<anycoef\>\"", ",", "\"\<anyCoef1\>\"", ",", "\"\<anyCoef1$\>\"", ",", 
   "\"\<anyCoef2\>\"", ",", "\"\<anyCoef2$\>\"", ",", "\"\<anycoef$\>\"", 
   ",", "\"\<any$\>\"", ",", "\"\<ap1\>\"", ",", "\"\<ap1$\>\"", ",", 
   "\"\<ap2\>\"", ",", "\"\<ap2$\>\"", ",", 
   "\"\<applyQuaternionIsomorphismRule\>\"", ",", "\"\<ar\>\"", ",", 
   "\"\<arep\>\"", ",", "\"\<arep$\>\"", ",", "\"\<arg\>\"", ",", 
   "\"\<args\>\"", ",", "\"\<argsa\>\"", ",", "\"\<argsa$\>\"", ",", 
   "\"\<arg$\>\"", ",", "\"\<aTemp\>\"", ",", "\"\<a$\>\"", ",", "\"\<A$\>\"",
    ",", "\"\<b\>\"", ",", "\"\<B\>\"", ",", "\"\<ba\>\"", ",", 
   "\"\<base\>\"", ",", "\"\<baseElement\>\"", ",", "\"\<baseElement$\>\"", 
   ",", "\"\<baseSymbol\>\"", ",", "\"\<baseSymbolN\>\"", ",", 
   "\"\<baseSymbolN$\>\"", ",", "\"\<baseSymbol$\>\"", ",", 
   "\"\<baseVectorRepresentation\>\"", ",", 
   "\"\<baseVectorRepresentation$\>\"", ",", "\"\<base$\>\"", ",", 
   "\"\<ba$\>\"", ",", "\"\<bb\>\"", ",", "\"\<bb$\>\"", ",", 
   "\"\<bivectorsOfSpecialAlgebra\>\"", ",", "\"\<blade\>\"", ",", 
   "\"\<bladeVectors\>\"", ",", "\"\<bladeVectors$\>\"", ",", 
   "\"\<blade$\>\"", ",", "\"\<bs\>\"", ",", "\"\<bs$\>\"", ",", 
   "\"\<bTemp\>\"", ",", "\"\<bv\>\"", ",", "\"\<bv$\>\"", ",", "\"\<b$\>\"", 
   ",", "\"\<B$\>\"", ",", "\"\<c\>\"", ",", "\"\<ca\>\"", ",", "\"\<ca$\>\"",
    ",", "\"\<channel\>\"", ",", "\"\<cl\>\"", ",", "\"\<col\>\"", ",", 
   "\"\<col$\>\"", ",", "\"\<commutingPositiveBlades\>\"", ",", 
   "\"\<commutingPositiveBladesProductFree\>\"", ",", 
   "\"\<commutingPositiveBladesProductFree$\>\"", ",", 
   "\"\<commutingPositiveBlades$\>\"", ",", "\"\<commutingWithElement\>\"", 
   ",", "\"\<comOrd\>\"", ",", "\"\<comOrdMod\>\"", ",", "\"\<comOrdMod$\>\"",
    ",", "\"\<comOrd$\>\"", ",", "\"\<CompileTo\>\"", ",", "\"\<counter\>\"", 
   ",", "\"\<counter$\>\"", ",", "\"\<currentAlg\>\"", ",", 
   "\"\<currentAlg$\>\"", ",", "\"\<c$\>\"", ",", "\"\<d\>\"", ",", 
   "\"\<dat1\>\"", ",", "\"\<dat1$\>\"", ",", "\"\<dat2\>\"", ",", 
   "\"\<dat2$\>\"", ",", "\"\<decomposableMV\>\"", ",", 
   "\"\<decomposableMV$\>\"", ",", "\"\<decomposibleMV\>\"", ",", 
   "\"\<decomposibleMV$\>\"", ",", "\"\<def\>\"", ",", "\"\<defCol\>\"", ",", 
   "\"\<defCol$\>\"", ",", "\"\<definedGrades\>\"", ",", 
   "\"\<definedGrades$\>\"", ",", "\"\<definedReps\>\"", ",", 
   "\"\<definedReps$\>\"", ",", "\"\<def$\>\"", ",", "\"\<di\>\"", ",", 
   "\"\<diff\>\"", ",", "\"\<difference\>\"", ",", "\"\<difference$\>\"", 
   ",", "\"\<diff$\>\"", ",", "\"\<dim\>\"", ",", "\"\<dim$\>\"", ",", 
   "\"\<directLogTempMatrix\>\"", ",", "\"\<di$\>\"", ",", 
   "\"\<downIndex\>\"", ",", "\"\<downIndex$\>\"", ",", "\"\<du1\>\"", ",", 
   "\"\<du1$\>\"", ",", "\"\<du2\>\"", ",", "\"\<du2$\>\"", ",", 
   "\"\<duu\>\"", ",", "\"\<duu$\>\"", ",", "\"\<d$\>\"", ",", 
   "\"\<elementaryTPAlgebras\>\"", ",", "\"\<elementaryVRep\>\"", ",", 
   "\"\<expandZasExp\>\"", ",", "\"\<expansion\>\"", ",", 
   "\"\<expansionOrder\>\"", ",", "\"\<expansionOrder$\>\"", ",", 
   "\"\<expansion$\>\"", ",", "\"\<expArgs\>\"", ",", "\"\<expArgs$\>\"", 
   ",", "\"\<expectedNumberOfPrimitiveIdempotents\>\"", ",", 
   "\"\<expectedNumberOfPrimitiveIdempotents$\>\"", ",", "\"\<expr\>\"", ",", 
   "\"\<exprList\>\"", ",", "\"\<exprList$\>\"", ",", "\"\<exprs\>\"", ",", 
   "\"\<exprs$\>\"", ",", "\"\<exprWithDownBaseElements\>\"", ",", 
   "\"\<exprWithDownBaseElements$\>\"", ",", "\"\<expr$\>\"", ",", 
   "\"\<f\>\"", ",", "\"\<fe\>\"", ",", "\"\<fe$\>\"", ",", "\"\<ff\>\"", 
   ",", "\"\<FFGGm1\>\"", ",", "\"\<FFGGm1$\>\"", ",", "\"\<f$\>\"", ",", 
   "\"\<gaAdjoint\>\"", ",", "\"\<gaAlwaysTestInputIndexOrdering\>\"", ",", 
   "\"\<gaCom\>\"", ",", "\"\<gaDefaultMatrixRepresentationData\>\"", ",", 
   "\"\<gaDefineOrthonormalBaseMain\>\"", ",", 
   "\"\<gaElementaryAlgebraToMatrixRepresentationRules\>\"", ",", 
   "\"\<gaff\>\"", ",", "\"\<gaGeneralBaseSymbolInputAlias\>\"", ",", 
   "\"\<gaOrthonormalBaseSymbolInputAlias\>\"", ",", 
   "\"\<gaOrthonormalBaseSymbolName\>\"", ",", "\"\<gap\>\"", ",", 
   "\"\<gaPureLinearity\>\"", ",", "\"\<gaq\>\"", ",", "\"\<gar\>\"", ",", 
   "\"\<gblt\>\"", ",", "\"\<gblt$\>\"", ",", 
   "\"\<generalBaseSymbolInputAlias\>\"", ",", 
   "\"\<generalDefaultMatrixRepresentationSetting\>\"", ",", 
   "\"\<generateCommutatorForm\>\"", ",", "\"\<getBase\>\"", ",", 
   "\"\<gr\>\"", ",", "\"\<grade\>\"", ",", "\"\<gradeList\>\"", ",", 
   "\"\<gradeParityCheck\>\"", ",", "\"\<grades\>\"", ",", "\"\<grades$\>\"", 
   ",", "\"\<grade$\>\"", ",", "\"\<gro\>\"", ",", "\"\<grOnly\>\"", ",", 
   "\"\<groupByGrade\>\"", ",", "\"\<grouping\>\"", ",", "\"\<grouping$\>\"", 
   ",", "\"\<gro$\>\"", ",", "\"\<grRequested\>\"", ",", 
   "\"\<grRequested$\>\"", ",", "\"\<gr$\>\"", ",", "\"\<head\>\"", ",", 
   "\"\<head$\>\"", ",", "\"\<i\>\"", ",", "\"\<i1\>\"", ",", "\"\<i1$\>\"", 
   ",", "\"\<i2\>\"", ",", "\"\<idempotentList\>\"", ",", 
   "\"\<idempotentList$\>\"", ",", "\"\<ifPrint\>\"", ",", "\"\<ignoreMe\>\"",
    ",", "\"\<ignoreMe$\>\"", ",", "\"\<iI\>\"", ",", "\"\<iI$\>\"", ",", 
   "\"\<in\>\"", ",", "\"\<inc\>\"", ",", "\"\<inc$\>\"", ",", "\"\<ind\>\"", 
   ",", "\"\<ind1\>\"", ",", "\"\<ind1$\>\"", ",", "\"\<ind2\>\"", ",", 
   "\"\<ind2$\>\"", ",", "\"\<indd\>\"", ",", "\"\<indd$\>\"", ",", 
   "\"\<index2Repl\>\"", ",", "\"\<index2Repl$\>\"", ",", 
   "\"\<indexCases\>\"", ",", "\"\<indexCases$\>\"", ",", 
   "\"\<indexPairs\>\"", ",", "\"\<indexPairs$\>\"", ",", "\"\<indown\>\"", 
   ",", "\"\<indown$\>\"", ",", "\"\<indSet\>\"", ",", 
   "\"\<indSetReplRul\>\"", ",", "\"\<indu\>\"", ",", "\"\<indu$\>\"", ",", 
   "\"\<ind$\>\"", ",", "\"\<inEx\>\"", ",", "\"\<inEx$\>\"", ",", 
   "\"\<inf0\>\"", ",", "\"\<inf0$\>\"", ",", "\"\<infn\>\"", ",", 
   "\"\<infn$\>\"", ",", "\"\<initialSeq\>\"", ",", "\"\<initialSeq$\>\"", 
   ",", "\"\<inpOpt\>\"", ",", "\"\<inpOpt$\>\"", ",", 
   "\"\<intesectionIJ\>\"", ",", "\"\<intesectionIJ$\>\"", ",", 
   "\"\<inup\>\"", ",", "\"\<inup$\>\"", ",", "\"\<invdeglexIndexList\>\"", 
   ",", "\"\<in$\>\"", ",", "\"\<isomorphismPreRules\>\"", ",", 
   "\"\<isomorphismRules\>\"", ",", "\"\<i$\>\"", ",", "\"\<j\>\"", ",", 
   "\"\<j1\>\"", ",", "\"\<j1$\>\"", ",", "\"\<j2\>\"", ",", "\"\<jJ\>\"", 
   ",", "\"\<jJ$\>\"", ",", "\"\<j$\>\"", ",", "\"\<k\>\"", ",", 
   "\"\<keysB\>\"", ",", "\"\<k$\>\"", ",", "\"\<largestAbsCoef\>\"", ",", 
   "\"\<largestAbsCoef$\>\"", ",", "\"\<len\>\"", ",", "\"\<lena1\>\"", ",", 
   "\"\<lena1$\>\"", ",", "\"\<lena2\>\"", ",", "\"\<lena2$\>\"", ",", 
   "\"\<len$\>\"", ",", "\"\<logTempMatrix\>\"", ",", "\"\<ls\>\"", ",", 
   "\"\<m\>\"", ",", "\"\<makeProductTerm\>\"", ",", "\"\<mark\>\"", ",", 
   "\"\<marks\>\"", ",", "\"\<marks$\>\"", ",", "\"\<mark$\>\"", ",", 
   "\"\<mat\>\"", ",", "\"\<mat$\>\"", ",", "\"\<max\>\"", ",", 
   "\"\<maxCoef\>\"", ",", "\"\<maxCoef$\>\"", ",", "\"\<maxGrade\>\"", ",", 
   "\"\<maxGrade$\>\"", ",", "\"\<maxOrder\>\"", ",", "\"\<maxOrder$\>\"", 
   ",", "\"\<max$\>\"", ",", "\"\<method\>\"", ",", "\"\<method$\>\"", ",", 
   "\"\<mult\>\"", ",", "\"\<multipleApplyQuaternionIsomorphismRules\>\"", 
   ",", "\"\<mult$\>\"", ",", "\"\<mvAltProductSignatureMap\>\"", ",", 
   "\"\<mvAltProductSignatureMapC\>\"", ",", 
   "\"\<mvAntisymmetricProductSignatureMap\>\"", ",", 
   "\"\<mvAntisymmetricProductSignatureMapC\>\"", ",", 
   "\"\<mvDownUpUnion\>\"", ",", "\"\<mvIndexToBinaryLikeRepresentationC\>\"",
    ",", "\"\<mvInvDegLexSortedIndexList\>\"", ",", "\"\<mvMu\>\"", ",", 
   "\"\<mvMuS\>\"", ",", "\"\<mvNonCommutativeDegC\>\"", ",", 
   "\"\<mvNonCommutativeInvDegC\>\"", ",", "\"\<mvNonCommutativeInvLexC\>\"", 
   ",", "\"\<mvNonCommutativeInvRevLexC\>\"", ",", 
   "\"\<mvNonCommutativeLexC\>\"", ",", "\"\<mvNonCommutativeRevLexC\>\"", 
   ",", "\"\<mvProductSignatureMap\>\"", ",", 
   "\"\<mvProductSignatureMapC\>\"", ",", "\"\<mvSetSymmetricDifference\>\"", 
   ",", "\"\<mvSetSymmetricDifferenceForIndex\>\"", ",", 
   "\"\<mvSignatureOfIncreasingPermutation\>\"", ",", "\"\<myexressions\>\"", 
   ",", "\"\<myexressions$\>\"", ",", "\"\<myStrings\>\"", ",", 
   "\"\<myStrings$\>\"", ",", "\"\<m$\>\"", ",", "\"\<n\>\"", ",", 
   "\"\<name\>\"", ",", "\"\<name$\>\"", ",", 
   "\"\<nestedQuaternionIsomorphismRule\>\"", ",", "\"\<nestNumber\>\"", ",", 
   "\"\<nestNumber$\>\"", ",", "\"\<newAl\>\"", ",", "\"\<newAl$\>\"", ",", 
   "\"\<newColor\>\"", ",", "\"\<newColor$\>\"", ",", "\"\<newRep\>\"", ",", 
   "\"\<newRep$\>\"", ",", "\"\<nextAccept\>\"", ",", 
   "\"\<nontrivialEntries\>\"", ",", "\"\<nontrivialEntries$\>\"", ",", 
   "\"\<normalizedBlade\>\"", ",", "\"\<normalizedBlade$\>\"", ",", 
   "\"\<nsq\>\"", ",", "\"\<nsq$\>\"", ",", "\"\<num\>\"", ",", 
   "\"\<numberOfPrimitiveIdempotents\>\"", ",", "\"\<num$\>\"", ",", 
   "\"\<n$\>\"", ",", "\"\<of\>\"", ",", "\"\<of$\>\"", ",", 
   "\"\<oldlength\>\"", ",", "\"\<oldlength$\>\"", ",", 
   "\"\<oneStepCliffordDecompose\>\"", ",", "\"\<op\>\"", ",", 
   "\"\<opElement\>\"", ",", "\"\<opElement$\>\"", ",", "\"\<opMatrix\>\"", 
   ",", "\"\<opMatrix$\>\"", ",", "\"\<opts\>\"", ",", "\"\<opts$\>\"", ",", 
   "\"\<op$\>\"", ",", "\"\<ord\>\"", ",", "\"\<order\>\"", ",", 
   "\"\<orderAttempt\>\"", ",", "\"\<orderAttempt$\>\"", ",", 
   "\"\<orderedQCommutative\>\"", ",", "\"\<orderedQNoncommutative\>\"", ",", 
   "\"\<ord$\>\"", ",", "\"\<orthogonalBaseElements\>\"", ",", 
   "\"\<orthonormalBaseSymbolInputAlias\>\"", ",", 
   "\"\<orthonormalBaseSymbolName\>\"", ",", "\"\<other\>\"", ",", 
   "\"\<other1\>\"", ",", "\"\<other1$\>\"", ",", "\"\<other2\>\"", ",", 
   "\"\<other2$\>\"", ",", "\"\<outerCtx\>\"", ",", "\"\<outputVectors\>\"", 
   ",", "\"\<outputVectors$\>\"", ",", "\"\<p\>\"", ",", "\"\<pair\>\"", ",", 
   "\"\<pair$\>\"", ",", "\"\<pfd\>\"", ",", "\"\<pfdProto\>\"", ",", 
   "\"\<pfdProto$\>\"", ",", "\"\<pfd$\>\"", ",", "\"\<pfi\>\"", ",", 
   "\"\<pfiProto\>\"", ",", "\"\<pfiProto$\>\"", ",", "\"\<pfi$\>\"", ",", 
   "\"\<pickNextColor\>\"", ",", "\"\<pickNextRandomColor\>\"", ",", 
   "\"\<point\>\"", ",", "\"\<point$\>\"", ",", "\"\<positiveBlades\>\"", 
   ",", "\"\<positiveBlades$\>\"", ",", "\"\<pp\>\"", ",", "\"\<pp$\>\"", 
   ",", "\"\<predefinedColorList\>\"", ",", "\"\<privateCtx\>\"", ",", 
   "\"\<productAlgebra\>\"", ",", "\"\<productMatrices\>\"", ",", 
   "\"\<productMatrices$\>\"", ",", "\"\<p$\>\"", ",", "\"\<q\>\"", ",", 
   "\"\<qp\>\"", ",", "\"\<qp$\>\"", ",", "\"\<qthpower\>\"", ",", 
   "\"\<qthpower$\>\"", ",", "\"\<quality\>\"", ",", 
   "\"\<quaternionFreeMatrix\>\"", ",", "\"\<quaternionFreeMatrix$\>\"", ",", 
   "\"\<quaternionReplacement\>\"", ",", "\"\<quaternionReplacement$\>\"", 
   ",", "\"\<quiet\>\"", ",", "\"\<quiet$\>\"", ",", "\"\<q$\>\"", ",", 
   "\"\<r\>\"", ",", "\"\<ra\>\"", ",", "\"\<raEx\>\"", ",", "\"\<raEx$\>\"", 
   ",", "\"\<rang\>\"", ",", "\"\<rang$\>\"", ",", "\"\<ra$\>\"", ",", 
   "\"\<reductionAlgebras\>\"", ",", "\"\<reductionInstruction\>\"", ",", 
   "\"\<reductionInstructionNo00\>\"", ",", 
   "\"\<reductionInstructionNo00$\>\"", ",", "\"\<reductionInstruction$\>\"", 
   ",", "\"\<reductionOrder\>\"", ",", "\"\<reductionOrder$\>\"", ",", 
   "\"\<relevantPairs\>\"", ",", "\"\<relevantPairs$\>\"", ",", 
   "\"\<removeElems\>\"", ",", "\"\<removeElems$\>\"", ",", 
   "\"\<removeProductsOfElements\>\"", ",", "\"\<removeVectorList\>\"", ",", 
   "\"\<removeVectorList$\>\"", ",", "\"\<remPos\>\"", ",", "\"\<remPos$\>\"",
    ",", "\"\<rep\>\"", ",", "\"\<replacement\>\"", ",", 
   "\"\<replaceTensorProducts\>\"", ",", "\"\<replaceTensorProducts$\>\"", 
   ",", "\"\<replaceWithReciprocal\>\"", ",", "\"\<replRules\>\"", ",", 
   "\"\<replRules$\>\"", ",", "\"\<repMatrix\>\"", ",", "\"\<repMatrix$\>\"", 
   ",", "\"\<repNames\>\"", ",", "\"\<repNames$\>\"", ",", "\"\<repRules\>\"",
    ",", "\"\<repRules$\>\"", ",", "\"\<repRuls\>\"", ",", "\"\<repRuls$\>\"",
    ",", "\"\<rep$\>\"", ",", "\"\<res\>\"", ",", "\"\<restOpts\>\"", ",", 
   "\"\<restOpts$\>\"", ",", "\"\<res$\>\"", ",", "\"\<reversedTheBlade\>\"", 
   ",", "\"\<reversedTheBlade$\>\"", ",", "\"\<res\>\"", ",", 
   "\"\<resultWithoutQuaternionRepl\>\"", ",", 
   "\"\<resultWithoutQuaternionRepl$\>\"", ",", "\"\<res$\>\"", ",", 
   "\"\<rule\>\"", ",", "\"\<ruleListList\>\"", ",", "\"\<ruleListList$\>\"", 
   ",", "\"\<rules\>\"", ",", "\"\<rulesForNonScalars\>\"", ",", 
   "\"\<rulesForNonScalars$\>\"", ",", "\"\<rule$\>\"", ",", "\"\<r$\>\"", 
   ",", "\"\<s\>\"", ",", "\"\<sb\>\"", ",", "\"\<sd\>\"", ",", "\"\<sd$\>\"",
    ",", "\"\<selectedBE\>\"", ",", "\"\<selectedBE$\>\"", ",", 
   "\"\<selVector\>\"", ",", "\"\<selVector$\>\"", ",", "\"\<sEOM\>\"", ",", 
   "\"\<seriesType\>\"", ",", "\"\<seriesType$\>\"", ",", 
   "\"\<setSymDiff4TP\>\"", ",", "\"\<setSymDiff4TP$\>\"", ",", "\"\<sf\>\"", 
   ",", "\"\<sf$\>\"", ",", "\"\<signatureSplittedSortedVectors\>\"", ",", 
   "\"\<signatureSplittedSortedVectors$\>\"", ",", 
   "\"\<signatureSplittedVectors\>\"", ",", 
   "\"\<signatureSplittedVectors$\>\"", ",", "\"\<signProdSigMap4TP\>\"", 
   ",", "\"\<signProdSigMap4TP$\>\"", ",", 
   "\"\<singleElementOuterMultiply\>\"", ",", "\"\<singlet\>\"", ",", 
   "\"\<singlet$\>\"", ",", "\"\<smartColors\>\"", ",", 
   "\"\<sortedBaseVectors\>\"", ",", "\"\<sortedBaseVectors$\>\"", ",", 
   "\"\<specAlgebra\>\"", ",", "\"\<specAlgebra$\>\"", ",", "\"\<ssd\>\"", 
   ",", "\"\<ssd$\>\"", ",", "\"\<startEl\>\"", ",", "\"\<startElement\>\"", 
   ",", "\"\<startElements\>\"", ",", "\"\<startElement$\>\"", ",", 
   "\"\<startEl$\>\"", ",", "\"\<status\>\"", ",", "\"\<step\>\"", ",", 
   "\"\<stepRev\>\"", ",", "\"\<stringNames\>\"", ",", "\"\<stringNames$\>\"",
    ",", "\"\<sty\>\"", ",", "\"\<sty$\>\"", ",", "\"\<submethodBVA\>\"", 
   ",", "\"\<submethodBVA$\>\"", ",", "\"\<sum\>\"", ",", "\"\<sum$\>\"", 
   ",", "\"\<sym\>\"", ",", "\"\<symbolName\>\"", ",", "\"\<symbolName$\>\"", 
   ",", "\"\<sym$\>\"", ",", "\"\<synm\>\"", ",", "\"\<synm$\>\"", ",", 
   "\"\<s$\>\"", ",", "\"\<t\>\"", ",", "\"\<target\>\"", ",", 
   "\"\<target$\>\"", ",", "\"\<temp\>\"", ",", "\"\<temp$\>\"", ",", 
   "\"\<tensorProductIsomorphicToAlgebra\>\"", ",", "\"\<term\>\"", ",", 
   "\"\<termsToTake\>\"", ",", "\"\<termsToTake$\>\"", ",", "\"\<term$\>\"", 
   ",", "\"\<testList\>\"", ",", "\"\<testList$\>\"", ",", 
   "\"\<theAlgebra\>\"", ",", "\"\<theAlgebras\>\"", ",", 
   "\"\<theAlgebra$\>\"", ",", "\"\<theBlade\>\"", ",", "\"\<theBlade$\>\"", 
   ",", "\"\<theGrade\>\"", ",", "\"\<theQuaternionReplacementRules\>\"", 
   ",", "\"\<theQuaternionReplacementRules$\>\"", ",", "\"\<thisBase\>\"", 
   ",", "\"\<thisBase$\>\"", ",", "\"\<thisRep\>\"", ",", "\"\<thisRep$\>\"", 
   ",", "\"\<triangularNumber\>\"", ",", "\"\<type\>\"", ",", "\"\<type$\>\"",
    ",", "\"\<u\>\"", ",", "\"\<u1\>\"", ",", "\"\<u2a\>\"", ",", 
   "\"\<u2b\>\"", ",", "\"\<u3\>\"", ",", "\"\<uexp\>\"", ",", 
   "\"\<uMVec\>\"", ",", "\"\<uMVec$\>\"", ",", 
   "\"\<uniqueMaskForArbitraryAlgebra\>\"", ",", 
   "\"\<uniqueMaskForSpecAlgebra\>\"", ",", "\"\<unitElement\>\"", ",", 
   "\"\<up1\>\"", ",", "\"\<up1$\>\"", ",", "\"\<up2\>\"", ",", 
   "\"\<up2$\>\"", ",", "\"\<updateInputAlias\>\"", ",", "\"\<u$\>\"", ",", 
   "\"\<v\>\"", ",", "\"\<v1\>\"", ",", "\"\<v1$\>\"", ",", "\"\<value\>\"", 
   ",", "\"\<value$\>\"", ",", "\"\<var\>\"", ",", "\"\<variants\>\"", ",", 
   "\"\<variants$\>\"", ",", "\"\<vars\>\"", ",", "\"\<varsWithMarks\>\"", 
   ",", "\"\<varsWithMarks$\>\"", ",", "\"\<vars$\>\"", ",", "\"\<var$\>\"", 
   ",", "\"\<vectorsOfArbitraryAlgebra\>\"", ",", 
   "\"\<vectorsOfSpecialAlgebra\>\"", ",", 
   "\"\<vectorsOfTensorProductAlgebra\>\"", ",", 
   "\"\<vectorsOfTensorProductAlgebraMetricSorted\>\"", ",", "\"\<vRep\>\"", 
   ",", "\"\<v$\>\"", ",", "\"\<w\>\"", ",", "\"\<what\>\"", ",", 
   "\"\<what$\>\"", ",", "\"\<whi\>\"", ",", "\"\<whi$\>\"", ",", 
   "\"\<wrap\>\"", ",", "\"\<wrapArg\>\"", ",", "\"\<wrapArg$\>\"", ",", 
   "\"\<wrapCliffordConjugate\>\"", ",", "\"\<wrapHead\>\"", ",", 
   "\"\<wrappedSelVector\>\"", ",", 
   "\"\<wrappedSelVectorSignedMagnitudeSquare\>\"", ",", 
   "\"\<wrappedSelVectorSignedMagnitudeSquare$\>\"", ",", 
   "\"\<wrappedSelVector$\>\"", ",", "\"\<wrappingBlade\>\"", ",", 
   "\"\<wrappingBlade$\>\"", ",", "\"\<wrap$\>\"", ",", "\"\<w$\>\"", ",", 
   "\"\<x\>\"", ",", "\"\<x1\>\"", ",", "\"\<x1$\>\"", ",", "\"\<x2\>\"", 
   ",", "\"\<x2$\>\"", ",", "\"\<x$\>\"", ",", "\"\<y\>\"", ",", "\"\<y1\>\"",
    ",", "\"\<y1$\>\"", ",", "\"\<y2\>\"", ",", "\"\<y2$\>\"", ",", 
   "\"\<y$\>\"", ",", "\"\<\[CurlyPhi]\>\""}], "}"}]], "Input"],

Cell["Check if global context remains clear .", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", 
  RowBox[{"\"\<Global`\>\"", "<>", " ", "\"\<*\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Notes, drawbacks, future plans"
}], "Section"],

Cell["End notes, drawbacks", "Text"],

Cell["\<\
Implement calculation of derivatives (orthonormal base first)\
\>", "Text"],

Cell["\<\
Implement groebner base for outer product, then for whole clifford algebra \
(in orthonormal base).\
\>", "Text"],

Cell["\<\
Introduce? CommutablePairQ[a,b] which returs True if we know rule how to \
interchange a and b and False otherwise. Like wise then we may need function \
which calculates sign after exchange of its arguments.   \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowStatus", "[", "\"\<Package has been loaded\>\"", "]"}], 
  ";"}]], "Input"]
}, Open  ]]
},
WindowSize->{779, 810},
WindowMargins->{{120, Automatic}, {Automatic, 105}},
ShowSelection->True,
ShowCellTags->True,
TrackCellChangeTimes->False,
FrontEndVersion->"10.3 for Linux x86 (32-bit) (December 10, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "references"->{
  Cell[3375, 114, 3006, 45, 521, "Text",
   CellTags->"references"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"references", 988309, 26982}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 150, 5, 96, "Title",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[733, 29, 238, 4, 53, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[974, 35, 132, 2, 32, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[1143, 42, 110, 4, 67, "Section"],
Cell[1256, 48, 255, 7, 90, "Text"],
Cell[CellGroupData[{
Cell[1536, 59, 118, 7, 47, "Subsection"],
Cell[1657, 68, 692, 13, 148, "Text"],
Cell[2352, 83, 873, 17, 208, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[3262, 105, 110, 7, 39, "Subsection"],
Cell[3375, 114, 3006, 45, 521, "Text",
 CellTags->"references"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[6430, 165, 83, 4, 53, "Section"],
Cell[6516, 171, 213, 4, 51, "Text"],
Cell[CellGroupData[{
Cell[6754, 179, 157, 7, 47, "Subsection"],
Cell[6914, 188, 300, 9, 51, "Text"],
Cell[CellGroupData[{
Cell[7239, 201, 78, 1, 32, "Input",
 Evaluatable->False],
Cell[7320, 204, 128, 1, 55, "Output"]
}, Open  ]],
Cell[7463, 208, 151, 3, 51, "Text"],
Cell[CellGroupData[{
Cell[7639, 215, 320, 8, 77, "Input",
 Evaluatable->False],
Cell[7962, 225, 468, 7, 107, "Print"]
}, Open  ]],
Cell[8445, 235, 211, 4, 51, "Text"],
Cell[8659, 241, 204, 5, 55, "Input",
 Evaluatable->False],
Cell[8866, 248, 197, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[9088, 257, 56, 0, 37, "Subsubsection"],
Cell[9147, 259, 1338, 21, 282, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[10534, 286, 162, 7, 39, "Subsection"],
Cell[10699, 295, 301, 9, 51, "Text"],
Cell[11003, 306, 2915, 57, 174, "Text"],
Cell[13921, 365, 386, 13, 37, "Input",
 Evaluatable->False],
Cell[14310, 380, 533, 8, 111, "Text"],
Cell[14846, 390, 382, 6, 91, "Text"],
Cell[15231, 398, 1815, 47, 275, "Input",
 Evaluatable->False],
Cell[17049, 447, 137, 3, 32, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[17223, 455, 154, 7, 39, "Subsection"],
Cell[17380, 464, 1020, 26, 110, "Text"],
Cell[CellGroupData[{
Cell[18425, 494, 102, 2, 37, "Subsubsection"],
Cell[18530, 498, 261, 5, 39, "Text"],
Cell[CellGroupData[{
Cell[18816, 507, 125, 3, 55, "Input",
 Evaluatable->False],
Cell[18944, 512, 787, 19, 127, "Output"]
}, Open  ]],
Cell[19746, 534, 132, 3, 23, "Text"],
Cell[CellGroupData[{
Cell[19903, 541, 286, 9, 35, "Input",
 Evaluatable->False],
Cell[20192, 552, 1336, 36, 155, "Output"]
}, Open  ]],
Cell[21543, 591, 561, 11, 40, "Text"],
Cell[CellGroupData[{
Cell[22129, 606, 333, 10, 35, "Input",
 Evaluatable->False],
Cell[22465, 618, 397, 10, 99, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[22923, 635, 134, 7, 39, "Subsection"],
Cell[23060, 644, 115, 3, 31, "Text"],
Cell[23178, 649, 720, 13, 171, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23947, 668, 76, 4, 67, "Section"],
Cell[CellGroupData[{
Cell[24048, 676, 115, 7, 47, "Subsection"],
Cell[24166, 685, 508, 9, 130, "Text"],
Cell[24677, 696, 473, 13, 99, "Input"],
Cell[25153, 711, 110, 3, 32, "Input"],
Cell[25266, 716, 728, 20, 121, "Input"],
Cell[25997, 738, 3393, 92, 429, "Input"],
Cell[29393, 832, 1105, 30, 187, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[30535, 867, 136, 7, 39, "Subsection"],
Cell[30674, 876, 252, 6, 55, "Input"],
Cell[30929, 884, 30, 0, 31, "Text"],
Cell[30962, 886, 222, 5, 77, "Input"],
Cell[31187, 893, 238, 5, 77, "Input"],
Cell[31428, 900, 78, 2, 32, "Input"],
Cell[31509, 904, 194, 5, 55, "Input"],
Cell[CellGroupData[{
Cell[31728, 913, 196, 10, 37, "Subsubsection"],
Cell[31927, 925, 276, 7, 71, "Text"],
Cell[32206, 934, 1225, 31, 275, "Input"],
Cell[33434, 967, 353, 6, 51, "Text"],
Cell[33790, 975, 502, 11, 71, "Text"],
Cell[34295, 988, 475, 10, 69, "Text"],
Cell[34773, 1000, 639, 17, 77, "Input"],
Cell[35415, 1019, 732, 20, 121, "Input"],
Cell[36150, 1041, 367, 8, 69, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[36566, 1055, 127, 7, 39, "Subsection"],
Cell[36696, 1064, 641, 14, 169, "Text"],
Cell[CellGroupData[{
Cell[37362, 1082, 184, 10, 37, "Subsubsection"],
Cell[37549, 1094, 252, 6, 71, "Text"],
Cell[37804, 1102, 624, 18, 77, "Input"],
Cell[38431, 1122, 47, 0, 31, "Text"],
Cell[38481, 1124, 1099, 30, 165, "Input"],
Cell[39583, 1156, 267, 6, 51, "Text"],
Cell[39853, 1164, 334, 9, 77, "Input"],
Cell[40190, 1175, 76, 2, 32, "Input"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[40315, 1183, 108, 7, 39, "Subsection"],
Cell[40426, 1192, 216, 4, 51, "Text"],
Cell[40645, 1198, 294, 7, 51, "Text"],
Cell[40942, 1207, 90, 2, 32, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41081, 1215, 111, 4, 67, "Section"],
Cell[41195, 1221, 807, 15, 231, "Input"],
Cell[42005, 1238, 326, 7, 99, "Input"],
Cell[42334, 1247, 30, 0, 31, "Text"],
Cell[42367, 1249, 407, 8, 143, "Input"],
Cell[42777, 1259, 442, 11, 121, "Input"],
Cell[43222, 1272, 300, 6, 121, "Input"],
Cell[43525, 1280, 293, 6, 99, "Input"],
Cell[43821, 1288, 227, 5, 77, "Input"],
Cell[44051, 1295, 294, 6, 99, "Input"],
Cell[44348, 1303, 140, 4, 32, "Input"],
Cell[44491, 1309, 1105, 17, 429, "Input"],
Cell[45599, 1328, 259, 6, 99, "Input"],
Cell[45861, 1336, 258, 6, 99, "Input"],
Cell[46122, 1344, 267, 6, 99, "Input"],
Cell[46392, 1352, 378, 7, 143, "Input"],
Cell[46773, 1361, 621, 10, 231, "Input"],
Cell[47397, 1373, 788, 14, 297, "Input"],
Cell[48188, 1389, 181, 5, 32, "Input"],
Cell[48372, 1396, 162, 4, 32, "Input"],
Cell[48537, 1402, 177, 5, 32, "Input"],
Cell[48717, 1409, 309, 6, 77, "Input"],
Cell[49029, 1417, 382, 7, 99, "Input"],
Cell[49414, 1426, 298, 6, 77, "Input"],
Cell[49715, 1434, 357, 7, 99, "Input"],
Cell[50075, 1443, 340, 7, 77, "Input"],
Cell[50418, 1452, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[50521, 1458, 127, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[50673, 1469, 155, 10, 37, "Subsubsection"],
Cell[50831, 1481, 255, 5, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[51089, 1488, 650, 18, 55, "Input",
 Evaluatable->False],
Cell[51742, 1508, 39, 0, 31, "Text"],
Cell[51784, 1510, 103, 3, 32, "Input"],
Cell[51890, 1515, 134, 5, 31, "Text"],
Cell[52027, 1522, 1518, 40, 165, "Input"],
Cell[53548, 1564, 1332, 22, 151, "Text"],
Cell[54883, 1588, 5558, 146, 583, "Input"],
Cell[60444, 1736, 143, 5, 31, "Text"],
Cell[60590, 1743, 435, 7, 71, "Text"],
Cell[61028, 1752, 497, 11, 121, "Input"],
Cell[61528, 1765, 2912, 78, 275, "Input"],
Cell[64443, 1845, 322, 9, 55, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64802, 1859, 174, 11, 37, "Subsubsection"],
Cell[64979, 1872, 158, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[65140, 1878, 210, 7, 32, "Input",
 CellID->1126827235],
Cell[65353, 1887, 115, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[65471, 1890, 2626, 69, 165, "Input"],
Cell[68100, 1961, 671, 19, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[68774, 1982, 253, 4, 51, "Text"],
Cell[69030, 1988, 617, 10, 91, "Text"],
Cell[69650, 2000, 4779, 118, 407, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[74466, 2123, 221, 11, 31, "Subsubsection"],
Cell[74690, 2136, 505, 12, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[75198, 2150, 2838, 73, 187, "Input"],
Cell[78039, 2225, 105, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[78147, 2228, 2719, 67, 209, "Input"],
Cell[80869, 2297, 542, 10, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[81414, 2309, 928, 26, 99, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[82379, 2340, 192, 11, 31, "Subsubsection"],
Cell[82574, 2353, 2465, 67, 275, "Input"],
Cell[85042, 2422, 146, 7, 31, "Text"],
Cell[85191, 2431, 611, 13, 71, "Text"],
Cell[85805, 2446, 267, 6, 77, "Input"],
Cell[86075, 2454, 29776, 624, 1984, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[115900, 3084, 126, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[116051, 3095, 167, 10, 37, "Subsubsection"],
Cell[116221, 3107, 220, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[116444, 3113, 534, 16, 55, "Input",
 Evaluatable->False],
Cell[116981, 3131, 1550, 43, 143, "Input"],
Cell[118534, 3176, 480, 15, 52, "Text"],
Cell[119017, 3193, 1160, 34, 99, "Input",
 Evaluatable->False],
Cell[120180, 3229, 3723, 94, 275, "Input"],
Cell[123906, 3325, 487, 15, 52, "Text"],
Cell[124396, 3342, 1162, 34, 99, "Input",
 Evaluatable->False],
Cell[125561, 3378, 3819, 97, 319, "Input"],
Cell[129383, 3477, 487, 15, 52, "Text"],
Cell[129873, 3494, 1162, 34, 99, "Input",
 Evaluatable->False],
Cell[131038, 3530, 3819, 97, 319, "Input"],
Cell[134860, 3629, 491, 15, 52, "Text"],
Cell[135354, 3646, 1189, 34, 99, "Input",
 Evaluatable->False],
Cell[136546, 3682, 3827, 97, 319, "Input"],
Cell[140376, 3781, 127, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[140506, 3784, 749, 21, 77, "Input",
 Evaluatable->False],
Cell[141258, 3807, 86, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[141347, 3810, 13109, 333, 943, "Input"],
Cell[154459, 4145, 143, 3, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[154605, 4150, 681, 18, 55, "Input",
 Evaluatable->False],
Cell[155289, 4170, 86, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[155378, 4173, 13128, 333, 943, "Input"],
Cell[168509, 4508, 784, 14, 71, "Text"],
Cell[169296, 4524, 124, 3, 31, "Text"],
Cell[169423, 4529, 92, 2, 31, "Text"],
Cell[169518, 4533, 2668, 57, 363, "Input"],
Cell[172189, 4592, 3060, 73, 319, "Input"],
Cell[175252, 4667, 2944, 78, 320, "Input"],
Cell[178199, 4747, 1397, 39, 121, "Input"],
Cell[179599, 4788, 1398, 39, 121, "Input"],
Cell[181000, 4829, 774, 16, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[181777, 4847, 877, 24, 99, "Input"],
Cell[182657, 4873, 1541, 42, 122, "Input"],
Cell[184201, 4917, 2263, 59, 188, "Input",
 Evaluatable->False],
Cell[186467, 4978, 753, 15, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[187223, 4995, 886, 25, 99, "Input"],
Cell[188112, 5022, 1523, 42, 122, "Input"],
Cell[189638, 5066, 2244, 59, 166, "Input",
 Evaluatable->False],
Cell[191885, 5127, 223, 7, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[192111, 5136, 707, 20, 55, "Input"],
Cell[192821, 5158, 1293, 34, 122, "Input"],
Cell[194117, 5194, 137, 3, 31, "Text"],
Cell[194257, 5199, 1843, 51, 144, "Input"],
Cell[196103, 5252, 489, 11, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[196595, 5265, 1233, 35, 99, "Input"],
Cell[197831, 5302, 279, 8, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[198113, 5312, 817, 25, 77, "Input"],
Cell[198933, 5339, 104, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[199040, 5342, 3882, 99, 341, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[202959, 5446, 187, 10, 31, "Subsubsection"],
Cell[203149, 5458, 257, 8, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[203409, 5468, 13008, 306, 1419, "Input"],
Cell[216420, 5776, 306, 5, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[216729, 5783, 1636, 47, 145, "Input"],
Cell[218368, 5832, 92, 2, 31, "Text"],
Cell[218463, 5836, 283, 5, 51, "Text"],
Cell[218749, 5843, 1317, 34, 121, "Input"],
Cell[220069, 5879, 94, 2, 31, "Text"],
Cell[220166, 5883, 1979, 50, 209, "Input"],
Cell[222148, 5935, 86, 2, 31, "Text"],
Cell[222237, 5939, 423, 8, 55, "Input"],
Cell[222663, 5949, 2245, 55, 231, "Input"],
Cell[224911, 6006, 424, 13, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[225338, 6021, 1860, 51, 231, "Input"],
Cell[227201, 6074, 184, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[227388, 6080, 778, 23, 77, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[228203, 6108, 190, 10, 31, "Subsubsection"],
Cell[228396, 6120, 829, 12, 111, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[229228, 6134, 1555, 44, 122, "Input"],
Cell[230786, 6180, 100, 1, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[230889, 6183, 1078, 31, 101, "Input"],
Cell[CellGroupData[{
Cell[231992, 6218, 271, 5, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[232266, 6225, 196, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[232477, 6232, 3298, 80, 187, "Input"],
Cell[235778, 6314, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[235915, 6323, 85, 4, 53, "Section"],
Cell[236003, 6329, 926, 18, 187, "Input"],
Cell[236932, 6349, 326, 7, 99, "Input"],
Cell[237261, 6358, 30, 0, 31, "Text"],
Cell[237294, 6360, 137, 5, 31, "Text"],
Cell[237434, 6367, 491, 11, 70, "Text"],
Cell[237928, 6380, 207, 5, 77, "Input"],
Cell[238138, 6387, 201, 5, 77, "Input"],
Cell[238342, 6394, 202, 5, 77, "Input"],
Cell[238547, 6401, 192, 5, 77, "Input"],
Cell[238742, 6408, 409, 8, 99, "Input"],
Cell[239154, 6418, 311, 11, 31, "Text"],
Cell[239468, 6431, 825, 13, 166, "Input"],
Cell[240296, 6446, 133, 4, 32, "Input"],
Cell[240432, 6452, 925, 20, 144, "Input"],
Cell[241360, 6474, 129, 4, 32, "Input"],
Cell[241492, 6480, 997, 19, 166, "Input"],
Cell[242492, 6501, 129, 4, 32, "Input"],
Cell[242624, 6507, 203, 6, 50, "Text"],
Cell[242830, 6515, 1020, 20, 189, "Input"],
Cell[243853, 6537, 129, 4, 32, "Input"],
Cell[243985, 6543, 1024, 20, 189, "Input"],
Cell[245012, 6565, 130, 4, 32, "Input"],
Cell[245145, 6571, 1008, 20, 166, "Input"],
Cell[246156, 6593, 129, 4, 32, "Input"],
Cell[246288, 6599, 139, 3, 31, "Text"],
Cell[246430, 6604, 276, 7, 77, "Input",
 Evaluatable->False],
Cell[246709, 6613, 304, 7, 77, "Input",
 Evaluatable->False],
Cell[247016, 6622, 312, 7, 77, "Input",
 Evaluatable->False],
Cell[247331, 6631, 368, 8, 77, "Input",
 Evaluatable->False],
Cell[247702, 6641, 342, 7, 77, "Input",
 Evaluatable->False],
Cell[248047, 6650, 256, 6, 55, "Input",
 Evaluatable->False],
Cell[248306, 6658, 43, 0, 31, "Text"],
Cell[248352, 6660, 1373, 24, 319, "Input"],
Cell[249728, 6686, 146, 4, 32, "Input"],
Cell[249877, 6692, 255, 6, 32, "Input"],
Cell[250135, 6700, 279, 6, 77, "Input"],
Cell[250417, 6708, 241, 6, 32, "Input"],
Cell[250661, 6716, 276, 6, 77, "Input"],
Cell[250940, 6724, 298, 6, 77, "Input"],
Cell[251241, 6732, 286, 6, 77, "Input"],
Cell[251530, 6740, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[251633, 6746, 171, 7, 47, "Subsection"],
Cell[251807, 6755, 219, 8, 31, "Text"],
Cell[252029, 6765, 1152, 40, 91, "Text"],
Cell[253184, 6807, 1960, 57, 231, "Input"],
Cell[255147, 6866, 61, 0, 31, "Text"],
Cell[255211, 6868, 1285, 36, 121, "Input"],
Cell[256499, 6906, 61, 0, 31, "Text"],
Cell[256563, 6908, 178, 5, 32, "Input"],
Cell[256744, 6915, 518, 15, 71, "Text"],
Cell[257265, 6932, 989, 29, 122, "Input"],
Cell[258257, 6963, 288, 8, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[258582, 6976, 148, 7, 39, "Subsection"],
Cell[CellGroupData[{
Cell[258755, 6987, 178, 10, 37, "Subsubsection"],
Cell[258936, 6999, 202, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[259141, 7005, 2928, 83, 256, "Input"],
Cell[262072, 7090, 115, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[262190, 7093, 319, 9, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[262546, 7107, 163, 10, 31, "Subsubsection"],
Cell[262712, 7119, 426, 12, 51, "Text"],
Cell[263141, 7133, 310, 10, 51, "Text"],
Cell[263454, 7145, 725, 21, 77, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[264216, 7171, 195, 10, 31, "Subsubsection"],
Cell[264414, 7183, 33, 0, 31, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[264496, 7189, 140, 7, 39, "Subsection"],
Cell[264639, 7198, 168, 5, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[CellGroupData[{
Cell[264832, 7207, 215, 13, 37, "Subsubsection"],
Cell[265050, 7222, 360, 8, 51, "Text"],
Cell[265413, 7232, 6535, 176, 567, "Input"],
Cell[271951, 7410, 47, 0, 31, "Text"],
Cell[272001, 7412, 346, 13, 34, "Input"],
Cell[272350, 7427, 1065, 31, 100, "Input"],
Cell[273418, 7460, 70, 0, 31, "Text"],
Cell[273491, 7462, 501, 16, 32, "Input"],
Cell[273995, 7480, 1193, 37, 55, "Input"],
Cell[275191, 7519, 1823, 52, 121, "Input"],
Cell[277017, 7573, 2536, 71, 232, "Input"],
Cell[279556, 7646, 64, 0, 31, "Text"],
Cell[279623, 7648, 995, 31, 55, "Input",
 Evaluatable->False],
Cell[280621, 7681, 75, 0, 31, "Text"],
Cell[280699, 7683, 1243, 36, 99, "Input",
 Evaluatable->False],
Cell[281945, 7721, 51, 0, 31, "Text"],
Cell[281999, 7723, 551, 17, 32, "Input",
 Evaluatable->False],
Cell[282553, 7742, 68, 0, 31, "Text"],
Cell[282624, 7744, 444, 15, 32, "Input",
 Evaluatable->False],
Cell[283071, 7761, 103, 3, 31, "Text"],
Cell[283177, 7766, 796, 25, 55, "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[284022, 7797, 200, 8, 47, "Subsection"],
Cell[284225, 7807, 648, 12, 112, "Text"],
Cell[284876, 7821, 486, 12, 143, "Input"],
Cell[CellGroupData[{
Cell[285387, 7837, 157, 10, 37, "Subsubsection"],
Cell[285547, 7849, 5442, 170, 391, "Input"],
Cell[290992, 8021, 662, 16, 71, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[291691, 8042, 151, 10, 31, "Subsubsection"],
Cell[291845, 8054, 1215, 26, 174, "Text"],
Cell[293063, 8082, 58, 0, 31, "Text"],
Cell[293124, 8084, 6742, 198, 583, "Input"],
Cell[299869, 8284, 56, 0, 31, "Text"],
Cell[299928, 8286, 4023, 115, 287, "Input"],
Cell[303954, 8403, 3791, 112, 287, "Input"],
Cell[307748, 8517, 3707, 112, 275, "Input"],
Cell[311458, 8631, 3585, 108, 275, "Input"],
Cell[315046, 8741, 3648, 108, 275, "Input"],
Cell[318697, 8851, 3064, 90, 187, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[321810, 8947, 225, 9, 67, "Subsection"],
Cell[322038, 8958, 248, 8, 31, "Text"],
Cell[322289, 8968, 1997, 54, 165, "Input"],
Cell[324289, 9024, 464, 15, 51, "Text"],
Cell[324756, 9041, 948, 20, 112, "Text"],
Cell[325707, 9063, 2355, 65, 187, "Input"],
Cell[328065, 9130, 214, 5, 31, "Text"],
Cell[328282, 9137, 623, 21, 54, "Text"],
Cell[328908, 9160, 164, 5, 31, "Text"],
Cell[329075, 9167, 2230, 67, 165, "Input"],
Cell[331308, 9236, 2223, 67, 165, "Input"],
Cell[333534, 9305, 294, 10, 31, "Text"],
Cell[333831, 9317, 1539, 46, 99, "Input"],
Cell[335373, 9365, 65, 0, 31, "Text"],
Cell[335441, 9367, 2993, 87, 187, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[338471, 9459, 148, 8, 39, "Subsection"],
Cell[338622, 9469, 200, 6, 31, "Text"],
Cell[338825, 9477, 182, 5, 32, "Input"],
Cell[339010, 9484, 757, 23, 77, "Input"],
Cell[339770, 9509, 613, 18, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[340420, 9532, 184, 8, 39, "Subsection"],
Cell[CellGroupData[{
Cell[340629, 9544, 256, 11, 37, "Subsubsection"],
Cell[340888, 9557, 144, 3, 23, "Text"],
Cell[CellGroupData[{
Cell[341057, 9564, 125, 3, 55, "Input",
 Evaluatable->False],
Cell[341185, 9569, 680, 13, 41, "Message"],
Cell[341868, 9584, 787, 19, 127, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[342692, 9608, 408, 12, 55, "Input",
 Evaluatable->False],
Cell[343103, 9622, 769, 12, 152, "Print"],
Cell[343875, 9636, 12412, 276, 72, "Output"]
}, Open  ]],
Cell[356302, 9915, 433, 14, 55, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[356772, 9934, 166, 10, 31, "Subsubsection"],
Cell[356941, 9946, 251, 4, 51, "Text"],
Cell[357195, 9952, 2216, 63, 121, "Input"],
Cell[359414, 10017, 133, 3, 31, "Text"],
Cell[359550, 10022, 2710, 74, 165, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[362297, 10101, 287, 14, 31, "Subsubsection"],
Cell[CellGroupData[{
Cell[362609, 10119, 206, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[362818, 10125, 568, 9, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[363401, 10137, 6924, 191, 495, "Input"],
Cell[370328, 10330, 338, 6, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[370669, 10338, 5749, 157, 407, "Input"],
Cell[376421, 10497, 404, 7, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[376828, 10506, 4582, 128, 385, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[381447, 10639, 174, 10, 31, "Subsubsection"],
Cell[381624, 10651, 315, 8, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[381942, 10661, 355, 10, 32, "Input"],
Cell[382300, 10673, 532, 16, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[382835, 10691, 506, 15, 55, "Input"],
Cell[383344, 10708, 506, 15, 55, "Input"],
Cell[383853, 10725, 353, 8, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[384209, 10735, 1033, 29, 99, "Input"],
Cell[385245, 10766, 477, 14, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[385759, 10785, 180, 10, 31, "Subsubsection"],
Cell[CellGroupData[{
Cell[385964, 10799, 246, 7, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[386213, 10808, 458, 7, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[386686, 10818, 1824, 46, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[388547, 10869, 176, 10, 31, "Subsubsection"],
Cell[388726, 10881, 246, 7, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[388975, 10890, 1854, 48, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[390866, 10943, 203, 10, 31, "Subsubsection"],
Cell[391072, 10955, 50, 0, 30, "Text"],
Cell[391125, 10957, 323, 6, 51, "Text"],
Cell[391451, 10965, 1213, 33, 121, "Input"],
Cell[392667, 11000, 51, 0, 31, "Text"],
Cell[392721, 11002, 1168, 32, 99, "Input"],
Cell[393892, 11036, 56, 0, 31, "Text"],
Cell[393951, 11038, 1567, 43, 121, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[395567, 11087, 152, 7, 39, "Subsection"],
Cell[CellGroupData[{
Cell[395744, 11098, 158, 10, 37, "Subsubsection"],
Cell[395905, 11110, 60, 0, 31, "Text"],
Cell[395968, 11112, 1088, 27, 100, "Input",
 Evaluatable->False],
Cell[397059, 11141, 188, 4, 31, "Text"],
Cell[397250, 11147, 4370, 100, 297, "Input"],
Cell[401623, 11249, 446, 7, 71, "Text"],
Cell[402072, 11258, 639, 18, 99, "Input"],
Cell[402714, 11278, 85, 2, 31, "Text"],
Cell[402802, 11282, 802, 12, 111, "Text"],
Cell[403607, 11296, 3916, 101, 345, "Input"],
Cell[407526, 11399, 265, 5, 51, "Text"],
Cell[407794, 11406, 414, 12, 55, "Input"],
Cell[408211, 11420, 5616, 138, 407, "Input"],
Cell[413830, 11560, 224, 4, 51, "Text"],
Cell[414057, 11566, 306, 10, 32, "Input"],
Cell[414366, 11578, 465, 14, 55, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[414868, 11597, 252, 13, 37, "Subsubsection"],
Cell[415123, 11612, 347, 6, 51, "Text"],
Cell[415473, 11620, 1333, 38, 122, "Input",
 Evaluatable->False],
Cell[416809, 11660, 380, 7, 51, "Text"],
Cell[417192, 11669, 643, 20, 55, "Input",
 Evaluatable->False],
Cell[417838, 11691, 637, 19, 55, "Input",
 Evaluatable->False],
Cell[418478, 11712, 485, 8, 91, "Text"],
Cell[418966, 11722, 5479, 136, 407, "Input",
 Evaluatable->False],
Cell[424448, 11860, 314, 5, 51, "Text"],
Cell[424765, 11867, 755, 23, 56, "Input",
 Evaluatable->False],
Cell[425523, 11892, 264, 7, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[425824, 11904, 273, 13, 31, "Subsubsection"],
Cell[426100, 11919, 275, 5, 51, "Text"],
Cell[426378, 11926, 253, 8, 32, "Input"],
Cell[426634, 11936, 1242, 35, 143, "Input",
 Evaluatable->False],
Cell[427879, 11973, 347, 6, 51, "Text"],
Cell[428229, 11981, 1333, 38, 122, "Input",
 Evaluatable->False],
Cell[429565, 12021, 380, 7, 51, "Text"],
Cell[429948, 12030, 81, 1, 30, "Text",
 Evaluatable->True],
Cell[430032, 12033, 1217, 36, 101, "Input",
 Evaluatable->False],
Cell[431252, 12071, 835, 24, 100, "Input",
 Evaluatable->False],
Cell[432090, 12097, 100, 2, 31, "Text"],
Cell[432193, 12101, 643, 20, 55, "Input",
 Evaluatable->False],
Cell[432839, 12123, 637, 19, 55, "Input",
 Evaluatable->False],
Cell[433479, 12144, 743, 23, 56, "Input",
 Evaluatable->False],
Cell[434225, 12169, 484, 8, 91, "Text"],
Cell[434712, 12179, 10648, 260, 762, "Input",
 Evaluatable->False],
Cell[445363, 12441, 264, 7, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[445664, 12453, 154, 10, 31, "Subsubsection"],
Cell[445821, 12465, 182, 5, 31, "Text"],
Cell[446006, 12472, 1292, 34, 143, "Input"],
Cell[447301, 12508, 1517, 38, 187, "Input"],
Cell[448821, 12548, 471, 12, 51, "Text"],
Cell[449295, 12562, 1327, 35, 121, "Input"],
Cell[450625, 12599, 1505, 38, 165, "Input"],
Cell[452133, 12639, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[452270, 12648, 136, 4, 91, "Section"],
Cell[452409, 12654, 1377, 22, 341, "Input"],
Cell[453789, 12678, 326, 7, 99, "Input"],
Cell[454118, 12687, 133, 3, 51, "Text"],
Cell[454254, 12692, 185, 5, 77, "Input"],
Cell[454442, 12699, 203, 5, 77, "Input"],
Cell[454648, 12706, 200, 5, 32, "Input"],
Cell[454851, 12713, 225, 5, 55, "Input"],
Cell[455079, 12720, 312, 6, 77, "Input"],
Cell[455394, 12728, 214, 5, 32, "Input"],
Cell[455611, 12735, 517, 9, 121, "Input"],
Cell[456131, 12746, 323, 7, 77, "Input"],
Cell[456457, 12755, 371, 7, 99, "Input"],
Cell[456831, 12764, 397, 8, 99, "Input"],
Cell[457231, 12774, 311, 6, 77, "Input"],
Cell[457545, 12782, 1021, 18, 253, "Input"],
Cell[458569, 12802, 372, 7, 99, "Input"],
Cell[458944, 12811, 1135, 19, 253, "Input"],
Cell[460082, 12832, 759, 15, 187, "Input"],
Cell[460844, 12849, 434, 10, 99, "Input"],
Cell[461281, 12861, 441, 10, 99, "Input"],
Cell[461725, 12873, 447, 10, 99, "Input"],
Cell[462175, 12885, 441, 10, 99, "Input"],
Cell[462619, 12897, 447, 10, 99, "Input"],
Cell[463069, 12909, 443, 10, 99, "Input"],
Cell[463515, 12921, 446, 10, 99, "Input"],
Cell[463964, 12933, 358, 10, 55, "Input"],
Cell[464325, 12945, 404, 10, 99, "Input"],
Cell[464732, 12957, 1265, 24, 297, "Input"],
Cell[466000, 12983, 421, 10, 77, "Input"],
Cell[466424, 12995, 1309, 28, 275, "Input"],
Cell[467736, 13025, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[467839, 13031, 115, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[467979, 13042, 155, 10, 37, "Subsubsection"],
Cell[468137, 13054, 129, 4, 31, "Text"],
Cell[468269, 13060, 2504, 69, 211, "Input"],
Cell[470776, 13131, 425, 11, 51, "Text"],
Cell[471204, 13144, 1363, 42, 166, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472604, 13191, 171, 10, 37, "Subsubsection"],
Cell[472778, 13203, 480, 15, 51, "Text"],
Cell[473261, 13220, 163, 3, 31, "Text"],
Cell[473427, 13225, 2360, 68, 166, "Input"],
Cell[475790, 13295, 64, 0, 31, "Text"],
Cell[475857, 13297, 528, 16, 55, "Input"],
Cell[476388, 13315, 212, 4, 50, "Text"],
Cell[476603, 13321, 2919, 75, 342, "Input"],
Cell[479525, 13398, 192, 4, 31, "Text"],
Cell[479720, 13404, 3028, 77, 320, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482785, 13486, 171, 10, 37, "Subsubsection"],
Cell[482959, 13498, 91, 2, 31, "Text"],
Cell[483053, 13502, 1229, 34, 77, "Input"],
Cell[484285, 13538, 310, 8, 51, "Text"],
Cell[484598, 13548, 271, 8, 55, "Input"],
Cell[484872, 13558, 942, 29, 77, "Input"],
Cell[485817, 13589, 163, 3, 31, "Text"],
Cell[485983, 13594, 919, 28, 77, "Input"],
Cell[486905, 13624, 939, 28, 77, "Input"],
Cell[487847, 13654, 960, 32, 91, "Text"],
Cell[488810, 13688, 347, 11, 32, "Input"],
Cell[489160, 13701, 514, 18, 51, "Text"],
Cell[489677, 13721, 1304, 35, 77, "Input"],
Cell[490984, 13758, 581, 18, 51, "Text"],
Cell[491568, 13778, 281, 8, 55, "Input"],
Cell[491852, 13788, 800, 24, 77, "Input"],
Cell[492655, 13814, 318, 10, 32, "Input"],
Cell[492976, 13826, 167, 3, 31, "Text"],
Cell[493146, 13831, 919, 28, 77, "Input"],
Cell[494068, 13861, 954, 28, 77, "Input"],
Cell[495025, 13891, 779, 25, 90, "Text"],
Cell[495807, 13918, 291, 8, 55, "Input"],
Cell[496101, 13928, 952, 29, 77, "Input"],
Cell[497056, 13959, 112, 5, 31, "Text"],
Cell[497171, 13966, 367, 11, 32, "Input"],
Cell[497541, 13979, 167, 3, 31, "Text"],
Cell[497711, 13984, 934, 28, 77, "Input"],
Cell[498648, 14014, 949, 28, 77, "Input"],
Cell[499600, 14044, 97, 2, 31, "Text"],
Cell[499700, 14048, 1406, 37, 165, "Input"],
Cell[501109, 14087, 64, 0, 31, "Text"],
Cell[501176, 14089, 1300, 34, 165, "Input"],
Cell[502479, 14125, 212, 4, 51, "Text"],
Cell[502694, 14131, 10623, 250, 957, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[513366, 14387, 122, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[513513, 14398, 155, 10, 37, "Subsubsection"],
Cell[513671, 14410, 568, 11, 71, "Text"],
Cell[514242, 14423, 1396, 38, 99, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[515675, 14466, 162, 10, 31, "Subsubsection"],
Cell[515840, 14478, 552, 17, 71, "Text"],
Cell[516395, 14497, 3313, 88, 231, "Input"],
Cell[519711, 14587, 527, 8, 71, "Text"],
Cell[520241, 14597, 2639, 78, 209, "Input"],
Cell[522883, 14677, 505, 11, 71, "Text"],
Cell[523391, 14690, 7822, 199, 737, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[531262, 14895, 107, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[531394, 14906, 163, 10, 37, "Subsubsection"],
Cell[531560, 14918, 292, 9, 51, "Text"],
Cell[531855, 14929, 126, 3, 32, "Input"],
Cell[531984, 14934, 317, 6, 77, "Input"],
Cell[532304, 14942, 3153, 87, 233, "Input"],
Cell[535460, 15031, 734, 26, 70, "Text"],
Cell[536197, 15059, 401, 12, 32, "Input"],
Cell[536601, 15073, 660, 20, 32, "Input"],
Cell[537264, 15095, 153, 4, 31, "Text"],
Cell[537420, 15101, 1450, 38, 165, "Input"],
Cell[538873, 15141, 173, 5, 31, "Text"],
Cell[539049, 15148, 845, 25, 55, "Input"],
Cell[539897, 15175, 867, 25, 55, "Input"],
Cell[540767, 15202, 349, 11, 51, "Text"],
Cell[541119, 15215, 3010, 77, 275, "Input"],
Cell[544132, 15294, 160, 5, 31, "Text"],
Cell[544295, 15301, 1282, 41, 165, "Input"],
Cell[545580, 15344, 8709, 259, 634, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[554338, 15609, 166, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[554529, 15620, 155, 10, 37, "Subsubsection"],
Cell[554687, 15632, 60, 0, 31, "Text"],
Cell[554750, 15634, 2882, 77, 231, "Input"],
Cell[557635, 15713, 230, 6, 31, "Text"],
Cell[557868, 15721, 2882, 77, 189, "Input",
 Evaluatable->False],
Cell[560753, 15800, 3053, 81, 189, "Input",
 Evaluatable->False],
Cell[563809, 15883, 53, 0, 31, "Text"],
Cell[563865, 15885, 3276, 88, 253, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[567178, 15978, 158, 10, 31, "Subsubsection"],
Cell[567339, 15990, 375, 6, 71, "Text"],
Cell[567717, 15998, 1613, 45, 145, "Input"],
Cell[569333, 16045, 284, 5, 51, "Text"],
Cell[569620, 16052, 158, 4, 32, "Input",
 Evaluatable->False],
Cell[569781, 16058, 42, 0, 31, "Text"],
Cell[569826, 16060, 176, 5, 32, "Input"],
Cell[570005, 16067, 428, 9, 51, "Text"],
Cell[570436, 16078, 3622, 114, 209, "Input"],
Cell[574061, 16194, 506, 16, 54, "Text"],
Cell[574570, 16212, 4399, 112, 429, "Input"],
Cell[578972, 16326, 69, 0, 31, "Text"],
Cell[579044, 16328, 465, 14, 32, "Input"],
Cell[579512, 16344, 2418, 70, 143, "Input"],
Cell[581933, 16416, 1858, 51, 165, "Input"],
Cell[583794, 16469, 1920, 53, 165, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[585751, 16527, 151, 10, 37, "Subsubsection"],
Cell[585905, 16539, 474, 10, 71, "Text"],
Cell[586382, 16551, 2565, 73, 121, "Input"],
Cell[588950, 16626, 1309, 39, 77, "Input"],
Cell[590262, 16667, 307, 5, 51, "Text"],
Cell[590572, 16674, 10860, 260, 759, "Input"],
Cell[601435, 16936, 698, 18, 143, "Input"],
Cell[602136, 16956, 397, 8, 51, "Text"],
Cell[602536, 16966, 2782, 75, 209, "Input"],
Cell[605321, 17043, 171, 3, 31, "Text"],
Cell[605495, 17048, 7331, 170, 650, "Input"],
Cell[612829, 17220, 109, 3, 32, "Input"],
Cell[612941, 17225, 96, 2, 31, "Text"],
Cell[613040, 17229, 1054, 33, 55, "Input"],
Cell[614097, 17264, 2720, 67, 209, "Input"],
Cell[616820, 17333, 76, 2, 32, "Input"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[616957, 17342, 114, 4, 91, "Section"],
Cell[617074, 17348, 585, 11, 143, "Input"],
Cell[617662, 17361, 326, 7, 99, "Input"],
Cell[617991, 17370, 193, 5, 55, "Input"],
Cell[618187, 17377, 295, 6, 99, "Input"],
Cell[618485, 17385, 689, 12, 275, "Input"],
Cell[619177, 17399, 300, 6, 77, "Input"],
Cell[619480, 17407, 1039, 19, 231, "Input"],
Cell[620522, 17428, 370, 7, 99, "Input"],
Cell[620895, 17437, 393, 7, 99, "Input"],
Cell[621291, 17446, 392, 8, 99, "Input"],
Cell[621686, 17456, 1038, 24, 187, "Input"],
Cell[622727, 17482, 414, 8, 99, "Input"],
Cell[623144, 17492, 610, 16, 60, "Text"],
Cell[623757, 17510, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[623860, 17516, 115, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[624000, 17527, 155, 10, 37, "Subsubsection"],
Cell[624158, 17539, 735, 18, 91, "Text"],
Cell[624896, 17559, 180, 5, 32, "Input"],
Cell[625079, 17566, 237, 6, 31, "Text"],
Cell[625319, 17574, 3792, 95, 385, "Input"],
Cell[629114, 17671, 91, 1, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[629208, 17674, 710, 21, 55, "Input"],
Cell[629921, 17697, 159, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[630083, 17703, 1744, 47, 165, "Input"],
Cell[631830, 17752, 115, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[631948, 17755, 3618, 95, 275, "Input"],
Cell[635569, 17852, 391, 9, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[635963, 17863, 6414, 173, 341, "Input"],
Cell[642380, 18038, 797, 14, 190, "Text"],
Cell[643180, 18054, 5010, 141, 256, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[648227, 18200, 150, 10, 37, "Subsubsection"],
Cell[648380, 18212, 64, 0, 31, "Text"],
Cell[648447, 18214, 3297, 84, 253, "Input"],
Cell[651747, 18300, 307, 8, 51, "Text"],
Cell[652057, 18310, 425, 13, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[652519, 18328, 196, 10, 31, "Subsubsection"],
Cell[652718, 18340, 516, 9, 71, "Text"],
Cell[653237, 18351, 4574, 112, 385, "Input"],
Cell[657814, 18465, 543, 17, 51, "Text"],
Cell[658360, 18484, 1791, 46, 143, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[660188, 18535, 198, 10, 31, "Subsubsection"],
Cell[660389, 18547, 693, 10, 91, "Text"],
Cell[661085, 18559, 514, 13, 51, "Text"],
Cell[661602, 18574, 2587, 68, 210, "Input"],
Cell[664192, 18644, 195, 8, 31, "Text"],
Cell[664390, 18654, 32633, 738, 3070, "Input"],
Cell[697026, 19394, 222, 7, 31, "Text"],
Cell[697251, 19403, 859, 25, 77, "Input"],
Cell[698113, 19430, 415, 9, 51, "Text"],
Cell[698531, 19441, 6810, 178, 583, "Input"],
Cell[705344, 19621, 242, 6, 31, "Text"],
Cell[705589, 19629, 4518, 134, 297, "Input"],
Cell[710110, 19765, 186, 4, 31, "Text"],
Cell[710299, 19771, 1081, 36, 77, "Input"],
Cell[711383, 19809, 446, 14, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[711866, 19828, 184, 10, 31, "Subsubsection"],
Cell[712053, 19840, 511, 8, 71, "Text"],
Cell[712567, 19850, 425, 14, 77, "Input"],
Cell[712995, 19866, 133, 3, 31, "Text"],
Cell[713131, 19871, 1121, 36, 99, "Input"],
Cell[714255, 19909, 29, 0, 31, "Text"],
Cell[714287, 19911, 997, 31, 99, "Input"],
Cell[715287, 19944, 29, 0, 31, "Text"],
Cell[715319, 19946, 9250, 267, 319, "Input"],
Cell[724572, 20215, 29, 0, 31, "Text"],
Cell[724604, 20217, 9432, 271, 319, "Input"],
Cell[734039, 20490, 29, 0, 31, "Text"],
Cell[734071, 20492, 14871, 402, 583, "Input"],
Cell[748945, 20896, 6758, 184, 495, "Input"],
Cell[755706, 21082, 720, 18, 71, "Text"],
Cell[756429, 21102, 3985, 105, 297, "Input"],
Cell[760417, 21209, 97, 2, 31, "Text"],
Cell[760517, 21213, 5446, 148, 297, "Input"],
Cell[765966, 21363, 203, 4, 31, "Text"],
Cell[766172, 21369, 24527, 640, 1047, "Input"],
Cell[790702, 22011, 292, 8, 51, "Text"],
Cell[790997, 22021, 4677, 132, 519, "Input"],
Cell[795677, 22155, 168, 5, 31, "Text"],
Cell[795848, 22162, 8997, 205, 694, "Input"],
Cell[804848, 22369, 1109, 20, 131, "Text"],
Cell[805960, 22391, 643, 18, 77, "Input"],
Cell[806606, 22411, 165, 3, 31, "Text"],
Cell[806774, 22416, 1867, 48, 209, "Input"],
Cell[808644, 22466, 6826, 162, 517, "Input"],
Cell[815473, 22630, 2292, 63, 187, "Input"],
Cell[817768, 22695, 251, 5, 31, "Text"],
Cell[818022, 22702, 45962, 1074, 3690, "Input"],
Cell[863987, 23778, 277, 9, 31, "Text"],
Cell[864267, 23789, 6909, 176, 606, "Input"],
Cell[871179, 23967, 401, 7, 71, "Text"],
Cell[871583, 23976, 2348, 61, 165, "Input"],
Cell[873934, 24039, 116, 3, 31, "Text"],
Cell[874053, 24044, 2643, 67, 276, "Input"],
Cell[876699, 24113, 113, 3, 31, "Text"],
Cell[876815, 24118, 673, 19, 99, "Input"],
Cell[877491, 24139, 2063, 55, 188, "Input"],
Cell[879557, 24196, 632, 11, 131, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[880226, 24212, 193, 10, 37, "Subsubsection"],
Cell[880422, 24224, 1383, 23, 151, "Text"],
Cell[881808, 24249, 752, 16, 51, "Text"],
Cell[882563, 24267, 885, 28, 55, "Input",
 Evaluatable->False],
Cell[883451, 24297, 4348, 110, 454, "Input"],
Cell[887802, 24409, 376, 10, 50, "Text"],
Cell[888181, 24421, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[888318, 24430, 132, 4, 91, "Section"],
Cell[888453, 24436, 248, 6, 89, "Text"],
Cell[888704, 24444, 402, 8, 99, "Input"],
Cell[889109, 24454, 326, 7, 99, "Input"],
Cell[889438, 24463, 645, 13, 209, "Input"],
Cell[890086, 24478, 208, 5, 77, "Input"],
Cell[890297, 24485, 209, 5, 77, "Input"],
Cell[890509, 24492, 204, 5, 32, "Input"],
Cell[890716, 24499, 253, 6, 77, "Input"],
Cell[890972, 24507, 217, 5, 32, "Input"],
Cell[891192, 24514, 188, 5, 32, "Input"],
Cell[891383, 24521, 173, 5, 32, "Input"],
Cell[891559, 24528, 244, 6, 77, "Input"],
Cell[891806, 24536, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[891909, 24542, 119, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[892053, 24553, 155, 10, 37, "Subsubsection"],
Cell[892211, 24565, 163, 3, 31, "Text"],
Cell[892377, 24570, 3229, 72, 188, "Input"],
Cell[895609, 24644, 129, 3, 31, "Text"],
Cell[895741, 24649, 6626, 177, 561, "Input"],
Cell[902370, 24828, 1045, 30, 121, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[903452, 24863, 192, 10, 37, "Subsubsection"],
Cell[903647, 24875, 345, 6, 51, "Text"],
Cell[903995, 24883, 6548, 154, 539, "Input"],
Cell[910546, 25039, 270, 5, 51, "Text"],
Cell[910819, 25046, 12044, 267, 1244, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[922912, 25319, 137, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[923074, 25330, 178, 10, 37, "Subsubsection"],
Cell[923255, 25342, 44, 0, 30, "Text"],
Cell[923302, 25344, 1068, 28, 77, "Input"],
Cell[924373, 25374, 1862, 49, 165, "Input"],
Cell[926238, 25425, 300, 6, 70, "Text"],
Cell[926541, 25433, 908, 21, 97, "Text"],
Cell[927452, 25456, 2373, 60, 231, "Input"],
Cell[929828, 25518, 2119, 54, 231, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[931984, 25577, 164, 10, 37, "Subsubsection"],
Cell[932151, 25589, 102, 2, 31, "Text"],
Cell[932256, 25593, 412, 13, 61, "Text"],
Cell[932671, 25608, 584, 15, 77, "Input"],
Cell[933258, 25625, 291, 5, 51, "Text"],
Cell[933552, 25632, 4496, 110, 495, "Input"],
Cell[938051, 25744, 111, 3, 31, "Text"],
Cell[938165, 25749, 2853, 71, 341, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[941067, 25826, 126, 7, 47, "Subsection"],
Cell[941196, 25835, 739, 22, 57, "Text"],
Cell[941938, 25859, 4864, 123, 452, "Input"],
Cell[946805, 25984, 76, 2, 32, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[946930, 25992, 97, 4, 53, "Section"],
Cell[947030, 25998, 31, 0, 31, "Text"],
Cell[947064, 26000, 202, 6, 32, "Input"],
Cell[947269, 26008, 326, 7, 99, "Input"],
Cell[947598, 26017, 21, 0, 31, "Text"],
Cell[947622, 26019, 489, 9, 121, "Input"],
Cell[948114, 26030, 501, 9, 121, "Input"],
Cell[948618, 26041, 510, 9, 121, "Input"],
Cell[949131, 26052, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[949234, 26058, 128, 7, 47, "Subsection"],
Cell[949365, 26067, 18, 0, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[949420, 26072, 154, 7, 47, "Subsection"],
Cell[949577, 26081, 2215, 38, 131, "Text"],
Cell[951795, 26121, 1021, 31, 99, "Input"],
Cell[952819, 26154, 1082, 32, 165, "Input"],
Cell[953904, 26188, 1191, 34, 144, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[955132, 26227, 103, 7, 47, "Subsection"],
Cell[CellGroupData[{
Cell[955260, 26238, 142, 10, 37, "Subsubsection"],
Cell[955405, 26250, 76, 2, 32, "Input"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[955542, 26259, 104, 4, 53, "Section"],
Cell[955649, 26265, 72, 0, 31, "Text"],
Cell[955724, 26267, 278, 8, 55, "Input",
 Evaluatable->False],
Cell[956005, 26277, 347, 8, 99, "Input",
 Evaluatable->False],
Cell[956355, 26287, 36, 0, 31, "Text"],
Cell[956394, 26289, 424, 11, 99, "Input",
 Evaluatable->False],
Cell[956821, 26302, 244, 6, 77, "Input",
 Evaluatable->False],
Cell[957068, 26310, 99, 3, 32, "Input",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[957192, 26317, 128, 7, 47, "Subsection"],
Cell[957323, 26326, 160, 3, 51, "Text"],
Cell[957486, 26331, 174, 5, 32, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[957697, 26341, 127, 7, 47, "Subsection"],
Cell[957827, 26350, 116, 3, 31, "Text"],
Cell[957946, 26355, 2335, 61, 231, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[960318, 26421, 126, 7, 47, "Subsection"],
Cell[960447, 26430, 264, 8, 55, "Input",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[960736, 26442, 202, 11, 37, "Subsubsection"],
Cell[960941, 26455, 159, 5, 31, "Text"],
Cell[961103, 26462, 185, 6, 32, "Input",
 Evaluatable->False],
Cell[961291, 26470, 173, 5, 32, "Input",
 Evaluatable->False],
Cell[961467, 26477, 97, 3, 32, "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[961625, 26487, 75, 4, 53, "Section"],
Cell[961703, 26493, 108, 3, 31, "Text"],
Cell[961814, 26498, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[961917, 26504, 111, 2, 32, "Input"],
Cell[962031, 26508, 45, 1, 32, "Output"]
}, Open  ]],
Cell[962091, 26512, 523, 15, 99, "Input"],
Cell[962617, 26529, 100, 3, 32, "Input"],
Cell[962720, 26534, 76, 2, 32, "Input"],
Cell[962799, 26538, 98, 2, 32, "Input"],
Cell[962900, 26542, 119, 3, 31, "Text"],
Cell[963022, 26547, 95, 3, 32, "Input"],
Cell[CellGroupData[{
Cell[963142, 26554, 287, 8, 32, "Input"],
Cell[963432, 26564, 4407, 71, 759, "Output"]
}, Open  ]],
Cell[967854, 26638, 298, 9, 32, "Input"],
Cell[968155, 26649, 18787, 274, 1837, "Input"],
Cell[986945, 26925, 55, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[987025, 26929, 109, 2, 32, "Input"],
Cell[987137, 26933, 45, 1, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[987231, 26940, 92, 4, 67, "Section"],
Cell[987326, 26946, 36, 0, 31, "Text"],
Cell[987365, 26948, 85, 2, 31, "Text"],
Cell[987453, 26952, 123, 3, 31, "Text"],
Cell[987579, 26957, 235, 4, 51, "Text"],
Cell[987817, 26963, 114, 3, 32, "Input"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
