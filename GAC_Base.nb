(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1477623,      38642]
NotebookOptionsPosition[   1424650,      37236]
NotebookOutlinePosition[   1425179,      37260]
CellTagsIndexPosition[   1425102,      37255]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Geometric Algebra & Calculus",
 StyleBox["PART I",
  FontSize->16]
}], "Title",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[StyleBox["initialization, products, orthogonal base, main \
operations (involutions, grade manipulation, magnitude...), matrix \
representations",
 FontSize->16]], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[StyleBox["Version 0.2.1.3 (2018-10-31) ",
 FontSize->16]], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".Copyright,  License, credit, references and notes"
}], "Section"],

Cell["\<\
GeometricAlgebra&Calculus:  Software for calculation with Clifford \
multivectors.
Copyright, 2018  A. Acus (arturas.acus@tfai.vu.lt) ,  A. Dargys \
(adolfas.dargys@ftmc.lt)

This file is part of Geometric Algebra&Calculus package.\
\>", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". License and credit"
}], "Subsection"],

Cell["\<\
GeometricAlgebra&Calculus is free software:  you can redistribute it and/or \
modify it under the terms of the GNU Affero General Public License as \
published by the Free Software Foundation, either version 3 of the License, \
or (at your option) any later version.

GeometricAlgebra is distributed in the hope that it will be useful, but \
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or \
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License \
for more details.

You should have received a copy of the GNU Affero General Public License \
along with GeometricAlgebra.  If not, see <http://www.gnu.org/licenses/>.\
\>", "Text"],

Cell["\<\
Ideas of efficient implementation of geometric algebra multiplication of  \
orthogonal base vectors were borrowed form G. Stacey Staples articles and \
programming packages CliffMath11, CliffOC11, CliffSymNil11. ( \
http://www.siue.edu/~sstaple/index_files/research.htm).

A number of important functions were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). We \
also much like it general structure, test and  development solutions. 

Improved product precedence was implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

A lot of other sources was used to implement Clifford algebra and calculus \
algorithms (see references for more details).\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". References"
}], "Subsection"],

Cell[TextData[{
 "[DH-STAx.y ]\t   Hastenes, David \"Space-time algebra\", 1966 (third \
printing 1992), D. Reidel Publishing Company, Dordrecht Holland,  \n\
[DH-CA2GCx.y]    Hastenes, David \"Clifford algebra to geometric calculus\", \
1987, D. Reidel Publishing Company, Dordrecht Holland,  \n[CHAL-GA4Px.y]  \
Chris Doran, Anthony Lasenby \"Geometric Algebra for physicists\" Cambridge \
University, 2003\n[AB-I2GA&C]\t   Bromborsky, Alan \"An Introduction to \
Geometric Algebra and Calculus\", version of December 11, 2011 \n\
[KG-HFinP&Sp]   Klaus Gurlebeck, Klaus Habetha, Wolfgang Sprossib, \
\"Holomorphics functions in the plane and n-dimensional space\", Springer, \
2008\n[EH-VDC]\t  Eckhard MS Hitzer, \"Vector differential calculus\" Mem. \
Fac. Eng. Fukui., Vol 50 No1, 2002\n[EH-MDC] \t  Eckhard MS Hitzer, \
\"Multivector differential calculus\", Advances in Applied Clifford Algebras \
12(2) pp. 135-182, 2002\n[ECh-GA]\t  Eric Chisolm \"Geometric Algebra\" , \
arXiv 1205.5935v1\n[SS-OCICAS]\tRene Schott, G Stacey Staples \"Operator \
calculus and invertible Clifford Appel systems: theory and applications to \
n-particle fermion algebra\" and other same authors articles\n[WCS-TAGA]     \
William C. Schulz  \[OpenCurlyDoubleQuote]Theory and application of Grassmann \
Algebra\[CloseCurlyDoubleQuote], 2011, Vienna\n[RA-CoNCGBinG&CA]     Rafal \
Ablamowicz, Computation of non-commutative Grobner bases in Grassmann and \
Clifford algebras, Adv. appl. Clifford alg. 20 (2010),  447\[Dash]476\n\
[TB-GBA4GAinMP ]     Troy Brachey, Grobner Bases Algorithms for Grassmann \
Algebras in Maple package, 2008\n[NDNO-CoMISoMvCA] Nedim Degirmenci, Bulifer \
Ozdemir \[OpenCurlyDoubleQuote]The Construction of Maximum Independent Set of \
Matrices via Clifford Algebras\[CloseCurlyDoubleQuote] Turk J. Math. 31, \
(2007) 193-205\n[NDSK-EIoRCA] Nedim Degirmenci, S. Karapazar \
\[OpenCurlyDoubleQuote] Explicit Isomorphisms of Real Clifford Algebras\
\[CloseCurlyDoubleQuote], Int. Journal of Mathematics and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "l Sciencesm, (2006), 1-13, ID 78613\n[MRdT] Michael Rausch de Traubennerg \
\[OpenCurlyDoubleQuote]Clifford Algebras in Physics\[CloseCurlyDoubleQuote] \
Adv. appl. Clifford alg. 19 (2009), 869-908\n[PL-GPW] Perti Lounesto, G.P. \
Wene \[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173\n[RA-LoCGAaA]     (ed. Rafal Ablamowicz, Garret \
Sobczyk) Lectures on Clifford (Geometric) algebras and applications, \
Springer, 2004\n[GSSDW-CADoCOGE]G.S. Staples, D. Wylie. Clifford algebra \
decompositions of conformal orthogonal group elements, Clifford Analysis, \
Clifford Algebras and Their Applications, 4 (2015), 223-240\n[DF-EAfFaJoB] D. \
Fontijne \[OpenCurlyDoubleQuote]Efficient Algorithms for factorization and \
Join of Blades\[CloseCurlyDoubleQuote]. \n[MarchukShirokov2008] Marchuk, \
N.G., Shirokov D.S. Unitary spaces on Clifford algebras, arXiv:0705.1641v1 \
(2008)\n"
}], "Text",
 CellTags->"references"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Setup & configuration"
}], "Section"],

Cell["\<\
In order to setup the package follow three steps below. Note, that evaluation \
property was removed from all input cells in this section (copy their content \
and evaluate in your system).\
\>", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Add interpretation to geometric algebra operation symbols"
}], "Subsection"],

Cell[TextData[{
 "It is assumed that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version is 8 or above. You need to have writing permisions to \nto system \
file pointed by system variable (evaluate it in your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " system !!!)"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData["System`Dump`unicodeCharactersTR"], "Input",
 Evaluatable->False],

Cell[BoxData["\<\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/FrontEnd/\
TextResources/UnicodeCharacters.tr\"\>"], "Output"]
}, Open  ]],

Cell["\<\
in order to append contents of the file UnicodeCharactersAdd.tr  (windows \
users should use file UnicodeCharactersAddWin10.tr)\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"appendFile", "=", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", 
     RowBox[{"EvaluationNotebook", "[", "]"}], "]"}], "<>", 
    "\"\<UnicodeCharactersAdd.tr\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", "appendFile", "]"}]}], "Input",
 Evaluatable->False],

Cell["\<\
0x26AC      \[GeometricProduct] ($gp$)      Infix       440 None    5   5
0x22CE      \[OuterProduct]     ($op$)      Infix       450 None    5   5
0x26ab      \[DorstProduct]     ($id$)      Infix       459 None    5   5
0x2219      \[InnerProduct]     ($ip$)      Infix       460 None    5   5
0x23A6      \[LeftContract]     ($il$)      Infix       461 None    5   5
0x23A3      \[RightContract]    ($ir$)      Infix       462 None    5   5\
\>", "Print"]
}, Open  ]],

Cell["\<\
 This is needed in order to ensure correct precedences and  infix notations \
for inner, outer and geometric products. Do not forget to make copy of the \
system file before modification!\
\>", "Text"],

Cell[BoxData[
 RowBox[{"CopyFile", "[", 
  RowBox[{"System`Dump`unicodeCharactersTR", ",", 
   RowBox[{"System`Dump`unicodeCharactersTR", "<>", "\"\<.old\>\""}]}], 
  "]"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "For Linux and Mac users this is all what needed. Restart ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and go to example files. Windows users need next step."
}], "Text"],

Cell[CellGroupData[{

Cell["Notes and details on the change", "Subsubsection"],

Cell[TextData[{
 "Note that 0x22CF char was replaced by 0x22CE.There seems to be some \
inconsistency about these two chars, because in text cells it prints \
differently than in input cells (different fonts?). However, if after typing \
\[EscapeKey]op\[EscapeKey] instead wedge symbol you see vee symbol, replace \
0x22CE by 0x22CF. \n Also \\[EmptySmallCircle ]  (\[EmptySmallCircle], which \
already has definition in UnicodeSymbols.tr file) was replaced by unicode \
0x26AC for geometric product notation in order to avoid symbols clash. \
Precedence order is tricky, geometric product will not work correctly if 440 \
is replaced by 430. Also 540 ... precedences was tested and should be \
avoided.  UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, as was noted above, input \
cells are ok.), GeometricProduct(\[GeometricProduct]), Plus (lowest). We use  \
:il: (inner left) for left contraction and :ir: (inner right) for right \
contraction, because :lc: and :rc: already have meaning in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  "
}], "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Private style sheet creation (required for Windows users only)"
}], "Subsection"],

Cell[TextData[{
 "This step only concerns users which run ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " on Windows. The Mac and linux users can skip this step unless they want to \
change ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " default font (not recommended)."
}], "Text"],

Cell[TextData[{
 "The problem is OS specific, because on Windows default font used for input \
and output has very limited set of unicode characters. Below is a command \
from  ",
 ButtonBox["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/113478/is-there-a-global-\
setting-for-mathematicas-base-fonts"],
 ", which install private user style sheet with modified input and output \
fonts. As far as we know this is only needed for Windows users. If in the \
cell below you see list of symbols, which are  {empty small circle, wedge, \
center dot, left contract, right contract, fat dot}, i.e.",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCECxNuBGMTe+n/L
KBpFo4guaMOSI0312zrmfd1MBdP+rVt4uLF+e9eC79QwbRQNEvR3SZUlFwOX
Qtq9DVQw7ffCIhMOBh6V/EcbB95ro4haaDSRjCKCaDSR0Bn927T+z1Cri4dL
Ill1xExKXsG0rmHpL2wKfs4vzdQUFxAwOLByYAN809OGuLMD7AaS0VBKJBuW
7EpwdlKW19O0LC6a9hklP275MnvijhQdMXGPc2sw9a496yYurp9zZMYi3C3q
ze864v1lBYRElCNS+z/QKLNvXrrGUCG5fw09o5hyNGQSyeZVR/ykORgZoICZ
37NgAVqh8b7NRFLC98JaTO3rLvpKSpl0vMdj/uq+JBnl6rbFn+bX58nJl05d
T4vQ/rOo3FlYXM2t9yNNYnPzl8VLvmyivslDJZH8W97sxgtPIiDAKRd3cz2y
mg234uXF1MqeYQmlzc/L1cXQ1aNFX4mNgv9FUAJbc8JO1rllJQ0iceO9NF2H
5No8dZsty7ZQ3fAH2bqCTEyCOtkPqBGVyGioJJK/i8vNOZHTCAObBCRO4WjT
k2IDUV71pGS0ymLL+974WBVeMcPSp3hctX52l4aEW0TJ+oIgWwmDOfM3UjsS
t/5b1ZOlZrdl2fp7Gbo28TO/U9n8zS/r3IwFBY3d615SuzAZKonk/4Z5UzW5
meBJhJFFwbP3I0pi2PyqzlaKU9TJp/U1SihtedPq7ybOJWPX8BpvS+P38t7p
AY7hbuELJq76i9cxv5Y09kZFtBbM/kqCFzbcSta1ipkBTBt/V7QnKVuuWryZ
2lYQRuQZSzCRkGQs8YmEDNf+XFiVq87HysjAyMihap16bjVaib3+WriMqHrl
CywpYcvzCg0x2ZgbuKsbUhCw1lDkZhYIaliOPy0ho+8zUp2U/Y6ugrh507Ny
S32Hqhc4Q4kcK2jk8v+EEwlpxhKdSMgNhM0b386bfXfxOmy6tryu1xWXDLq8
DlNq/eUgKQmDlrdU6bNsmDdBkYNDOhybRbicvWyzvX5Vz+p/cJGNS9e66JRN
XEs1K2jkcjAikEhINJbYREKLQNi88Vm9hZSo0yksXeA1Jx1EpSybqFJZ/5qb
ps/B41i86Ddpztv8j6AIhVbQyOWEEgmpxhKZSGgQCKsOGvAysYkFpEzHNlO5
5cuUBFchFiZeo0NDbSBrANGfJfWx2irGKirGipI8TFRuuDJziOupgAy3tit7
Qqeh1y0/li77sA5vv3Lz+g9Ll/0YakPiA4ggsQkH1E0kVDd2FA0M2rzp25o1
n2Hoy7qNuOrHQWHsKBpFo2gUDRgCAHomup0=
     "], {{0, 20}, {183, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{183, 20},
   PlotRange->{{0, 183}, {0, 20}}]], "Input",
  Evaluatable->False,
  ImageSize->{187, 19},
  ImageMargins->{{0, 0}, {0, 0}},
  ImageRegion->{{0, 1}, {0, 1}}],
 " then there is no need for private style sheet. If you see instead some \
empty squares you need to find font which has the mentioned characters"
}], "Text"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[GeometricProduct]", 
   RowBox[{",", 
    RowBox[{"\[OuterProduct]", 
     RowBox[{",", 
      RowBox[{"\[InnerProduct]", 
       RowBox[{",", 
        RowBox[{"\[LeftContract]", 
         RowBox[{",", 
          RowBox[{"\[RightContract]", 
           RowBox[{",", "\[DorstProduct]"}]}]}]}]}]}]}]}]}]}], "}"}]], "Input",\

 Evaluatable->False],

Cell["\<\
The simplest way to test font is to select the cell above and change font \
with front end Format/Font menu command. When you will find a font where all \
chars are represented correctly, you can set it as default for Standard form \
using the command below.  In particular  we noticed that \
\[OpenCurlyDoubleQuote]Microsoft Sans Serif\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]OpenSymbols\[CloseCurlyDoubleQuote] are ok for Windows \
10.  In order to generate and install private style sheet do the folowing.\
\>", "Text"],

Cell["\<\
Make both cells below Evaluatable and execute. Once style sheet  \
\"GAC_Style.nb\" is installed in you private Mathematica folder use it with \
all notebooks were you load this package. After that do this don\
\[CloseCurlyQuote]t forget to make both cells below nonexecutable again, i.e. \
 remove front end command Cell/Cell Properties/Evaluatable mark from them\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"setFont", "[", 
   RowBox[{"fontFamily_", ",", "fontSize_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"styleNB", "=", 
       RowBox[{"Notebook", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cell", "[", 
           RowBox[{"StyleData", "[", 
            RowBox[{"StyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}], 
            "]"}], "]"}], ",", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"StyleData", "[", "\"\<StandardForm\>\"", "]"}], ",", 
            RowBox[{"FontFamily", "\[Rule]", 
             RowBox[{"ToString", "[", "fontFamily", "]"}]}], ",", 
            RowBox[{"FontSize", "\[Rule]", 
             RowBox[{"ToExpression", "[", "fontSize", "]"}]}]}], "]"}]}], 
         "}"}], "]"}]}], ",", 
      RowBox[{"styleSheetName", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
         "$UserBaseDirectory", ",", "\"\<SystemFiles\>\"", ",", 
          "\"\<FrontEnd\>\"", ",", "\"\<StyleSheets\>\"", ",", 
          "\"\<GAC_Style.nb\>\""}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FileExistsQ", "[", "styleSheetName", "]"}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"$FrontEnd", ",", 
         RowBox[{
         "DefaultStyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}]}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"styleSheetName", ",", "styleNB"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SetOptions", "[", 
      RowBox[{"$FrontEnd", ",", 
       RowBox[{"DefaultStyleDefinitions", "\[Rule]", "styleSheetName"}]}], 
      "]"}]}]}], "]"}]}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"setFont", "[", 
  RowBox[{"\"\<Microsoft Sans Serif\>\"", " ", ",", "14"}], "]"}]], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Adjust compilation target (optional optimization step)"
}], "Subsection"],

Cell[TextData[{
 "\nGo to next section ",
 StyleBox["Initialization",
  FontWeight->"Bold"],
 " (below) and find variable ",
 StyleBox["$",
  FontWeight->"Bold"],
 "gaPackageOptions.  It contains a number of settings, the most important of \
which is  ",
 StyleBox["CompilationTarget",
  FontWeight->"Bold"],
 ". It defines the way some package functions are compiled. The safe choice \
is to set it to  ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ", which, however, is slightly slower that ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " (compilation to \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] binary \
code). The drawback of compilation to C is that compilation itself takes more \
time, therefore, the package loadind takes more time. If you have C compiler \
installed, read below how to test if it works properly. If not, just set  ",
 StyleBox["CompilationTarget\[Rule]\[CloseCurlyDoubleQuote]WVM",
  FontWeight->"Bold"],
 " back."
}], "Text"],

Cell[CellGroupData[{

Cell["How to test whether compilation to C works properly", "Subsubsection"],

Cell["\<\
The speed of base elements products slighty depends on compilation type.  In \
order to make decision make cells below evaluatabe. First, test what C \
compilers are available in your system. By default on Windows external \
compilers are absent.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
If you get nonempty list,  then try to compile trivial function. The output \
should be CompiledFunction[ ].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], "//", 
  "FullForm"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CompiledFunction", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"10", ",", "10.3`", ",", "5468"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"Blank", "[", "Real", "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"List", "[", "1", "]"}], "]"}], ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"List", "[", "x", "]"}], ",", "x"}], "]"}], ",", "Evaluate", 
     ",", 
     RowBox[{"LibraryFunction", "[", 
      RowBox[{
      "\"\</home/acus/.Mathematica/ApplicationData/CCompilerDriver/\
BuildFolder/acus-7694/compiledFunction26.so\>\"", ",", 
       "\"\<compiledFunction26\>\"", ",", 
       RowBox[{"List", "[", 
        RowBox[{"List", "[", 
         RowBox[{"Real", ",", "0", ",", "\"\<Constant\>\""}], "]"}], "]"}], 
       ",", "Real"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output"]
}, Open  ]],

Cell["\<\
If compilation was succesfull, then in subsection \[OpenCurlyDoubleQuote]Help \
functions, installations options\[CloseCurlyDoubleQuote] below (see \
subsection 3.2.1) one of $gaPackageOptions options can be changed be \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]. If \
compilation to C is not possible, then this option should to set to CompileTo\
\[Rule]\[CloseCurlyDoubleQuote]WVM\[CloseCurlyDoubleQuote] . After adjusting, \
make these cells unevaluatable again.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CompilePrint", "[", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
     RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}]}], "]"}], "]"}], 
  "//", "FullForm"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   "\"\<\\n\\t\\t1 argument\\n\\t\\t1 Real register\\n\\t\\tUnderflow \
checking off\\n\\t\\tOverflow checking off\\n\\t\\tInteger overflow checking \
on\\n\\t\\tRuntimeAttributes -> {}\\n\\n\\t\\tR0 = A1\\n\\t\\tResult = \
R0\\n\\n1\\tReturn\\n\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Tested versions and known problems"
}], "Subsection"],

Cell["\<\
Tested with versions: 10.2 for windows 10,  10.3 for linux ubuntu 14.04 and \
10.3 for Mac.\
\>", "Text"],

Cell[TextData[{
 " Known problems: \n1) Version 10.0 complains about shadowed symbol z. It is \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " bug, avoid this version. \n2) You have to wait until evaluation of this \
notebook is finished and only then evaluate other cells in your notebook. If \
you press shift + enter on next evaluation cell while package load has not \
been finished for some unknown reasons the evaluation of marked cell can be \
ignored, i.e. simply not sent to kernel (you have to reevaluate it after \
package was loaded). The reason remains unclear (front end and OS related \
bug? some internal evaluation delay time limit exceeded?). "
}], "Text"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Initialization"
}], "Section"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Package Context"
}], "Subsection"],

Cell["\<\
Context manipulation commands were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). \
Context code has several goals, primarily: 1. \[OpenCurlyDoubleQuote]Private \
context sharing across discontinuous sections.\[CloseCurlyDoubleQuote] 2.  \
\[OpenCurlyDoubleQuote]Easy manual reentry of any one section for developing \
work. \[OpenCurlyDoubleQuote]

DeclareIntoContext creates and/or clears symbols in package context.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"GeometricAlgebra`$gaPackageHasBeenLoaded", ",", 
    RowBox[{"CompoundExpression", "[", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<The package has already been loaded.\>\"", "]"}], 
      ",", " ", 
      RowBox[{"FrontEndTokenExecute", "[", "\"\<EvaluatorAbort\>\"", "]"}], 
      ",", 
      RowBox[{"Abort", "[", "]"}]}], "]"}], ",", 
    RowBox[{
    "GeometricAlgebra`$gaPackageHasBeenLoaded", " ", "=", " ", "False"}]}], 
   "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<GeometricAlgebra`\>\"", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$GAUnprotectionList", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageInputAliases", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$GAPackageContext", " ", "=", " ", 
   RowBox[{"Context", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageOnlyContextPath", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"System`$ContextPath", ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"$GAPackagePrivateContext", " ", "=", " ", 
   RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<p`\>\""}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "DeclareIntoContext", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"HoldAll", ",", "Listable"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DeclareIntoContext", "]"}], " ", "=", "  ", 
   RowBox[{"{", 
    RowBox[{"Context", " ", "\[Rule]", " ", "$GAPackageContext"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "normal", " ", "package", " ", 
    RowBox[{"load", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x__", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Quiet", "[", " ", 
      RowBox[{
       RowBox[{"Unprotect", "[", "x", "]"}], ";", " ", 
       RowBox[{"Clear", "[", "x", "]"}], ";"}], " ", "]"}], " ", "/;", " ", 
     RowBox[{"SameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "Global`", " ", "scratchpad", " ", 
    "dev", " ", "work"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "symbolName", " ", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"symbolName", " ", "=", "  ", 
         RowBox[{"SymbolName", "[", 
          RowBox[{"Unevaluated", "[", "x", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Unprotect", "[", "x", "]"}], " ", ";", " ", 
          RowBox[{"Remove", "[", "x", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"BeginPackage", "[", 
         RowBox[{"OptionValue", "[", "Context", "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Symbol", "[", "symbolName", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"EndPackage", "[", "]"}]}]}], "]"}], " ", "/;", " ", 
     RowBox[{"UnsameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"same", " ", "flavor"}], ",", " ", 
    RowBox[{"multiple", " ", "arguments", " ", "pattern"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeclareIntoContext", "[", 
    RowBox[{"x__", ",", " ", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"{", "x", "}"}], "]"}], " ", "/;", " ", 
    RowBox[{"UnsameQ", "[", 
     RowBox[{
      RowBox[{"Context", "[", "]"}], ",", 
      RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";", 
  RowBox[{"End", "[", "]"}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPrivate", "[", "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"$GAPackageOnlyContextPath", ",", 
         RowBox[{"{", "$GAPackagePrivateContext", "}"}]}], "]"}]}], "]"}], 
     ";", " ", 
     RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";", " ", 
     RowBox[{"If", "[", 
      RowBox[{"$gaPackageHasBeenLoaded", ",", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Unprotect", "[", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<*\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], ";"}], " ", ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EndPrivate", "[", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", "$GAPackageOnlyContextPath"}], 
      "]"}], ";", " ", 
     RowBox[{"End", "[", "]"}], ";"}], " ", ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions, installation options"
}], "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", 
   RowBox[{
   "$gaPackageOptions", ",", "TheContextSymbolList", ",", 
    "StringListPrintableString", ",", "MissingForwardDeclarations", ",", 
    "ShowStatus"}], "]"}], ";"}]], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "::", "usage"}], "=", 
   "\"\<ShowStatus[_String] displays curent evaluation status on bottom panel \
of the evaluation notebook window.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$gaPackageOptions", "::", "usage"}], "=", 
   "\"\<Contains global notation, behaviour and performance options. They \
modify implementation of some package functions.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ".Installation options,  restrictions and default settings"
}], "Subsubsection"],

Cell[TextData[{
 "Input of geometric, inner and outer products and realization of proper \
precedences requires modern ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " front end. Version 8 seems to be minimal, where  inpu/output formating can \
work properly. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"ValueQ", "[", 
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "]"}], 
     "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "=", 
      "\"\<Input of geometric, inner and outer products and realization of \
proper products precedences requires modern \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\) front end. Version 8 seems to be minimal, where \
input/output can work properly.  $VersionNumber says your version is `1`. \
Package load is aborted.\>\""}], ";"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "<=", " ", "7"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], ",", 
       RowBox[{"NumberForm", "[", 
        RowBox[{"System`$VersionNumber", ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Quit", "[", "]"}]}]}], "]"}], ";"}]}], "Input"],

Cell[TextData[{
 "Here is the list of options that can be used to modify global package \
function definitions.  Most of them are highly experimental and properly \
untested. Short descriptions and status are given below\n\nSetting",
 StyleBox[" CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " (or any other string) will compile essential functions to Wolfram virtual \
machine code (bytecode). An alternative is  ",
 StyleBox["CompileTo\[Rule] \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]",
  
  FontWeight->"Bold"],
 " (rather well tested, however, takes package takes longer to load, the gain \
is only important for really huge computations)."
}], "Text"],

Cell[TextData[{
 "Option ",
 StyleBox["gaAlwaysTestInputIndexOrdering",
  FontWeight->"Bold"],
 " seeks for unordered index sets of indices (in ",
 StyleBox["mvDownUp[down_List, up_List]",
  FontWeight->"Bold"],
 ". Unordered index sets should never appear in calculations. Appearance of \
unordered index list will definitely mean that that user input or program \
code contains error. This option modifies $Pre and $Post behaviour. Can \
disable testing by setting the option to False.  No problems were \
encountered, thought large output is rendered more slowly. "
}], "Text"],

Cell[TextData[{
 "Option ",
 StyleBox["gaMemorizeBaseElementProduct\[Rule]False",
  FontWeight->"Bold"],
 " don't try to memorize base element product. Memorization currently is \
implemented for geometric product expansion in Association form only and \
yields significant speed gain (about 30%). From the other side when uses it \
takes more memory and makes development much more difficult, therefore we do \
not use it by default. Anyway, totether with ",
 StyleBox["CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]",
  
  FontWeight->"Bold"],
 " it ensures fastest way to expand geometric product in Association \
representation. "
}], "Text"],

Cell[TextData[{
 "Option ",
 "gaOrthonormalBasis",
 StyleBox["SymbolName\[Rule]\[CloseCurlyDoubleQuote]\[DoubleStruckE]\
\[CloseCurlyDoubleQuote] ",
  FontWeight->"Bold"],
 "allows user to use different symbol for orthonormal base elements. Other \
settings were untested, so user can encounter problems (please report)."
}], "Text"],

Cell[TextData[{
 "Option ",
 "gaOrthonormalBasis",
 StyleBox["SymbolInputAlias\[Rule]\[CloseCurlyDoubleQuote]e\
\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " assumes, that input e[1] will be converted into base element.  Other \
settings were untested, so user can encounter problems (please report)."
}], "Text"],

Cell[TextData[{
 "Option ",
 StyleBox["gaGeneralBaseSymbolInputAlias\[Rule]\[CloseCurlyDoubleQuote]\
\[DoubleStruckF]\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ". Not orhonormal bases are not yet implemented, so this option is ignored."
}], "Text"],

Cell[TextData[{
 "Option ",
 StyleBox["gaInternalMultivectorRepresentation\[Rule]\[CloseCurlyDoubleQuote]\
AdditiveRepresentation\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ". Is highly experimental option which by default will try to put MV and all \
computations in Association representation. Almost sure you will have many \
problems if you change it to the alternative ",
 StyleBox["gaInternalMultivectorRepresentation\[Rule]\[CloseCurlyDoubleQuote]\
AssociationRepresentation\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 ". It is much better instead to use localy ",
 StyleBox["gaAssociationRepresentation[expr] ",
  FontWeight->"Bold"],
 "then, after some calculation (expansion, for example) return back with ",
 StyleBox["gaAdditiveRepresentation[result]",
  FontWeight->"Bold"],
 ". Currently not all commands can deal with MV in Association form, however, \
expansion seems work well and much faster (so far for low indices only)."
}], "Text"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
Change  CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]   \
setting in the cell below to  CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote] if needed
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[1, 0, 0]],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaPackageOptions", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CompileTo", "\[Rule]", "\"\<C\>\""}], ",", 
     RowBox[{
     "gaOrthonormalBasisSymbolName", "\[Rule]", "\"\<\[DoubleStruckE]\>\""}], 
     ",", 
     RowBox[{"gaOrthonormalBasisSymbolInputAlias", "\[Rule]", "\"\<e\>\""}], 
     ",", 
     RowBox[{
     "gaGeneralBaseSymbolInputAlias", "\[Rule]", "\"\<\[DoubleStruckF]\>\""}],
      ",", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "\[Rule]", "True"}], ",", 
     RowBox[{
     "gaInternalMultivectorRepresentation", "\[Rule]", 
      "\"\<AdditiveRepresentation\>\""}], ",", 
     RowBox[{"gaMemorizeBaseElementProduct", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"orthonormalBaseSymbolName", "=", 
   RowBox[{"gaOrthonormalBasisSymbolName", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"theInternalMVRepresentation", "=", 
   RowBox[{
   "gaInternalMultivectorRepresentation", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"memorizeProducts", "=", 
    RowBox[{"gaMemorizeBaseElementProduct", "/.", "$gaPackageOptions"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orthonormalBaseSymbolInputAlias", "=", 
   RowBox[{
   "gaOrthonormalBasisSymbolInputAlias", "/.", "$gaPackageOptions"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generalBaseSymbolInputAlias", "=", 
   RowBox[{"gaGeneralBaseSymbolInputAlias", "/.", "$gaPackageOptions"}]}], 
  ";"}]}], "Input"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
No editable data or configuration information below this line for ordinary user
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[1, 0, 0]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notes of general character:"
}], "Subsection"],

Cell[TextData[{
 "1. All command names are in singular form (ie. ",
 StyleBox["GetIndex[ ]",
  FontWeight->"Bold"],
 ", not ",
 StyleBox["GetIndices[ ]",
  FontWeight->"Bold"],
 ", even if  it returns list of indices).  \n2. If some particular function \
needs to be used before its actual definition is given we include its name in \
declarations of Forwards section.\n3. Usage and error messages are defined \
along with the definitions.\n4. Context swich commands are used in Sections\n\
5. When possible for options we use symbols already used by ",
 StyleBox["Mathematica, i.e Quiet, Method,Down,...",
  FontSlant->"Italic"]
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Useful functions for developing and control"
}], "Subsubsection"],

Cell[TextData[{
 "Functions ",
 StyleBox["StringListPrintableString,MissingForwardDeclarations",
  FontWeight->"Bold"],
 "  are taken from DesignerUnits` package (copyright 2009 to present Mark \
Evans, http://designerunits.com/overview). "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"ls", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"#1", ",", "\"\<, \>\"", ",", "#2"}], "]"}], "&"}], ",", 
     RowBox[{"First", "[", "ls", "]"}], ",", 
     RowBox[{"Rest", "[", "ls", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"{", "}"}], "]"}], " ", "=", " ", "\"\<\>\""}], ";"}]}], "Input"],

Cell["Empty list means everything is ok.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"outerCtx_String", ",", "privateCtx_String"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"synm", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}]}], 
      "}"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{
       RowBox[{"synm", " ", "/@", "  ", 
        RowBox[{"Names", "[", 
         RowBox[{"outerCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}], ",", 
       RowBox[{"synm", " ", "/@", " ", 
        RowBox[{"Names", "[", 
         RowBox[{"privateCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", "]"}], " ", ":=", " ", 
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"$GAPackageContext", ",", "$GAPackagePrivateContext"}], "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["ShowStatus[]",
  FontWeight->"Bold"],
 " is borrowed from Paul\[CloseCurlyQuote]s Abbot \
\[OpenCurlyDoubleQuote]Tricks of the Trade\[CloseCurlyDoubleQuote],The MMa \
Journal 7-3,2000 Author:Theodore Gray (theodore@wolfram.com)"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "[", "status_String", "]"}], ":=", 
   RowBox[{"LinkWrite", "[", 
    RowBox[{"$ParentLink", ",", 
     RowBox[{"SetNotebookStatusLine", "[", 
      RowBox[{
       RowBox[{"FrontEnd`EvaluationNotebook", "[", "]"}], ",", "status"}], 
      "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaValidVersionQ[]",
  FontWeight->"Bold"],
 " is used to test if the feauture can be implemented in the detected ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version. If not, the defininion is skipped or package load is aborted."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaValidVersionQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Quiet", "\[Rule]", "True"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaValidVersionQ", "::", "MathematicaVersion"}], "=", 
    "\"\<Mathematica version `1` detected. The implementation of feature `2` \
requires at least version `3`.\>\""}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gaValidVersionQ", "[", 
   RowBox[{
    RowBox[{"requiredVersion_", "?", "NumberQ"}], ",", "feature_String", ",", 
    "opts___"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"requiredVersion", "<=", "System`$VersionNumber"}], ",", "True", 
    ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaValidVersionQ", "]"}]}], ")"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaValidVersionQ", "::", "MathematicaVersion"}], ",", 
         "System`$VersionNumber", ",", "feature", ",", "requiredVersion"}], 
        "]"}]}], "]"}], ";", "False"}]}], "]"}]}]}], "Input"],

Cell["\<\
Implemented general option check message. It can be used in the message\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Message", "[", 
   RowBox[{
    RowBox[{"gaOptionValue", "::", "option"}], ",", "TheCommand", ",", " ", 
    "OptionName", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<OptionValue1\>\"", ",", "\"\<OptionValue2\>\"", ",", ".."}],
      "}"}], ",", "\"\<SwitchToDefaultValue\>\""}], "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOptionValue", "::", "option"}], "=", 
   "\"\<The `1` option `2` can take only values `3`. Continue with \
`4`.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Forwards"
}], "Subsection"],

Cell["\<\
This subsection does not have private context!
If some particular function needs to used before its actual definition is \
given we include its name in declarations of THIS Forwards section.  Ideal \
design should give empty forward declaration list.\
\>", "Text"],

Cell[TextData[{
 "General multivectors will have head ",
 StyleBox["MV",
  FontWeight->"Bold"],
 ".  With numerical indices they will denote multivectors in general (non \
orthonormal) base as well. Definitions for general multivectors are moved to  \
separate notebook GAC_MV.nb. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", "MV", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Objects: orthonormal base notation and definition"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"gaRunningAlgebra", ",", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}], 
     ",", "Cl", ",", "mvDownUp", ",", "gaDefineInput", ",", "gaNotation", ",",
      "gaDefineOrthonormalBasis", ",", "gaOrthonormalBasis", ",", "gaIndexUp",
      ",", "gaIndexDown", ",", "gaNonCommutativeMonomialOrder", ",", 
     "gaCommutativeMonomialOrder", ",", "gaVectorSpaceDimension", ",", 
     "gaGetGrade", ",", "gaGetSignature", ",", "gaGetMV", ",", "gaGetIndex", 
     ",", "gaIndexSort", ",", "gaTestIndexOrdering", ",", "gaOrderedQ", ",", 
     "gaGradesOnly", ",", "gaNegativeSignatureIndexList", ",", 
     "gaMakeAlias"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningAlgebra", "::", "usage"}], "=", 
   "\"\<gaRunningAlgebra returns an algebra Cl[p,q,r] for which input aliases \
take place at given moment. The p,q,r denotes the number of positive (p), \
negative (q) and zero (r) norm base vectors, respectively. For example, \
Cl[3,0,0] is geometric algebra for Euclidian space.\>\""}], " ", 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}], 
     "]"}], "::", "usage"}], "=", 
   "\"\<Notation of predefined global orthonormal base multivector. \
Orthogonal base symbol name can be changed modifying global option \
gaOrthonormalBasisSymbolName.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "::", "usage"}], "=", 
   "\"\<Cl[p_Integer?NonNegative,q_Integer?NonNegative,r_Integer?NonNegative] \
denotes Clifford algebra with signature of corresponding positive (p), \
negative (q) and zero (r) squared vectors.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUp", "::", "usage"}], "=", 
   "\"\<mvDownUp[{s_Integer?Positive | s_gaTensorProduct | s_Symbol  | \
s_iterator},{same for upper symbols}] is a container for down (the first \
list) and up (the second list) indices.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "usage"}], "=", 
   "\"\<gaDefineInput[Cl[p_Integer,q_Integer,r_Integer:0],opts___] sets input \
aliases for given algebra. You need to define it before manually entering \
orthonormal base elements, for example e[1], e[{},{1,2}], etc...\n\
gaDefineInput->True also is default option for gaDefineOrthonormalBasis[ ].\>\
\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNotation", "::", "usage"}], "=", 
   "\"\<Style options container. Values are set by \
gaDefineOrthonormalBasis[], which, in turn, uses private \
GeometricAlgebra`p`gaDefineNotation[]\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBasis", "::", "usage"}], "=", 
   "\"\<gaDefineOrthonormalBasis[Cl[p_Integer,q_Integer,r_Integer:0], \
opts___] defines orthonormal (plain space) base of geometric algebra of \
signature {p,q,r}, where p,q,r is denotes number of base vectors with \
positive square, negative and zero squares, respectivelly. Only direct (down \
indices) base is defined. Reciprocal base can be obtained with \
gaReciprocalBase[base]. Base vectors are ordered with respect to \
gaNonCommutativeMonomialOrder option value. Base vector color is selected \
automatically, unless you predefine it manually with option FontColor->color. \
The gaDefineOrthonormalBasis[] command also set values for \
gaVectorSpaceDimension[algebra], gaOrthonormalBasis[algebra], \
mvGrade[baseElements]. gaDefineOrthonormalBasis[gaTensorProduct[algebras__]] \
defines orthonormal base for tensor product of algebras. Option \
gaGradesOnly->{{},{},...} can be used to construct only specific grade base \
elements {{0},{1},{2},... (used to speedup calculation of tensor product \
base). Default options: gaNonCommutativeMonomialOrder\[Rule]\\\"InvDeg[Lex]\\\
\", Quiet\[Rule]Automatic, gaGradesOnly\[Rule]All, \
Format\[Rule]\\\"AdditiveRepresentation\\\". gaDefineInput->True is default \
option, which force input alias definition after basis is defined.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorSpaceDimension", "::", "usage"}], "=", 
   "\"\<gaVectorSpaceDimension[algebra] returns number of vector space \
dimension of the algebra. The value is defined by gaDefineOrthonormalBasis[].\
\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNegativeSignatureIndexList", "::", "usage"}], "=", 
   "\"\<gaNegativeSignatureIndexList[algebra] returns list of negative \
signature indices. The value is defined by gaDefineOrthonormalBasis[]\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "::", "usage"}], "=", 
   "\"\<Container \
gaOrthonormalBasis[algebra_,ordering,\\\"AdditiveRepresentation\\\"|\\\"\
AssociativeRepresentation\\\"] stores computed base vectors with down \
indices. The base is computed by gaDefineOrthonormalBasis[].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusSubspaceBase", "::", "usage"}], "=", 
   "\"\<Container which contains homogeneus subspace base. It is only \
calculated after calling \
gaOrthonormalBasis[alg,All,GroupBy->\\\"Grade\\\"].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexUp", "::", "usage"}], "=", 
   "\"\<gaIndexUp[exprWithDownBaseElements] rewrites expr with down base \
elements replaced by up indices (signature is taken into account). For \
reciprocal base see gaReciprocalBase[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexDown", "::", "usage"}], "=", 
   "\"\<gaIndexDown[exprWithUpBaseElements] rewrites expr with up base \
elements replaced by down base elements (signature is taken into \
account).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaDefineOrthonormalBasis[] and ..., which allows to set \
base element monomial order. Possible orderings are \\\"Lex\\\", \\\"InvLex\\\
\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure orderings can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 \
possible orderings. Orders \\\"RevLex\\\", \\\"InvRevLex\\\" and the default \
order \\\"InvDeg[Lex]\\\" are not addmissible as Grobner base monomial order.\
\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMakeAlias", "::", "usage"}], "=", "\"\<Option\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaNonCommutativeMonomialOrder, which defines commutative \
coefficient (field) order for same noncommutative base elements. Uses \
MonomialOrders implemented by Mathematica, i.e. \\\"Lexicographic\\\", \
\\\"DegreeLexicographic\\\", \\\"DegreeReverseLexicographic\\\", \
\\\"NegativeLexicographic\\\", \\\"NegativeDegreeLexicographic\\\", \
\\\"NegativeDegreeReverseLexicographic\\\" and \n\\\"Reverse[Lexicographic]\\\
\", \\\"Reverse[DegreeLexicographic]\\\", \
\\\"Reverse[DegreeReverseLexicographic]\\\", \
\\\"Reverse[NegativeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeReverseLexicographic]\\\".\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetIndex", "::", "usage"}], "=", 
   "\"\<gaGetIndex[multivector] returns list of indices of \
multivector.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "::", "usage"}], "=", 
   "\"\<gaGetGrade[expr] returns grade of multivector.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetSignature", "::", "usage"}], "=", 
   "\"\<gaGetSignature[expr] returns signature of multivector.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "::", "usage"}], "=", 
   "\"\<gaGetMV[expr, {n__Integer?Positive}] returns multivector of grades \
{n}. gaGetMV[expr,_mvDownUp] returns (to do) multivectors with given pattern \
of indices,... other criteria can be implemented as well.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "usage"}], "=", 
   "\"\<gaOrderedQ[ordering_String][#1,#2] gives True if pair of base \
elements is ordered according to one of defined orderings \n \\\"Lex\\\", \
\\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\", which can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "::", "usage"}], "=", 
   "\"\<gaIndexSort[ind:{{__Integer?Positive}..}, order_String] sorts ind \
with respect to gaNonCommutativeMonomialOrder. Sorts monomials acording to \
given order.... other possibilities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "usage"}], "=", 
   "\"\<gaTestIndexOrdering[expr] tests if indices inside \
mvDownUp[{__Integer},{__interger}] are sorted. This test is set to $Pre by \
default and can be removed by setting package global option \
gaAlwaysTestInputIndexOrdering\[Rule]False.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notation and help functions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["\<\
Insert some output after evaluated cell (taken form \
http://mathematica.stackexchange.com/questions/15134/a-debug-utility-to-print-\
or-extract-intermediate-data-from-a-program)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"insertBelowEvaluationCell", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SelectionMove", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "After", ",", 
       "EvaluationCell"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"BoxData", "@", 
          RowBox[{"ToBoxes", "[", "expr", "]"}]}], ",", "\"\<Print\>\""}], 
        "]"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["One message per session", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alreadyPrintedList", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Alias modification in order to match ",
 StyleBox["gaRunningAlgebra ",
  FontWeight->"Bold"],
 "color. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"updateInputAlias", ",", "HoldRest"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"updateInputAlias", "[", 
    RowBox[{"aliasName_String", ",", "aliasReplacementRul__Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"alposition", ",", 
       RowBox[{"inpOpt", "=", 
        RowBox[{"Options", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", "InputAliases"}], 
         "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"inpOpt", ",", "aliasName"}], "]"}]}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
         RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{"inpOpt", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"alposition", "=", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"inpOpt", ",", 
                 RowBox[{"aliasName", "->", "_"}]}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Extract", "[", 
               RowBox[{"inpOpt", ",", "alposition"}], "]"}], "/.", 
              RowBox[{"{", "aliasReplacementRul", "}"}]}], ")"}]}]}], "]"}]}],
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Automated color picking is full of heuristic. For first 3 colors maximize \
ColorDistance function explicitly. After that pick colors randomly decreasing \
allowed distance (accept treshold) between colors with increasing number of \
colors. If  there is a need, say blue family, call  ",
 StyleBox["pickNextRandomColor[RGBColor[_,_,1],1/3] ",
  FontWeight->"Bold"],
 " with reduced threshold (i.e . for example 1/3 instead of 1). Threshold \
function ",
 StyleBox["accept=1/(quality*Log[2,N[oldlength+1]])",
  FontWeight->"Bold"],
 " gives up to 23 colors. Then color generation stops, because threshold \
decreases too slowly and is unable to guarantee required minimal distance \
between colors. After that we simply pick colors randomly. [Mathematical \
task: find a decrease function, which will allow optimally (with equal and \
chosen in advance constant probablility) generation of any number of colors). \
Solution. For one dimensional case we can immediatelly write formula: p[n]= \
1-2(n-1)len[n]. So if distance between colors will decrease as \
len[n]=(1-p[n])/(2(n-1)), then probability for picking next color will remain \
constant: p[n]=const., For 3D case an analog would be \
accept=Power[quality/((4Pi/3)(oldlength+1)),1/3.] law. Unfortunatelly, this \
does not work well enought.] "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pickNextColor", "::", "maxColorLimit"}], "=", 
   "\"\<Smart color picking limit `1` was reached. Start picking colors \
randomly.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "pickNextColor", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alreadyUsedColors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "1.", ",", "1."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "0."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"predefinedColorList", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1.", ",", "0.", ",", "0."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "1.", ",", "0."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "0.", ",", "1."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "1.", ",", "1."}], "]"}]}], "}"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pickNextRandomColor", "[", 
     RowBox[{"channel_RGBColor", ",", 
      RowBox[{"quality_", "?", "NumberQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"newColor", ",", 
        RowBox[{"oldlength", "=", 
         RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"accept", "=", 
        RowBox[{"quality", "/", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", 
           RowBox[{"N", "[", 
            RowBox[{"oldlength", "+", "1"}], "]"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}], "===", 
          "oldlength"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Min", "[", 
             RowBox[{"ColorDistance", "[", 
              RowBox[{"alreadyUsedColors", ",", 
               RowBox[{"newColor", "=", 
                RowBox[{"RandomColor", "[", "channel", "]"}]}], ",", 
               RowBox[{"DistanceFunction", "\[Rule]", "\"\<CIE94\>\""}]}], 
              "]"}], "]"}], ">", "accept"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", "newColor"}], "]"}]}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "newColor"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"smartColors", "=", "21"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "\[GreaterEqual]", "10.2"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", 
      RowBox[{"opts___", "?", "OptionQ"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"len", "=", 
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}], ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"pickNextColor", ",", "Quiet"}], "]"}]}], ")"}]}], ",", 
         "newColor"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"predefinedColorList", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"predefinedColorList", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{"predefinedColorList", ",", "alreadyUsedColors"}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "predefinedColorList", "]"}], ">", "0"}], 
          ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", 
             RowBox[{"newColor", "=", 
              RowBox[{"predefinedColorList", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";", "newColor"}], 
          ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"len", "<", "smartColors"}], ",", 
            RowBox[{"pickNextRandomColor", "[", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"_", ",", "_", ",", "_"}], "]"}], ",", "1."}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Not", "[", "quiet", "]"}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"pickNextColor", "::", "maxColorLimit"}], ",", 
                 "smartColors"}], "]"}]}], "]"}], ";", 
             RowBox[{"RandomColor", "[", "]"}]}]}], "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", "___", "]"}], ":=", 
     RowBox[{"RGBColor", "[", 
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input"],

Cell["\<\
Often we need to decide from given expression which algebra we are dealing \
with. The function and options are for internal usage only\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"whichAlgebra", "::", "multipleAlgebras"}], "=", 
   "\"\<`1` Expression `2` contains MV of different algebras.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "whichAlgebra", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"Abort", "\[Rule]", "True"}], ",", 
     RowBox[{"Message", "\[Rule]", "\"\<\>\""}]}], "}"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"whichAlgebra", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theAlgebra", "=", 
        RowBox[{"Union", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"expr", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], ",", 
       
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"whichAlgebra", ",", "Quiet"}], "]"}]}]}], ",", 
       RowBox[{"theAction", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Abort", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"whichAlgebra", ",", "Abort"}], "]"}]}]}], ",", 
       RowBox[{"inWhichCommand", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Message", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"whichAlgebra", ",", "Message"}], "]"}]}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "theAlgebra", "]"}], "===", "1"}], ",", 
       RowBox[{"theAlgebra", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"theAlgebra", "=!=", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", "quiet", "]"}], ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"whichAlgebra", "::", "multipleAlgebras"}], ",", 
              "inWhichCommand", ",", "expr"}], "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"theAction", ",", 
          RowBox[{"Abort", "[", "]"}], ",", "theAlgebra"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions is less than 10.2 picking of color is random."
}], "Text"],

Cell["\<\
If  global option gaTestIndexOrdering was set to True, then try to detect not \
strictly ordered index sets. Repeated indices inside mvDownUp[ ] are also \
forbiden. The resulting slowdown of this testing was not measured, however \
for modest output/input size should be acceptable. Input of indices with \
larger values that number of base vectors are allowed, thought they are \
meaningless in computations. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], "=", 
   "\"\<Error. Not properly ordered index set `1` in expression input/output \
was detected. Only ordered sets can appear in calculations.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], "=", 
   "\"\<Error. Index set `1` contains repeated indices. All indices in base \
element should be different.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{"gaTestIndexOrdering", ",", " ", "HoldAll"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "[", "expr_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"indexPairs", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Unevaluated", "[", "expr", "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "___Integer", "}"}], ",", 
           RowBox[{"{", "___Integer", "}"}]}], "]"}], ",", "Infinity"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
             RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"indexCases", "=", 
           RowBox[{"indexPairs", "/.", 
            RowBox[{"mvDownUp", "\[Rule]", "Sequence"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}], " ", "]"}], 
           ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], ",", 
              RowBox[{"Pick", "[", 
               RowBox[{"indexCases", ",", 
                RowBox[{"Not", "/@", 
                 RowBox[{"(", 
                  RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}]}], 
               "]"}]}], "]"}], ";"}], ",", "expr"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], ",", 
          RowBox[{"Pick", "[", 
           RowBox[{"indexPairs", ",", 
            RowBox[{"Not", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
                  RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
               RowBox[{"(", 
                RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}]}], 
           "]"}]}], "]"}], ";"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "/.", "$gaPackageOptions"}], 
     ")"}], ",", 
    RowBox[{
     RowBox[{"$Pre", "=", "gaTestIndexOrdering"}], ";", 
     RowBox[{"$Post", "=", "gaTestIndexOrdering"}]}]}], "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Algebra and Index notations"
}], "Subsubsection"],

Cell["\<\
Algebras always use three signatures, positive (p), negative (q) and zero \
(r). \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_"}], "]"}], "=", 
   RowBox[{"Cl", "[", 
    RowBox[{"p", ",", "q", ",", "0"}], "]"}]}], ";"}]], "Input",
 CellID->1126827235],

Cell["Nice output for Clifford algebra identificator", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alsty", "=", 
        RowBox[{"gaNotation", "[", 
         RowBox[{"Cl", "[", 
          RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"r", "===", "0"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", "\"\<0\>\""}], "}"}], ",", 
          "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{
               RowBox[{"StyleBox", "[", 
                RowBox[{"\"\<Cl\>\"", ",", "alsty"}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"#1", ",", "\"\<,\>\"", ",", "#2"}], "}"}], "]"}]}], 
              "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"r", ",", "sf"}], "]"}]}], "}"}], ",", "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<Cl\>\"", ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                  "#3"}], "}"}], "]"}]}], "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaNotation", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "=!=", 
     "gaNotation"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Nice representation of indices. System` context have protected ",
 StyleBox["Up",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Down",
  FontWeight->"Bold"],
 " symbols, therefore we introduce our own ",
 StyleBox[" mvDownUp[{down},{up}]",
  FontWeight->"Bold"],
 " instead of separate down and up indices. Single head will simplify pattern \
matcher. By default for base multivectors we use down indices, i.e. ",
 StyleBox["mvDownUp[{down},{}] ",
  FontWeight->"Bold"],
 " and dual base  is represented by upper indices  i.e. ",
 StyleBox["mvDownUp[{},{up}]",
  FontWeight->"Bold"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
In oder to allow editing we explicitly enumerated slots. Unfortunatelly, this \
imply, that at the moment it is impossible to change number of indices, so \
editing make sense only if number of up and down indices remain the same\
\>", "Text"],

Cell[TextData[{
 StyleBox["mvDownUp[indown_List,inup_List]",
  FontWeight->"Bold"],
 " keeps down indices in the first list and up indices in the second. Both \
index list should be strictly ordered (no two same indices anywhere) for \
numeric indices. Note, however, that in calculations, when both type of \
indices are present we authomatically sort indices of both types into common \
ordered index list. For convenience of  input, however  separate ordered up \
and down index lists are used (otherwise we should indicate type of index for \
each index, which would result into long input sequence)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown___Integer", "}"}], ",", 
       RowBox[{"{", "inup___Integer", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"argsa", "=", 
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Rest", "/@", 
           RowBox[{"Sort", "[", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"indown", ",", "inup"}], "}"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", 
                    RowBox[{"-", "1"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"indown", ",", "inup"}], "}"}], "]"}]}], "}"}]}], 
                  "]"}]}], "]"}]}], "}"}], "]"}], "]"}]}], "]"}], ",", 
         "\"\<,\>\""}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", "argsa", "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", 
                    RowBox[{"indown", ",", "inup"}], "}"}], "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}],
            "&"}]}]}], "}"}], ",", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "indown", "}"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "inup", "}"}]}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "indown", "}"}], ",", 
             RowBox[{"{", "inup", "}"}]}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell["When expressions are truncated we just form nice boxes", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown_Skeleton", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"SubscriptBox", "[", 
    RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"indown", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "inup_Skeleton", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"SuperscriptBox", "[", 
    RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"inup", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown_Skeleton", "}"}], ",", 
       RowBox[{"{", "inup_Skeleton", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"SubscriptBox", "[", 
       RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"indown", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}], ",", 
      RowBox[{"SuperscriptBox", "[", 
       RowBox[{"\"\<\[NegativeThickSpace]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"inup", ",", "sf"}], "]"}], "}"}], "]"}]}], "]"}]}], "}"}],
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notation for orthogonal base symbol (default setting is \[DoubleStruckE] )"
}], "Subsubsection"],

Cell[TextData[{
 "Orthogonal  base multivectors  are represented by letter  \[DoubleStruckE] \
with subscripts or superscripts (or mixed). It is assumed that up and down \
indices commute (can be permuted). This is true at least in orthonormal \
frame.  Notation will not work if algebra was not defined with ",
 "gaDefineOrthonormalBasis",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " or ",
 StyleBox["gaDefineInput[]",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"baseSymbol", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                  "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], 
           "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input"],

Cell["Special bold notation for quaternion", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"baseSymbol", "[", 
        RowBox[{"in_mvDownUp", ",", "ra_", ",", "mark_String", ",", "___"}], 
        "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sty", "=", 
          RowBox[{"(", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"inEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"raEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"StyleBox", "[", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                  "#1"}], "}"}], "]"}], ",", 
               RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
               RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
             "]"}]}], ",", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
               "}"}], "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
           "baseSymbolN", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Same notations, when multivector is presented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s  (much more optimized)  Association form"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
         RowBox[{"baseSymbol", "=", 
          RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_Association", ",", "ra_"}], "]"}], ",", 
          RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"sty", "=", 
              RowBox[{"(", 
               RowBox[{"FontColor", "->", 
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
             ",", 
             RowBox[{"inEx", "=", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
             RowBox[{"raEx", "=", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"pfd", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{"StyleBox", "[", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", 
                    "\"\<[\>\"", ",", "#1", ",", "\"\<]\>\""}], "}"}], "]"}], 
                   ",", 
                   RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                   RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], 
                  "]"}], "]"}]}], ",", 
               RowBox[{"pfi", "=", 
                RowBox[{"Function", "[", 
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", 
                    "\"\<,\>\"", ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], 
                 "]"}]}]}], "}"}], ",", 
             RowBox[{"TemplateBox", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
               RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
               RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
               RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
               RowBox[{"Tooltip", "\[Rule]", 
                RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
          "]"}], "/;", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
          "gaNotation"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", "\n", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
         RowBox[{"baseSymbol", "=", 
          RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_Association", ",", "ra_", ",", "mark_String"}], "]"}], 
          ",", 
          RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sty", "=", 
             RowBox[{"(", 
              RowBox[{"FontColor", "\[Rule]", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"inEx", "=", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
            RowBox[{"raEx", "=", 
             RowBox[{"MakeBoxes", "[", 
              RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"pfd", "=", 
               RowBox[{"Function", "[", 
                RowBox[{"StyleBox", "[", 
                 RowBox[{
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                    "\"\<[\>\"", ",", "#1", ",", "\"\<]\>\""}], "}"}], "]"}], 
                  ",", 
                  RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                  RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], 
                 "]"}], "]"}]}], ",", 
              RowBox[{"pfi", "=", 
               RowBox[{"Function", "[", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", 
                   "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", 
                   "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], "}"}], ",", 
            RowBox[{"TemplateBox", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
              "baseSymbolN", ",", 
              RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
              RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
              RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
              RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
         "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "For speed reasons we do not want rules for base vectors of the form  \
e[_[],_]:=xxx; Unfortunatelly it is very usefull to make exception for unit \
element. Setting it to 1 will solve many ordering problems, hovewer will \
result in complications when generating tensor products. Therefore in these \
functions we need to ",
 StyleBox["Block[ ] ",
  FontWeight->"Bold"],
 "baseSymbol. For quaternions we always want this replacement to happen"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_", ",", "\"\<Quaternion\>\"", 
         ",", "___"}], "]"}], "]"}], "=", "1"}], ";", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "=", "1"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Setting input ($PreRead!!!) notation for algebra and its elements"
}], "Subsubsection"],

Cell["This subsection is still very far from ideal shape.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaNotation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"FontColor", "->", "Automatic"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNotation", "::", "newcolor"}], "=", 
    "\"\<Generating new color for `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", "gaNotation"}],
        ")"}], "||", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], ",", 
        RowBox[{"{", "__Rule", "}"}]}], "]"}]}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gaNotation", "[", "al", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"FontColor", "->", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "value", "}"}], ",", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"value", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}]}], 
                 ")"}], "/.", 
                RowBox[{"Options", "[", "gaNotation", "]"}]}], ")"}]}], ",", 
             "_RGBColor", ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"alreadyUsedColors", ",", 
                RowBox[{"ColorConvert", "[", 
                 RowBox[{"value", ",", "\"\<RGB\>\""}], "]"}]}], "]"}], ";", 
              "value"}], ",", "Automatic", ",", 
             RowBox[{"pickNextColor", "[", "opts", "]"}], ",", 
             "\[IndentingNewLine]", "_", ",", 
             RowBox[{"ColorConvert", "[", 
              RowBox[{"Black", ",", "\"\<RGB\>\""}], "]"}]}], "]"}]}], 
          "]"}]}], "}"}]}], ")"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " modifies ",
 StyleBox["$PreRead",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[TextData[{
 "Rule e[_]:>e[__] in $PreRead ensures that never encountered (because of \
mandatory e[index,algebra] syntax)  pattern with single blank is \
automatically replaced by blank sequence.  $PreRead is made dynamic with := \
in order to prevent input aliases when gaRunningAlgebra is set to be \
gaTensorProduct of algebras. This function also includes definitions for ",
 StyleBox["MV[ ]",
  FontWeight->"Bold"],
 ", which is defined in GAC_Multivector.nb. ",
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " is far from finished. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], "=", 
   "\"\<gaRunningAlgebra was set to tensor product `1`. Input alias of base \
element was disabled, it only works with Cl[p,q] algebras.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"preReadMessage", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineInput", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"defCol", ",", "downIndex"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaRunningAlgebra", "=", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "nested", " ", "inputs", " ", "ReplaceAll", " ", "in", " ",
         "future", " ", "can", " ", "be", " ", "replaced", " ", "by", " ", 
        "more", " ", "dangerous", " ", "ReplaceRepeated"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"baseSymbol", "=", "orthonormalBaseSymbolName"}], "}"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$PreRead", ":=", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], 
             ",", 
             RowBox[{
              RowBox[{"preReadMessage", "=", "False"}], ";", 
              RowBox[{"ReplaceAll", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"(*", 
                 RowBox[{
                 "orthogonal", " ", "base", " ", "symbol", " ", 
                  "replacements"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ":>", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<_\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<__\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", 
                    ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<Association\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\""}]}], 
                    "]"}]}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]",
                  "}"}]}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", "preReadMessage"}], ",", 
                RowBox[{
                 RowBox[{"preReadMessage", "=", "True"}], ";", 
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], 
                   ",", "gaRunningAlgebra"}], "]"}]}]}], "]"}], ";", "#"}]}], 
            "]"}], "&"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "clear", " ", "and", " ", "set", " ", "autoreplacements", " ", 
           "for", " ", "orthogonal", " ", "base", " ", "vector", " ", 
           "symbol"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", " ", "\[Rule]", " ", 
            RowBox[{"Fold", "[", 
             RowBox[{"DeleteCases", ",", 
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{"Blank", "[", "]"}], ",", 
                RowBox[{"Blank", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", "->", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
               "orthonormalBaseSymbolInputAlias", "\[Rule]", "baseSymbol"}], 
               "}"}]}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"Options", "[", "gaDefineInput", "]"}]}], ")"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"BoxData", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Running algebra is: gaRunningAlgebra= \>\"", ",", 
                RowBox[{"TagBox", "[", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{
                    RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "gaRunningAlgebra", "]"}], 
                    "]"}]}], "]"}], ",", "DisplayForm"}], "]"}]}], "}"}], 
              "]"}], "]"}], ",", "\"\<Print\>\"", ",", 
            RowBox[{"CellAutoOverwrite", "\[Rule]", "True"}], ",", 
            RowBox[{"GeneratedCell", "\[Rule]", "True"}]}], "]"}], "}"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell["\<\
New alternative to replace expression during evaluation of cell. Interesting \
for investigation. Not yet properly working. Test in new notebook, because \
autoreplacements are difficult to remove. Save the original file before \
experimenting!!!\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"preReadMessage", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineInput", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"defCol", ",", "downIndex"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaRunningAlgebra", "=", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ";", " ", "\n", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"baseSymbol", "=", "orthonormalBaseSymbolName"}], "}"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "gaRunningAlgebra", "]"}], "===", "Cl"}], 
           ",", 
           RowBox[{
            RowBox[{"preReadMessage", "=", "False"}], ";", "\n", 
            RowBox[{"SetOptions", "[", 
             RowBox[{
              RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
              RowBox[{"CellEpilog", "\[RuleDelayed]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"!", 
                  RowBox[{"TrueQ", "[", 
                   RowBox[{
                    RowBox[{"Max", "@", 
                    RowBox[{"CurrentValue", "[", "CellChangeTimes", "]"}]}], 
                    "\[LessEqual]", 
                    RowBox[{"CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TaggingRules", ",", "\"\<autoreplaceTime\>\""}], 
                    "}"}]}], "]"}]}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"CurrentValue", "[", 
                    RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TaggingRules", ",", "\"\<autoreplaceTime\>\""}], 
                    "}"}]}], "]"}], "=", 
                   RowBox[{"Max", "@", 
                    RowBox[{"CurrentValue", "[", "CellChangeTimes", "]"}]}]}],
                   ";", "\[IndentingNewLine]", 
                  RowBox[{"NotebookWrite", "[", 
                   RowBox[{
                    RowBox[{"EvaluationCell", "[", "]"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"NotebookRead", "[", 
                    RowBox[{"EvaluationCell", "[", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], "}"}],
                     "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<_\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<__\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "baseSymbol", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{"\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                    "}"}], "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Association\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<_\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                    "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"ind", ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Association\>\"", "|", 
                    "\"\<Blank\>\"", "|", "\"\<_\>\""}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ":>", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", 
                    ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                    RowBox[{
                    "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<Association\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\""}]}], 
                    "]"}]}]}]}], "\[IndentingNewLine]", "}"}], ",", "All"}], 
                    "]"}]}], "]"}]}]}], "]"}]}]}], "]"}]}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", "preReadMessage"}], ",", 
             RowBox[{
              RowBox[{"preReadMessage", "=", "True"}], ";", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDefineInput", "::", "gaTensorProductAlgebra"}], 
                ",", "gaRunningAlgebra"}], "]"}]}]}], "]"}]}], "]"}], ";", 
         "\n", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "clear", " ", "and", " ", "set", " ", "autoreplacements", " ", 
           "for", " ", "orthogonal", " ", "base", " ", "vector", " ", 
           "symbol"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", " ", "\[Rule]", " ", 
            RowBox[{"Fold", "[", 
             RowBox[{"DeleteCases", ",", 
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{"Blank", "[", "]"}], ",", 
                RowBox[{"Blank", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", "->", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
               "orthonormalBaseSymbolInputAlias", "\[Rule]", "baseSymbol"}], 
               "}"}]}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"Options", "[", "gaDefineInput", "]"}]}], ")"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"BoxData", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Running algebra is: gaRunningAlgebra= \>\"", ",", 
                RowBox[{"TagBox", "[", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{
                    RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "gaRunningAlgebra", "]"}], 
                    "]"}]}], "]"}], ",", "DisplayForm"}], "]"}]}], "}"}], 
              "]"}], "]"}], ",", "\"\<Print\>\"", ",", 
            RowBox[{"CellAutoOverwrite", "\[Rule]", "True"}], ",", 
            RowBox[{"GeneratedCell", "\[Rule]", "True"}]}], "]"}], "}"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 Editable->False,
 Evaluatable->False]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Orthogonal base definition"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index ordering and sorting"
}], "Subsubsection"],

Cell["\<\
Help functions, which convert index set to binary like representations by \
inserting zeroes in proper places. Uncompiled versions are inactive\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvIndexToBinaryLikeRepresentation", "[", 
    RowBox[{"a_List", ",", 
     RowBox[{"al_:", "gaRunningAlgebra"}]}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Rule", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", 
    RowBox[{
     RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
        ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", 
    RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
       ",", 
       RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
       RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  Lex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "lex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero entry is \
positive.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
Compiled versions. Note that options CompilationOptions\[Rule]{\
\[OpenCurlyDoubleQuote]ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]\
False,\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\
\[Rule]True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\
\[CloseCurlyDoubleQuote]\[Rule]True}, spoils correct inlining of compiled \
code (slow CopyTensor[ ] appears inside \[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote] compiled code). Here inlining is achieved using \
With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  InvLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Invlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero entry \
is positive.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
Compiled versions. Note that options CompilationOptions\[Rule]{\
\[OpenCurlyDoubleQuote]ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]\
False,\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\
\[Rule]True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\
\[CloseCurlyDoubleQuote]\[Rule]True}, spoils correct inlining of compiled \
code (slow CopyTensor[ ] appears inside \[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote] compiled code). Here inlining is achieved using \
With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}],
               "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
             "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  RevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Revlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero entry \
is negative.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeRevLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}],
               "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeRevLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
             "]"}]}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " InvRevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "InvRevlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero entry is \
negative.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
Compiled versions. Note that options CompilationOptions\[Rule]{\
\[OpenCurlyDoubleQuote]ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]\
False,\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\
\[Rule]True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\
\[CloseCurlyDoubleQuote]\[Rule]True}, spoils correct inlining of compiled \
code (slow CopyTensor[ ] appears inside \[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote] compiled code). Here inlining is achieved using \
With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvRevLexC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvIndexToBinaryLikeRepresentationC", "=", 
          "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"max", "=", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"Max", "[", "a1", "]"}], ",", 
                 RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
              "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ap1", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
             RowBox[{"ap2", "=", 
              RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
               RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"diff", "=", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", 
               "True"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvRevLexC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "mvIndexToBinaryLikeRepresentationC", "=", 
         "mvIndexToBinaryLikeRepresentationC"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"max", "=", 
              RowBox[{"Max", "[", 
               RowBox[{
                RowBox[{"Max", "[", "a1", "]"}], ",", 
                RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
             "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ap1", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
            RowBox[{"ap2", "=", 
             RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
              RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"diff", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
               ">", "0"}], ",", 
              RowBox[{
               RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}],
              "]"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell["Degree modificated orders. Uncompiled version is inactive.", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Length", "[", "a1", "]"}], "-", 
       RowBox[{"Length", "[", "a2", "]"}]}], ")"}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
Compiled versions.  Here inlining using With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  do not work, therefore we inline in the recommended way with  \
CompilationOptions\[Rule]{\[OpenCurlyDoubleQuote]ExpressionOptimization\
\[CloseCurlyDoubleQuote]\[Rule]False,\[CloseCurlyDoubleQuote]\
InlineCompiledFunctions\[CloseCurlyDoubleQuote]\[Rule]True,\
\[CloseCurlyDoubleQuote]InlineExternalDefinitions\[CloseCurlyDoubleQuote]\
\[Rule]True}.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell["\<\
Inverse Degree modificated orders. Uncompiled version is inactive.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeInvDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "a2", "]"}], "-", 
      RowBox[{"Length", "[", "a1", "]"}]}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena2"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"CompilationOptions", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
             ",", 
             RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
             ",", 
             RowBox[{
             "\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
            "}"}]}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeLexC", "=", "mvNonCommutativeLexC"}], "}"}],
         ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeInvLexC", "=", "mvNonCommutativeInvLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mvNonCommutativeRevLexC", "=", "mvNonCommutativeRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mvNonCommutativeInvRevLexC", "=", "mvNonCommutativeInvRevLexC"}], 
         "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"lena1", "=", 
               RowBox[{"Length", "[", "a1", "]"}]}], ",", 
              RowBox[{"lena2", "=", 
               RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
                RowBox[{"mvNonCommutativeInvRevLexC", "[", 
                 RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mvNonCommutativeInvRevLexC", "[", 
              RowBox[{"_", ",", "_"}], "]"}], ",", 
             RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Commutative coefficients are ordered using ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s MonomialList orders, which are \[OpenCurlyDoubleQuote]Lexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeReverseLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeDegreeLexicographic\
\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NegativeDegreeReverseLexicographic\
\[CloseCurlyDoubleQuote]. These orders are expanded to include  \
\[OpenCurlyDoubleQuote]Reverse[Lexicographic]\[CloseCurlyDoubleQuote],... \
etc., which reverses monomial list order."
}], "Text"],

Cell["\<\
Below we define functions, which use above orderings to orthonormal base \
elements and index sets. \
\>", "Text"],

Cell["\<\
Ordering is defined only for same set (empty or not) of up indices. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQNoncommutative", "[", 
    RowBox[{"ord_String", ",", "ind1_", ",", "ind2_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"mvNonCommutativeLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvLex\>\"", ",", 
     RowBox[{"mvNonCommutativeInvLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<RevLex\>\"", ",", 
     RowBox[{"mvNonCommutativeRevLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvRevLex\>\"", ",", 
     RowBox[{"mvNonCommutativeInvRevLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[InvLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[RevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[InvRevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[Lex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[RevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvRevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", "_", 
     ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBasis", "::", "UndefinedOrdering"}], ",", 
        "ord"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQCommutative", "[", 
    RowBox[{"comOrd_String", ",", "anyCoef1_", ",", "anyCoef2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vars", "=", 
        RowBox[{"Variables", "[", 
         RowBox[{"anyCoef1", "+", "anyCoef2"}], "]"}]}], ",", "comOrdMod"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"vars", "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"OrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{"comOrd", ",", "\[IndentingNewLine]", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Lexicographic\>\"", ",", "\"\<DegreeLexicographic\>\"", ",", 
            "\"\<DegreeReverseLexicographic\>\"", ",", 
            "\"\<NegativeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeReverseLexicographic\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MonomialList", "[", 
           RowBox[{
            RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
            "comOrd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Reverse[Lexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeReverseLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeReverseLexicographic]\>\""}], "}"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"comOrdMod", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"comOrd", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<Reverse[\>\"", "\[Rule]", "\"\<\>\""}], ",", 
               RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"MonomialList", "[", 
             RowBox[{
              RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
              "comOrdMod"}], "]"}], "]"}], "===", 
           RowBox[{"{", 
            RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", 
            "comOrd"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaOrderedQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaCommutativeMonomialOrder", "\[Rule]", "\"\<Lexicographic\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], "=", 
   "\"\<Unintended attempt `1` for gaOrderedQ detected. Sorting will yield \
unexpected result.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], "=", 
    "\"\<Ordering `1` is undefined.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"anyCoef2_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], "=!=", 
            RowBox[{"{", "ind2", "}"}]}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQNoncommutative", "[", 
           RowBox[{"ord", ",", 
            RowBox[{"{", "ind1", "}"}], ",", 
            RowBox[{"{", "ind2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anyCoef1", ",", "anyCoef2"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anyCoef1", ",", 
       RowBox[{"anyCoef2", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind2", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "anyCoef2", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Scalar and base element ordering. For   \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[RevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvRevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]RevLex\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvRevLex\
\[CloseCurlyDoubleQuote] scalars are lowest elements. Note, that rules are \
complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["baseSymbol[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any_", ",", 
        RowBox[{"anycoef_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"any", ",", "anycoef", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
            "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
            "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", "ord"}],
          "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "any", ",", "anycoef"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Scalars and base element ordering. For   \[OpenCurlyDoubleQuote]Deg[Lex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[RevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvRevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Lex\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]InvLex\[CloseCurlyDoubleQuote]  scalars are highest \
elements.  Note, that rules are complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["baseSymbol[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anycoef_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", "any_", 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anycoef", ",", "any", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
            "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
            "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
         "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
                "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
                "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
             "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anycoef", ",", "any"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Scalar ordering uses ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " standard GroebnerBase orderings defined in ",
 "MonomialList[ ]"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_Plus", ",", "_", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], ",", "any1"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"_", ",", "any2_Plus", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], ",", "any2"}], 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any1_", ",", "any2_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"orderedQCommutative", "[", 
         RowBox[{"comOrd", ",", "any1", ",", "any2"}], "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any1", ",", "any2"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input"],

Cell["\<\
The same rules for dual base. When base elements have up and down indices the \
sorting is undefined (no rules). \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind1_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind2_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind1", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        RowBox[{"anyCoef2", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind2", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        "opts"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"SameQ", "[", 
         RowBox[{"ind", ",", "ind1", ",", "ind2"}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]IncreasingPermutatons\[CloseCurlyDoubleQuote] \
ordering {{1},{2},{3},{1,2}{1,3},{2,3},....} is the same as InvDeg[Lex] \
ordering. There is possibility to define IncreasingPermutatonsWithSignature \
where {1,3}->-{1,3} (due to Odd permutation of 1,2,3). Not implemented. See \
note in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 58."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Subsets", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], ",", 
     RowBox[{"{", "len", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", "len__Integer", "}"}]}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mvInvDegLexSortedIndexList", "[", 
          RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "len", "}"}]}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr_:", "All"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Signature of increasing i.e.  InvDeg[Lex], permutations are easier to \
determine, see formulas in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 59."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"triangularNumber", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"n", "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}], "/", "2"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mvSignatureOfIncreasingPermutation", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", "x"}], ")"}], "-", 
       RowBox[{"triangularNumber", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"OrderedQ", "[", "x", "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{"And", "@@", 
       RowBox[{"Positive", "[", "x", "]"}]}], ")"}]}]}]}], ";"}]}], "Input"],

Cell["Sorting index list with given order", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "[", 
    RowBox[{
     RowBox[{"ind", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"__Integer", "?", "Positive"}], "}"}], ".."}], "}"}]}], ",", 
     
     RowBox[{"ord_String:", "\"\<InvDeg[Lex]\>\""}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeRevLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvRevLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[InvRevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
         "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "_", ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", "ord"}], 
       "]"}], ";", "ind"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric algebra orthonormal base  construction"
}], "Subsubsection"],

Cell[TextData[{
 "This slightly modified approach of base construction is due to G. Stacey \
Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  Reciprocal base is constructed in section 8 (inverse,...)."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
      "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
      ",", 
      RowBox[{"Quiet", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"gaGradesOnly", "\[Rule]", "All"}], ",", 
      RowBox[{"Format", "\[Rule]", "theInternalMVRepresentation"}], ",", 
      RowBox[{"gaDefineInput", "\[Rule]", "True"}], ",", 
      RowBox[{"gaMakeAlias", "\[Rule]", "True"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineOrthonormalBasis", "::", "Format"}], "=", 
    "\"\<Required multivector representation format `1` is unknown. Will \
proceed with Format->\\\"AdditiveRepresentation\\\".\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetAttributes", "[", 
      RowBox[{"baseSymbol", ",", "NHoldAll"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDefineOrthonormalBasis", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"p_Integer", ",", "q_Integer", ",", 
          RowBox[{"r", ":", 
           RowBox[{"(", 
            RowBox[{"_", "?", "IntegerQ"}], ")"}], ":", "0"}]}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "baseSymbol", ",", "invdeglexIndexList", ",", "indSet", ",", "keysB",
           ",", "gr", ",", 
          RowBox[{"quiet", "=", "False"}], ",", 
          RowBox[{"al", "=", 
           RowBox[{"Cl", "[", 
            RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ord", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{
              "gaDefineOrthonormalBasis", ",", 
               "gaNonCommutativeMonomialOrder"}], "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"grOnly", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaGradesOnly", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], 
              "]"}]}], ")"}]}], ",", "algBoxes", ",", 
          RowBox[{"theMVRepresentation", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
            ")"}]}], ",", 
          RowBox[{"defineInput", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaDefineInput", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"makeAlias", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaMakeAlias", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", "gaDefineOrthonormalBasis", "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
          "theMVRepresentation", ",", "\[IndentingNewLine]", 
           "\"\<AdditiveRepresentation\>\"", ",", 
           RowBox[{
            RowBox[{"unitElement", "[", "al", "]"}], "=", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ",", 
           "\[IndentingNewLine]", "\"\<AssociationRepresentation\>\"", ",", 
           RowBox[{
            RowBox[{"unitElement", "[", "al", "]"}], "=", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{
              RowBox[{"Association", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], "\[Rule]", "1"}], "]"}], ",", 
              "al"}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBasis", "::", "Format"}], ",", 
              "theMVRepresentation"}], "]"}], ";", 
            RowBox[{
             RowBox[{"unitElement", "[", "al", "]"}], "=", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"set", " ", "color"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", 
              "gaNotation"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
              RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaDefineNotation", "[", 
             RowBox[{"al", ",", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}]}], "]"}],
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "set", " ", "and", " ", "update", " ", "input", " ", "aliases"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"defineInput", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaDefineInput", "[", 
             RowBox[{"al", ",", 
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "gaDefineInput", "]"}]}], "]"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "calculate", " ", "and", " ", "store", " ", "some", " ", "data", 
           " ", "which", " ", "will", " ", "be", " ", "often", " ", "used", 
           " ", "by", " ", "other", " ", "functions"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "=", 
          RowBox[{"p", "+", "q", "+", "r"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], "=", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"p", "+", "1"}], ",", 
            RowBox[{"p", "+", "q"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaReverseGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}], ",", 
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", "4"}], "]"}]}], "]"}], ",", "i", ",", 
              "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaGradeInverseGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OddQ", "[", "i", "]"}], ",", "i", ",", "Nothing"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}], "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}], ",", 
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", "4"}], "]"}]}], "]"}], ",", "i", ",", 
              "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"main", " ", "stuff"}], " ", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"invdeglexIndexList", "=", 
          RowBox[{"mvInvDegLexSortedIndexList", "[", 
           RowBox[{"al", ",", "grOnly"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ord", "===", "\"\<InvDeg[Lex]\>\""}], ",", 
           RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
           RowBox[{"indSet", "=", 
            RowBox[{"gaIndexSort", "[", 
             RowBox[{"invdeglexIndexList", ",", "ord"}], "]"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theMVRepresentation", ",", "\[IndentingNewLine]", 
           "\"\<AdditiveRepresentation\>\"", ",", 
           RowBox[{"keysB", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"baseSymbol", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}], "/@",
               "indSet"}], ")"}]}], ",", "\[IndentingNewLine]", 
           "\"\<AssociationRepresentation\>\"", ",", 
           RowBox[{"keysB", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"baseSymbol", "[", 
                RowBox[{
                 RowBox[{"Association", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "\[Rule]", "1"}], "]"}], ",",
                  "al"}], "]"}], "&"}], "/@", "indSet"}], ")"}]}], ",", 
           "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBasis", "::", "Format"}], ",", 
              "theMVRepresentation"}], "]"}], ";", 
            RowBox[{"keysB", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}], "/@",
                "indSet"}], ")"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                 "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                 ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
               ",", "ord"}], "]"}], ",", 
             RowBox[{
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaOrthonormalBasis", "[", 
                RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], "=", 
               RowBox[{"Append", "[", 
                RowBox[{"keysB", ",", 
                 RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}], "=", 
            "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"assign", " ", "grades"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
           "theMVRepresentation", "=!=", 
            "\"\<AssociationRepresentation\>\""}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gr", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
              "indSet"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"gaGetGrade", "[", 
                RowBox[{"keysB", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
               RowBox[{"gr", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";"}]}],
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Quiet", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaDefineOrthonormalBasis", ",", "Quiet"}], "]"}]}], 
            ")"}], ",", "\[IndentingNewLine]", "Automatic", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
               "alreadyPrintedList", ",", 
                "\"\<gaDefineOrthonormalBasis\>\""}], "]"}]}], ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{
               "alreadyPrintedList", ",", 
                "\"\<gaDefineOrthonormalBasis\>\""}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"quiet", "=", "True"}]}], ",", 
             RowBox[{"quiet", "=", "False"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "True", ",", 
           RowBox[{"quiet", "=", "True"}], ",", "False", ",", 
           RowBox[{"quiet", "=", "False"}], ",", "_", ",", 
           RowBox[{"quiet", "=", "False"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", 
           RowBox[{
            RowBox[{"algBoxes", "=", 
             RowBox[{"ToBoxes", "[", "al", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "ord", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "ord", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "avoid", " ", "reference", " ", "to", " ", "explicit", " ", 
           "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"makeAlias", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "grOnly"}], "]"}], "=", 
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "===", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord"}], "]"}], "=", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}], ";", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "=", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "ord", ",", "grOnly"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"special", " ", "data", " ", "for", " ", "quaternions"}], ",", 
       " ", 
       RowBox[{
       "since", " ", "they", " ", "can", " ", "be", " ", "used", " ", "with", 
        " ", "any", " ", "algebra"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaVectorSpaceDimension", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "2"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNegativeSignatureIndexList", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaReverseGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", "2", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeInverseGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaCliffordConjugateGrades", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "1", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Quaternion\>\"",
          ",", "___"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "2", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Quaternion\>\"",
          ",", "___"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Quaternion\>\"",
          ",", "___"}], "]"}], "]"}], "=", 
      RowBox[{"{", "2", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Quaternion\>\"",
          ",", "___"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Quaternion\>\"",
          ",", "___"}], "]"}], "]"}], "=", 
      RowBox[{"{", "1", "}"}]}], ";", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Quaternion\>\"",
          ",", "___"}], "]"}], "]"}], "=", 
      RowBox[{"{", "2", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input"],

Cell[TextData[{
 "Sometimes it is useful to group base elements by grade, this is simply to \
implement using undocumented ",
 StyleBox["Internal`PartitionRagged[ ]",
  FontWeight->"Bold"],
 " function. Warning, code below will not work if ",
 StyleBox["Module[ ] ",
  FontWeight->"Bold"],
 "is replaced by ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaOrthonormalBasis", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"GroupBy", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"algebra_", ",", "ord_String", ",", 
     RowBox[{"gr_:", "All"}], ",", 
     RowBox[{"opts__", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grouping", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"GroupBy", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaOrthonormalBasis", ",", "GroupBy"}], "]"}]}], ")"}]}], 
       ",", 
       RowBox[{"currentAlg", "=", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{"algebra", ",", "ord", ",", "gr"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "currentAlg", "]"}], "=!=", 
        "gaOrthonormalBasis"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "grouping", ",", "\"\<None\>\"", ",", "currentAlg", ",", 
         "\"\<Grade\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaHomogeneusSubspaceBase", "[", 
              RowBox[{"algebra", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"gaVectorSpaceDimension", "[", "algebra", "]"}], "]"}]}],
            ")"}], "=", 
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{"Internal`PartitionRagged", "[", 
            RowBox[{"currentAlg", ",", 
             RowBox[{"Length", "/@", 
              RowBox[{"Split", "[", 
               RowBox[{"currentAlg", ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
                   RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
               "]"}]}]}], "]"}], ")"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\n"}], "Input"],

Cell["\<\
If all base was already calculated an now we need only some part of it, then \
simply take requested grades\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra_", ",", "ord_String", ",", "gr_List"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"algebra", ",", "ord", ",", "All"}], "]"}], ",", 
       RowBox[{"_", "?", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], ",", "gr"}], "]"}], 
            "]"}], ">", "0"}], "&"}], ")"}]}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"algebra", ",", "ord", ",", "All"}], "]"}], "]"}], "=!=", 
      "gaOrthonormalBasis"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "no", " ", "ordering", " ", "given"}], ",", " ", 
    RowBox[{"use", " ", "InvDegLex"}]}], " ", "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra_", ",", "gr_"}], "]"}], ":=", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"algebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "gr"}], "]"}]}], 
   ";"}]}]}], "Input"],

Cell["\<\
Since we always do with quaternions, add neded data for them manually.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"baseSymbol", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"#", ",", 
      RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"keysB", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
     RowBox[{"gr", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Index rising and lowering"
}], "Subsubsection"],

Cell["\<\
When orthonormal base is calculated, we can raise and lower indices. Raising \
and lowering indices do not make base dual or reciprocal, because we include \
signature factors. The signature of simple algebra is simply a number of base \
vectors of negative signatures \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
The commands allows to rewrite expression with upper or down indices only. \
Because multiplication of up/down indices is realised as independent \
operations, the comands might be usefull for a correctness test.\
\>", "Text"],

Cell[TextData[{
 "Note, that despite that we have up and down indices we always assume, that \
their ordering is common (i.e. not down indices first, then up indices, but \
order is according index values) If that was not true, then we should apply \
",
 Cell[BoxData["mvAltProductSignatureMap"], "Input",
  Evaluatable->False,
  CellGroupingRules->{GroupTogetherGrouping, 10002.}],
 " function from the package and move this function below in the file). "
}], "Text"],

Cell["Yet needs to implement for Associations.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{"expr_", ",", "_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", "_bs"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do_List", ",", "up_List"}], "]"}], ",", "al_Cl"}], "]"}], 
        ",", "\"\<FromDown\>\""}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do", ",", "up"}], "]"}], ",", "al"}], "]"}], "->", 
        RowBox[{
         RowBox[{"Power", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], ",", 
              "do"}], "]"}], "]"}]}], "]"}], "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"Union", "[", 
              RowBox[{"do", ",", "up"}], "]"}]}], "]"}], ",", "al"}], 
          "]"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do_List", ",", "up_List"}], "]"}], ",", "al_Cl"}], "]"}], 
        ",", "\"\<FromUp\>\""}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"do", ",", "up"}], "]"}], ",", "al"}], "]"}], "->", 
        RowBox[{
         RowBox[{"Power", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"Length", "[", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], ",", 
              "up"}], "]"}], "]"}]}], "]"}], "*", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"do", ",", "up"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}]}], "}"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexUp", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"orthogonalBaseElements", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
             "]"}], "]"}]}], ",", "replRules"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"replRules", "=", 
          RowBox[{"Dispatch", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"makeRule", "[", 
               RowBox[{"#", ",", "\"\<FromDown\>\""}], "]"}], "&"}], "/@", 
             "orthogonalBaseElements"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaIndexDown", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"orthogonalBaseElements", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
             "]"}], "]"}]}], ",", "replRules"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"replRules", "=", 
          RowBox[{"Dispatch", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"makeRule", "[", 
               RowBox[{"#", ",", "\"\<FromUp\>\""}], "]"}], "&"}], "/@", 
             "orthogonalBaseElements"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"expr", "/.", "replRules"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Taking grades, indices and parts of base elements"
}], "Subsubsection"],

Cell["\<\
Grade of empty base element is zero, grade of base element multiplied by \
factor is grade of base element. Warning. Replacement of c in expression \
c_*bs_baseSymbol bu c_. would result in infinite loop. Grades of down  (by \
default) orthonormal base elements are defined during evaluation of \
gaDefineOrthonormalBasis[ ] . These grades are explicitly set, for example  \
gaGetGrade[baseSymbol[mvDownUp[{1},{}],algebra]]=1 . This is useful from \
performance point of view. For base elements which contains both, down and up \
indices, however we calculate grade programically an dset it number of \
indices of up and down indices. This should not slowdown code significantly, \
because explicit set values takes place before definitions given below.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "the", " ", "next", " ", "definition", " ", "is", " ", "harmless", " ",
         "for", " ", "MMA", " ", "version"}], ",", " ", 
       RowBox[{
       "which", " ", "do", " ", "not", " ", "have", " ", "Association", " ", 
        "implemented"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"mv_Association", ",", "__"}], "]"}], "]"}], "]"}], ":=", 
      RowBox[{"Union", "[", 
       RowBox[{"Length", "/@", 
        RowBox[{"Flatten", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Keys", "[", "mv", "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"mvDownUp", "\[Rule]", "List"}], "}"}]}], ")"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", "_"}], "]"}], 
        "]"}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"i1", ",", "j1"}], "}"}], "]"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"c_", "*", "bs_baseSymbol"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaGetGrade", "[", "bs", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Extract indices of multivectors", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetIndex", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{"in_mvDownUp", ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"in", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetIndex", "[", "c_", "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Rules for operations (sumation, multiplications, etc.) will be given after \
definition of  these operations. Here we only define how to extract  \
,,primitive\[CloseCurlyDoubleQuote] monomials.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Products and expansions"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"(*", 
     RowBox[{"help", " ", "functions"}], "*)"}], 
    RowBox[{
    "gaCommutativeQ", ",", "gaCommutativeAllQ", ",", "gaSetNonCommutative", 
     ",", "gaSetCommutative", ",", "mvZeroGradeQ", ",", 
     "gaGeneralMultivector", ",", 
     RowBox[{"(*", "operations", "*)"}], "GeometricProduct", ",", "GP", ",", 
     "OuterProduct", ",", "OP", ",", "LeftContract", ",", "LC", ",", 
     "RightContract", ",", "RC", ",", "InnerProduct", ",", "IP", ",", 
     RowBox[{"(*", 
      RowBox[{"product", " ", "expansion"}], "*)"}], "gaProductExpand", ",", 
     "CoefficientFunction", ",", "gaPE", ",", "gaExpand", ",", "gaExpandedQ", 
     ",", "CollectCoefficients", ",", "gaProductPairExpand", ",", 
     "OmitGrades", ",", "gaGPPower", ",", "gaGPMatrixPower", ",", "gaOPPower",
      ",", "gaOPMatrixPower", ",", "gaGeometricMatrixProduct", ",", 
     "gaOuterMatrixProduct", ",", "DorstProduct", ",", "DP", ",", 
     RowBox[{"(*", 
      RowBox[{
      "convert", " ", "between", " ", "internal", " ", "representations"}], 
      "*)"}], "gaAssociationRepresentation", ",", "gaAdditiveRepresentation", 
     ",", "gaTogether"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[TextData[{
 "Do not use ** (",
 StyleBox["NonCommutativeMultiply[ ]",
  FontWeight->"Bold"],
 ") for geometric product!"
}], "Text"],

Cell[TextData[{
 "There is one more product, called the \[OpenCurlyDoubleQuote]Shuffle \
product\[CloseCurlyDoubleQuote], defined by Perti Lounesto in \
\[OpenCurlyDoubleQuote]Lectures on Clifford algebra\[CloseCurlyDoubleQuote] \
",
 ButtonBox["[RA-LoCGAaA] ",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 26, which has geometrical meening for \[OpenCurlyDoubleQuote]meet\
\[CloseCurlyDoubleQuote], and denoted as \[Wedge].  It is not defined at the \
moment. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeQ[f] returns True if argument f is commutative (default \
for new symbol).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeAllQ[expr] returns True if all subparts of expr is \
commutative.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "::", "usage"}], "=", 
   "\"\<gaSetNonCommutative[heads] sets listed heads to be noncommuting \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "::", "usage"}], "=", 
   "\"\<gaSetCommutative[head] sets listed heads to be commuting \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "::", "usage"}], "=", 
   "\"\<mvZeroGradeQ[expr] returns True if it can  detect that multivector is \
scalar. Important note. The answer \\\"False\\\" can indicate detection \
failure, therefore the command intended only for positive decision purposes, \
i.e. on return of True. An alternative is to use gaGetGrade[ ].\>\""}], 
  ";"}]], "Input"],

Cell[TextData[{
 " If we set {",
 StyleBox["Flat",
  FontWeight->"Bold"],
 "} Attribute to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 ", we get infinite recursion limit in ",
 StyleBox["MakeBoxes",
  FontWeight->"Bold"],
 ". Therefore we implement that property without the attribute."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricProduct", "::", "usage"}], "=", 
   "\"\<GeometricProduct[a,b,...] denotes associative geometric product of \
multivectors a,b,... . Alias is GP[]. The StandardForm notation is \
\[GeometricProduct](unicode char \\ :0x26AC, in order to avoid clash with \
Mathematica EmptySmallCircle). For input use keyboard alias \[EscapeKey]gp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GP", "::", "usage"}], "=", "\"\<Alias for GeometricProduct\>\""}],
   ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OuterProduct", "::", "usage"}], "=", 
   "\"\<OuterProduct[a,b,...] denotes outer (wedge) product of multivectors \
a,b,... . Alias is OP[]. The StandardForm notation is \[OuterProduct] \
\!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{
RowBox[{\"unicode\", \" \", \"char\"}], \" \", \"\\\\:22ce\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)). For input use keyboard alias \[EscapeKey]op\[EscapeKey]. \
UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OP", "::", "usage"}], "=", "\"\<Alias for OuterProduct\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InnerProduct", "::", "usage"}], "=", 
   "\"\<InnerProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, inner product turns into scalar product. \
Alias is IP[]. The StandardForm notation is \[InnerProduct] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:2219\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]ip\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IP", "::", "usage"}], "=", "\"\<Alias for InnerProduct\>\""}], 
  ";"}]], "Input"],

Cell[TextData[{
 "\nUnortunatelly keyboad aliases  \[EscapeKey]lc\[EscapeKey] and   \
\[EscapeKey]rc\[EscapeKey] are already in use by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LeftContract", "::", "usage"}], "=", 
   "\"\<LeftContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[a]>=mvGrade[b] result is multivector of grade mvGrade[a]-mvGrade[b] \
and zero otherwise. Alias is LC[]. The StandardForm notation is \
\[LeftContract] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:23a6\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias \[EscapeKey]il\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LC", "::", "usage"}], "=", "\"\<Alias for LeftContract\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RightContract", "::", "usage"}], "=", 
   "\"\<RightContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[b]>=mvGrade[a] result is multivector of grade mvGrade[b]-mvGrade[a] \
and zero otherwise. Alias is RC[]. The StandardForm notation is \
\[RightContract] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:23a3\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]ir\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RC", "::", "usage"}], "=", "\"\<Alias for RightContract\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DorstProduct", "::", "usage"}], "=", 
   "\"\<DorstProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, Dorst product turns into scalar product. \
Alias is DP[]. The StandardForm notation is \[DorstProduct] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{
RowBox[{\"unicode\", \" \", \"char\"}], \" \", \"\\\\:26ab\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]dp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DP", "::", "usage"}], "=", "\"\<Alias for DorstProduct\>\""}], 
  ";"}]], "Input"],

Cell["\<\
Geometric product implementation. Keep these functions in private context, \
because they are only used internally.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMu", "::", "usage"}], "=", 
   "\"\<mvMu[i_Integer?NonNegativeQ,J_List] counts elements of subset J that \
are greater than nonnegative integer i. J is subset of natural numbers. \
\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMuS", "::", "usage"}], "=", 
   "\"\<mvMuS[I_List,J_List] for each i in I counts elements of subset J that \
are greater of i and then adds all these numbers. Uses function mvMu to count \
elements for each i.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productSignatureMap", "::", "usage"}], "=", 
   "\"\<mvProductSignatureMap[I_List,J_List,GeometricProduct|OuterProduct,\
algebra___] provides correct sign for geometric product or outer product (it \
is indicated by third argument) of two multivectors. Assumes that indices of \
base vectors are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAltProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAltProductSignatureMap[I_List,J_List] provides correct sign for \
alternating product of two multivectors. Assumes that indices of base vectors \
are properly ordered. Currently is not used by any other function.\>\""}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "::", "usage"}], "=", 
   "\"\<For developers. mvSetSymmetricDifference[I_List,J_List] gives \
set-symmetric difference of sets I and J.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell["Geometric product expansion", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "usage"}], "=", 
   "\"\<gaProductExpand[expr_,opts___] expands geometric algebra products. \
Option Except->{InnerProduct,OuterProduct,LeftContract,RightContract} forbids \
expansion of listed products. Option CoefficientFunction->Expand expands each \
coefficient before collecting. The CoefficientFunction option might \
significantly speedup or slowdown calculations depending on input how \
(symbolic) coefficients behaves on applying the provided CoefficientFunction \
function. The LeafCount of obtained result might also differ evry \
significantly. Instead of Expand any pure function can be applied here. \
Working with numerical coefficients choice CoefficientFunction->Identity is \
usefull. The main command gaProductExpand actually did't expand the given \
expression. It only splits expression in pairs of products, and then calls \
low level command gaProductPairExpand[], which do implements the expansion. \
The default option Method->Automatic select the actual expansion method  \
(\\\"RealTimePairProduct\\\" or \\\"PrecomputedPairProduct\\\") which will be \
used in gaProductPairExpand[].  gaProductPairExpand[] has more expansion \
options which can be directly refered in order to get full expansion control \
over pair of product. To convert expression into GeometricProduct use \
gaToGeometricProduct[ ].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CoefficientFunction", "::", "usage"}], "=", 
   "\"\<Option for gaProductExpand, which performs given pure function on \
collected coefficients of multiplied terms. CoefficientFunction->Identity or \
CoefficientFunction->Expand are typical, Thought other choices like \
CoefficientFunction->(Simplify[Togeter[#]]&) are valid.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "::", "usage"}], "=", 
   "\"\<gaExpand[expr] repeatidly applies Expand and gaProductExpand commands \
until result stop changing. Single Expand[gaProductExpand[ ]] should be \
enought and is recommended. If you are forced to use gaExpand[], it means \
that gaProductExpand[ ] implementation is still not perfect.\>\""}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "usage"}], "=", 
   "\"\<gaProductPairExpand[h[mv1_,mv2_],{opts___}] is a low level expansion \
command, which implements true expansion of product h of single pair (!) of \
arguments mv1 and mv2. Note, that opts now are put in separate (mandatory) \
list. Use gaProductPairExpand[ ] directy only if a higher level \
gaProductExpand[] command cannot do what you want. For example, use it if you \
want to skip calculation of some specific grades. The omited in the \
calculation grades can be specified using option OmitGrades. The \
gaProductPairExpand[ ] has two expansion method realised. The method \
\\\"RealTimePairProduct\\\" implementation expansion by direct multiplication \
of base element by base element. This method works fast for small number of \
terms. When multivector consist of many base elements, then method \
\\\"PrecomputedPairProduct\\\" is recomended, unless algebra is large (vector \
spacedimension 9 or more). It first precomputes the product of two general \
formal multivectors symbolically (using the previous method) and then \
replaces coefficients of particular input inside symbolically precomputed \
expansion.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OmitGrades", "::", "usage"}], "=", 
   "\"\<OmitGrades->grade or OmitGrades->{grade1, grade2,...} is an option \
for gaProductPairExpand, which allows to avoid computation of specified \
grades in the productof single pair of multivectors. Default is \
OmitGrades->{}\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPE", "::", "usage"}], "=", 
   "\"\<Alias for gaProductExpand[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpandedQ", "::", "usage"}], "=", 
   "\"\<Predicate that checks if expression is in expanded form.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "::", "usage"}], "=", 
   "\"\<gaGPPower[x,n_Integer] computes geometric product of n elements  x \
\[GeometricProduct] x \[GeometricProduct] ... \[GeometricProduct] x.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaGPMatrixPower[X,n_Integer] computes product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "::", "usage"}], "=", 
   "\"\<gaOPPower[x,n_Integer] computes outer product of n elements  x  \
\[OuterProduct] x  \[OuterProduct] ... \[OuterProduct] x.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaOPMatrixPower[X,n_Integer] computes  product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaGeometricMatrixProduct[A,B,...] computes  product of matrices A and \
B, elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaOuterMatrixProduct[A,B,...] computes  product of matrices A and B, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAssociationRepresentation", "::", "usage"}], "=", "\"\<\!\(\*
StyleBox[\"gaAssociationRepresentation\",
FontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"[\",
FontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"expr_\",
FontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"]\",
FontWeight->\"Bold\"]\) converts multivectors in the expression expr to \
Mathematica's Associations. The association (associative array) \
representation, (denoted as e[<| keys -> values|>, algebra, ___]) is \
extremely convenient (and fast) in manipulating multivector structure. In \
future it will be a preferable internal format for multivector in orthonormal \
base. The other way convertion can be obtained with gaAdditiveRepresentation[ \
].\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAdditiveRepresentation", "::", "usage"}], "=", "\"\<\!\(\*
StyleBox[\"gaAdditiveRepresentation\",
FontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"[\",
FontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"expr_\",
FontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"]\",
FontWeight->\"Bold\"]\) converts from internal Association format to simple \
additive format, which is much more convenient to read and input.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTogether", "::", "usage"}], "=", 
   "\"\<gaTogether[expr] rewrites multiple base elements, which are in \
Association representations as a single Association.\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeneralMultivector", "::", "usage"}], "=", 
   "\"\<gaGeneralMultivector[coef_,al_Cl,grade_:{}] generates algebras al \
multivector with symbolic coefficients named as coef[_integer] of specified \
grade. If grade list is empty {} or All all grades are generated.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation of noncommutativity and noncommutative element detection"
}], "Subsection"],

Cell[TextData[{
 "Common settings.  Explicitly declare all symbols i.e., ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ",",
 StyleBox["Power",
  FontWeight->"Bold"],
 ",etc... to be commutative by default. "
}], "Text"],

Cell[TextData[{
 "The gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " only tests commutativity of  the expressions head. The gaCommutativeAllQ",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "investigates entire expression looking at heads and arguments. If any part \
contains noncommutative head, ",
 "res",
 "ult is \[OpenCurlyDoubleQuote]False\[CloseCurlyDoubleQuote]. So, \
gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " \[Subset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". We can define even more powerfull operator ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 ", which will",
 StyleBox[" ",
  FontWeight->"Bold"],
 "look  if expression is a scalar (i.e. look for some specific inner products \
of multivectors).  Note that ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " might return",
 StyleBox[" True",
  FontWeight->"Bold"],
 " for expressions, which has ",
 StyleBox["noncommutative",
  FontWeight->"Bold"],
 " subexpressions! So  ",
 StyleBox["mvZeroGradeQ[ ] ",
  FontWeight->"Bold"],
 "\[NotSubset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeQ", "[", "_", "]"}], ":=", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{"_", "?", "NumericQ"}], "]"}], ":=", "True"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", "s_Symbol", "]"}], ":=", 
   RowBox[{"gaCommutativeQ", "[", "s", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeAllQ", "[", 
     RowBox[{"f_", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaCommutativeQ", "[", "f", "]"}], ",", 
      RowBox[{"Apply", "[", 
       RowBox[{"And", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"gaCommutativeAllQ", ",", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}]}], 
   ";"}], "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Derivatives", " ", "of", " ", "MV", " ", "are", " ", "handled", " ", 
     "separatelly"}], ",", " ", 
    RowBox[{"because", " ", 
     RowBox[{"gaCommutativeAllQ", "[", " ", "]"}], " ", "do", " ", "not", " ",
      "check", " ", "for", " ", "more", " ", "complex", " ", "structures", 
     " ", "like", " ", 
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "[", "y", "]"}]}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Derivative", "[", "_", "]"}], "[", "x___", "]"}], "[", "y___", 
     "]"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "y", "}"}]}], "]"}]}], ",", "False"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["Set commutative and noncommutative operators.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "False"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "False"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "True"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "True"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{
    "NonCommutativeMultiply", ",", "GeometricProduct", ",", "OuterProduct", 
     ",", "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
     "GP", ",", "OP", ",", "IP", ",", "LC", ",", "RC"}], "}"}]}], 
  ";"}]}], "Input"],

Cell["Set commutative and non-commutative objects. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "[", 
   RowBox[{
    RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}], ",", "MV"}], 
   "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Generally  ",
 StyleBox["False",
  FontWeight->"Bold"],
 "  of ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " can mean detection failure, even when expression do is scalar (say in the \
case  complicated inner product of multivectors). As a ",
 "res",
 "ult it cannot ensure that expression grade is zero, so only positive \
answers make sense and can be used as a test. Use gaGetGrade",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 " if you really want to know expression grade."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"additionalTestFunction", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"additionalTestFunction", "[", "expr_", "]"}], ":=", "False"}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"gaCommutativeAllQ", "[", "expr", "]"}], ",", "True", ",", 
     RowBox[{"additionalTestFunction", "[", "expr", "]"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Grade, index extraction from general expressions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for Times, Plus and nonelements"
}], "Subsubsection"],

Cell["\<\
Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"_", "?", "NumericQ"}], "]"}], "]"}], ":=", 
    RowBox[{"{", "0", "}"}]}], " ", ";"}], 
  RowBox[{"(*", 
   RowBox[{"first", " ", "for", " ", "speed"}], " ", "*)"}]}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", "expr_", "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"{", "0", "}"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "expr", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "only", " ", "multivectors", " ", "are", " ", "graded", " ", 
      "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Times", "[", 
        RowBox[{"c_", ",", "d__"}], "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Times", "[", "d", "]"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{"Union", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"gaGetGrade", "/@", 
       RowBox[{"{", "x", "}"}]}], "]"}], "]"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "Plus", " ", "means", " ", "that", " ", "in", " ", "general", " ", "we", 
    " ", "have", " ", "a", " ", "non", " ", "homogeneus", " ", 
    "multivector"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]}], "Input"],

Cell["Extracting all indices from all terms in a sum", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"gaGetIndex", "[", 
    RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
  RowBox[{"Union", "@@@", 
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{"gaGetIndex", "/@", 
      RowBox[{"{", "x", "}"}]}], ",", "mvDownUp"}], "]"}]}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for OuterProduct"
}], "Subsubsection"],

Cell[TextData[{
 "Rules for ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ". It is assumed, that multivectors denoted by different letters are \
linearly independent. ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " itself ensures that there are no two identical vectors in ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " . All grades which are higher than vector space dimension are removed. "
}], "Text"],

Cell[TextData[{
 "Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values. Note: gaGetGrade",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " ",
 "res",
 "ult depends on value of ",
 StyleBox["gaRunningAlgebra!",
  FontWeight->"Bold"]
}], "Text"],

Cell["\<\
The general definition was suppressed, because it interfered with convertion \
into Association form. Hold it until gaAccociationForm will be improved.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"OuterProduct", "[", "x__", "]"}], "]"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Outer", "[", 
        RowBox[{"Plus", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"(", 
           RowBox[{"gaGetGrade", "/@", 
            RowBox[{"{", "x", "}"}]}], ")"}]}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", ">", 
         RowBox[{"gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}]}], 
        "&"}], ")"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Rules for LeftContract, RightContract and InnerProduct"
}], "Subsubsection"],

Cell["Not an easy task.", "Text"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Taking parts of multivector with gaGetMV"
}], "Subsection"],

Cell[TextData[{
 StyleBox["E",
  FontWeight->"Bold"],
 "xtract from expression part of specified grade"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". gaGetMV",
 "[ ]",
 " extract from expression part of specified grade"
}], "Subsubsection"],

Cell[TextData[{
 " gaGetMV",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " takes multivector of specified grade or index pattern (not the grade or \
index itself !) . First specific implementation for Association \
implementation. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"working", " ", "with", " ", "grades"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], 
          "]"}], ":=", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"res", "=", 
             RowBox[{"KeySelect", "[", 
              RowBox[{"arg", ",", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", "n", "}"}], ",", 
                  RowBox[{"(", 
                   RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ")"}]}], "]"}],
                 "&"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"res", "===", 
              RowBox[{"Association", "[", "]"}]}], ",", "0", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"res", ",", "other"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGetMV", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"res", "=", 
             RowBox[{"KeyTake", "[", 
              RowBox[{"arg", ",", 
               RowBox[{"{", "ind", "}"}]}], "]"}]}], "}"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"res", "===", 
              RowBox[{"Association", "[", "]"}]}], ",", "0", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"res", ",", "other"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
(the latest not yet implemented, may need to set Hold Rest attribute). 
If no multivector of requested grade is found return zero. Serve positive {} \
and negative Not[{}] requests.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"working", " ", "with", " ", "grades"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"working", " ", "with", " ", "indices"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "ind", "}"}], ",", "in"}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "working", " ", "with", " ", "base", " ", "element", " ", "for", " ", 
       "convenience"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_mvDownUp", ",", "al__"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "be", "}"}], ",", 
           RowBox[{"baseSymbol", "[", 
            RowBox[{"in", ",", "al"}], "]"}]}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Take grades of multivector list", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_List", "|", "_Plus"}], ")"}]}], ",", "what_"}], "]"}], ":=", 
   
   RowBox[{
    RowBox[{
     RowBox[{"gaGetMV", "[", 
      RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{"expr_", ",", "what_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"gaGetMV", "[", 
       RowBox[{
        RowBox[{"gaPE", "[", "expr", "]"}], ",", "what"}], "]"}], ")"}], "/;", 
     RowBox[{"!", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}], "[", 
         RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
   ";"}]}]], "Input"],

Cell["Scalar part projection and expressions without indices", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", "0"}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", "ind__mvDownUp", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "ind", "}"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"Not", "[", 
       RowBox[{"{", "ind__mvDownUp", "}"}], "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "ind", "}"}], ",", 
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], "]"}], ",", "a", ",", "0"}], "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
Without blocking baseSymbol, the below cell do not work properly, because \
baseSymbol[mvDownUp[{},{}],__] is replaced by 1.!!!\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"a_", ",", 
         RowBox[{"{", "be__baseSymbol", "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "baseSymbol", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "be", "}"}], ",", 
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}]}], 
           ",", "a", ",", "0"}], "]"}]}], "]"}], "/;", 
       RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"a_", ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", "be__baseSymbol", "}"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "baseSymbol", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "be", "}"}], ",", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], "]"}], 
           ",", "a", ",", "0"}], "]"}]}], "]"}], "/;", 
       RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Implementation", " ", "of", " ", 
     RowBox[{"Not", "[", 
      RowBox[{"{", "grades", "}"}], "]"}]}], ":", " ", 
    RowBox[{
    "find", " ", "all", " ", "possible", " ", "grades", " ", "and", " ", 
     "then", " ", "use", " ", "complement"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}],
         "]"}], ":=", 
       RowBox[{"expr", "/;", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", 
            RowBox[{"MV", "|", "baseSymbol"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
          RowBox[{"Not", "[", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", "0"}], "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", "n__Integer", "}"}], "]"}]}], "]"}], "]"}], ":=", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"gaGetGrade", "[", "expr", "]"}], ",", 
           RowBox[{"{", "n", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Return", " ", "0", " ", "if", " ", "no", " ", "grade", " ", 
        "listed"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", "0"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}]}]], "Input"],

Cell["Commuting factors out, last remains", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"a_", ",", "b__"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"Times", "[", "b", "]"}], ",", 
       RowBox[{"{", "n", "}"}]}], "]"}]}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Products notations and precedence implementation (based on modification \
of UnicodeSymbols.tr file)"
}], "Subsection"],

Cell["\<\
Based on product precedence implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstPruduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GP", "=", "GeometricProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OP", "=", "OuterProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LC", "=", "LeftContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RC", "=", "RightContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IP", "=", "InnerProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DP", "=", "DorstProduct"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make expressions"
}], "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[DorstProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<DorstProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[InnerProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<InnerProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[LeftContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<LeftContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[RightContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<RightContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[OuterProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<OuterProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"x", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"PatternSequence", "[", 
          RowBox[{"\"\<\[GeometricProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<GeometricProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
         "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], "]"}]}],
     ",", "sf"}], "]"}]}]}], "Input"],

Cell[TextData[{
 StyleBox["Known issue.",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 " If output is converted to ",
 StyleBox["InputForm[ ] ",
  FontWeight->"Bold"],
 "and then edited the result obtained, for example as, ",
 StyleBox["Cell[\[OpenCurlyDoubleQuote]3*Sin[x]*e[mvDownUp[{1, 2, 3}, {}], \
Cl[3, 1, 0]]\[GeometricProduct]a\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Input\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 ", will not be correctly converted to expression. At the moment it is \
unclear how cells which contains no Box structures  (i.e., when cell content \
is single string) are interpreted. "
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Make boxes"
}], "Subsubsection"],

Cell[TextData[{
 "Make output boxes: use explicit brackets for multiple arguments acording to \
precedence rules (use brackets for any lower precedence operations). \
Precedeces are:  NonCommutativeMultiply (**, highest), Times (*, Space), \
RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), OuterProduct (\[OuterProduct], bad \
representation in text cells, input cells are ok.), GeometricProduct(\
\[GeometricProduct]), Plus (lowest).\n\nNote that ",
 StyleBox["Times",
  FontWeight->"Bold"],
 " have higher precedence than any of geometric products. This is somehow \
unusual assumption, however convenient one. These precedences  (except that \
of ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ") are used in many of books on GA (look for partial  list above), thought \
in some books precedences of ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " are reversed (for example, see Geometric Algebra by Eric Chisolm arXiv \
1205.5935v1). We prefer inner product to have highest priority, because from \
programming point of view we are happy to recognize scalars as soon as \
possible."
}], "Text"],

Cell["Formating expresions with single argument.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "=!=", 
    "Plus"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<(\>\"", ",", 
      RowBox[{"MakeBoxes", "[", 
       RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "===", "Plus"}]}]}]}], "Input"],

Cell["Formating expresions with two arguments.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[RightContract]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[RightContract]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], 
          ",", "\"\<\[RightContract]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[RightContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
       "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[LeftContract]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[LeftContract]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[InnerProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[InnerProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[DorstProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[DorstProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[OuterProduct]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}],
         ",", "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
          "\"\<\[OuterProduct]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
        "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"RowBox", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<(\>\"", ",", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
         "]"}]}], "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[GeometricProduct]\>\"",
          ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
      "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
         ",", "\"\<\[GeometricProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<(\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], 
        "]"}]}], "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}]}], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricProduct,",
 " OuterProduct,  LeftContract and RightContract book keeping (general \
multivectors, no ordering rules)"
}], "Subsection"],

Cell[TextData[{
 " ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " book keeping . Unfortunatelly rules for differentiation operator ",
 StyleBox["mvD[ ]",
  FontWeight->"Bold"],
 " have to be given in a more complicated way."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "asociativity", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"GeometricProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], ";"}],
    " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "singlet", " ", "rule", " ", "applies", " ", "after", " ", "moving", " ", 
     "scalar", " ", "from", " ", "GeometricProduct"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"GeometricProduct", "[", "]"}], ":=", "1"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"when", " ", "e_", "1", "*", "e_", "1"}], " ", "->", 
     RowBox[{"1", " ", "we", " ", "are", " ", "left", " ", "empty"}]}], " ", 
    "*)"}]}]}]], "Input"],

Cell[TextData[{
 "Even if argument is a scalar (i.e. satisfy ",
 "gaGetGrade",
 StyleBox["[b]={0})",
  FontWeight->"Bold"],
 ", we do not move it out of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " (it is oposite to the case with ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 "). GeometricProduct properties with respect to base of  ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " are defined in Base expansion section."
}], "Text"],

Cell[TextData[{
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " book keeping . Ordering of rules is important. Here two possibilities \
exist how to interpret outer product of scalars. 1) Outer product of scalars \
is simply Times. This possibility implemented below.  In particularly \
HoldPattern[OuterProduct[a_]]:=a ; should be checked before commuting out \
properties, otherwise we can end with empty outerproduct.\n2) Outer product \
of scalars is zero. For this we need to move HoldPattern[OuterProduct[a_]]:=a \
in the end (before OuterProduct[]:=) and replace OuterProduct[]:=$Failed to \
OuterProduct[]:=0. Both variants correspond to general definition that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A", "r"], "\[OuterProduct]", 
     SubscriptBox["B", "s"]}], "=", 
    SubscriptBox["C", 
     RowBox[{"r", "+", "s"}]]}], TraditionalForm]]],
 ". The question needs further investigation."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "asociativity", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"OuterProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"OuterProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"[", 
       RowBox[{"DH", "-", 
        RowBox[{"CA2GC1", ".22", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
     RowBox[{"singlet", " ", "rule"}], ",", " ", 
     RowBox[{
     "outer", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
      "scalar", " ", "behaves", " ", "like", " ", "geometric", " ", 
      "product"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OuterProduct", "[", "]"}], ":=", "$Failed"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "outer", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input"],

Cell[TextData[{
 StyleBox["Note.",
  FontColor->RGBColor[1, 0.5, 0]],
 " Rule OuterProduct[A,A]->0 is only valid if A is pure product. If A is a \
sum of different grades, then the product is NOT zero!"
}], "Text"],

Cell[TextData[{
 StyleBox["LeftContract",
  FontWeight->"Bold"],
 "  (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[LeftContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]]],
 ")and ",
 StyleBox["RightContract ",
  FontWeight->"Bold"],
 " (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[RightContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]]],
 ")book keeping .  Both products are not associative (a\[CenterDot]b\
\[CenterDot]c syntax is undefined, i.e. forbidden). Nevertheless the rules \
below are shorter when written for multiple arguments (programming trick)"
}], "Text"],

Cell[TextData[{
 "List of equal blades are scalars.  These scalars are detected by ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " condition."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"RightContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "d", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "RightContract", " ", "with", " ", "right", " ", "scalar", " ", "is", " ", 
    "simple", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "a", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "b_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "a_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], " ",
    ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"LeftContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "c", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "LeftContract", " ", "with", " ", "left", " ", "scalar", " ", "is", " ", 
    "simply", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "b", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "a_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "b_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input"],

Cell[TextData[{
 "The ",
 StyleBox[" InnerProduct[ ] ",
  FontWeight->"Bold"],
 "treates scalars differently! If singlet appears in ",
 StyleBox["InnerProduct[ ]",
  FontWeight->"Bold"],
 ", this means we had multiplication with scalar. Then ",
 "res",
 "ult should be set to zero."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", 
     RowBox[{"a___", ",", 
      RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"b", ",", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "]"}], "/;", 
    RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"InnerProduct", "[", 
      RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Times", "[", 
      RowBox[{"b", ",", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "c"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"CA2GC1", ".21", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
    RowBox[{"singlet", " ", "rule"}], ",", " ", 
    RowBox[{
    "inner", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
     "scalar", " ", "gives", " ", "0"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", "a_", "]"}], "]"}], ":=", "0"}], 
  ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". GeometricMatrixProduct,",
 " OuterMatrixProduct "
}], "Subsection"],

Cell[TextData[{
 "Procedure to multiply matrices of multivectors. Implementation is taken \
from Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{"gaGeometricMatrixProduct", ",", "gaOuterMatrixProduct"}], 
    "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"GeometricProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaGeometricMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", "A_", "]"}], ":=", "A"}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"OuterProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaOuterMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Implementation and book keeping for geometric, outer products in \
orthonormal base."
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Tools to analyse compilation to C problems (unevaluatable by default, \
useful in the case of compilation problems)"
}], "Subsubsection"],

Cell["\<\
For example after upgrade to ubuntu 14.04 I had to make symbolic link of \
/lib/libgcc_s.so link to /lib/i386-linux-gnu.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellCommandFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{"Compile", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", "x", "}"}], "}"}], ",", 
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData["\<\"/usr/bin/gcc -shared -o \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.so\\\" -m32 -fPIC -O2 \
-D\\\"MINT_32\\\" \
-I\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/IncludeFiles/C\\\" -I\\\
\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/DeveloperKit/\
Linux/CompilerAdditions\\\" \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.c\\\"  \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/\
DeveloperKit/Linux/CompilerAdditions\\\" \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Libraries/Linux\\\"    \
2>&1\"\>"], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               PaneBox[
                RowBox[{"{", "_Real", "}"}],
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               RowBox[{"{", "_Real", "}"}],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Variables: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", "x", "}"}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Expression: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               SuperscriptBox["x", "2"],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{10, 10.2, 5468}, {
    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
   0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {1}}, 
   Function[{$CellContext`x}, $CellContext`x^2], Evaluate, 
   LibraryFunction[
   "/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/compiledFunction0.so", "compiledFunction0", {{Real, 0, "Constant"}}, 
    Real]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellOutputFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", "x", "}"}], "}"}], ",", 
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], 
  ";"}]}], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Subset counting functions"
}], "Subsubsection"],

Cell["\<\
Counts  elements of subset j that are greater than nonnegative integer i. j \
is subset of natural numbers. Replace  to byte compiled function (WVM) if \
user uses older Mma version, for which compilation to C is not possible. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMu", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Part", "=", "Compile`GetElement"}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sum", "=", "0"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"j", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
                 RowBox[{"sum", "++"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
             "sum"}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvMu", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Part", "=", "Compile`GetElement"}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sum", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"j", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
                RowBox[{"sum", "++"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
            "sum"}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell["\<\
Counts total number of  elements of subset j that are greater of  each of \
integers, listed in the list i.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMuS", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"Part", "=", "Compile`GetElement"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sum", "=", "0"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"sum", "=", 
                RowBox[{"sum", "+", 
                 RowBox[{"mvMu", "[", 
                  RowBox[{
                   RowBox[{"j", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
             "sum"}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvMuS", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"Part", "=", "Compile`GetElement"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sum", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"sum", "=", 
               RowBox[{"sum", "+", 
                RowBox[{"mvMu", "[", 
                 RowBox[{
                  RowBox[{"j", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", 
                RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
            "sum"}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Various products signature maps, see ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " package implementation"
}], "Subsubsection"],

Cell[CellGroupData[{

Cell["\<\
Geometric product signature map (used to compute GeometricProduct)\
\>", "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
Geometric product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
When both  down and up indices present we need take into account index number \
difference between initial and contracted upper index sets (we calculate \
everything using down indices). Note that term \
(-1)^(mvMu[gap,Join[{j1},{j2}]] + mvMu[gap,Join[{j1},{j2}]]) was dropped, \
because it comes twise (once, because we indices down, and second when count \
repeated indices which are both up, i.e. in that case remove from \
intersecting up and down indices that with negative signature)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
We put all calls to different product signature maps into same command \
productSignatureMap[ ], because then we can pass the function in the same \
form for different products (in particurly this simplifies implementation of \
multiplications of MV in association form)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
Compiled versions. Note that options CompilationOptions\[Rule]{\
\[OpenCurlyDoubleQuote]ExpressionOptimization\[CloseCurlyDoubleQuote]\[Rule]\
False,\[CloseCurlyDoubleQuote]InlineCompiledFunctions\[CloseCurlyDoubleQuote]\
\[Rule]True,\[CloseCurlyDoubleQuote]InlineExternalDefinitions\
\[CloseCurlyDoubleQuote]\[Rule]True}, spoils correct inlining of compiled \
code (slow CopyTensor[ ] appears inside \[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote] compiled code). Here inlining is achieved using \
With[ ] (see \
https://mathematica.stackexchange.com/questions/181672/how-to-avoid-\
copytensor-in-compile-function-with-external-call-the-other-case  for \
details)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"memorizeProducts", ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"with", " ", "memorization"}], " ", "*)"}], 
     RowBox[{
      RowBox[{
       RowBox[{"productSignatureMap", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i1___Integer", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i2___Integer", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
         RowBox[{"Cl", "[", 
          RowBox[{"gap_", ",", "gaq_", ",", 
           RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"productSignatureMap", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"gap", ",", "gaq", ",", "gar"}], "]"}]}], "]"}], "=", 
         RowBox[{"mvProductSignatureMapC", "[", 
          RowBox[{
           RowBox[{"{", "i1", "}"}], ",", 
           RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], 
        ")"}]}], ";"}], "\[IndentingNewLine]", ",", 
     RowBox[{"(*", " ", 
      RowBox[{"without", " ", "memorization"}], " ", "*)"}], 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"productSignatureMap", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i2___Integer", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"gap_", ",", "gaq_", ",", 
            RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
       RowBox[{"mvProductSignatureMapC", "[", 
        RowBox[{
         RowBox[{"{", "i1", "}"}], ",", 
         RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}]}],
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Never", " ", "try", " ", "to", " ", "memorize", " ", "product", " ", 
    "with", " ", "up", " ", "and", " ", "mixed", " ", "indices", " ", "in", 
    " ", "order", " ", "to", " ", "save", " ", "memory"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "GeometricProduct",
        ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"gap_", ",", "gaq_", ",", 
         RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "both"}], ",", " ", 
    RowBox[{"down", " ", "and", " ", "up", " ", "indices", " ", "present"}], 
    ",", " ", 
    RowBox[{
    "signature", " ", "is", " ", "calculated", " ", "from", " ", "Union", " ",
      "of", " ", 
     RowBox[{"indices", "!"}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "GeometricProduct",
        ",", 
       RowBox[{"Cl", "[", 
        RowBox[{"gap_", ",", "gaq_", ",", 
         RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"mvProductSignatureMapC", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i1", "}"}], ",", 
          RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i2", "}"}], ",", 
          RowBox[{"{", "j2", "}"}]}], "]"}], ",", "gap", ",", "gaq"}], "]"}], 
      "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "j1", "}"}]}], "]"}]}], "]"}], "+", 
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ")"}]}]}], ")"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvProductSignatureMapC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"intesectionIJ", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mvMu", "[", 
                RowBox[{
                 RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
                "0"}], ",", "0", ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"mvMuS", "[", 
                  RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
                 RowBox[{"mvMu", "[", 
                  RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvProductSignatureMapC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"intesectionIJ", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mvMu", "[", 
               RowBox[{
                RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
               "0"}], ",", "0", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"mvMuS", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
                RowBox[{"mvMu", "[", 
                 RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
            "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alternating product signature map (not used at the moment)", "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],

Cell["\<\
Alternating product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separatelly for speed. Alternating Product \
Signature map at the moment is not used (evaluation supressed to save time). \
The signature map was not adopted for mixed up and down indices.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "___"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "i1", "}"}], ",", 
       RowBox[{"{", "i2", "}"}]}], "]"}], "*", 
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "j1", "}"}], ",", 
       RowBox[{"{", "j2", "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"sum", "=", "0"}], ",", 
               RowBox[{"intesectionIJ", "=", 
                RowBox[{"Intersection", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"OddQ", "[", 
                   RowBox[{"intesectionIJ", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"sum", "=", 
                   RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", 
                  RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
               "]"}], ";", "sum"}]}], "]"}]}], ")"}]}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAltProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"mvMuS", "[", 
           RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"sum", "=", "0"}], ",", 
              RowBox[{"intesectionIJ", "=", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", 
                  RowBox[{"intesectionIJ", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                 RowBox[{"sum", "=", 
                  RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
              "]"}], ";", "sum"}]}], "]"}]}], ")"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Antisymmetric product signature map (used to compute OuterProduct)\
\>", "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell["\<\
Antisymmetric product signature map. Assumes natural index ordering. Down \
only and Up only cases are matched separatelly for speed.  \
AntisymmetricProductSignatureMap  in the presence of both up and down indices \
is calculated of the union of indices. Contrary to productSignatureMap no \
additional sign correction here.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ",", "OuterProduct", ",", "___"}], 
      "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "OuterProduct", 
       ",", "___"}], "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"productSignatureMap", "[", 
      RowBox[{
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i1___Integer", "}"}], ",", 
         RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
       RowBox[{"mvDownUp", "[", 
        RowBox[{
         RowBox[{"{", "i2___Integer", "}"}], ",", 
         RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", "OuterProduct", 
       ",", "___"}], "]"}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaPackageOptions"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mvMu", "=", "mvMu"}], ",", 
          RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Compile", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"mvMu", "[", 
              RowBox[{"0", ",", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
            "0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{"mvMuS", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
          RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
          RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mvMu", "=", "mvMu"}], ",", 
         RowBox[{"mvMuS", "=", "mvMuS"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Compile", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mvMu", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Intersection", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
           "0", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{"mvMuS", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
         RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}], ",", 
         RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Inner products signature maps are replaced by Geometric product signature map\
\
\>", "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],

Cell["\<\
LeftContract and RightContract product signature map is replaced by \
GeometricProduct signature map \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i1___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i2___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "LeftContract", ",", "al_Cl"}], 
    "]"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"{", "i1", "}"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"{", "i1", "}"}], "]"}], "]"}]}], ",", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
     "]"}], ",", "0"}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", "[", 
   RowBox[{"productSignatureMap", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i1___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "i2___Integer", "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "RightContract", ",", "al_Cl"}], 
    "]"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"{", "i1", "}"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"{", "i2", "}"}], "]"}], "]"}]}], ",", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
     "]"}], ",", "0"}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],

Cell["\<\
Hestenes inner product signature map needs adjustion to ensure, that inner \
multiplication by scalar gives 0, unless we multiply two scalars. This is \
ensured by more complicated test inside If[ ] statement\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"productSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "InnerProduct", ",", "al_Cl"}], 
     "]"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"{", "i1", "}"}], "]"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"{", "i2", "}"}], "]"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"len", "===", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"{", "i1", "}"}], "]"}], "]"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"len", "===", 
              RowBox[{"Length", "[", 
               RowBox[{"Union", "[", 
                RowBox[{"{", "i2", "}"}], "]"}], "]"}]}], ")"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i1", "}"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i2", "}"}], "=!=", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i1", "}"}], "===", 
            RowBox[{"{", "}"}]}], ")"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "i2", "}"}], "===", 
            RowBox[{"{", "}"}]}], ")"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"productSignatureMap", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i1", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "i2", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct", ",", "al"}], 
        "]"}], ",", "0"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Set symmetric difference function"
}], "Subsubsection"],

Cell[TextData[{
 "Set symmetric difference function coinsides with  Stamples ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " implementation. Compilation of this function is not worthy (speedup is \
negligable). It is preferable to have one name for different products, \
therefore we renamed it as productIndex[i,j,GeometricProduct|Outerproduct]"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"iI_List", ",", "jJ_List"}], "]"}], "]"}], ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Cannot apply the symmetric difference, ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Intersection[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " directly, because indices are inside ",
 StyleBox["mvDownUp[ ] ",
  FontWeight->"Bold"],
 "container. Therefore we need intermediate layer. When only down or up \
indices present, we simply pass corresponding functions to lists of integers"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", "GeometricProduct"}], "]"}], "=", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{
      RowBox[{"mvSetSymmetricDifference", "[", 
       RowBox[{"i1", ",", "i2"}], "]"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j2_List"}], "]"}], ",", "GeometricProduct"}],
     "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "j2"}], "]"}], ",", "GeometricProduct"}], 
     "]"}], "=", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"mvSetSymmetricDifference", "[", 
       RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "When both type of indices present, then we have to find set symmetric \
difference of common index set. In addition we have to remember which indices \
are down and what are up. Note that ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " authomatically sorts integers."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "GeometricProduct"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    "=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ssd", "=", 
        RowBox[{"mvSetSymmetricDifference", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"i1", ",", "j1"}], "]"}], ",", 
          RowBox[{"Union", "[", 
           RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"Intersection", "[", 
         RowBox[{"ssd", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"i1", ",", "i2"}], "]"}]}], "]"}], ",", 
        RowBox[{"Intersection", "[", 
         RowBox[{"ssd", ",", 
          RowBox[{"Join", "[", 
           RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}]}], ";"}]], "Input"],

Cell["For outer product the function is simple", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"productIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "OuterProduct"}], 
    "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"Union", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell["\<\
For LeftContract and RightContract product the productIndex is substituted by \
GeometricProduct \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "LeftContract"}], "]"}],
   ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"i1", ",", "j1"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], "]"}]}], ",", 
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    ",", "0"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "RightContract"}], 
   "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{"i1", ",", "j1"}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}], "]"}], "===", 
     RowBox[{"Length", "[", 
      RowBox[{"Union", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], "]"}]}], ",", 
    RowBox[{"productIndex", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i1", ",", "j1"}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{"i2", ",", "j2"}], "]"}], ",", "GeometricProduct"}], "]"}], 
    ",", "0"}], "]"}]}]], "Input"],

Cell["\<\
The index set for inner product is NOT the same as for geometric product.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"productIndex", "[", 
   RowBox[{
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
    RowBox[{"mvDownUp", "[", 
     RowBox[{"i2_List", ",", "j2_List"}], "]"}], ",", "InnerProduct"}], "]"}],
   ":=", 
  RowBox[{"mvDownUp", "[", 
   RowBox[{
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"i1", ",", "i2"}], "]"}], ",", 
    RowBox[{"mvSetSymmetricDifference", "[", 
     RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Geometric product for base multivectors"
}], "Subsubsection"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text"],

Cell["\<\
Fourth argument ignoreMe is needed when calculating gaTensorProduct of same \
Clifford algebras. It adds unique identificator which prevents mixing of \
different algebras base elements. Note, that in the result we keep the mark \
ignoreMe. This has an application in realization of multiplication of \
quaternions, which we want to be different from Cl[0,2] algebra base \
elements. Memorization of base element multiplication in additive \
representation was removed, since now we have much faster Association \
representation  for which we keep memorization option. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ssd", "=", 
         RowBox[{"productIndex", "[", 
          RowBox[{"du1", ",", "du2", ",", "GeometricProduct"}], "]"}]}], 
        "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ssd", "===", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "GeometricProduct", ",", "al"}], 
            "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "GeometricProduct", ",", "al"}], 
            "]"}], ",", 
           RowBox[{"GeometricProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"ssd", ",", "al", ",", "ignoreMe"}], "]"}], ",", 
             "other2"}], "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Outer product for base multivectors"
}], "Subsubsection"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples,",
 ButtonBox[" [SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", 
        "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"duu", "=", 
         RowBox[{"productIndex", "[", 
          RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"duu", "===", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", "other2"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"productSignatureMap", "[", 
            RowBox[{"du1", ",", "du2", ",", "OuterProduct"}], "]"}], ",", 
           RowBox[{"OuterProduct", "[", 
            RowBox[{"other1", ",", 
             RowBox[{"bs", "[", 
              RowBox[{"duu", ",", "al"}], "]"}], ",", "other2"}], "]"}]}], 
          "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[""], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left and Right contract and InnerProduct for base multivectors"
}], "Subsubsection"],

Cell["LeftContract for two base elements", "Text"],

Cell["\<\
The definition assumes that we are dealing with Hestenes \
\[OpenCurlyDoubleQuote]mother algebra\[CloseCurlyDoubleQuote] (see C. Doran, \
D. Hestenes, F. Sommen and N. Van Acker, \[OpenCurlyDoubleQuote]Lie groups as \
spin groups\[CloseCurlyDoubleQuote], J. Math. Phys. 34 (8), 1993, pp \
3642-3669.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"LeftContract", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Union", "@@", "du1"}], ",", 
            RowBox[{"Union", "@@", "du2"}]}], "]"}], "]"}], "===", 
         RowBox[{"Length", "[", 
          RowBox[{"Union", "@@", "du1"}], "]"}]}], ",", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}], 
     " ", ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["RightContract for two base elements", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"RightContract", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"Union", "@@", "du1"}], ",", 
           RowBox[{"Union", "@@", "du2"}]}], "]"}], "]"}], "===", 
        RowBox[{"Length", "[", 
         RowBox[{"Union", "@@", "du2"}], "]"}]}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1", ",", "al"}], "]"}], ",", 
         RowBox[{"bs", "[", 
          RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}]}], 
   " ", "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Hestenes inner product for base elements", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<=", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du2", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"LeftContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", 
        RowBox[{"RightContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Expansions and conversions between different products"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivectors (orthonormal base) representation  in ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s Association form "
}], "Subsubsection"],

Cell["\<\
This section adds new internal representation of multivector (in orthonormal \
base) as an Association object (associative array) <| keys ->values|>. This \
representation is  preferable when taking grades and manipulating structure \
of multivector (taking components, etc...). Association representation is \
extremely convenient in expanding multivector products with \
PrecomputedPairProduct method. \
\>", "Text"],

Cell[TextData[{
 "Commands ",
 StyleBox["gaAssociationRepresentation[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaAdditiveRepresentation[ ]",
  FontWeight->"Bold"],
 " converts between additive and association representations (from \
mathematical point of view both of them are \[OpenCurlyDoubleQuote]additive\
\[CloseCurlyDoubleQuote] representations). Conversion from simple (natural) \
additive representation is more complicated (simpler solution get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " pattern macher mad with more complex input).  ",
 StyleBox["gaAdditiveRepresentation[ ]",
  FontWeight->"Bold"],
 " is simple. Associations only implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version 10 or higher. Only then we define  additional functions ",
 StyleBox["gaTogether[ ],",
  FontWeight->"Bold"],
 " ",
 StyleBox["gaAssociationRepresentatio[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["gaAdditiveRepresentation[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "define", " ", "two", " ", "replacement", " ", "rules", " ", "which", 
         " ", "should", " ", "suffice", " ", "to", " ", "put", " ", 
         "multivector", " ", "inside", " ", "single", " ", "association"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "for", " ", "complicated", " ", "expressions", " ", "pattern", " ", 
          "matcher", " ", "takes", " ", "too", " ", "long"}], ",", " ", 
         RowBox[{
         "therefore", " ", "we", " ", "explicitly", " ", "split", " ", "it", 
          " ", "into", " ", "simple", " ", "parts"}]}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"mvDownUpToAssociationRules", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"keyMV_mvDownUp", ",", "other__"}], "]"}], ":>", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"Association", "[", 
              RowBox[{"keyMV", "\[Rule]", "1"}], "]"}], ",", "other"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"rulesAssociationTogetherNotRepeatingMultScalar", "=", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"Times", "[", 
             RowBox[{"mult_", ",", 
              RowBox[{"bs", "[", 
               RowBox[{"arg_Association", ",", "other__"}], "]"}]}], "]"}], 
            "]"}], ":>", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{
              RowBox[{"arg", "*", "mult"}], ",", "other"}], "]"}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"mult", ",", "_bs"}], "]"}]}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "help", " ", "function", " ", "to", " ", "identify", " ", "a", " ", 
          "simple", " ", "part"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ClearAll", "[", "collectAndShrink", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SetAttributes", "[", 
         RowBox[{"collectAndShrink", ",", "HoldAllComplete"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"collectAndShrink", "[", "expr_", "]"}], ":=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"expr", "/.", "mvDownUpToAssociationRules"}], ")"}], "/.",
             "rulesAssociationTogetherNotRepeatingMultScalar"}], ")"}], "/;", 
          
          RowBox[{
           RowBox[{"Head", "[", "expr", "]"}], "=!=", "Plus"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "function", " ", "gaCollectAndReplaceStep", " ", "which", " ", 
          "deals", " ", "with", " ", "noncommutative", " ", "products"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ClearAll", "[", "gaCollectAndReplaceStep", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCollectAndReplaceStep", "[", "expr_Plus", "]"}], "]"}], ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"expr", ",", 
             RowBox[{"(", 
              RowBox[{
              "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct",
                "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}],
            ",", 
           RowBox[{"collectAndShrink", "[", "expr", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaCollectAndReplaceStep", "/@", 
            RowBox[{"Collect", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{
               "_GeometricProduct", ",", "_OuterProduct", ",", 
                "_InnerProduct", ",", "_LeftContract", ",", 
                "_RightContract"}], "}"}], ",", "collectAndShrink"}], 
             "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "we", " ", "have", " ", "to", " ", "block", " ", "products", " ", 
           "in", " ", "order", " ", "to", " ", "perform", " ", "explicit", 
           " ", "multiplication", " ", "by", " ", "scalar"}], ",", " ", 
          RowBox[{
          "otherwise", " ", "the", " ", "scalar", " ", "will", " ", "be", " ",
            "put", " ", "outside", " ", "by", " ", "implemented", " ", 
           "product", " ", 
           RowBox[{"rules", ".", " ", "Also"}], " ", "note", " ", "that", " ",
            "we", " ", "have", " ", "explicitly", " ", "have", " ", "too", 
           " ", "use", " ", "grouping", " ", "bracket", " ", "about", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"h", ":", 
              RowBox[{"(", ")"}]}], ")"}], "[", "]"}], " ", 
           RowBox[{"pattern", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCollectAndReplaceStep", "[", 
           RowBox[{"Times", "[", 
            RowBox[{"mult_", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"h", ":", 
                RowBox[{"(", 
                 RowBox[{
                 "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct",
                   "|", "LeftContract", "|", "RightContract"}], ")"}]}], 
               ")"}], "[", 
              RowBox[{"arg1___", ",", "arg2_Plus", ",", "arg3___"}], "]"}]}], 
            "]"}], "]"}], "]"}], ":=", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",",
              "LeftContract", ",", "RightContract"}], "}"}], ",", 
           RowBox[{
            RowBox[{"gaCollectAndReplaceStep", "[", 
             RowBox[{"h", "[", 
              RowBox[{"arg1", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mult", "*", "#"}], ")"}], "&"}], "/@", "arg2"}], 
               ",", "arg3"}], "]"}], "]"}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"mult", ",", "_bs"}], "]"}]}]}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaCollectAndReplaceStep", "[", 
          RowBox[{"h", ":", 
           RowBox[{"(", 
            RowBox[{
            "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
             "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}], ":=",
          "\[IndentingNewLine]", 
         RowBox[{"gaCollectAndReplaceStep", "/@", "h"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"restore", " ", "overdue"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "gaCollectAndReplaceStep", "[", "expr_collectAndShrink", "]"}], ":=",
          "expr"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCollectAndReplaceStep", "[", 
           RowBox[{"expr", ":", 
            RowBox[{"(", 
             RowBox[{"Times", "[", 
              RowBox[{"mult_.", ",", 
               RowBox[{"bs", "[", 
                RowBox[{"arg_mvDownUp", ",", "other__"}], "]"}]}], "]"}], 
             ")"}]}], "]"}], "]"}], ":=", 
         RowBox[{"collectAndShrink", "[", "expr", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaCollectAndReplaceStep", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "_bs"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"lastly", ",", " ", 
          RowBox[{
          "if", " ", "head", " ", "is", " ", "unknown", " ", "simply", " ", 
           "go", " ", "inside", " ", "and", " ", "wrap", " ", "the", " ", 
           "first", " ", "arg", " ", "only", " ", 
           RowBox[{"i", ".", "e", ".", " ", "for"}], " ", 
           RowBox[{"gaGradeNegate", "[", 
            RowBox[{"mv", ",", 
             RowBox[{"{", "x", "}"}]}], "]"}], " ", "syntax"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCollectAndReplaceStep", "[", 
           RowBox[{
            RowBox[{"(", "h_", ")"}], "[", 
            RowBox[{"mvArg_", ",", "otherArg___"}], "]"}], "]"}], "]"}], ":=",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"h", "[", 
           RowBox[{
            RowBox[{"gaCollectAndReplaceStep", "[", "mvArg", "]"}], ",", 
            "otherArg"}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "otherArg", "}"}], ",", "_bs"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "gaTogether", " ", "only", " ", "works", " ", "with", " ", "MV", " ",
           "in", " ", "Association", " ", "form"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"ClearAll", "[", "gaTogether", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTogether", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{"expr", ",", "_Association"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaTogether", "[", "expr_Plus", "]"}], "]"}], ":=", 
         RowBox[{
          RowBox[{"gaTogether", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Times", "[", 
                  RowBox[{
                   RowBox[{"bs", "[", 
                    RowBox[{"arg1_Association", ",", "other__"}], "]"}], ",", 
                   "any_"}], "]"}], ":>", 
                 RowBox[{
                  RowBox[{"bs", "[", 
                   RowBox[{
                    RowBox[{"any", "*", "arg1"}], ",", "other"}], "]"}], "/;", 
                  RowBox[{"FreeQ", "[", 
                   RowBox[{
                    RowBox[{"{", "any", "}"}], ",", "_bs"}], "]"}]}]}], 
                "}"}]}], ")"}], "&"}], "/@", "expr"}], "]"}], "/;", 
          RowBox[{"MatchQ", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"HoldPattern", "[", 
             RowBox[{"Plus", "[", 
              RowBox[{"___", ",", 
               RowBox[{"Times", "[", 
                RowBox[{"_", ",", "_bs"}], "]"}], ",", "___"}], "]"}], 
             "]"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaTogether", "[", 
           RowBox[{"Plus", "[", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{"arg1_Association", ",", "other__"}], "]"}], ",", 
             RowBox[{"bs", "[", 
              RowBox[{"arg2_Association", ",", "other__"}], "]"}], ",", 
             "any___"}], "]"}], "]"}], "]"}], ":=", 
         RowBox[{"gaTogether", "[", 
          RowBox[{"Plus", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{
              RowBox[{"Merge", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"arg1", ",", "arg2"}], "}"}], ",", "Total"}], "]"}], 
              ",", "other"}], "]"}], ",", "any"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaTogether", "[", 
           RowBox[{"Plus", "[", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{"arg1_Association", ",", "other__"}], "]"}], ",", 
             "any__"}], "]"}], "]"}], "]"}], ":=", 
         RowBox[{
          RowBox[{"gaTogether", "[", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"Merge", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"arg1", ",", 
                 RowBox[{"Association", "@@", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], "\[Rule]", 
                    RowBox[{"Plus", "[", "any", "]"}]}], "}"}]}]}], "}"}], 
               ",", "Total"}], "]"}], ",", "other"}], "]"}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "any", "}"}], ",", "_bs"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaTogether", "[", "expr_Times", "]"}], "]"}], ":=", 
         RowBox[{
          RowBox[{"gaTogether", "[", 
           RowBox[{"(", 
            RowBox[{"expr", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Times", "[", 
                RowBox[{
                 RowBox[{"bs", "[", 
                  RowBox[{"arg1_Association", ",", "other__"}], "]"}], ",", 
                 "any_"}], "]"}], ":>", 
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"any", "*", "arg1"}], ",", "other"}], "]"}], "/;", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{
                  RowBox[{"{", "any", "}"}], ",", "_bs"}], "]"}]}]}], "}"}]}],
             ")"}], "]"}], "/;", 
          RowBox[{"MatchQ", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"HoldPattern", "[", 
             RowBox[{"Times", "[", 
              RowBox[{"_", ",", "_bs"}], "]"}], "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTogether", "[", "expr_", "]"}], ":=", 
         RowBox[{"expr", "/;", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Plus", ",", "Times"}], "}"}], ",", 
              RowBox[{"Head", "[", "expr", "]"}]}], "]"}]}], "||", 
           RowBox[{"!", 
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"(", 
               RowBox[{
               "_GeometricProduct", "|", "_OuterProduct", "|", 
                "_InnerProduct", "|", "_LeftContract", "|", 
                "_RightContract"}], ")"}]}], "]"}]}]}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "once", " ", "we", " ", "identify", " ", "simple", " ", "parts"}], 
          ",", " ", 
          RowBox[{"replace", " ", "them", " ", "by", " ", "association"}]}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ClearAll", "[", "gaAssociationRepresentation", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"collectAndShrinkRules", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"collectAndShrink", "[", "arg_Plus", "]"}], "]"}], 
           "\[RuleDelayed]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", 
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"arg", "+", "Nothing"}], ",", "_bs", ",", 
                    "singlet"}], "]"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"Nothing", "\[Rule]", "0"}], "}"}]}], 
                    "\[IndentingNewLine]", ")"}], "/.", 
                   "mvDownUpToAssociationRules"}], "\[IndentingNewLine]", 
                  ")"}], "/.", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"HoldPattern", "[", 
                    RowBox[{"Times", "[", 
                    RowBox[{"mult_singlet", ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"argg_Association", ",", "other__"}], "]"}]}], 
                    "]"}], "]"}], ":>", 
                   RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"argg", "*", 
                    RowBox[{"(", 
                    RowBox[{"mult", "/.", 
                    RowBox[{"singlet", "\[Rule]", "Identity"}]}], ")"}]}], 
                    ",", "other"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
                ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"singlet", "[", "argsing_", "]"}], ":>", 
                 RowBox[{"bs", "[", 
                  RowBox[{
                   RowBox[{"Association", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], "\[Rule]", "argsing"}], 
                    "}"}]}], ",", "\"\<ReplaceMe\>\""}], "]"}]}], "}"}]}], 
              "\[IndentingNewLine]", ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"x_List", "\[RuleDelayed]", 
               RowBox[{"With", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"bsrem", "=", 
                   RowBox[{"Rest", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"x", ",", "_bs", ",", "Infinity"}], "]"}], ",", 
                    RowBox[{"bs", "[", 
                    RowBox[{"_", ",", "\"\<ReplaceMe\>\""}], "]"}]}], "]"}], 
                    "]"}], "]"}]}], "}"}], ",", 
                 RowBox[{"Prepend", "[", 
                  RowBox[{"bsrem", ",", 
                   RowBox[{"Merge", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "x"}], ",", "Total"}], "]"}]}], 
                  "]"}]}], "]"}]}], "}"}]}], ")"}]}], "\[IndentingNewLine]", 
          "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationRepresentation", "[", "expr_", "]"}], ":=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaCollectAndReplaceStep", "[", "expr", "]"}], "/.", 
           "collectAndShrinkRules"}], ")"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "functions", " ", "to", " ", "clean", " ", "and", " ", "put", " ", 
          "MV", " ", "in", " ", "Association", " ", "form", " ", "together"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaAssociationRepresentationClean", "[", "expr_", "]"}], ":=", 
         RowBox[{"(", 
          RowBox[{"expr", "/.", 
           RowBox[{"{", 
            RowBox[{"as_Association", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"Association", "@", 
               RowBox[{"(", 
                RowBox[{"KeyValueMap", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#2", "===", "0"}], ",", "Nothing", ",", 
                    RowBox[{"#1", "\[Rule]", "#2"}]}], "]"}], "&"}], ",", 
                  "as"}], "]"}], ")"}]}], "/;", 
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"Values", "[", "as", "]"}], ",", "0"}], "]"}]}]}], 
            "}"}]}], ")"}]}], ";"}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaAdditiveRepresentation[ ]",
  FontWeight->"Bold"],
 " is simple."
}], "Text"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"gaValidVersionQ", "[", 
    RowBox[{
    "10.0", ",", 
     "\"\<Multivector representation as Mathematica Association object\>\""}],
     "]"}], ",", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"bs", "=", 
        RowBox[{
        "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaAdditiveRepresentation", "[", "expr_", "]"}], ":=", 
       RowBox[{"expr", "/.", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"arg_Association", ",", "other__"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{"Times", "@@", 
            RowBox[{"(", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{"x", ",", 
                   RowBox[{"bs", "[", 
                    RowBox[{"x", ",", "other"}], "]"}]}], "]"}], "/@", "#"}], 
                "&"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], "&"}], 
                "[", 
                RowBox[{"Normal", "[", "arg", "]"}], "]"}], ",", "1"}], "]"}],
              ")"}]}], ")"}]}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}],
   "\[IndentingNewLine]", "]"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple expansions for  given in internal \
\[OpenCurlyDoubleQuote]AssociationRepresentation\[CloseCurlyDoubleQuote] \
form"
}], "Subsubsection"],

Cell["\<\
The expansion of product (geometric and outer) of MV  given in Association \
form is the much faster that expansion of MV given in \
\[OpenCurlyDoubleQuote]AdditiveRepresentation\[CloseCurlyDoubleQuote] form. \
The Method->\[CloseCurlyDoubleQuote]PrecomputedPairProduct\
\[CloseCurlyDoubleQuote], which is optimized  for MV given in \
\[OpenCurlyDoubleQuote]AdditiveRepresentation\[CloseCurlyDoubleQuote] form is \
about 50% slower and the usual \
Method->\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote] \
is about 20 times(!) slower (for symbolic input). This subsection deals only  \
with expansion of  \[OpenCurlyDoubleQuote]AdditiveRepresentation\
\[CloseCurlyDoubleQuote] form\
\>", "Text"],

Cell["\<\
Only GeometricProduct and OuterProduct currently are implemented in \
Association representation. There is a little room to speed up an expansion \
in association using memorization (not implemented).\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"h", ":", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
            "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|",
              "LeftContract", "|", "RightContract"}], ")"}], "[", 
           RowBox[{
            RowBox[{"argg1", ":", 
             RowBox[{"(", 
              RowBox[{"bs", "[", 
               RowBox[{"as1_Association", ",", "al_", ",", "any___"}], "]"}], 
              ")"}]}], ",", 
            RowBox[{"argg2", ":", 
             RowBox[{"(", 
              RowBox[{"bs", "[", 
               RowBox[{"as2_Association", ",", "al_", ",", "any___"}], "]"}], 
              ")"}]}]}], "]"}]}], ",", "opts_List"}], "]"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sf", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"CoefficientFunction", "/.", "opts"}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaProductExpand", ",", "CoefficientFunction"}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Quiet", "/.", "opts"}], ")"}], "/.", 
              RowBox[{"Options", "[", "gaProductExpand", "]"}]}], ")"}], 
            "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<Expanding MV presented as an Association. Options \
Method, OmitGrades will be ignored \>\"", "]"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\< The expanded pair is\>\"", "]"}]}],
                     "}"}], "]"}], ",", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{"ExpressionCell", "[", "h", "]"}], "}"}], "]"}]}],
                  "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Geometric", " ", "product", " ", "expansion", " ", "realization"}],
           " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "Identity", "}"}], ",", "sf"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "Realization", " ", "with", " ", "ListConvolve", " ", "is", " ", 
              "faster", " ", "than", " ", "with", " ", "Outer"}], ",", " ", 
             RowBox[{"thanks", " ", "to", " ", 
              RowBox[{
               RowBox[{"Stackexchange", "!!"}], "!"}]}]}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"bs", "[", 
             RowBox[{
              RowBox[{"Merge", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", 
                   RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], ",", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}], ",", "al"}], "]"}], ",", 
                    
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}]}], "]"}], 
                    "&"}], ",", 
                    RowBox[{"Keys", "[", "as1", "]"}], ",", 
                    RowBox[{"Keys", "[", "as2", "]"}]}], "]"}], "]"}], ",", 
                  RowBox[{"Rule", "[", 
                   RowBox[{"_", ",", "0"}], "]"}]}], "]"}], ",", "Total"}], 
               "]"}], ",", "al", ",", "any"}], "]"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"Merge", "[", 
              RowBox[{
               RowBox[{"ListConvolve", "[", 
                RowBox[{
                 RowBox[{"Keys", "[", "as1", "]"}], ",", 
                 RowBox[{"Keys", "[", "as2", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", 
                   RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", 
                 RowBox[{
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"GeometricAlgebra`p`productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], ",", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GeometricAlgebra`p`productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}], ",", "al"}], "]"}], ",", 
                    
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}]}], "]"}], 
                  "&"}], ",", 
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"List", "[", "##", "]"}], ",", "0"}], "]"}], 
                  "&"}]}], "]"}], ",", "Total"}], "]"}], ",", "al", ",", 
             "any"}], "]"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "if", " ", "some", " ", "nontrivial", " ", "CoefficientFunction",
               " ", "is", " ", "defined"}], ",", " ", 
             RowBox[{
             "we", " ", "apply", " ", "it", " ", "in", " ", "the", " ", 
              "last", " ", "step"}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"bs", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaAssociationRepresentationClean", "[", 
               RowBox[{"Association", "@", 
                RowBox[{"(", 
                 RowBox[{"KeyValueMap", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"sf", "[", "#2", "]"}]}], "]"}], "&"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Merge", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], ",", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}], ",", "al"}], "]"}], ",", 
                    
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}]}], "]"}], 
                    "&"}], ",", 
                    RowBox[{"Keys", "[", "as1", "]"}], ",", 
                    RowBox[{"Keys", "[", "as2", "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"_", ",", "0"}], "]"}]}], "]"}], ",", "Total"}], 
                    "]"}]}], "]"}], ")"}]}], "]"}], ",", "al", ",", "any"}], 
             "]"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"bs", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "GeometricAlgebra`p`gaAssociationRepresentationClean", "[", 
              RowBox[{"Association", "@", 
               RowBox[{"(", 
                RowBox[{"KeyValueMap", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Rule", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"sf", "[", "#2", "]"}]}], "]"}], "&"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Merge", "[", 
                   RowBox[{
                    RowBox[{"ListConvolve", "[", 
                    RowBox[{
                    RowBox[{"Keys", "[", "as1", "]"}], ",", 
                    RowBox[{"Keys", "[", "as2", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"GeometricAlgebra`p`productIndex", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], ",", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GeometricAlgebra`p`productSignatureMap", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"Head", "[", "h", "]"}], ",", "al"}], "]"}], ",", 
                    
                    RowBox[{"as1", "[", "#1", "]"}], ",", 
                    RowBox[{"as2", "[", "#2", "]"}]}], "}"}]}]}], "]"}], 
                    "&"}], ",", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"List", "[", "##", "]"}], ",", "0"}], "]"}], 
                    "&"}]}], "]"}], ",", "Total"}], "]"}]}], "]"}], ")"}]}], 
              "]"}], ",", "al", ",", "any"}], "]"}]}], "\[IndentingNewLine]", 
          "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaProductPairExpand", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"as1_Association", ",", "other___"}], "]"}], ",", 
         "opts_List"}], "]"}], "]"}], ":=", 
      RowBox[{"bs", "[", 
       RowBox[{"as1", ",", "other"}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
The pair expansion must contain only two MV in Association form. Below we try \
to put expression in that form.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair",
       " ", "expansion", " ", "work"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaProductPairExpand", "[", 
      RowBox[{
       RowBox[{"h", ":", 
        RowBox[{"(", 
         RowBox[{
         "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", "|",
           "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
       "opts_List"}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sf", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"CoefficientFunction", "/.", "opts"}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaProductExpand", ",", "CoefficientFunction"}], 
              "]"}]}], ")"}]}], ",", 
          RowBox[{"maxIter", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MaxIterations", "/.", "opts"}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaProductExpand", ",", "MaxIterations"}], "]"}]}], 
            ")"}]}], ",", 
          RowBox[{"quiet", "=", 
           RowBox[{"Not", "[", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Quiet", "/.", "opts"}], ")"}], "/.", 
              RowBox[{"Options", "[", "gaProductExpand", "]"}]}], ")"}], 
            "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"quiet", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"CellPrint", "[", 
             RowBox[{"{", 
              RowBox[{"TextCell", "[", 
               RowBox[{"Column", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "TextCell", "[", 
                    "\"\<Expansion of the pair of multivectors in Association \
form:\>\"", "]"}], "}"}], "]"}], ",", 
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{"ExpressionCell", "[", "h", "]"}], "}"}], "]"}]}],
                  "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"FixedPoint", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaProductPairExpand", "[", 
                  RowBox[{
                   RowBox[{"argh_", "[", 
                    RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], ",", 
                   "opts"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{"RuleCondition", "[", 
                  RowBox[{
                   RowBox[{"Distribute", "[", 
                    RowBox[{
                    RowBox[{"argh", "[", 
                    RowBox[{"arg1", ",", "arg2"}], "]"}], ",", "Plus", ",", 
                    "argh", ",", 
                    RowBox[{
                    RowBox[{"gaTogether", "[", 
                    RowBox[{"Plus", "[", "##", "]"}], "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"argh", "[", "##", "]"}], ",", "opts"}], "]"}], 
                    "&"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"gaProductPairExpand", "[", 
                  RowBox[{
                   RowBox[{"argh_", "[", 
                    RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], ",", 
                   "opts"}], "]"}], "\[RuleDelayed]", 
                 RowBox[{"RuleCondition", "[", 
                  RowBox[{
                   RowBox[{"Distribute", "[", 
                    RowBox[{
                    RowBox[{"argh", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "Plus", ",", 
                    "argh", ",", 
                    RowBox[{
                    RowBox[{"gaTogether", "[", 
                    RowBox[{"Plus", "[", "##", "]"}], "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{
                    RowBox[{"argh", "[", "##", "]"}], ",", "opts"}], "]"}], 
                    "&"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], 
               "}"}]}], ")"}], "&"}], ",", "h", ",", "maxIter"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"h", ",", "_mvDownUp"}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple expansions for MV given in standard \
\[OpenCurlyDoubleQuote]AdditiveRepresentation\[CloseCurlyDoubleQuote] form"
}], "Subsubsection"],

Cell["Test and development functions (inactivated) ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"onlyPairsQ", "[", "h_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"{", "h", "}"}], ",", 
       RowBox[{
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{
          RowBox[{"arg", ":", 
           RowBox[{"(", 
            RowBox[{
            "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
             "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
          RowBox[{"___", "?", "OptionQ"}]}], "]"}], "/;", 
        RowBox[{
         RowBox[{"Length", "[", "arg", "]"}], ">", "2"}]}], ",", "Infinity"}],
       "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "True", ",", "False"}], "]"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.686903559471763*^9, 3.686903698078131*^9}, {
  3.68690376025672*^9, 3.686903761377652*^9}, {3.686903801684821*^9, 
  3.686903835719135*^9}, {3.68690411435683*^9, 3.686904164088629*^9}, {
  3.686904370293089*^9, 3.686904406371628*^9}, {3.686904447694869*^9, 
  3.686904451786405*^9}}],

Cell["\<\
Help functions. collectQ[ ] check if we need collect terms before expansion. \
If so, collectOnDemand[ ] do this. Collected parts are wrapped by head \
singleton[ ]. If product is not yet fully expanded (i.e. still contains some \
product operations inside) then do not attempt to collect coefficients (this \
is ensured by \
/;FreeQ[{expr},GeometricProduct|OuterProduct|InnerProduct|LeftContract|\
RightContract,Heads->True]; condition)\
\>", "Text"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"collectQ", "[", "expr_Plus", "]"}], ":=", 
     RowBox[{
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", "all", "}"}], ",", 
        RowBox[{
         RowBox[{"all", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], 
           "]"}]}], ";", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"all", "=!=", 
             RowBox[{"Union", "[", "all", "]"}]}], ",", 
            RowBox[{"Throw", "[", "True", "]"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "if", " ", "base", " ", "vectors", " ", "do", " ", "not", " ", 
               "repeat"}], ",", " ", 
              RowBox[{"then", " ", "test", " ", "scalar", " ", "form"}]}], 
             " ", "*)"}], " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"AtomQ", "[", 
                RowBox[{
                 RowBox[{"(", "expr", ")"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                   RowBox[{"_singleton", "\[Rule]", "1"}]}], "}"}]}], "]"}], 
               ",", 
               RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
             RowBox[{"(*", 
              RowBox[{"short", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#", "]"}], "<", "2"}], "&"}], 
                    ")"}]}]}], "]"}], "=!=", 
                  RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"Throw", "[", "True", "]"}]}], "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "expr"}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"_bs", "\[Rule]", "1"}], ",", 
                  RowBox[{"singleton", "\[Rule]", "1"}]}], "}"}]}], ")"}]}], 
             ";", 
             RowBox[{"(*", " ", 
              RowBox[{"long", " ", "test"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Throw", "[", "False", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "expr", "}"}], ",", 
        RowBox[{
        "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
         "LeftContract", "|", "RightContract"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"collectQ", "[", "expr_", "]"}], ":=", "False"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"collectOnDemand", "[", "expr_", "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"collectQ", "[", "expr", "]"}], ",", 
       RowBox[{"Collect", "[", 
        RowBox[{"expr", ",", "_bs", ",", "singleton"}], "]"}], ",", "expr"}], 
      "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell["\<\
Head \[OpenCurlyDoubleQuote]singleton\[CloseCurlyDoubleQuote] serves for \
holding expressions in order to reduce the number of expansion operations. \
For example, assume, that you need to geometrically multiply a+b+e[1] by \
c+d+e[2]. If we would wrap scalars by single head, say, sigleton[a+b]+e[1] \
and singleton[c+d]+e[2], then number of expensive geometric multiplications \
is significanlly reduced. This is especially important when coefficients \
contains many terms.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"singleton", ",", "HoldAll"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Integer", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Real", "]"}], "=", "n"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"singleton", "[", "n_Complex", "]"}], "=", "n"}], ";"}]}], "Input"],

Cell["\<\
The actual expansion is performed by gaProductPairExpand[ ], which currently \
has two implemented methods, Method-> \
\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote], and \
Method->\[CloseCurlyDoubleQuote]PrecomputedPairProduct\[CloseCurlyDoubleQuote]\
. The second uses the first one to compute expanded symbolic expression and \
then just substitutes the particular coefficients  into it. This yields \
significant speedup for multivectors which has large number of base elements. \
The function gaDefineExpandedPairProduct[thealgebra, theproduct ] calculates \
the noted symbolic expansion for given algebra and operation. If multivector \
is given in internal Association form, then precalculated expanded product \
yield no performance increase when compared with true expansion. Therefore we \
use this approach only to MV in \[OpenCurlyDoubleQuote]AdditiveRepresentation\
\[CloseCurlyDoubleQuote] form.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineExpandedPairProduct", "[", 
    RowBox[{"alg_Cl", ",", "\"\<AdditiveRepresentation\>\"", ",", 
     RowBox[{"h", ":", 
      RowBox[{"(", 
       RowBox[{
       "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
        "LeftContract", "|", "RightContract"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"c1Name", "=", "\[FormalA]"}], ",", 
        RowBox[{"c2Name", "=", "\[FormalB]"}], ",", "c1", ",", "c2", ",", 
        "c3", ",", 
        RowBox[{"vsdim", "=", 
         RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], ",", 
        "allGrades", ",", "indexRange", ",", "precomputedProductComponents"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"c1", "=", 
        RowBox[{"gaGeneralMultivector", "[", 
         RowBox[{"c1Name", ",", "alg"}], "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"c2", "=", 
        RowBox[{"c1", "/.", 
         RowBox[{"{", 
          RowBox[{"c1Name", "\[Rule]", "c2Name"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"c3", "=", 
        RowBox[{"c1", "/.", 
         RowBox[{"{", 
          RowBox[{"c1Name", "\[Rule]", "\[FormalC]"}], "}"}]}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
        "using", " ", "precomputed", " ", "c3", " ", "we", " ", "can", " ", 
         "speedup", " ", 
         RowBox[{"gaProductPairExpand", "[", "]"}], " ", "command"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"indexRange", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{"2", "^", "vsdim"}], "-", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"allGrades", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{"vsdim", ",", "#"}], "]"}], "&"}], "/@", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "vsdim"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"precomputedProductComponents", "=", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{"gaProductPairExpand", "[", 
           RowBox[{
            RowBox[{"h", "[", 
             RowBox[{"c1", ",", "c2"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}], ",", 
              RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
              RowBox[{"MaxIterations", "\[Rule]", "Infinity"}]}], "}"}]}], 
           "]"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"InnerProduct", " ", "lacks", " ", "the", " ", "highest", " ", 
         RowBox[{"grade", ":", " ", 
          RowBox[{
          "this", " ", "is", " ", "the", " ", "consequece", " ", "of", " ", 
           "pecularity", " ", "of", " ", "multiplication", " ", "by", " ", 
           RowBox[{"scalar", "!"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"(*", " ", 
        RowBox[{
        "we", " ", "simply", " ", "append", " ", "0", " ", "as", " ", "a", 
         " ", "last", " ", "element", " ", "to", " ", "follow", " ", 
         "general", " ", "pattern"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gaPrecomputedPairProduct", "[", 
         RowBox[{"alg", ",", "\"\<AdditiveRepresentation\>\"", ",", "h"}], 
         "]"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"c1Name", "/@", "indexRange"}], ",", 
            RowBox[{"c2Name", "/@", "indexRange"}]}], "}"}], ",", "c3", ",", 
          RowBox[{"Internal`PartitionRagged", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"h", "===", "InnerProduct"}], ",", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"precomputedProductComponents", ",", "0"}], "}"}], 
               "]"}], ",", "precomputedProductComponents"}], "]"}], ",", 
            "allGrades"}], "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]", "]"}],
     "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaPrecomputedPairProduct", "[", 
       RowBox[{"alg", ",", "\"\<AdditiveRepresentation\>\"", ",", "h"}], 
       "]"}], "]"}], "===", "gaPrecomputedPairProduct"}]}]}], ";"}]], "Input"],

Cell["\<\
We only need to do this once. The symbolic computation is performed using \
Method->\[CloseCurlyDoubleQuote]RealTimePairProduct\[CloseCurlyDoubleQuote], \
defined below.\
\>", "Text"],

Cell[TextData[{
 "After distribution over sum we perform collection of terms. Note, that when \
expanding pair we modify singleton behaviour with \
CoefficientFunction->pureFunction, depending on our needs. Two most useful \
choices are   CoefficientFunction->Identity, and  CoefficientFunction->Expand \
(the default). The CoefficientFunction->Identity choice do not perform any \
operation on collected coefficients. This is usefull when dealing with \
numerical coefficients (except if numeric coefficients are expressions like \
Sqrt[2]+1/Sqrt[3], ... etc. When working with symbolic coefficients   \
CoefficientFunction->Expand is safe choice. Other possibilitieslike \
CoefficientFunction->Simplify[Together[#]]& are possible, thougth most \
probably will considerably slowdown computation. Option MaxIterations is only \
useful for testing purposse. It stops expansion after given number of \
operations. The default is MaxIteration -> Infinity, i.e. full expansion. May \
be it is worth to consider to use ",
 Cell[BoxData[
  RowBox[{"System`Private`SetNoEntry", "[", "]"}]], "Input"],
 " in order to make some functions Atomic-like (there is subtlety, however, \
that we have to apply this function to every instance of an created \
expression, which is probably is not what we want)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductPairExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"OmitGrades", "\[Rule]", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "Method"}], "=", 
   "\"\<Product pair expand method `1` is unknown. Possible option values are \
Method -> \\\"PrecomputedPairProduct\\\" or Method->\\\"RealTimePairProduct\\\
\".\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaProductPairExpand", "::", "MultipleAlgebras"}], "=", 
   "\"\<Product pair contains elements of different algebras `1`. The fast \
expansion Method->\\\"PrecomputedPairProduct\\\" will not work. Switching \
expansion method to \\\"RealTimePairProduct\\\". The option OmitGrades will \
be ignored.\>\""}], ";"}]}], "Input"],

Cell["\<\
The expansion of pair of product with complicated coefficients in front of \
base vectors\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "the", " ", "code", " ", "below", " ", "makes", " ", "true", " ", "pair",
       " ", "expansion", " ", "work"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"h", ":", 
         RowBox[{"(", 
          RowBox[{
          "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
           "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], ",", 
        "opts_List"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sf", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"CoefficientFunction", "/.", "opts"}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaProductExpand", ",", "CoefficientFunction"}], 
               "]"}]}], ")"}]}], ",", 
           RowBox[{"maxIter", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MaxIterations", "/.", "opts"}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaProductExpand", ",", "MaxIterations"}], "]"}]}], 
             ")"}]}], ",", 
           RowBox[{"quiet", "=", 
            RowBox[{"Not", "[", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Quiet", "/.", "opts"}], ")"}], "/.", 
               RowBox[{"Options", "[", "gaProductExpand", "]"}]}], ")"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"Expand", " ", "method", " ", "determinantion"}], ",", 
             " ", 
             RowBox[{"Automatic", " ", "was", " ", "suppressed"}], ",", " ", 
             RowBox[{
             "because", " ", "takes", " ", "considerable", " ", "time"}]}], 
            "*)"}], 
           RowBox[{"theMethod", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Method", "/.", "opts"}], ")"}], "/.", 
              RowBox[{"Options", "[", "gaProductExpand", "]"}]}], ")"}]}]}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Show", " ", "what", " ", "is", " ", "going"}], " ", "*)"}],
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"quiet", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Column", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "TextCell", "[", "\"\<Expansion method is\>\"", "]"}], 
                    ",", 
                    RowBox[{"ExpressionCell", "[", "theMethod", "]"}], ",", 
                    RowBox[{
                    "TextCell", "[", "\"\< The expanded pair is\>\"", "]"}]}],
                     "}"}], "]"}], ",", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"ExpressionCell", "[", "h", "]"}], "}"}], "]"}]}],
                   "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Geometric", " ", "product", " ", "expansion", " ", 
            "realisation"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"singleton", "[", "expr_", "]"}], ":=", 
           RowBox[{
            RowBox[{"singleton", "@@", 
             RowBox[{"{", 
              RowBox[{"sf", "[", 
               RowBox[{"(", 
                RowBox[{"expr", "/.", 
                 RowBox[{"{", 
                  RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                ")"}], "]"}], "}"}]}], "/;", 
            RowBox[{"!", 
             RowBox[{"FreeQ", "[", 
              RowBox[{"expr", ",", "_singleton"}], "]"}]}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theMethod", ",", "\"\<RealTimePairProduct\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"the", " ", "single", " ", "Distribute"}], ",", " ", 
              RowBox[{
               RowBox[{"i", ".", "e", ".", " ", 
                RowBox[{"collectOnDemand", "[", 
                 RowBox[{"Distribute", "[", "h", "]"}], "]"}]}], 
               "\[IndentingNewLine]", "fails", " ", "to", " ", "gaPE", " ", 
               "the", " ", "Cl", 
               RowBox[{"(", 
                RowBox[{"6", ",", "0"}], ")"}], " ", "expression", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<((a[0] p[0,2,1]+p[4,2,1] (a[47] \
\!\(\*TemplateBox[{TemplateBox[{\"1\", \"2\", \"5\", \"6\"}, \"mvDownUp\", \
DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 2, 5, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> None]},
\"\[DoubleStruckE]\",
DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& ),
InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),
SyntaxForm->\"fish\",
Tooltip->\"Cl[6, 0, 0]\"]\)+a[49] \!\(\*TemplateBox[{TemplateBox[{\"1\", \
\"3\", \"4\", \"6\"}, \"mvDownUp\", DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 3, 4, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> None]},
\"\[DoubleStruckE]\",
DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& ),
InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),
SyntaxForm->\"fish\",
Tooltip->\"Cl[6, 0, 0]\"]\)))\[GeometricProduct](a[0] p[0,1,1]+p[4,1,1] \
(a[47] \!\(\*TemplateBox[{TemplateBox[{\"1\", \"2\", \"5\", \"6\"}, \
\"mvDownUp\", DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 2, 5, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 2, 5, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> None]},
\"\[DoubleStruckE]\",
DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& ),
InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),
SyntaxForm->\"fish\",
Tooltip->\"Cl[6, 0, 0]\"]\)+a[49] \!\(\*TemplateBox[{TemplateBox[{\"1\", \
\"3\", \"4\", \"6\"}, \"mvDownUp\", DisplayFunction :> (StyleBox[
RowBox[{
AdjustmentBox[#, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#2, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#3, BoxBaselineShift -> 1], \",\", 
AdjustmentBox[#4, BoxBaselineShift -> 1]}], FontSize -> Small, FontTracking \
-> \"Condensed\", AutoSpacing -> False]& ), InterpretationFunction :> \
(ReleaseHold[
RowBox[{\"mvDownUp\", \"@@\", 
MakeExpression[{
Take[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]], 
Drop[{
SlotSequence[1]}, 
Length[{1, 3, 4, 6}]]}, StandardForm]}]]& ), SyntaxForm -> \"fish\", Tooltip \
-> \"mvDownUp[{1, 3, 4, 6}, {}]\"],TemplateBox[{\"6\", \"0\", \"0\"}, \"Cl\", \
DisplayFunction -> (SubscriptBox[
StyleBox[\"Cl\", {FontColor -> RGBColor[0., 0., 1.]}], 
RowBox[{#, \",\", #2}]]& ), Tooltip -> None]},
\"\[DoubleStruckE]\",
DisplayFunction:>(StyleBox[
RowBox[{
StyleBox[\"\[DoubleStruckE]\", FontColor -> RGBColor[0., 0., 1.]], #}], \
AutoSpacing -> False, FontTracking -> \"Condensed\"]& ),
InterpretationFunction:>(RowBox[{\"\[DoubleStruckE]\", \"[\", #, \",\", #2, \
\"]\"}]& ),
SyntaxForm->\"fish\",
Tooltip->\"Cl[6, 0, 0]\"]\)))\>\"", ".", "\[IndentingNewLine]", "It"}], " ", 
               "will", " ", "result", " ", "into", " ", "non", " ", 
               "Expanded", " ", "inner", " ", "product", " ", "inside", " ", 
               RowBox[{"times", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "The", " ", "solutions", " ", "would", " ", "be", " ", "apply", 
              " ", "distribution", " ", "repeatedly"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"FixedPoint", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#", "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg0___", ",", "arg1_Plus", ",", "arg2___"}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg0", ",", "arg1", ",", "arg2"}], "]"}], "]"}], 
                    "]"}], "/;", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}]}], "}"}]}], 
                 ")"}], "&"}], ",", "h"}], "]"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "we", " ", "want", " ", "evaluate", " ", "replacement"}], ",", 
              " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "therefore", " ", "we", " ", "have", " ", "to", " ", "use", "  ",
                  "Trott"}], "-", 
                RowBox[{"Strzebonski", " ", "in"}], "-", 
                RowBox[{"place", " ", "evaluation", " ", 
                 RowBox[{"technique", ":", " ", "n_Real"}]}]}], 
               "\[RuleDelayed]", 
               RowBox[{
                RowBox[{"With", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"eval", "=", 
                    RowBox[{"f", "[", "n", "]"}]}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"g", "[", "eval", "]"}], "/;", "True"}]}], "]"}], 
                " ", "or", " ", "better", " ", "undocumented", " ", 
                RowBox[{"RuleCondition", "[", "]"}], " ", "command"}]}]}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"FixedPoint", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "/.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg1_Plus", ",", "arg2___"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg1", ",", "arg2"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"argh_", "[", 
                    RowBox[{"arg0___", ",", "arg1_Plus"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"RuleCondition", "[", 
                    RowBox[{
                    RowBox[{"collectOnDemand", "[", 
                    RowBox[{"Distribute", "[", 
                    RowBox[{"argh", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"argh", "===", 
                    RowBox[{"Head", "[", "h", "]"}]}], ")"}]}], "]"}]}]}], 
                  "}"}]}], ")"}], "&"}], ",", "h", ",", "maxIter"}], "]"}], 
            ",", "\[IndentingNewLine]", "\"\<PrecomputedPairProduct\>\"", ",",
             "\[IndentingNewLine]", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"theAlgebra", "=", 
                 RowBox[{"whichAlgebra", "[", 
                  RowBox[{"h", ",", 
                   RowBox[{"Abort", "\[Rule]", "False"}]}], "]"}]}], ",", 
                RowBox[{"theOmitedGrades", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"OmitGrades", "/.", "opts"}], "/.", 
                    RowBox[{"Options", "[", 
                    RowBox[{"gaProductPairExpand", ",", "OmitGrades"}], 
                    "]"}]}], ")"}], "}"}], "]"}]}], ",", 
                "coefficientReplacementRules", ",", "theGradesToExtract", ",",
                 "formalMV"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"If", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",",
                 "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "realisation", " ", "of", " ", 
                  "PrecomputedPairProductExpansion", " ", "method"}], " ", 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"theGradesToExtract", "=", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
                    "]"}], ",", "theOmitedGrades"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Head", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<AdditiveRepresentation\>\"", ",", 
                    "h"}], "]"}], "]"}], "===", "gaPrecomputedPairProduct"}], 
                   ",", 
                   RowBox[{"gaDefineExpandedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<AdditiveRepresentation\>\"", ",", 
                    
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"formalMV", "=", 
                  RowBox[{
                   RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<AdditiveRepresentation\>\"", ",", 
                    
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{"coefficientReplacementRules", "=", 
                   RowBox[{"Dispatch", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Thread", "/@", 
                    RowBox[{"Rule", "@@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<AdditiveRepresentation\>\"", ",", 
                    
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", 
                    RowBox[{"Collect", "[", 
                    RowBox[{"#", ",", "_bs", ",", "singleton"}], "]"}]}], 
                    ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_\[FormalC]", "\[Rule]", "0"}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_bs", "\[Rule]", "1"}], "}"}]}], ")"}], "&"}], "/@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "h"}], ")"}], "+", 
                    RowBox[{"{", 
                    RowBox[{"formalMV", ",", "formalMV"}], "}"}]}], ")"}]}]}],
                     "}"}], "]"}]}]}], "]"}], "]"}]}], ")"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Plus", "@@", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"{", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Last", "[", 
                    RowBox[{"gaPrecomputedPairProduct", "[", 
                    RowBox[{
                    "theAlgebra", ",", "\"\<AdditiveRepresentation\>\"", ",", 
                    
                    RowBox[{"Head", "[", "h", "]"}]}], "]"}], "]"}], "/.", 
                    "coefficientReplacementRules"}], ")"}], ",", 
                    RowBox[{"List", "/@", 
                    RowBox[{"(", 
                    RowBox[{"theGradesToExtract", "+", "1"}], ")"}]}]}], 
                    "]"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "fall", " ", "back", " ", "to", " ", "RealTimePairProduct", 
                  " ", "method", " ", "if", " ", "base", " ", "elements", " ",
                   "of", " ", "few", " ", "different", " ", "algebras", " ", 
                  "present"}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaProductPairExpand", "::", "MultipleAlgebras"}], 
                   ",", "theAlgebra"}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"Print", "[", 
                  RowBox[{"Prepend", "[", 
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"opts", ",", 
                    RowBox[{"Method", "\[Rule]", "_"}]}], "]"}], ",", 
                    RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}],
                    "]"}], "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"gaProductPairExpand", "@@", 
                  RowBox[{"{", 
                   RowBox[{"h", ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"opts", ",", 
                    RowBox[{"Method", "\[Rule]", "_"}]}], "]"}], ",", 
                    RowBox[{"Method", "->", "\"\<RealTimePairProduct\>\""}]}],
                     "]"}]}], "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
             "]"}], ",", "\[IndentingNewLine]", "_", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaProductPairExpand", "::", "Method"}], ",", 
               "theMethod"}], "]"}], ";", "\[IndentingNewLine]", "h"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"h", ",", "_Association"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"help", " ", "functions"}], ",", " ", 
       RowBox[{"which", " ", "are", " ", "inavoidable"}], ",", " ", 
       RowBox[{
       "because", " ", "these", " ", "patterns", " ", "occur", " ", "in", " ",
         "evaluation", " ", "steps"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "these", " ", "rules", " ", "occur", " ", "less", " ", "often"}], ",", 
       " ", 
       RowBox[{
       "therefore", " ", "speed", " ", "is", " ", "enhanced", " ", "when", 
        " ", "they", " ", "put", " ", "in", " ", "the", " ", "end"}]}], 
      "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{"c_", ",", "opts_List"}], "]"}], ":=", 
      RowBox[{"c", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaProductPairExpand", "[", 
       RowBox[{
        RowBox[{"c_", "*", 
         RowBox[{"h", ":", 
          RowBox[{"(", 
           RowBox[{
           "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
            "|", "_LeftContract", "|", "_RightContract"}], ")"}]}]}], ",", 
        "op_List"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaProductPairExpand", "[", 
         RowBox[{"h", ",", "op"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
The main command is gaProductExpand[ ]. It do not expands anything. It only \
makes pairs of product for expansion and don\[CloseCurlyQuote]t touch pieces \
which should not be expanded. In the end it removes sigleton from the end \
rezult. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Except", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"CoefficientFunction", "\[Rule]", "Expand"}], ",", 
     RowBox[{"MaxIterations", "\[Rule]", "Infinity"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
     RowBox[{"Method", "\[Rule]", "\"\<RealTimePairProduct\>\""}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"gaProductExpand", ",", "Listable"}], "]"}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaProductExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"exceptHeads", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Except", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaProductExpand", ",", "Except"}], "]"}]}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"Except", ",", "_"}], "]"}]}], "]"}]}], ",", "trueHeads", 
       ",", "trueHeadsHeads", ",", "trueHeadsBlanks"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"trueHeads", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "GeometricProduct", ",", "OuterProduct", ",", "InnerProduct", ",", 
           "LeftContract", ",", "RightContract"}], "}"}], ",", 
         RowBox[{"Alternatives", "@@", "exceptHeads"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"trueHeadsHeads", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Length", "[", "trueHeads", "]"}], ",", "0", ",", 
         RowBox[{"{", "}"}], ",", "1", ",", 
         RowBox[{"trueHeads", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
         RowBox[{"Alternatives", "@@", "trueHeads"}]}], "]"}]}], ";", 
      RowBox[{"trueHeadsBlanks", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Length", "[", "trueHeadsHeads", "]"}], ",", "0", ",", 
         RowBox[{"{", "}"}], ",", "1", ",", 
         RowBox[{"Blank", "[", "trueHeadsHeads", "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
         RowBox[{"Blank", "/@", "trueHeadsHeads"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"We", " ", "list", " ", "with", " ", 
        RowBox[{"Cases", "[", " ", "]"}], " ", "all", " ", "patterns", " ", 
        "matched", " ", "and", " ", "then", " ", "do", " ", "step", " ", "by",
         " ", "step", " ", "all", " ", "replacements"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "For", " ", "products", " ", "with", " ", "multiple", " ", "terms"}], 
        ",", " ", 
        RowBox[{"which", " ", "require", " ", "expansion"}], ",", " ", 
        RowBox[{
        "split", " ", "into", " ", "product", " ", "of", " ", "pairs", " ", 
         "for", " ", "speed"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "gaTogehter", " ", "deals", " ", "with", " ", "multivectors", " ", 
        "in", " ", "Association", " ", "representation"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"gaTogether", "[", 
       RowBox[{
        RowBox[{"ReleaseHold", "@@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Fold", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ReplaceAll", "[", 
                RowBox[{"#1", ",", 
                 RowBox[{"Take", "[", 
                  RowBox[{
                   RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"p", ":", "trueHeadsBlanks"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "p", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{"(", 
                    RowBox[{"gaProductPairExpand", "[", 
                    RowBox[{"p", ",", "restOpts"}], "]"}], ")"}]}], ")"}]}], 
                    ",", "Infinity"}], "]"}], "]"}], ",", 
                   RowBox[{"{", "#2", "}"}]}], "]"}]}], "]"}], "&"}], ",", 
              RowBox[{"Hold", "[", "expression", "]"}], ",", 
              RowBox[{"Range", "[", 
               RowBox[{"Length", "[", 
                RowBox[{"Union", "[", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{"Hold", "[", "expression", "]"}], ",", 
                   RowBox[{"p", ":", "trueHeadsBlanks"}], ",", "Infinity"}], 
                  "]"}], "]"}], "]"}], "]"}]}], "]"}], ")"}], "//.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"h", ":", "trueHeadsHeads"}], ")"}], "[", 
                RowBox[{"arg0_", ",", "arg1_", ",", "arg2__"}], "]"}], ",", 
               "restOpts___"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{
               RowBox[{"h", "[", 
                RowBox[{
                 RowBox[{"gaProductPairExpand", "[", 
                  RowBox[{
                   RowBox[{"h", "[", 
                    RowBox[{"arg0", ",", "arg1"}], "]"}], ",", "restOpts"}], 
                  "]"}], ",", "arg2"}], "]"}], ",", "restOpts"}], "]"}]}], 
            "}"}]}], "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"FreeQ", "[", 
    RowBox[{
     RowBox[{"{", "expression", "}"}], ",", "_gaProductExpand"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaPE", "=", "gaProductExpand"}], ";"}]}], "Input"],

Cell["\<\
In some rare cases we have to apply both Expand and gaProductExpand \
repeatidly until expression gets expanded. For this rare cases we can apply \
gaExpand[], which do full expansion of all products \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaExpand", "[", 
    RowBox[{"expression_Plus", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaExpand", "[", 
      RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expression"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaExpand", "[", 
   RowBox[{"expression_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"FixedPoint", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Expand", "[", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "]"}], "&"}], ",", "expression"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "expression", "]"}], "=!=", "Plus"}]}]}]], "Input"],

Cell["\<\
In order to fast test if expression is expanded or not we try to replace \
heads of functions (Sin, Exp, ... ) with unique noncommutative entity. Then \
search for Plus inside operators head. Not ideal solution, but much faster \
than expansion itself. \
\>", "Text",
 CellChangeTimes->{{3.745656068936174*^9, 3.745656135650679*^9}, {
  3.745656165707918*^9, 3.745656278682663*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"removeFunctionRules", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", ":", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Sqrt", ",", "Power", ",", "Exp", ",", "Sin", ",", "Cos", ",", 
               "Tan", ",", "Cot", ",", "Csc", ",", "Sec"}], "}"}], ",", "#"}],
             "]"}], "&"}], ")"}]}]}], ")"}], "[", "___", "]"}], 
     "\[RuleDelayed]", 
     RowBox[{"MV", "[", 
      RowBox[{"Unique", "[", "rem", "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExpandedQ", "[", "expr_", "]"}], ":=", 
  RowBox[{"If", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"expr", "/.", "removeFunctionRules"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "Times", "|", "GeometricProduct", "|", "OuterProduct", "|", 
         "InnerProduct", "|", "LeftContract", "|", "RightContract"}], ")"}], 
       "[", 
       RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "===", "expr"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Simple powers"
}], "Subsubsection"],

Cell[TextData[{
 "Powers of geometric product. Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaGPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", "expr", ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaGPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaGPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaGeometricMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaGPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Powers of outer product, Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". It is posible to calculate expansion of outer products of vectors (ONLY) \
using determinants, i.e. without expanding sum of orthogonal vectors. So, \
this is applied to powers as well. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaOPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"OuterProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", 
       RowBox[{"gaProductExpand", "[", "expr", "]"}], ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"OuterProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaOPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"OuterProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaOPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaOuterMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaOuterMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaOPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaOuterMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector construction"
}], "Subsubsection"],

Cell["\<\
For experimentation we often need to generate general multivector with \
specified grades. Here it is function for this. The gaGeneralMultivector[] \
always uses Format which was used by last gaDefineOrthonormalBasis[ ] command.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGeneralMultivector", "[", 
       RowBox[{"coefName_", ",", "al_Cl", ",", 
        RowBox[{"grade_:", 
         RowBox[{"{", "}"}]}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "theMVRepresentation", "}"}], ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "]"}], "===", 
            "gaOrthonormalBasis"}], ",", 
           RowBox[{"gaDefineOrthonormalBasis", "[", "al", "]"}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "For", " ", "general", " ", "multivector", " ", "use", " ", 
           "internal", " ", "form", " ", "of", " ", "last", " ", "generated", 
           " ", "base"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
             "_Association"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
           "theMVRepresentation", "=", "\"\<AdditiveRepresentation\>\""}], 
           ",", 
           RowBox[{
           "theMVRepresentation", "=", 
            "\"\<AssociationRepresentation\>\""}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"unoptimized", " ", 
           RowBox[{"part", ":", " ", 
            RowBox[{
            "in", " ", "AssociationRepresentation", " ", "we", " ", "can", 
             " ", "do", " ", "much", " ", "better"}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theMVRepresentation", ",", "\[IndentingNewLine]", 
           "\"\<AdditiveRepresentation\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grade", "===", 
                RowBox[{"{", "}"}]}], ")"}], "||", 
              RowBox[{"grade", "===", "All"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"coefName", "[", "i", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "0", ",", 
                  RowBox[{
                   RowBox[{"Length", "[", 
                    RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "]"}], 
                   "-", "1"}]}], "}"}]}], "]"}], ".", 
              RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"coefName", "[", "i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], "+", 
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "#"}], "]"}], "-", "1"}]}], "}"}]}], "]"}], ".", 
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], "&"}], "/@", 
                "grade"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
           "\"\<AssociationRepresentation\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grade", "===", 
                RowBox[{"{", "}"}]}], ")"}], "||", 
              RowBox[{"grade", "===", "All"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"AssociationThread", "[", 
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Keys", "[", 
                   RowBox[{"First", "/@", 
                    RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "]"}], 
                  "]"}], ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"coefName", "[", "i", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "]"}], 
                    "-", "1"}]}], "}"}]}], "]"}]}], "]"}], ",", "al"}], "]"}],
              ",", "\[IndentingNewLine]", 
             RowBox[{"gaTogether", "[", 
              RowBox[{"Plus", "@@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"coefName", "[", "i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "k"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "0", ",", 
                    RowBox[{"#", "-", "1"}]}], "}"}]}], "]"}], "+", 
                    RowBox[{"Binomial", "[", 
                    RowBox[{
                    RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], ",", 
                    "#"}], "]"}], "-", "1"}]}], "}"}]}], "]"}], ".", 
                   RowBox[{"gaOrthonormalBasis", "[", 
                    RowBox[{"al", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], "&"}], "/@", 
                 "grade"}], ")"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
          "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Groebner Basis (only sorting is implemented at the moment)"
}], "Section"],

Cell[" Just beginning", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaDefineAssociationRepresentationKeyOrder", ",", "gaSort", ",", 
     "gbLeadingTerm", ",", "gbLeadingMonomial", ",", "gbLeadingCoefficient"}],
     "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineAssociationRepresentationKeyOrder", "::", "usage"}], "=", 
   "\"\<gaDefineAssociationRepresentationKeyOrder[al_,order:(\\\"Lex\\\"|\\\"\
InvLex\\\"|\\\"RevLex\\\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\
\"|\\\"Deg[RevLex]\\\"|\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[\
InvLex]\\\"|\\\"InvDeg[RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] defines \
sorting order for algebra if it was not yet defined. It is used by gaSort[ \
]\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSort", "::", "usage"}], "=", 
   "\"\<gaSort[theExprList_List,order:(\\\"Lex\\\"|\\\"InvLex\\\"|\\\"RevLex\\\
\"|\\\"InvRevLex\\\"|\\\"Deg[Lex]\\\"|\\\"Deg[InvLex]\\\"|\\\"Deg[RevLex]\\\"|\
\\\"Deg[InvRevLex]\\\"|\\\"InvDeg[Lex]\\\"|\\\"InvDeg[InvLex]\\\"|\\\"InvDeg[\
RevLex]\\\"|\\\"InvDeg[InvRevLex]\\\")] sorts list theExprList in given \
order. The sorting rules first are defined using \
gaDefineAssociationRepresentationKeyOrder[] inside gaSort[]. Do not yet work \
in full generality, because the order for commutative elements is not yet \
added. To do.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "::", "usage"}], "=", 
   "\"\<gbLeadingTerm[expr_,ordering_String] returns leading term of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "::", "usage"}], "=", 
   "\"\<gbLeadingMonomial[expr_,ordering_String] returns leading monomial of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "::", "usage"}], "=", 
   "\"\<gbLeadingCoefficient[expr_,ordering_String] returns leading \
coefficient of multivector polynomial written in orthonormal base. Defined \
orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". \
These pure orderings can be proceeded with \\\"Deg[]\\\", and \
\\\"InvDeg[]\\\" wrappers, i.e. \\\"Deg[InvLex]\\\", etc..., totally giving \
4*3 possible orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection"],

Cell["No", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Ordering and Sorting"
}], "Subsection"],

Cell[TextData[{
 "keyReplace taken from ",
 Cell[BoxData[""], "Input",
  CellChangeTimes->{{3.736649818411449*^9, 3.73664981883968*^9}}],
 "https://mathematica.stackexchange.com/questions/166471/rename-keys-in-\
nested-association, answered by ",
 "Sjoerd Smit."
}], "Text",
 CellChangeTimes->{{3.736649818411449*^9, 3.736649846515926*^9}, {
  3.736649910561497*^9, 3.736649918181639*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"keyReplaceAndSort", "[", 
    RowBox[{"assoc_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"Composition", "[", 
       RowBox[{"KeySort", ",", 
        RowBox[{"KeyMap", "[", 
         RowBox[{"Replace", "[", "rules", "]"}], "]"}]}], "]"}], ",", "assoc",
       ",", 
      RowBox[{"Position", "[", 
       RowBox[{"assoc", ",", 
        RowBox[{"_", "?", "AssociationQ"}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"assoc", ",", "_Association"}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"keyReplace", "[", 
    RowBox[{"assoc_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"KeyMap", "[", 
       RowBox[{"Replace", "[", "rules", "]"}], "]"}], ",", "assoc", ",", 
      RowBox[{"Position", "[", 
       RowBox[{"assoc", ",", 
        RowBox[{"_", "?", "AssociationQ"}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"assoc", ",", "_Association"}], "]"}]}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.736649546435519*^9, 3.736649546436513*^9}, {
  3.736649706334385*^9, 3.736649744193298*^9}, {3.736659088955563*^9, 
  3.73665911943681*^9}, {3.736659181181779*^9, 3.736659183116787*^9}, {
  3.73666105428356*^9, 3.736661057876383*^9}, {3.736661244362964*^9, 
  3.73666126346597*^9}, {3.736661373637104*^9, 3.73666139630081*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
     RowBox[{"al", ",", "order"}], "]"}], "=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "indexList", ",", "inDegLexOrder", ",", "indexListWithSortMark"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
             "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
             "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", 
           "order"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"indexList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"gaIndexSort", "[", 
              RowBox[{
               RowBox[{
               "GeometricAlgebra`p`mvInvDegLexSortedIndexList", "[", "al", 
                "]"}], ",", "order"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"indexList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"gaIndexSort", "[", 
              RowBox[{
               RowBox[{
               "GeometricAlgebra`p`mvInvDegLexSortedIndexList", "[", "al", 
                "]"}], ",", "order"}], "]"}], ",", 
             RowBox[{"{", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"indexList", ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"MapAt", "[", 
              RowBox[{"First", ",", "#", ",", "1"}], "]"}], "&"}], ",", 
            RowBox[{"Reverse", "/@", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{"List", ",", "indexList"}], "]"}]}]}], "]"}]}], "]"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.736578032858964*^9, 3.736578093165192*^9}, {
   3.73657813236112*^9, 3.736578141588785*^9}, {3.736578181078685*^9, 
   3.736578304095346*^9}, {3.736578376220726*^9, 3.73657848445019*^9}, {
   3.736578515700472*^9, 3.736578519991891*^9}, {3.736581419516146*^9, 
   3.736581514360458*^9}, {3.736582199189269*^9, 3.736582253788781*^9}, 
   3.736582323823689*^9, {3.736582415152158*^9, 3.73658243614185*^9}, {
   3.736582777283587*^9, 3.736582784129912*^9}, {3.736582819649029*^9, 
   3.736582825377137*^9}, {3.73658286830347*^9, 3.736582896243419*^9}, {
   3.736582947495114*^9, 3.736582955569153*^9}, {3.736583224579928*^9, 
   3.73658324243881*^9}, {3.736583284404842*^9, 3.736583372166132*^9}, {
   3.736583428752875*^9, 3.736583452933086*^9}, {3.73658351675343*^9, 
   3.736583600859455*^9}, {3.736583637844435*^9, 3.736583661368063*^9}, {
   3.736583764867183*^9, 3.736583884164771*^9}, {3.736583922691181*^9, 
   3.736584056527159*^9}, {3.736649107042933*^9, 3.736649184603053*^9}, {
   3.736649217624421*^9, 3.736649311653599*^9}, {3.73665036523865*^9, 
   3.736650438115671*^9}, {3.736661584282066*^9, 3.73666167262423*^9}, {
   3.738300326907704*^9, 3.738300340102084*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSort", "[", 
       RowBox[{"expr_List", ",", "_"}], "]"}], ":=", 
      RowBox[{"expr", "/;", 
       RowBox[{
        RowBox[{"Length", "[", "expr", "]"}], "\[LessEqual]", "1"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSort", "[", 
       RowBox[{"expr_List", ",", 
        RowBox[{"order", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
           "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
           "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
           "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
           "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
           "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}]}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"al", "=", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"expr", ",", "_Cl", ",", 
              RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ",", 
           "theOrderingRules", ",", "associationForm", ",", "scalars", ",", 
           "nonScalars", ",", "exprExpanded"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "at", " ", "the", " ", "moment", " ", "gaSort", " ", "cannot", " ",
             "sort", " ", "commutative", " ", "variable"}], ",", " ", 
           RowBox[{
           "we", " ", "do", " ", "nothing", " ", "in", " ", "this", " ", 
            "case"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"al", "===", 
            RowBox[{"{", "}"}]}], ",", "expr", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"theOrderingRules", "=", 
             RowBox[{"gaDefineAssociationRepresentationKeyOrder", "[", 
              RowBox[{"al", ",", "order"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AllTrue", "[", 
               RowBox[{"expr", ",", "gaExpandedQ"}], "]"}], ",", 
              RowBox[{"exprExpanded", "=", "expr"}], ",", 
              RowBox[{"exprExpanded", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
                "expr"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"associationForm", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                "GeometricAlgebra`p`gaAssociationRepresentationClean", "[", 
                 RowBox[{"gaAssociationRepresentation", "[", "#", "]"}], 
                 "]"}], "&"}], "/@", "exprExpanded"}], ")"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"nonScalars", "=", 
             RowBox[{"gaAdditiveRepresentation", "[", 
              RowBox[{"keyReplace", "[", 
               RowBox[{
                RowBox[{"Sort", "[", 
                 RowBox[{"keyReplaceAndSort", "[", 
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"associationForm", ",", "_bs"}], "]"}], ",", 
                   "theOrderingRules"}], "]"}], "]"}], ",", 
                RowBox[{"First", "/@", 
                 RowBox[{"PositionIndex", "[", "theOrderingRules", "]"}]}]}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"scalars", "=", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{"associationForm", ",", "_bs"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                  "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                  ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
                ",", "order"}], "]"}], ",", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"scalars", ",", "nonScalars"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"nonScalars", ",", "scalars"}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
         "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{
        RowBox[{"Length", "[", "expr", "]"}], ">", "1"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Leading term, leading monomial and leading coefficient"
}], "Subsection"],

Cell[TextData[{
 " Ordering functions (i.e. ",
 StyleBox["gaOrderedQ",
  FontWeight->"Bold"],
 "[ ], etc... )  are realised in section ",
 StyleBox["3. Objects: orthonormal base notation and definition.",
  FontSlant->"Italic"],
 " Defined noncommutative orderings are \\\[CloseCurlyDoubleQuote] Lex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote]. These pure orderings can be proceeded with \\\
\[CloseCurlyDoubleQuote] Deg[]\\\[CloseCurlyDoubleQuote], and \\\
\[CloseCurlyDoubleQuote] InvDeg[]\\\[CloseCurlyDoubleQuote] wrappers, totally \
giving 4*3 possible orderings. Orders \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote] and the default order \\\[CloseCurlyDoubleQuote] \
InvDeg[Lex]\\\[CloseCurlyDoubleQuote] are not addmissible and cannot be used \
as Groebner base monomial orders.  Commutative coefficients use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s orderings i.e. \\\[CloseCurlyDoubleQuote]Lexicographic \
\\\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] DegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
DegreeReverseLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeDegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
NegativeDegreeReverseLexicographic \\\[CloseCurlyDoubleQuote] and \\\
\[CloseCurlyDoubleQuote] Reverse[Lexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[DegreeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[DegreeReverseLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[NegativeDegreeLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeDegreeReverseLexicographic]\\\
\[CloseCurlyDoubleQuote]."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exprList", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"Plus", "[", 
          RowBox[{"expr", ",", "Nothing"}], "]"}]}], ")"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "exprList", "]"}], "===", "1"}], ",", "expr", 
       ",", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], ",", "#1", ",", "#2"}], "]"}], 
          "&"}], ",", "exprList"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gbLeadingMonomial", "[", 
       RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "bs"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"mvZeroGradeQ", "[", "gblt", "]"}], ",", "1", " ", ",", 
       RowBox[{"gbLeadingMonomial", "[", "gblt", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", 
        RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "c"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", "c_", "]"}], ":=", 
       RowBox[{"c", "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "baseSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"gbLeadingCoefficient", "[", "gblt", "]"}]}], "]"}]}], 
  ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". To continue"
}], "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Involutions and mathematical functions of multivectors"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaLinearQ", ",", "gaSetLinear", ",", "gaHomogeneusGradeQ", ",", 
     "gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate", ",", 
     "gaGradeNegate", ",", "gaComplexConjugate", ",", 
     "gaComplexCliffordConjugate", ",", "gaQuaternionicConjugate", ",", 
     "gaHermitianConjugate", ",", "gaHermitianQ", ",", "gaEliminateGrade", 
     ",", "SignChangeGrades", ",", "Evaluation", ",", "OutputType", ",", 
     "InvolutionPosition", ",", "gaGeometricProductSeries", ",", 
     "gaGeometricExp", ",", "gaExp", ",", "gaGeometricSin", ",", "gaSin", ",",
      "gaGeometricSinh", ",", "gaSinh", ",", "gaGeometricCos", ",", "gaCos", 
     ",", "gaGeometricCosh", ",", "gaCosh", ",", "gaGeometricTan", ",", 
     "gaTan", ",", "gaGeometricTanh", ",", "gaTanh", ",", "gaCommutator", ",",
      "gaAntiCommutator", ",", "gaCommutatorExpand", ",", "gaCE", ",", 
     "gaZassenhausCoefficient", ",", " ", "gaZassenhausSeries", ",", 
     "gaZassenhausSeriesData", ",", "gaSeries", ",", "gaSeriesData", ",", 
     "gaParameterSeries", ",", "gaBakerCampbellHausdorffSeries", ",", 
     "gaBCHSeries", ",", "gaBakerCampbellHausdorffTermLogarithm", ",", 
     "gaBakerCampbellHausdorffSeriesData"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["\<\
Unary operations on multivectors are gaReverse, gaMagnitude, gaInverse, \
gaGradeInverse, gaCliffordConjugate\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearQ", "::", "usage"}], "=", 
   "\"\<gaLinearQ[a] returns True if function is linear in multivector \
space\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetLinear", "::", "usage"}], "=", 
   "\"\<gaSetLinear[a,b,...] sets functions a,b,...  to be linear functions \
of multivectors.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "::", "usage"}], "=", 
   "\"\<gaHomogeneusGradeQ[expr] returns True if multivector has homogeneus \
grade.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "::", "usage"}], "=", 
   "\"\<gaReverse[A_r], where A_r is single multivector (or geometric product \
of multivectors) realize reverse operation A_r -> (-1)^(r (r-1))/2 A_r (for \
homogeneus multivector of rank r) of geometric algebra (main \
antiauthomorphism, see [KG-HFinP&Sp], p.56). Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "::", "usage"}], "=", 
   "\"\<gaGradeInverse[m] calculates the conjugate of a multivector \
m_r->(-1)^r m_r, see [DH-STA, formula 4.12]. Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaCliffordConjugate[m] is defined as a combination of gaReverse and \
gaGradeInverse operations, see [DH-STA, formula 6.10]. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeNegate", "::", "usage"}], "=", 
   "\"\<gaGradeNegate[m,grade_List] is a general involution, which only \
changes signs of grades listed in grade. If grade list is empty list, initial \
multivector is returned.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexConjugate", "::", "usage"}], "=", 
   "\"\<gaComplexConjugate[expr] replaces all imaginary numbers by complex \
conjugate numbers. All symbols are assumed to represent real \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaComplexCliffordConjugate[expr] is a shortcut for \
gaReverse[gaComplexConjugate[expr]]. Meaningful in  complex Clifford algebras \
only. Note, that in real algebras Clifford conjugation is a combination of \
grade inverse and reverse.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaQuaternionicConjugate", "::", "usage"}], "=", 
   "\"\<gaQuaternionicConjugate[expr]\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianConjugate", "::", "usage"}], "=", 
   "\"\<gaHermitianConjugate[expr] realises the definition of Hermitian \
conjugate for complex Clifford algebras.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianQ", "::", "usage"}], "=", 
   "\"\<gaHermitianQ[expr] returs True for Hermitian expression, false \
otherwise\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "usage"}], "=", 
   "\"\<gaEliminateGrade[multivector_,eliminateGrade_List,opts___?OptionQ] is \
a command, which multiplies the given general multivector by the same \
multivector acted by involution from the right in attempt to remove from the \
product grades listed in eliminateGrade list. Empty output means that given \
grades cannot be eliminated by mentioned procedure.\>\""}], ";", 
  RowBox[{
   RowBox[{"OutputType", "::", "usage"}], "=", 
   "\"\<OutputType is an option for gaEliminateGrade[], which change output \
presentation. Possible values are SignChangeGrades and Evaluation \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InvolutionPosition", "::", "usage"}], "=", 
   "\"\<InvolutionPosition is an option for gaEliminateGrade[], which decides \
from which side invuluted multivector is multiplied. Possible values are \
Right (default) and Left.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricProductSeries", "::", "usage"}], "=", 
    "\"\<gaGeometricProductSeries[f_functionHead,{m_multivector,{p_,n_Integer?\
Positive:10}}] calculates the series of the function f, of a multivector m at \
point p up to a power n. Option Expand->True can be used to expand series in \
time of generation. This is much faster than later expanding held \
series.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricProductSeries[ ]. Option Expand->True can be \
used to expand series in time of generation. This is much faster than later \
expanding held series.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricExp", "::", "usage"}], "=", 
   "\"\<gaGeometricExp[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaExp[m,n] calculates the series of the function Exp, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExp", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricExp[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSin", "::", "usage"}], "=", 
   "\"\<gaGeometricSin[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaSin[m,n] calculates the series of the function\nSin, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSin", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSin[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSinh", "::", "usage"}], "=", 
   "\"\<gaGeometricSinh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaSinh[m,n] calculates the series of the function\nSinh, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSinh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSinh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCos", "::", "usage"}], "=", 
   "\"\<gaGeometricCos[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaCos[m,n] calculates the series of the function\nCos, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCos", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCos[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCosh", "::", "usage"}], "=", 
   "\"\<gaGeometricCosh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaCosh[m,n] calculates the series of the function\nCosh, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCosh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCosh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTan", "::", "usage"}], "=", 
   "\"\<gaGeometricTan[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaTan[m,n] calculates the series of the function\ngaTan, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTan", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTan[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTanh", "::", "usage"}], "=", 
   "\"\<gaGeometricTanh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaTanh[m,n] calculates the series of the function\nTan, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTanh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTanh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutator", "::", "usage"}], "=", 
   "\"\<gaCommutator[a,b] defines notation fo quantity ab-ba\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAntiCommutator", "::", "usage"}], "=", 
   "\"\<gaAnticommutator[a,b] defines notation for quantity ab+ba\>\""}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutatorExpand", "::", "usage"}], "=", 
   "\"\<gaCommutatorExpand[a,b] (alias gaCE[ ]) expands to quantity ab-ba, \
Option Except->{gaAntiCommutator} prevents expansion of \
gaAntiCommutator.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "::", "usage"}], "=", "\"\<Short alias for gaCE[ ].\>\""}],
   ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "::", "usage"}], "=", 
   "\"\<gaZassenhausCoefficient[a_,b_][p_Integer] or \
gaZassenhausCoefficient[p_Integer] gives coefficients of Zassenhaus series.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeries", "::", "usage"}], "=", 
   "\"\<gaZassenhausSeries[Exp[aa_+bb_],n_Integer?(#\[GreaterEqual]2&),opts___\
] gives expansion of Zassenhaus series to n-th order. The result is presented \
as gaBakerCampbellHausdorffSeriesData, where each term represents homogenic \
polynomial. Option Format values \\\"Right\\\" or \\\"Left\\\" gives \
left-oriented, i.e.  exp[x+y]=...exp[c3[x,y]]exp[c2[x,y]]exp[y]exp[x] or \
right-oriented, i.e. exp[x+y]=exp[x]exp[y]exp[c2[x,y]]exp[c3[x,y]]... series \
form. Commutator in output of gaZassenhausSeriesData is defined as AB-BA, \
i.e. without overal factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaZassenhausSeries[ ] result. \
gaSeriesData[gaZassenhausSeriesData[ ]] converts the result to gaSeriesData[ \
]. Commutator in output is defined as AB-BA, i.e. without overal \
factor.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "::", "usage"}], "=", 
   "\"\<Represents transformation data of same infinitezimal size.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "::", "usage"}], "=", 
   "\"\<gaParameterSeries[a_gaSeriesData, var] Converts gaSeriesData like \
Normal, but adds infinitizimality parameter var.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffTermLogarithm[{exprs__String},n_Integer], \
gives n-th homogenic term of BCH series. Is used by \
gaBakerCampbellHausdorffSeries[ ] command.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries[GeometricProduct[expr__Exp],n_Integer?(\
#\[GreaterEqual]2&),opts___ ] gives expansion of BCH series to n-th order. \
The result is presented as gaBakerCampbellHausdorffSeriesData, where each \
term represents homogenic polynomial. Option Format values \
\\\"Commutators\\\" (not implemented yet), \\\"Expand\\\" or \\\"None\\\" \
rewrites the polynomials in required form.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBCHSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaBakerCampbellHausdorffSeries.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaBakerCampbellHausdorffSeries[ ] result. \
gaSeriesData[gaBakerCampbellHausdorffSeriesData[ ]] converts the result to \
gaSeriesData[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Unary operators"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell[TextData[{
 StyleBox["gaSetLinear[ ]",
  FontWeight->"Bold"],
 " implements linearity property for multivectors"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaLinearQ", "[", "___", "]"}], "=", "False"}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"x", "[", 
              RowBox[{"0", ",", 
               RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"x", "[", 
              RowBox[{"y_Plus", ",", 
               RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{"z", ",", 
                RowBox[{"x", "[", 
                 RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", 
                RowBox[{"c_", ",", "d__"}], "]"}], ",", 
               RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{
                RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
             
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"x", "[", 
              RowBox[{"expr_", ",", 
               RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
            RowBox[{"expr", "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}], 
         "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaHomogeneusGradeQ[ ] ",
  FontWeight->"Bold"],
 "checks if expression has homogeneus grade. The ",
 StyleBox["c_.*bs[__]",
  FontWeight->"Bold"],
 " pattern only makes sense for functions, which are not mvLinear. This is ",
 StyleBox["gaHomogeneusGradeQ[ ],  gaNorm[ ],  gaMagnitude[ ],  gaInverse[ ]",
  
  FontWeight->"Bold"],
 ",... For gaLinear functions this pattern is optional."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHomogeneusGradeQ", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"bs", "[", "__", "]"}]}], "]"}], "=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "s_Symbol", "]"}], "=", "True"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaHomogeneusGradeQ", "[", 
     RowBox[{"c_", "?", "NumericQ"}], "]"}], "=", "True"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "fast", " ", "decision", " ", "is", " ", "impossible", " ", 
    "call", " ", 
    RowBox[{"gaGetGrade", "[", " ", "]"}]}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "f_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{
     RowBox[{"gaGetGrade", "[", "f", "]"}], ",", 
     RowBox[{"{", "_Integer", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Involutions and conjugations"
}], "Subsubsection"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["gaGradeNegate[ ] ",
  FontWeight->"Bold"],
 "involution (most general one)"
}], "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[{
 " At first we define ",
 StyleBox["gaGradeNegate[ ]",
  FontWeight->"Bold"],
 " involution, which changes signs of specified grades only. Then the \
standard Clifford algebra involutions are defined using the gaGradeNegate",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
 Specific (fast) case, when multivector is represented as a single Association\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGradeNegate", "[", 
           RowBox[{
            RowBox[{"bs", "[", 
             RowBox[{"arg_Association", ",", "other__"}], "]"}], ",", 
            "grade_List"}], "]"}], "]"}], ":=", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"arg", ",", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"KeySelect", "[", 
                RowBox[{"arg", ",", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"grade", ",", 
                    RowBox[{"(", 
                    RowBox[{"Length", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"List", "@@", "#"}], "]"}], "]"}], ")"}]}], "]"}],
                   "&"}]}], "]"}]}], ")"}]}], "]"}], ",", "other"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
 General case for AdditiveRepresentation (without restriction not to use with \
products inside, causes huge delay problems due to expansion)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{"expr_", ",", "grade_List"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"allGrades", ",", "restGrades"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"allGrades", "=", 
           RowBox[{"gaGetGrade", "[", "expr", "]"}]}], ";", 
          RowBox[{"restGrades", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"allGrades", ",", "grade"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"restGrades", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{
             RowBox[{"-", "1"}], "*", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"expr", ",", "grade"}], "]"}]}], ",", 
            "\[IndentingNewLine]", "allGrades", ",", "expr", ",", 
            "\[IndentingNewLine]", "_", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "1"}], "*", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"expr", ",", "grade"}], "]"}]}], "+", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"expr", ",", "restGrades"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"(", 
          RowBox[{
          "_GeometricProduct", "|", "_OuterProduct", "|", "_InnerProduct", 
           "|", "_LeftContract", "|", "_RightContract"}], ")"}]}], "]"}]}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Involutions, which are special cases of ",
 StyleBox["gaGradeNegate[ ]",
  FontWeight->"Bold"],
 ": these include  ",
 StyleBox["gaReverse[ ], gaGradeInverse[ ]",
  FontWeight->"Bold"],
 ", and ",
 StyleBox[" gaCliffordConjugate[ ] ",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
 Specific (fast) case, when multivector is represented as a single Association\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"gaValidVersionQ", "[", 
     RowBox[{
     "10.0", ",", 
      "\"\<Multivector representation as Mathematica Association \
object\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"bs", "=", 
         RowBox[{
         "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", 
          "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaReverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaReverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaGradeInverse", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaGradeInverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"gaCliffordConjugate", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"arg_Association", ",", "al_", ",", "other___"}], "]"}], 
           "]"}], "]"}], ":=", 
         RowBox[{"gaGradeNegate", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
           RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}]}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[TextData[{
 "Definitions. \nReverse of multivector is a multivector itself with \
additional phase. According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56 it is named as involution R. (antiauthomorphism, i.e. changes order \
of multipliers).\n\nAccording to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaGradeInverse",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "is involution M (main involution).  See also ",
 ButtonBox["[DH-STA4 .12 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 17. This operation change sign of all odd grade multivectors. It does \
not change order of terms (proper automorphism, i.e. order of multipliers \
remain the same).\n\nFor CliffordConjugate (see  ",
 ButtonBox["[DH-STA6 .10 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 21).  According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaCliffordConjugate",
 StyleBox[" [ ]",
  FontWeight->"Bold"],
 " is involution (antiauthomorphism, i.e. changes order of multipliers) C \
(Clifford conjugation ). Thought gaCliffordConjugate can be expressed using \
gaCliffordConjugate and ",
 StyleBox["gaReverse",
  FontWeight->"Bold"],
 " as gaCliffordConjugate",
 StyleBox["[v_,opts___?OptionQ]:=",
  FontWeight->"Bold"],
 "gaGradeInverse",
 StyleBox["[gaReverse[v,opts],opts]",
  FontWeight->"Bold"],
 ", we preffer direct calculation"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["Involutions are linear functions", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaReverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaSetLinear", "/@", 
    RowBox[{"{", 
     RowBox[{"gaReverse", ",", "gaGradeInverse", ",", "gaCliffordConjugate"}],
      "}"}]}], ";"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["Involution action on base elements in AdditiveRepresentation", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaReverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaGradeInverseGrades", "[", "al", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg_mvDownUp", ",", "al_", ",", "other___"}], "]"}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"gaGradeNegate", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"arg", ",", "al", ",", "other"}], "]"}], ",", 
        RowBox[{"gaCliffordConjugateGrades", "[", "al", "]"}]}], "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[TextData[{
 "Reverse of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " rewrites expression from different side and then reverses  each term. \
Currently no rules for  ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ".\nNote on implementation. We should be carefull when operating on ",
 StyleBox["expr_GeometricProduct",
  FontWeight->"Bold"],
 ". For example, if in ",
 StyleBox["Reverse",
  FontWeight->"Bold"],
 " function we would first reverse expr, and then map gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", we would enter into infinite loop when applied to bivector. The reason is \
that after reversion we get ",
 StyleBox["Times[-1, GeometricProduct[expr]] ",
  FontWeight->"Bold"],
 "and the mapping would again map ",
 "gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " itself. "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Hermitian conjugation for complex Clifford algebras:  ",
 StyleBox["gaComplexConjugate[ ], ",
  FontWeight->"Bold"],
 "gaComplexCliffordConjugate",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", and ",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaHermitianConjugate",
 StyleBox["[ ] ",
  FontWeight->"Bold"]
}], "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell["\<\
We assume, that all symbolic quantities are real, therefore we simply change \
complex unit sign.  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell["\<\
To do: add option to gaComplexConjugate, ... to dealth with symbolic \
coefficients (i.e. wrap symbolic coefficients with Conjugate[ ], for correct \
expressions)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexConjugate", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"expr", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Complex", "[", 
        RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"Complex", "[", 
        RowBox[{"x", ",", 
         RowBox[{"-", "y"}]}], "]"}]}], "}"}]}], ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaComplexCliffordConjugate", "[", "expr_", "]"}], ":=", 
   RowBox[{"gaReverse", "[", 
    RowBox[{"gaComplexConjugate", "[", "expr", "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaQuaternionicConjugate", "[", "expr_", "]"}], ":=", 
      RowBox[{"expr", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"x_", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\"", ",", "y___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "y"}], "]"}]}]}], "}"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[TextData[{
 "General not trivial properties are gaHermitianConjugate[\[Lambda] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"U", "]"}], "->", 
    RowBox[{
     SuperscriptBox["\[Lambda]", "*"], 
     RowBox[{"gaHermitianConjugate", "[", "U", "]"}], " "}]}], 
   TraditionalForm]]],
 ", and gaHermitianConjugate[A\[GeometricProduct]",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"U", "]"}], "\[Rule]", 
    RowBox[{"gaHermitianConjugate", "[", "U", "]"}], " "}], TraditionalForm]]],
 "\[GeometricProduct]gaHermitianConjugate[A]."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", "0"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"y_Plus", ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"z", ",", 
               RowBox[{"x", "[", 
                RowBox[{"z", ",", "op"}], "]"}]}], "]"}], ",", "y"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"gaComplexConjugate", "[", "c", "]"}], "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"h", ":", 
               RowBox[{"(", 
                RowBox[{"_GeometricProduct", "|", "_OuterProduct"}], ")"}]}], 
              ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"#", ",", "op"}], "]"}], "&"}], "/@", 
            RowBox[{"(", 
             RowBox[{"Reverse", "[", "h", "]"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HoldPattern", "[", 
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
           RowBox[{
            RowBox[{"gaComplexConjugate", "[", "expr", "]"}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "expr", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaHermitianConjugate", "}"}]}], ")"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell["\<\
For Hermitian conjugation we use [MarchukShirokov2008] (direct formula 17)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaHermitianConjugate", "[", "expr_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"orthogonalBaseElements", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", "_bs", ",", "Infinity"}], "]"}], 
          "]"}]}], ",", "replRules", ",", "\[IndentingNewLine]", 
        "exprExpanded"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"gaExpandedQ", "[", "expr", "]"}], ",", 
         RowBox[{"exprExpanded", "=", "expr"}], ",", 
         RowBox[{"exprExpanded", "=", 
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"replRules", "=", 
        RowBox[{"Dispatch", "[", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{"orthogonalBaseElements", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"gaReverse", "/@", "orthogonalBaseElements"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"x_", ",", "y_"}], "]"}], ":>", 
               RowBox[{"mvDownUp", "[", 
                RowBox[{"y", ",", "x"}], "]"}]}], "}"}]}]}], "]"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "coefficients", " ", "should", " ", "be", " ", "made", " ", "complex",
          " ", "also"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"gaComplexConjugate", "[", 
        RowBox[{"exprExpanded", "/.", "replRules"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell["Tests if GA element is Hermitian ", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Expand", "[", 
      RowBox[{"gaPE", "[", 
       RowBox[{
        RowBox[{"gaIndexDown", "[", 
         RowBox[{"gaHermitianConjugate", "[", "expr", "]"}], "]"}], "-", 
        "expr"}], "]"}], "]"}], "===", "0"}], ")"}]}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Specialized command gaEliminateGrade[ ], which try to eliminate grades in the \
geometric product using grade negations only\
\>", "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],

Cell["\<\
gaEliminateGrade takes multivector and by multiplying on the same multivector \
on the right, acted by gaGradeNegate tries to remove listed grades in the \
product. \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "zero"}], "=", 
   "\"\<Zero grade in elimination list not allowed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaEliminateGrade", "::", "nothingToDo"}], "=", 
   "\"\<Multivector doesn't have grades listed in elimination list.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaEliminateGrade", "::", "involutionPosition"}], "=", 
    "\"\<Involution position can be Right (default) or Left only. Default is \
used\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Output", "\[Rule]", 
    RowBox[{
     RowBox[{"SignChangeGrades", " ", "or", " ", "Output"}], "\[Rule]", 
     "Evaluation"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaEliminateGrade", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"OutputType", "\[Rule]", "Evaluation"}], ",", " ", 
     RowBox[{"InvolutionPosition", "\[Rule]", "Right"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaEliminateGrade", "[", 
     RowBox[{"expr_", ",", "eliminateGrade_List", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "p", ",", "s", ",", "prototype", ",", "relGrades", ",", 
        "checkValueRules", ",", "productWithPrototype", ",", 
        "theEquationsToCheck", ",", "trowCondition", ",", "baseElems", ",", 
        "subsRules", ",", "possibleSolutions", ",", "gradesForOutput", ",", 
        RowBox[{"grades", "=", 
         RowBox[{"gaGetGrade", "[", "expr", "]"}]}], ",", 
        RowBox[{"outputType", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"OutputType", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaEliminateGrade", ",", "OutputType"}], "]"}]}], ")"}]}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"invPos", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"InvolutionPosition", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaEliminateGrade", ",", "InvolutionPosition"}], "]"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"exceptional", " ", "cases"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"eliminateGrade", ",", "0"}], "]"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"gaEliminateGrade", "::", "zero"}], "]"}], ";", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"DeleteCases", "[", 
              RowBox[{"grades", ",", "0"}], "]"}], ",", "eliminateGrade"}], 
            "]"}], "===", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"gaEliminateGrade", "::", "nothingToDo"}], "]"}], ";", 
           "expr"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"prototype", "=", 
            RowBox[{"Expand", "[", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaGetMV", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"p", "[", "#", "]"}]}], "}"}]}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"p", "[", "0", "]"}], "\[Rule]", "1"}]}], ")"}], 
                 "&"}], "/@", "grades"}], ")"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"invPos", ",", "Right", ",", 
             RowBox[{"productWithPrototype", "=", 
              RowBox[{"gaPE", "[", 
               RowBox[{"expr", "\[GeometricProduct]", "prototype"}], "]"}]}], 
             ",", "\[IndentingNewLine]", "Left", ",", 
             RowBox[{"productWithPrototype", "=", 
              RowBox[{"gaPE", "[", 
               RowBox[{"prototype", "\[GeometricProduct]", "expr"}], "]"}]}], 
             ",", "\[IndentingNewLine]", "_", ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{"gaEliminateGrade", "::", "involutionPosition"}], 
               "]"}], ";", 
              RowBox[{"productWithPrototype", "=", 
               RowBox[{"gaPE", "[", 
                RowBox[{"expr", "\[GeometricProduct]", "prototype"}], 
                "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"baseElems", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{"productWithPrototype", ",", "_bs", ",", "Infinity"}], 
              "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"subsRules", "=", 
            RowBox[{"Thread", "[", 
             RowBox[{"Rule", "[", 
              RowBox[{"baseElems", ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"Unique", "[", "s", "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"Length", "[", "baseElems", "]"}], "}"}]}], "]"}]}],
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"relGrades", "=", 
            RowBox[{"Rest", "[", "grades", "]"}]}], ";", 
           RowBox[{"checkValueRules", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Thread", "[", 
                RowBox[{"Rule", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"p", "/@", "relGrades"}], ")"}], ",", "#"}], "]"}],
                 "]"}], "&"}], ",", 
              RowBox[{"Tuples", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"-", "1"}]}], "}"}], ",", 
                RowBox[{"Length", "[", "relGrades", "]"}]}], "]"}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"theEquationsToCheck", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetMV", "[", 
                 RowBox[{"productWithPrototype", ",", 
                  RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "/@", 
               "eliminateGrade"}], ")"}], "/.", "subsRules"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"trowCondition", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"0", ",", 
              RowBox[{"{", 
               RowBox[{"Length", "[", "theEquationsToCheck", "]"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"possibleSolutions", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Last", "[", 
               RowBox[{"Reap", "[", 
                RowBox[{"Scan", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Chop", "[", 
                    RowBox[{"(", 
                    RowBox[{"theEquationsToCheck", "/.", "#"}], ")"}], "]"}], 
                    "===", "trowCondition"}], ",", 
                    RowBox[{"Sow", "[", "#", "]"}]}], "]"}], "&"}], ",", 
                  "checkValueRules"}], "]"}], "]"}], "]"}], ",", "1"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"gradesForOutput", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"First", "/@", 
                  RowBox[{"Cases", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "]"}]}], "&"}], "/@",
                 "possibleSolutions"}], ")"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"p", "->", "Identity"}], "}"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"outputType", "===", "SignChangeGrades"}], ",", 
             "gradesForOutput", ",", "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"invPos", ",", "Right", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"expr", "\[GeometricProduct]", 
                   RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                "gradesForOutput"}], ",", "\[IndentingNewLine]", "Left", ",", 
               
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}], "\[GeometricProduct]", 
                   "expr"}], ")"}], "&"}], "/@", "gradesForOutput"}], ",", 
               "\[IndentingNewLine]", "_", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"expr", "\[GeometricProduct]", 
                   RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", 
                "gradesForOutput"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Series "
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". GeometricProductSeries"
}], "Subsubsection"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaGeometricProductSeries[ ] ",
  FontWeight->"Bold"],
 "is taken  from package ",
 StyleBox["clifford.m",
  FontWeight->"Bold"],
 "  (version 1.3 (Oct,2007): authors G. Aragon-Camarasa, J.L. Aragon, G. \
Aragon and M.A. Rodriguez )."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "gaSeriesData", "}"}]}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "::", "function"}], "=", 
   "\"\<The expanded function `1` contains noncommutative operations \
(GeometricProduct or other). Current implementation is not ready to handle \
such cases. Use only with single argument!!!\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "[", 
    RowBox[{
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Function", "|", "_Symbol"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"point_", "?", "NumberQ"}], ",", 
         RowBox[{"n_Integer", "?", "Positive"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"Series", "[", 
         RowBox[{
          RowBox[{"sym", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "point", ",", "n"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"a", "=", "1"}], ",", 
       RowBox[{"expansion", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaGeometricProductSeries", ",", "Expand"}], "]"}]}], 
          ")"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"sym", ",", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}]}], "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaGeometricProductSeries", "::", "function"}], ",", 
          "sym"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[NotEqual]", "0"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{"expansion", ",", 
             RowBox[{"a", "=", 
              RowBox[{"gaProductExpand", "[", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", "m"}], "]"}], "]"}]}], ",", 
             RowBox[{"a", "=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"a", ",", "m"}], "]"}]}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"res", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Coefficient", "[", 
                RowBox[{"s", ",", "x", ",", "i"}], "]"}], "*", "a"}], "}"}], 
             ",", "i"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gaSeriesData", "@@", 
       RowBox[{"{", 
        RowBox[{"point", ",", "res"}], "}"}]}]}]}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 " returns ",
 StyleBox["gaSeriesData[ ] ",
  FontWeight->"Bold"],
 "series data (mimick ",
 StyleBox["Series[ ]",
  FontWeight->"Bold"],
 " behaviour). It can be converted either to ordinary geometric product (with \
",
 StyleBox["Normal[ ]",
  FontWeight->"Bold"],
 ") or user can explicitly include infinitesimal parameter with ",
 StyleBox["gaParameterSeries[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaSeriesData[]",
  FontWeight->"Bold"],
 " rules for ",
 StyleBox["Zassenhaus",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Baker-Campbell-Hausdorff",
  FontSlant->"Italic"],
 " series are added in these series definition sections."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Normal", "[", "a_gaSeriesData", "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "[", 
    RowBox[{"a_gaSeriesData", ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"var", "^", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"Plus", "@@", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " are automatically summed order by order and geometrically multiplied."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Plus", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any3___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxOrder", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", "dat1", "]"}], ",", 
         RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Plus", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"gaSeriesData", "[", 
        RowBox[{"point", ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat1", ",", "maxOrder"}], "]"}]}], ")"}], "+", 
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat2", ",", "maxOrder"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
        "]"}], ",", "any2", ",", "any3"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication by multivector is multiplication of every term of series by \
that factor."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Times", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication is realized first constructing pairs of infinitesimal of \
same power ",
 StyleBox["relevantPairs",
  FontWeight->"Bold"],
 ", then simply taking these terms with ",
 StyleBox["Extract[ ]",
  FontWeight->"Bold"],
 ", multiplying and at least summing."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any2___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"maxOrder", "=", 
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"Length", "[", "dat1", "]"}], ",", 
          RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], ",", 
       "relevantPairs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"relevantPairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "+", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "k"}], "}"}], ",", "k"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "maxOrder"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"any1", ",", 
        RowBox[{"gaSeriesData", "[", 
         RowBox[{"point", ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"List", "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat2"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}]}], "}"}], "]"}]}], ")"}], "&"}], "/@", 
                  RowBox[{"relevantPairs", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "maxOrder"}], "}"}]}], "]"}]}]}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", 
               RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
         "]"}], ",", "any2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Below follows shortcuts and simplified predefined usage of ",
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricExp", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSin", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSinh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCos", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCosh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTan", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTanh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricExp", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricExp", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Exp", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Exp", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExp", "=", "gaGeometricExp"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSin", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSin", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sin", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sin", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSin", "=", "gaGeometricSin"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSinh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSinh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sinh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sinh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSinh", "=", "gaGeometricSinh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCos", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCos", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cos", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cos", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCos", "=", "gaGeometricCos"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCosh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCosh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cosh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cosh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCosh", "=", "gaGeometricCosh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTan", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTan", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tan", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tan", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTan", "=", "gaGeometricTan"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTanh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTanh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tanh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tanh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTanh", "=", "gaGeometricTanh"}], ";"}]}], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Commutator, Zassenhaus and BakerCampbellHausdorff (BCH) expansions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["Nice output of commutator and anticommutator", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"gaCommutator", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
    RowBox[{"StyleBox", "[", 
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<\[LeftDoubleBracket]\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<,\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<\[RightDoubleBracket]\>\""}], "}"}], "]"}], ",", 
      RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
      RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaAntiCommutator", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
   RowBox[{"StyleBox", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<{\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<,\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<}\>\""}], "}"}], "]"}], ",", 
     RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
     RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaSetMultiLinear[ ] ",
  FontWeight->"Bold"],
 "is taken  from  Daniel Lichtblau<danl@wolfram.com>Re:[mg25540] MultiLinear \
and Linear function (old mathgroup mail list)"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", 
                RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", "c_", ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", "1", ",", "b"}], "]"}]}], "/;", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "=!=", "1"}], ")"}], "&&", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "c", "}"}], ",", 
                RowBox[{"MV", "|", "bs"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";", 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"c_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&"}], ")"}]}], 
                ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", 
               RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"c_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
                   RowBox[{"c", "=!=", "1"}]}], ")"}], "&"}], ")"}]}], ",", 
              "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "1", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False],

Cell["Expand commutator and anticommutator.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCommutatorExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "gaAntiCommutator", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaCommutatorExpand", "[", 
      RowBox[{"n", ":", 
       RowBox[{"(", 
        RowBox[{"_", "?", "NumberQ"}], ")"}], ":", "1"}], "]"}], "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"repRules", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plus", " ", "Rules", " ", "for", " ", "gaCommutator"}], 
            "*)"}], 
           RowBox[{
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "Plus", " ", "Rules", " ", "for", " ", "gaAntiCommutator"}], 
             "*)"}], 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaAntiCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"Alternatives", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{"gaCommutatorExpand", ",", "Except"}], "]"}]}], 
                  ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Expand", "[", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", "#", ")"}], "/.", "repRules"}], ")"}], "&"}], ",", 
         "expr"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "[", "n_", "]"}], "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{
      RowBox[{"gaCommutatorExpand", "[", "n", "]"}], "[", "x", "]"}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Zassenhaus series"
}], "Subsubsection"],

Cell["\<\
Optimize commutator linearity for Clifford algebras instead of using general \
gaSetMultiLinear[ ] . With this optimization $IterationLimit for \
gaZassenhausSeries for value 8 causes no problems. gaCommutator is nonzero \
only if it contains heads orthonormalBaseSymbolName or MV. If you need other \
noncommutative quantities, just use MV[yourhead].\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", "y_Plus", ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", "#", ",", "b"}], "]"}], "&"}], "/@", "y"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"___", ",", "a_", ",", "___"}], "]"}], "]"}], ":=", 
      RowBox[{"0", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", 
          RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
If one uses definition below,  one gets $IterationLimit for \
gaZassenhausSeries values 8 or higher. This can be avoided with 
Block[{$RecursionLimit=2048},gaZassenhausSeries[Exp[t1+t2],8]], however the \
better way is to optimize iteration procedure as above.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetMultiLinear", "[", 
   RowBox[{"gaCommutator", ",", "gaAntiCommutator"}], "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell["Add antisymmetry property ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaCommutator", "[", 
     RowBox[{"a_", ",", "a_"}], "]"}], "]"}], ":=", "0"}], ";"}]], "Input"],

Cell[TextData[{
 "Efficient computation of general Zassenhaus coefficients is literally taken \
form the article Fernando Casas, Ander Murua, Mladen Nadinic, \
\[OpenCurlyDoubleQuote]Efficient computation of the Zassenhaus formula\
\[CloseCurlyDoubleQuote],Computer Physics Communications, 183 (2012) \
2386-2391, where algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjoint", "[", 
    RowBox[{"a_", ",", "0", ",", "b_"}], "]"}], ":=", "b"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjoint", "[", 
    RowBox[{"a_", ",", "j_Integer", ",", "b_"}], "]"}], ":=", 
   RowBox[{"gaCommutator", "[", 
    RowBox[{"a", ",", 
     RowBox[{"gaAdjoint", "[", 
      RowBox[{"a", ",", 
       RowBox[{"j", "-", "1"}], ",", "b"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"1", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"1", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "k"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"j", "!"}], " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "-", "j"}], ")"}], "!"}]}], ")"}]}], ")"}], " ", 
       RowBox[{"gaAdjoint", "[", 
        RowBox[{
         RowBox[{"MV", "[", "bTemp", "]"}], ",", 
         RowBox[{"k", "-", "j"}], ",", 
         RowBox[{"gaAdjoint", "[", 
          RowBox[{
           RowBox[{"MV", "[", "aTemp", "]"}], ",", "j", ",", 
           RowBox[{"MV", "[", "bTemp", "]"}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "k"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "2", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], " ", 
    RowBox[{"gaff", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"p_", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaff", "[", 
     RowBox[{"p", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "j"}], "/", 
         RowBox[{"j", "!"}]}], ")"}], " ", 
       RowBox[{"gaAdjoint", "[", 
        RowBox[{
         RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], ",", "j", ",", 
         RowBox[{"gaff", "[", 
          RowBox[{
           RowBox[{"p", "-", "1"}], ",", 
           RowBox[{"k", "-", 
            RowBox[{"p", " ", "j"}]}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"k", "/", "p"}], "]"}], "-", "1"}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "p_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "=", 
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "p"}], ")"}], " ", 
      RowBox[{"gaff", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"p", "-", "1"}], ")"}], "/", "2"}], "]"}], ",", 
        RowBox[{"p", "-", "1"}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", 
     RowBox[{"a_", ",", "b_"}], "]"}], "[", "p_Integer", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
       RowBox[{
        RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], "}"}]}], 
    ")"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Right Zassenhaus series of Exp[A+B] is given as \
{Exp[A],Exp[B],Exp[C_2],Exp[C_3],...}. Whereas Left Zassenhaus series of \
Exp[A+B] is presented as {...,Exp[C\[CloseCurlyQuote]_3],Exp[C\
\[CloseCurlyQuote]_2],Exp[B],Exp[A]}. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"C", "'"}], "_n"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"n", "+", "1"}]], "C_n"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaZassenhausSeries", "}"}], ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaZassenhausSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<Right\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausSeries", "::", "format"}], "=", 
    "\"\<gaZasenhausSeries option Format-> `1` is unknown. Possible values \
are \\\"Right\\\" or \\\"Left\\\".\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaZassenhausSeries", "[", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"aa_", "+", "bb_"}], "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a", "=", 
           RowBox[{"Unevaluated", "[", "aa", "]"}]}], ",", 
          RowBox[{"b", "=", 
           RowBox[{"Unevaluated", "[", "bb", "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaZassenhausSeries", ",", "Format"}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "seriesType", ",", "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"gaZassenhausCoefficient", "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"2", ",", "n"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "aTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "bTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\"\<Left\>\"", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"Reverse", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2", ",", "n"}], "}"}]}], "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"gaZassenhausCoefficient", "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "bTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "aTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaZassenhausSeries", "::", "format"}], ",", 
            "seriesType"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["Conversion of Zassehaus series data to gaSeriesData. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"u1_", ",", 
     RowBox[{"{", 
      RowBox[{"u2a_", ",", "u2b_"}], "}"}], ",", "u3_", ",", "len_"}], "]"}], 
   ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2a", ",", "u3", ",", "len"}], "]"}], ",", 
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2b", ",", "u3", ",", "len"}], "]"}]}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"expansionOrder_", ",", "uMVec_", ",", "rang_", ",", "len_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"Series", "[", 
          RowBox[{
           RowBox[{"Exp", "[", "t", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"res", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"a", "=", "1"}], ",", 
        RowBox[{"initialSeq", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "0", "}"}], ",", "j"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "0", ",", "len"}], "}"}]}], "]"}]}]}], "}"}], 
      ",", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"i", "\[NotEqual]", "0"}], ",", 
            RowBox[{"a", "=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"a", ",", "uMVec"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"res", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Coefficient", "[", 
                 RowBox[{"s", ",", "t", ",", "i"}], "]"}], "*", "a"}], "}"}], 
              ",", 
              RowBox[{"rang", "*", "i"}]}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"initialSeq", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", 
             RowBox[{"rang", "*", "k"}]}], "]"}], "]"}], "=", 
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", "k"}], "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", 
           RowBox[{
            RowBox[{"Length", "[", "res", "]"}], "-", "1"}]}], "}"}]}], "]"}],
        ";", "initialSeq"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", "uMVec", "]"}], "=!=", "List"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", 
       "expansionOrder", ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"expansionOrder", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"len", "/", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"res", "=", 
       RowBox[{"MapAt", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"expandZasExp", "[", 
             RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"expansionOrder", ",", 
             RowBox[{"{", 
              RowBox[{"inf0", ",", "infn"}], "}"}], ",", 
             RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"gaSeriesData", "@@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", "res"}],
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "[", 
   RowBox[{"gaZassenhausSeriesData", "[", 
    RowBox[{"infn___", ",", "inf0_List"}], "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "expansionOrder",
       ",", "res"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expansionOrder", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{"len", "/", "i"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"res", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Apply", "[", 
          RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"expandZasExp", "[", 
            RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"expansionOrder", ",", 
            RowBox[{"Reverse", "[", 
             RowBox[{"{", 
              RowBox[{"infn", ",", 
               RowBox[{"Reverse", "[", "inf0", "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GeometricProduct", "@@", 
      RowBox[{"gaSeriesData", "@@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", 
         RowBox[{"Reverse", "[", "res", "]"}]}], ")"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". BCH series"
}], "Subsubsection"],

Cell[TextData[{
 "Efficient computation of general BCH coefficients is literally taken form \
the Mattias W. Reinsch, \[OpenCurlyDoubleQuote]A simple expresion for the \
terms in the Baker-Campbell-Hausdorff \
series\[CloseCurlyDoubleQuote],(arXiv:math-ph/9905012v2 13 Jan,2000), where \
algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given. We only add speedup using SparseArray matrices (15% \
speedup for n=12 term)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myStrings__String", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Band", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], "]"}], "\[Rule]", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "+", "1"}], ",", 
            RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}]}], ",", "FFGGm1"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dot", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                 RowBox[{"Product", "[", 
                  RowBox[{
                   RowBox[{"sb", "[", 
                    RowBox[{"k", ",", "#"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "]"}], "&"}], "/@", 
            RowBox[{"{", "myStrings", "\[IndentingNewLine]", "}"}]}], ")"}]}],
          "-", "qthpower"}], ")"}]}], ";", 
      RowBox[{"Expand", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"qthpower", "=", 
             RowBox[{"qthpower", ".", "FFGGm1"}]}], ";", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
             "qthpower"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", 
           RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
    RowBox[{
     RowBox[{"{", "exprs__String", "}"}], ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"temp", "=", 
        RowBox[{"logTempMatrix", "[", 
         RowBox[{
          RowBox[{"{", "exprs", "}"}], ",", "n"}], "]"}]}], ",", "term"}], 
      "}"}], ",", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"term", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"List", ",", 
           RowBox[{"temp", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{"term", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*", 
         RowBox[{"Apply", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"term", ",", 
              RowBox[{"-", "n"}]}], "]"}], "/.", 
            RowBox[{
             RowBox[{"sb", "[", 
              RowBox[{"_", ",", "k_"}], "]"}], "\[Rule]", 
             RowBox[{"MV", "[", "k", "]"}]}]}]}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "temp", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
Nested commutator on the right or left hand side. This differs from \
traditional form presended in the literature, because some terms are equal \
and can be added. For example in 5-th order term two terms with coefficients \
add  1/360+1/180 to form 1/120 coefficient of their sum. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateCommutatorForm", "[", 
    RowBox[{"expr_", ",", "vars_List", ",", "type_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rules", ",", "gaCom", ",", "any1", ",", "any2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetNonCommutative", "[", 
       RowBox[{"gaCom", ",", "any1", ",", "any2"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "type", ",", "\[IndentingNewLine]", "\"\<DeepestRight\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}]}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "a", "]"}], ">", 
                RowBox[{"Depth", "[", "b", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "b", ",", "a", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "a"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}], ",", 
                 RowBox[{"c", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "\"\<DeepestLeft\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", "b"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "b", "]"}], ">", 
                RowBox[{"Depth", "[", "a", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", "any2___"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "a", ",", "b", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"a", ",", "b"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"c", ":", "_gaCom"}], ",", 
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}], ",", "b"}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "b"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"#", "/.", "rules"}], "]"}], "&"}], ",", "expr"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"gaCom", "\[Rule]", "gaCommutator"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaBakerCampbellHausdorffSeries", "}"}], ",", "HoldFirst"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBakerCampbellHausdorffSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "format"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries option Format-> `1` is unknown. \
Possible values are \\\"Commutators\\\",\\\"Expand\\\" or \
\\\"None\\\".\>\""}], ";"}]}], "Input"],

Cell[TextData[{
 "Note: ",
 StyleBox["directLogTempMatrix[ ]",
  FontWeight->"Bold"],
 " is much faster when expanding multivectors. For example for two 3D vectors \
9-th order BCH series (expanded) is 600sec compared to 5000 sec using \
commutative algorithm. All this due to slow expansion of large noncommutative \
expression. Therefore we switch to directLogTempMatrix[ ] for n>5."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"directLogTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myexressions__", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], ",", "FFGGm1"}], "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"gaPE", ",", 
           RowBox[{"gaGeometricMatrixProduct", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"1", "/", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "&"}], "/@", 
              RowBox[{"{", "myexressions", "\[IndentingNewLine]", "}"}]}], 
             ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", 
             RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "-", "qthpower"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"gaPE", "/@", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"qthpower", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"MapAt", "[", 
                 RowBox[{"gaPE", ",", "qthpower", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", "FFGGm1"}], "]"}]}], 
             ";", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
              "qthpower"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", 
            RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell["\<\
Note: rewrite using commutators to left or to right side. It is not rewrite \
into Hall or Lyndon base (don\[CloseCurlyQuote]t know how to do this)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBakerCampbellHausdorffSeries", "[", 
       RowBox[{
        RowBox[{"GeometricProduct", "[", "expr__Exp", "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"expArgs", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"List", "@@@", 
             RowBox[{"Unevaluated", "[", 
              RowBox[{"{", "expr", "}"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaBakerCampbellHausdorffSeries", ",", "Format"}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"stringNames", "=", 
           RowBox[{"(", 
            RowBox[{"ToString", "/@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Unique", "[", "\"\<vn\>\"", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "expr", "}"}], "]"}], "}"}]}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "seriesType", ",", "\[IndentingNewLine]", "\"\<None\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "gaBakerCampbellHausdorffSeriesData", "@@", "\[IndentingNewLine]", 
            
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", "expArgs"}], 
              "]"}], ")"}]}], ",", "\"\<Expand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "gaBakerCampbellHausdorffSeriesData", "@@", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", 
                 RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"directLogTempMatrix", "[", 
                  RowBox[{"expArgs", ",", "k"}], "]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Commutators\>\"", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<DeepestRight\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestRight\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Commutators\>\"", "|", 
            RowBox[{"{", 
             RowBox[{"\"\<Commutators\>\"", ",", 
              RowBox[{"Method", "\[Rule]", "\"\<DeepestLeft\>\""}]}], "}"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestLeft\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBCHSeries", "=", "gaBakerCampbellHausdorffSeries"}], 
  ";"}]], "Input"],

Cell["\<\
Conversion of BakerCampbellHausdorffSeries series data to gaSeriesData. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeProductTerm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pair", ":", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ".."}]}], "}"}], 
     ",", 
     RowBox[{"expansionOrder_Integer", "?", "Positive"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{"#", ",", 
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"Factorial", "[", 
          RowBox[{"Length", "[", "#", "]"}], "]"}]}], ")"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Permutations", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
       RowBox[{"{", "pair", "}"}]}], "]"}], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "termsToTake", 
       ",", "nontrivialEntries"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"0", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"termsToTake", "=", 
                RowBox[{"FrobeniusSolve", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "len", "]"}], ",", "order"}], "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"nontrivialEntries", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Plus", "@@", "inf0"}], ",", "infn"}], "}"}], ",",
                     "#"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "0"}], "}"}]}], "]"}], ")"}], "&"}], "/@",
                  "termsToTake"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"gaPE", "[", 
                RowBox[{"Plus", "@@", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{"GeometricProduct", ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"makeProductTerm", "[", 
                    RowBox[{"#", ",", "order"}], "]"}], "&"}], "/@", 
                    "nontrivialEntries"}], ")"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
              ",", "order"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"order", ",", "len"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "1", "}"}], ",", "0"}], "}"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Idempotents, left ideals, bilateral ideals, ideal basis"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaRadonHurwitzNumber", ",", "gaIdempotentQ", ",", 
     "gaPrimitiveIdempotent", ",", "StartingElement", ",", 
     "NumberOfPrimitiveFactors", ",", "HermitianOnly", ",", "gaLeftIdeal", 
     ",", "gaDoubleSidedIdeal", ",", "gaLeftIdealBasis", ",", "gaSpinor", ",",
      "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", ",", 
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", ",", 
     "gaSpinorIdempotent"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "::", "usage"}], "=", 
   "\"\<gaRadonHurwitzNumber[s_Integer] gives Radon-Hurwitz number, which is \
sequence A034584 in the On-Line Encyclopedia of Integer Sequences (OEIS). The \
number of primitive idempotents of algebra Cl[p,q,0] is equal to \
q-gaRadonHurwitzNumber[q-p].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIdempotentQ", "::", "usage"}], "=", 
   "\"\<gaIdempotentQ[expr_] returns True if expr*expr===expr, where expr is \
either Matrix or GA expression.\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "usage"}], "=", 
   "\"\<gaPrimitiveIdempotent[algebra_Cl, opts___] returs a list of factors \
of the algebra of primitive idempotent. Representative factors of primitive \
idempotent are selected using options StartingElement->Integer (or list of \
integers) and gaNonCommutativeMonomialOrder\[Rule] (monomial ordering). \
Possible monomial orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \
\\\"InvRevLex\\\". These pure orderings can be proceeded with \\\"Deg[]\\\", \
and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 possible orderings. Use \
option OutputForm\[Rule]\\\"Blades\\\" to return set of blades instead of \
factors of primitive idempotent.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StartingElement", "::", "usage"}], "=", 
   "\"\<StartingElement-> Integer or StartingElement-> {Integers}. \
StartingElement is an option for gaPrimitiveIdempotent[], which determines a \
number of blade in a list. The blade is selected as a next candidate for \
primitive idempotent factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NumberOfPrimitiveFactors", "::", "usage"}], "=", 
   "\"\<NumberOfPrimitiveFactors-> positive Integer or \\\"Automatic\\\". \
NumberOfPrimitiveFactors is an option for gaPrimitiveIdempotent[], which \
restricts number of factors in the idempotent to given value. Idempotent with \
manually restricted number of factors may not be a primitive idempotent. \
Default value is \\\"Automatic\\\". Normaly your should not use the option.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HermitianOnly", "::", "usage"}], "=", 
   "\"\<HermitianOnly-> True|False is an option for gaPrimitiveIdempotent[], \
which explicitly removes non Hermitian idempotens from the list. In all \
tested cases the idempotents are Hermitian by construction. Default value is \
True.\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDoubleSidedIdeal", "::", "usage"}], "=", 
   "\"\<gaDoubleSidedIdeal[thePrimitiveIdempotent_gaIdempotentQ, leftIdeal_, \
Order_String ,opts___] returns double sided ideal. Options: CoefficientDomain\
\[Rule]Complexes,Quiet\[Rule]True.  Option \
OutputForm->\\\"ElementsReplacementRules\\\". is used for calculation of \
matrix representations.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "::", "usage"}], "=", 
   "\"\<gaLeftIdealBasis[leftIdeal_, gaDoubleSidedIdeal_, Order_String, \
opts___] \nreturs an left ideal orthonormal basis. The elements in the basis \
is ordered by Order, of which most useful for spinor calculations is \
\\\"RevLex\\\". It yields first nonzero column in matrix \
representation.\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaSpinor", "::", "usage"}], "=", 
    "\"\<gaSpinor[algebra, opts___] computes general column spinors of the \
given algebra. Options: \n\
gaPrimitiveIdempotent,\
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals,CoefficientDomain\
\[Rule]Complexes|Reals,Quiet\[Rule]True|False, gaSpinorIdempotent\[Rule]1, \
GeneratedParameters\[Rule]C,gaNonCommutativeMonomialOrder->\\\"RevLex\\\",\
gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\[Rule]\\\"InvLex\\\".\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "::", 
     "usage"}], "=", 
    "\"\<Method suboption of gaSpinor. Can be used to provide direct data for \
spinor computations. Usage: \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\[Rule]\
dataMajoranaForSpinor, where dataMajoranaForSpinor has structure {{the \
idempotent, lengthOfMutuallyAnihilatingIdempotents_Integer}, }, the ideal \
basis, {{the double sided ideal_1},{the double sided ideal_2}... }. See \
detailed example for Dirac, Majorana and chiral representation calculation \
for Cl[1,3].\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "::", "usage"}],
    "=", "\"\<Option of gaSpinor and gaDefineMatrixRepresentation (when \
IdealBasis method is used). Only makes sense for semisimple algebras (odd \
algebras for complex field and p-q=1 mod 4 for real field) which sorts basis \
elements of grade inverted ideal in requiested order.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSpinorIdempotent", "::", "usage"}], "=", 
   "\"\<Option for gaSpinor, decides which of full system of idempotents \
P_1+P_2+ ... +P_n=1 should be used for spinor computation (default \
gaSpinorIdempotent->1).\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Idempotents"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell[TextData[{
 "Sequence A034584  in OEIS:  Radon-Hurwitz numbers: log_2 of dimension of an \
irreducible R-module for Clifford algebra Cl_n.  Generating function: x*(1+ x \
+ x^3 + x^7)/((1 - x)*(1 - x^8)), i.e. \
CoefficientList[Normal[Series[x*(1+x+x^3+x^7)/((1-x)*(1-x^8)),{x,0,100}]],x]\n\
This matches sequence [PL-GPW] Perti Lounesto, G.P. Wene \
\[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaRadonHurwitzNumber", "[", 
      RowBox[{"s", "-", "8"}], "]"}], "+", "4"}], "/;", 
    RowBox[{"s", "\[GreaterEqual]", "8"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", "s_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"s", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", 
      ",", "2", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "3", 
      ",", "6", ",", "3", ",", "7", ",", "3"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"-", "1"}], "\[LessEqual]", "s", "\[LessEqual]", "7"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Negative"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"s", "+", "8"}], "]"}], "-", "4"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberOfPrimitiveIdempotents", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"p_", ",", "q_", ",", "0"}], "]"}], "]"}], ":=", 
   RowBox[{"q", "-", 
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"q", "-", "p"}], "]"}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Using Shirokov arXiv 0705.1641 formulas we implement ",
 StyleBox["gaComplexLeftIdealBase[ ]",
  FontWeight->"Bold"],
 ", which uses even then odd base element ordered left ideal base. You can \
change ordering and take linear combinations of base element using options, \
for example for base of 4 elements with Ordering\[Rule]{4,3,2,1} or \
TransformationMatrix->{{1,1,0,0},{1,-1,0,0},{0,0,1,I},{0,0,1,-I}}."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIdempotentQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"MatrixQ", "[", "expr", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", "expr"}], "]"}], "]"}], "]"}], "===", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", 
         RowBox[{"expr", "\[GeometricProduct]", "expr"}], "]"}], "]"}], "===", 
       RowBox[{"Expand", "[", 
        RowBox[{"gaPE", "[", "expr", "]"}], "]"}]}], ")"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Primitive  idempotents of real  and complex algebras"
}], "Subsubsection"],

Cell[TextData[{
 "By [PL-GPW] primitive idempotent of Cl(p,q) is a product of type \
(1+blade)..., where blade squares to 1 and all blades forms commuting set. \
The  ",
 StyleBox["commutingWithElement[] ",
  FontWeight->"Bold"],
 " test if blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 " of the blade list ",
 StyleBox[" testList",
  FontWeight->"Bold"],
 " commutes with this blade. The function then deletes all blades, which do \
not commute with blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"commutingWithElement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"testList_List", ",", "startEl_List"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"in", "=", 
         RowBox[{"RotateLeft", "[", 
          RowBox[{"testList", ",", 
           RowBox[{
            RowBox[{"startEl", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ",", 
        RowBox[{"quiet", "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
        RowBox[{"ord", "=", 
         RowBox[{"(", 
          RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", "fe", ",", "res"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"Sow", "[", 
        RowBox[{"fe", "=", 
         RowBox[{"First", "[", "in", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"res", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Rest", "[", "in", "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"fe", ",", "#"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"#", ",", "fe"}], "]"}]}], "===", "0"}], ")"}], 
             "&"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"!", "quiet"}], "&&", 
          RowBox[{
           RowBox[{"Length", "[", "res", "]"}], ">", "0"}]}], ",", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"TextCell", "[", "\"\<Blade \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "fe", "]"}], ",", 
                  RowBox[{
                  "TextCell", "[", "\"\<commute with blades \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "res", "]"}]}], "}"}], "]"}],
                ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", "\"\<Next selected blade number is \>\"", 
                   "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", "startEl", "]"}], "]"}], 
                   "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
          "]"}]}], "]"}], ";", 
       RowBox[{"{", 
        RowBox[{"res", ",", 
         RowBox[{"RotateLeft", "[", "startEl", "]"}]}], "}"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "testList", "]"}], ">", "0"}]}]}], ";"}]], "Input"],

Cell["\<\
After system of commuting blades which square to 1 is formed, we need to \
remove of them all blades, which are products of blades which are in the \
beginning of the list. Recursive implementation of removing product blades, \
i.e. blades which are products of blades in the begining of given list. The \
initial blade ordering by default is \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], which can be changed to any other by option \
gaNonCommutativeMonomialOrder->order.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other___"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", "nextAccept", "}"}], ",", 
       RowBox[{"{", "other", "}"}]}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other__"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"accepted", ",", "nextAccept"}], "}"}], ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"removeElems", "=", 
           RowBox[{"ReplaceAll", "[", 
            RowBox[{
             RowBox[{"GeometricProduct", "@@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "nextAccept"}], "}"}], "]"}], "&"}], "/@", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"{", "accepted", "}"}], "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{"-", "any_"}], "\[RuleDelayed]", "any"}]}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "other", "}"}], ",", 
           RowBox[{"Alternatives", "@@", "removeElems"}]}], "]"}]}], "]"}]}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "nextAccept_", "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", "Nothing"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "Nothing"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Function ",
 StyleBox["gaPrimitiveIdempotent[al_Cl] ",
  FontWeight->"Bold"],
 " returns list of primitive idempotens of algebra. Geometric multiplication \
of list element will give representative of primitive idempotent. Different \
representatives can be obtained either by using different sorting of \
monomials or by manually selecting prefered blades, or combining both. The ",
 "res",
 "ult then is checked if proper number of required product blades is \
obtained.  "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "moreNumberOfPrimitives"}], "=", 
   "\"\<Number of expected commuting idempotents for complex algebra `1` is \
`3`. Taking the first `2` out of `4` possible. \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
    "=", "\"\<Radon-Hurwitz number of expected commuting idempotents for \
algebra `1` is `2`. It does not match length of result. Something goes wrong.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "option"}], "=", 
    "\"\<Option `1` can take values `2`. Default value `3` is used.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", " ", 
     RowBox[{"StartingElement", "\[Rule]", "1"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}], ",", 
     RowBox[{"HermitianOnly", "\[Rule]", "True"}], ",", 
     RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"TransformationFunction", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "base", ",", "ord", ",", "positiveBlades", ",", 
       "commutingPositiveBlades", ",", "commutingPositiveBladesProductFree", 
       ",", "idempotentList", ",", "expectedNumberOfPrimitiveIdempotents", 
       ",", "expectedNumberOfPrimitiveIdempotentsAutomatic", ",", 
       "commutingPositiveBladesProductFreeTransformed", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"theDomain", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "CoefficientDomain"}], 
           "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"startElement", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"StartingElement", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaPrimitiveIdempotent", ",", "StartingElement"}], 
             "]"}]}], ")"}], "}"}], "]"}]}], ",", 
       RowBox[{"quiet", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "Quiet"}], "]"}]}], ")"}]}], 
       ",", 
       RowBox[{"hermitianCase", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"HermitianOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "HermitianOnly"}], "]"}]}], 
         ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"tf", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"TransformationFunction", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "TransformationFunction"}], 
           "]"}]}], ")"}]}], ",", 
       RowBox[{"of", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"OutputForm", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "OutputForm"}], "]"}]}], 
         ")"}]}], ",", 
       RowBox[{"numberOfIdempotents", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"NumberOfPrimitiveFactors", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "NumberOfPrimitiveFactors"}],
            "]"}]}], ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "automatically", " ", "determined", " ", "or", " ", "manually", " ", 
       "set", " ", "number", " ", "of", " ", "factors", " ", "in", " ", "the",
        " ", "idemportent"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{
       "numberOfIdempotents", ",", "Automatic", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"theDomain", "===", "Reals"}], ",", 
          RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
           RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
            RowBox[{"IntegerPart", "[", 
             RowBox[{
              RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
             "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"_Integer", "?", "Positive"}], ",", 
        RowBox[{
        "expectedNumberOfPrimitiveIdempotents", "=", "numberOfIdempotents"}], 
        ",", "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaPrimitiveIdempotent", ",", "Bold"}], "]"}], ",", " ", 
           "NumberOfPrimitiveFactors", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Automatic\>\"", ",", "\"\<_Integer?Positive\>\""}], 
            "}"}], ",", "\"\<Automatic\>\""}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theDomain", "===", "Reals"}], ",", 
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
            RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
             RowBox[{"IntegerPart", "[", 
              RowBox[{
               RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}],
               "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "the", " ", "correct", " ", "values", " ", "of", " ", "idempotent", 
        " ", "factors", " ", "should", " ", "be"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theDomain", "===", "Reals"}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=", 
         RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}], ",", 
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=", 
         RowBox[{"IntegerPart", "[", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "/", "2"}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", "\"\<Expected number of idempotents is \>\"",
                  "]"}], ",", 
                RowBox[{
                "ExpressionCell", "[", 
                 "expectedNumberOfPrimitiveIdempotentsAutomatic", "]"}]}], 
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "expected", " ", "number", " ", "of", " ", "idempotents", 
         " ", "is", " ", "zero"}], ",", " ", 
        RowBox[{"we", " ", "have", " ", "a", " ", "trivial", " ", "case"}], 
        ",", " ", 
        RowBox[{"skip", " ", "all", " ", "steps"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"expectedNumberOfPrimitiveIdempotentsAutomatic", "=!=", "0"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"set", " ", "ordering"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ord", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{
             "gaPrimitiveIdempotent", ",", "gaNonCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], "===", 
             "gaOrthonormalBasis"}], ")"}], ",", "\[IndentingNewLine]", 
           RowBox[{"base", "=", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{"Format", "->", "\"\<AdditiveRepresentation\>\""}], ",", 
              RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
              RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}]}], 
             "]"}]}], ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "ord", ",", "All"}], "]"}], ",", 
                "_Association"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"base", "=", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", "ord", ",", "All"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
               RowBox[{"gaRunningAlgebra", "=", "al"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"base", "=", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"gaAdditiveRepresentation", "[", 
                   RowBox[{"gaOrthonormalBasis", "[", 
                    RowBox[{"al", ",", "ord", ",", "All"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
               RowBox[{"gaRunningAlgebra", "=", "al"}]}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"which", " ", "blades", " ", "squares", " ", "to"}], " ", 
           "+", "1"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"theDomain", "===", "Reals"}], ",", 
           RowBox[{"(*", " ", 
            RowBox[{"real", " ", "algebra", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"positiveBlades", "=", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{"base", ",", "1"}], "]"}], ",", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], "&"}], 
                 ")"}]}], "]"}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"complex", " ", "algebra", " ", "case"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"positiveBlades", "=", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], ",", "#", 
                   ",", 
                   RowBox[{"I", "#"}]}], "]"}], "&"}], "/@", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{"base", ",", "1"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"hermitianCase", ",", 
              RowBox[{"positiveBlades", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{"positiveBlades", ",", 
                 RowBox[{"_", "?", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Not", "[", 
                    RowBox[{"gaHermitianQ", "[", "#", "]"}], "]"}], "&"}], 
                   ")"}]}]}], "]"}]}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "quiet"}], ",", 
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", "\"\<Blades, which square to 1 are \>\"", 
                    "]"}], ",", 
                   RowBox[{"ExpressionCell", "[", "positiveBlades", "]"}]}], 
                  "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"which", " ", "commutes"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"commutingPositiveBlades", "=", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Last", "[", 
            RowBox[{"Reap", "[", 
             RowBox[{"NestWhile", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"commutingWithElement", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
                  RowBox[{
                  "gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}]}], 
                 "]"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"positiveBlades", ",", "startElement"}], "}"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "0"}], "&"}]}],
               "]"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "quiet"}], ",", 
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", 
                    "\"\<Full system of commuting blades are\>\"", "]"}], ",", 
                   RowBox[{
                   "ExpressionCell", "[", "commutingPositiveBlades", "]"}]}], 
                  "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"commutingPositiveBladesProductFree", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Reap", "[", 
            RowBox[{"removeProductsOfElements", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "commutingPositiveBlades"}], "]"}], 
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
            RowBox[{
            "Length", "[", "commutingPositiveBladesProductFree", "]"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaPrimitiveIdempotent", "::", "moreNumberOfPrimitives"}], ",", 
              "al", ",", "expectedNumberOfPrimitiveIdempotents", ",", 
              "expectedNumberOfPrimitiveIdempotentsAutomatic", ",", 
              RowBox[{"Length", "[", "commutingPositiveBlades", "]"}]}], 
             "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"commutingPositiveBladesProductFree", "=", 
             RowBox[{"Take", "[", 
              RowBox[{"commutingPositiveBlades", ",", 
               RowBox[{"Min", "[", 
                RowBox[{"expectedNumberOfPrimitiveIdempotents", ",", 
                 RowBox[{"Length", "[", "commutingPositiveBlades", "]"}]}], 
                "]"}]}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"tf", "===", "None"}], ",", "\[IndentingNewLine]", 
           RowBox[{
           "commutingPositiveBladesProductFreeTransformed", "=", 
            "commutingPositiveBladesProductFree"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"commutingPositiveBladesProductFreeTransformed", "=", 
            RowBox[{"tf", "/@", "commutingPositiveBladesProductFree"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"idempotentList", "=", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "2"}], ")"}], 
             RowBox[{"(", 
              RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
           "commutingPositiveBladesProductFreeTransformed"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
            RowBox[{
            "Length", "[", "commutingPositiveBladesProductFree", "]"}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
             ",", "al", ",", "expectedNumberOfPrimitiveIdempotents"}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"make", " ", "requested", " ", "answer", " ", "form"}], " ",
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "of", ",", "\[IndentingNewLine]", "\"\<IdempotentFactors\>\"", ",", 
           
           RowBox[{"GeometricProduct", "@@", "idempotentList"}], ",", 
           "\[IndentingNewLine]", "\"\<Blades\>\"", ",", 
           "commutingPositiveBladesProductFreeTransformed", ",", 
           "\[IndentingNewLine]", "\"\<AllSignatures\>\"", ",", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Outer", "[", 
               RowBox[{"GeometricProduct", ",", "##"}], "]"}], "&"}], "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "/", "2"}], ")"}], 
                   RowBox[{"(", 
                    RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
                 RowBox[{"Times", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "#"}], "]"}]}], "&"}], "/@",
                "commutingPositiveBladesProductFreeTransformed"}], ")"}]}], 
            "]"}], ",", "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionValue", "::", "option"}], ",", 
              RowBox[{"Style", "[", 
               RowBox[{"gaPrimitiveIdempotent", ",", "Bold"}], "]"}], ",", 
              " ", "OutputForm", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<IdempotentFactors\>\"", ",", "\"\<Blades\>\"", ",", 
                "\"\<AllSignatures\>\""}], "}"}], ",", 
              "\"\<IdempotentFactors\>\""}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"GeometricProduct", "@@", "idempotentList"}]}]}], "]"}]}],
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"of", "===", "\"\<AllSignatures\>\""}], ",", 
          RowBox[{"{", "1", "}"}], ",", "1"}], "]"}]}], "\[IndentingNewLine]",
        "]"}]}]}], " ", 
    RowBox[{"(*", 
     RowBox[{"end", " ", "trivial", " ", "case"}], "*)"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Ideals"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["\<\
The toRCHFactors factors double side ideal into fields \
\[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \[DoubleStruckCapitalH] \
(not in most general form yet)\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "nounit"}], "=", 
   "\"\<The field `1` has no element which plays the role of unit or has more \
than one such element. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "false"}], "=", 
   "\"\<The double sided ideal  `1` does not represent a known field \
\[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \[DoubleStruckCapitalH] or \
complex \[DoubleStruckCapitalH]. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "CommutativeUnit"}], "=", 
   "\"\<The  `1` commutes with all elements of `2`, but does not represent \
imaginary or hyperbolic unit. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "nonseparable"}], "=", 
   "\"\<The double sided ideal part `1`, cannot be further factored into \
direct product of \[DoubleStruckCapitalR], \[DoubleStruckCapitalC], \
\[DoubleStruckCapitalH]. Don't know how to proceed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toRCHFactors", "::", "NotImplemented"}], "=", 
   "\"\<The double sided ideal `1` can contain more commuting quaternion \
fields, however factorization is not yet implemented. Proceeding without \
identification with known division rings \[DoubleStruckCapitalR], \
\[DoubleStruckCapitalC], \[DoubleStruckCapitalH].\>\""}], ";"}]}], "Input"],

Cell["\<\
Remove elements after  some field was found and check if candidates satisfy \
all requirements. The finishing condition is \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{
     RowBox[{"{", "factors__List", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"{", "factors", "}"}]}], ";"}]], "Input"],

Cell["If proper candidate was not found leave field as is ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{
     RowBox[{"{", "factors__List", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", "factors", "}"}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", "#"}], "}"}], "&"}], "/@", 
       RowBox[{"{", "remaining", "}"}]}], ")"}]}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanRCHList", "[", 
    RowBox[{"factors_List", ",", 
     RowBox[{"{", "candidates__", "}"}], ",", 
     RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"found", "=", 
        RowBox[{"First", "/@", 
         RowBox[{"{", "candidates", "}"}]}]}], ",", 
       RowBox[{"confirmed", "=", 
        RowBox[{"First", "/@", "factors"}]}], ",", "allObtained", ",", 
       "productsOfFound", ",", "restElems"}], "}"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
      "remove", " ", "candidates", " ", "from", " ", "remaining", " ", 
       "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allObtained", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"found", ",", "confirmed"}], "}"}], "]"}]}], ";", 
      RowBox[{"productsOfFound", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Outer", "[", 
           RowBox[{
           "GeometricProduct", ",", "allObtained", ",", "allObtained"}], 
           "]"}], "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"restElems", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"{", "remaining", "}"}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"Expand", "/@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"allObtained", ",", 
               RowBox[{"-", "allObtained"}], ",", "productsOfFound", ",", 
               RowBox[{"-", "productsOfFound"}]}], "}"}], "]"}]}], ")"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "check", " ", "if", " ", "restElems", " ", "commute", " ", "with", " ",
         "candidates"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"restElems", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Select", "[", 
                RowBox[{"restElems", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"{", "candidates", "}"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], 
                    "\[GeometricProduct]", "#"}], "-", 
                    RowBox[{"#", "\[GeometricProduct]", 
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"{", "candidates", "}"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "]"}], "]"}], "=!=",
                     "0"}], "&"}], ")"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{"Length", "[", 
                  RowBox[{"{", "candidates", "}"}], "]"}]}], "}"}]}], "]"}], 
             "]"}], ")"}], "===", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"getRCHFactor", "[", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"factors", ",", 
              RowBox[{"{", "candidates", "}"}]}], "]"}], ",", "restElems", 
            ",", "idempotent"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"toRCHFactors", "::", "nonseparable"}], ",", 
             RowBox[{"{", "remaining", "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"getRCHFactor", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"factors", ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "#"}], "}"}], "&"}], "/@", 
                 RowBox[{"{", "remaining", "}"}]}], ")"}]}], "]"}], ",", 
             RowBox[{"{", "}"}], ",", "idempotent"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"if", " ", "restElemens", " ", "emty"}], ",", " ", 
          RowBox[{"all", " ", "finished"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"getRCHFactor", "[", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", "candidates", "}"}]}], "]"}], ",", "restElems", ",", 
          "idempotent"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell["\<\
Start by looking for unity, then for imaginary unity, then for hyperbolic \
unity and lastly for quaternion units\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getRCHFactor", "[", 
    RowBox[{"fin_List", ",", 
     RowBox[{"{", "}"}], ",", "_"}], "]"}], ":=", "fin"}], ";"}]], "Input",
 CellChangeTimes->{{3.747624054426385*^9, 3.747624111929756*^9}, {
  3.747637402549571*^9, 3.747637404202412*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"getRCHFactor", "[", 
      RowBox[{"factors_List", ",", 
       RowBox[{"{", "remaining__", "}"}], ",", "idempotent_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "candidateForUnit", ",", "productsOfFound", ",", 
         "commutingWithAllPos", ",", "commutingWithAll", ",", 
         "imaginaryUnits", ",", "hyperbolicUnits", ",", 
         "nonCommutingQuaternionLike", ",", "nonCommutingWithFirstList", ",", 
         "quaternionUnits", ",", "commutingWith3Pos", ",", "qu"}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"Which", "[", 
        RowBox[{"(*", " ", 
         RowBox[{
         "first", " ", "try", " ", "to", " ", "find", " ", "element", " ", 
          "with", " ", "unity", " ", "role"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"candidateForUnit", "=", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Expand", "[", 
                RowBox[{"gaPE", "[", 
                 RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===",
                "#"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "candidateForUnit", "]"}], "=!=", "0"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"cleanRCHList", "[", 
          RowBox[{"factors", ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"candidateForUnit", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "1"}], "}"}], "}"}], ",", 
           
           RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "try", " ", "to", " ", "find", " ", "positive", " ", 
           "commuting", " ", "which", " ", "squares", " ", "to", " ", "found",
            " ", "unity"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"commutingWithAllPos", "=", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"Outer", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#1", "\[GeometricProduct]", "#2"}], "-", 
                    RowBox[{"#2", "\[GeometricProduct]", "#1"}]}], ")"}], 
                  "]"}], "]"}], "&"}], ",", 
               RowBox[{"{", "remaining", "}"}], ",", 
               RowBox[{"{", "remaining", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ".."}], "}"}]}], "]"}]}], ";", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "commutingWithAllPos", "]"}], "=!=", "0"}],
            ")"}]}], ",", 
         RowBox[{
          RowBox[{"commutingWithAll", "=", 
           RowBox[{"Extract", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", "commutingWithAllPos"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"imaginaryUnits", "=", 
                RowBox[{"Select", "[", 
                 RowBox[{"commutingWithAll", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===", 
                    RowBox[{"-", "idempotent"}]}], ")"}], "&"}]}], "]"}]}], 
               ")"}], ",", 
              RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"cleanRCHList", "[", 
             RowBox[{"factors", ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"imaginaryUnits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "I"}], "}"}], "}"}], 
              ",", 
              RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"hyperbolicUnits", "=", 
                  RowBox[{"Select", "[", 
                   RowBox[{"commutingWithAll", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===",
                     "idempotent"}], ")"}], "&"}]}], "]"}]}], ")"}], ",", 
                RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"cleanRCHList", "[", 
               RowBox[{"factors", ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"hyperbolicUnits", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "HyperbolicUnit"}], 
                  "}"}], "}"}], ",", 
                RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}], 
              ",", " ", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"toRCHFactors", "::", "CommutativeUnit"}], ",", 
                 "commutingWithAll", ",", 
                 RowBox[{"{", "remaining", "}"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
         ",", 
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "try", " ", "to", " ", "find", " ", "quaternion", " ", 
           "system"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"nonCommutingQuaternionLike", "=", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"{", "remaining", "}"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"#", "\[GeometricProduct]", "#"}], "]"}], "]"}], "===", 
                RowBox[{"-", "idempotent"}]}], ")"}], "&"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "nonCommutingQuaternionLike", "]"}], 
            "\[GreaterEqual]", "3"}], ")"}]}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"nonCommutingWithFirstList", "=", 
               RowBox[{"Select", "[", 
                RowBox[{"nonCommutingQuaternionLike", ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[GeometricProduct]", 
                    "#"}], "-", 
                    RowBox[{"#", "\[GeometricProduct]", 
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], "]"}], "=!=", 
                    "0"}], ")"}], "&"}]}], "]"}]}], ",", 
              RowBox[{"{", "__", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"quaternionUnits", "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"nonCommutingQuaternionLike", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"nonCommutingWithFirstList", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{
                    RowBox[{"nonCommutingQuaternionLike", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"nonCommutingWithFirstList", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "]"}]}], 
               "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"qu", "=", 
           RowBox[{"Unique", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"cleanRCHList", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"quaternionUnits", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], ",", 
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                  "\"\<Quaternion\>\"", ",", "qu"}], "]"}]}], "}"}]}], "}"}], 
            ",", 
            RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}]}], 
         "\[IndentingNewLine]", ",", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "if", " ", "quaternion", " ", "candidates", " ", "not", " ", 
           "found", " ", "leave", " ", "as", " ", "is"}], "*)"}], 
         "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"toRCHFactors", "::", "nonseparable"}], ",", 
            RowBox[{"{", "remaining", "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"cleanRCHList", "[", 
           RowBox[{"factors", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "remaining", "}"}], ",", "idempotent"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeReplRule", "[", 
    RowBox[{"{", 
     RowBox[{"field_", ",", "value_"}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"factors", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Internal`SyntacticNegativeQ", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "[", 
        RowBox[{"FactorTermsList", "[", "field", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"field", ",", 
       RowBox[{"Rule", "[", 
        RowBox[{
         RowBox[{"factors", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"factors", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "*", "value"}]}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"semisimpleClAlgebraQ", "[", 
    RowBox[{"alg_Cl", ",", 
     RowBox[{"theDomain", ":", 
      RowBox[{"(", 
       RowBox[{"Reals", "|", "Complexes"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{"theDomain", ",", "Reals", ",", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "-", 
          RowBox[{"2", 
           RowBox[{"Length", "[", 
            RowBox[{"gaNegativeSignatureIndexList", "[", "alg", "]"}], 
            "]"}]}]}], ")"}], ",", "4"}], "]"}], "===", "1"}], " ", ",", 
     "Complexes", ",", 
     RowBox[{"OddQ", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sameTestForUnion", "[", "Reals", "]"}], "=", 
   RowBox[{"Hold", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", "#2"}], "]"}], "===", "0"}], ")"}]}], "&"}], 
     ")"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sameTestForUnion", "[", "Complexes", "]"}], "=", 
   RowBox[{"Hold", "[", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", "#2"}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "+", 
           RowBox[{"I", "*", "#2"}]}], "]"}], "===", "0"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Expand", "[", 
          RowBox[{"#1", "-", 
           RowBox[{"I", "*", "#2"}]}], "]"}], "===", "0"}], ")"}]}], "&"}], 
     ")"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coefficientFreedom", "[", "Reals", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coefficientFreedom", "[", "Complexes", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "I", ",", 
     RowBox[{"-", "I"}]}], "}"}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left ideal "
}], "Subsubsection",
 CellChangeTimes->{{3.747464494980362*^9, 3.747464498942905*^9}}],

Cell[TextData[{
 "Function ",
 StyleBox["gaLeftIdeal[al_Cl,idempotend, order, opts] ",
  FontWeight->"Bold"],
 " returns left ideal of algebra generated using the given idempotent. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], "=", 
   "\"\<The algebra `1` is not simple. Only one instance of left ideal is \
generated.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "::", "BasisNotDefined"}], "=", 
   "\"\<The basis `1` is not not defined. Define using `2`.\>\""}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLeftIdeal", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaLeftIdeal", "[", 
   RowBox[{"idempotent_", ",", 
    RowBox[{"order", ":", 
     RowBox[{"(", 
      RowBox[{
      "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
       "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
       "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
       "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
       "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
       "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alg", "=", 
        RowBox[{"First", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"idempotent", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}],
        ",", 
       RowBox[{"(", 
        RowBox[{"quiet", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Quiet", "/.", 
            RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
          RowBox[{"Options", "[", "gaLeftIdeal", "]"}]}]}], ")"}], ",", 
       RowBox[{"theDomain", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"CoefficientDomain", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaLeftIdeal", ",", "CoefficientDomain"}], "]"}]}], 
         ")"}]}], ",", "rawAnswer", ",", "answer", ",", "theIdealBoxes", ",", 
       "semisimpleQ"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"semisimpleQ", "=", 
       RowBox[{"semisimpleClAlgebraQ", "[", 
        RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"semisimpleQ", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], ",", "alg"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Warn", " ", "when", " ", "idempotent", " ", "contains", " ", 
        "complex", " ", "number", " ", "and", " ", "CoefficientDomain", " ", 
        "is", " ", "set", " ", "to", " ", "Reals"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"theDomain", "===", "Reals"}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{"!", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"idempotent", ",", "_Complex"}], "]"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"TextCell", "[", 
                RowBox[{"Style", "[", 
                 RowBox[{
                 "\"\<Warning! gaIdempotent and gaLeftIdeal are has diffrent \
setting for CoefficientDomain! Hope you know what you are doing.\>\"", " ", 
                  ",", "Red"}], "]"}], "]"}], "}"}], "]"}], "}"}], "]"}], 
           "]"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "orthonormal", " ", "basis", " ", "of", " ", "required", 
         " ", "ordering", " ", "is", " ", "not", " ", "defined"}], ",", " ", 
        RowBox[{"then", " ", "define"}]}], " ", "*)"}], "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alg", ",", "order", ",", "All"}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaLeftIdeal", "::", "BasisNotDefined"}], ",", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"alg", ",", "order", ",", "All"}], "]"}], ",", 
           RowBox[{"\"\<gaDefineOrthonormalBasis[\>\"", "<>", 
            RowBox[{"ToString", "[", "alg", "]"}], "<>", "\"\<,\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", 
              RowBox[{"order", "<>", "\"\<]\>\""}]}], "]"}]}]}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"rawAnswer", "=", 
       RowBox[{"Union", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"gaPE", "[", 
             RowBox[{"(", 
              RowBox[{"#", "\[GeometricProduct]", "idempotent"}], ")"}], 
             "]"}], "&"}], "/@", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"alg", ",", "order", ",", "All"}], "]"}]}], ")"}], ",", 
         RowBox[{"SameTest", "\[Rule]", 
          RowBox[{"ReleaseHold", "[", 
           RowBox[{"sameTestForUnion", "[", "theDomain", "]"}], "]"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "complex", " ", "algebras", " ", "make", " ", "scalar", 
        " ", "part", " ", "real"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"theDomain", "===", "Complexes"}], ",", 
        RowBox[{"rawAnswer", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaGetMV", "[", 
                RowBox[{
                 RowBox[{"Expand", "[", "#", "]"}], ",", 
                 RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "===", "Complex"}], 
             ",", 
             RowBox[{"Expand", "[", 
              RowBox[{
               RowBox[{"(", "I", ")"}], "*", "#"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "rawAnswer"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "make", " ", "scalar", " ", "part", " ", "positive", " ", "an", " ", 
        "sort"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"gaSort", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Internal`SyntacticNegativeQ", "[", 
              RowBox[{"Expand", "[", "#", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], "&"}], "/@",
           "rawAnswer"}], ",", "order"}], "]"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", "\"\<The left ideal sorted by \>\"", "]"}],
                   ",", 
                  RowBox[{"ExpressionCell", "[", "order", "]"}], ",", 
                  RowBox[{"TextCell", "[", "\"\< order is\>\"", "]"}]}], 
                 "}"}], "]"}], ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{"ExpressionCell", "[", "answer", "]"}], "}"}], 
                "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "answer"}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"idempotent", "=!=", "1"}]}]}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdeal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"gaRunningAlgebra", ",", "order", ",", "All"}], "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Double sided ideal"
}], "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDoubleSidedIdeal", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<ElementsOnly\>\""}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], ";"}]], "Input"],

Cell["\<\
Output form \[OpenCurlyDoubleQuote]ElementsReplacementRules\
\[CloseCurlyDoubleQuote] is used for computation of ideal basis, all other \
forms being for investigation\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDoubleSidedIdeal", "[", 
   RowBox[{
    RowBox[{"idempotent_", "?", "gaIdempotentQ"}], ",", "leftideal_List", ",", 
    RowBox[{"order", ":", 
     RowBox[{"(", 
      RowBox[{
      "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
       "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
       "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
       "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
       "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
       "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"alg", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"leftideal", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}], 
      ",", "theFieldAndName", ",", "half1", ",", "theSortedField", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", "gaDoubleSidedIdeal", "]"}]}]}], ")"}], ",", 
      
      RowBox[{"theDomain", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"CoefficientDomain", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaDoubleSidedIdeal", ",", "CoefficientDomain"}], "]"}]}], 
        ")"}]}], ",", 
      RowBox[{"of", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"OutputForm", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaDoubleSidedIdeal", ",", "OutputForm"}], "]"}]}], ")"}]}],
       ",", "rawAnswer", ",", "answer"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"rawAnswer", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"idempotent", "\[GeometricProduct]", "#"}], "]"}], 
             "&"}], "/@", "leftideal"}], ")"}], ",", 
          RowBox[{"SameTest", "\[Rule]", 
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"sameTestForUnion", "[", "theDomain", "]"}], "]"}]}]}], 
         "]"}], ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "for", " ", "complex", " ", "algebras", " ", "make", " ", "scalar", " ",
        "part", " ", "real"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"theDomain", "===", "Complexes"}], ",", 
       RowBox[{"rawAnswer", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{
                RowBox[{"Expand", "[", "#", "]"}], ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "===", "Complex"}], 
            ",", 
            RowBox[{"Expand", "[", 
             RowBox[{
              RowBox[{"(", "I", ")"}], "*", "#"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "rawAnswer"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "make", " ", "scalar", " ", "part", " ", "positive", " ", "an", " ", 
       "sort"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"theSortedField", "=", 
      RowBox[{"gaSort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Internal`SyntacticNegativeQ", "[", 
             RowBox[{"Expand", "[", "#", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], "&"}], "/@",
          "rawAnswer"}], ",", "order"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "TextCell", "[", "\"\<The double sided ideal sorted by \>\"",
                   "]"}], ",", 
                 RowBox[{"ExpressionCell", "[", "order", "]"}], ",", 
                 RowBox[{"TextCell", "[", "\"\< order is\>\"", "]"}]}], "}"}],
                "]"}], ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"ExpressionCell", "[", "theSortedField", "]"}], "}"}],
                "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", "interpretation", " ", "was", " ", "requested"}], 
       ",", " ", 
       RowBox[{"do", " ", "aaditional", " ", "job"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"of", "=!=", "\"\<ElementsOnly\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theFieldAndName", "=", 
         RowBox[{"getRCHFactor", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"Expand", "/@", "theSortedField"}], ",", " ", 
           RowBox[{"Expand", "[", 
            RowBox[{"gaPE", "[", "idempotent", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"half1", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Expand", "[", 
             RowBox[{"gaPE", "[", "#", "]"}], "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Outer", "[", 
                 RowBox[{"GeometricProduct", ",", "#", ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Transpose", "[", 
                RowBox[{"(", 
                 RowBox[{"theFieldAndName", "/.", 
                  RowBox[{"{", 
                   RowBox[{"HyperbolicUnit", "\[Rule]", "1"}], "}"}]}], ")"}],
                 "]"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"answer", "=", 
         RowBox[{"Transpose", "[", 
          RowBox[{"(", 
           RowBox[{"makeReplRule", "/@", 
            RowBox[{"(", 
             RowBox[{"Union", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Internal`SyntacticNegativeQ", "[", 
                   RowBox[{"Expand", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "#"}], ",", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Transpose", "[", "half1", "]"}]}], "]"}], ")"}]}], 
           ")"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"make", " ", "requested", " ", "answer", " ", "form"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "of", ",", "\[IndentingNewLine]", "\"\<ElementsOnly\>\"", ",", 
       "theSortedField", ",", "\[IndentingNewLine]", 
       "\"\<ElementsWithInterpretation\>\"", ",", 
       RowBox[{"UndirectedEdge", "@@@", "theFieldAndName"}], ",", 
       "\[IndentingNewLine]", "\"\<ElementsReplacementRules\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Ordering", " ", "in", " ", "answer", " ", "and", " ", 
          "theSortedField", " ", 
          RowBox[{
           RowBox[{"differ", "!!"}], "!"}], " ", "In", " ", "answer", " ", 
          "they", " ", "are", " ", "ordered", " ", "by", " ", 
          RowBox[{"meaning", ":", " ", "scalar"}]}], ",", " ", "imaginary", 
         ",", " ", "Q"}], " ", "*)"}], "\[IndentingNewLine]", "answer", ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", 
          RowBox[{"gaDoubleSidedIdeal", "::", "option"}], ",", " ", 
          "OutputForm", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<ElementsOnly\>\"", ",", "\"\<ElementsWithInterpretation\>\"", 
            ",", "\"\<ElementsReplacementRules\>\""}], "}"}], ",", 
          "\"\<ElementsOnly\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        "theSortedField"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Left ideal basis"
}], "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], "=", 
   "\"\<The algebra `1` is not simple. Only one instance of left ideal basis \
is generated.\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "[", 
    RowBox[{"leftIdeal_", ",", "fieldOnly_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"alg", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"fieldOnly", ",", "_Cl", ",", "Infinity"}], "]"}], "]"}]}],
         ",", "semisimpleQ", ",", "theLeftMinimaIdealBasisA", ",", 
        RowBox[{"(", 
         RowBox[{"quiet", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"Options", "[", "gaLeftIdealBasis", "]"}]}]}], ")"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"theDomain", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"CoefficientDomain", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaLeftIdealBasis", ",", "CoefficientDomain"}], "]"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"semisimpleQ", "=", 
        RowBox[{"semisimpleClAlgebraQ", "[", 
         RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"semisimpleQ", ",", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaLeftIdeal", "::", "NotSimpleAlgebra"}], ",", "alg"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"theLeftMinimaIdealBasisA", "=", 
        RowBox[{"gaSort", "[", 
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"leftIdeal", ",", 
            RowBox[{"SameTest", "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Expand", "/@", 
                   RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{
                    RowBox[{"coefficientFreedom", "[", "theDomain", "]"}], 
                    "*", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "x"}], "]"}], "]"}]}]}], "]"}], "/@", 
                    RowBox[{"(", "fieldOnly", ")"}]}], "]"}]}], ")"}], ",", 
                 RowBox[{"Expand", "[", 
                  RowBox[{"gaPE", "[", "#2", "]"}], "]"}]}], "]"}], "&"}], 
              ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", "order"}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<The left minimal ideal basis sorted by \>\"", "]"}], 
                  ",", 
                  RowBox[{"ExpressionCell", "[", "order", "]"}], ",", 
                  RowBox[{"TextCell", "[", "\"\< order is\>\"", "]"}]}], 
                 "}"}], "]"}], ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "ExpressionCell", "[", "theLeftMinimaIdealBasisA", "]"}], 
                 "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "theLeftMinimaIdealBasisA"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"leftIdeal", "=!=", "fieldOnly"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLeftIdealBasis", "[", 
    RowBox[{"leftIdeal_", ",", "fieldOnly_", ",", 
     RowBox[{"order", ":", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Lex\>\"", "|", "\"\<InvLex\>\"", "|", "\"\<RevLex\>\"", "|", 
        "\"\<InvRevLex\>\"", "|", "\"\<Deg[Lex]\>\"", "|", 
        "\"\<Deg[InvLex]\>\"", "|", "\"\<Deg[RevLex]\>\"", "|", 
        "\"\<Deg[InvRevLex]\>\"", "|", "\"\<InvDeg[Lex]\>\"", "|", 
        "\"\<InvDeg[InvLex]\>\"", "|", "\"\<InvDeg[RevLex]\>\"", "|", 
        "\"\<InvDeg[InvRevLex]\>\""}], ")"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", "1", "}"}], "/;", 
    RowBox[{"leftIdeal", "===", "fieldOnly"}]}]}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Spinors"
}], "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSpinor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaPrimitiveIdempotent", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"StartingElement", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}]}], 
       "}"}]}], ",", 
     RowBox[{
     "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "\[Rule]", 
      
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"gaSpinorIdempotent", "\[Rule]", "1"}], ",", 
     RowBox[{"GeneratedParameters", "\[Rule]", "C"}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "->", "\"\<RevLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "\[Rule]", 
      "\"\<InvLex\>\""}], ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSpinor", "::", "idempotent"}], "=", 
   "\"\<Provided idempotents `1` do not pass gaIdempotendQ[] test.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSpinor", "[", 
   RowBox[{"alg_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "gaSpinor", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"precomputedInput", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals", "]"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"OptionValue", "[", "gaPrimitiveIdempotent", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"spinorIdempotent", "=", 
       RowBox[{"OptionValue", "[", "gaSpinorIdempotent", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"coefficientName", "=", 
       RowBox[{"OptionValue", "[", "GeneratedParameters", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"OptionValue", "[", "Quiet", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theDomain", "=", 
       RowBox[{"OptionValue", "[", "CoefficientDomain", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theOrderA", "=", 
       RowBox[{"OptionValue", "[", "gaNonCommutativeMonomialOrder", "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"theOrderB", "=", 
       RowBox[{
       "OptionValue", "[", 
        "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "]"}]}], 
      ",", "\[IndentingNewLine]", "mutuallyAnihilatingIdempotents", ",", 
      "theIdempotent", ",", "leftIdeal", ",", "divisionRing", ",", 
      "idealBasis", ",", "lengthOfIdealBasis", ",", "lengthOfDivisionRing", 
      ",", "spinorCoeffs", ",", "divisionRingWithReplacementRules", ",", 
      "matrixRepr", ",", "divisionRingPrecomp", ",", 
      "lengthOfMutuallyAnihilatingIdempotents", ",", "semisimpleQ"}], "}"}], 
    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "determine", " ", "if", " ", "precomputed", " ", "structure", " ", "is",
        " ", "provided"}], ",", " ", 
      RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", 
       RowBox[{"CellPrint", "[", 
        RowBox[{"{", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "TextCell", "[", 
                "\"\<Idempotents are determined using settings \>\"", "]"}], 
               ",", 
               RowBox[{"ExpressionCell", "[", "theIdempotentSetting", "]"}]}],
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"precomputedInput", "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"theIdempotentSetting", ",", 
            RowBox[{"Automatic", "|", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "__"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mutuallyAnihilatingIdempotents", "=", 
            RowBox[{"gaPrimitiveIdempotent", "@@", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"alg", ",", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{"DeleteDuplicatesBy", "[", 
                  RowBox[{
                   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "OutputForm", "\[Rule]", "\"\<AllSignatures\>\""}], ",", 
                    "theIdempotentSetting", ",", 
                    RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
                    RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"gaPrimitiveIdempotent", "/.", 
                    RowBox[{"Options", "[", 
                    RowBox[{
                    "GeometricAlgebra`p`methodDefaults", "[", 
                    "\"\<IdealBasis\>\"", "]"}], "]"}]}], ")"}]}], "}"}], 
                    "]"}], ",", "Automatic"}], "]"}], ",", "First"}], "]"}], 
                 ")"}]}], "}"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{"theIdempotentSetting", ",", "gaIdempotentQ"}], "]"}], 
             ",", 
             RowBox[{
             "mutuallyAnihilatingIdempotents", "=", "theIdempotentSetting"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaSpinor", "::", "idempotent"}], ",", 
                "theIdempotentSetting"}], "]"}], ";", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "TextCell", "[", "\"\<The primitive idempotent is \>\"", 
                    "]"}], "}"}], "]"}], ",", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "ExpressionCell", "[", "mutuallyAnihilatingIdempotents", 
                    "]"}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "mutuallyAnihilatingIdempotents"}], 
         ")"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "all", " ", "left", " ", "ideals"}], "   ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Starting computation of all left ideals, which \
correspond to idempotents \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "}"}], "]"}], 
             "]"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"leftIdeal", "[", "d", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
              "}"}]}], "]"}], "]"}], "=", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"gaLeftIdeal", "[", 
              RowBox[{"#", ",", "theOrderA", ",", 
               RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], "&"}], "/@", 
            "mutuallyAnihilatingIdempotents"}], ")"}]}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "the", " ", "all", " ", "double", " ", "sided", " ", "ideals"}], 
         "  ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", 
                   "\"\<Starting computation of all double sided ideals, \
which correspond to idempotents \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "}"}], "]"}], 
             "]"}], "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], "=", 
            RowBox[{
             RowBox[{"gaDoubleSidedIdeal", "[", 
              RowBox[{
               RowBox[{"theIdempotent", "[", "d", "]"}], ",", 
               RowBox[{"leftIdeal", "[", "d", "]"}], ",", "theOrderA", ",", 
               RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
               RowBox[{
               "OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}], 
              "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
            "}"}]}], "]"}], ")"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", 
          RowBox[{"basis", ":", " ", 
           RowBox[{"only", " ", "one", " ", "needed"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "TextCell", "[", 
                    "\"\<Starting computation of ideal basis, which \
correspond the requested idempotent gaSpinorIdempotent\[Rule]\>\"", "]"}], 
                   ",", 
                   RowBox[{"ExpressionCell", "[", "spinorIdempotent", "]"}]}],
                   "}"}], "]"}], ",", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"TextCell", "[", "\"\<which is \>\"", "]"}], ",", 
                   RowBox[{"ExpressionCell", "[", 
                    RowBox[{"theIdempotent", "[", "spinorIdempotent", "]"}], 
                    "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"spinorIdempotent", ">", 
             RowBox[{"Length", "[", "mutuallyAnihilatingIdempotents", "]"}]}],
             ")"}], "||", 
           RowBox[{"spinorIdempotent", "<", "1"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaOptionValue", "::", "option"}], ",", "gaSpinor", ",", 
             " ", "gaSpinorIdempotent", ",", 
             RowBox[{
             "Range", "[", "lengthOfMutuallyAnihilatingIdempotents", "]"}], 
             ",", "1"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"spinorIdempotent", "=", "1"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
          "\[IndentingNewLine]", 
          RowBox[{"gaLeftIdealBasis", "[", 
           RowBox[{
            RowBox[{"leftIdeal", "[", "spinorIdempotent", "]"}], ",", 
            RowBox[{"divisionRing", "[", "spinorIdempotent", "]"}], ",", 
            "theOrderA", ",", 
            RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
            RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ")"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"precomputed", " ", 
          RowBox[{"input", ":", " ", 
           RowBox[{"no", " ", "checks"}]}]}], ",", " ", 
         RowBox[{"we", " ", "trust", " ", "the", " ", "user"}]}], " ", "*)"}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"TextCell", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Warning! Option \
gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals with user input is \
found in gaSpinor. No check! Most options will be ignored!\>\"", " ", ",", 
                    "Red"}], "]"}], "]"}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"ExpressionCell", "[", "precomputedInput", "]"}], 
                  "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"spinorIdempotent", "=", 
         RowBox[{"precomputedInput", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"lengthOfMutuallyAnihilatingIdempotents", "=", 
         RowBox[{"precomputedInput", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"divisionRingPrecomp", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Evaluate", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"divisionRing", "[", "d", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"d", ",", 
              RowBox[{"Length", "[", "divisionRingPrecomp", "]"}]}], "}"}]}], 
           "]"}], "]"}], "=", "divisionRingPrecomp"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "in", " ", "semisimple", " ", "real", " ", "algebra", " ", "case", " ", 
       "we", " ", "enlarge", " ", "ideal", " ", "basis", " ", "by", " ", 
       "grade", " ", "inverted", " ", "part"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"semisimpleQ", "&&", 
        RowBox[{"(", 
         RowBox[{"theDomain", "===", "Reals"}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaLeftIdealBasis", "::", "NotSimpleAlgebra"}], ",", 
          "alg"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGradeInverse", "[", "#", "]"}], "&"}], "/@", 
             RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}]}]}], "}"}], 
          "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lengthOfDivisionRing", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"divisionRing", "[", "1", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"name", " ", "free", " ", "coefficients"}], ",", " ", 
       RowBox[{
       "which", " ", "will", " ", "appear", " ", "in", " ", "final", " ", 
        "spinor", " ", "expression"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"spinorCoeffs", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"coefficientName", "[", "i", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"lengthOfIdealBasis", "*", "lengthOfDivisionRing"}]}], 
           "}"}]}], "]"}], ",", "lengthOfDivisionRing"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "quiet"}], ",", 
       RowBox[{"CellPrint", "[", 
        RowBox[{"{", 
         RowBox[{"TextCell", "[", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<The general column spinor free coefficients are named \
SpinorCoefficientName\[Rule]\>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "coefficientName", "]"}]}], 
               "}"}], "]"}], ",", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"TextCell", "[", "\"\<which are \>\"", "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "spinorCoeffs", "]"}]}], "}"}],
               "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"spinorCoeffs", "[", 
            RowBox[{"[", "u", "]"}], "]"}], "[", 
           RowBox[{"[", "k", "]"}], "]"}], "*", 
          RowBox[{"gaPE", "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"divisionRing", "[", "d", "]"}], "[", 
               RowBox[{"[", "k", "]"}], "]"}], ")"}], "\[GeometricProduct]", 
             RowBox[{
              RowBox[{"idealBasis", "[", "spinorIdempotent", "]"}], "[", 
              RowBox[{"[", "u", "]"}], "]"}]}], ")"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"divisionRing", "[", "spinorIdempotent", "]"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"u", ",", "lengthOfIdealBasis"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"d", ",", "lengthOfMutuallyAnihilatingIdempotents"}], 
          "}"}]}], "]"}], ",", 
       RowBox[{"Flatten", "[", "spinorCoeffs", "]"}], ",", "Factor"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Tensor products and matrix representation of algebra"
}], "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTensorProduct", ",", "gaAlgebraMultiplicationTable", ",", 
     "gaToTensorProduct", ",", "gaFromTensorProduct", ",", 
     "gaDefineMatrixRepresentation", ",", "ReductionOrder", ",", 
     "gaMatrixRepresentation", ",", "gaToMatrixRepresentation", ",", 
     "gaFromMatrixRepresentation", ",", 
     "gaListDefinedElementaryRepresentations", ",", "BasisVectorsMultipliers",
      ",", "BasisVectorsReordering", ",", "BaseVectorAlgebra", ",", 
     "TargetMatrices", ",", "QuaternionIsomorphismRules", ",", 
     "MatrixOuterProductOrder", ",", "ElementaryRepresentations", ",", 
     "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", 
     ",", "gaSemisimpleAlgebraExtension", ",", "gaReplaceDivisionRing", ",", 
     "gaIdealBasisReordering", ",", "gaIdealBasisMultipliers"}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "::", "usage"}], "=", 
   "\"\<gaTensorProduct[any1,any2] is a notation for any1 \[CircleTimes] \
any2.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "::", "usage"}], "=", 
   "\"\<gaAlgebraMultiplicationTable[algebra] prints algebras multiplication \
table. Option gaGradesOnly->{{},{},...} selects only elements of grades \
{{0},{1},{2},...\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "usage"}], "=", 
   "\"\<gaToTensorProduct[(algebra|gaTensorProduct),opts_\
ReductionAlgebrasOrder] decomposes given algebra into product of algebras \
with p+q=0, i.e. algebras Cl[0,2,0],Cl[1,1,0],Cl[2,0,0]. These reduction \
algebras can be specified with an option in the form of list \
Order->{__algebras} or list of lists \
Order->{{__algebraList1},{__algebraList2},...}. In the first case reduction \
process takes  algebra one by one until list is exhausted. The second form \
aplies reduction cyclically, first using all algebras in the list \
algebraList1, then in algebraList2, ...\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "::", "usage"}], "=", 
   "\"\<gaFromTensorProduct[algebra_gaTensorProduct] returs Clifford algebra, \
which is isomorphics to tensors products of given algebras, i.e. is oposite \
to gaToTensorProduct[ ]. \>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<Unfinished. gaDefineMatrixRepresentation[al_Cl] or \
gaDefineMatrixRepresentation[baseVectorRepresentation_List] constructs matrix \
representation of algebra. \nThe syntax \
gaDefineMatrixRepresentation[al_gaTensorProduct], first calculates direct \
product representation of product al_gaTensorProduct into elementary algebras \
of p+q<=2. Then uses direct product of matrix representation of these \
algebras. When user provides matrix representations of base vectors as a list \
baseVectorRepresentation, all other elements are simply obtained multiplying \
the matrices of these vectors.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<Option for how to select elementary reps.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", "::",
     "usage"}], "=", 
   "\"\<Method suboption of gaDefineMatrixRepresentation. Can be used to \
provide direct data for matrix representation computations. Usage: Method\
\[Rule]{\\\"IdealBasis\\\", \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\[Rule]\
dataMajorana}, where dataMajorana is a list of three elements {the \
idempotent, the ideal basis, the double sided ideal (with element replacement \
rules)}. See detailed example for Dirac, Majorana and chiral representation \
calculation for Cl[1,3].\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSemisimpleAlgebraExtension", "::", "usage"}], "=", 
   "\"\<Method suboption of gaDefineMatrixRepresentation for semisimple \
algebras (odd algebras for complex field and p-q=1 mod 4 for real field). \
Usage: Method\[Rule]{\\\"IdealBasis\\\", \
gaSemisimpleAlgebraExtension->\\\"GradeInvertedLast\\\"|\\\"\
GradeInvertedFirst\\\"}, decide where to put grade inverted ideal basis block \
(after of before) computed ideal basis block.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaReplaceDivisionRing", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation.  \
gaReplaceDivisionRing\[Rule]True|False decides if a double sided ideal in the \
matrix representation should be replaced by its interpretation by standard \
division rings (R, C and H) or should be left as is. If interpretation is \
unknown, do nothing.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIdealBasisReordering", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which reorders ideal basis \
by given order. gaIdealBasisMultipliers option acts before reaordering takes \
place.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaIdealBasisMultipliers", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which multiplies ideal basis \
elements by given numbers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BasisVectorsReordering", "::", "usage"}], "=", 
   "\"\<Option for gaDefineMatrixRepresentation, which reorders basis \
vectors. Should not be confused with similar option, which reorders elements \
of ideal basis.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaDefineMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
command.\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaDefineMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
command.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaToMatrixRepresentation[expr, algebra] converts expression into \
matrix representation. Orthogonal base and algebras matrix representations \
should be calculated in advance (till authomatic representation settings will \
be implemented).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaFromMatrixRepresentation[expr_matrix, algebra] converts matrix \
representation into multivector expression. Orthogonal base and algebras \
matrix representations should be calculated in advance (till authomatic \
representation settings will be implemented).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<gaListDefinedElementaryRepresentations[algebra] or \
gaListDefinedElementaryRepresentations[algebra, representation name] return \
names (or representation itself), which can be used in \
gaDefineMatrixRepresentation[algebra_gaTensorProduct].\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BasisVectorsMultipliers", "::", "usage"}], "=", 
   "\"\<Option, multiplies base matrices by given scalars: Automatic, None or \
_List\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorAlgebra", "::", "usage"}], "=", 
   "\"\<Option, uses given Clifford algebra base vector representation to \
produce required algebra representation. Number of base vectors for requested \
and option provided algebras need be the same\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TargetMatrices", "::", "usage"}], "=", 
   "\"\<Option, points which type, reals or complexes matrices to \
prefer.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"QuaternionIsomorphismRules", "::", "usage"}], "=", 
   "\"\<subOption for gaDefineMatrixRepresentation Method, possible values \
are {\\\"Pauli[1,2]\\\", \\\"HH2R4\\\",\\\"QToRealMatrix\\\"} or True. \
Determines whether quaternions in matrices to be replaced by matrix \
representations or not.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatrixOuterProductOrder", "::", "usage"}], "=", 
   "\"\<subOption for gaDefineMatrixRepresentation Method, possible values \
are {Identity, Reverse}. Determines weather matrix (only!) sequence in the \
Outer product should be reversed or not. Not tested.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ReductionOrder", "::", "usage"}], "=", "\"\<Option, \>\""}], 
  ";"}]}], "Input"],

Cell[TextData[{
 "One needs still to take square root of it according to Ian Porteous in \
RA-LoCGAaA, page 42. ",
 Cell[BoxData[" "], "Text"]
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell["\<\
The matrix representation section is more or less finished by functionality. \
The code, however,  in many places is awful. The ideal method needs \
considerable speedup to get representations of full periodicity table.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation algorithm selection part"
}], "Subsection"],

Cell["\<\
Default settings for each method. They include all possible options for each \
of methods. Other options \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"methodDefaults", "[", "\"\<TensorProduct\>\"", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ElementaryRepresentations", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"BaseVectorAlgebra", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"BasisVectorsMultipliers", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
      RowBox[{"ReductionOrder", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], ",", 
      RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}], ",", 
      RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}]}], "}"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"methodDefaults", "[", "\"\<IdealBasis\>\"", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"gaPrimitiveIdempotent", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", 
        RowBox[{"StartingElement", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{
        "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
        ",", 
        RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}], ",", 
        RowBox[{"NumberOfPrimitiveFactors", "\[Rule]", "Automatic"}]}], 
       "}"}]}], ",", 
     RowBox[{
     "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules", 
      "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"gaNonCommutativeMonomialOrder", "->", "\"\<RevLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "->", 
      "\"\<InvLex\>\""}], ",", 
     RowBox[{
     "gaSemisimpleAlgebraExtension", "\[Rule]", "\"\<GradeInvertedLast\>\""}],
      ",", 
     RowBox[{"CoefficientDomain", "\[Rule]", "Reals"}], ",", 
     RowBox[{"BasisVectorsMultipliers", "\[Rule]", "None"}], ",", 
     RowBox[{"BasisVectorsReordering", "\[Rule]", "None"}], ",", 
     RowBox[{"gaReplaceDivisionRing", "\[Rule]", "True"}], ",", 
     RowBox[{"gaIdealBasisReordering", "\[Rule]", "None"}], ",", 
     RowBox[{"gaIdealBasisMultipliers", "\[Rule]", "None"}]}], "}"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<TensorProduct\>\"", ",", 
        RowBox[{"ElementaryRepresentations", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"BaseVectorAlgebra", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
        RowBox[{"ReductionOrder", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
        ",", 
        RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}]}], "}"}]}],
      ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"BasisVectorsMultipliers", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}], ",", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}]}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "[", "alg_Cl", "]"}], ":=", 
   RowBox[{"gaDefineMatrixRepresentation", "[", 
    RowBox[{"alg", ",", 
     RowBox[{"Sequence", "@@", 
      RowBox[{"Options", "[", "gaDefineMatrixRepresentation", "]"}]}]}], 
    "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "[", 
    RowBox[{"alg_Cl", ",", 
     RowBox[{"opts", ":", 
      RowBox[{
      "OptionsPattern", "[", "gaDefineMatrixRepresentation", "]"}]}]}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"theMethod", "=", 
        RowBox[{"OptionValue", "[", "Method", "]"}]}], ",", 
       "theMethodOptions", ",", "theOtherOptions", ",", 
       RowBox[{"userOpts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"Method", "/.", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "opts", "}"}], "]"}]}], "}"}], ",", "1"}], 
              "]"}], ",", 
             RowBox[{"\"\<TensorProduct\>\"", "|", "\"\<IdealBasis\>\""}]}], 
            "]"}], ",", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"(", 
              RowBox[{"Method", "\[Rule]", "_"}], ")"}], ",", "Infinity"}], 
            "]"}]}], "}"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "theMethod", "]"}], "===", "List"}], ",", 
         RowBox[{"theMethod", "=", 
          RowBox[{"First", "[", "theMethod", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"theMethod", "===", "Automatic"}], ",", 
         RowBox[{"theMethod", "=", "\"\<TensorProduct\>\""}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MatchQ", "[", 
           RowBox[{"theMethod", ",", " ", 
            RowBox[{
            "\"\<TensorProduct\>\"", " ", "|", " ", "\"\<IdealBasis\>\""}]}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaOptionValue", "::", "option"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
            ",", " ", "Method", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<TensorProduct\>\"", ",", "\"\<IdealBasis\>\""}], 
             "}"}], ",", "\"\<Abort[]\>\""}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\t", "\n", "\t", "]"}], 
       ";"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "take", " ", "all", " ", "options", " ", "and", " ", "separate", " ", 
        RowBox[{"(", 
         RowBox[{"with", " ", "completeion"}], ")"}], " ", "method", " ", 
        "options", " ", "and", " ", "other", " ", "options"}], " ", "*)"}], 
      "\[IndentingNewLine]", ";", "\[IndentingNewLine]", 
      RowBox[{"theMethodOptions", "=", "\[IndentingNewLine]", 
       RowBox[{"DeleteDuplicatesBy", "[", 
        RowBox[{
         RowBox[{"Join", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Intersection", "[", 
            RowBox[{"userOpts", ",", 
             RowBox[{"methodDefaults", "[", "theMethod", "]"}], ",", 
             RowBox[{"SameTest", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"First", "[", "#1", "]"}], " ", "===", " ", 
                 RowBox[{"First", "[", "#2", "]"}]}], " ", "&"}], ")"}]}]}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"methodDefaults", "[", "theMethod", "]"}]}], "]"}], ",", 
         "First"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"theOtherOptions", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"userOpts", ",", 
         RowBox[{"methodDefaults", "[", "theMethod", "]"}], ",", 
         RowBox[{"SameTest", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"First", "[", "#1", "]"}], " ", "===", " ", 
             RowBox[{"First", "[", "#2", "]"}]}], " ", "&"}], ")"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "theMethod", ",", "\[IndentingNewLine]", "\"\<TensorProduct\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
         RowBox[{"alg", ",", "theMethodOptions", ",", "theOtherOptions"}], 
         "]"}], ",", "\[IndentingNewLine]", "\"\<IdealBasis\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
         RowBox[{"alg", ",", "theMethodOptions", ",", "theOtherOptions"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input"],

Cell["\<\
Calculation of matrices after vector matrices has been obtained. This part is \
the same for both methods\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "unknownAlgebra"}], "=", 
   "\"\<Unable to determine the algebra.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "lenghtmismatch"}], "=", 
   "\"\<Number of provided base vector matrices `1`, do not match the vector \
space dimension of the algebra `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], "=", 
    "\"\<Matrix representations of computed vectors are WRONG. Investigation \
needed.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"oneGradeRule", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"multIndex_List", ",", "factorIndex_List"}], "}"}], ",", 
        "prevRules_List", ",", "op_", ",", "alg_"}], "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{"multIndex", ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], "->", 
        RowBox[{"op", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "alg"}], "]"}], "&"}], "/@",
              "factorIndex"}], ")"}], "/.", "prevRules"}], ")"}]}]}], ")"}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "gaDefineMatrixRepresentation", "[", "baseVectorRepresentation_List", 
       "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "alg", ",", "optimizedMultiplicationOrder", ",", "opElement", ",", 
           "opMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"alg", "=", 
           RowBox[{"FirstCase", "[", 
            RowBox[{"baseVectorRepresentation", ",", "_Cl", ",", 
             RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"some", " ", "compatibility", " ", "tests"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"alg", "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
              "gaDefineMatrixRepresentation", "::", "unknownAlgebra"}], "]"}],
              ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "=!=", 
             RowBox[{"Length", "[", "baseVectorRepresentation", "]"}]}], ",", 
            
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaDefineMatrixRepresentation", "::", "lenghtmismatch"}], ",", 
               "baseVectorRepresentation", ",", "alg"}], "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "check", " ", "if", " ", "orthonormal", " ", "basis", " ", "is", 
            " ", "available"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"alg", ",", "\"\<InvDeg[Lex]\>\"", ",", "All"}], "]"}],
               "]"}], "===", "gaOrthonormalBasis"}], ",", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"alg", ",", 
              RowBox[{"Format", "->", "\"\<AdditiveRepresentation\>\""}], ",", 
              RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
              ",", 
              RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "determine", " ", "how", " ", "to", " ", "multiply", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Last", "/@", "baseVectorRepresentation"}], ")"}], ",",
               "_bs"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
             RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "here", " ", "we", " ", "minimize", " ", "number", " ", "of", " ", 
            "matrix", " ", "multiplications", " ", "from", " ", "vector", " ",
             "matrices", " ", "to", " ", "all", " ", "algebra", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"optimizedMultiplicationOrder", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Most", "[", "#", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Last", "[", "#", "]"}], "}"}]}], "}"}]}], "}"}], 
                "&"}], "/@", 
               RowBox[{"Subsets", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
                 ",", 
                 RowBox[{"{", "#", "}"}]}], "]"}]}], ")"}], "&"}], "/@", 
            RowBox[{"Rest", "[", 
             RowBox[{"Range", "[", 
              RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
             "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "use", " ", "these", " ", "order", " ", "of", " ", 
            "multiplications", " ", "to", " ", "obtain", " ", "all", " ", 
            "matrices"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "alg", "]"}], "=", 
           RowBox[{"MapAt", "[", 
            RowBox[{"Normal", ",", 
             RowBox[{"Fold", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"{", 
                  RowBox[{"#1", ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"oneGradeRule", "[", 
                    RowBox[{"x", ",", "#1", ",", "opMatrix", ",", "alg"}], 
                    "]"}]}], "]"}], ",", "#2"}], "]"}]}], "}"}], "]"}], "&"}],
                ",", 
               RowBox[{"MapAt", "[", 
                RowBox[{"SparseArray", ",", "baseVectorRepresentation", ",", 
                 RowBox[{"{", 
                  RowBox[{"All", ",", "2"}], "}"}]}], "]"}], ",", 
               "optimizedMultiplicationOrder"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"MatchQ", "[", 
        RowBox[{"baseVectorRepresentation", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_bs", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], 
        "]"}]}]}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input"],

Cell[" \[OpenCurlyDoubleQuote]IdealBasis\[CloseCurlyDoubleQuote] method \
messages", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "idempotent"}], " ", "=", 
   " ", "\"\<The expression `1` provided by option PrimitiveIdempotent is not \
an idempotent. Aborting.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "gaDefineMatrixRepresentation", "::", "gaSemisimpleAlgebraExtension"}], 
   "=", "\"\<The block position  `1` for real field (case p-q=1 mod 4) in the \
final representation matrix can be only \\\"GradeInvertedLast\\\" (default) \
or \\\"GradeInvertedFirst\\\".\>\""}], ";"}]}], "Input"],

Cell["\[OpenCurlyDoubleQuote]\[OpenCurlyDoubleQuote]TensorProduct\
\[CloseCurlyDoubleQuote]method messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "NoDefaultData"}], "=", 
   "\"\<No explicit default representations of elementary algebras for `1` \
was given. Possible values are are. Will use `2` .\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], "=", 
   "\"\<Provided elementary matrix representations `2` do not cover all \
algebras which appear in the tensor product `1`. Your need to provide \
elementary matrix representations for algebras `3`. Chose from posible values \
`4` from corresponding lists. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], "=", 
   "\"\<Tensor product decomposition `1` contains Cl[1,0] algebra. Smaller \
(complex) representation matrices can be obtained using Method \
->{\\\"TensorProduct\\\",BaseVectorAlgebra\[Rule]`2`,TargetMatrices\[Rule]\
Reals}. The smaller matrices realizes HOMOMORPHISM of the algebra (not an \
isomorphism).\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}], 
   "=", "\"\<Option BasisVectorsMultipliers `1` has wrong number of elements. \
Expected pattern is `2`. Will use 1. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "BaseVectorAlgebra"}], "=", 
   "\"\<BaseVectorAlgebra `1` has different number of vectors than algebra \
`2`. Will proceed with original algebra\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "isomorphismIRule"}], "=", 
   "\"\<Warning. Imaginary unit replacement \\\"IToRealMatrix\\\" was \
applied. It replaces explicitly elements \[PlusMinus]1 and \[PlusMinus]\
\[ImaginaryI]. For general matrices it will definitely yield wrong result. \
Please check the answer explicitly ar don't use \\\"IToRealMatrix\\\" \
rules!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineMatrixRepresentation", "::", "isomorphismIRuleBad"}], 
   "=", "\"\<Error when trying to apply \\\"IToRealMatrix\\\" isomorphism \
rules. The rules \\\"IToRealMatrix\\\" will not be applied.\>\""}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation construction by left ideals"
}], "Subsection"],

Cell["\<\
If we already have computed double sided ideal and left ideal basis we can \
avoid recomputation by providng the structure of ideal basis and double sided \
ideal with replacement rules. The function of particular method is hidden in \
the private context.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"replaceFieldElement", "[", "0", "]"}], "=", "0"}], ";", 
  RowBox[{
   RowBox[{"replaceFieldElement", "[", "1", "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceFieldElement", "[", 
    RowBox[{"expr_", ",", "rules_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"Times", "@@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Internal`SyntacticNegativeQ", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "[", 
         RowBox[{"FactorTermsList", "[", "expr", "]"}], "]"}], ")"}], "/.", 
       "rules"}], ")"}]}], ")"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{
      "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"inversedRules", "[", "Reals", "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "1", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "2", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"-", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}], "\[Rule]", 
         RowBox[{"bs", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
           "\"\<Quaternion\>\""}], "]"}]}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"inversedRules", "[", "Complexes", "]"}], "=", 
      RowBox[{"{", "}"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"defineMatrixRepresentationIdealBasisMethod", "[", 
   RowBox[{"alg_", ",", "methodOpts_List", ",", "otherOpts_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"precomputedInput", "=", 
       RowBox[{"(", 
        RowBox[{
        "gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules"\
, "/.", "methodOpts"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"theIdempotentSetting", "=", 
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{"gaPrimitiveIdempotent", "/.", "methodOpts"}], ")"}], 
        ")"}]}], ",", "theIdempotentOptions", ",", "theIdempotent", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"quiet", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", "otherOpts"}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Quiet", "\[Rule]", "True"}], "}"}]}]}], ")"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"gradesOnly", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"gaGradesOnly", "/.", "otherOpts"}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}]}], ")"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"basisVectorsMultipliers", "=", 
        RowBox[{"(", 
         RowBox[{"BasisVectorsMultipliers", "/.", "methodOpts"}], ")"}]}], 
       ")"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"basisVectorsOrder", "=", 
        RowBox[{"(", 
         RowBox[{"BasisVectorsReordering", "/.", "methodOpts"}], ")"}]}], 
       ")"}], ",", "\[IndentingNewLine]", 
      RowBox[{"theDomain", "=", 
       RowBox[{"(", 
        RowBox[{"CoefficientDomain", "/.", "methodOpts"}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"theOrderA", "=", 
       RowBox[{"(", 
        RowBox[{"gaNonCommutativeMonomialOrder", "/.", "methodOpts"}], 
        ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"theOrderB", "=", 
       RowBox[{"(", 
        RowBox[{
        "gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder", "/.", 
         "methodOpts"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"semisimpleBlockPosition", "=", 
       RowBox[{"(", 
        RowBox[{"gaSemisimpleAlgebraExtension", "/.", "methodOpts"}], ")"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"replaceDR", "=", 
       RowBox[{"(", 
        RowBox[{"gaReplaceDivisionRing", "/.", "methodOpts"}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"idealBasisOrder", "=", 
       RowBox[{"(", 
        RowBox[{"gaIdealBasisReordering", "/.", "methodOpts"}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"idealBasisMultipliers", "=", 
       RowBox[{"(", 
        RowBox[{"gaIdealBasisMultipliers", "/.", "methodOpts"}], ")"}]}], ",",
       "\[IndentingNewLine]", "theVectorBasis", ",", "\[IndentingNewLine]", 
      "semisimpleQ", ",", "theDoubleRealFieldOrdering", ",", "leftIdeal", ",",
       "divisionRingA", ",", "fieldReplacementRules", ",", "idealBasisA", ",",
       "lengthOfIdealBasis", ",", "matrixRepresentationsOfVectorsA", ",", 
      "matrixRepresentationsOfVectorsANorepl", ",", 
      "matrixRepresentationsOfVectorsB", ",", "divisionRingB", ",", 
      "idealBasisB", ",", "tempvar", ",", 
      "fieldReplacementRulesGradeInversed", ",", "vectorMatrices", ",", 
      "vectorMatricesFin", ",", "allBasisInvDegLex", ",", "answer", ",", 
      "idealBasisAUnordered", ",", "idealBasisBUnordered", ",", 
      "idempotentData"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", "initialization", " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"theVectorBasis", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alg", ",", "theOrderA", ",", "All"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "determine", " ", "if", " ", "algebra", " ", "is", " ", "semisimple"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"semisimpleQ", "=", 
      RowBox[{"semisimpleClAlgebraQ", "[", 
       RowBox[{"alg", ",", "theDomain"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "determine", " ", "if", " ", "precomputed", " ", "structure", " ", 
        "is", " ", "provided"}], ",", " ", 
       RowBox[{"if", " ", "not", " ", "compute"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"precomputedInput", "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "primitive", " ", "idempotent"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"theIdempotentSetting", ",", 
            RowBox[{"Automatic", "|", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "__"}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"idempotentData", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{"alg", ",", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{"DeleteDuplicatesBy", "[", 
                 RowBox[{
                  RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"theIdempotentSetting", ",", 
                    RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
                    RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"gaPrimitiveIdempotent", "/.", 
                    RowBox[{"Options", "[", 
                    RowBox[{
                    "methodDefaults", "[", "\"\<IdealBasis\>\"", "]"}], 
                    "]"}]}], ")"}]}], "}"}], "]"}], ",", "Automatic"}], "]"}],
                   ",", "First"}], "]"}], ")"}]}], "}"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theIdempotent", "=", 
            RowBox[{"gaPrimitiveIdempotent", "@@", "idempotentData"}]}], 
           ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"gaIdempotentQ", "[", "theIdempotentSetting", "]"}], ",", 
             RowBox[{"theIdempotent", "=", "theIdempotentSetting"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDefineMatrixRepresentation", "::", "idempotent"}], 
                ",", "theIdempotentSetting"}], "]"}], ";", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Warn", " ", "if", " ", "idempotent", " ", "and", " ", "function", 
          " ", "domains", " ", "differ"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"theDomain", "=!=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"CoefficientDomain", "/.", 
               RowBox[{"Cases", "[", 
                RowBox[{"idempotentData", ",", 
                 RowBox[{"HoldPattern", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{"CoefficientDomain", ",", "_"}], "]"}], "]"}]}], 
                "]"}]}], ")"}], "/.", 
             RowBox[{"Cases", "[", 
              RowBox[{"theIdempotentSetting", ",", 
               RowBox[{"HoldPattern", "[", 
                RowBox[{"Rule", "[", 
                 RowBox[{"CoefficientDomain", ",", "_"}], "]"}], "]"}]}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{"TextCell", "[", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                   "\"\<Warning! gaIdempotent and \
gaDefineMatrixRepresentation are has diffrent setting for CoefficientDomain! \
Hope you know what you are doing.\>\"", " ", ",", "Red"}], "]"}], "]"}], 
                 "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CellPrint", "[", 
            RowBox[{"{", 
             RowBox[{"TextCell", "[", 
              RowBox[{"Column", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "TextCell", "[", "\"\<The primitive idempotent is \>\"", 
                    "]"}], "}"}], "]"}], ",", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"ExpressionCell", "[", "theIdempotent", "]"}], 
                   "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}], ";"}]}],
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal"}], "  ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"leftIdeal", "=", 
         RowBox[{"gaLeftIdeal", "[", 
          RowBox[{"theIdempotent", ",", "theOrderA", ",", 
           RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "double", " ", "sided", " ", "ideal"}], "  ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"divisionRingA", ",", "fieldReplacementRules"}], "}"}], "=", 
         RowBox[{"gaDoubleSidedIdeal", "[", 
          RowBox[{"theIdempotent", ",", "leftIdeal", ",", "theOrderA", ",", 
           RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
           RowBox[{"OutputForm", "->", "\"\<ElementsReplacementRules\>\""}]}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "left", " ", "ideal", " ", "basis"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"idealBasisAUnordered", "=", 
         RowBox[{"gaLeftIdealBasis", "[", 
          RowBox[{"leftIdeal", ",", "divisionRingA", ",", "theOrderA", ",", 
           RowBox[{"CoefficientDomain", "->", "theDomain"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "multiply", " ", "ideal", " ", "basis", " ", "by", " ", "numbers", 
          " ", "in", " ", "case", " ", "of", " ", "simple", " ", "algebras"}],
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"semisimpleQ", ",", "False", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{
            "idealBasisMultipliers", ",", "\[IndentingNewLine]", "None", ",", 
             
             RowBox[{"idealBasisMultipliers", "=", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"__", "?", "NumberQ"}], "}"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "idealBasisMultipliers", "]"}], "===", 
                
                RowBox[{"Length", "[", "idealBasisAUnordered", "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"idealBasisAUnordered", "=", 
                RowBox[{
                "idealBasisAUnordered", "*", "idealBasisMultipliers"}]}], ",", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaOptionValue", "::", "option"}], ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                   "]"}], ",", " ", "gaIdealBasisMultipliers", ",", 
                  RowBox[{"{", 
                   RowBox[{"None", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], ",", "\"\<None\>\""}], 
                 "]"}], ";", 
                RowBox[{"idealBasisMultipliers", "=", "1"}], ";"}]}], "]"}], 
             ",", "\[IndentingNewLine]", "_", ",", " ", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaOptionValue", "::", "option"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}],
                 ",", " ", "gaIdealBasisMultipliers", ",", 
                RowBox[{"{", 
                 RowBox[{"None", ",", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], "]"}]}], "}"}], ",", "\"\<None\>\""}], 
               "]"}], ";", 
              RowBox[{"idealBasisMultipliers", "=", "1"}], ";"}]}], 
            "\[IndentingNewLine]", " ", "]"}], ";"}], "\[IndentingNewLine]", 
          ",", "True", ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "idealBasisMultipliers", ",", "\[IndentingNewLine]", "None", ",", 
            RowBox[{"idealBasisMultipliers", "=", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"__", "?", "NumberQ"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"__", "?", "NumberQ"}], "}"}]}], "}"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Length", "/@", "idealBasisMultipliers"}], ")"}], 
                 "-", 
                 RowBox[{"Length", "[", "idealBasisAUnordered", "]"}]}], 
                ")"}], "===", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"idealBasisAUnordered", "=", 
               RowBox[{"idealBasisAUnordered", "*", 
                RowBox[{"idealBasisMultipliers", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaOptionValue", "::", "option"}], ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                  "]"}], ",", " ", "gaIdealBasisMultipliers", ",", 
                 RowBox[{"{", 
                  RowBox[{"None", ",", 
                   RowBox[{"ToString", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalY]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
                 "\"\<None\>\""}], "]"}], ";", 
               RowBox[{"idealBasisMultipliers", "=", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}], ";"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "_", ",", " ", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaOptionValue", "::", "option"}], ",", 
               RowBox[{"Style", "[", 
                RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
               ",", " ", "gaIdealBasisMultipliers", ",", 
               RowBox[{"{", 
                RowBox[{"None", ",", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalX]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{"\[FormalY]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
               "\"\<None\>\""}], "]"}], ";", 
             RowBox[{"idealBasisMultipliers", "=", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], ";"}]}], 
           "\[IndentingNewLine]", " ", "]"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "reorder", " ", "ideal", " ", "basis", " ", "if", " ", "required"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"semisimpleQ", ",", "False", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"idealBasisOrder", "===", "None"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", "idealBasisOrder", "]"}], "===", 
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"idealBasisA", "=", 
                 RowBox[{"idealBasisAUnordered", "[", 
                  RowBox[{"[", "idealBasisOrder", "]"}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaOptionValue", "::", "option"}], ",", 
                   RowBox[{"Style", "[", 
                    RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                    "]"}], ",", " ", "gaIdealBasisReordering", ",", 
                   RowBox[{"{", 
                    RowBox[{"\"\<None\>\"", ",", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}], ",", 
                   "\"\<None\>\""}], "]"}], ";", 
                 RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
          "True", ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"idealBasisOrder", "===", "None"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Union", "[", 
                  RowBox[{"idealBasisOrder", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", 
                 RowBox[{"Range", "[", 
                  RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"idealBasisA", "=", 
                 RowBox[{"idealBasisAUnordered", "[", 
                  RowBox[{"[", 
                   RowBox[{"idealBasisOrder", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Message", "[", 
                  RowBox[{
                   RowBox[{"gaOptionValue", "::", "option"}], ",", 
                   RowBox[{"Style", "[", 
                    RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], 
                    "]"}], ",", " ", "gaIdealBasisReordering", ",", 
                   RowBox[{"{", 
                    RowBox[{"\"\<None\>\"", ",", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<{Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<],Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]}\>\""}], "]"}]}], "}"}], ",", 
                   "\"\<None\>\""}], "]"}], ";", 
                 RowBox[{"idealBasisA", "=", "idealBasisAUnordered"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"computation", " ", "with", " ", "precomputed", " ", "data"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "quiet"}], ",", 
          RowBox[{"CellPrint", "[", 
           RowBox[{"{", 
            RowBox[{"TextCell", "[", 
             RowBox[{"Column", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"TextCell", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Warning! Option \
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules is used \
in gaDefineMatrixRepresentation. No checks applied. All other Method options \
will be ignored.\>\"", " ", ",", "Red"}], "]"}], "]"}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"ExpressionCell", "[", "precomputedInput", "]"}], 
                  "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"divisionRingA", ",", "fieldReplacementRules"}], "}"}], "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"idealBasisA", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"theIdempotent", "=", 
         RowBox[{"Expand", "[", 
          RowBox[{"precomputedInput", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"lengthOfIdealBasis", "=", 
      RowBox[{"Length", "[", "idealBasisA", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Once", " ", "double", " ", "sided", " ", "ideal", " ", "and", " ", 
       "left", " ", "ideal", " ", "basis", " ", "are", " ", "known", " ", 
       "compute", " ", "matrix", " ", "representation", " ", "of", " ", "a", 
       " ", "matrix", " ", "block"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"matrixRepresentationsOfVectorsANorepl", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaIndexDown", "[", 
              RowBox[{"gaHermitianConjugate", "[", 
               RowBox[{"idealBasisA", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], 
             "\[GeometricProduct]", "#", "\[GeometricProduct]", 
             RowBox[{"idealBasisA", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "lengthOfIdealBasis"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "lengthOfIdealBasis"}], "}"}]}], "]"}], "&"}], "/@",
        "theVectorBasis"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"replaceDR", ",", 
       RowBox[{"matrixRepresentationsOfVectorsA", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"replaceFieldElement", "[", 
            RowBox[{"#", ",", "fieldReplacementRules"}], "]"}], "&"}], ",", 
          "matrixRepresentationsOfVectorsANorepl", ",", 
          RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "matrixRepresentationsOfVectorsA", "=", 
        "matrixRepresentationsOfVectorsANorepl"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "final", " ", "matrix", " ", "representations", " ", "of", " ", "basis",
        " ", 
       RowBox[{"vectors", ".", " ", "For"}], " ", "semisimple", " ", 
       "algebra", " ", "make", " ", "additional", " ", "steps"}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"semisimpleQ", ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "for", " ", "semisimple", " ", "use", " ", "grade", " ", "inversed", 
         " ", "subspase"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"divisionRingB", "=", 
         RowBox[{"gaGradeInverse", "/@", "divisionRingA"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"idealBasisBUnordered", "=", 
         RowBox[{
          RowBox[{"gaSort", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"gaGradeInverse", "/@", "idealBasisA"}], ")"}], ",", 
            "theOrderB"}], "]"}], "*", 
          RowBox[{"(", 
           RowBox[{"1", "/", 
            RowBox[{"idealBasisMultipliers", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"idealBasisMultipliers", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"idealBasisOrder", "===", "None"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"idealBasisB", "=", "idealBasisBUnordered"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Union", "[", 
               RowBox[{"idealBasisOrder", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", 
              RowBox[{"Range", "[", 
               RowBox[{"Length", "[", "idealBasisBUnordered", "]"}], "]"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"idealBasisB", "=", 
              RowBox[{"idealBasisBUnordered", "[", 
               RowBox[{"[", 
                RowBox[{"idealBasisOrder", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaOptionValue", "::", "option"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}],
                 ",", " ", "gaIdealBasisReordering", ",", 
                RowBox[{"{", 
                 RowBox[{"\"\<None\>\"", ",", 
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"\"\<{Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<],Permutation[\>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "idealBasisAUnordered", "]"}], 
                    "]"}], "]"}], ",", "\"\<]}\>\""}], "]"}]}], "}"}], ",", 
                "\"\<None\>\""}], "]"}], ";", 
              RowBox[{"idealBasisB", "=", "idealBasisBUnordered"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"fieldReplacementRulesGradeInversed", "=", 
         RowBox[{"(", 
          RowBox[{"Last", "/@", 
           RowBox[{"makeReplRule", "/@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"gaGradeInverse", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "/.", 
                  RowBox[{"inversedRules", "[", "theDomain", "]"}]}]}], "}"}],
                "&"}], ",", 
              RowBox[{"fieldReplacementRules", "/.", 
               RowBox[{"{", 
                RowBox[{"Rule", "\[Rule]", "List"}], "}"}]}]}], "]"}]}]}], 
          ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"matrixRepresentationsOfVectorsB", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "tempvar", "}"}], ",", 
                RowBox[{"replaceFieldElement", "[", 
                 RowBox[{
                 "tempvar", ",", "fieldReplacementRulesGradeInversed"}], 
                 "]"}]}], "]"}], ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"Expand", "[", 
                 RowBox[{"gaPE", "[", 
                  RowBox[{
                   RowBox[{"gaIndexDown", "[", 
                    RowBox[{"gaHermitianConjugate", "[", 
                    RowBox[{"idealBasisB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], 
                   "\[GeometricProduct]", "#", "\[GeometricProduct]", 
                   RowBox[{"idealBasisB", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "lengthOfIdealBasis"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "lengthOfIdealBasis"}], "}"}]}], "]"}], 
              ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
           "theVectorBasis"}], ")"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"make", " ", "final", " ", "matrix"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "semisimpleBlockPosition", ",", "\[IndentingNewLine]", 
          "\"\<GradeInvertedLast\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], " ", ";"}], ",", "\[IndentingNewLine]", 
          "\"\<GradeInvertedFirst\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], " ", ";"}], ",", "\[IndentingNewLine]", "_", 
          ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaOptionValue", "::", "option"}], ",", 
             RowBox[{"Style", "[", 
              RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
             ",", " ", "OutputForm", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<GradeInvertedLast\>\"", ",", 
               "\"\<GradeInvertedFirst\>\""}], "}"}], ",", 
             "\"\<GradeInvertedLast\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"vectorMatrices", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"matrixRepresentationsOfVectorsA", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", 
                   RowBox[{"matrixRepresentationsOfVectorsB", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], 
               "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "semisimple", " ", "case"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatrices", "=", "matrixRepresentationsOfVectorsA"}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "change", " ", "order", " ", "of", " ", "vectors", " ", "if", " ", 
       "required"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"basisVectorsOrder", ",", "None", ",", 
       RowBox[{"basisVectorsOrder", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"__Integer", "?", "Positive"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", "basisVectorsOrder", "]"}], "=!=", 
          RowBox[{"Range", "[", 
           RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], ",", 
         " ", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "BasisVectorsReordering", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<None\>\"", ",", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"\"\<Permutation[\>\"", ",", 
               RowBox[{"ToString", "[", 
                RowBox[{"Range", "[", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
                "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}], ",", 
           "\"\<None\>\""}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", "_", 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",", 
          " ", "BasisVectorsReordering", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<None\>\"", ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<Permutation[\>\"", ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"Range", "[", 
                RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}], 
               "]"}], ",", "\"\<]\>\""}], "]"}]}], "}"}], ",", 
          "\"\<None\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"basisVectorsOrder", "=", 
         RowBox[{"Range", "[", 
          RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "try", " ", "to", " ", "make", " ", "minimize", " ", "minus", " ", 
       "signs", " ", "in", " ", "the", " ", "representation", " ", "block"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "basisVectorsMultipliers", ",", "\[IndentingNewLine]", "Automatic", ",",
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"old", ":", " ", 
         RowBox[{
         "change", " ", "sign", " ", "if", " ", "only", " ", "all", " ", 
          "elements", " ", "of", " ", "matrx", " ", "is", " ", "negative"}]}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"AllTrue", "[", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], ",", 
                "Internal`SyntacticNegativeQ"}], "]"}], ",", 
              RowBox[{
               RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "/@",
            "\[IndentingNewLine]", "vectorMatrices"}], ")"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Internal`SyntacticNegativeQ", "[", 
                RowBox[{"First", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], 
                 "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{"-", "1"}], "*", "#"}], ",", "#"}], "]"}], "&"}], "/@",
             "\[IndentingNewLine]", "vectorMatrices"}], ")"}], "[", 
          RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", "None", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"__", "?", "NumberQ"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "basisVectorsMultipliers", "]"}], "===", 
            RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}]}], ")"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"vectorMatricesFin", "=", 
           RowBox[{"basisVectorsMultipliers", "*", 
            RowBox[{"(", 
             RowBox[{"vectorMatrices", "[", 
              RowBox[{"[", "basisVectorsOrder", "]"}], "]"}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionValue", "::", "option"}], ",", 
              RowBox[{"Style", "[", 
               RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
              ",", " ", "BasisVectorsMultipliers", ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"\[PlusMinus]", "1"}], ",", 
                RowBox[{"{", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}],
                "]"}], ",", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}],
                "]"}]}], "]"}], "]"}], ";", 
           RowBox[{"vectorMatricesFin", "=", 
            RowBox[{"vectorMatrices", "[", 
             RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", "_",
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "BasisVectorsMultipliers", ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"\[PlusMinus]", "1"}], ",", 
             RowBox[{"{", 
              RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}], 
            "]"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "}"}]}], 
            "]"}]}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"vectorMatricesFin", "=", 
         RowBox[{"vectorMatrices", "[", 
          RowBox[{"[", "basisVectorsOrder", "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"answer", "=", 
      RowBox[{"Thread", "[", 
       RowBox[{"Rule", "[", 
        RowBox[{"theVectorBasis", ",", "vectorMatricesFin"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "if", " ", "full", " ", "algebra", " ", "representation", " ", "was", 
       " ", "requested", " ", "call", " ", 
       RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", " ", 
       "special", " ", "syntax"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"basisVectorsOrder", ",", "None", ",", 
       RowBox[{"basisVectorsOrder", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"gaVectorSpaceDimension", "[", "alg", "]"}], "]"}]}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"gradesOnly", ",", "\[IndentingNewLine]", 
       RowBox[{"{", "1", "}"}], ",", "answer", ",", "\[IndentingNewLine]", 
       "All", ",", 
       RowBox[{"gaDefineMatrixRepresentation", "[", "answer", "]"}], ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", 
          RowBox[{"Style", "[", 
           RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",", 
          " ", "gaGradesOnly", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "1", "}"}], ",", "All"}], "}"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "answer"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Matrix representation construction by direct product"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell[TextData[{
 "The help function ",
 StyleBox["tensorProductIsomorphicToAlgebra[ ] ",
  FontWeight->"Bold"],
 " is used in ",
 "gaDefineOrthonormalBasis",
 StyleBox["[gaTensorProduct[ ]]",
  FontWeight->"Bold"],
 ", where it generates indices of isomorphics algebra. These indices then are \
substituted by corresponding tensor product indices.  The rule below helps to \
replace single algbra by fake tensor product (containing only one term), \
which then enables to use single definition (thougtht a bit more complicated) \
instead of two separate: one for ",
 StyleBox["gaTensorProduct[Cl, Cl]",
  FontWeight->"Bold"],
 ", the other for ",
 StyleBox["gaTensorProduct[ gaTensorProduct[Cl], Cl]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tensorProductIsomorphicToAlgebra", "[", 
    RowBox[{"gaTensorProduct", "[", "al_Cl", "]"}], "]"}], ":=", "al"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The function ",
 StyleBox["gaAlgebraMultiplicationTable[ ]",
  FontWeight->"Bold"],
 ", constructs product table of all elements and prints it in a clear way. \
Entire base  should be generated before call."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], "=", 
    "\"\<Option `1` is not a list of grades like {{1},{3},...}.\>\""}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaAlgebraMultiplicationTable", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grades", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaAlgebraMultiplicationTable", ",", "gaGradesOnly"}], 
           "]"}]}], ")"}]}], ",", "selectedBE"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"grades", ",", "All", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"Outer", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
           RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "]"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], "}"}]}]}], 
        "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_Integer", "?", "NonNegative"}], "}"}], ".."}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"selectedBE", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGetGrade", "[", "#", "]"}], "===", "x"}], 
                   "&"}], ")"}]}]}], "]"}]}], "]"}], ",", "grades"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", "selectedBE", ",", "selectedBE"}],
            "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"selectedBE", ",", "selectedBE"}], "}"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], 
          ",", "grades"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell["Set unit element to 1.", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"bs", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "_"}], 
       "]"}], "]"}], "=", "1"}]}], "]"}], ";"}]], "Input"],

Cell["\<\
The signature of tensor product is a sum of signatures for each product \
algebras\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_gaTensorProduct", ",", "___"}], "]"}]}]}], 
       "]"}], ":=", 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{"Length", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{
                RowBox[{"gaNegativeSignatureIndexList", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Thread", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Thread", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"First", "/@", 
                    RowBox[{"gaGetIndex", "[", "expr", "]"}]}], ")"}]}], ",", 
                    "al"}], "}"}], "]"}], "/.", 
                  RowBox[{"gaTensorProduct", "\[Rule]", "List"}]}], ")"}]}], 
               ",", "1"}], "]"}]}], ")"}]}], ")"}]}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Decide, when base recalculation is unavoidable. Always use \
\[OpenCurlyDoubleQuote]AdditiveRepresentation\[CloseCurlyDoubleQuote] \
representation for these calculations.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getBase", "[", 
    RowBox[{"al_", ",", "grRequested_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"variants", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"DownValues", "[", "gaOrthonormalBasis", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"gaOrthonormalBasis", "[", 
                   RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "_"}], 
                   "]"}]}], "]"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RuleDelayed", "[", 
             RowBox[{"def_", ",", "_"}], "]"}], ":>", "def"}], "}"}]}], 
         ")"}]}], ",", "definedGrades"}], "}"}], ",", 
     RowBox[{
      RowBox[{"definedGrades", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Hold", "@@", "variants"}], ")"}], "/.", 
             RowBox[{"HoldPattern", "\[Rule]", "Sequence"}]}], ")"}], "/.", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"_", ",", "\"\<InvDeg[Lex]\>\"", ",", "gr_"}], "]"}], 
            "\[RuleDelayed]", "gr"}]}], ")"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"definedGrades", ",", "All"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "grRequested"}], 
          "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "All"}], "]"}], 
           ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Intersection", "[", 
          RowBox[{"grRequested", ",", 
           RowBox[{"(", 
            RowBox[{"Union", "@@", 
             RowBox[{"(", "definedGrades", ")"}]}], ")"}]}], "]"}], "===", 
         "grRequested"}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBasis", "[", 
          RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "grRequested"}], 
          "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Join", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", "#"}], "]"}], 
                "&"}], "/@", "definedGrades"}], ")"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", "True", ",",
         "\[IndentingNewLine]", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"al", ",", 
          RowBox[{"Format", "->", "\"\<AdditiveRepresentation\>\""}], ",", 
          RowBox[{"gaGradesOnly", "->", "grRequested"}], ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{
          "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}],
           ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], "]"}]}]}], 
    "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Lets provide user with \[OpenCurlyDoubleQuote]default\
\[CloseCurlyDoubleQuote] algebra representations. It may be  convenient  if \
user wants other representations that differ from universal representations \
set by  ",
 StyleBox["generalDefaultMatrixRepresentationSetting[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDefaultMatrixRepresentationData", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "4"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "5"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "6"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "7"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ","}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Diagonal\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
            "\"\<Antisymmetric\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], 
       ","}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"2", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Below we construct matrix representations for real clifford algebras, which \
is known to be of dimensions:\n\[DoubleStruckCapitalR](2^(n/2)),    if \
q-p=0,6 (mod 8); \n\[DoubleStruckCapitalC](2^((n-1)/2)),    if q-p=1,5(mod \
8); \n\[DoubleStruckCapitalH](2^((n-2)/2)),    if q-p=2,4(mod 8); \n\
\[DoubleStruckCapitalH](2^((n-3)/2))\[CirclePlus]\[DoubleStruckCapitalH](2^((\
n-3)/2)),   if q-p=3(mod 8); \n\[DoubleStruckCapitalR](2^((n-1)/2))\
\[CirclePlus]\[DoubleStruckCapitalR](2^((n-1)/2)),   if q-p=7(mod 8); \n\nIn \
order to get these matrices we generate automatic calculation instructions \
below. \nThese settings are applied only if particular settings were not \
found in ",
 StyleBox["gaDefaultMatrixRepresentationData[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_", ",", "_"}], "]"}], "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"q", "-", "p"}], ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"0", "|", "6"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1", "|", "5"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", "\"\<Pauli[1,2]\>\""}]}],
        "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"2", "|", "4"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "3", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "7", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}]}], "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Notations"
}], "Subsubsection"],

Cell["Tensor product notation for products of algebras", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "al__Cl", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "#", "]"}], "]"}], "===", 
          "gaNotation"}], ",", 
         RowBox[{"gaDefineNotation", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"{", "al", "}"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", 
          RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}], "]"}], "===", 
        "gaNotation"}], ",", 
       RowBox[{"gaDefineNotation", "[", 
        RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"alB", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "al", "}"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfdProto", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"Slot", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", 
               RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", 
            RowBox[{"StyleBox", "[", 
             RowBox[{"\"\<\[CircleTimes]\>\"", ",", 
              RowBox[{"FontSize", "\[Rule]", "Medium"}], ",", 
              RowBox[{"gaNotation", "[", 
               RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}]}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfiProto", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<gaTensorProduct\>\"", ",", "\"\<[\>\""}], "}"}], 
            ",", 
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Slot", "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", "\"\<,\>\""}],
              "]"}], ",", 
            RowBox[{"{", "\"\<]\>\"", "}"}]}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfdProto", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfiProto", "]"}], "]"}]}]}], "}"}], ",", 
         
         RowBox[{"TemplateBox", "[", 
          RowBox[{"alB", ",", "\"\<gaTensorProduct\>\"", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
      "]"}]}], "\[IndentingNewLine]", ")"}]}], ";"}]], "Input"],

Cell[TextData[{
 "For other quantities, i.e. indices, simply use ",
 StyleBox["CircleTimes[ ] ",
  FontWeight->"Bold"],
 "trick, thus avoiding problems with bracketing. For speed reasons, dont\
\[CloseCurlyQuote] associate MakeBoxes with  ",
 StyleBox["gaTensorProduct/: ",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "args__", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"TagBox", "[", 
    RowBox[{
     RowBox[{"ToBoxes", "[", 
      RowBox[{"CircleTimes", "[", "args", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"gaTensorProduct", "@@", "#"}], "&"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multiplication of elements, which are tensor products. "
}], "Subsubsection"],

Cell[TextData[{
 "Tensor product indices are treated in a different way than indices of \
simple clifford algebras. Identifier ignoreMe deals with tensor products of \
identical algebras, which is unavoidable if we want to construct tensor \
product from simple algebras. After base elements are constructed we ignore \
them.  ignoreMe is used only in ",
 "gaDefineOrthonormalBasis",
 StyleBox["[gaTensorProduct[]]",
  FontWeight->"Bold"],
 ". It is not needed when dealing with already defined base elements."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"other1___", ",", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du1_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du2_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"setSymDiff4TP", ",", "signProdSigMap4TP"}], "}"}], ",", 
        RowBox[{
         RowBox[{"setSymDiff4TP", "=", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "@@", 
              RowBox[{"(", 
               RowBox[{"List", "/@", 
                RowBox[{"gaTensorProduct", "@@@", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Apply", "[", 
                   RowBox[{"mvSetSymmetricDifference", ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ")"}]}], ",",
              "al"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", 
                "_"}], "]"}], "]"}], "->", "1"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "=", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Times", "@@@", 
             RowBox[{"Apply", "[", 
              RowBox[{"mvProductSignatureMapC", ",", 
               RowBox[{"MapThread", "[", 
                RowBox[{"List", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}]}], "}"}]}],
                     "]"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"other1", ",", "setSymDiff4TP", ",", "other2"}], 
           "]"}]}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Geometric product of ",
 StyleBox["gaTensorProduct[_,_]",
  FontWeight->"Bold"],
 ". Note, that ",
 StyleBox["gaTensorProduct[x_]:=x",
  FontWeight->"Bold"],
 " rule would spoil rearangement ",
 StyleBox["gaTensorProduct[gaTensorProduct[a],b]",
  FontWeight->"Bold"],
 ", therefore is not allowed. Associate these recursive definitions with ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " itself  for speed reasons (they are more rare than ",
 StyleBox["GeometricProduct[ ]",
  FontWeight->"Bold"],
 ")"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "/:", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1___", ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"x1_", ",", "x2__"}], "]"}], ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"y1_", ",", "y2__"}], "]"}], ",", "any2___"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
           "x"}], "}"}]}], ")"}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "x2", "]"}], ",", 
         RowBox[{"gaTensorProduct", "[", "y2", "]"}]}], "]"}], ",", "any2"}], 
      "]"}], ")"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gaTensorProduct", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaTensorProduct", "[", "x1_", "]"}], ",", 
     RowBox[{"gaTensorProduct", "[", "y1_", "]"}], ",", "any2___"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1", ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
          "x"}], "}"}]}], ")"}], ",", "any2"}], "]"}], ")"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Orthonormal base construction for tensor product algebras"
}], "Subsubsection"],

Cell["\<\
General note. The case with (Cl[2,0,0]|Cl[1,1,0]|Cl[0,2,0]) algebras is \
special, because we know what are base vectors. Then it follows that we can \
easily order and grade all elements. For tensor products of arbitrary \
algebras the nontrivial point is to find what tensor products play the role \
of vectors. The generation of orthonormal base of product of tensor algebras \
should not be confused with calculation of  geometric product between \
elements of tensor algebra products. The later can be calculated directly \
(see \[OpenCurlyDoubleQuote]Multiplication of elements, which are tensor \
products\[CloseCurlyDoubleQuote] subsubsection).  \
\>", "Text"],

Cell[TextData[{
 "The  ",
 StyleBox["gaTensorProduct[Cl,Cl,...]",
  FontWeight->"Bold"],
 ", puts tensor products into ,,matroska\[CloseCurlyQuote]\[CloseCurlyQuote] \
form ",
 StyleBox["gaTensorProduct[ gaTensorProduct[gaTensorProduct[Cl],Cl] ,..]",
  FontWeight->"Bold"],
 " below. Then calls ",
 "gaDefineOrthonormalBasis",
 StyleBox["Main[ ] ",
  FontWeight->"Bold"],
 " to do all calculations step by step starting from the deepest product. \
Only necessary grades are calculated in intermediate steps."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBasis", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"p_", ",", "q_", ",", 
         RowBox[{"r_:", "0"}]}], "]"}], ",", 
       RowBox[{"specAlgebra", ":", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}], ".."}]}]}], 
      "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gro", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], "]"}]}],
          ")"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"gaGradesOnly", "->", "_"}]}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"gaDefineOrthonormalBasisMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBasisMain", "[", 
               RowBox[{
                RowBox[{"gaTensorProduct", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], ",", 
                RowBox[{"gaGradesOnly", "->", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], ",", 
                RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}], ";", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], ")"}], "&"}], ",", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], ",", 
           RowBox[{"Most", "[", 
            RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{"Last", "[", 
          RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"gaGradesOnly", "\[Rule]", "gro"}], ",", 
       RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Note ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 " is private context symbol (not ",
 StyleBox["Module[ ]",
  FontWeight->"Bold"],
 " local symbol)"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaDefineOrthonormalBasisMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "algebraSeq__", "]"}], ",", 
         RowBox[{"specAlgebra", ":", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}]}]}], "]"}], 
       ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "baseSymbol", ",", "invdeglexIndexList", ",", "indSet", ",", "keysB", 
         ",", "gr", ",", "ifPrint", ",", "vectorsOfArbitraryAlgebra", ",", 
         "bivectorsOfSpecialAlgebra", ",", 
         "alreadyCalculatedProductsAdoptedToSingle", ",", 
         RowBox[{"uniqueMaskForArbitraryAlgebra", "=", 
          RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
         RowBox[{"uniqueMaskForSpecAlgebra", "=", 
          RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
         RowBox[{"productAlgebra", "=", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"algebraSeq", ",", "specAlgebra"}], "]"}], "//.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a___", ",", 
               RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
              "]"}], ":>", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}]}], ",", 
         RowBox[{"alreadyCalculatedProducts", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", "algebraSeq", "]"}], "//.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a___", ",", 
                RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
               "]"}], ":>", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], ")"}]}], 
         ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBasis", ",", "Quiet"}], "]"}]}], 
           ")"}]}], ",", "algBoxes", ",", 
         RowBox[{"grOnly", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGradesOnly", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBasis", ",", "gaGradesOnly"}], 
             "]"}]}], ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Other", " ", "commands", " ", "do", " ", "not", " ", "understand", 
          " ", 
          RowBox[{"gaTensorProduct", "[", "cl", "]"}]}], ",", " ", 
         RowBox[{"therefore", " ", "define", " ", "usual", " ", "Cl"}]}], " ",
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"alreadyCalculatedProductsAdoptedToSingle", "=", 
         RowBox[{"alreadyCalculatedProducts", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", "a_Cl", "]"}], "\[RuleDelayed]", 
            "a"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "In", " ", "order", " ", "to", " ", "define", " ", "orthonormal", 
          " ", "base", " ", "of", " ", "tensor", " ", "product", " ", "we", 
          " ", "need", " ", "to", " ", "know", " ", "orthonormal", " ", 
          "bases", " ", "of", " ", "all", " ", "intermediate", " ", 
          "algebras"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"getBase", "[", 
         RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"getBase", "[", 
         RowBox[{"specAlgebra", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"specific", " ", "algebra", " ", "cases"}], ",", " ", 
          RowBox[{
          "for", " ", "which", " ", "we", " ", "know", " ", "what", " ", 
           "are", " ", "grade", " ", "1", " ", "elements"}], ",", " ", 
          RowBox[{"i", ".", "e", ".", " ", "vectors"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"specAlgebra", ",", "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"definitions", " ", "for", " ", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "=", 
           RowBox[{"Cl", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", 
                 RowBox[{
                 "tensorProductIsomorphicToAlgebra", "[", 
                  "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
              
              RowBox[{"{", 
               RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], ")"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaNotation", "[", "productAlgebra", "]"}], "]"}], "===",
              "gaNotation"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
             RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{"productAlgebra", ",", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"{", "opts", "}"}], ",", 
              RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}]}], "]"}]}],
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "color", " ", "of", " ", "tensor", " ", "product", " ", "and", " ", 
          "isomorphics", " ", "algebra", " ", "are", " ", "set", " ", "to", 
          " ", "be", " ", "the", " ", "same", " ", "by", " ", "default"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Head", "[", 
             RowBox[{"gaNotation", "[", 
              RowBox[{
              "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
               "]"}], "]"}], "]"}], "===", "gaNotation"}], ")"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            ",", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"(", 
              RowBox[{"gaNotation", "[", 
               RowBox[{"productAlgebra", ",", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"(", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}], 
                  ")"}]}]}], "]"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]",
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"space", " ", "dimensions"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], "=", 
         
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", 
           RowBox[{
           "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
           "]"}], "=", 
          RowBox[{
           RowBox[{
           "gaVectorSpaceDimension", "[", 
            "alreadyCalculatedProductsAdoptedToSingle", "]"}], "+", "2"}]}]}],
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"the", " ", "standard", " ", "ordering", " ", "stuff"}], 
          ",", " ", 
          RowBox[{
          "same", " ", "as", " ", "for", " ", "simple", " ", "algebra", " ", 
           "case"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"grOnly", "===", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"invdeglexIndexList", "=", 
           RowBox[{"mvInvDegLexSortedIndexList", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"invdeglexIndexList", "=", 
           RowBox[{"mvInvDegLexSortedIndexList", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", "grOnly"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"indSet", "=", "invdeglexIndexList"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "for", " ", "special", " ", "algebras", " ", "vectors", " ", "of", 
          " ", "tensor", " ", "product", " ", "are", " ", "vectors", " ", 
          "of", " ", "arbitrary", " ", "algebra", " ", "multiplied", " ", 
          "by", " ", "bivectors", " ", "of", " ", "special", " ", "algebra"}],
          " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "and", " ", "vectors", " ", "of", " ", "special", " ", "algebra", 
          " ", "multiplied", " ", "by", " ", "unit", " ", "element", " ", 
          "of", " ", "arbitrary", " ", "algebra"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Note", ":", " ", 
          RowBox[{
          "we", " ", "need", " ", "to", " ", "make", " ", "generated", " ", 
           "vectors", " ", "unique"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfArbitraryAlgebra", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBasis", "[", 
              RowBox[{
              "alreadyCalculatedProductsAdoptedToSingle", ",", 
               "\"\<InvDeg[Lex]\>\"", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                 RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{
             "inc", ",", "alc", ",", "uniqueMaskForArbitraryAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"vectorsOfSpecialAlgebra", "=", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"specAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bivectorsOfSpecialAlgebra", "=", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBasis", "[", 
             RowBox[{"specAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                RowBox[{"{", "2", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
            RowBox[{"baseSymbol", "[", 
             RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
             "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"unitElement", "[", "productAlgebra", "]"}], "=", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "#", "}"}], ",", 
               RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
            RowBox[{"gaTensorProduct", "@@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", "}"}], " ", ",", 
               RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}], 
            "]"}], ",", "productAlgebra"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "construct", " ", "unsorted", " ", "list", " ", "of", " ", "tensor",
            " ", "product", " ", "algebra", " ", "vectors"}], ",", " ", 
          RowBox[{"very", " ", "inefficient"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfTensorProductAlgebra", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"baseSymbol", "[", 
            RowBox[{"#", ",", "productAlgebra"}], "]"}], "&"}], "@@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"Outer", "[", 
                 RowBox[{
                 "GeometricProduct", ",", "vectorsOfArbitraryAlgebra", ",", 
                  "bivectorsOfSpecialAlgebra"}], "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"GeometricProduct", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"baseSymbol", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{
                    "Length", "[", "alreadyCalculatedProducts", "]"}]}], 
                    "]"}]}], "]"}], ",", "alreadyCalculatedProducts", ",", 
                    "uniqueMaskForArbitraryAlgebra"}], "]"}], ",", "#"}], 
                  "]"}], "&"}], "/@", "vectorsOfSpecialAlgebra"}]}], "]"}], 
             ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "al1_", ",", 
                  "___"}], "]"}], ",", 
                RowBox[{"baseSymbol", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{"du2_", ",", "up2_"}], "]"}], ",", "al2_", ",", 
                  "___"}], "]"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"(", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"du1", ",", "du2"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"up1", ",", "up2"}], "]"}], "}"}]}], "]"}], "}"}],
                  "//.", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a___", ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", "b__", "]"}], "}"}], ",", 
                    "c___"}], "]"}], ":>", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], 
                ")"}], ")"}]}], "}"}]}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "sort", " ", "acording", " ", "to", " ", "vector", " ", "square"}], 
          ",", " ", 
          RowBox[{"i", ".", "e", ".", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "...", ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{"-", "1"}], ",", 
             RowBox[{"-", "1"}]}], "}"}]}], ",", " ", 
          RowBox[{"in", " ", "analogy", " ", "with", " ", 
           RowBox[{"{", 
            RowBox[{"p", ",", "q"}], "}"}]}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{
           RowBox[{"(", "vectorsOfTensorProductAlgebra", ")"}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"indSetReplRul", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
             "]"}], ",", 
            RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "/.", 
             RowBox[{
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "__"}], "]"}], 
              "\[RuleDelayed]", "du1"}]}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"GeometricProduct", "@@@", 
          RowBox[{"Apply", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "#", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"gaTensorProduct", "@@", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}],
                   "}"}]}], "]"}], ",", "productAlgebra"}], "]"}], "&"}], ",", 
            RowBox[{"(", 
             RowBox[{"indSet", "/.", "indSetReplRul"}], ")"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{
            "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
            "]"}], "=", 
           RowBox[{"Prepend", "[", 
            RowBox[{"keysB", ",", 
             RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{
            "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
            "]"}], "=", "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "assign", " ", "grades", " ", "after", " ", "removing", " ", 
          "possible", " ", "minus", " ", "signs"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"Cases", "[", 
          RowBox[{"keysB", ",", "_baseSymbol", ",", "Infinity"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"gr", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
          "indSet"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", 
            RowBox[{"keysB", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
           RowBox[{"gr", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"set", " ", "value", " ", "for", " ", "gaRunningAlgebra"}], 
          ",", " ", 
          RowBox[{"because", " ", "many", " ", 
           RowBox[{"gaGetGrade", "[", " ", "]"}], " ", "and", " ", "others", 
           " ", "depend", " ", "on", " ", "it"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"gaRunningAlgebra", "=", "productAlgebra"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"quiet", ",", "True", ",", 
          RowBox[{"ifPrint", "=", "False"}], ",", "Automatic", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
             "<", "8"}], ",", 
            RowBox[{"ifPrint", "=", "True"}], ",", 
            RowBox[{"ifPrint", "=", "False"}]}], "]"}], ",", "False", ",", 
          RowBox[{"ifPrint", "=", "True"}], ",", "_", ",", 
          RowBox[{"ifPrint", "=", "True"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"ifPrint", ",", 
          RowBox[{
           RowBox[{"algBoxes", "=", 
            RowBox[{"ToBoxes", "[", "productAlgebra", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"Cell", "[", 
                RowBox[{
                 RowBox[{"BoxData", "[", 
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "productAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<,\>\"", 
                    ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                   "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"Cell", "[", 
                RowBox[{
                 RowBox[{"BoxData", "[", 
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBasis[\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"algBoxes", ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], 
                    "}"}], "]"}], "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}],
               "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"gaOrthonormalBasis", "[", 
         RowBox[{
         "productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"grOnly", "===", "All"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaOrthonormalBasis", "[", "productAlgebra", "]"}], "=", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"productAlgebra", ",", "grOnly"}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"gaOrthonormalBasis", "[", 
    RowBox[{"productAlgebra", ",", "\"\<InvDeg[Lex]\>\"", ",", "grOnly"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Set universal unit element grade, this will not influence",
 StyleBox[" private Context",
  FontColor->RGBColor[1, 0, 1]],
 " element ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "__"}],
          "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The ",
 StyleBox["gaToTensorProduct[ ]",
  FontWeight->"Bold"],
 " tries to decompose given algebra (or their tensor product, without term \
reordering) into elementary algebras, for which matrix representations are \
well known. Decomposition into algebras Cl[2,0],Cl[1,1],Cl[0,2] enables to \
find orthonormal base (possibly nonoptimal) using direct product of \
elementary algebras"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"elementaryTPAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reductionAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], "=", 
   "\"\<Reduction set `1` is not allowed\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaToTensorProduct", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Order", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_Cl", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reductionInstruction", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Order", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaToTensorProduct", ",", "Order"}], "]"}]}], ")"}]}], 
         ",", "reductionInstructionNo00"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", "reductionInstruction", "]"}], ",", 
             "reductionAlgebras"}], "]"}], "=!=", "reductionAlgebras"}], ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"reductionInstructionNo00", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"reductionInstruction", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "0"}], "]"}], ",", "Infinity"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"reductionInstruction", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "__Cl", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{"step", ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              "reductionInstructionNo00"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], ".."}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                RowBox[{"First", "[", 
                 RowBox[{"NestWhile", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "y", "}"}], ",", 
                    RowBox[{"step", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "y", "]"}], ",", 
                    RowBox[{"First", "[", 
                    RowBox[{"Last", "[", "y", "]"}], "]"}]}], "]"}]}], "]"}], 
                    "[", "#", "]"}], ",", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                   RowBox[{"SameTest", "\[Rule]", "UnsameQ"}], ",", 
                   RowBox[{"Plus", "@@", "al"}], ",", "Infinity", ",", "2"}], 
                  "]"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              RowBox[{"(", 
               RowBox[{"RotateRight", "/@", "reductionInstructionNo00"}], 
               ")"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", "al"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"al", "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaTensorProduct", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaToTensorProduct", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help steps of how each specific algebra acts on p\[CloseCurlyQuote]s and q\
\[CloseCurlyQuote]s. See ",
 ButtonBox["[NDNO-CoMISoMvCA], [NDSK-EIoRCA],[MRdT].",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}], "-", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"step", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"al", ",", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"col", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
The reverse step, i.e. reconstruction of algebra from tensor products is much \
simple, because we don\[CloseCurlyQuote]t need to realize different \
posibilities\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{"ar", "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_gaTensorProduct", "]"}], ":=", 
   RowBox[{"Cl", "@@", 
    RowBox[{"Fold", "[", 
     RowBox[{"stepRev", ",", 
      RowBox[{"List", "@@@", 
       RowBox[{"(", 
        RowBox[{"List", "@@", "al"}], ")"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_Cl", "]"}], ":=", "al"}], 
  ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Matrix representations of Clifford algebras"
}], "Subsubsection"],

Cell["\<\
Matrix representations of elementary algebras. For general representations we \
limit ouselfs only with simple one parameter representations. In general (see \
Cl2Allrepresentations.nb)  repesentations, which have up to 3 free parameters \
can be constructed. These representations, however, become singular for some \
parameter values, so not included here). Representations are listed in order \
of preference, i.e. Option Automatic will simply take first representation of \
the list.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input"],

Cell["\<\
For Cl[1,0,0]: note outer multiply with {{{0,1},{1,0}} choice will not give \
block diagonal representation! \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Diagonal\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[0,1,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", "\"\<Complex\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "I", "}"}], "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[2,0,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[1,2]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[2,3]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[3,1]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"this", " ", "is"}], " ", "-", 
       RowBox[{"I", "*", 
        RowBox[{"Pauli", "[", 
         RowBox[{"3", ",", "1"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input"],

Cell["For Cl[1,1,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<SymmetricComplex\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary1\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary2\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[0,2,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[1,2]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[2,3]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[3,1]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"-", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}],
        ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Real\>\""}], 
        "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        "}"}]}], ",", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"quaternionic", " ", "representations"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[1,2]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[2,3]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[3,1]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]", 
         "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", "al_Cl", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
        RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", 
     RowBox[{"al_Cl", ",", "rep_String", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"BasisVectorsMultipliers", "/.", 
              RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
           ")"}]}], ",", 
         RowBox[{"repMatrix", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"vRep", "[", 
             RowBox[{"al", ",", "rep"}], "]"}], "/.", 
            RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"mult", ",", 
            RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
           RowBox[{"{", 
            RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaDefineMatrixRepresentation", "::", 
              "BasisVectorsMultipliers"}], ",", "mult"}], "]"}], ";", 
           RowBox[{"mult", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{"repMatrix", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
           ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
           "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
         "rep"}], "]"}]}], "&&", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
        ",", "rep"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BasisVectorsMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}], ",", "repMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}],
             ",", "mult"}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"arg", "=", 
            RowBox[{"Unique", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"repMatrix", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vRep", "[", 
               RowBox[{"al", ",", "rep", ",", "arg"}], "]"}], "/.", 
              RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}], ";", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mult", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{"repMatrix", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
         "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"x_Symbol", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"Symbol", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"SymbolName", "[", "x", "]"}], ",", 
              RowBox[{"\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
             "]"}], "]"}], "/;", 
           RowBox[{
            RowBox[{"Context", "[", "x", "]"}], "===", 
            "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
         ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
       "rep"}], "]"}], "&&", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
       ",", "rep"}], "]"}]}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help function ",
 StyleBox["gaElementaryAlgebraToMatrixRepresentationRules[ ] ",
  FontWeight->"Bold"],
 "construct replacement rules index->matrix for each of vectors (and identity \
element). Note. When dealing with function gaOrthonormalBasis",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", which does not hold its arguments, then",
 StyleBox[" ValueQ[",
  FontWeight->"Bold"],
 "gaOrthonormalBasis",
 StyleBox["[ ]]",
  FontWeight->"Bold"],
 " returns True if argument was evaluated. So, in this way we cannot decide \
if  base was defined. Then instead of  ",
 StyleBox["ValueQ[ ]",
  FontWeight->"Bold"],
 " for base definition we use check ",
 StyleBox["Head[",
  FontWeight->"Bold"],
 "gaOrthonormalBasis",
 StyleBox["[al,{1}]]===",
  FontWeight->"Bold"],
 "gaOrthonormalBasis"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
     "representation"}], "=", 
    "\"\<Algeba `1` matrix representation `2` is undefined. Select from \
defined values `3`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "replRules", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep"}], "]"}], "]"}], "===", 
          "gaListDefinedElementaryRepresentations"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", "rep", ",", 
            RowBox[{
            "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"replRules", "=", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"index2Repl", ",", 
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", "rep", ",", "opts"}], "]"}]}], "]"}], "]"}],
            ")"}], ",", 
          RowBox[{
           RowBox[{"{", "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{"di", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
The explicit specification of elementary algebras matrix representations.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"rep__", "?", "MatrixQ"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "newRep", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"{", "rep", "}"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BasisVectorsMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BasisVectorsMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"{", "rep", "}"}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{
               RowBox[{"{", "rep", "}"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ")"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", 
            RowBox[{"{", "rep", "}"}], ",", 
            RowBox[{
            "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
           "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}],
             ",", "mult"}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newRep", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"{", "rep", "}"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"index2Repl", ",", "newRep"}], "]"}], "]"}], ")"}], ",", 
         RowBox[{
          RowBox[{"{", "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"IdentityMatrix", "[", 
            RowBox[{"di", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input"],

Cell["\<\
Quaternion tensor product H\[CircleTimes]H ->R(4) isomorphism rules, taken \
from [NDSK-EIoRCA]. And simple C\[CircleTimes]H->C(2) rules, using Pauli 1,2 \
matrix representation  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<HH2R4\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "\"\<IToRealMatrix\>\"", " ", "rules", " ", "are", " ", "implemented", 
       " ", 
       RowBox[{"differently", ".", " ", "Only"}], " ", "special", " ", 
       "cases", " ", 
       RowBox[{"works", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<IToRealMatrix\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProductI", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", 
          RowBox[{"-", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", "I", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProductI", "[", 
          RowBox[{"-", "I"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<QToRealMatrix\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\"", ",", "___"}], "]"}], "]"}], ":>", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "without", " ", "isomorphismPreRules", " ", "BaseVectorMultiplies", " ", 
       RowBox[{"don", "'"}], "t", " ", "properly", " ", "work", " ", "with", 
       " ", "above", " ", "isomorphism", " ", "rules"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"isomorphismPreRules", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", "c_", ",", "a3___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "1", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "c", "}"}], ",", 
             RowBox[{"MV", "|", "bs"}], ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
           RowBox[{"c", "=!=", "1"}]}]}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", 
           RowBox[{"c_", "*", "a2_"}], ",", "a3___"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "a2", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "c", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "}"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Help function",
 StyleBox[" applyQuaternionIsomorphismRules[ ]",
  FontWeight->"Bold"],
 ", which apply isomorphism rules under request. The  ",
 StyleBox["nestedApplyQuaternionIsomorphismRules[ ] ",
  FontWeight->"Bold"],
 "apply list of these rules repeatedly"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"applyQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rule", ":", 
         RowBox[{"(", 
          RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
       "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
   RowBox[{"ArrayFlatten", "[", 
    RowBox[{"expr", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{"a1_", ",", "a2_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{"a1", ",", "a2"}], "]"}], "/.", "isomorphismPreRules"}],
             ")"}], "/.", 
           RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
         RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        RowBox[{
        "\"\<Pauli[1,2]\>\"", "|", "\"\<IToRealMatrix\>\"", "|", 
         "\"\<QToRealMatrix\>\""}]}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "a1", "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nestedQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{"rule_List", ",", 
        RowBox[{"theRule", ":", 
         RowBox[{"(", 
          RowBox[{
          "\"\<Pauli[1,2]\>\"", "|", "\"\<HH2R4\>\"", "|", 
           "\"\<IToRealMatrix\>\"", "|", "\"\<QToRealMatrix\>\""}], ")"}]}]}],
        "}"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nestNumber", "=", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"Length", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
            "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"applyQuaternionIsomorphismRule", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{"rule", ",", "theRule"}], "}"}]}], "]"}], "&"}], ",", 
        "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", "ruleListList_", ",", 
     "type_List"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "ruleListList", "]"}], "===", 
      RowBox[{"Length", "[", "type", "]"}]}], ",", 
     RowBox[{"Fold", "[", 
      RowBox[{"nestedQuaternionIsomorphismRule", ",", "expr", ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"ruleListList", ",", "type"}], "}"}], "]"}]}], "]"}], ",", 
     "expr"}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help function",
 StyleBox[" singleElementOuterMultiply[ ]",
  FontWeight->"Bold"],
 " construct outer product for single algebra element."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"singleElementOuterMultiply", "[", 
       RowBox[{
        RowBox[{"c_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{"ind_mvDownUp", ",", "algTP_gaTensorProduct"}], "]"}]}], 
        ",", "algRepRules_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "productMatrices", ",", "opElement", ",", "opMatrix", ",", "marks", 
           ",", "vars", ",", "varsWithMarks", ",", 
           RowBox[{"replaceTensorProducts", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"theQuaternionReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "quaternionReplacement", ",", 
           RowBox[{"theImaginaryIReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "imaginaryIReplacement", ",", 
           "matrixOuterProductOrder", ",", "resultWithoutQuaternionRepl", ",",
            "resultWithQuaternionReplButWithoutIRepl"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"quaternionReplacement", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"QuaternionIsomorphismRules", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"QuaternionIsomorphismRules", "\[Rule]", 
               RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"imaginaryIReplacement", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{"quaternionReplacement", ",", 
             RowBox[{"{", "\"\<IToRealMatrix\>\"", "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"quaternionReplacement", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{"quaternionReplacement", ",", "\"\<IToRealMatrix\>\""}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"matrixOuterProductOrder", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"MatrixOuterProductOrder", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"MatrixOuterProductOrder", "\[Rule]", "Identity"}], 
              "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRepRules", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"varsWithMarks", "=", 
              RowBox[{"Thread", "[", 
               RowBox[{"List", "[", 
                RowBox[{
                 RowBox[{"marks", "=", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}], "&"}], "/@",
                     "algRepRules"}], ")"}]}], ",", 
                 RowBox[{"vars", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"Unique", "[", "sEOM", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "algRepRules", "]"}], "}"}]}], 
                   "]"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{"marks", ",", "False"}], "]"}], "===", "1"}], 
                 ")"}], "&&", 
                RowBox[{"quaternionReplacement", "===", 
                 RowBox[{"{", "}"}]}]}], ",", 
               RowBox[{"(*", " ", 
                RowBox[{
                "for", " ", "single", " ", "quaternion", " ", "can", " ", 
                 "use", " ", "GeometricProduct", " ", "immediatelly", " ", 
                 "if", " ", "option", " ", "isomorphismRules", " ", "not", 
                 " ", "set"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"replaceTensorProducts", "=", 
                  RowBox[{"{", 
                   RowBox[{"RuleDelayed", "@@", 
                    RowBox[{
                    StyleBox["{",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{
                    StyleBox["(",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"Pattern", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Blank", "[", "]"}]}], "]"}], "&"}],
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    StyleBox["/@",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], "vars"}], ")"}]}], ",", 
                    RowBox[{"Times", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"True", "\[Rule]", "Nothing"}]}], "]"}]}], ")"}], 
                    ",", 
                    RowBox[{"(", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"False", "\[Rule]", "Nothing"}]}], "]"}]}], 
                    ")"}]}], "]"}]}], "}"}]}], "}"}]}], ")"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"theQuaternionReplacementRules", "=", 
                 RowBox[{
                 "isomorphismRules", "/@", "quaternionReplacement"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"opElement", "=", "gaTensorProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"productMatrices", "=", 
           RowBox[{"(", 
            RowBox[{"opMatrix", "@@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{"ReplaceAll", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"List", "@@", 
                  RowBox[{"(", 
                   RowBox[{"ind", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "a_", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", "a"}], "}"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", "algRepRules"}], "}"}]}], "]"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"opElement", "===", "Times"}], ")"}], "&&", 
             RowBox[{"(", 
              RowBox[{"matrixOuterProductOrder", "===", "Reverse"}], ")"}]}], 
            ",", 
            RowBox[{"productMatrices", "=", 
             RowBox[{"Reverse", "[", "productMatrices", "]"}]}]}], "]"}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"resultWithoutQuaternionRepl", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "*", 
                 RowBox[{"Nest", "[", 
                  RowBox[{"ArrayFlatten", ",", 
                   RowBox[{"Outer", "[", 
                    RowBox[{"opElement", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", "productMatrices", ")"}]}]}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "productMatrices", "]"}], "-", 
                    "1"}]}], "]"}]}], ")"}], "/.", "replaceTensorProducts"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[RuleDelayed]", "1"}],
               "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"resultWithQuaternionReplButWithoutIRepl", "=", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"quaternionReplacement", "===", 
               RowBox[{"{", "}"}]}], ",", "resultWithoutQuaternionRepl", ",", 
              
              RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
               RowBox[{
               "resultWithoutQuaternionRepl", ",", 
                "theQuaternionReplacementRules", ",", 
                "quaternionReplacement"}], "]"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"imaginaryIReplacement", "===", 
             RowBox[{"{", "}"}]}], ",", 
            "resultWithQuaternionReplButWithoutIRepl", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"theImaginaryIReplacementRules", "=", 
              RowBox[{"isomorphismRules", "/@", "imaginaryIReplacement"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                   "Flatten", "[", "resultWithQuaternionReplButWithoutIRepl", 
                    "]"}], ",", "0"}], "]"}], "]"}], "===", 
                RowBox[{
                "Length", "[", "resultWithQuaternionReplButWithoutIRepl", 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", "isomorphismIRule"}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ArrayFlatten", "@@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"resultWithQuaternionReplButWithoutIRepl", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"cc", ":", 
                    RowBox[{"(", 
                    RowBox[{"1", "|", 
                    RowBox[{"-", "1"}], "|", "I", "|", 
                    RowBox[{"-", "I"}]}], ")"}]}], "\[RuleDelayed]", 
                    RowBox[{"gaTensorProductI", "[", "cc", "]"}]}], "}"}]}], 
                    ")"}], "/.", "theImaginaryIReplacementRules"}], ")"}]}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaTensorProductI", "[", "0", "]"}], "\[Rule]", 
                    "0"}], "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Message", "[", 
                 RowBox[{
                 "gaDefineMatrixRepresentation", "::", 
                  "isomorphismIRuleBad"}], "]"}], ";", "\[IndentingNewLine]", 
                "resultWithQuaternionReplButWithoutIRepl"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaDefineMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " construct entire algebra matrix representation from known elementary \
algebras representation. For complex (\[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]) represenattions, when in the decomposion appears \
algebra Cl[1,0] we use the following trick. First restore Cl[p,q] algebra \
from direct from direct product decomposition. Then instead of Cl[p,q] take \
Cl[q,p], for which decomposition into direct product yields Cl[0,1] (instead \
of Cl[1,0]). Calculate orthonormal base and matrix representation for this \
algebra. Take matrices, which corresponds vectors of calculated matrices. \
Multiply these vectors by imaginary unit I. This efectivelly will turn \
algebra Cl[q,p] vectors into Cl[p,q] vectors which we are seeking. Construct \
entire base of algebra using these matrices. The little problem is how to \
ensure strict correspondence between matrices obtained in this way and \
Cl[p,q] elements (if this is possible in general). "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"groupByGrade", "[", 
    RowBox[{"x_List", ",", "algebra_"}], "]"}], ":=", 
   RowBox[{"Internal`PartitionRagged", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Length", "/@", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"algebra", ",", 
          RowBox[{"Format", "\[Rule]", "\"\<AdditiveRepresentation\>\""}], 
          ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
           RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input"],

Cell["\<\
If an algebra is elementary, just replace by defined representation\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"opts___", "?", "OptionQ"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"otherOpts___", "?", "OptionQ"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"repRules", "=", 
         RowBox[{"ElementaryRepresentations", "/.", 
          RowBox[{"{", "opts", "}"}]}]}], ",", 
        RowBox[{"definedReps", "=", 
         RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}]}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"gradesOnly", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGradesOnly", "/.", 
            RowBox[{"{", "otherOpts", "}"}]}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}]}], ",", 
        "\[IndentingNewLine]", "quaternionReplacement", ",", "whi", ",", 
        "thisRep", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "}"}]}], ",", "answer", ",", "opMatrix", ",", 
        "alvectors", ",", "sortedAnswer", ",", "answerFin"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "there", " ", "are", " ", "no", " ", "elementary", " ", 
         "representation", " ", "replacement", " ", "rules"}], ",", " ", 
        RowBox[{"then", " ", "define"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"repRules", "===", "Automatic"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"whi", "=", 
              RowBox[{"Cases", "[", 
               RowBox[{"gaDefaultMatrixRepresentationData", ",", 
                RowBox[{"{", 
                 RowBox[{"al", ",", "__"}], "}"}]}], "]"}]}], ")"}], "=!=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "if", " ", "elementary", " ", "matrices", " ", "are", " ", "put", 
             " ", "in", " ", "default", " ", "data", " ", "take", " ", 
             "them"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"thisRep", "=", 
            RowBox[{"al", "/.", 
             RowBox[{"whi", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"else", " ", "determine", " ", "automatically"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "NoDefaultData"}],
               ",", "al", ",", 
              RowBox[{
              "gaListDefinedElementaryRepresentations", "[", "al", "]"}], ",", 
              RowBox[{
              "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}],
              "]"}], ";", 
            RowBox[{"thisRep", "=", 
             RowBox[{"al", "/.", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}],
                 "[", 
                RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"thisRep", "=", 
          RowBox[{"(", 
           RowBox[{"al", "/.", "repRules"}], ")"}]}]}], "\[IndentingNewLine]",
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "if", " ", "we", " ", "have", " ", "a", " ", "list", 
         " ", "of", " ", "matrices", " ", "after", " ", "replacement"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"thisRep", ",", 
           RowBox[{"{", 
            RowBox[{"__", "?", "MatrixQ"}], "}"}]}], "]"}], ",", "thisRep", 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"thisRep", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "thisRep", "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "special", " ", "case", " ", "for", " ", "compatability", " ", 
            "to", " ", "decide", " ", "if", " ", "we", " ", "need", " ", "to",
             " ", "replace", " ", "quaternion", " ", "by", " ", "matrices"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"quaternionReplacement", "=", 
           RowBox[{"(", 
            RowBox[{"QuaternionIsomorphismRules", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"quaternionReplacement", "===", "True"}], ")"}], "||", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"{", "quaternionReplacement", "}"}], "]"}], ",", 
               "\"\<Pauli[1,2]\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"bs", "=", 
                 RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], 
                "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"theQuaternionReplacementRules", "=", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "I"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Union", "[", 
              RowBox[{"definedReps", ",", "thisRep"}], "]"}], "===", 
             RowBox[{"Union", "[", "definedReps", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"answer", "=", 
             RowBox[{
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", 
                RowBox[{"First", "[", "thisRep", "]"}], ",", "opts"}], "]"}], 
              "/.", "theQuaternionReplacementRules"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{
               "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
                "representation"}], ",", "al", ",", "thisRep", ",", 
               RowBox[{
               "gaListDefinedElementaryRepresentations", "[", "al", "]"}]}], 
              "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"answer", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"opMatrix", "=", "Dot"}], ",", "\[IndentingNewLine]", 
            RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBasis", "[", 
               RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
             "gaOrthonormalBasis"}], ",", 
            RowBox[{"gaDefineOrthonormalBasis", "[", 
             RowBox[{"al", ",", 
              RowBox[{"Format", "->", "\"\<AdditiveRepresentation\>\""}], ",", 
              RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
              RowBox[{"gaGradesOnly", "\[Rule]", 
               RowBox[{"{", "1", "}"}]}], ",", 
              RowBox[{
              "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], 
              ",", 
              RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"alvectors", "=", 
           RowBox[{"gaOrthonormalBasis", "[", 
            RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{"First", "[", "answer", "]"}], "]"}], "]"}], "*", 
                   "#"}], ")"}], "&"}], "/@", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", 
                  "alvectors"}], "]"}]}], "=!=", " ", 
               RowBox[{"opMatrix", "[", 
                RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"sortedAnswer", "=", 
               RowBox[{"Sort", "[", 
                RowBox[{"answer", ",", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Dot", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                    RowBox[{
                    RowBox[{"opMatrix", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
                "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], 
              "]"}], ";", " ", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"answerFin", "=", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"alvectors", ",", "sortedAnswer"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "if", " ", "full", " ", "algebra", " ", "representation", " ", 
            "was", " ", "requested", " ", "call", " ", 
            RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", 
            " ", "special", " ", "syntax"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"gradesOnly", ",", "\[IndentingNewLine]", 
            RowBox[{"{", "1", "}"}], ",", "answerFin", ",", 
            "\[IndentingNewLine]", "All", ",", 
            RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}], 
            ",", "\[IndentingNewLine]", "_", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaOptionValue", "::", "option"}], ",", 
               RowBox[{"Style", "[", 
                RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], 
               ",", " ", "gaGradesOnly", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", "All"}], "}"}], ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
             "answerFin"}]}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input"],

Cell["\<\
When algebra is not elementary, reduce to tensor product of reduced algebras\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"opts___", "?", "OptionQ"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"otherOpts___", "?", "OptionQ"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"orderAttempt", "=", 
       RowBox[{"Order", "/.", 
        RowBox[{"{", "opts", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
       RowBox[{
        RowBox[{"gaToTensorProduct", "[", 
         RowBox[{"al", ",", 
          RowBox[{"ReductionOrder", "->", "orderAttempt"}]}], "]"}], ",", 
        RowBox[{"{", "opts", "}"}], ",", 
        RowBox[{"{", "otherOpts", "}"}]}], "]"}], "/;", 
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"defineMatrixRepresentationTensorProductMethod", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"{", 
      RowBox[{"opts___", "?", "OptionQ"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"otherOpts___", "?", "OptionQ"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alout", "=", 
        RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}], ",", 
       RowBox[{"quiet", "=", 
        RowBox[{"(", 
         RowBox[{"Quiet", "/.", 
          RowBox[{"{", "otherOpts", "}"}]}], ")"}]}], ",", 
       RowBox[{"mult", "=", 
        RowBox[{"(", 
         RowBox[{"BasisVectorsMultipliers", "/.", 
          RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
       RowBox[{"target", "=", 
        RowBox[{"(", 
         RowBox[{"TargetMatrices", "/.", 
          RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
       RowBox[{"gradesOnly", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "otherOpts", "}"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}]}], ",", 
       RowBox[{"matrixOuterProductOrder", "=", 
        RowBox[{"(", 
         RowBox[{"MatrixOuterProductOrder", "/.", 
          RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
       RowBox[{"orderAttempt", "=", 
        RowBox[{"(", 
         RowBox[{"ReductionOrder", "/.", 
          RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
       RowBox[{"submethodBVA", "=", 
        RowBox[{"(", 
         RowBox[{"BaseVectorAlgebra", "/.", 
          RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
       RowBox[{"quaternionReplacement", "=", 
        RowBox[{"(", 
         RowBox[{"QuaternionIsomorphismRules", "/.", 
          RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
       RowBox[{"repRulesSetting", "=", 
        RowBox[{"ElementaryRepresentations", "/.", 
         RowBox[{"{", "opts", "}"}]}]}], ",", "repRules", ",", "algRep", ",", 
       "newAl", ",", "algIso", ",", "reductionOrder", ",", "counter", ",", 
       "repNames", ",", "signatureSplittedVectors", ",", 
       "signatureSplittedSortedVectors", ",", "algTrueMinusAlgHelp", ",", 
       "removeVectorList", ",", "addVectorList", ",", "remPos", ",", 
       "theQuaternionReplacementRules", ",", "msgHelp", ",", "opMatrix", ",", 
       "answer", ",", "answerFin", ",", "alvectors", ",", "sortedAnswer"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"List", "@@", "al"}], ",", "elementaryTPAlgebras"}], "]"}],
          "=!=", "elementaryTPAlgebras"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaDefineMatrixRepresentation", "::", "unable"}], ",", 
           "al"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"mult", ",", 
          RowBox[{"Automatic", "|", "1"}]}], "]"}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Plus", "@@@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "/@", "mult"}], "=!=", 
         RowBox[{"(", 
          RowBox[{"Plus", "@@@", 
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaDefineMatrixRepresentation", "::", "BasisVectorsMultipliers"}], 
           ",", "mult", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
             RowBox[{"Plus", "@@@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}], "]"}], ";", 
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"orderAttempt", ",", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}]}], "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", "orderAttempt", "]"}], "]"}]}], "]"}], "===", 
           RowBox[{"{", "2", "}"}]}], ")"}]}], ",", 
        RowBox[{"reductionOrder", "=", "orderAttempt"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaOptionValue", "::", "option"}], ",", " ", 
          "defineMatrixRepresentationTensorProductMethod", ",", 
          "ReductionOrder", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}], "}"}], ",", 
          RowBox[{"Abort", "[", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"submethodBVA", "=!=", "Automatic"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Plus", "@@", 
              RowBox[{"(", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ")"}], "=!=", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@", "submethodBVA"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaOptionValue", "::", "option"}], ",", 
              "defineMatrixRepresentationTensorProductMethod", ",", " ", 
              "BaseVectorAlgebra", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", 
                   RowBox[{
                    RowBox[{"Plus", "@@", 
                    RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}], "-", 
                    "#"}]}], "}"}], "&"}], "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"Plus", "@@", 
                   RowBox[{"gaFromTensorProduct", "[", "al", "]"}]}]}], 
                 "]"}]}], ")"}], ",", "Automatic"}], "]"}], ";", 
            RowBox[{"submethodBVA", "=", "Automatic"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "quaternionReplacement", ",", "\[IndentingNewLine]", "True", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"theQuaternionReplacementRules", "=", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"{", "quaternionReplacement", "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Pauli[1,2]\>\"", ",", "\"\<HH2R4\>\"", ",", 
              "\"\<IToRealMatrix\>\"", ",", "\"\<QToRealMatrix\>\""}], 
             "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "If", "  ", "ElementaryRepresentations", " ", "was", " ", "not", " ", 
         "provided", " ", "by", " ", "user"}], ",", " ", 
        RowBox[{"take", " ", "defaults"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "repRulesSetting", ",", "Automatic", ",", "\[IndentingNewLine]", 
        RowBox[{"repRules", "=", 
         RowBox[{
          RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
           RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", "repRulesSetting"}], ";"}], ",", 
        "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           "defineMatrixRepresentationTensorProductMethod", ",", 
           "ElementaryRepresentations", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}], ",", 
           "Automatic"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"repRules", "=", 
          RowBox[{
           RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
            RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      RowBox[{
       RowBox[{"counter", "[", 
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"submethodBVA", ",", 
        RowBox[{"Automatic", "|", "al"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"repRules", ",", 
                   RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}]}], ")"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"msgHelp", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], ",", 
              "al", ",", "repRules", ",", "msgHelp", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "gaListDefinedElementaryRepresentations", "[", "#", "]"}], 
                "&"}], "/@", "msgHelp"}]}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"repNames", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"alP_Cl", "\[RuleDelayed]", 
               RowBox[{"{", 
                RowBox[{"alP", ",", 
                 RowBox[{"++", 
                  RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], "}"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"RotateLeft", "[", 
                  RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                   "}"}]}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"algRep", "=", 
          RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
           RowBox[{"(", 
            RowBox[{"Append", "@@@", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"repNames", ",", 
                RowBox[{"Thread", "[", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"BasisVectorsMultipliers", ",", "mult"}], "]"}], 
                 "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ", 
            "already", " ", "defined"}], ",", " ", 
           RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"getBase", "[", 
              RowBox[{"al", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "here", " ", "was", " ", "the", " ", "problem", " ", "of", " ", 
           "different", " ", "ordering", " ", "on", " ", "repeated", " ", 
           "calculation"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "the", " ", "solution", " ", "was", " ", "to", " ", "insert", " ", 
            "additional", " ", 
            RowBox[{"Sort", "[", "]"}]}], ",", " ", 
           RowBox[{
           "which", " ", "ensures", " ", "the", " ", "vectors", " ", "are", 
            " ", "first", " ", "ordered", " ", "lexicographically"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "and", " ", "onle", " ", "then", " ", "reordered", " ", "by", " ", 
           "signature"}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "suggest", " ", "method", " ", "for", " ", "smaller", " ", 
           "complex", " ", "matrix", " ", "representations", " ", "when", " ", 
           RowBox[{"C", "[", 
            RowBox[{"1", ",", "0"}], "]"}], " ", "appears", " ", "in", " ", 
           "decomposition", " ", "with", " ", "complex", " ", "matrices"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRep", ",", "\"\<Quaternion\>\""}], "]"}], "&&", 
            RowBox[{"Not", "[", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"List", "@@", "al"}], ",", 
               RowBox[{"Cl", "[", 
                RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], "]"}], "]"}], "&&", 
            RowBox[{"!", "quiet"}]}], ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], ",", 
             "al", ",", 
             RowBox[{"Cl", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], 
               ")"}]}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "calculate", " ", "matrix", " ", "representations", " ", "for", " ",
            "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"singleElementOuterMultiply", "[", 
                  RowBox[{"#", ",", "algRep", ",", 
                   RowBox[{
                   "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}], ",", 
                   RowBox[{
                   "MatrixOuterProductOrder", "->", 
                    "matrixOuterProductOrder"}]}], "]"}], "&"}], "/@", 
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"al", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
               "\[RuleDelayed]", "singlet"}], ",", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
             "}"}]}], ")"}]}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"Cl", "[", "__", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"newAl", "=", 
          RowBox[{"gaToTensorProduct", "[", 
           RowBox[{
            RowBox[{"algIso", "=", "submethodBVA"}], ",", 
            RowBox[{"ReductionOrder", "->", "reductionOrder"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mult", "===", "Automatic"}], "|", "1"}], ",", 
           RowBox[{"mult", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "/@", "mult"}], "=!=", 
            RowBox[{"(", 
             RowBox[{"Plus", "@@@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}]}], ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaDefineMatrixRepresentation", "::", 
               "BasisVectorsMultipliers"}], ",", "mult", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                RowBox[{"Plus", "@@@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}], "]"}], 
            ";", 
            RowBox[{"mult", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
               RowBox[{"Plus", "@@@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"repRules", ",", 
                   RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"msgHelp", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"List", "@@", "newAl"}], ")"}], ",", 
               RowBox[{"First", "/@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "newAl"}], ")"}]}], "]"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "::", "replist"}], ",", 
              "newAl", ",", "repRules", ",", "msgHelp", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "gaListDefinedElementaryRepresentations", "[", "#", "]"}], 
                "&"}], "/@", "msgHelp"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ", 
            "already", " ", "defined"}], ",", " ", 
           RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"newAl", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"getBase", "[", 
             RowBox[{"newAl", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"repNames", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"List", "@@", "newAl"}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"alP_Cl", "\[RuleDelayed]", 
               RowBox[{"{", 
                RowBox[{"alP", ",", 
                 RowBox[{"++", 
                  RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], "}"}]}], 
            ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], "\[RuleDelayed]", 
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"RotateLeft", "[", 
                  RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                   "}"}]}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"algRep", "=", 
          RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
           RowBox[{"(", 
            RowBox[{"Append", "@@@", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"repNames", ",", 
                RowBox[{"Thread", "[", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"BasisVectorsMultipliers", ",", "mult"}], "]"}], 
                 "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"signatureSplittedVectors", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"singleElementOuterMultiply", "[", 
                RowBox[{"#", ",", "algRep", ",", 
                 RowBox[{
                 "QuaternionIsomorphismRules", "->", 
                  "theQuaternionReplacementRules"}]}], "]"}], "&"}], ",", 
              RowBox[{"Split", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBasis", "[", 
                 RowBox[{"newAl", ",", "\"\<InvDeg[Lex]\>\"", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "===", 
                   RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}],
               ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
               "\[RuleDelayed]", "singlet"}], ",", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
             "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"signatureSplittedSortedVectors", "=", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Sort", "[", 
               RowBox[{"x", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"FreeQ", "[", 
                   RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                  RowBox[{"Not", "[", 
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
               "]"}]}], "]"}], ",", "signatureSplittedVectors"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"algIso", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", 
               RowBox[{"_", "?", "Positive"}], ",", "0"}], "]"}]}], "]"}], 
           ",", 
           RowBox[{"PrependTo", "[", 
            RowBox[{"signatureSplittedSortedVectors", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"algIso", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{
               RowBox[{"_", "?", "Positive"}], ",", "0", ",", "0"}], "]"}]}], 
            "]"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"signatureSplittedSortedVectors", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"target", "=!=", "Reals"}], ",", 
           RowBox[{"signatureSplittedSortedVectors", "=", 
            RowBox[{"Reverse", "/@", "signatureSplittedSortedVectors"}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"algTrueMinusAlgHelp", "=", 
          RowBox[{"(", 
           RowBox[{"Subtract", "@@", 
            RowBox[{"(", 
             RowBox[{"Most", "/@", 
              RowBox[{"(", 
               RowBox[{"List", "@@@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"gaFromTensorProduct", "[", "al", "]"}], ",", 
                  "algIso"}], "}"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"answer", "=", 
          RowBox[{"Switch", "[", 
           RowBox[{"algTrueMinusAlgHelp", ",", 
            RowBox[{"(*", " ", 
             RowBox[{"0", ",", 
              RowBox[{
              "0", " ", "means", " ", "we", " ", "calculate", " ", "in", " ", 
               "naitive", " ", "algebra"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"signatureSplittedSortedVectors", ",", "1"}], "]"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_Integer", "?", "Negative"}], ",", 
              RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
              "has", " ", "more", " ", "positive", " ", "signature", " ", 
              "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"removeVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{"addVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Drop", "[", 
                 RowBox[{"removeVectorList", ",", 
                  RowBox[{"algTrueMinusAlgHelp", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                 "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_Integer", "?", "Positive"}], ",", 
              RowBox[{"_Integer", "?", "Negative"}]}], "}"}], ",", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
              "has", " ", "more", " ", "negative", " ", "signature", " ", 
              "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"removeVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", 
             RowBox[{"addVectorList", "=", 
              RowBox[{"signatureSplittedSortedVectors", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Sort", "[", 
                 RowBox[{
                  RowBox[{"Join", "[", 
                   RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"Drop", "[", 
                 RowBox[{"removeVectorList", ",", 
                  RowBox[{"algTrueMinusAlgHelp", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "/.", 
              RowBox[{"{", 
               RowBox[{"x_Symbol", "\[RuleDelayed]", 
                RowBox[{
                 RowBox[{"Symbol", "[", 
                  RowBox[{"StringReplace", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                   "]"}], "]"}], "/;", 
                 RowBox[{
                  RowBox[{"Context", "[", "x", "]"}], "===", 
                  "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], 
           "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"test", " ", "answer"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"answer", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"opMatrix", "=", "Dot"}], ",", "\[IndentingNewLine]", 
        RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"gaOrthonormalBasis", "[", 
           RowBox[{"alout", ",", "\"\<InvDeg[Lex]\>\"", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "===", 
         "gaOrthonormalBasis"}], ",", 
        RowBox[{"gaDefineOrthonormalBasis", "[", 
         RowBox[{"alout", ",", 
          RowBox[{"Format", "->", "\"\<AdditiveRepresentation\>\""}], ",", 
          RowBox[{"gaDefineInput", "\[Rule]", "False"}], ",", 
          RowBox[{"gaGradesOnly", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}], ",", 
          RowBox[{
          "gaNonCommutativeMonomialOrder", "->", "\"\<InvDeg[Lex]\>\""}], ",", 
          RowBox[{"gaMakeAlias", "\[Rule]", "False"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alvectors", "=", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"alout", ",", "\"\<InvDeg[Lex]\>\"", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"IdentityMatrix", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"First", "[", "answer", "]"}], "]"}], "]"}], "*", 
               "#"}], ")"}], "&"}], "/@", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", "alvectors"}], 
             "]"}]}], "=!=", " ", 
           RowBox[{"opMatrix", "[", 
            RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"sortedAnswer", "=", 
           RowBox[{"Sort", "[", 
            RowBox[{"answer", ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Dot", "[", 
                  RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                RowBox[{
                 RowBox[{"opMatrix", "[", 
                  RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
            "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"gaDefineMatrixRepresentation", "::", "BadResult"}], "]"}], 
         ";", " ", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answerFin", "=", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"alvectors", ",", "sortedAnswer"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "if", " ", "full", " ", "algebra", " ", "representation", " ", "was", 
        " ", "requested", " ", "call", " ", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "]"}], " ", "with", " ", 
        "special", " ", "syntax"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"gradesOnly", ",", "\[IndentingNewLine]", 
        RowBox[{"{", "1", "}"}], ",", "answerFin", ",", "\[IndentingNewLine]",
         "All", ",", 
        RowBox[{"gaDefineMatrixRepresentation", "[", "answerFin", "]"}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaOptionValue", "::", "option"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{"gaDefineMatrixRepresentation", ",", "Bold"}], "]"}], ",",
            " ", "gaGradesOnly", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "1", "}"}], ",", "All"}], "}"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "answerFin"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell["\<\
Explicit check if matrix representation matches symbolic GA orthogonal base \
multiplication. Useless for end user, keep in private context. First argument \
is gaOrthonormalBasis[testAlgebra], second argument is matrix representation \
list, which can be generated, for example, as  \
gaDefineMatrixRepresentation[testAlgebra,gaDefineMatrixRepresentation[\
testAlgebra]].\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ", "[", 
    RowBox[{"algebraBase_List", ",", " ", "matrixRepresentation_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"replRules", "=", 
        RowBox[{"Rule", "@@@", 
         RowBox[{"(", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Rest", "/@", 
            RowBox[{"{", 
             RowBox[{"algebraBase", ",", "matrixRepresentation"}], "}"}]}], 
           "]"}], ")"}]}]}], ",", "baseProd", ",", "matrProd", ",", 
       "allTable"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allTable", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"baseProd", "=", 
                RowBox[{
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[GeometricProduct]", 
                 RowBox[{"algebraBase", "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}]}], ")"}], "/.", 
              "replRules"}], " ", ",", 
             RowBox[{"matrProd", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
           "True", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"baseProd", "*", 
              RowBox[{"matrixRepresentation", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "===", "matrProd"}], ")"}]}],
           "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"Length", "[", "algebraBase", "]"}], "-", "1"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"And", "@@", 
       RowBox[{"Flatten", "[", "allTable", "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.685413141997261*^9, 3.68541315087189*^9}, {
  3.685413341198981*^9, 3.685413378162685*^9}}],

Cell["\<\
At last define function, which authomatically converts expression to matrix \
representation\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], "=", 
    "\"\<Matrix representation of algebra `1` not defined or orthonormal base \
elements don't match their matrix representations. First make sure you \
defined orthonormal base with gaDefineOrthonormalBasis[alg]. Then calculate \
matrix representations of base vectors of algebra with \
gaDefineMatrixRepresentation[al_Cl,opts___].\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "[", 
     RowBox[{"expr_List", ",", 
      RowBox[{"al", ":", 
       RowBox[{"(", 
        RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"gaToMatrixRepresentation", "[", 
       RowBox[{"#", ",", "al"}], "]"}], "&"}], "/@", "expr"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"al", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "rulesForNonScalars", ",", "allScalars", ",", "allNonScalars", ",", 
       "idMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"idMatrix", "=", 
         RowBox[{"IdentityMatrix", "[", 
          RowBox[{"Length", "[", 
           RowBox[{
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", "0", "}"}]}], "]"}], "*", "idMatrix"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allNonScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"!", 
             RowBox[{"{", "0", "}"}]}]}], "]"}], "/.", 
          RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allScalars", "+", "allNonScalars"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input"],

Cell["\<\
We need inverse base elements (not reciprocal) inside Tr !!! (need \
investigation still)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"baseElementInverse", "[", "el_bs", "]"}], ":=", 
      RowBox[{
       RowBox[{"gaReverse", "[", "el", "]"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaReverse", "[", "el", "]"}], "\[GeometricProduct]", "el"}],
         ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"baseElementInverse", "[", "1", "]"}], "=", "1"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentation", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dimensionFactor", "=", 
        RowBox[{"First", "[", 
         RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], ",", 
       RowBox[{"theIdentityMatrix", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "matrix", "]"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"_", "\[Rule]", 
             RowBox[{"_", "?", "MatrixQ"}]}], ")"}], ".."}], "}"}]}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Tr", "[", 
                RowBox[{"gaGeometricMatrixProduct", "[", 
                 RowBox[{"matrix", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "theIdentityMatrix", "}"}], ",", 
                RowBox[{"(", 
                 RowBox[{"Last", "/@", 
                  RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], 
                 ")"}]}], "]"}]}], ")"}]}], ")"}], "*", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "1", "}"}], ",", 
            RowBox[{"(", 
             RowBox[{"baseElementInverse", "/@", 
              RowBox[{"(", 
               RowBox[{"First", "/@", 
                RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}],
              ")"}]}], "]"}]}], ")"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input"],

Cell["\<\
Possible ways to improve matrix representation code:
1. Use SparseArrays[ ] to represent large dimension matrices. This becomes \
important, when matrices becomes 32x32 or large.
2. For large algebras representation it would be usefull introduce direct \
multiplication by R(16) matrices. This represents Cl[0,8] and Cl[8,0] \
periodicity of Clifford algebras. Current implementation follows {0,2},{1,1} \
or {2,0} steps only.
3. One could get even more representations if user could specify row/column \
interchange transformation (this is always possible to do after matrix \
representation is calculated).\
\>", "Text"],

Cell[TextData[{
 "Note.  In  ",
 StyleBox["repRuls",
  FontWeight->"Bold"],
 " rule ",
 StyleBox["gaTensorProduct[c_]\[RuleDelayed]c*IdentityMatrix[2]]",
  FontWeight->"Bold"],
 " should be given last. Otherwise expression  a +e[x] would first become  \
{{a +e[x],0},{0,a +e[x]}} and matrix structure will be broken."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector inverse, reciprocal base, some bivector algebra formulas, \
blade and versor decomposition (not finished yet)"
}], "Section"],

Cell["\<\
Functions ... are rewrites from the article:
G.S. Staples, D. Wylie. Clifford algebra decompositions of conformal \
orthogonal group elements, Clifford Analysis, Clifford Algebras and Their \
Applications, 4 (2015), 223-240
\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaDeterminantNorm", ",", "gaHermitianNorm", ",", 
     "gaMultivectorParityCheck", ",", "gaInvertableQ", ",", "gaInverse", ",", 
     "ZeroTolerance", ",", "Involutions", ",", "gaRandomBase", ",", 
     "gaReciprocalVectors", ",", "gaReciprocalBase", ",", "gaBilinearForm", 
     ",", "Metric", ",", "gaKillingMetric", ",", "gaCasimir", ",", 
     "gaDynkinFactor", ",", "Blade", ",", "gaCliffordDecomposableQ", ",", 
     "gaVersorQ", ",", "gaVersorNonIsotropicQ", ",", "NextVector", ",", 
     "gaCliffordDecompose", ",", "gaBladeFactor", ",", "gaNorm", ",", 
     "gaMagnitude", ",", "gaSignedMagnitudeSquared", ",", "gaNormalize", ",", 
     "gaFactorTerm"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantNorm", "::", "usage"}], "=", 
   "\"\<Returns determinant of Clifford algebra representation matrices. The \
only nontrivial part is the calculation of determinant of matrices with \
quaternionic matrix elements. In this cace n\[Cross]n quaterminic matrix is \
replaced by 2n\[Cross]2n complex matrix, the determinant of which is \
returned.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianNorm", "::", "usage"}], "=", 
   "\"\<Returns Hermitian norm.\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaInvertableQ", "::", "usage"}], "=", 
   "\"\<gaInvertableQ[generalMultivector,opts] returns True if multivector is \
invertable and False othewise. When symbolic coefficients are present return \
calculated expression, which depend on the method used. Two methods realized \
Method\[Rule]gaSignedMagnitudeSquared, and Method\[Rule]Det. The second \
method calculates the algebra matrix representation, then the \
determinant.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ZeroTolerance", "::", "usage"}], "=", 
   "\"\<Option for gaInverse and gaInvertibleQ, gaRandomBase, \
gaReciprocalVectors, gaReciprocalBase. If numeric determinant/discriminant \
value is less that ZeroTolerance number, it is assumed that determinant value \
is zero. Likewise similar warning is issued when generating/checking random \
base and calculating reciprocal vectors, bases.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Blade", "::", "usage"}], "=", "\"\<Option for gaInverse\>\""}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRandomBase", "::", "usage"}], "=", 
   "\"\<gaRandomBase[algebra, opts___]\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "::", "usage"}], "=", 
   "\"\<gaReciprocalVectors[vectors_List, opts___]\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalBase", "::", "usage"}], "=", 
   "\"\<gaReciprocalBase[fullBase_List, opts___]\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBilinearForm", "::", "usage"}], " ", "=", " ", 
   "\"\<gaBilinearForm[base_List,{grade_Integer}] computes general homogeneus \
bilinear form. Depending in given base the form can be in the reciprocal base \
(i.e. will coinside with dual space form).\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMetric", "::", "usage"}], " ", "=", 
   "\"\<gaMetric[base_List] is a shortcut of \
gaBilinearForm[base_List,{1}]\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaKillingMetric", "::", "usage"}], " ", "=", 
   "\"\<gaKillingMetric[base_List] is a shortcut of \
gaBilinearForm[base_List,{2}]\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "::", "usage"}], " ", "=", 
   "\"\<gaStructureConstant[{i_Integer,j_Integer},k_Integer,baseBivectors_\
List,recoprocalBaseBivectors_List] computes bivector commutator algebra \
structure constants using \!\(TraditionalForm\`\*SuperscriptBox[SubscriptBox[\
\(c\), \(i, j\)], \(k\)] = \(-\((1/2)\)[\*SubscriptBox[\(\[ScriptCapitalB]\), \
\(i\)], \*SubscriptBox[\(\[ScriptCapitalB]\), \(j\)]]\) \[InnerProduct] \
\*SuperscriptBox[\(\[ScriptCapitalB]\), \(k\)]\) formula. Indices indicate \
bivector order in given base, therefore ordering of reciprocal base bivectors \
should match direct base bivector ordering. Otherwise the result will be \
wrong.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCasimir", "::", "usage"}], " ", "=", 
   "\"\<gaCasimir[fullbase,{n_Integer}] with n>=2 implements Lie group \
Casimir operator formula, where Lie generators are replaced by bivectors. It \
is interesting, that gaCasimir[fullbase,{2}] always yields the number of \
bivectors. What are the numbers given by higher numbers n is unclear\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDynkinFactor", "::", "usage"}], " ", "=", 
   "\"\<gaDynkinFactor[fullBase_] computes Dynkin factor by comparing rezults \
of two expressions for Killing form: one expressed by bivectors and the other \
by using expression with structure constants.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMultivectorParityCheck", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordDecompose", "::", "usage"}], "=", 
   "\"\<Test if given homogeneous multivector is decomposible into product of \
vectors\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorQ", "::", "usage"}], "=", 
   "\"\<Test if given multivector is a versor. Experimental. No proof, the \
unclear part is isotropic vectors, which nulify some base vectors.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVersorNonIsotropicQ", "::", "usage"}], "=", 
   "\"\<Test if given multivector is a versor which contains no isotropic \
vectors. Experimental.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBladeFactor", "::", "usage"}], "=", 
   "\"\<Gives blade decomposition into vectors using D. Fontinje algorithm.\>\
\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaInverse", "::", "usage"}], "=", 
   "\"\<gaInverse[m] calculates the inverse of a multivector m. The default \
Method->Automatic for p+q\[LessEqual]6 uses base free formulas. For larger \
dimensions matrix representations are calculated which then are inverted. For \
unexpanded geometric products inverses of each product are computed \
separately. Inverse of simple blades and versors use simplified formulas. \
Possible Method values are Blade, Involutions and Det. Warning. Using \
Method->Blade with multivectors, which are not blades will return wrong \
answer! \>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NextVector", "::", "usage"}], 
   "\"\<Option for oneStepCliffordDecompose gaCliffordDecompose, which \
represents next vector to be selected in oneStepCliffordDecompose\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm", "::", "usage"}], "=", 
   "\"\<gaNorm[mv] or  gaNorm[mv,n_Integer] computes multivector norm. It is \
not the same as gaSignedMagnitudeSquared[]!\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSignedMagnitudeSquared", "::", "usage"}], "=", 
   "\"\<gaSignedMagnitudeSquared[mv] computes multivector magnitude as \
absolute value of scalar part of multivector multiplied by reversed \
multivector. Magnitude is NOT the same as gaNorm.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "usage"}], "=", 
   "\"\<gaNormalize[mv] or  gaNormalize[mv,n_Integer] returns normalized \
(unit) multivector of mv.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "usage"}], "=", 
   "\"\<gaMagnitude[f_multivector] gives magnitude of multivector. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "usage"}], "=", 
   "\"\<gaFactorTerm[f_MV,{fac1MV, fac2_MV}] attempt to rewrite f in the form \
f=answ1\[GeometricProduct]fac1+answ2\[GeometricProduct]fac2+. The result is \
returned in the form {{answ1,fac1},{answ2, fac2},...}. The other side \
factorization can be obtained moving list of factors in the other \
side.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Multivector inverse, invertability test and the determinant norm of MV  \
(i. e. determinants of matrix representations of MV)"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["\<\
The zero test function. Will be used in calculation of inverses also\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"allZeroTest", "::", "zero"}], "=", 
   "\"\<Zero catched when calculating expression `1` inside function \
`2`.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"allZeroTest", "[", 
    RowBox[{
    "expr_List", ",", "exprBeforeExpansion_", ",", "theTransfrom_", ",", 
     "chopTol_", ",", " ", "name_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"theTransfrom", "/@", "expr"}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], ")"}], ",", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{
          RowBox[{"Abs", "[", "#", "]"}], "<", "chopTol"}], "]"}], "&"}]}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"allZeroTest", "::", "zero"}], ",", "exprBeforeExpansion", 
        ",", "name"}], "]"}], ";", 
      RowBox[{"Throw", "[", "Infinity", "]"}]}]}], "]"}]}], ";"}]], "Input"],

Cell["\<\
Optimize general gaFromMatrixRepresentation[ ] function for inversion. It \
will use Dot and SparseArrays for faster matrix multiplication.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaFromMatrixRepresentationSparseNoQuaternions", "[", 
   RowBox[{"matrix_", ",", 
    RowBox[{"al", ":", 
     RowBox[{"(", 
      RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dimensionFactor", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{"MatrixQ", "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}], "]"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Plus", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "/", "dimensionFactor"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Tr", "[", 
                RowBox[{"Dot", "[", 
                 RowBox[{"matrix", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{"MapAt", "[", 
                RowBox[{"SparseArray", ",", 
                 RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], ",", 
                 "1"}], "]"}], ")"}]}], ")"}]}], ")"}], 
          RowBox[{"(", 
           RowBox[{"GeometricAlgebra`p`baseElementInverse", "/@", 
            RowBox[{"gaOrthonormalBasis", "[", "al", "]"}]}], ")"}]}], 
         ")"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"SameQ", "@@", 
    RowBox[{"Dimensions", "[", "matrix", "]"}]}]}]}]], "Input"],

Cell["Explicit formulas for inverse and determinant", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "6"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "involutionInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"TheFormula", "\[Rule]", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "6", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], "]"}]}],
            ",", "hh", ",", "h4h4", ",", "s1", ",", "denom", ",", "numerat"}],
           "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"hh", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{"h", "\[GeometricProduct]", "h"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"h4h4", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"hh", ",", "h4h4"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"h", "\[GeometricProduct]", "h"}], ",", 
                 RowBox[{
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}]}]}], "}"}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"s1", "=", 
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"theExpandFunction", "[", 
                 RowBox[{"h", "\[GeometricProduct]", 
                  RowBox[{"gaGradeNegate", "[", 
                   RowBox[{"hh", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                 "]"}], "+", 
                RowBox[{"2", "*", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{
                   RowBox[{"theExpandFunction", "[", 
                    RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                   RowBox[{"{", "4", "}"}]}], "]"}]}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "s1", "}"}], ",", 
               RowBox[{
                RowBox[{"h", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"hh", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], "+", 
                
                RowBox[{"2", "*", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], ",", 
                   
                   RowBox[{"{", "4", "}"}]}], "]"}]}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"skip", " ", "factor", " ", 
                RowBox[{"1", "/", "3"}], " ", "for", " ", "inverse", " ", 
                "in", " ", "the", " ", "formula"}], ",", " ", 
               RowBox[{"it", " ", "cancels", " ", "out"}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h", "\[GeometricProduct]", "s1"}], "]"}], "]"}]}], 
             ";", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", "s1"}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,6,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", "s1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "6"}], ",", " ", 
     RowBox[{"the", " ", "discriminant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "involutionDet", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"TheFormula", "\[Rule]", "1"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "6", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "6"}], "}"}]}], "]"}]}], "]"}]}],
            ",", "hh", ",", "h4h4", ",", "s1", ",", "denom"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"hh", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", "h"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"h4h4", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"denom", "=", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"Expand", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "/", "3"}], ")"}], "*", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"theExpandFunction", "[", 
                    RowBox[{"hh", "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"hh", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], "+", 
                   RowBox[{"2", "*", 
                    RowBox[{"theExpandFunction", "[", 
                    RowBox[{"h", "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{
                    RowBox[{"theExpandFunction", "[", 
                    RowBox[{
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h", ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}], "\[GeometricProduct]", 
                    RowBox[{"gaGradeNegate", "[", 
                    RowBox[{"h4h4", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "4", "}"}]}], "]"}]}], "]"}]}]}], ")"}]}], 
                "]"}], "]"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "5"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "5", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "h14", ",", "s1", ",", "denom", ",", "numerat"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,5,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"h14", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h14", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,5,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h14", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h14", ",", 
                   RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h14", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h14", ",", 
                  RowBox[{"{", "5", "}"}]}], "]"}]}], ",", "Identity", ",", 
               "chopTol", ",", "\"\<involutionInverse[_,5,__]\>\""}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"s1", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h14", ",", 
                  RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", "s1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "5"}], ",", " ", 
     RowBox[{"the", " ", "discriminant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "5", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "h14", ",", "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"h14", "=", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"denom", "=", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h14", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h14", ",", 
                   RowBox[{"{", "5", "}"}]}], "]"}]}], "]"}], "]"}], 
              "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "4"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "4", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionInverse", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "h", "}"}], ",", 
               RowBox[{"expr", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,4,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"denom", "=", 
              RowBox[{"theDiscriminantFunction", "[", 
               RowBox[{"theExpandFunction", "[", 
                RowBox[{"h", "\[GeometricProduct]", 
                 RowBox[{"gaGradeNegate", "[", 
                  RowBox[{"h", ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"allZeroTest", "[", 
              RowBox[{
               RowBox[{"{", "denom", "}"}], ",", 
               RowBox[{"h", "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], ",", 
               "theDiscriminantFunction", ",", "chopTol", ",", 
               "\"\<involutionInverse[_,4,__]\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"numerat", "=", 
              RowBox[{"theExpandFunction", "[", 
               RowBox[{
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"expr", ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "3"}], "}"}]}], "]"}], 
                "\[GeometricProduct]", 
                RowBox[{"gaGradeNegate", "[", 
                 RowBox[{"h", ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"theAssociationFunction", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "4"}], ",", " ", 
     RowBox[{"the", " ", "discriminant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "4", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theFormula", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"involutionDet", ",", "TheFormula"}], "]"}]}], ",", 
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "theFormula", ",", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theAssociationFunction", "[", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}]}],
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "3"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "3", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,3,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", 
             RowBox[{"theExpandFunction", "[", 
              RowBox[{"h", "\[GeometricProduct]", 
               RowBox[{"gaGradeNegate", "[", 
                RowBox[{"h", ",", 
                 RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "denom", "}"}], ",", 
             RowBox[{"h", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,3,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}], 
              "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "3"}], ",", " ", 
     RowBox[{"the", " ", "discriminant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "3", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", 
           RowBox[{"theDiscriminantFunction", "[", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"h", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"h", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}]}], "]"}], "]"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "2"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "2", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom", ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,2,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", "h", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"gaGradeNegate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "2"}], ",", " ", 
     RowBox[{"the", " ", "discriminant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "2", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}], ",", 
           "denom"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", "h", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"p", "+", "q"}], "=", "1"}], ",", " ", "inverse"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"involutionInverse", "[", 
      RowBox[{"expr_", ",", "1", ",", "expandFunction_", ",", "chopTol_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "denom", 
           ",", "numerat"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"allZeroTest", "[", 
            RowBox[{
             RowBox[{"{", "h", "}"}], ",", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
             "theDiscriminantFunction", ",", "chopTol", ",", 
             "\"\<involutionInverse[_,1,__]\>\""}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"denom", "=", 
            RowBox[{"theDiscriminantFunction", "[", "h", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"numerat", "=", 
            RowBox[{"gaGradeNegate", "[", 
             RowBox[{"expr", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"theAssociationFunction", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "/", "denom"}], ")"}], "*", "numerat"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"p", "+", "q"}], "=", "1"}], ",", " ", 
     RowBox[{"the", " ", "discriminant"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"involutionDet", "[", 
      RowBox[{"expr_", ",", "1", ",", "expandFunction_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theExpandFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"expandFunction", "===", "Automatic"}], ",", 
            RowBox[{
             RowBox[{"gaProductPairExpand", "[", 
              RowBox[{"#", ",", 
               RowBox[{"{", "}"}]}], "]"}], "&"}], ",", "expandFunction"}], 
           "]"}]}], ",", 
         RowBox[{"theAssociationFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaTogether"}], "]"}]}], ",", 
         RowBox[{"theDiscriminantFunction", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity", 
            ",", "gaAdditiveRepresentation"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"h", "=", 
            RowBox[{"theExpandFunction", "[", 
             RowBox[{"expr", "\[GeometricProduct]", 
              RowBox[{"gaGradeNegate", "[", 
               RowBox[{"expr", ",", 
                RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], ",", "denom"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"denom", "=", 
          RowBox[{"theAssociationFunction", "[", "h", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". General multivector inverse, determinant norm of multivector"
}], "Subsubsection"],

Cell["Main multivector inverse function. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"three", " ", "methods", " ", 
     RowBox[{"realized", ":", " ", "Blade"}]}], ",", " ", 
    RowBox[{"Involutions", " ", "and", " ", "Det"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInverse", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"ZeroTolerance", "->", 
        RowBox[{"10.", "^", 
         RowBox[{"(", 
          RowBox[{"-", "10"}], ")"}]}]}], ",", 
       RowBox[{"Expand", "\[Rule]", "Automatic"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInverse", "::", "unknownMethod"}], "=", 
     "\"\<Inversion method Method->`1` is unknown. Possible values are \
Automatic, Blade, Involutions and Det. The Method\[Rule]Blade will only give \
correct inverse for blades and versors. For general multivector it will give \
what is called pseudoinverse in the literature. Method\[Rule]Det will give \
true inverse for general multivector. It is based, however, on inverse of \
multivector matrix representation and therefore is slow. The default is to \
use Method\[Rule]Blade for base vectors and factored versors, \
Method->Involutions for algebras with p+q<=6 and Method\[Rule]Det in all \
other cases.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "scalar", " ", "case"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"1", "/", "expr"}], "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "expr", "}"}], ",", 
          RowBox[{"bs", "|", "MV"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"the", " ", "factored", " ", "product", " ", "case"}], ",", 
        " ", 
        RowBox[{"including", " ", "factored", " ", "versor"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"prod_GeometricProduct", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{
         RowBox[{"gaInverse", "[", 
          RowBox[{"#", ",", "opts"}], "]"}], "&"}], " ", "/@", 
        RowBox[{"Reverse", "[", "prod", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"the", " ", "general", " ", "case"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gaInverse", "[", 
        RowBox[{"expr_", ",", 
         RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"method", "=", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "Method"}], "]"}]}]}], ",", 
            RowBox[{"theExpandFunction", "=", 
             RowBox[{
              RowBox[{"Expand", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "Expand"}], "]"}]}]}], ",", 
            RowBox[{"chopTol", "=", 
             RowBox[{
              RowBox[{"ZeroTolerance", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaInverse", ",", "ZeroTolerance"}], "]"}]}]}], ",", 
            "theMethod", ",", "testResult", ",", "\[IndentingNewLine]", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"whichAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{
               "Message", "\[Rule]", "\"\<Inside gaInverse[ ]. \>\""}]}], 
              "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"theScalarFunction", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity",
                ",", "gaAdditiveRepresentation"}], "]"}]}], ",", "theResult", 
            ",", "dim"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"dim", "=", 
              RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], 
               ",", " ", 
               RowBox[{
               "decide", " ", "which", " ", "one", " ", "of", " ", "methods", 
                " ", "to", " ", "use"}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"method", "===", "Automatic"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Which", "[", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "if", " ", "expr", " ", "is", " ", "base", " ", "element", "  ",
                   "or", " ", "vector", " ", "use", " ", 
                  "gaSignedMagnitudeSquared"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Or", "[", 
                  RowBox[{
                   RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"theScalarFunction", "===", "Identity"}], ",", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"expr", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"Times", "[", 
                    RowBox[{"c_.", ",", "_bs"}], "]"}], "]"}]}], "]"}]}], 
                    "]"}], ",", 
                   RowBox[{
                    RowBox[{"gaGetGrade", "[", "expr", "]"}], "===", 
                    RowBox[{"{", "1", "}"}]}]}], "]"}], ",", 
                 RowBox[{"theMethod", "=", "Blade"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                   RowBox[{
                   "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
                 RowBox[{"theMethod", "=", "Involutions"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                   " ", "do", " ", "generic", " ", "inverse", " ", "using", 
                   " ", "matrix", " ", "representations"}], "*)"}], 
                 "\[IndentingNewLine]", "True", ",", 
                 RowBox[{"theMethod", "=", "Det"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"theMethod", "=", "method"}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "calculate", " ", "inverse", " ", "using", " ", "chosen", " ", 
               "method"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Catch", "[", 
              RowBox[{"Switch", "[", 
               RowBox[{
               "theMethod", ",", "\[IndentingNewLine]", "Blade", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "vector", " ", "and", " ", "base", " ", "element", " ", 
                  "blade", " ", "case"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"testResult", "=", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"gaSignedMagnitudeSquared", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"allZeroTest", "[", 
                  RowBox[{
                  "testResult", ",", "expr", ",", "theScalarFunction", ",", 
                   "chopTol", ",", "\"\<gaInverse[_,Method->Blade]\>\""}], 
                  "]"}], ";", 
                 RowBox[{"theResult", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"expr", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"a_", ",", "b_"}], "]"}], ",", "al__"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Signature", "[", 
                    RowBox[{"Reverse", "[", "a", "]"}], "]"}], "*", 
                    RowBox[{"Signature", "[", 
                    RowBox[{"Reverse", "[", "b", "]"}], "]"}]}], ")"}], 
                    "\[GeometricProduct]", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], ",", "al"}], "]"}]}], 
                    ")"}]}], "}"}]}], ")"}], "/", 
                   RowBox[{
                   "theScalarFunction", "[", "testResult", "]"}]}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "algebras", " ", "for", " ", "which", " ", "involution", " ",
                   "formula", " ", "is", " ", "known"}], " ", "*)"}], 
                "\[IndentingNewLine]", "Involutions", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"theResult", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"involutionInverse", "[", 
                    RowBox[{
                    "expr", ",", "dim", ",", "theExpandFunction", ",", 
                    "chopTol"}], "]"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                  ")"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
                "\[IndentingNewLine]", "Det", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Off", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"gaDefineMatrixRepresentation", "[", 
                  RowBox[{"theAlgebra", ",", 
                   RowBox[{"Method", " ", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<TensorProduct\>\"", ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}], 
                 ";", "\[IndentingNewLine]", 
                 RowBox[{"On", "[", 
                  RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                  "]"}], ";", "\[IndentingNewLine]", 
                 RowBox[{"testResult", "=", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{
                    RowBox[{"gaAdditiveRepresentation", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                    "theAlgebra"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"allZeroTest", "[", 
                  RowBox[{
                  "testResult", ",", "expr", ",", "Identity", ",", "chopTol", 
                   ",", "\"\<gaInverse[_,Method->Det]\>\""}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"theResult", "=", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{
                   "gaFromMatrixRepresentationSparseNoQuaternions", "[", 
                    RowBox[{
                    RowBox[{"Inverse", "[", "testResult", "]"}], ",", 
                    "theAlgebra"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
                ",", "\[IndentingNewLine]", "_", ",", 
                RowBox[{"Message", "[", 
                 RowBox[{
                  RowBox[{"gaInvertableQ", "::", "unknownMethod"}], ",", 
                  "method"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"{", "expr", "}"}], ",", "_bs"}], "]"}]}]}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input"],

Cell[TextData[{
 "Definitions of  determinants of matrices with quaternions can be found in  \
Joao Pedro Morais, Svetlin Georgiev, Wolfgang Spro\[Beta]ig, \
\[OpenCurlyDoubleQuote]Real quaternionic calculus handbook\
\[CloseCurlyDoubleQuote], Birkhauser, 2014. These definitons, however are \
useless, because no interpretation is given for the determinant being the \
quaternion. Ian Porteous in  ",
 ButtonBox["[RA-LoCGAaA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 42 says that \[OpenCurlyDoubleQuote]determinant of n\[Cross]n \
quaternionic matrix is defined to be square root of determinant of the matrix \
regarded as 2n\[Cross]2n complex matrix, the later necesarry having \
determinant of nonnegative real number\[CloseCurlyDoubleQuote]. The \
realization below calculates determinat exactly this way, except it do not \
take square root (user can easily take it itself). The other source about \
quaternionic determinants is in Andrzej Trautmann, \
\[OpenCurlyDoubleQuote]Clifford algebras and their representations\
\[CloseCurlyDoubleQuote], Encyclopedia of Mathematical physics, eds. J.-P. \
Francoise, G.L. Naber and Tsou S.T., Oxford, Elsevier, 2006, vol 1., pages \
518-530. In the Algebras section he describes exactly the same approach, \
except no square root is mentioned. He also gives two explicit formulas for \
determinans."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaDeterminantNorm", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"Expand", "\[Rule]", "Automatic"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDeterminantNorm", "::", "unknownMethod"}], "=", 
   "\"\<Inversion method Method->`1` is unknown. Possible values are \
Automatic, Involutions and Det. Method\[Rule]Det will first calculate matrix \
representation of MV. The default is to use Method->Involutions for algebras \
with p+q<=6 and Method\[Rule]Det in all other cases.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDeterminantNorm", "::", "fail"}], "=", 
    "\"\<Failed to replace quaternion entries by complex 2x2 matrices in `1`.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"y_", "+", "w_"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"y", ",", "op"}], "]"}], "+", 
            RowBox[{"x", "[", 
             RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"Times", "[", 
              RowBox[{"c_", ",", "d__"}], "]"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaPureLinearity", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"the", " ", "factored", " ", "product", " ", "case"}], ",", 
       " ", 
       RowBox[{"including", " ", "factored", " ", "versor"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantNorm", "[", 
       RowBox[{"prod_GeometricProduct", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaDeterminantNorm", "[", 
         RowBox[{"#", ",", "opts"}], "]"}], "&"}], " ", "/@", "prod"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "the", " ", "matrix", " ", "with", " ", "quaternionic", " ", "entries", 
       " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantNorm", "[", 
       RowBox[{"mat_", "?", "MatrixQ"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"mat", ",", 
           RowBox[{"MV", "|", "bs"}]}], "]"}], ",", 
         RowBox[{"Det", "[", "mat", "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"quaternionFreeMatrix", ",", 
             RowBox[{"repRuls", "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"Rest", "[", 
                 RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}],
                  "]"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "c_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"c", "*", 
                  RowBox[{"IdentityMatrix", "[", "2", "]"}]}]}]}], "]"}]}]}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"quaternionFreeMatrix", "=", 
             RowBox[{"ArrayFlatten", "[", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"gaPureLinearity", ",", "mat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
                  RowBox[{"gaPureLinearity", "\[Rule]", "gaTensorProduct"}]}],
                  ")"}], "/.", "repRuls"}], ")"}], "\[IndentingNewLine]", 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"quaternionFreeMatrix", ",", 
                 RowBox[{"MV", "|", "bs"}]}], "]"}], "&&", 
               RowBox[{"MatrixQ", "[", "quaternionFreeMatrix", "]"}]}], ",", 
              RowBox[{"Det", "[", "quaternionFreeMatrix", "]"}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDeterminantNorm", "::", "fail"}], ",", 
                "quaternionFreeMatrix"}], "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
       
       RowBox[{"(", 
        RowBox[{
         RowBox[{"SameQ", "@@", 
          RowBox[{"Dimensions", "[", "mat", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Dimensions", "[", "mat", "]"}], "]"}], "===", "2"}]}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"the", " ", "general", " ", "MV", " ", "case"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDeterminantNorm", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"MV", "|", "bs"}]}], "]"}], ",", "expr", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"method", "=", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaDeterminantNorm", ",", "Method"}], "]"}]}]}], ",", 
            RowBox[{"theExpandFunction", "=", 
             RowBox[{
              RowBox[{"Expand", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", 
               RowBox[{"gaDeterminantNorm", ",", "Expand"}], "]"}]}]}], ",", 
            "theMethod", ",", "testResult", ",", "\[IndentingNewLine]", 
            RowBox[{"theAlgebra", "=", 
             RowBox[{"whichAlgebra", "[", 
              RowBox[{"expr", ",", 
               RowBox[{
               "Message", "\[Rule]", 
                "\"\<Inside gaDeterminantNorm[ ]. \>\""}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"theScalarFunction", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"expr", ",", "_Association"}], "]"}], ",", "Identity",
                ",", "gaAdditiveRepresentation"}], "]"}]}], ",", "theResult", 
            ",", "dim"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"dim", "=", 
              RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"when", " ", "method", " ", "is", " ", "Automatic"}], 
               ",", " ", 
               RowBox[{
               "decide", " ", "which", " ", "one", " ", "of", " ", "methods", 
                " ", "to", " ", "use"}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"method", "===", "Automatic"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Which", "[", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                  RowBox[{"for", " ", "algebras", " ", "p"}], "+", 
                  RowBox[{
                  "q", " ", "use", " ", "specific", " ", "formulas"}]}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"dim", "\[LessEqual]", "6"}], ",", 
                 RowBox[{"theMethod", "=", "Involutions"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "in", " ", "all", " ", "other", " ", "cases", " ", "just", 
                   " ", "do", " ", "generic", " ", "inverse", " ", "using", 
                   " ", "matrix", " ", "representations"}], "*)"}], 
                 "\[IndentingNewLine]", "True", ",", 
                 RowBox[{"theMethod", "=", "Det"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"theMethod", "=", "method"}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "calculate", " ", "inverse", " ", "using", " ", "chosen", " ", 
               "method"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"theMethod", ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "algebras", " ", "for", " ", "which", " ", "involution", " ", 
                 "formula", " ", "is", " ", "known"}], " ", "*)"}], 
               "\[IndentingNewLine]", "Involutions", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"theResult", "=", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"involutionDet", "[", 
                   RowBox[{"expr", ",", "dim", ",", "theExpandFunction"}], 
                   "]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{"singleton", "\[Rule]", "Identity"}], "}"}]}], 
                 ")"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"matrix", " ", "methods"}], " ", "*)"}], 
               "\[IndentingNewLine]", "Det", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Off", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"gaDefineMatrixRepresentation", "[", 
                 RowBox[{"theAlgebra", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}], 
                    ",", 
                    RowBox[{"ElementaryRepresentations", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"On", "[", 
                 RowBox[{"gaDefineMatrixRepresentation", "::", "smaller"}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"theResult", "=", 
                 RowBox[{"Det", "[", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{
                    RowBox[{"gaAdditiveRepresentation", "[", 
                    RowBox[{"gaPE", "[", "expr", "]"}], "]"}], ",", 
                    "theAlgebra"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
               ",", "\[IndentingNewLine]", "_", ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaDeterminantNorm", "::", "unknownMethod"}], ",", 
                 "method"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]}], "Input"],

Cell["\<\
gaInvertableQ is to be rewrited to incorporate gaDeterminantNorm[ ] function. \
This one is an old version.\
\>", "Text",
 FontColor->RGBColor[0.6, 0.4, 0.2],
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
Two methods for invertability test. One is to check if  \
gaSignedMagnitudeSquared is zero, or convert to matrix representation and \
check if determinant is zero. In the case if symbolic coefficients are \
present, just return calculated magnitude square and the determinant. This \
might be usefull for futher procesion.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"two", " ", "methods", " ", 
    RowBox[{"realized", ":", " ", 
     RowBox[{"gaSignedMagnitudeSquared", " ", "and", " ", "Det"}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "gaInvertableQ", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Method", "\[Rule]", "gaSignedMagnitudeSquared"}], ",", 
       RowBox[{"ZeroTolerance", "->", 
        RowBox[{"10", "^", 
         RowBox[{"-", "10"}]}]}], ",", 
       RowBox[{"Expand", "\[Rule]", "Automatic"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"gaInvertableQ", "::", "unknownMethod"}], "=", 
     "\"\<Invertability check method Method->`1` is unknown. Possible values \
are gaSignedMagnitudeSquared and Det.\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaInvertableQ", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"method", "=", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaInvertableQ", ",", "Method"}], "]"}]}]}], ",", 
          RowBox[{"chopTol", "=", 
           RowBox[{
            RowBox[{"ChopTolerance", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaInvertableQ", ",", "ZeroTolerance"}], "]"}]}]}], ",", 
          "testResult", ",", "theAlgebra"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "method", ",", "\[IndentingNewLine]", "gaSignedMagnitudeSquared", 
          ",", 
          RowBox[{
           RowBox[{"testResult", "=", 
            RowBox[{"Chop", "[", 
             RowBox[{
              RowBox[{"gaPE", "[", 
               RowBox[{"gaSignedMagnitudeSquared", "[", 
                RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "]"}], ",", 
              "chopTol"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"testResult", "===", "0"}], ",", "False", ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"AllTrue", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"testResult", "+", "Nothing"}], ")"}]}], ")"}], "/.", 
                  RowBox[{"_bs", "\[Rule]", "1"}]}], ",", "NumericQ"}], "]"}],
                ",", "True", ",", 
               RowBox[{"testResult", "\[NotEqual]", "0"}]}], "]"}]}], "]"}]}],
           ",", "\[IndentingNewLine]", "Det", ",", 
          RowBox[{
           RowBox[{"theAlgebra", "=", 
            RowBox[{"whichAlgebra", "[", 
             RowBox[{"expr", ",", 
              RowBox[{
              "Message", "\[Rule]", "\"\<Inside gaInvertableQ[ ]. \>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "[", "theAlgebra", "]"}], "===", "Cl"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaDefineMatrixRepresentation", "[", 
               RowBox[{"theAlgebra", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}], ",", 
                  RowBox[{"ElementaryRepresentations", "->", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "1"}], "]"}], "->", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
                    "\"\<Diagonal\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
                    "\"\<Antisymmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"2", ",", "0"}], "]"}], "->", 
                    "\"\<Symmetric\>\""}], ",", 
                    RowBox[{
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
                    "\"\<Pauli[1,2]\>\""}]}], "}"}]}]}], "}"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"testResult", "=", 
               RowBox[{"Chop", "[", 
                RowBox[{
                 RowBox[{"Det", "[", 
                  RowBox[{"gaToMatrixRepresentation", "[", 
                   RowBox[{"expr", ",", "theAlgebra"}], "]"}], "]"}], ",", 
                 "chopTol"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"testResult", "===", "0"}], ",", "False", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"NumericQ", "[", "testResult", "]"}], ",", "True", 
                  ",", 
                  RowBox[{"testResult", "\[NotEqual]", "0"}]}], "]"}]}], 
               "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
          "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaInvertableQ", "::", "unknownMethod"}], ",", "method"}],
            "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Other multivector norms (Hermitian norm, magnitude, etc... ) "
}], "Subsubsection"],

Cell[TextData[{
 "Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". This functions calculate norm only if all multivectors are expanded in \
orthogonal base. ",
 StyleBox["Warning",
  FontColor->RGBColor[1, 0.5, 0.5]],
 " have we blocked Abs function when calculating ",
 StyleBox["Norm[ ]",
  FontWeight->"Bold"],
 ". If algebra is not real, then this do yield wrong ",
 "res",
 "ult!!!."
}], "Text"],

Cell["\<\
The norm and magnitude are not the same characteristic for general Clifford \
algebras. In particularly, magnitude squared can be negative.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNorm", "[", 
       RowBox[{"u_", ",", 
        RowBox[{"n", ":", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_Integer", "?", "Positive"}], "|", "Infinity"}], 
          ")"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"Coefficient", "[", 
              RowBox[{"uexp", ",", 
               RowBox[{"Cases", "[", 
                RowBox[{"uexp", ",", "_bs", ",", "Infinity"}], "]"}]}], "]"}],
              ",", 
             RowBox[{"uexp", "/.", 
              RowBox[{"_bs", "->", "0"}]}]}], "]"}], ",", "n"}], "]"}]}], 
        "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", "\n", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNorm", "[", "u_", "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"Coefficient", "[", 
             RowBox[{"uexp", ",", 
              RowBox[{"Cases", "[", 
               RowBox[{"uexp", ",", "_bs", ",", "Infinity"}], "]"}]}], "]"}], 
            ",", 
            RowBox[{"uexp", "/.", 
             RowBox[{"_bs", "->", "0"}]}]}], "]"}], "]"}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["The always working, thought nonoptimal solution.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaSignedMagnitudeSquared", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSignedMagnitudeSquared", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr", ",", "opts"}], "]"}], ",", "expr"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by reversed multivector.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and reversed multivector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaMagnitude", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaMagnitude", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaSignedMagnitudeSquared", "[", 
            RowBox[{"expr", ",", "opts"}], "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"-", "nsq"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", ",",
             "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaMagnitude", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaMagnitude", "::", "nonscalar"}], "]"}]}], "]"}], ";",
            "\[IndentingNewLine]", " ", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"Abs", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"nsq", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["\<\
gaNormalize normalizes multivector if magnitude  squared is numeric and not \
equal 0. For 0 warn and normalize using gaNorm. This, for example apply to \
null vectors.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "zeroMagnitude"}], "=", 
   "\"\<Warning. Multivector `1` has zero magnidude. gaNorm[ ] will be used \
for normalization.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaNormalize", "]"}], "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormalize", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaSignedMagnitudeSquared", "[", 
            RowBox[{"expr", ",", "opts"}], "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"expr", "/", 
             RowBox[{"Sqrt", "[", "nsq", "]"}]}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"expr", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"-", "nsq"}], "]"}]}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormalize", "::", "zeroMagnitude"}], ",", "expr"}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"expr", "/", 
              RowBox[{"gaNorm", "[", "expr", "]"}]}]}], ",", "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaMagnitude", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaMagnitude", "::", "nonscalar"}], "]"}]}], "]"}], ";", 
           RowBox[{"expr", "/", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"Abs", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["\<\
HermitianNorm is calculated as up and down geometric product (applies to \
spinors)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHermitianNorm", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaPE", "[", 
     RowBox[{
      RowBox[{"gaIndexDown", "[", 
       RowBox[{"gaHermitianConjugate", "[", "expr", "]"}], "]"}], 
      "\[GeometricProduct]", "expr"}], "]"}], "/;", 
    RowBox[{"Not", "[", 
     RowBox[{"MatrixQ", "[", "expr", "]"}], "]"}]}]}], ";"}]], "Input"],

Cell["HermitianNorm for matrices acts differently", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaHermitianNorm", "[", "expr_List", "]"}], ":=", 
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"gaQuaternionicConjugate", "[", 
       RowBox[{"gaComplexConjugate", "[", "expr", "]"}], "]"}], "]"}], ",", 
     "expr"}], "]"}], "/;", 
   RowBox[{"MatrixQ", "[", "expr", "]"}]}]}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Reciprocal base and bivector commutator algebra (Lie algebra) functions"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help functions"
}], "Subsubsection"],

Cell["\<\
First, for test puposes it is usefull to have random nonorthonormal base.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaRandomBase", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ZeroTolerance", "->", 
      RowBox[{"10.", "^", 
       RowBox[{"(", 
        RowBox[{"-", "2"}], ")"}]}]}], ",", 
     RowBox[{"CoefficientFunction", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "100"}], "}"}], "]"}], "&"}], ")"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaRandomBase", "[", 
   RowBox[{"al_Cl", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"chopTol", "=", 
       RowBox[{
        RowBox[{"ZeroTolerance", "/.", 
         RowBox[{"{", "opts", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaRandomBase", ",", "ZeroTolerance"}], "]"}]}]}], ",", 
      RowBox[{"cf", "=", 
       RowBox[{
        RowBox[{"CoefficientFunction", "/.", 
         RowBox[{"{", "opts", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaRandomBase", ",", "CoefficientFunction"}], "]"}]}]}], ",",
       "pseudoscalar", ",", "co", ",", "vecBase", ",", 
      "pseudoscalarMagnitude", ",", "genVec"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"genVec", "=", 
      RowBox[{"gaGeneralMultivector", "[", 
       RowBox[{"co", ",", "al", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vecBase", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"genVec", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"co", "[", "any_", "]"}], "\[RuleDelayed]", 
           RowBox[{"cf", "[", "any", "]"}]}], "}"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "}"}]}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"pseudoscalar", "=", 
      RowBox[{"gaPE", "[", 
       RowBox[{"OuterProduct", "@@", "vecBase"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pseudoscalarMagnitude", "=", 
      RowBox[{"gaPE", "[", 
       RowBox[{"pseudoscalar", "\[GeometricProduct]", 
        RowBox[{"gaReverse", "[", "pseudoscalar", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{"allZeroTest", "[", 
       RowBox[{
        RowBox[{"{", "pseudoscalarMagnitude", "}"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"OuterProduct", "@@", "vecBase"}], ")"}], 
         "\[GeometricProduct]", 
         RowBox[{"gaReverse", "[", 
          RowBox[{"OuterProduct", "@@", "vecBase"}], "]"}]}], ",", "Identity",
         ",", "chopTol", ",", "\"\<gaRandomBase[ ]\>\""}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"gaPE", "[", 
          RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
        RowBox[{"Rest", "[", 
         RowBox[{"Subsets", "[", "vecBase", "]"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}], "[", 
        RowBox[{
         RowBox[{"GeometricAlgebra`mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Reciprocal vectors and full bases"
}], "Subsubsection"],

Cell["\<\
The main function computes reciprocal vectors. Because given set of vectors \
can be linearly dependent we add some checks and tolerances in when we \
consider them linearly independent.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalVectors", "::", "NotABase"}], "=", 
   "\"\<There are not enought linearly independent vectors in `1` in order to \
compute reciprocal base for `2` algebra.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaReciprocalVectors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ZeroTolerance", "->", 
     RowBox[{"10.", "^", 
      RowBox[{"(", 
       RowBox[{"-", "2"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaReciprocalVectors", "[", 
   RowBox[{"vectorBase_List", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theAssociationFunction", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"vectorBase", ",", "_Association"}], "]"}], ",", "Identity",
          ",", "gaTogether"}], "]"}]}], ",", 
      RowBox[{"theResultFunction", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"vectorBase", ",", "_Association"}], "]"}], ",", "Identity",
          ",", "gaAdditiveRepresentation"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"chopTol", "=", 
       RowBox[{
        RowBox[{"ZeroTolerance", "/.", 
         RowBox[{"{", "opts", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaReciprocalVectors", ",", "ZeroTolerance"}], "]"}]}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"theAlgebra", "=", 
       RowBox[{"GeometricAlgebra`p`whichAlgebra", "[", "vectorBase", "]"}]}], 
      ",", 
      RowBox[{"pseudoscalar", "=", 
       RowBox[{"gaPE", "[", 
        RowBox[{"OuterProduct", "@@", "vectorBase"}], "]"}]}], ",", 
      "pseudoscalarMagnitude", ",", "inversePseudoscalar"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "=!=", 
        RowBox[{"Length", "[", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"gaGetMV", "[", 
            RowBox[{"vectorBase", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], ",", "0"}], "]"}], "]"}]}], 
       ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaReciprocalVectors", "::", "NotABase"}], ",", 
          "vectorBase", ",", "theAlgebra"}], "]"}], ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"pseudoscalarMagnitude", "=", 
      RowBox[{"theAssociationFunction", "[", 
       RowBox[{"gaPE", "[", 
        RowBox[{"pseudoscalar", "\[GeometricProduct]", 
         RowBox[{"gaReverse", "[", "pseudoscalar", "]"}]}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", 
      RowBox[{"GeometricAlgebra`p`allZeroTest", "[", 
       RowBox[{
        RowBox[{"{", "pseudoscalarMagnitude", "}"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"OuterProduct", "@@", "vectorBase"}], ")"}], 
         "\[GeometricProduct]", 
         RowBox[{"gaReverse", "[", 
          RowBox[{"OuterProduct", "@@", "vectorBase"}], "]"}]}], ",", 
        "theResultFunction", ",", "chopTol", ",", 
        "\"\<gaReciprocalVectors[ ]\>\""}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"inversePseudoscalar", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], "*", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], 
               "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], "/", 
         "pseudoscalarMagnitude"}], ")"}], "\[GeometricProduct]", 
       "pseudoscalar"}]}], ";", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"gaPE", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{"i", "-", "1"}], ")"}]}], "\[GeometricProduct]", 
           RowBox[{"(", 
            RowBox[{"OuterProduct", "@@", 
             RowBox[{"ReplacePart", "[", 
              RowBox[{"vectorBase", ",", 
               RowBox[{"i", "->", "Nothing"}]}], "]"}]}], ")"}]}], ")"}], 
         "\[LeftContract]", "inversePseudoscalar"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}]}], 
        "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"],

Cell["\<\
After we know how to compute reciprocal vectors, we can generate entire \
reciprocal base. 
In the case of orthonormal base we just rise indices\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaReciprocalBase", "[", "downIndexBase_List", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"downIndexBase", "/.", 
     RowBox[{"{", 
      RowBox[{"x_mvDownUp", "\[RuleDelayed]", 
       RowBox[{"Reverse", "[", "x", "]"}]}], "}"}]}], ")"}], "/;", 
   RowBox[{"downIndexBase", "===", 
    RowBox[{"gaOrthonormalBasis", "[", 
     RowBox[{"whichAlgebra", "[", "downIndexBase", "]"}], 
     "]"}]}]}]}]], "Input"],

Cell["For general case we are forced to do calculations", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaReciprocalBase", "::", "ordering"}], "=", 
   "\"\<Warning. Provided full base `1` do not match or is inconsistent with \
given base vectors `2`. Calculated reciprocal base of higher grade elements \
will not match the provided base higher grade elements. Provide properly \
prepared base!\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "reciprocalVectors", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"ZeroTolerance", "->", 
     RowBox[{"10.", "^", 
      RowBox[{"(", 
       RowBox[{"-", "2"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaReciprocalBase", "[", 
   RowBox[{"algebraBase_List", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vectors", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "1", "}"}]}], "]"}], "&"}], "/@", "algebraBase"}], 
          ",", "0"}], "]"}]}], ",", "reciprocVec"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"gaPE", "[", 
            RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
          RowBox[{"Rest", "[", 
           RowBox[{"Subsets", "[", "vectors", "]"}], "]"}]}], "=!=", 
         RowBox[{"Rest", "[", "algebraBase", "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaReciprocalBase", "::", "ordering"}], ",", "algebraBase", 
          ",", "vectors"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"reciprocVec", "=", 
       RowBox[{"gaReciprocalVectors", "[", 
        RowBox[{"vectors", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaPE", "[", 
           RowBox[{"OuterProduct", "[", "##", "]"}], "]"}], "&"}], "@@@", 
         RowBox[{"Rest", "[", 
          RowBox[{"Subsets", "[", "reciprocVec", "]"}], "]"}]}], ",", 
        RowBox[{"algebraBase", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "algebraBase", "]"}], "===", 
    RowBox[{"Power", "[", 
     RowBox[{"2", ",", 
      RowBox[{"gaVectorSpaceDimension", "[", 
       RowBox[{"whichAlgebra", "[", "algebraBase", "]"}], "]"}]}], 
     "]"}]}]}]}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Structure constants and bilinear forms (including the metric and  Killing \
form)"
}], "Subsubsection"],

Cell["\<\
Given some base it is trivial to compute general homogeneus bilinear forms, \
which are required for Casimir operator expressions (the standard Lie algebra \
formulas). Table[InnerProduct[list[[i]], list[[j]]], {i, 1, Length[list]}, \
{j, i,  Length[list]}]; might be faster according to \
https://mathematica.stackexchange.com/questions/163240/specialized-form-of-\
outerf-list-list-for-symmetric-f  .\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBilinearForm", "[", 
     RowBox[{"base_List", ",", 
      RowBox[{"{", "grade_Integer", "}"}]}], "]"}], ":=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"homogeneusElements", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"base", ",", 
            RowBox[{"{", "grade", "}"}]}], "]"}], ",", "0"}], "]"}]}], "}"}], 
      ",", 
      RowBox[{"Map", "[", 
       RowBox[{"gaPE", ",", 
        RowBox[{"Outer", "[", 
         RowBox[{
         "InnerProduct", ",", "homogeneusElements", ",", 
          "homogeneusElements"}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMetric", "[", "base_List", "]"}], ":=", 
   RowBox[{"gaBilinearForm", "[", 
    RowBox[{"base", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaKillingMetric", "[", "base_List", "]"}], ":=", 
   RowBox[{"gaBilinearForm", "[", 
    RowBox[{"base", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "General formula for structre constants can be easily derived from the \
bivector algebra definition: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "/", "2"}], ")"}], "[", 
     RowBox[{
      SubscriptBox["\[ScriptCapitalB]", "i"], ",", 
      SubscriptBox["\[ScriptCapitalB]", "j"]}], "]"}], "=", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["c", 
       RowBox[{"i", ",", "j"}]], "k"], 
     SubscriptBox["\[ScriptCapitalB]", "k"]}]}], TraditionalForm]]],
 " by taking inner product from the right with reciprocal bivector ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]]],
 " (no sum). Then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]]],
 "\[InnerProduct]",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptCapitalB]", "k"], TraditionalForm]]],
 "(no sum) will yield -1, and we will have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["c", 
      RowBox[{"i", ",", "j"}]], "k"], "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", "2"}], ")"}], "[", 
       RowBox[{
        SubscriptBox["\[ScriptCapitalB]", "i"], ",", 
        SubscriptBox["\[ScriptCapitalB]", "j"]}], "]"}]}], "\[InnerProduct]", 
     
     SuperscriptBox["\[ScriptCapitalB]", "k"]}]}], TraditionalForm]]],
 ", which is valid for general nonorthonormal set of bivectors (which should \
make base).  Because of explicit anticommutativity we slightly save time \
remembering structure constant values. Indices represent bivector order \
number in given base, therefore it is important to provide the same order in \
reciprocal base (otherwise computation will go wrong)."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_", ",", "i_"}], "}"}], ",", "__"}], "]"}], ":=", "0"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaStructureConstant", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], ",", "k_Integer", ",", 
     "baseBivectors_List", ",", "recoprocalBaseBivectors_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"gaStructureConstant", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"j", ",", "i"}], "}"}], ",", "k", ",", "baseBivectors", ",", 
       "recoprocalBaseBivectors"}], "]"}]}], "/;", 
    RowBox[{"i", "<", "j"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaStructureConstant", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], ",", "k_Integer", ",", 
    "baseBivectors_List", ",", "recoprocalBaseBivectors_List"}], "]"}], ":=", 
  
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaStructureConstant", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "baseBivectors", ",", 
       "recoprocalBaseBivectors"}], "]"}], "=", 
     RowBox[{"-", 
      RowBox[{"gaPE", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutatorExpand", "[", 
          RowBox[{"1", "/", "2"}], "]"}], "[", 
         RowBox[{"gaCommutator", "[", 
          RowBox[{
           RowBox[{"baseBivectors", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"baseBivectors", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], "\[InnerProduct]", 
        RowBox[{"recoprocalBaseBivectors", "[", 
         RowBox[{"[", "k", "]"}], "]"}]}], "]"}]}]}], ")"}], "/;", 
   RowBox[{"i", ">", "j"}]}]}]}], "Input"],

Cell["\<\
Define general Casimir operator using Lie algebras formulas:  C_m =\\sum \
c_{i_1j_1}^{j_2} c_{i_2 j_2}^{j_3}
  \\cdots c_{i_m j_m}^{j_1} g^{i_1l_1} g^{i_2l_2} \\cdots g^{i_ml_m} \
\\cX_{l_1} \\cX_{l_2}\\cdots\\cX_{l_m}\\, \
\>", "Text"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["C", "2"], TraditionalForm]]],
 " operator gives the number of bivectors of the algebra. What is less clear \
is how to interpret numbers of formulas ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["C", "3"], TraditionalForm]]],
 ", etc... Seems, that infinite number of these exist and they are definitely \
not higher order Casimir operators of Lie groups."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCasimir", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"{", "order_Integer", "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"reciprocalBase", "=", 
        RowBox[{"gaReciprocalBase", "[", "fullBase", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
       ",", "theStructureConstants", ",", 
       "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
       ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
       "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "dynkinFactor", ",", 
       "mySum", ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", 
       ",", "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"iterRange", "=", 
       RowBox[{"Binomial", "[", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "theBivectors", "]"}], "===", "1"}], ",", "0",
         ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"theBivectors", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"fullBase", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theReciprocalBivectors", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"gaGetMV", "[", 
             RowBox[{"reciprocalBase", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theStructureConstants", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"gaStructureConstant", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
              ",", "theReciprocalBivectors"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"uniqueSymbolsC", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Unique", "[", "cas", "]"}], ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"uniqueSymbolsB", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Unique", "[", "bii", "]"}], ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"inverseKillingMetric", "=", 
          RowBox[{"Inverse", "[", 
           RowBox[{"gaKillingMetric", "[", "fullBase", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"theStructureConstantsSummedWithMetric", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"theStructureConstants", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "j", ",", "k"}], "]"}], "]"}], "*", 
               RowBox[{"inverseKillingMetric", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "l"}], "]"}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "iterRange"}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "iterRange"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"l", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iterators", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
           RowBox[{"NestList", "[", 
            RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
             RowBox[{
              RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
            "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"dynkinFactor", "=", 
          RowBox[{"gaDynkinFactor", "[", "fullBase", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"dynkinFactor", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ReleaseHold", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Hold", "@@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"mySum", "@@", 
                  RowBox[{"Prepend", "[", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsB"}], ")"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"mySum", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Append", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"gp", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"theBivectors", ",", "#"}], "]"}], "&"}], "/@", 
                    "uniqueSymbolsB"}], ")"}]}], ")"}]}]}], 
                   "\[IndentingNewLine]", "]"}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "scWm", "->", "theStructureConstantsSummedWithMetric"}], ",", 
                
                RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
                RowBox[{"mySum", "\[Rule]", "Sum"}]}], "}"}]}], "]"}], "/.", 
            RowBox[{"{", 
             RowBox[{"gp", "\[Rule]", "GeometricProduct"}], "}"}]}], 
           ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"order", ">", "1"}]}]}]], "Input"],

Cell[CellGroupData[{

Cell["\<\
 One can instead of summing structure constants with metric use reciprocal \
bivectors instead. This however is slower, therefore inactivated.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaCasimirOther", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"{", "order_Integer", "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"reciprocalBase", "=", 
        RowBox[{"gaReciprocalBase", "[", "fullBase", "]"}]}], ",", 
       RowBox[{"theAlgebra", "=", 
        RowBox[{"whichAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
       ",", "theStructureConstants", ",", 
       "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
       ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
       "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "dynkinFactor", ",", 
       "mySum", ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", 
       ",", "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"iterRange", "=", 
       RowBox[{"Binomial", "[", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], ",", 
         "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"theBivectors", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"gaGetMV", "[", 
          RowBox[{"fullBase", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"theReciprocalBivectors", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"gaGetMV", "[", 
          RowBox[{"reciprocalBase", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"theStructureConstants", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"gaStructureConstant", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", 
           ",", "theReciprocalBivectors"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"uniqueSymbolsC", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Unique", "[", "cas", "]"}], ",", 
         RowBox[{"{", "order", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"uniqueSymbolsB", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Unique", "[", "bii", "]"}], ",", 
         RowBox[{"{", "order", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"iterators", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
        RowBox[{"NestList", "[", 
         RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
          RowBox[{
           RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dynkinFactor", "=", 
       RowBox[{"gaDynkinFactor", "[", "fullBase", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dynkinFactor", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ReleaseHold", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Hold", "@@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"mySum", "@@", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                   "uniqueSymbolsB"}], ")"}], ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"mySum", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                    "uniqueSymbolsC"}], ")"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"gp", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"theReciprocalBivectors", ",", "#"}], "]"}], 
                    "&"}], "/@", 
                    RowBox[{"Reverse", "[", "uniqueSymbolsB", "]"}]}], 
                    ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "]"}]}], 
              "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"scWm", "->", "theStructureConstants"}], ",", 
             RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
             RowBox[{"mySum", "\[Rule]", "Sum"}]}], "}"}]}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{"gp", "\[Rule]", "GeometricProduct"}], "}"}]}], ")"}]}]}]}],
     "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"order", ">", "1"}]}]}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],

Cell["\<\
Dynkin index we compute using the trick that numbers given by two different \
formulas should yield the same number. From that we comute ratio. In \
particularly we compute Killing metric using structure constants  K_{ij}= \
\\delta\\sum_{k,l=1}^d c_{il}^k  c_{jk}^l, (where \\delta is the Dynkin \
factor). The function below is hidden from the user, because it is used in \
gaDynkinFactor[ ] only.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaKillingMetric", "[", 
   RowBox[{"fullBase_", ",", 
    RowBox[{"Method", "\[Rule]", "StructureConstants"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"reciprocalBase", "=", 
       RowBox[{"gaReciprocalBase", "[", "fullBase", "]"}]}], ",", 
      RowBox[{"theAlgebra", "=", 
       RowBox[{"whichAlgebra", "[", "fullBase", "]"}]}], ",", "iterRange", 
      ",", "theStructureConstants", ",", 
      "theStructureConstantsSummedWithMetric", ",", "inverseKillingMetric", 
      ",", "theBivectors", ",", "theReciprocalBivectors", ",", 
      "uniqueSymbolsC", ",", "uniqueSymbolsB", ",", "mySum", ",", "myTable", 
      ",", "gp", ",", "ptr", ",", "scWm", ",", "cas", ",", "bii", ",", 
      "iterators"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"iterRange", "=", 
      RowBox[{"Binomial", "[", 
       RowBox[{
        RowBox[{"gaVectorSpaceDimension", "[", "theAlgebra", "]"}], ",", 
        "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"theBivectors", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{"fullBase", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"theReciprocalBivectors", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{"reciprocalBase", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"theStructureConstants", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"gaStructureConstant", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "j"}], "}"}], ",", "k", ",", "theBivectors", ",",
           "theReciprocalBivectors"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"uniqueSymbolsC", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Unique", "[", "cas", "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"uniqueSymbolsB", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Unique", "[", "bii", "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"theStructureConstantsSummedWithMetric", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"theStructureConstants", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "j", ",", "k"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "iterRange"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "iterRange"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "iterRange"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"iterators", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"#", ",", "2"}], "]"}], "&"}], "/@", 
       RowBox[{"NestList", "[", 
        RowBox[{"RotateLeft", ",", "uniqueSymbolsC", ",", 
         RowBox[{
          RowBox[{"Length", "[", "uniqueSymbolsC", "]"}], "-", "1"}]}], 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Hold", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"myTable", "@@", 
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
               "uniqueSymbolsB"}], ")"}], ",", 
             RowBox[{"(", 
              RowBox[{"mySum", "@@", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", "iterRange"}], "}"}], "&"}], "/@", 
                   "uniqueSymbolsC"}], ")"}], ",", 
                 RowBox[{"(", 
                  RowBox[{"Times", "@@", 
                   RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ptr", "[", 
                    RowBox[{"scWm", ",", "##"}], "]"}], "&"}], ",", "x"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{"iterators", ",", "uniqueSymbolsB"}], "}"}]}], 
                    "]"}]}], "]"}], ")"}]}], ")"}]}], "]"}]}], ")"}]}], 
            "\[IndentingNewLine]", "]"}]}], "}"}]}], ")"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"scWm", "->", "theStructureConstantsSummedWithMetric"}], ",", 
         RowBox[{"ptr", "\[Rule]", "Part"}], ",", 
         RowBox[{"mySum", "\[Rule]", "Sum"}], ",", 
         RowBox[{"myTable", "\[Rule]", "Table"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell["\<\
and then do the same computations directly with bivectors \
K_{ij}=\\cB_i\\d\\cB_j=\\langle\\cB_i\\cB_j\\rangle_0. Comparing these \
numbers the Dynkin factor is computed.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDynkinFactor", "[", "fullBase_", "]"}], ":=", 
  RowBox[{"First", "[", 
   RowBox[{"Divide", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", "#", "]"}], ",", "0"}], "]"}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaKillingMetric", "[", "fullBase", "]"}], ",", 
        RowBox[{"gaKillingMetric", "[", 
         RowBox[{"fullBase", ",", 
          RowBox[{"Method", "\[Rule]", "StructureConstants"}]}], "]"}]}], 
       "}"}]}], ")"}]}], "]"}]}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into geometric product"
}], "Subsection"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Help and decomposition test functions"
}], "Subsubsection"],

Cell["Here are some criteria when ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "True", " ", "if", " ", "all", " ", "terms", " ", "of", " ", "u", " ", 
    "are", " ", "of", " ", "even", " ", "grade", " ", "or", " ", "all", " ", 
    "terms", " ", "are", " ", "of", " ", "odd", " ", "grade"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"gaMultivectorParityCheck", "[", "u_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"allGrades", "=", 
        RowBox[{"gaGetGrade", "[", "u", "]"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "EvenQ"}], "]"}], "||", 
       RowBox[{"AllTrue", "[", 
        RowBox[{"allGrades", ",", "OddQ"}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gradeParityCheck", "[", "gradeList_List", "]"}], ":=", 
    RowBox[{
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "EvenQ"}], "]"}], "||", 
     RowBox[{"AllTrue", "[", 
      RowBox[{"gradeList", ",", "OddQ"}], "]"}]}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Decomposability", " ", 
    RowBox[{"Test", ".", " ", "Necessary"}], " ", "in", " ", "indefinite", 
    " ", "signatures"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"gaCliffordDecomposableQ", "[", "u_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"allGrades", "=", 
       RowBox[{"gaGetGrade", "[", "u", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
             RowBox[{"Equal", "[", 
              RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaSignedMagnitudeSquared", "[", "u", "]"}], "]"}], "]"}], 
         ",", 
         RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaSignedMagnitudeSquared", "[", 
            RowBox[{"gaGetMV", "[", 
             RowBox[{"u", ",", 
              RowBox[{"{", 
               RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], "]"}],
            "]"}], "===", "0"}], ",", 
         RowBox[{"Throw", "[", "False", "]"}], ",", 
         RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}]}]], "Input"],

Cell["\<\

This is experimental (unproved) versor test. Versor here is defined as a \
geometric product of vectors. Important note: vectors can be isotropic (null) \
here. If we do not allow isotropic vectors (like in [GSSDW-CADoCOGE]), then \
we should remove the zero check condition.\
\>", "Text"],

Cell[TextData[{
 "It checks if multivector consist of either of only even or only odd grades \
and then computes A ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["e", "i"], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["A", "~"], TraditionalForm]]],
 " for each of base vectors. If after transformation base vectors remains \
vectors, then we assume A is a versor. If for some vectors after \
transformation  we get zero, this means we have at least one izotropic \
vector. The zero position in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["e", "i"], TraditionalForm]]],
 "list  corresponds to that base vector. The question then is how to proceed \
further. Does this spoil the test? There can be more than one such vectors. \
Should we remove such base vectors and repeat test? If so, then versors which \
consist entirely from izotropic vectors will be entirely removed. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaVersorQ", "[", "generalMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theAlgebra", "=", 
       RowBox[{"whichAlgebra", "[", 
        RowBox[{"generalMV", ",", 
         RowBox[{"Message", "\[Rule]", "\"\<Inside gaVersorQ[ ]. \>\""}]}], 
        "]"}]}], ",", 
      RowBox[{"generalMVexpanded", "=", 
       RowBox[{"gaPE", "[", "generalMV", "]"}]}], ",", "baseVectors", ",", 
      "reversedMV"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{
         "gaMultivectorParityCheck", "[", "generalMVexpanded", "]"}]}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"baseVectors", "=", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"theAlgebra", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"reversedMV", "=", 
       RowBox[{"gaReverse", "[", "generalMVexpanded", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
              "]"}], "\[GeometricProduct]", "reversedMV"}], "]"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}], ",", "\"\<ok\>\"", ",", 
          RowBox[{"{", "0", "}"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Unequal", "[", 
             RowBox[{
              RowBox[{"gaPE", "[", 
               RowBox[{
                RowBox[{"gaPE", "[", 
                 RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
                 "]"}], "\[GeometricProduct]", "reversedMV"}], "]"}], ",", 
              "0"}], "]"}], ",", 
            RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ",", "_", ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
       "baseVectors"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}], ";"}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaVersorNonIsotropicQ", "[", "generalMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theAlgebra", "=", 
       RowBox[{"whichAlgebra", "[", 
        RowBox[{"generalMV", ",", 
         RowBox[{
         "Message", "\[Rule]", 
          "\"\<Inside gaVersorNonIsotropicQ[ ]. \>\""}]}], "]"}]}], ",", 
      RowBox[{"generalMVexpanded", "=", 
       RowBox[{"gaPE", "[", "generalMV", "]"}]}], ",", "baseVectors", ",", 
      "reversedMV"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{
         "gaMultivectorParityCheck", "[", "generalMVexpanded", "]"}]}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"baseVectors", "=", 
       RowBox[{"gaOrthonormalBasis", "[", 
        RowBox[{"theAlgebra", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"reversedMV", "=", 
       RowBox[{"gaReverse", "[", "generalMVexpanded", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"gaPE", "[", 
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"generalMVexpanded", "\[GeometricProduct]", "#"}], 
              "]"}], "\[GeometricProduct]", "reversedMV"}], "]"}], "]"}], ",", 
          RowBox[{"{", "1", "}"}], ",", "\"\<ok\>\"", ",", "_", ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], "/@", 
       "baseVectors"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"gaInvertableQ", "[", "generalMV", "]"}], "]"}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}], ";"}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Decomposition of versor"
}], "Subsubsection"],

Cell["\<\
 Reimplementation of Staples versor factorization  [GSSDW-CADoCOGE] algorithm.\
\>", "Text"],

Cell[TextData[{
 "Vector wrapping x->B x ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]]],
 "/|B|^2 , where B is assumed to be a blade and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["B", 
    RowBox[{"^", "~"}]], TraditionalForm]]],
 " denotes its Clifford conjugation (reverse and grade inverse) \
transformation is important enought to give name ,"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wrapCliffordConjugate", "[", 
   RowBox[{"wrapArg_", ",", "wrappingBlade_"}], "]"}], ":=", 
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{
      RowBox[{"gaProductExpand", "[", 
       RowBox[{"wrappingBlade", "\[GeometricProduct]", "wrapArg"}], "]"}], 
      "\[GeometricProduct]", 
      RowBox[{"gaCliffordConjugate", "[", "wrappingBlade", "]"}]}], "]"}], 
    "/", 
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"gaSignedMagnitudeSquared", "[", "wrappingBlade", "]"}], "]"}]}],
    "]"}]}]], "Input"],

Cell["\<\
It is useful to have single decomposition step of factoring one vector per \
step. In the last step we reverse obtained vectors order in order it be ready \
for multiplication of entire set.  Note, that due to huge numbers procedure \
might not be stable numerically.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "oneStepCliffordDecompose", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"NextVector", "\[Rule]", 
      RowBox[{"{", "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{"decomposableMV_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"oneStepCliffordDecompose", "[", 
       RowBox[{
        RowBox[{"{", "decomposableMV", "}"}], ",", "opts"}], "]"}], "/;", 
      RowBox[{"NumericQ", "[", 
       RowBox[{"decomposableMV", "/.", 
        RowBox[{
         RowBox[{"bs", "[", "__", "]"}], "\[RuleDelayed]", "1"}]}], "]"}]}]}],
     ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"oneStepCliffordDecompose", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"decomposableMV_", ",", "outputVectors___"}], "}"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"allGrades", "=", 
          RowBox[{"gaGetGrade", "[", "decomposableMV", "]"}]}], ",", 
         RowBox[{"theAlgebra", "=", 
          RowBox[{"First", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"decomposableMV", ",", "_Cl", ",", "Infinity"}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"theElement", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"NextVector", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"oneStepCliffordDecompose", ",", "NextVector"}], "]"}]}],
            ")"}]}], ",", " ", "maxGrade", ",", "selVector", ",", 
         "wrappedSelVector", ",", "wrappedSelVectorSignedMagnitudeSquare"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"maxGrade", "=", 
            RowBox[{"Last", "[", "allGrades", "]"}]}], ")"}], ">", "1"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"theElement", "=!=", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"selVector", "=", "theElement"}], ",", 
            RowBox[{"selVector", "=", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"RandomChoice", "[", 
                   RowBox[{"Union", "@@", 
                    RowBox[{"gaGetIndex", "[", "decomposableMV", "]"}]}], 
                   "]"}], "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "theAlgebra"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVector", "=", 
           RowBox[{"(", 
            RowBox[{"selVector", "-", 
             RowBox[{"wrapCliffordConjugate", "[", 
              RowBox[{"selVector", ",", "decomposableMV"}], "]"}]}], ")"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "=", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{
            "gaSignedMagnitudeSquared", "[", "wrappedSelVector", "]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"wrappedSelVectorSignedMagnitudeSquare", "!=", "0."}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Expand", "[", 
               RowBox[{
                RowBox[{"gaProductExpand", "[", 
                 RowBox[{
                 "decomposableMV", "\[GeometricProduct]", 
                  "wrappedSelVector"}], "]"}], "/", 
                "wrappedSelVectorSignedMagnitudeSquare"}], "]"}], ",", 
              "outputVectors", ",", "wrappedSelVector"}], "}"}]}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Reverse", "[", 
          RowBox[{"{", 
           RowBox[{"outputVectors", ",", "decomposableMV"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input"],

Cell["\<\
Before starting decomposition we check if input is decomposible (this is \
slowdown) . \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCliffordDecompose", "::", "unable"}], "=", 
    "\"\<Multivector failed decomposition test. This method fails if versor \
contains an isotropic vector.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCliffordDecompose", "[", "decomposibleMV_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allGrades", "=", 
      RowBox[{"gaGetGrade", "[", "decomposibleMV", "]"}]}], "}"}], ",", " ", 
    RowBox[{"If", "[", 
     RowBox[{"(*", " ", 
      RowBox[{"test", " ", "decomposability", " ", "before", " ", "start"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Catch", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"gradeParityCheck", "[", "allGrades", "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"NumericQ", "[", "#", "]"}]}], "||", 
              RowBox[{"Equal", "[", 
               RowBox[{"#", ",", "0."}], "]"}]}], ")"}], "&"}], "[", 
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaSignedMagnitudeSquared", "[", "decomposibleMV", "]"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaProductExpand", "[", 
            RowBox[{"gaSignedMagnitudeSquared", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"decomposibleMV", ",", 
               RowBox[{"{", 
                RowBox[{"Last", "[", "allGrades", "]"}], "}"}]}], "]"}], 
             "]"}], "]"}], "===", "0"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}], ",", 
          RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"(*", " ", 
       RowBox[{
       "start", " ", "decomposition", " ", "step", " ", "by", " ", "step"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"(", 
        RowBox[{"Nest", "[", 
         RowBox[{"oneStepCliffordDecompose", ",", "decomposibleMV", ",", 
          RowBox[{"Last", "[", 
           RowBox[{"gaGetGrade", "[", "decomposibleMV", "]"}], "]"}]}], "]"}],
         ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"gaCliffordDecompose", "::", "unable"}], "]"}], ";", 
       "$Failed"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Factor when one term is known"
}], "Subsubsection"],

Cell["\<\
This function try to factor expr into sum of given (known) factors, i.e \
gaFactorTerm[expr,{fac1, fac2}]-> expr=answer1\[GeometricProduct]fac1+answer2\
\[GeometricProduct]fac2. The result is returned in the form {{answer1,fac1}, \
{answer2,fac2},...}. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "multipleSolutions"}], "=", 
   "\"\<SolveAlways provided multiple solutions taking the first.\>\""}], ";", 
  RowBox[{
   RowBox[{"gaFactorTerm", "::", "SolveAlways"}], "=", 
   "\"\<SolveAlways did not find solution of equation `1` with respect to \
variables `2`. Factorization attempt failed.\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaFactorTerm", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Method", "\[Rule]", "\"\<SolveAlways\>\""}], ",", 
      RowBox[{"GeneratedParameters", "\[Rule]", "C"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"{", "knownfactor__", "}"}], ",", "opts___"}], "]"}], ":=", 
   RowBox[{"factorTerm", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "knownfactor", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Direction", "\[Rule]", "Left"}], ",", "opts"}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFactorTerm", "[", 
    RowBox[{
     RowBox[{"{", "knownfactor__", "}"}], ",", "expr_", ",", "opts___"}], 
    "]"}], ":=", 
   RowBox[{"factorTerm", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"{", "knownfactor", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Direction", "\[Rule]", "Right"}], ",", "opts"}], "}"}]}], 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bs", "=", 
       RowBox[{
       "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"help", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"singleCoefficientSolve", "[", 
        RowBox[{"{", 
         RowBox[{"eq_", ",", "vars_List"}], "}"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "fictiveVars", ",", "varName", ",", "sol", ",", "theEqLHS"}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"theEqLHS", "=", 
           RowBox[{"(", 
            RowBox[{"Last", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"CoefficientRules", "[", 
                RowBox[{"eq", ",", "vars"}], "]"}], "/.", 
               RowBox[{"_bs", "\[Rule]", "0"}]}], ")"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"fictiveVars", "=", 
           RowBox[{"varName", "/@", 
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "theEqLHS", "]"}], "]"}]}]}], ";", 
          RowBox[{"sol", "=", 
           RowBox[{"SolveAlways", "[", 
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{"Equal", "[", 
               RowBox[{
                RowBox[{"theEqLHS", "*", "fictiveVars"}], ",", "0"}], "]"}], 
              "]"}], ",", "fictiveVars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"Length", "[", "sol", "]"}], ",", "\[IndentingNewLine]", 
            "0", ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaFactorTerm", "::", "SolveAlways"}], ",", 
               RowBox[{"Thread", "[", 
                RowBox[{"Equal", "[", 
                 RowBox[{
                  RowBox[{"theEqLHS", "*", "fictiveVars"}], ",", "0"}], "]"}],
                 "]"}], ",", "fictiveVars"}], "]"}], ";", 
             RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", "1", ",", 
            RowBox[{"Flatten", "[", "sol", "]"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", ">", "1"}], "&"}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{"gaFactorTerm", "::", "multipleSolutions"}], "]"}], ";", 
             RowBox[{"sol", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"trivial", " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"factorTerm", "[", 
        RowBox[{"exprToFactor_", ",", 
         RowBox[{"{", 
          RowBox[{"knownFactor_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{"#", ",", "_bs"}], "]"}], "&"}], ")"}]}], "}"}], ",", 
         RowBox[{"{", "___", "}"}]}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", "knownFactor"}], ")"}], "*", "exprToFactor"}], 
         ",", "knownFactor"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"main", " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"factorTerm", "[", 
        RowBox[{"exprToFactor_", ",", 
         RowBox[{"{", "knownfactor__", "}"}], ",", 
         RowBox[{"{", "opts___", "}"}]}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"theDirection", "=", 
            RowBox[{"Direction", "/.", 
             RowBox[{"{", "opts", "}"}]}]}], ",", 
           RowBox[{"theMethod", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Method", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", "gaFactorTerm", "]"}]}], ")"}]}], ",", 
           RowBox[{"theCoef", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"GeneratedParameters", "/.", 
               RowBox[{"{", "opts", "}"}]}], "/.", 
              RowBox[{"Options", "[", "gaFactorTerm", "]"}]}], ")"}]}], ",", 
           RowBox[{"alg", "=", 
            RowBox[{"FirstCase", "[", 
             RowBox[{"exprToFactor", ",", "_Cl", ",", 
              RowBox[{"{", "}"}], ",", "Infinity"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"theBody", "=", 
            RowBox[{"gaPE", "/@", 
             RowBox[{"{", "knownfactor", "}"}]}]}], ",", "tempC", ",", "expr",
            ",", "testMV", ",", "prototypes", ",", "freeVars", ",", 
           "exprSeparatedByFreeCoeffs", ",", "baseElemsOfEachCoeff", ",", 
           "answerWithoutFreeVars", ",", "vars", ",", "solAns", ",", 
           "answer"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"initialize", " ", "data"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"freeVars", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Variables", "[", "exprToFactor", "]"}], ",", "_bs"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "if", " ", "there", " ", "are", " ", "no", " ", "symbolic", " ", 
            "coefficient", " ", "add", " ", "one", " ", "and", " ", "then", 
            " ", "remove", " ", "in", " ", "the", " ", "end"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"freeVars", "===", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"expr", "=", 
              RowBox[{"tempC", "*", "exprToFactor"}]}], ";", 
             RowBox[{"freeVars", "=", "tempC"}]}], ",", 
            RowBox[{"expr", "=", "exprToFactor"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"exprSeparatedByFreeCoeffs", "=", 
           RowBox[{"CoefficientRules", "[", 
            RowBox[{"expr", ",", "freeVars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"baseElemsOfEachCoeff", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{"#", ",", "_bs", ",", "Infinity"}], "]"}], "&"}], "/@", 
             RowBox[{"(", 
              RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}], ")"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "theMethod", ",", "\[IndentingNewLine]", "\"\<SolveAlways\>\"", 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"testMV", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaGeneralMultivector", "[", 
                   RowBox[{"#", ",", "alg"}], "]"}], "&"}], "/@", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"theCoef", "[", "i", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                  "]"}]}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"theCoef", "[", "i_", "]"}], "[", "j_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"theCoef", "[", 
                  RowBox[{"i", ",", "j"}], "]"}]}], "}"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Switch", "[", 
              RowBox[{"theDirection", ",", "\[IndentingNewLine]", "Left", ",", 
               RowBox[{
                RowBox[{"prototypes", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"theBody", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     "-", "#"}], "]"}], "]"}], ",", "_bs"}], "]"}], "&"}], 
                   ",", 
                   RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}]}], 
                  "]"}]}], ";"}], ",", "\[IndentingNewLine]", "Right", ",", 
               RowBox[{
                RowBox[{"prototypes", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"Sum", "[", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{
                    RowBox[{"theBody", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     "-", "#"}], "]"}], "]"}], ",", "_bs"}], "]"}], "&"}], 
                   ",", 
                   RowBox[{"Last", "/@", "exprSeparatedByFreeCoeffs"}]}], 
                  "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "solveAlways", " ", "obtained", " ", "equations", " ", "for", 
               " ", "each", " ", "of", " ", "symbolic", " ", "coefficient", 
               " ", "separatelly"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"solAns", "=", 
              RowBox[{"singleCoefficientSolve", "/@", 
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", 
                   RowBox[{"prototypes", ",", "baseElemsOfEachCoeff"}], "}"}],
                   "]"}], ")"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "substitute", " ", "answer", " ", "for", " ", "each", " ", "of",
                " ", "symbolic", " ", "coefficient"}], " ", "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"solAns", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"answerWithoutFreeVars", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vars", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"solAns", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "_theCoef", ",", 
                    "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"testMV", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "vars"}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"_theCoef", "\[RuleDelayed]", "0"}], "}"}]}], ",",
                     "vars"}], "]"}], "/.", 
                    RowBox[{"solAns", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "solAns", "]"}]}], "}"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                
                RowBox[{"(*", " ", 
                 RowBox[{"construct", " ", "final", " ", "answer"}], " ", 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"Switch", "[", 
                 RowBox[{
                 "theDirection", ",", "\[IndentingNewLine]", "Left", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "exprSeparatedByFreeCoeffs"}], ",", 
                    RowBox[{"answerWithoutFreeVars", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "freeVars"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], "]"}],
                     ",", 
                    RowBox[{"{", "knownfactor", "}"}]}], "}"}], "]"}], "/.", 
                   RowBox[{"tempC", "\[Rule]", "1"}]}], ",", 
                  "\[IndentingNewLine]", "Right", ",", 
                  RowBox[{
                   RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "knownfactor", "}"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "exprSeparatedByFreeCoeffs"}], ",", 
                    RowBox[{"answerWithoutFreeVars", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "freeVars"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", 
                    RowBox[{"Length", "[", "theBody", "]"}]}], "}"}]}], 
                    "]"}]}], "}"}], "]"}], "/.", 
                   RowBox[{"tempC", "\[Rule]", "1"}]}]}], 
                 "\[IndentingNewLine]", "]"}]}], 
               RowBox[{"(*", " ", 
                RowBox[{"end", " ", "swich", " ", "direction"}], " ", "*)"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"{", "}"}]}], "]"}]}], 
            RowBox[{"(*", " ", 
             RowBox[{"end", " ", "solution", " ", "existance"}], " ", "*)"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "_", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Decompositions into blades"
}], "Subsection"],

Cell[TextData[{
 "The gaBladeFactor[ ] is Fontijne blade factorization algotith, which is \
based on projection operator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["q", "i"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["p", "i"], "\[LeftContract]", " ", 
       SuperscriptBox["B", 
        RowBox[{"-", "1"}]]}], ")"}], "B"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["q", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is (if not zero) a factor of B.  This is described in D. Fontijne \
\[OpenCurlyDoubleQuote]Efficient Algorithms for factorrization and Join of \
Blades\[CloseCurlyDoubleQuote]. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaBladeFactor", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Method", "\[Rule]", "\"\<Fontijne\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaBladeFactor", "::", "unknownMethod"}], "=", 
    "\"\<Specified method Method->`1` is unknown.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], ",", 
     RowBox[{"wrap", "=", "wrapHead"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"gaBladeFactor", "[", 
     RowBox[{"blade_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"method", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Method", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaBladeFactor", ",", "Method"}], "]"}]}], ")"}]}], ",", 
        "allBlades", ",", "largestAbsCoef", ",", "maxCoef", ",", 
        "normalizedBlade", ",", "theBlade", ",", "inversedTheBlade", ",", 
        "bladeVectors"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"method", ",", "\"\<Fontijne\>\"", ",", 
        RowBox[{
         RowBox[{"allBlades", "=", 
          RowBox[{"List", "@@@", 
           RowBox[{"List", "@@", 
            RowBox[{"(", 
             RowBox[{"Collect", "[", 
              RowBox[{"blade", ",", "_bs", ",", "wrapHead"}], "]"}], 
             ")"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"largestAbsCoef", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"allBlades", "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"_bs", "\[Rule]", "1"}], ",", 
              RowBox[{"wrapHead", "\[Rule]", "Abs"}]}], "}"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"maxCoef", ",", "theBlade"}], "}"}], "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"Extract", "[", 
              RowBox[{"allBlades", ",", 
               RowBox[{"Position", "[", 
                RowBox[{"allBlades", ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", "largestAbsCoef", "]"}], ",", 
                    "_"}], "}"}], "|", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"wrapHead", "[", 
                    RowBox[{"-", "largestAbsCoef"}], "]"}], ",", "_"}], 
                   "}"}]}]}], "]"}]}], "]"}], "]"}], "/.", 
            RowBox[{"wrapHead", "\[Rule]", "Identity"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"normalizedBlade", "=", 
          RowBox[{"Collect", "[", 
           RowBox[{
            RowBox[{"blade", "/", "maxCoef"}], ",", "_bs"}], "]"}]}], ";", 
         RowBox[{"inversedTheBlade", "=", 
          RowBox[{"gaInverse", "[", "theBlade", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"bladeVectors", "=", 
          RowBox[{"theBlade", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{"ind_List", ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "alg_", ",", "any___"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"bs", "[", 
                 RowBox[{
                  RowBox[{"mvDownUp", "[", 
                   RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "alg", ",", "any"}], 
                 "]"}], "&"}], "/@", "ind"}], ")"}]}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Prepend", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"gaPE", "[", 
              RowBox[{"LeftContract", "[", 
               RowBox[{
                RowBox[{"LeftContract", "[", 
                 RowBox[{"#", ",", "inversedTheBlade"}], "]"}], ",", 
                "normalizedBlade"}], "]"}], "]"}], "&"}], "/@", 
            "bladeVectors"}], ",", "maxCoef"}], "]"}]}], 
        "\[IndentingNewLine]", ",", "_", ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaBladeFactor", "::", "unknownMethod"}], ",", "method"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Multivector derivatives (for further work)"
}], "Section"],

Cell["IntricitDerivative, covariantderivative.... Just started", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "mvD", ",", "mvDArg", ",", "e\[EmptyDownTriangle]", ",", 
     "mvDerivativesToBase", ",", "mvExpandDerivatives"}], "}"}]}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 Evaluatable->False],

Cell["Function description", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "::", "usage"}], "=", 
   "\"\<The nabla operator of geometric algebra.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"e\[EmptyDownTriangle]", "::", "usage"}], "=", 
   "\"\<Notation and shortcut of the nabla operator of geometric algebra in \
orthogonal e[n] base.\>\""}], ";"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDerivativesToBase", "::", "usage"}], "=", 
   "\"\<DerivativesToToBase[expr_] expands expr with derivatives into \
standard base of gaRunningAlgebra.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Help functions and variables"
}], "Subsection"],

Cell["\<\
Explicitly state what operators are differentiation operators. This \
information is necessary when converting into base representation.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"differentiationSymbolList", "=", 
   RowBox[{"{", "e\[EmptyDownTriangle]", "}"}]}], ";"}]], "Input",
 Evaluatable->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Notations and input aliases"
}], "Subsection"],

Cell["\<\
 mvArg[ ] uses brackets to denote expression on which differentiation \
operator is acting. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDArg", "[", 
      RowBox[{"expr_", ",", "id_mvDTarget"}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bras", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<(\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<(\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           RowBox[{"Reverse", "[", "id", "]"}]}], ")"}]}]}], ",", 
       RowBox[{"kets", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<)\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<)\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           "id"}], ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TemplateBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "expr", "]"}], ",", "id"}], "}"}], ",", 
       "\"\<mvDArg\>\"", ",", 
       RowBox[{"DisplayFunction", "\[Rule]", 
        RowBox[{"Evaluate", "[", 
         RowBox[{
          RowBox[{"StyleBox", "[", 
           RowBox[{
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"bras", ",", "#1", ",", "kets"}], "}"}], "]"}], ",", 
            RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
            RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
          "&"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ". Linearity, main properties"
}], "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaSetCommutative", "/@", 
   RowBox[{"{", "mvD", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "e\[EmptyDownTriangle]", "}"}]}], ";"}]}], "Input",
 Evaluatable->False],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ".",
 
 CounterBox["Subsection"],
 ".",
 
 CounterBox["Subsubsection"],
 ". Multivector argument differentiation function ",
 "mvDArg[ ] "
}], "Subsubsection"],

Cell[TextData[{
 " ",
 StyleBox["mvArg[expr, id ] ",
  FontWeight->"Bold"],
 " wraps expression which is differentiated by operator with target id"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDArg", "[", 
    RowBox[{"ex_", ",", 
     RowBox[{"mvDTarget", "[", "]"}]}], "]"}], ":=", "ex"}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricAlgebra`check", "::", "Derivative"}], "=", 
   "\"\<Something wrong `1`\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Close Package"
}], "Section"],

Cell["\<\
Execute this section in order to test if all functions are defined in proper \
order\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heads", " ", "=", " ", 
  RowBox[{"MissingForwardDeclarations", "[", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"heads", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{"a", " ", "nice", " ", "development", " ", "aid"}], " ", "*)"}], 
    "  ", 
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<ERROR, need forwards, or make calls only from private context:\\n\>\
\"", " ", "<>", "  ", 
      RowBox[{"StringListPrintableString", "[", "heads", "]"}]}], "]"}]}], 
   "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "heads", "]"}], ";"}], " "}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaPackageHasBeenLoaded", " ", "=", " ", "True"}], ";"}]], "Input"],

Cell["\<\
No need for EndPackage[], because End[] was used in DeclareIntoContext[]??? \
Seems we need it.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Unprotect", "[", "Out", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "Out", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", "Out", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"EndPackage", "[", "]"}], ";"}], " "}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackageContext", "<>", " ", "\"\<*\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BaseVectorAlgebra\"\>", ",", "\<\"BasisVectorsMultipliers\"\>",
    ",", "\<\"BeginPrivate\"\>", ",", "\<\"Blade\"\>", ",", "\<\"Cl\"\>", 
   ",", "\<\"CoefficientFunction\"\>", ",", "\<\"CollectCoefficients\"\>", 
   ",", "\<\"DeclareIntoContext\"\>", ",", "\<\"DorstProduct\"\>", 
   ",", "\<\"DP\"\>", ",", "\<\"ElementaryRepresentations\"\>", 
   ",", "\<\"EndPrivate\"\>", ",", "\<\"Evaluation\"\>", 
   ",", "\<\"gaAdditiveRepresentation\"\>", 
   ",", "\<\"gaAlgebraMultiplicationTable\"\>", 
   ",", "\<\"gaAntiCommutator\"\>", 
   ",", "\<\"gaAssociationRepresentation\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeries\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeriesData\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffTermLogarithm\"\>", 
   ",", "\<\"gaBCHSeries\"\>", ",", "\<\"gaBilinearForm\"\>", 
   ",", "\<\"gaBladeFactor\"\>", ",", "\<\"gaCasimir\"\>", 
   ",", "\<\"gaCE\"\>", ",", "\<\"gaCliffordConjugate\"\>", 
   ",", "\<\"gaCliffordDecomposableQ\"\>", ",", "\<\"gaCliffordDecompose\"\>",
    ",", "\<\"gaCommutativeAllQ\"\>", 
   ",", "\<\"gaCommutativeMonomialOrder\"\>", ",", "\<\"gaCommutativeQ\"\>", 
   ",", "\<\"gaCommutator\"\>", ",", "\<\"gaCommutatorExpand\"\>", 
   ",", "\<\"gaComplexCliffordConjugate\"\>", 
   ",", "\<\"gaComplexConjugate\"\>", ",", "\<\"gaCos\"\>", 
   ",", "\<\"gaCosh\"\>", 
   ",", "\<\"gaDefineAssociationRepresentationKeyOrder\"\>", 
   ",", "\<\"gaDefineInput\"\>", ",", "\<\"gaDefineMatrixRepresentation\"\>", 
   ",", "\<\"gaDefineOrthonormalBasis\"\>", ",", "\<\"gaDeterminantNorm\"\>", 
   ",", "\<\"gaDoubleSidedIdeal\"\>", ",", "\<\"gaDynkinFactor\"\>", 
   ",", "\<\"gaEliminateGrade\"\>", ",", "\<\"gaExp\"\>", 
   ",", "\<\"gaExpand\"\>", ",", "\<\"gaExpandedQ\"\>", 
   ",", "\<\"gaFromMatrixRepresentation\"\>", 
   ",", "\<\"gaFromTensorProduct\"\>", ",", "\<\"gaGeneralMultivector\"\>", 
   ",", "\<\"gaGeometricCos\"\>", ",", "\<\"gaGeometricCosh\"\>", 
   ",", "\<\"gaGeometricExp\"\>", ",", "\<\"gaGeometricMatrixProduct\"\>", 
   ",", "\<\"gaGeometricProductSeries\"\>", ",", "\<\"gaGeometricSin\"\>", 
   ",", "\<\"gaGeometricSinh\"\>", ",", "\<\"gaGeometricTan\"\>", 
   ",", "\<\"gaGeometricTanh\"\>", ",", "\<\"gaGetGrade\"\>", 
   ",", "\<\"gaGetIndex\"\>", ",", "\<\"gaGetMV\"\>", 
   ",", "\<\"gaGetSignature\"\>", ",", "\<\"gaGPMatrixPower\"\>", 
   ",", "\<\"gaGPPower\"\>", ",", "\<\"gaGradeInverse\"\>", 
   ",", "\<\"gaGradeNegate\"\>", ",", "\<\"gaGradesOnly\"\>", 
   ",", "\<\"gaHermitianConjugate\"\>", ",", "\<\"gaHermitianNorm\"\>", 
   ",", "\<\"gaHermitianQ\"\>", ",", "\<\"gaHomogeneusGradeQ\"\>", 
   ",", "\<\"gaHomogeneusSubspaceBase\"\>", 
   ",", "\<\"gaIdealBasisReordering\"\>", 
   ",", "\<\"\
gaIdempotentAndLeftIdealBasisAndDoubleSidedIdealWithReplacementRules\"\>", 
   ",", "\<\"gaIdempotentQ\"\>", ",", "\<\"gaIndexDown\"\>", 
   ",", "\<\"gaIndexSort\"\>", ",", "\<\"gaIndexUp\"\>", 
   ",", "\<\"gaInverse\"\>", ",", "\<\"gaInvertableQ\"\>", 
   ",", "\<\"gaKillingMetric\"\>", ",", "\<\"gaLeftIdeal\"\>", 
   ",", "\<\"gaLeftIdealBasis\"\>", ",", "\<\"gaLinearQ\"\>", 
   ",", "\<\"gaListDefinedElementaryRepresentations\"\>", 
   ",", "\<\"gaMagnitude\"\>", ",", "\<\"gaMakeAlias\"\>", 
   ",", "\<\"gaMatrixRepresentation\"\>", ",", "\<\"gaMetric\"\>", 
   ",", "\<\"gaMultivectorParityCheck\"\>", 
   ",", "\<\"gaNegativeSignatureIndexList\"\>", 
   ",", "\<\"gaNonCommutativeMonomialOrder\"\>", ",", "\<\"gaNorm\"\>", 
   ",", "\<\"gaNormalize\"\>", ",", "\<\"gaNotation\"\>", 
   ",", "\<\"gaOPMatrixPower\"\>", ",", "\<\"gaOPPower\"\>", 
   ",", "\<\"gaOrderedQ\"\>", ",", "\<\"gaOrthonormalBasis\"\>", 
   ",", "\<\"gaOuterMatrixProduct\"\>", ",", "\<\"gaParameterSeries\"\>", 
   ",", "\<\"gaPE\"\>", ",", "\<\"gaPrimitiveIdempotent\"\>", 
   ",", "\<\"gaProductExpand\"\>", ",", "\<\"gaProductPairExpand\"\>", 
   ",", "\<\"gaQuaternionicConjugate\"\>", 
   ",", "\<\"gaRadonHurwitzNumber\"\>", ",", "\<\"gaRandomBase\"\>", 
   ",", "\<\"gaReciprocalBase\"\>", ",", "\<\"gaReciprocalVectors\"\>", 
   ",", "\<\"gaReplaceDivisionRing\"\>", ",", "\<\"gaReverse\"\>", 
   ",", "\<\"gaRunningAlgebra\"\>", 
   ",", "\<\"gaSemisimpleAlgebraExtension\"\>", 
   ",", "\<\"gaSemisimpleAlgebraExtensionNonCommutativeMonomialOrder\"\>", 
   ",", "\<\"gaSeries\"\>", ",", "\<\"gaSeriesData\"\>", 
   ",", "\<\"gaSetCommutative\"\>", ",", "\<\"gaSetLinear\"\>", 
   ",", "\<\"gaSetNonCommutative\"\>", 
   ",", "\<\"gaSignedMagnitudeSquared\"\>", ",", "\<\"gaSin\"\>", 
   ",", "\<\"gaSinh\"\>", ",", "\<\"gaSort\"\>", ",", "\<\"gaSpinor\"\>", 
   ",", "\<\"gaSpinorIdempotent\"\>", 
   ",", "\<\"gaSpinorIdempotentAndLeftIdealBasisAndAllDoubleSidedIdeals\"\>", 
   ",", "\<\"gaStructureConstant\"\>", ",", "\<\"gaTan\"\>", 
   ",", "\<\"gaTanh\"\>", ",", "\<\"gaTensorProduct\"\>", 
   ",", "\<\"gaTestIndexOrdering\"\>", ",", "\<\"gaTogether\"\>", 
   ",", "\<\"gaToMatrixRepresentation\"\>", ",", "\<\"gaToTensorProduct\"\>", 
   ",", "\<\"gaVectorSpaceDimension\"\>", 
   ",", "\<\"gaVersorNonIsotropicQ\"\>", ",", "\<\"gaVersorQ\"\>", 
   ",", "\<\"gaZassenhausCoefficient\"\>", ",", "\<\"gaZassenhausSeries\"\>", 
   ",", "\<\"gaZassenhausSeriesData\"\>", ",", "\<\"gbLeadingCoefficient\"\>",
    ",", "\<\"gbLeadingMonomial\"\>", ",", "\<\"gbLeadingTerm\"\>", 
   ",", "\<\"GeometricProduct\"\>", ",", "\<\"GP\"\>", 
   ",", "\<\"HermitianOnly\"\>", ",", "\<\"InnerProduct\"\>", 
   ",", "\<\"InvolutionPosition\"\>", ",", "\<\"Involutions\"\>", 
   ",", "\<\"IP\"\>", ",", "\<\"LC\"\>", ",", "\<\"LeftContract\"\>", 
   ",", "\<\"MatrixOuterProductOrder\"\>", ",", "\<\"Metric\"\>", 
   ",", "\<\"MissingForwardDeclarations\"\>", ",", "\<\"MV\"\>", 
   ",", "\<\"mvDownUp\"\>", ",", "\<\"mvZeroGradeQ\"\>", 
   ",", "\<\"NextVector\"\>", ",", "\<\"NumberOfPrimitiveFactors\"\>", 
   ",", "\<\"OmitGrades\"\>", ",", "\<\"OP\"\>", ",", "\<\"OuterProduct\"\>", 
   ",", "\<\"OutputType\"\>", ",", "\<\"QuaternionIsomorphismRules\"\>", 
   ",", "\<\"RC\"\>", ",", "\<\"ReductionOrder\"\>", 
   ",", "\<\"RightContract\"\>", ",", "\<\"ShowStatus\"\>", 
   ",", "\<\"SignChangeGrades\"\>", ",", "\<\"SpinorCoefficientName\"\>", 
   ",", "\<\"StartingElement\"\>", ",", "\<\"StringListPrintableString\"\>", 
   ",", "\<\"TargetMatrices\"\>", ",", "\<\"TheContextSymbolList\"\>", 
   ",", "\<\"ZeroTolerance\"\>", ",", "\<\"\[DoubleStruckE]\"\>", 
   ",", "\<\"$GAPackageContext\"\>", ",", "\<\"$gaPackageHasBeenLoaded\"\>", 
   ",", "\<\"$GAPackageInputAliases\"\>", 
   ",", "\<\"$GAPackageOnlyContextPath\"\>", ",", "\<\"$gaPackageOptions\"\>",
    ",", "\<\"$GAPackagePrivateContext\"\>", 
   ",", "\<\"$GAUnprotectionList\"\>"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackagePrivateContext", "<>", " ", "\"\<*\>\""}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"A\"\>", ",", "\<\"a1\"\>", 
   ",", "\<\"a1$\"\>", ",", "\<\"a2\"\>", ",", "\<\"a2$\"\>", 
   ",", "\<\"a3\"\>", ",", "\<\"a3$\"\>", ",", "\<\"aa\"\>", 
   ",", "\<\"aa$\"\>", ",", "\<\"accept\"\>", ",", "\<\"accepted\"\>", 
   ",", "\<\"acl\"\>", ",", "\<\"acl$\"\>", 
   ",", "\<\"additionalTestFunction\"\>", ",", "\<\"addVectorList\"\>", 
   ",", "\<\"addVectorList$\"\>", ",", "\<\"al\"\>", ",", "\<\"al1\"\>", 
   ",", "\<\"al1$\"\>", ",", "\<\"al2\"\>", ",", "\<\"al2$\"\>", 
   ",", "\<\"alB\"\>", ",", "\<\"alB$\"\>", ",", "\<\"alc\"\>", 
   ",", "\<\"alc$\"\>", ",", "\<\"alg\"\>", ",", "\<\"algBoxes\"\>", 
   ",", "\<\"algebra\"\>", ",", "\<\"algebraBase\"\>", 
   ",", "\<\"algebraBase$\"\>", ",", "\<\"algebraSeq\"\>", 
   ",", "\<\"algebraSeq$\"\>", ",", "\<\"algebra$\"\>", ",", "\<\"algIso\"\>",
    ",", "\<\"algIso$\"\>", ",", "\<\"algRep\"\>", ",", "\<\"algRepRules\"\>",
    ",", "\<\"algRepRules$\"\>", ",", "\<\"algRep$\"\>", ",", "\<\"algTP\"\>",
    ",", "\<\"algTP$\"\>", ",", "\<\"algTrueMinusAlgHelp\"\>", 
   ",", "\<\"algTrueMinusAlgHelp$\"\>", ",", "\<\"alg$\"\>", 
   ",", "\<\"aliasName\"\>", ",", "\<\"aliasReplacementRul\"\>", 
   ",", "\<\"all\"\>", ",", "\<\"allBasisInvDegLex\"\>", 
   ",", "\<\"allBasisInvDegLex$\"\>", ",", "\<\"allBlades\"\>", 
   ",", "\<\"allBlades$\"\>", ",", "\<\"allGrades\"\>", 
   ",", "\<\"allGrades$\"\>", ",", "\<\"allNonScalars\"\>", 
   ",", "\<\"allNonScalars$\"\>", ",", "\<\"allObtained\"\>", 
   ",", "\<\"allObtained$\"\>", ",", "\<\"allScalars\"\>", 
   ",", "\<\"allScalars$\"\>", ",", "\<\"allTable\"\>", 
   ",", "\<\"allTable$\"\>", ",", "\<\"allZeroTest\"\>", ",", "\<\"alout\"\>",
    ",", "\<\"alout$\"\>", ",", "\<\"alP\"\>", ",", "\<\"alposition\"\>", 
   ",", "\<\"alposition$\"\>", ",", "\<\"alP$\"\>", 
   ",", "\<\"alreadyCalculatedProducts\"\>", 
   ",", "\<\"alreadyCalculatedProductsAdoptedToSingle\"\>", 
   ",", "\<\"alreadyPrintedList\"\>", ",", "\<\"alreadyUsedColors\"\>", 
   ",", "\<\"alsty\"\>", ",", "\<\"alsty$\"\>", ",", "\<\"alvectors\"\>", 
   ",", "\<\"alvectors$\"\>", ",", "\<\"al$\"\>", ",", "\<\"answer\"\>", 
   ",", "\<\"answerFin\"\>", ",", "\<\"answerFin$\"\>", 
   ",", "\<\"answer$\"\>", ",", "\<\"any\"\>", ",", "\<\"any1\"\>", 
   ",", "\<\"any1$\"\>", ",", "\<\"any2\"\>", ",", "\<\"any2$\"\>", 
   ",", "\<\"any3\"\>", ",", "\<\"any3$\"\>", ",", "\<\"anycoef\"\>", 
   ",", "\<\"anyCoef1\"\>", ",", "\<\"anyCoef1$\"\>", ",", "\<\"anyCoef2\"\>",
    ",", "\<\"anyCoef2$\"\>", ",", "\<\"anycoef$\"\>", ",", "\<\"any$\"\>", 
   ",", "\<\"ap1\"\>", ",", "\<\"ap1$\"\>", ",", "\<\"ap2\"\>", 
   ",", "\<\"ap2$\"\>", ",", "\<\"applyQuaternionIsomorphismRule\"\>", 
   ",", "\<\"ar\"\>", ",", "\<\"arep\"\>", ",", "\<\"arep$\"\>", 
   ",", "\<\"arg\"\>", ",", "\<\"arg0\"\>", ",", "\<\"arg0$\"\>", 
   ",", "\<\"arg1\"\>", ",", "\<\"arg1$\"\>", ",", "\<\"arg2\"\>", 
   ",", "\<\"arg2$\"\>", ",", "\<\"arg3\"\>", ",", "\<\"arg3$\"\>", 
   ",", "\<\"argg\"\>", ",", "\<\"argg1\"\>", ",", "\<\"argg1$\"\>", 
   ",", "\<\"argg2\"\>", ",", "\<\"argg2$\"\>", ",", "\<\"argg$\"\>", 
   ",", "\<\"argh\"\>", ",", "\<\"argh$\"\>", ",", "\<\"args\"\>", 
   ",", "\<\"argsa\"\>", ",", "\<\"argsa$\"\>", ",", "\<\"argsing\"\>", 
   ",", "\<\"argsing$\"\>", ",", "\<\"arg$\"\>", ",", "\<\"as\"\>", 
   ",", "\<\"as1\"\>", ",", "\<\"as1$\"\>", ",", "\<\"as2\"\>", 
   ",", "\<\"as2$\"\>", ",", "\<\"assoc\"\>", ",", "\<\"associationForm\"\>", 
   ",", "\<\"associationForm$\"\>", ",", "\<\"assoc$\"\>", ",", "\<\"as$\"\>",
    ",", "\<\"aTemp\"\>", ",", "\<\"a$\"\>", ",", "\<\"A$\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"B\"\>", ",", "\<\"base\"\>", 
   ",", "\<\"baseBivectors\"\>", ",", "\<\"baseBivectors$\"\>", 
   ",", "\<\"baseElementInverse\"\>", ",", "\<\"baseElems\"\>", 
   ",", "\<\"baseElems$\"\>", ",", "\<\"baseProd\"\>", 
   ",", "\<\"baseProd$\"\>", ",", "\<\"baseSymbol\"\>", 
   ",", "\<\"baseSymbolN\"\>", ",", "\<\"baseSymbolN$\"\>", 
   ",", "\<\"baseSymbol$\"\>", ",", "\<\"baseVectorRepresentation\"\>", 
   ",", "\<\"baseVectorRepresentation$\"\>", ",", "\<\"baseVectors\"\>", 
   ",", "\<\"baseVectors$\"\>", ",", "\<\"base$\"\>", ",", "\<\"basis\"\>", 
   ",", "\<\"basisVectorsMultipliers\"\>", 
   ",", "\<\"basisVectorsMultipliers$\"\>", ",", "\<\"basis$\"\>", 
   ",", "\<\"bb\"\>", ",", "\<\"bb$\"\>", ",", "\<\"be\"\>", 
   ",", "\<\"be$\"\>", ",", "\<\"bii\"\>", ",", "\<\"bii$\"\>", 
   ",", "\<\"bivectorsOfSpecialAlgebra\"\>", ",", "\<\"blade\"\>", 
   ",", "\<\"bladeVectors\"\>", ",", "\<\"bladeVectors$\"\>", 
   ",", "\<\"blade$\"\>", ",", "\<\"bs\"\>", ",", "\<\"bsrem\"\>", 
   ",", "\<\"bsrem$\"\>", ",", "\<\"bs$\"\>", ",", "\<\"bTemp\"\>", 
   ",", "\<\"b$\"\>", ",", "\<\"B$\"\>", ",", "\<\"c\"\>", ",", "\<\"c1\"\>", 
   ",", "\<\"c1Name\"\>", ",", "\<\"c1Name$\"\>", ",", "\<\"c1$\"\>", 
   ",", "\<\"c2\"\>", ",", "\<\"c2Name\"\>", ",", "\<\"c2Name$\"\>", 
   ",", "\<\"c2$\"\>", ",", "\<\"c3\"\>", ",", "\<\"c3$\"\>", 
   ",", "\<\"candidateForUnit\"\>", ",", "\<\"candidateForUnit$\"\>", 
   ",", "\<\"candidates\"\>", ",", "\<\"candidates$\"\>", ",", "\<\"cas\"\>", 
   ",", "\<\"cas$\"\>", ",", "\<\"cc\"\>", ",", "\<\"cc$\"\>", 
   ",", "\<\"cf\"\>", ",", "\<\"cf$\"\>", ",", "\<\"channel\"\>", 
   ",", "\<\"checkValueRules\"\>", ",", "\<\"checkValueRules$\"\>", 
   ",", "\<\"chopTol\"\>", ",", "\<\"ChopTolerance\"\>", 
   ",", "\<\"chopTol$\"\>", ",", "\<\"cl\"\>", ",", "\<\"cleanRCHList\"\>", 
   ",", "\<\"co\"\>", ",", "\<\"coefficientFreedom\"\>", 
   ",", "\<\"coefficientFreedom$\"\>", ",", "\<\"coefficientName\"\>", 
   ",", "\<\"coefficientName$\"\>", 
   ",", "\<\"coefficientReplacementRules\"\>", 
   ",", "\<\"coefficientReplacementRules$\"\>", ",", "\<\"coefName\"\>", 
   ",", "\<\"coefName$\"\>", ",", "\<\"col\"\>", 
   ",", "\<\"collectAndShrink\"\>", ",", "\<\"collectAndShrinkRules\"\>", 
   ",", "\<\"collectOnDemand\"\>", ",", "\<\"collectQ\"\>", 
   ",", "\<\"col$\"\>", ",", "\<\"commutingPositiveBlades\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree$\"\>", 
   ",", "\<\"commutingPositiveBlades$\"\>", ",", "\<\"commutingWith3Pos\"\>", 
   ",", "\<\"commutingWith3Pos$\"\>", ",", "\<\"commutingWithAll\"\>", 
   ",", "\<\"commutingWithAllPos\"\>", ",", "\<\"commutingWithAllPos$\"\>", 
   ",", "\<\"commutingWithAll$\"\>", ",", "\<\"commutingWithElement\"\>", 
   ",", "\<\"comOrd\"\>", ",", "\<\"comOrdMod\"\>", ",", "\<\"comOrdMod$\"\>",
    ",", "\<\"comOrd$\"\>", ",", "\<\"CompileTo\"\>", 
   ",", "\<\"confirmed\"\>", ",", "\<\"confirmed$\"\>", 
   ",", "\<\"counter\"\>", ",", "\<\"counter$\"\>", ",", "\<\"co$\"\>", 
   ",", "\<\"currentAlg\"\>", ",", "\<\"currentAlg$\"\>", ",", "\<\"c$\"\>", 
   ",", "\<\"d\"\>", ",", "\<\"dat1\"\>", ",", "\<\"dat1$\"\>", 
   ",", "\<\"dat2\"\>", ",", "\<\"dat2$\"\>", ",", "\<\"decomposableMV\"\>", 
   ",", "\<\"decomposableMV$\"\>", ",", "\<\"decomposibleMV\"\>", 
   ",", "\<\"decomposibleMV$\"\>", ",", "\<\"def\"\>", ",", "\<\"defCol\"\>", 
   ",", "\<\"defCol$\"\>", ",", "\<\"definedGrades\"\>", 
   ",", "\<\"definedGrades$\"\>", ",", "\<\"definedReps\"\>", 
   ",", "\<\"definedReps$\"\>", ",", "\<\"defineInput\"\>", 
   ",", "\<\"defineMatrixRepresentationIdealBasisMethod\"\>", 
   ",", "\<\"defineMatrixRepresentationTensorProductMethod\"\>", 
   ",", "\<\"denom\"\>", ",", "\<\"denom$\"\>", ",", "\<\"di\"\>", 
   ",", "\<\"diff\"\>", ",", "\<\"difference\"\>", ",", "\<\"difference$\"\>",
    ",", "\<\"diff$\"\>", ",", "\<\"dim\"\>", ",", "\<\"dimensionFactor\"\>", 
   ",", "\<\"dimensionFactor$\"\>", ",", "\<\"dim$\"\>", 
   ",", "\<\"directLogTempMatrix\"\>", ",", "\<\"divisionRing\"\>", 
   ",", "\<\"divisionRingA\"\>", ",", "\<\"divisionRingA$\"\>", 
   ",", "\<\"divisionRingB\"\>", ",", "\<\"divisionRingB$\"\>", 
   ",", "\<\"divisionRingPrecomp\"\>", ",", "\<\"divisionRingPrecomp$\"\>", 
   ",", "\<\"divisionRingWithReplacementRules\"\>", 
   ",", "\<\"divisionRingWithReplacementRules$\"\>", 
   ",", "\<\"divisionRing$\"\>", ",", "\<\"di$\"\>", ",", "\<\"do\"\>", 
   ",", "\<\"downIndex\"\>", ",", "\<\"downIndexBase\"\>", 
   ",", "\<\"downIndexBase$\"\>", ",", "\<\"downIndex$\"\>", 
   ",", "\<\"do$\"\>", ",", "\<\"du1\"\>", ",", "\<\"du1$\"\>", 
   ",", "\<\"du2\"\>", ",", "\<\"du2$\"\>", ",", "\<\"duu\"\>", 
   ",", "\<\"duu$\"\>", ",", "\<\"dynkinFactor\"\>", 
   ",", "\<\"dynkinFactor$\"\>", ",", "\<\"d$\"\>", ",", "\<\"el\"\>", 
   ",", "\<\"elementaryTPAlgebras\"\>", ",", "\<\"elementaryVRep\"\>", 
   ",", "\<\"elementsToMinus\"\>", ",", "\<\"elementsToMinus$\"\>", 
   ",", "\<\"elementsToPlus\"\>", ",", "\<\"elementsToPlus$\"\>", 
   ",", "\<\"eliminateGrade\"\>", ",", "\<\"eliminateGrade$\"\>", 
   ",", "\<\"el$\"\>", ",", "\<\"exceptHeads\"\>", 
   ",", "\<\"exceptHeads$\"\>", ",", "\<\"expandFunction\"\>", 
   ",", "\<\"expandFunction$\"\>", ",", "\<\"expandZasExp\"\>", 
   ",", "\<\"expansion\"\>", ",", "\<\"expansionOrder\"\>", 
   ",", "\<\"expansionOrder$\"\>", ",", "\<\"expansion$\"\>", 
   ",", "\<\"expArgs\"\>", ",", "\<\"expArgs$\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotentsAutomatic\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotentsAutomatic$\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents$\"\>", ",", "\<\"expr\"\>", 
   ",", "\<\"exprBeforeExpansion\"\>", ",", "\<\"exprBeforeExpansion$\"\>", 
   ",", "\<\"expression\"\>", ",", "\<\"expression$\"\>", 
   ",", "\<\"exprExpanded\"\>", ",", "\<\"exprExpanded$\"\>", 
   ",", "\<\"exprList\"\>", ",", "\<\"exprList$\"\>", ",", "\<\"exprs\"\>", 
   ",", "\<\"exprs$\"\>", ",", "\<\"expr$\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"factorIndex\"\>", ",", "\<\"factorIndex$\"\>", 
   ",", "\<\"factors\"\>", ",", "\<\"factors$\"\>", ",", "\<\"fe\"\>", 
   ",", "\<\"feature\"\>", ",", "\<\"fe$\"\>", ",", "\<\"ff\"\>", 
   ",", "\<\"FFGGm1\"\>", ",", "\<\"FFGGm1$\"\>", ",", "\<\"field\"\>", 
   ",", "\<\"fieldOnly\"\>", ",", "\<\"fieldOnly$\"\>", 
   ",", "\<\"fieldReplacementRules\"\>", 
   ",", "\<\"fieldReplacementRulesGradeInversed\"\>", 
   ",", "\<\"fieldReplacementRulesGradeInversed$\"\>", 
   ",", "\<\"fieldReplacementRules$\"\>", ",", "\<\"field$\"\>", 
   ",", "\<\"fin\"\>", ",", "\<\"formalMV\"\>", ",", "\<\"formalMV$\"\>", 
   ",", "\<\"found\"\>", ",", "\<\"found$\"\>", ",", "\<\"fullBase\"\>", 
   ",", "\<\"fullBase$\"\>", ",", "\<\"f$\"\>", ",", "\<\"gaAdjoint\"\>", 
   ",", "\<\"gaAlwaysTestInputIndexOrdering\"\>", 
   ",", "\<\"gaAssociationRepresentationClean\"\>", 
   ",", "\<\"gaCliffordConjugateGrades\"\>", 
   ",", "\<\"gaCollectAndReplaceStep\"\>", ",", "\<\"gaCom\"\>", 
   ",", "\<\"gaDefaultMatrixRepresentationData\"\>", 
   ",", "\<\"gaDefineExpandedPairProduct\"\>", 
   ",", "\<\"gaDefineNotation\"\>", 
   ",", "\<\"gaDefineOrthonormalBasisMain\"\>", 
   ",", "\<\"gaElementaryAlgebraToMatrixRepresentationRules\"\>", 
   ",", "\<\"gaff\"\>", 
   ",", "\<\"gaFromMatrixRepresentationSparseNoQuaternions\"\>", 
   ",", "\<\"gaGeneralBaseSymbolInputAlias\"\>", 
   ",", "\<\"gaGradeInverseGrades\"\>", 
   ",", "\<\"gaInternalMultivectorRepresentation\"\>", 
   ",", "\<\"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ\"\>", 
   ",", "\<\"gaMemorizeBaseElementProduct\"\>", ",", "\<\"gaOptionValue\"\>", 
   ",", "\<\"gaOrthonormalBasisSymbolInputAlias\"\>", 
   ",", "\<\"gaOrthonormalBasisSymbolName\"\>", ",", "\<\"gap\"\>", 
   ",", "\<\"gaPrecomputedPairProduct\"\>", ",", "\<\"gaPureLinearity\"\>", 
   ",", "\<\"gaq\"\>", ",", "\<\"gar\"\>", ",", "\<\"gaReverseGrades\"\>", 
   ",", "\<\"gaTensorProductI\"\>", ",", "\<\"gaValidVersionQ\"\>", 
   ",", "\<\"gblt\"\>", ",", "\<\"gblt$\"\>", 
   ",", "\<\"generalBaseSymbolInputAlias\"\>", 
   ",", "\<\"generalDefaultMatrixRepresentationSetting\"\>", 
   ",", "\<\"generalMV\"\>", ",", "\<\"generalMVexpanded\"\>", 
   ",", "\<\"generalMVexpanded$\"\>", ",", "\<\"generalMV$\"\>", 
   ",", "\<\"generateCommutatorForm\"\>", ",", "\<\"genVec\"\>", 
   ",", "\<\"genVec$\"\>", ",", "\<\"getBase\"\>", 
   ",", "\<\"getRCHFactor\"\>", ",", "\<\"gp\"\>", ",", "\<\"gp$\"\>", 
   ",", "\<\"gr\"\>", ",", "\<\"grade\"\>", ",", "\<\"gradeList\"\>", 
   ",", "\<\"gradeParityCheck\"\>", ",", "\<\"grades\"\>", 
   ",", "\<\"gradesForOutput\"\>", ",", "\<\"gradesForOutput$\"\>", 
   ",", "\<\"gradesOnly\"\>", ",", "\<\"gradesOnly$\"\>", 
   ",", "\<\"grades$\"\>", ",", "\<\"grade$\"\>", ",", "\<\"gro\"\>", 
   ",", "\<\"grOnly\"\>", ",", "\<\"groupByGrade\"\>", 
   ",", "\<\"grouping\"\>", ",", "\<\"grouping$\"\>", ",", "\<\"gro$\"\>", 
   ",", "\<\"grRequested\"\>", ",", "\<\"grRequested$\"\>", 
   ",", "\<\"gr$\"\>", ",", "\<\"h\"\>", ",", "\<\"h14\"\>", 
   ",", "\<\"h14$\"\>", ",", "\<\"h4h4\"\>", ",", "\<\"h4h4$\"\>", 
   ",", "\<\"half1\"\>", ",", "\<\"half1$\"\>", ",", "\<\"hermitianCase\"\>", 
   ",", "\<\"hermitianCase$\"\>", ",", "\<\"hh\"\>", ",", "\<\"hh$\"\>", 
   ",", "\<\"homogeneusElements\"\>", ",", "\<\"homogeneusElements$\"\>", 
   ",", "\<\"HyperbolicUnit\"\>", ",", "\<\"hyperbolicUnits\"\>", 
   ",", "\<\"hyperbolicUnits$\"\>", ",", "\<\"h$\"\>", ",", "\<\"i\"\>", 
   ",", "\<\"i1\"\>", ",", "\<\"i1$\"\>", ",", "\<\"i2\"\>", 
   ",", "\<\"i2$\"\>", ",", "\<\"idealBasis\"\>", ",", "\<\"idealBasisA\"\>", 
   ",", "\<\"idealBasisAUnordered\"\>", ",", "\<\"idealBasisAUnordered$\"\>", 
   ",", "\<\"idealBasisA$\"\>", ",", "\<\"idealBasisB\"\>", 
   ",", "\<\"idealBasisB$\"\>", ",", "\<\"idealBasisOrder\"\>", 
   ",", "\<\"idealBasisOrder$\"\>", ",", "\<\"idealBasis$\"\>", 
   ",", "\<\"idempotent\"\>", ",", "\<\"idempotentList\"\>", 
   ",", "\<\"idempotentList$\"\>", ",", "\<\"idempotent$\"\>", 
   ",", "\<\"idMatrix\"\>", ",", "\<\"idMatrix$\"\>", ",", "\<\"ifPrint\"\>", 
   ",", "\<\"ignoreMe\"\>", ",", "\<\"ignoreMe$\"\>", ",", "\<\"iI\"\>", 
   ",", "\<\"iI$\"\>", ",", "\<\"imaginaryIReplacement\"\>", 
   ",", "\<\"imaginaryIReplacement$\"\>", ",", "\<\"imaginaryUnits\"\>", 
   ",", "\<\"imaginaryUnits$\"\>", ",", "\<\"in\"\>", ",", "\<\"inc\"\>", 
   ",", "\<\"inc$\"\>", ",", "\<\"ind\"\>", ",", "\<\"ind1\"\>", 
   ",", "\<\"ind1$\"\>", ",", "\<\"ind2\"\>", ",", "\<\"ind2$\"\>", 
   ",", "\<\"indd\"\>", ",", "\<\"indd$\"\>", ",", "\<\"inDegLexOrder\"\>", 
   ",", "\<\"inDegLexOrder$\"\>", ",", "\<\"index2Repl\"\>", 
   ",", "\<\"index2Repl$\"\>", ",", "\<\"indexCases\"\>", 
   ",", "\<\"indexCases$\"\>", ",", "\<\"indexList\"\>", 
   ",", "\<\"indexListWithSortMark\"\>", 
   ",", "\<\"indexListWithSortMark$\"\>", ",", "\<\"indexList$\"\>", 
   ",", "\<\"indexPairs\"\>", ",", "\<\"indexPairs$\"\>", 
   ",", "\<\"indexRange\"\>", ",", "\<\"indexRange$\"\>", 
   ",", "\<\"indown\"\>", ",", "\<\"indown$\"\>", ",", "\<\"indSet\"\>", 
   ",", "\<\"indSetReplRul\"\>", ",", "\<\"indu\"\>", ",", "\<\"indu$\"\>", 
   ",", "\<\"ind$\"\>", ",", "\<\"inEx\"\>", ",", "\<\"inEx$\"\>", 
   ",", "\<\"inf0\"\>", ",", "\<\"inf0$\"\>", ",", "\<\"infn\"\>", 
   ",", "\<\"infn$\"\>", ",", "\<\"initialSeq\"\>", 
   ",", "\<\"initialSeq$\"\>", ",", "\<\"inpOpt\"\>", ",", "\<\"inpOpt$\"\>", 
   ",", "\<\"intesectionIJ\"\>", ",", "\<\"intesectionIJ$\"\>", 
   ",", "\<\"inup\"\>", ",", "\<\"inup$\"\>", 
   ",", "\<\"invdeglexIndexList\"\>", ",", "\<\"inversedRules\"\>", 
   ",", "\<\"inversedTheBlade\"\>", ",", "\<\"inversedTheBlade$\"\>", 
   ",", "\<\"inverseKillingMetric\"\>", ",", "\<\"inverseKillingMetric$\"\>", 
   ",", "\<\"inversePseudoscalar\"\>", ",", "\<\"inversePseudoscalar$\"\>", 
   ",", "\<\"involutionDet\"\>", ",", "\<\"involutionInverse\"\>", 
   ",", "\<\"invPos\"\>", ",", "\<\"invPos$\"\>", 
   ",", "\<\"inWhichCommand\"\>", ",", "\<\"inWhichCommand$\"\>", 
   ",", "\<\"in$\"\>", ",", "\<\"isomorphismPreRules\"\>", 
   ",", "\<\"isomorphismRules\"\>", ",", "\<\"iterators\"\>", 
   ",", "\<\"iterators$\"\>", ",", "\<\"iterRange\"\>", 
   ",", "\<\"iterRange$\"\>", ",", "\<\"i$\"\>", ",", "\<\"j\"\>", 
   ",", "\<\"j1\"\>", ",", "\<\"j1$\"\>", ",", "\<\"j2\"\>", 
   ",", "\<\"j2$\"\>", ",", "\<\"jJ\"\>", ",", "\<\"jJ$\"\>", 
   ",", "\<\"j$\"\>", ",", "\<\"k\"\>", ",", "\<\"keyMV\"\>", 
   ",", "\<\"keyMV$\"\>", ",", "\<\"keyReplace\"\>", 
   ",", "\<\"keyReplaceAndSort\"\>", ",", "\<\"keysB\"\>", ",", "\<\"k$\"\>", 
   ",", "\<\"l\"\>", ",", "\<\"largestAbsCoef\"\>", 
   ",", "\<\"largestAbsCoef$\"\>", ",", "\<\"leftideal\"\>", 
   ",", "\<\"leftIdeal\"\>", ",", "\<\"leftideal$\"\>", 
   ",", "\<\"leftIdeal$\"\>", ",", "\<\"len\"\>", ",", "\<\"lena1\"\>", 
   ",", "\<\"lena1$\"\>", ",", "\<\"lena2\"\>", ",", "\<\"lena2$\"\>", 
   ",", "\<\"lengthOfDivisionRing\"\>", ",", "\<\"lengthOfDivisionRing$\"\>", 
   ",", "\<\"lengthOfIdealBasis\"\>", ",", "\<\"lengthOfIdealBasis$\"\>", 
   ",", "\<\"lengthOfMutuallyAnihilatingIdempotents\"\>", 
   ",", "\<\"lengthOfMutuallyAnihilatingIdempotents$\"\>", 
   ",", "\<\"len$\"\>", ",", "\<\"logTempMatrix\"\>", ",", "\<\"ls\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"makeAlias\"\>", ",", "\<\"makeProductTerm\"\>",
    ",", "\<\"makeReplRule\"\>", ",", "\<\"makeRule\"\>", ",", "\<\"mark\"\>",
    ",", "\<\"marks\"\>", ",", "\<\"marks$\"\>", ",", "\<\"mark$\"\>", 
   ",", "\<\"mat\"\>", ",", "\<\"matrix\"\>", 
   ",", "\<\"matrixOuterProductOrder\"\>", 
   ",", "\<\"matrixOuterProductOrder$\"\>", ",", "\<\"matrixRepr\"\>", 
   ",", "\<\"matrixRepresentation\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsA\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsANorepl\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsANorepl$\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsA$\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsB\"\>", 
   ",", "\<\"matrixRepresentationsOfVectorsB$\"\>", 
   ",", "\<\"matrixRepresentation$\"\>", ",", "\<\"matrixRepr$\"\>", 
   ",", "\<\"matrix$\"\>", ",", "\<\"matrProd\"\>", ",", "\<\"matrProd$\"\>", 
   ",", "\<\"mat$\"\>", ",", "\<\"max\"\>", ",", "\<\"maxCoef\"\>", 
   ",", "\<\"maxCoef$\"\>", ",", "\<\"maxGrade\"\>", ",", "\<\"maxGrade$\"\>",
    ",", "\<\"maxIter\"\>", ",", "\<\"maxIter$\"\>", ",", "\<\"maxOrder\"\>", 
   ",", "\<\"maxOrder$\"\>", ",", "\<\"max$\"\>", 
   ",", "\<\"memorizeProducts\"\>", ",", "\<\"method\"\>", 
   ",", "\<\"methodDefaults\"\>", ",", "\<\"methodOpts\"\>", 
   ",", "\<\"methodOpts$\"\>", ",", "\<\"method$\"\>", ",", "\<\"msgHelp\"\>",
    ",", "\<\"msgHelp$\"\>", ",", "\<\"mult\"\>", ",", "\<\"multIndex\"\>", 
   ",", "\<\"multIndex$\"\>", 
   ",", "\<\"multipleApplyQuaternionIsomorphismRules\"\>", 
   ",", "\<\"mult$\"\>", ",", "\<\"mutuallyAnihilatingIdempotents\"\>", 
   ",", "\<\"mutuallyAnihilatingIdempotents$\"\>", ",", "\<\"mv\"\>", 
   ",", "\<\"mvAntisymmetricProductSignatureMapC\"\>", ",", "\<\"mvArg\"\>", 
   ",", "\<\"mvArg$\"\>", ",", "\<\"mvDownUpToAssociationRules\"\>", 
   ",", "\<\"mvIndexToBinaryLikeRepresentationC\"\>", 
   ",", "\<\"mvIndexToBinaryLikeRepresentationC$\"\>", 
   ",", "\<\"mvInvDegLexSortedIndexList\"\>", ",", "\<\"mvMu\"\>", 
   ",", "\<\"mvMuS\"\>", ",", "\<\"mvMu$\"\>", 
   ",", "\<\"mvNonCommutativeDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvLexC\"\>", 
   ",", "\<\"mvNonCommutativeInvLexC$\"\>", 
   ",", "\<\"mvNonCommutativeInvRevLexC\"\>", 
   ",", "\<\"mvNonCommutativeInvRevLexC$\"\>", 
   ",", "\<\"mvNonCommutativeLexC\"\>", ",", "\<\"mvNonCommutativeLexC$\"\>", 
   ",", "\<\"mvNonCommutativeRevLexC\"\>", 
   ",", "\<\"mvNonCommutativeRevLexC$\"\>", 
   ",", "\<\"mvProductSignatureMapC\"\>", 
   ",", "\<\"mvSetSymmetricDifference\"\>", 
   ",", "\<\"mvSignatureOfIncreasingPermutation\"\>", ",", "\<\"mv$\"\>", 
   ",", "\<\"myexressions\"\>", ",", "\<\"myexressions$\"\>", 
   ",", "\<\"myStrings\"\>", ",", "\<\"myStrings$\"\>", ",", "\<\"mySum\"\>", 
   ",", "\<\"mySum$\"\>", ",", "\<\"myTable\"\>", ",", "\<\"myTable$\"\>", 
   ",", "\<\"m$\"\>", ",", "\<\"n\"\>", ",", "\<\"name\"\>", 
   ",", "\<\"name$\"\>", ",", "\<\"nestedQuaternionIsomorphismRule\"\>", 
   ",", "\<\"nestNumber\"\>", ",", "\<\"nestNumber$\"\>", 
   ",", "\<\"newAl\"\>", ",", "\<\"newAl$\"\>", ",", "\<\"newColor\"\>", 
   ",", "\<\"newColor$\"\>", ",", "\<\"newRep\"\>", ",", "\<\"newRep$\"\>", 
   ",", "\<\"nextAccept\"\>", ",", "\<\"nonCommutingQuaternionLike\"\>", 
   ",", "\<\"nonCommutingQuaternionLike$\"\>", 
   ",", "\<\"nonCommutingWithFirstList\"\>", 
   ",", "\<\"nonCommutingWithFirstList$\"\>", ",", "\<\"nonScalars\"\>", 
   ",", "\<\"nonScalars$\"\>", ",", "\<\"nontrivialEntries\"\>", 
   ",", "\<\"nontrivialEntries$\"\>", ",", "\<\"normalizedBlade\"\>", 
   ",", "\<\"normalizedBlade$\"\>", ",", "\<\"nsq\"\>", ",", "\<\"nsq$\"\>", 
   ",", "\<\"num\"\>", ",", "\<\"numberOfIdempotents\"\>", 
   ",", "\<\"numberOfIdempotents$\"\>", 
   ",", "\<\"numberOfPrimitiveIdempotents\"\>", ",", "\<\"numerat\"\>", 
   ",", "\<\"numerat$\"\>", ",", "\<\"num$\"\>", ",", "\<\"n$\"\>", 
   ",", "\<\"of\"\>", ",", "\<\"of$\"\>", ",", "\<\"oldlength\"\>", 
   ",", "\<\"oldlength$\"\>", ",", "\<\"oneGradeRule\"\>", 
   ",", "\<\"oneStepCliffordDecompose\"\>", ",", "\<\"op\"\>", 
   ",", "\<\"opElement\"\>", ",", "\<\"opElement$\"\>", 
   ",", "\<\"opMatrix\"\>", ",", "\<\"opMatrix$\"\>", 
   ",", "\<\"optimizedMultiplicationOrder\"\>", 
   ",", "\<\"optimizedMultiplicationOrder$\"\>", ",", "\<\"opts\"\>", 
   ",", "\<\"opts$\"\>", ",", "\<\"op$\"\>", ",", "\<\"ord\"\>", 
   ",", "\<\"order\"\>", ",", "\<\"orderAttempt\"\>", 
   ",", "\<\"orderAttempt$\"\>", ",", "\<\"orderedQCommutative\"\>", 
   ",", "\<\"orderedQNoncommutative\"\>", ",", "\<\"order$\"\>", 
   ",", "\<\"ord$\"\>", ",", "\<\"orthogonalBaseElements\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputAlias\"\>", 
   ",", "\<\"orthonormalBaseSymbolName\"\>", ",", "\<\"other\"\>", 
   ",", "\<\"other1\"\>", ",", "\<\"other1$\"\>", ",", "\<\"other2\"\>", 
   ",", "\<\"other2$\"\>", ",", "\<\"otherArg\"\>", ",", "\<\"otherArg$\"\>", 
   ",", "\<\"otherOpts\"\>", ",", "\<\"otherOpts$\"\>", ",", "\<\"other$\"\>",
    ",", "\<\"outerCtx\"\>", ",", "\<\"outputType\"\>", 
   ",", "\<\"outputType$\"\>", ",", "\<\"outputVectors\"\>", 
   ",", "\<\"outputVectors$\"\>", ",", "\<\"p\"\>", ",", "\<\"pair\"\>", 
   ",", "\<\"pair$\"\>", ",", "\<\"pfd\"\>", ",", "\<\"pfdProto\"\>", 
   ",", "\<\"pfdProto$\"\>", ",", "\<\"pfd$\"\>", ",", "\<\"pfi\"\>", 
   ",", "\<\"pfiProto\"\>", ",", "\<\"pfiProto$\"\>", ",", "\<\"pfi$\"\>", 
   ",", "\<\"pickNextColor\"\>", ",", "\<\"pickNextRandomColor\"\>", 
   ",", "\<\"point\"\>", ",", "\<\"point$\"\>", ",", "\<\"positiveBlades\"\>",
    ",", "\<\"positiveBlades$\"\>", ",", "\<\"possibleSolutions\"\>", 
   ",", "\<\"possibleSolutions$\"\>", ",", "\<\"pp\"\>", ",", "\<\"pp$\"\>", 
   ",", "\<\"precomputedInput\"\>", ",", "\<\"precomputedInput$\"\>", 
   ",", "\<\"precomputedProductComponents\"\>", 
   ",", "\<\"precomputedProductComponents$\"\>", 
   ",", "\<\"predefinedColorList\"\>", ",", "\<\"preReadMessage\"\>", 
   ",", "\<\"prevRules\"\>", ",", "\<\"prevRules$\"\>", 
   ",", "\<\"privateCtx\"\>", ",", "\<\"prod\"\>", 
   ",", "\<\"productAlgebra\"\>", ",", "\<\"productIndex\"\>", 
   ",", "\<\"productMatrices\"\>", ",", "\<\"productMatrices$\"\>", 
   ",", "\<\"productSignatureMap\"\>", ",", "\<\"productsOfFound\"\>", 
   ",", "\<\"productsOfFound$\"\>", ",", "\<\"productWithPrototype\"\>", 
   ",", "\<\"productWithPrototype$\"\>", ",", "\<\"prod$\"\>", 
   ",", "\<\"prototype\"\>", ",", "\<\"prototype$\"\>", 
   ",", "\<\"pseudoscalar\"\>", ",", "\<\"pseudoscalarMagnitude\"\>", 
   ",", "\<\"pseudoscalarMagnitude$\"\>", ",", "\<\"pseudoscalar$\"\>", 
   ",", "\<\"ptr\"\>", ",", "\<\"ptr$\"\>", ",", "\<\"p$\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"qp\"\>", ",", "\<\"qp$\"\>", 
   ",", "\<\"qthpower\"\>", ",", "\<\"qthpower$\"\>", ",", "\<\"qu\"\>", 
   ",", "\<\"quality\"\>", ",", "\<\"quaternionFreeMatrix\"\>", 
   ",", "\<\"quaternionFreeMatrix$\"\>", ",", "\<\"quaternionReplacement\"\>",
    ",", "\<\"quaternionReplacement$\"\>", ",", "\<\"quaternionUnits\"\>", 
   ",", "\<\"quaternionUnits$\"\>", ",", "\<\"quiet\"\>", 
   ",", "\<\"quiet$\"\>", ",", "\<\"qu$\"\>", ",", "\<\"q$\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"ra\"\>", ",", "\<\"raEx\"\>", 
   ",", "\<\"raEx$\"\>", ",", "\<\"rang\"\>", ",", "\<\"rang$\"\>", 
   ",", "\<\"ra$\"\>", ",", "\<\"reciprocalBase\"\>", 
   ",", "\<\"reciprocalBase$\"\>", ",", "\<\"reciprocalVectors\"\>", 
   ",", "\<\"reciprocVec\"\>", ",", "\<\"reciprocVec$\"\>", 
   ",", "\<\"recoprocalBaseBivectors\"\>", 
   ",", "\<\"recoprocalBaseBivectors$\"\>", ",", "\<\"reductionAlgebras\"\>", 
   ",", "\<\"reductionInstruction\"\>", 
   ",", "\<\"reductionInstructionNo00\"\>", 
   ",", "\<\"reductionInstructionNo00$\"\>", 
   ",", "\<\"reductionInstruction$\"\>", ",", "\<\"reductionOrder\"\>", 
   ",", "\<\"reductionOrder$\"\>", ",", "\<\"relevantPairs\"\>", 
   ",", "\<\"relevantPairs$\"\>", ",", "\<\"relGrades\"\>", 
   ",", "\<\"relGrades$\"\>", ",", "\<\"rem\"\>", ",", "\<\"remaining\"\>", 
   ",", "\<\"remaining$\"\>", ",", "\<\"removeElems\"\>", 
   ",", "\<\"removeElems$\"\>", ",", "\<\"removeFunctionRules\"\>", 
   ",", "\<\"removeProductsOfElements\"\>", ",", "\<\"removeVectorList\"\>", 
   ",", "\<\"removeVectorList$\"\>", ",", "\<\"remPos\"\>", 
   ",", "\<\"remPos$\"\>", ",", "\<\"rep\"\>", ",", "\<\"replaceDR\"\>", 
   ",", "\<\"replaceDR$\"\>", ",", "\<\"replaceFieldElement\"\>", 
   ",", "\<\"replaceTensorProducts\"\>", 
   ",", "\<\"replaceTensorProducts$\"\>", ",", "\<\"replRules\"\>", 
   ",", "\<\"replRules$\"\>", ",", "\<\"repMatrix\"\>", 
   ",", "\<\"repMatrix$\"\>", ",", "\<\"repNames\"\>", 
   ",", "\<\"repNames$\"\>", ",", "\<\"repRules\"\>", 
   ",", "\<\"repRulesSetting\"\>", ",", "\<\"repRulesSetting$\"\>", 
   ",", "\<\"repRules$\"\>", ",", "\<\"repRuls\"\>", ",", "\<\"repRuls$\"\>", 
   ",", "\<\"rep$\"\>", ",", "\<\"requiredVersion\"\>", ",", "\<\"res\"\>", 
   ",", "\<\"restElems\"\>", ",", "\<\"restElems$\"\>", 
   ",", "\<\"restGrades\"\>", ",", "\<\"restGrades$\"\>", 
   ",", "\<\"restOpts\"\>", ",", "\<\"restOpts$\"\>", 
   ",", "\<\"resultWithoutQuaternionRepl\"\>", 
   ",", "\<\"resultWithoutQuaternionRepl$\"\>", 
   ",", "\<\"resultWithQuaternionReplButWithoutIRepl\"\>", 
   ",", "\<\"resultWithQuaternionReplButWithoutIRepl$\"\>", 
   ",", "\<\"res$\"\>", ",", "\<\"reversedMV\"\>", ",", "\<\"reversedMV$\"\>",
    ",", "\<\"rule\"\>", ",", "\<\"ruleListList\"\>", 
   ",", "\<\"ruleListList$\"\>", ",", "\<\"rules\"\>", 
   ",", "\<\"rulesAssociationTogetherNotRepeatingMultScalar\"\>", 
   ",", "\<\"rulesForNonScalars\"\>", ",", "\<\"rulesForNonScalars$\"\>", 
   ",", "\<\"rules$\"\>", ",", "\<\"rule$\"\>", ",", "\<\"r$\"\>", 
   ",", "\<\"s\"\>", ",", "\<\"s1\"\>", ",", "\<\"s1$\"\>", 
   ",", "\<\"sameTestForUnion\"\>", ",", "\<\"sameTestForUnion$\"\>", 
   ",", "\<\"sb\"\>", ",", "\<\"scalars\"\>", ",", "\<\"scalars$\"\>", 
   ",", "\<\"scWm\"\>", ",", "\<\"scWm$\"\>", ",", "\<\"sd\"\>", 
   ",", "\<\"sd$\"\>", ",", "\<\"selectedBE\"\>", ",", "\<\"selectedBE$\"\>", 
   ",", "\<\"selVector\"\>", ",", "\<\"selVector$\"\>", 
   ",", "\<\"semisimpleBlockPosition\"\>", 
   ",", "\<\"semisimpleBlockPosition$\"\>", ",", "\<\"semisimpleQ\"\>", 
   ",", "\<\"semisimpleQ$\"\>", ",", "\<\"sEOM\"\>", 
   ",", "\<\"seriesType\"\>", ",", "\<\"seriesType$\"\>", 
   ",", "\<\"setSymDiff4TP\"\>", ",", "\<\"setSymDiff4TP$\"\>", 
   ",", "\<\"sf\"\>", ",", "\<\"sf$\"\>", 
   ",", "\<\"signatureSplittedSortedVectors\"\>", 
   ",", "\<\"signatureSplittedSortedVectors$\"\>", 
   ",", "\<\"signatureSplittedVectors\"\>", 
   ",", "\<\"signatureSplittedVectors$\"\>", ",", "\<\"signProdSigMap4TP\"\>",
    ",", "\<\"signProdSigMap4TP$\"\>", 
   ",", "\<\"singleElementOuterMultiply\"\>", ",", "\<\"singlet\"\>", 
   ",", "\<\"singleton\"\>", ",", "\<\"singlet$\"\>", 
   ",", "\<\"smartColors\"\>", ",", "\<\"sortedAnswer\"\>", 
   ",", "\<\"sortedAnswer$\"\>", ",", "\<\"specAlgebra\"\>", 
   ",", "\<\"specAlgebra$\"\>", ",", "\<\"spinorCoeffs\"\>", 
   ",", "\<\"spinorCoeffs$\"\>", ",", "\<\"spinorIdempotent\"\>", 
   ",", "\<\"spinorIdempotent$\"\>", ",", "\<\"ssd\"\>", ",", "\<\"ssd$\"\>", 
   ",", "\<\"startEl\"\>", ",", "\<\"startElement\"\>", 
   ",", "\<\"startElement$\"\>", ",", "\<\"startEl$\"\>", 
   ",", "\<\"status\"\>", ",", "\<\"step\"\>", ",", "\<\"stepRev\"\>", 
   ",", "\<\"stringNames\"\>", ",", "\<\"stringNames$\"\>", 
   ",", "\<\"StructureConstants\"\>", ",", "\<\"sty\"\>", ",", "\<\"sty$\"\>",
    ",", "\<\"submethodBVA\"\>", ",", "\<\"submethodBVA$\"\>", 
   ",", "\<\"subsRules\"\>", ",", "\<\"subsRules$\"\>", ",", "\<\"sum\"\>", 
   ",", "\<\"sum$\"\>", ",", "\<\"sym\"\>", ",", "\<\"symbolName\"\>", 
   ",", "\<\"symbolName$\"\>", ",", "\<\"sym$\"\>", ",", "\<\"synm\"\>", 
   ",", "\<\"synm$\"\>", ",", "\<\"s$\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"target\"\>", ",", "\<\"target$\"\>", ",", "\<\"temp\"\>", 
   ",", "\<\"tempvar\"\>", ",", "\<\"tempvar$\"\>", ",", "\<\"temp$\"\>", 
   ",", "\<\"tensorProductIsomorphicToAlgebra\"\>", ",", "\<\"term\"\>", 
   ",", "\<\"termsToTake\"\>", ",", "\<\"termsToTake$\"\>", 
   ",", "\<\"term$\"\>", ",", "\<\"testList\"\>", ",", "\<\"testList$\"\>", 
   ",", "\<\"testResult\"\>", ",", "\<\"testResult$\"\>", 
   ",", "\<\"theAction\"\>", ",", "\<\"theAction$\"\>", 
   ",", "\<\"theAlgebra\"\>", ",", "\<\"theAlgebra$\"\>", 
   ",", "\<\"theAssociationFunction\"\>", 
   ",", "\<\"theAssociationFunction$\"\>", ",", "\<\"theBivectors\"\>", 
   ",", "\<\"theBivectors$\"\>", ",", "\<\"theBlade\"\>", 
   ",", "\<\"theBlade$\"\>", ",", "\<\"theDiscriminantFunction\"\>", 
   ",", "\<\"theDiscriminantFunction$\"\>", ",", "\<\"theDomain\"\>", 
   ",", "\<\"theDomain$\"\>", ",", "\<\"theDoubleRealFieldOrdering\"\>", 
   ",", "\<\"theDoubleRealFieldOrdering$\"\>", ",", "\<\"theElement\"\>", 
   ",", "\<\"theElement$\"\>", ",", "\<\"theEquationsToCheck\"\>", 
   ",", "\<\"theEquationsToCheck$\"\>", ",", "\<\"theExpandFunction\"\>", 
   ",", "\<\"theExpandFunction$\"\>", ",", "\<\"theFieldAndName\"\>", 
   ",", "\<\"theFieldAndName$\"\>", ",", "\<\"theFormula\"\>", 
   ",", "\<\"TheFormula\"\>", ",", "\<\"theFormula$\"\>", 
   ",", "\<\"theGradesToExtract\"\>", ",", "\<\"theGradesToExtract$\"\>", 
   ",", "\<\"theIdealBoxes\"\>", ",", "\<\"theIdealBoxes$\"\>", 
   ",", "\<\"theIdempotent\"\>", ",", "\<\"theIdempotentOptions\"\>", 
   ",", "\<\"theIdempotentOptions$\"\>", ",", "\<\"theIdempotentSetting\"\>", 
   ",", "\<\"theIdempotentSetting$\"\>", ",", "\<\"theIdempotent$\"\>", 
   ",", "\<\"theImaginaryIReplacementRules\"\>", 
   ",", "\<\"theImaginaryIReplacementRules$\"\>", 
   ",", "\<\"theInternalMVRepresentation\"\>", 
   ",", "\<\"theLeftMinimaIdealBasisA\"\>", 
   ",", "\<\"theLeftMinimaIdealBasisA$\"\>", ",", "\<\"theMethod\"\>", 
   ",", "\<\"theMethodOptions\"\>", ",", "\<\"theMethodOptions$\"\>", 
   ",", "\<\"theMethod$\"\>", ",", "\<\"theMVRepresentation\"\>", 
   ",", "\<\"theMVRepresentation$\"\>", ",", "\<\"theOmitedGrades\"\>", 
   ",", "\<\"theOmitedGrades$\"\>", ",", "\<\"theOrderA\"\>", 
   ",", "\<\"theOrderA$\"\>", ",", "\<\"theOrderB\"\>", 
   ",", "\<\"theOrderB$\"\>", ",", "\<\"theOrderingRules\"\>", 
   ",", "\<\"theOrderingRules$\"\>", ",", "\<\"theOtherOptions\"\>", 
   ",", "\<\"theOtherOptions$\"\>", 
   ",", "\<\"theQuaternionReplacementRules\"\>", 
   ",", "\<\"theQuaternionReplacementRules$\"\>", 
   ",", "\<\"theReciprocalBivectors\"\>", 
   ",", "\<\"theReciprocalBivectors$\"\>", ",", "\<\"theReplRules\"\>", 
   ",", "\<\"theReplRules$\"\>", ",", "\<\"theResult\"\>", 
   ",", "\<\"theResultFunction\"\>", ",", "\<\"theResultFunction$\"\>", 
   ",", "\<\"theResult$\"\>", ",", "\<\"theRule\"\>", ",", "\<\"theRule$\"\>",
    ",", "\<\"theScalarFunction\"\>", ",", "\<\"theScalarFunction$\"\>", 
   ",", "\<\"theSortedField\"\>", ",", "\<\"theSortedField$\"\>", 
   ",", "\<\"theStructureConstants\"\>", 
   ",", "\<\"theStructureConstantsSummedWithMetric\"\>", 
   ",", "\<\"theStructureConstantsSummedWithMetric$\"\>", 
   ",", "\<\"theStructureConstants$\"\>", ",", "\<\"theTransfrom\"\>", 
   ",", "\<\"theTransfrom$\"\>", ",", "\<\"theVectorBasis\"\>", 
   ",", "\<\"theVectorBasis$\"\>", ",", "\<\"thisBase\"\>", 
   ",", "\<\"thisBase$\"\>", ",", "\<\"thisRep\"\>", ",", "\<\"thisRep$\"\>", 
   ",", "\<\"toRCHFactors\"\>", ",", "\<\"triangularNumber\"\>", 
   ",", "\<\"trowCondition\"\>", ",", "\<\"trowCondition$\"\>", 
   ",", "\<\"trueHeads\"\>", ",", "\<\"trueHeadsBlanks\"\>", 
   ",", "\<\"trueHeadsBlanks$\"\>", ",", "\<\"trueHeadsHeads\"\>", 
   ",", "\<\"trueHeadsHeads$\"\>", ",", "\<\"trueHeads$\"\>", 
   ",", "\<\"type\"\>", ",", "\<\"type$\"\>", ",", "\<\"u\"\>", 
   ",", "\<\"u1\"\>", ",", "\<\"u2a\"\>", ",", "\<\"u2b\"\>", 
   ",", "\<\"u3\"\>", ",", "\<\"uexp\"\>", ",", "\<\"uMVec\"\>", 
   ",", "\<\"uMVec$\"\>", ",", "\<\"uniqueMaskForArbitraryAlgebra\"\>", 
   ",", "\<\"uniqueMaskForSpecAlgebra\"\>", ",", "\<\"uniqueSymbolsB\"\>", 
   ",", "\<\"uniqueSymbolsB$\"\>", ",", "\<\"uniqueSymbolsC\"\>", 
   ",", "\<\"uniqueSymbolsC$\"\>", ",", "\<\"unitElement\"\>", 
   ",", "\<\"up\"\>", ",", "\<\"up1\"\>", ",", "\<\"up1$\"\>", 
   ",", "\<\"up2\"\>", ",", "\<\"up2$\"\>", ",", "\<\"updateInputAlias\"\>", 
   ",", "\<\"up$\"\>", ",", "\<\"userOpts\"\>", ",", "\<\"userOpts$\"\>", 
   ",", "\<\"u$\"\>", ",", "\<\"value\"\>", ",", "\<\"value$\"\>", 
   ",", "\<\"var\"\>", ",", "\<\"variants\"\>", ",", "\<\"variants$\"\>", 
   ",", "\<\"vars\"\>", ",", "\<\"varsWithMarks\"\>", 
   ",", "\<\"varsWithMarks$\"\>", ",", "\<\"vars$\"\>", ",", "\<\"var$\"\>", 
   ",", "\<\"vecBase\"\>", ",", "\<\"vecBase$\"\>", ",", "\<\"vectorBase\"\>",
    ",", "\<\"vectorBase$\"\>", ",", "\<\"vectorMatrices\"\>", 
   ",", "\<\"vectorMatricesFin\"\>", ",", "\<\"vectorMatricesFin$\"\>", 
   ",", "\<\"vectorMatrices$\"\>", ",", "\<\"vectors\"\>", 
   ",", "\<\"vectorsOfArbitraryAlgebra\"\>", 
   ",", "\<\"vectorsOfSpecialAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebraMetricSorted\"\>", 
   ",", "\<\"vectors$\"\>", ",", "\<\"vRep\"\>", ",", "\<\"vsdim\"\>", 
   ",", "\<\"vsdim$\"\>", ",", "\<\"w\"\>", ",", "\<\"what\"\>", 
   ",", "\<\"what$\"\>", ",", "\<\"whi\"\>", ",", "\<\"whichAlgebra\"\>", 
   ",", "\<\"whi$\"\>", ",", "\<\"wrap\"\>", ",", "\<\"wrapArg\"\>", 
   ",", "\<\"wrapArg$\"\>", ",", "\<\"wrapCliffordConjugate\"\>", 
   ",", "\<\"wrapHead\"\>", ",", "\<\"wrappedSelVector\"\>", 
   ",", "\<\"wrappedSelVectorSignedMagnitudeSquare\"\>", 
   ",", "\<\"wrappedSelVectorSignedMagnitudeSquare$\"\>", 
   ",", "\<\"wrappedSelVector$\"\>", ",", "\<\"wrappingBlade\"\>", 
   ",", "\<\"wrappingBlade$\"\>", ",", "\<\"wrap$\"\>", ",", "\<\"w$\"\>", 
   ",", "\<\"x\"\>", ",", "\<\"x1\"\>", ",", "\<\"x1$\"\>", ",", "\<\"x2\"\>",
    ",", "\<\"x2$\"\>", ",", "\<\"x$\"\>", ",", "\<\"y\"\>", 
   ",", "\<\"y1\"\>", ",", "\<\"y1$\"\>", ",", "\<\"y2\"\>", 
   ",", "\<\"y2$\"\>", ",", "\<\"y$\"\>", ",", "\<\"z\"\>", ",", "\<\"z$\"\>",
    ",", "\<\"\[CurlyPhi]\"\>"}], "}"}]], "Output"]
}, Open  ]],

Cell["Check if global context remains clear .", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", 
  RowBox[{"\"\<Global`\>\"", "<>", " ", "\"\<*\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 ". Notes, drawbacks, future plans"
}], "Section"],

Cell["End notes, drawbacks", "Text"],

Cell["\<\
Implement calculation of derivatives (orthonormal base first)\
\>", "Text"],

Cell["\<\
Implement groebner base for outer product, then for whole clifford algebra \
(in orthonormal base).\
\>", "Text"],

Cell["\<\
Introduce? CommutablePairQ[a,b] which returs True if we know rule how to \
interchange a and b and False otherwise. Like wise then we may need function \
which calculates sign after exchange of its arguments.   \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowStatus", "[", "\"\<Package has been loaded\>\"", "]"}], 
  ";"}]], "Input"]
}, Open  ]]
},
WindowSize->{1325, 760},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowSelection->True,
ShowCellTags->True,
TrackCellChangeTimes->False,
FrontEndVersion->"10.3 for Linux x86 (64-bit) (December 10, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "references"->{
  Cell[3376, 114, 3124, 47, 541, "Text",
   CellTags->"references"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"references", 1425009, 37249}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 150, 5, 93, "Title",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[733, 29, 238, 4, 35, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[974, 35, 133, 2, 35, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[1144, 42, 110, 4, 65, "Section"],
Cell[1257, 48, 255, 7, 99, "Text"],
Cell[CellGroupData[{
Cell[1537, 59, 118, 7, 44, "Subsection"],
Cell[1658, 68, 692, 13, 148, "Text"],
Cell[2353, 83, 873, 17, 208, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[3263, 105, 110, 7, 36, "Subsection"],
Cell[3376, 114, 3124, 47, 541, "Text",
 CellTags->"references"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6549, 167, 83, 4, 65, "Section"],
Cell[6635, 173, 213, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[6873, 181, 157, 7, 45, "Subsection"],
Cell[7033, 190, 300, 9, 51, "Text"],
Cell[CellGroupData[{
Cell[7358, 203, 78, 1, 32, "Input",
 Evaluatable->False],
Cell[7439, 206, 128, 1, 32, "Output"]
}, Open  ]],
Cell[7582, 210, 151, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[7758, 217, 320, 8, 55, "Input",
 Evaluatable->False],
Cell[8081, 227, 468, 7, 107, "Print"]
}, Open  ]],
Cell[8564, 237, 211, 4, 50, "Text"],
Cell[8778, 243, 204, 5, 32, "Input",
 Evaluatable->False],
Cell[8985, 250, 197, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[9207, 259, 56, 0, 35, "Subsubsection"],
Cell[9266, 261, 1338, 21, 157, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[10653, 288, 162, 7, 37, "Subsection"],
Cell[10818, 297, 296, 9, 51, "Text"],
Cell[11117, 308, 2915, 57, 114, "Text"],
Cell[14035, 367, 386, 13, 37, "Input",
 Evaluatable->False],
Cell[14424, 382, 545, 8, 71, "Text"],
Cell[14972, 392, 388, 6, 51, "Text"],
Cell[15363, 400, 1815, 47, 187, "Input",
 Evaluatable->False],
Cell[17181, 449, 137, 3, 32, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[17355, 457, 154, 7, 37, "Subsection"],
Cell[17512, 466, 1102, 27, 110, "Text"],
Cell[CellGroupData[{
Cell[18639, 497, 76, 0, 35, "Subsubsection"],
Cell[18718, 499, 270, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[19013, 508, 125, 3, 55, "Input",
 Evaluatable->False],
Cell[19141, 513, 787, 19, 77, "Output"]
}, Open  ]],
Cell[19943, 535, 132, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[20100, 542, 286, 9, 32, "Input",
 Evaluatable->False],
Cell[20389, 553, 1336, 36, 99, "Output"]
}, Open  ]],
Cell[21740, 592, 513, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[22278, 604, 333, 10, 32, "Input",
 Evaluatable->False],
Cell[22614, 616, 397, 10, 55, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[23072, 633, 134, 7, 37, "Subsection"],
Cell[23209, 642, 115, 3, 31, "Text"],
Cell[23327, 647, 682, 12, 111, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24058, 665, 76, 4, 65, "Section"],
Cell[CellGroupData[{
Cell[24159, 673, 115, 7, 45, "Subsection"],
Cell[24277, 682, 508, 9, 99, "Text"],
Cell[24788, 693, 524, 14, 77, "Input"],
Cell[25315, 709, 110, 3, 32, "Input"],
Cell[25428, 714, 728, 20, 121, "Input"],
Cell[26159, 736, 3393, 92, 385, "Input"],
Cell[29555, 830, 1109, 30, 99, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30701, 865, 136, 7, 45, "Subsection"],
Cell[30840, 874, 250, 6, 32, "Input"],
Cell[31093, 882, 30, 0, 33, "Text"],
Cell[31126, 884, 222, 5, 32, "Input"],
Cell[31351, 891, 239, 5, 55, "Input"],
Cell[31593, 898, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[31696, 904, 196, 10, 35, "Subsubsection"],
Cell[31895, 916, 279, 7, 51, "Text"],
Cell[32177, 925, 1228, 31, 187, "Input"],
Cell[33408, 958, 713, 14, 110, "Text"],
Cell[34124, 974, 580, 12, 71, "Text"],
Cell[34707, 988, 665, 14, 71, "Text"],
Cell[35375, 1004, 333, 8, 51, "Text"],
Cell[35711, 1014, 320, 8, 51, "Text"],
Cell[36034, 1024, 256, 6, 31, "Text"],
Cell[36293, 1032, 966, 19, 111, "Text"],
Cell[37262, 1053, 475, 10, 69, "Text"],
Cell[37740, 1065, 735, 19, 77, "Input"],
Cell[38478, 1086, 878, 23, 143, "Input"],
Cell[39359, 1111, 367, 8, 69, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39775, 1125, 127, 7, 45, "Subsection"],
Cell[39905, 1134, 641, 14, 110, "Text"],
Cell[CellGroupData[{
Cell[40571, 1152, 184, 10, 35, "Subsubsection"],
Cell[40758, 1164, 252, 6, 51, "Text"],
Cell[41013, 1172, 624, 18, 55, "Input"],
Cell[41640, 1192, 50, 0, 31, "Text"],
Cell[41693, 1194, 1099, 30, 99, "Input"],
Cell[42795, 1226, 267, 6, 31, "Text"],
Cell[43065, 1234, 334, 9, 32, "Input"],
Cell[43402, 1245, 278, 7, 31, "Text"],
Cell[43683, 1254, 1288, 35, 209, "Input"],
Cell[44974, 1291, 95, 2, 31, "Text"],
Cell[45072, 1295, 357, 9, 32, "Input",
 Evaluatable->False],
Cell[45432, 1306, 185, 5, 32, "Input"],
Cell[45620, 1313, 76, 2, 32, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[45745, 1321, 108, 7, 36, "Subsection"],
Cell[45856, 1330, 274, 5, 70, "Text"],
Cell[46133, 1337, 294, 7, 51, "Text"],
Cell[46430, 1346, 90, 2, 32, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46569, 1354, 111, 4, 65, "Section"],
Cell[46683, 1360, 776, 14, 99, "Input"],
Cell[47462, 1376, 326, 7, 55, "Input"],
Cell[47791, 1385, 30, 0, 33, "Text"],
Cell[47824, 1387, 403, 8, 99, "Input"],
Cell[48230, 1397, 395, 10, 77, "Input"],
Cell[48628, 1409, 300, 6, 77, "Input"],
Cell[48931, 1417, 293, 6, 77, "Input"],
Cell[49227, 1425, 412, 8, 99, "Input"],
Cell[49642, 1435, 257, 6, 77, "Input"],
Cell[49902, 1443, 1409, 22, 297, "Input"],
Cell[51314, 1467, 272, 6, 77, "Input"],
Cell[51589, 1475, 271, 6, 77, "Input"],
Cell[51863, 1483, 345, 8, 77, "Input"],
Cell[52211, 1493, 272, 6, 77, "Input"],
Cell[52486, 1501, 295, 6, 77, "Input"],
Cell[52784, 1509, 258, 6, 77, "Input"],
Cell[53045, 1517, 592, 10, 121, "Input"],
Cell[53640, 1529, 122, 4, 32, "Input"],
Cell[53765, 1535, 796, 14, 187, "Input"],
Cell[54564, 1551, 181, 5, 32, "Input"],
Cell[54748, 1558, 162, 4, 32, "Input"],
Cell[54913, 1564, 177, 5, 32, "Input"],
Cell[55093, 1571, 321, 7, 77, "Input"],
Cell[55417, 1580, 382, 7, 77, "Input"],
Cell[55802, 1589, 298, 6, 77, "Input"],
Cell[56103, 1597, 359, 7, 77, "Input"],
Cell[56465, 1606, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[56568, 1612, 127, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[56720, 1623, 155, 10, 35, "Subsubsection"],
Cell[56878, 1635, 255, 5, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[57136, 1642, 650, 18, 55, "Input",
 Evaluatable->False],
Cell[57789, 1662, 39, 0, 31, "Text"],
Cell[57831, 1664, 103, 3, 32, "Input"],
Cell[57937, 1669, 134, 5, 31, "Text"],
Cell[58074, 1676, 1518, 40, 165, "Input"],
Cell[59595, 1718, 1332, 22, 151, "Text"],
Cell[60930, 1742, 5558, 146, 583, "Input"],
Cell[66491, 1890, 159, 3, 31, "Text"],
Cell[66653, 1895, 484, 13, 55, "Input"],
Cell[67140, 1910, 2237, 60, 253, "Input"],
Cell[69380, 1972, 143, 5, 31, "Text"],
Cell[69526, 1979, 435, 7, 71, "Text"],
Cell[69964, 1988, 497, 11, 121, "Input"],
Cell[70464, 2001, 2912, 78, 275, "Input"],
Cell[73379, 2081, 320, 9, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[73736, 2095, 174, 11, 29, "Subsubsection"],
Cell[73913, 2108, 158, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[74074, 2114, 210, 7, 32, "Input",
 CellID->1126827235],
Cell[74287, 2123, 115, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[74405, 2126, 2626, 69, 165, "Input"],
Cell[77034, 2197, 671, 19, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[77708, 2218, 253, 4, 51, "Text"],
Cell[77964, 2224, 617, 10, 91, "Text"],
Cell[78584, 2236, 4961, 122, 451, "Input"],
Cell[83548, 2360, 123, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[83674, 2363, 2043, 60, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[85754, 2428, 221, 11, 29, "Subsubsection"],
Cell[85978, 2441, 511, 13, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[86492, 2456, 2846, 73, 187, "Input"],
Cell[89341, 2531, 105, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[89449, 2534, 2748, 68, 209, "Input"],
Cell[92200, 2604, 247, 6, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[92450, 2612, 6358, 151, 451, "Input"],
Cell[98811, 2765, 527, 10, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[99341, 2777, 888, 26, 99, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[100266, 2808, 212, 11, 29, "Subsubsection"],
Cell[100481, 2821, 67, 0, 33, "Text"],
Cell[100551, 2823, 2465, 67, 253, "Input"],
Cell[103019, 2892, 146, 7, 34, "Text"],
Cell[103168, 2901, 564, 12, 78, "Text"],
Cell[103735, 2915, 267, 6, 77, "Input"],
Cell[104005, 2923, 19369, 408, 1293, "Input"],
Cell[123377, 3333, 270, 5, 55, "Text"],
Cell[123650, 3340, 20332, 429, 1315, "Input",
 Evaluatable->False]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[144031, 3775, 126, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[144182, 3786, 167, 10, 35, "Subsubsection"],
Cell[144352, 3798, 220, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[144575, 3804, 534, 16, 55, "Input",
 Evaluatable->False],
Cell[145112, 3822, 1703, 46, 121, "Input"],
Cell[146818, 3870, 465, 15, 52, "Text"],
Cell[147286, 3887, 1160, 34, 99, "Input",
 Evaluatable->False],
Cell[148449, 3923, 746, 13, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[149198, 3938, 4136, 102, 363, "Input"],
Cell[153337, 4042, 472, 15, 52, "Text"],
Cell[153812, 4059, 1162, 34, 99, "Input",
 Evaluatable->False],
Cell[154977, 4095, 746, 13, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[155726, 4110, 4212, 104, 363, "Input"],
Cell[159941, 4216, 472, 15, 52, "Text"],
Cell[160416, 4233, 1162, 34, 99, "Input",
 Evaluatable->False],
Cell[161581, 4269, 4052, 101, 341, "Input"],
Cell[165636, 4372, 476, 15, 52, "Text"],
Cell[166115, 4389, 1189, 34, 99, "Input",
 Evaluatable->False],
Cell[167307, 4425, 746, 13, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[168056, 4440, 4221, 104, 363, "Input"],
Cell[172280, 4546, 127, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[172410, 4549, 707, 19, 77, "Input",
 Evaluatable->False],
Cell[173120, 4570, 633, 11, 71, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[173756, 4583, 16125, 395, 1141, "Input"],
Cell[189884, 4980, 143, 3, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[190030, 4985, 681, 18, 55, "Input",
 Evaluatable->False],
Cell[190714, 5005, 16103, 395, 1141, "Input"],
Cell[206820, 5402, 784, 14, 71, "Text"],
Cell[207607, 5418, 124, 3, 31, "Text"],
Cell[207734, 5423, 92, 2, 31, "Text"],
Cell[207829, 5427, 2669, 57, 363, "Input"],
Cell[210501, 5486, 3060, 73, 319, "Input"],
Cell[213564, 5561, 2946, 78, 320, "Input"],
Cell[216513, 5641, 1397, 39, 121, "Input"],
Cell[217913, 5682, 1398, 39, 121, "Input"],
Cell[219314, 5723, 774, 16, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[220091, 5741, 877, 24, 99, "Input"],
Cell[220971, 5767, 1541, 42, 122, "Input"],
Cell[222515, 5811, 2263, 59, 188, "Input",
 Evaluatable->False],
Cell[224781, 5872, 753, 15, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[225537, 5889, 886, 25, 99, "Input"],
Cell[226426, 5916, 1523, 42, 122, "Input"],
Cell[227952, 5960, 2244, 59, 166, "Input",
 Evaluatable->False],
Cell[230199, 6021, 223, 7, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[230425, 6030, 707, 20, 55, "Input"],
Cell[231135, 6052, 1293, 34, 122, "Input"],
Cell[232431, 6088, 137, 3, 31, "Text"],
Cell[232571, 6093, 1843, 51, 144, "Input"],
Cell[234417, 6146, 489, 11, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[234909, 6159, 1233, 35, 99, "Input"],
Cell[236145, 6196, 279, 8, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[236427, 6206, 817, 25, 77, "Input"],
Cell[237247, 6233, 104, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[237354, 6236, 3882, 99, 341, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[241273, 6340, 189, 10, 29, "Subsubsection"],
Cell[241465, 6352, 315, 8, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[241783, 6362, 25343, 602, 2431, "Input"],
Cell[267129, 6966, 424, 13, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[267556, 6981, 2340, 61, 297, "Input"],
Cell[269899, 7044, 184, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[270086, 7050, 1330, 37, 143, "Input"],
Cell[271419, 7089, 147, 3, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[271569, 7094, 191, 6, 32, "Input"],
Cell[271763, 7102, 374, 12, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[272174, 7119, 166, 10, 29, "Subsubsection"],
Cell[272343, 7131, 346, 6, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[272692, 7139, 236, 4, 51, "Text"],
Cell[272931, 7145, 468, 9, 52, "Text"],
Cell[273402, 7156, 56, 0, 31, "Text"],
Cell[273461, 7158, 4820, 132, 407, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[278318, 7295, 190, 10, 29, "Subsubsection"],
Cell[278511, 7307, 830, 12, 111, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[279344, 7321, 2434, 66, 166, "Input"],
Cell[281781, 7389, 100, 1, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[281884, 7392, 1078, 31, 101, "Input"],
Cell[282965, 7425, 218, 4, 31, "Text"],
Cell[283186, 7431, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[283323, 7440, 85, 4, 65, "Section"],
Cell[283411, 7446, 1252, 24, 143, "Input"],
Cell[284666, 7472, 326, 7, 55, "Input"],
Cell[284995, 7481, 30, 0, 33, "Text"],
Cell[285028, 7483, 137, 5, 33, "Text"],
Cell[285168, 7490, 491, 11, 55, "Text"],
Cell[285662, 7503, 207, 5, 32, "Input"],
Cell[285872, 7510, 201, 5, 32, "Input"],
Cell[286076, 7517, 202, 5, 32, "Input"],
Cell[286281, 7524, 192, 5, 32, "Input"],
Cell[286476, 7531, 409, 8, 99, "Input"],
Cell[286888, 7541, 311, 11, 33, "Text"],
Cell[287202, 7554, 825, 13, 166, "Input"],
Cell[288030, 7569, 133, 4, 32, "Input"],
Cell[288166, 7575, 925, 20, 144, "Input"],
Cell[289094, 7597, 129, 4, 32, "Input"],
Cell[289226, 7603, 997, 19, 166, "Input"],
Cell[290226, 7624, 129, 4, 32, "Input"],
Cell[290358, 7630, 203, 6, 55, "Text"],
Cell[290564, 7638, 1020, 20, 167, "Input"],
Cell[291587, 7660, 129, 4, 32, "Input"],
Cell[291719, 7666, 1024, 20, 189, "Input"],
Cell[292746, 7688, 130, 4, 32, "Input"],
Cell[292879, 7694, 1008, 20, 166, "Input"],
Cell[293890, 7716, 129, 4, 32, "Input"],
Cell[294022, 7722, 139, 3, 33, "Text"],
Cell[294164, 7727, 276, 7, 77, "Input",
 Evaluatable->False],
Cell[294443, 7736, 304, 7, 77, "Input",
 Evaluatable->False],
Cell[294750, 7745, 406, 8, 99, "Input",
 Evaluatable->False],
Cell[295159, 7755, 368, 8, 77, "Input",
 Evaluatable->False],
Cell[295530, 7765, 256, 6, 55, "Input",
 Evaluatable->False],
Cell[295789, 7773, 43, 0, 33, "Text"],
Cell[295835, 7775, 2230, 37, 495, "Input"],
Cell[298068, 7814, 1589, 26, 341, "Input"],
Cell[299660, 7842, 139, 4, 32, "Input"],
Cell[299802, 7848, 176, 5, 32, "Input"],
Cell[299981, 7855, 255, 6, 32, "Input"],
Cell[300239, 7863, 279, 6, 77, "Input"],
Cell[300521, 7871, 241, 6, 32, "Input"],
Cell[300765, 7879, 276, 6, 77, "Input"],
Cell[301044, 7887, 298, 6, 77, "Input"],
Cell[301345, 7895, 286, 6, 77, "Input"],
Cell[301634, 7903, 769, 17, 143, "Input"],
Cell[302406, 7922, 735, 19, 143, "Input"],
Cell[303144, 7943, 340, 7, 77, "Input"],
Cell[303487, 7952, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[303590, 7958, 171, 7, 45, "Subsection"],
Cell[303764, 7967, 219, 8, 34, "Text"],
Cell[303986, 7977, 1152, 40, 103, "Text"],
Cell[305141, 8019, 1960, 57, 231, "Input"],
Cell[307104, 8078, 61, 0, 33, "Text"],
Cell[307168, 8080, 1285, 36, 99, "Input"],
Cell[308456, 8118, 61, 0, 33, "Text"],
Cell[308520, 8120, 178, 5, 32, "Input"],
Cell[308701, 8127, 518, 15, 79, "Text"],
Cell[309222, 8144, 989, 29, 100, "Input"],
Cell[310214, 8175, 288, 8, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[310539, 8188, 148, 7, 37, "Subsection"],
Cell[CellGroupData[{
Cell[310712, 8199, 178, 10, 35, "Subsubsection"],
Cell[310893, 8211, 202, 4, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[311098, 8217, 2928, 83, 256, "Input"],
Cell[314029, 8302, 115, 1, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[314147, 8305, 319, 9, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[314503, 8319, 163, 10, 29, "Subsubsection"],
Cell[314669, 8331, 426, 12, 57, "Text"],
Cell[315098, 8345, 310, 10, 57, "Text"],
Cell[315411, 8357, 175, 3, 33, "Text"],
Cell[315589, 8362, 746, 22, 55, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[316372, 8389, 195, 10, 29, "Subsubsection"],
Cell[316570, 8401, 33, 0, 33, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[316652, 8407, 140, 7, 45, "Subsection"],
Cell[316795, 8416, 168, 5, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[CellGroupData[{
Cell[316988, 8425, 215, 13, 35, "Subsubsection"],
Cell[317206, 8440, 241, 7, 31, "Text"],
Cell[317450, 8449, 3004, 77, 319, "Input"],
Cell[320457, 8528, 205, 4, 51, "Text"],
Cell[320665, 8534, 5441, 145, 478, "Input"],
Cell[326109, 8681, 47, 0, 31, "Text"],
Cell[326159, 8683, 346, 13, 34, "Input"],
Cell[326508, 8698, 1011, 29, 100, "Input"],
Cell[327522, 8729, 70, 0, 31, "Text"],
Cell[327595, 8731, 501, 16, 32, "Input"],
Cell[328099, 8749, 1193, 37, 55, "Input"],
Cell[329295, 8788, 151, 3, 31, "Text"],
Cell[329449, 8793, 1990, 56, 143, "Input"],
Cell[331442, 8851, 2283, 62, 232, "Input"],
Cell[333728, 8915, 51, 0, 31, "Text"],
Cell[333782, 8917, 530, 16, 32, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[334361, 8939, 200, 8, 45, "Subsection"],
Cell[334564, 8949, 648, 12, 112, "Text"],
Cell[335215, 8963, 486, 12, 143, "Input"],
Cell[CellGroupData[{
Cell[335726, 8979, 157, 10, 35, "Subsubsection"],
Cell[335886, 8991, 5442, 170, 391, "Input"],
Cell[341331, 9163, 637, 14, 71, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[342005, 9182, 151, 10, 35, "Subsubsection"],
Cell[342159, 9194, 1215, 26, 174, "Text"],
Cell[343377, 9222, 58, 0, 31, "Text"],
Cell[343438, 9224, 6742, 198, 583, "Input"],
Cell[350183, 9424, 56, 0, 31, "Text"],
Cell[350242, 9426, 4023, 115, 287, "Input"],
Cell[354268, 9543, 3791, 112, 287, "Input"],
Cell[358062, 9657, 3707, 112, 275, "Input"],
Cell[361772, 9771, 3585, 108, 275, "Input"],
Cell[365360, 9881, 3648, 108, 275, "Input"],
Cell[369011, 9991, 3064, 90, 187, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[372124, 10087, 225, 9, 37, "Subsection"],
Cell[372352, 10098, 248, 8, 31, "Text"],
Cell[372603, 10108, 1997, 54, 165, "Input"],
Cell[374603, 10164, 464, 15, 51, "Text"],
Cell[375070, 10181, 948, 20, 112, "Text"],
Cell[376021, 10203, 2355, 65, 187, "Input"],
Cell[378379, 10270, 214, 5, 31, "Text"],
Cell[378596, 10277, 623, 21, 54, "Text"],
Cell[379222, 10300, 164, 5, 31, "Text"],
Cell[379389, 10307, 2230, 67, 165, "Input"],
Cell[381622, 10376, 2223, 67, 165, "Input"],
Cell[383848, 10445, 294, 10, 31, "Text"],
Cell[384145, 10457, 1539, 46, 99, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[385721, 10508, 148, 8, 36, "Subsection"],
Cell[385872, 10518, 200, 6, 31, "Text"],
Cell[386075, 10526, 182, 5, 32, "Input"],
Cell[386260, 10533, 757, 23, 77, "Input"],
Cell[387020, 10558, 613, 18, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[387670, 10581, 184, 8, 37, "Subsection"],
Cell[CellGroupData[{
Cell[387879, 10593, 256, 11, 35, "Subsubsection"],
Cell[388138, 10606, 144, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[388307, 10613, 125, 3, 55, "Input",
 Evaluatable->False],
Cell[388435, 10618, 787, 19, 77, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[389259, 10642, 408, 12, 55, "Input",
 Evaluatable->False],
Cell[389670, 10656, 769, 12, 138, "Print"],
Cell[390442, 10670, 12412, 276, 65, "Output"]
}, Open  ]],
Cell[402869, 10949, 433, 14, 55, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[403339, 10968, 166, 10, 29, "Subsubsection"],
Cell[403508, 10980, 251, 4, 55, "Text"],
Cell[403762, 10986, 2838, 76, 231, "Input"],
Cell[406603, 11064, 133, 3, 33, "Text"],
Cell[406739, 11069, 3181, 85, 253, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[409957, 11159, 287, 14, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[410269, 11177, 143, 3, 31, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[410415, 11182, 206, 4, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[410624, 11188, 568, 9, 77, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[411195, 11199, 347, 6, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[411545, 11207, 746, 13, 77, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[412294, 11222, 9615, 254, 671, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[421946, 11481, 127, 1, 31, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[422076, 11484, 374, 6, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[422453, 11492, 5857, 159, 451, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]],
Cell[CellGroupData[{
Cell[428347, 11656, 143, 3, 27, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[428493, 11661, 402, 7, 77, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[428898, 11670, 5244, 144, 429, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],
Cell[CellGroupData[{
Cell[434179, 11819, 156, 4, 27, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[434338, 11825, 178, 4, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[434519, 11831, 1301, 38, 77, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[435823, 11871, 1302, 38, 77, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[437128, 11911, 285, 5, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}],
Cell[437416, 11918, 2580, 74, 121, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10004.}]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[440045, 11998, 174, 10, 29, "Subsubsection"],
Cell[440222, 12010, 450, 9, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[440675, 12021, 396, 11, 32, "Input"],
Cell[441074, 12034, 532, 16, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[441609, 12052, 816, 24, 55, "Input"],
Cell[442428, 12078, 827, 26, 55, "Input"],
Cell[443258, 12106, 353, 8, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[443614, 12116, 1323, 38, 121, "Input"],
Cell[444940, 12156, 109, 1, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[445052, 12159, 502, 15, 32, "Input"],
Cell[445557, 12176, 174, 4, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[445734, 12182, 961, 28, 77, "Input"],
Cell[446698, 12212, 963, 28, 77, "Input"],
Cell[447664, 12242, 150, 3, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[447817, 12247, 508, 14, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[448362, 12266, 180, 10, 29, "Subsubsection"],
Cell[448545, 12278, 193, 6, 33, "Text"],
Cell[448741, 12286, 593, 9, 99, "Text"],
Cell[449337, 12297, 1910, 49, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[451284, 12351, 176, 10, 29, "Subsubsection"],
Cell[451463, 12363, 246, 7, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[451712, 12372, 1796, 47, 165, "Input"],
Cell[453511, 12421, 26, 0, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[453574, 12426, 203, 10, 29, "Subsubsection"],
Cell[453780, 12438, 50, 0, 30, "Text"],
Cell[453833, 12440, 323, 6, 51, "Text"],
Cell[454159, 12448, 1213, 33, 121, "Input"],
Cell[455375, 12483, 51, 0, 31, "Text"],
Cell[455429, 12485, 1168, 32, 99, "Input"],
Cell[456600, 12519, 56, 0, 31, "Text"],
Cell[456659, 12521, 1567, 43, 121, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[458275, 12570, 153, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[458453, 12581, 283, 13, 35, "Subsubsection"],
Cell[458739, 12596, 428, 7, 71, "Text"],
Cell[459170, 12605, 1011, 29, 91, "Text"],
Cell[460184, 12636, 20955, 489, 1995, "Input"],
Cell[481142, 13127, 106, 4, 31, "Text"],
Cell[481251, 13133, 1775, 49, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[483063, 13187, 263, 12, 29, "Subsubsection"],
Cell[483329, 13201, 725, 12, 77, "Text"],
Cell[484057, 13215, 224, 4, 55, "Text"],
Cell[484284, 13221, 11788, 269, 958, "Input"],
Cell[496075, 13492, 135, 3, 33, "Text"],
Cell[496213, 13497, 5396, 131, 474, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[501646, 13633, 260, 11, 29, "Subsubsection"],
Cell[501909, 13646, 61, 0, 31, "Text"],
Cell[501973, 13648, 1088, 27, 100, "Input",
 Evaluatable->False],
Cell[503064, 13677, 461, 8, 71, "Text"],
Cell[503528, 13687, 3809, 96, 298, "Input"],
Cell[507340, 13785, 501, 8, 71, "Text"],
Cell[507844, 13795, 449, 14, 99, "Input"],
Cell[508296, 13811, 954, 14, 111, "Text"],
Cell[509253, 13827, 4461, 107, 459, "Input"],
Cell[513717, 13936, 193, 4, 31, "Text"],
Cell[513913, 13942, 1306, 20, 172, "Text"],
Cell[515222, 13964, 205, 6, 32, "Input"],
Cell[515430, 13972, 653, 13, 143, "Input"],
Cell[516086, 13987, 113, 3, 31, "Text"],
Cell[516202, 13992, 23985, 550, 1582, "Input"],
Cell[540190, 14544, 265, 5, 51, "Text"],
Cell[540458, 14551, 597, 15, 77, "Input"],
Cell[541058, 14568, 5922, 144, 429, "Input"],
Cell[546983, 14714, 224, 4, 51, "Text"],
Cell[547210, 14720, 306, 10, 32, "Input"],
Cell[547519, 14732, 465, 14, 55, "Input"],
Cell[547987, 14748, 392, 7, 51, "Text"],
Cell[548382, 14757, 1421, 40, 166, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[549840, 14802, 154, 10, 29, "Subsubsection"],
Cell[549997, 14814, 182, 5, 31, "Text"],
Cell[550182, 14821, 1292, 34, 143, "Input"],
Cell[551477, 14857, 1517, 38, 187, "Input"],
Cell[552997, 14897, 471, 12, 51, "Text"],
Cell[553471, 14911, 1327, 35, 121, "Input"],
Cell[554801, 14948, 1505, 38, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[556343, 14991, 173, 10, 29, "Subsubsection"],
Cell[556519, 15003, 252, 4, 51, "Text"],
Cell[556774, 15009, 7627, 177, 605, "Input"],
Cell[564404, 15188, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[564541, 15197, 120, 4, 65, "Section"],
Cell[564664, 15203, 31, 0, 33, "Text"],
Cell[564698, 15205, 273, 7, 32, "Input"],
Cell[564974, 15214, 326, 7, 55, "Input"],
Cell[565303, 15223, 30, 0, 33, "Text"],
Cell[565336, 15225, 528, 9, 99, "Input"],
Cell[565867, 15236, 636, 11, 143, "Input"],
Cell[566506, 15249, 489, 9, 99, "Input"],
Cell[566998, 15260, 501, 9, 121, "Input"],
Cell[567502, 15271, 510, 9, 121, "Input"],
Cell[568015, 15282, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[568118, 15288, 128, 7, 45, "Subsection"],
Cell[568249, 15297, 18, 0, 33, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568304, 15302, 120, 7, 45, "Subsection"],
Cell[568427, 15311, 389, 9, 33, "Text"],
Cell[568819, 15322, 1486, 38, 99, "Input"],
Cell[570308, 15362, 4181, 91, 255, "Input"],
Cell[574492, 15455, 5086, 117, 519, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[579615, 15577, 154, 7, 37, "Subsection"],
Cell[579772, 15586, 2215, 38, 167, "Text"],
Cell[581990, 15626, 1021, 31, 99, "Input"],
Cell[583014, 15659, 1082, 32, 165, "Input"],
Cell[584099, 15693, 1191, 34, 144, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[585327, 15732, 111, 7, 36, "Subsection"],
Cell[585441, 15741, 76, 2, 32, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[585566, 15749, 116, 4, 65, "Section"],
Cell[585685, 15755, 1322, 21, 187, "Input"],
Cell[587010, 15778, 326, 7, 99, "Input"],
Cell[587339, 15787, 133, 3, 33, "Text"],
Cell[587475, 15792, 185, 5, 32, "Input"],
Cell[587663, 15799, 203, 5, 32, "Input"],
Cell[587869, 15806, 200, 5, 32, "Input"],
Cell[588072, 15813, 517, 9, 121, "Input"],
Cell[588592, 15824, 371, 7, 99, "Input"],
Cell[588966, 15833, 397, 8, 99, "Input"],
Cell[589366, 15843, 289, 6, 77, "Input"],
Cell[589658, 15851, 267, 6, 77, "Input"],
Cell[589928, 15859, 368, 7, 99, "Input"],
Cell[590299, 15868, 158, 4, 32, "Input"],
Cell[590460, 15874, 427, 10, 77, "Input"],
Cell[590890, 15886, 994, 19, 253, "Input"],
Cell[591887, 15907, 759, 15, 187, "Input"],
Cell[592649, 15924, 434, 10, 99, "Input"],
Cell[593086, 15936, 441, 10, 99, "Input"],
Cell[593530, 15948, 447, 10, 99, "Input"],
Cell[593980, 15960, 441, 10, 99, "Input"],
Cell[594424, 15972, 447, 10, 99, "Input"],
Cell[594874, 15984, 443, 10, 99, "Input"],
Cell[595320, 15996, 446, 10, 99, "Input"],
Cell[595769, 16008, 358, 10, 55, "Input"],
Cell[596130, 16020, 404, 10, 99, "Input"],
Cell[596537, 16032, 1265, 24, 253, "Input"],
Cell[597805, 16058, 421, 10, 77, "Input"],
Cell[598229, 16070, 1309, 28, 275, "Input"],
Cell[599541, 16100, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[599644, 16106, 115, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[599784, 16117, 155, 10, 35, "Subsubsection"],
Cell[599942, 16129, 129, 4, 31, "Text"],
Cell[600074, 16135, 2747, 74, 211, "Input"],
Cell[602824, 16211, 425, 11, 51, "Text"],
Cell[603252, 16224, 1363, 42, 166, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[604652, 16271, 169, 10, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[604846, 16285, 167, 5, 32, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[605016, 16292, 352, 10, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[605371, 16304, 155, 3, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[605529, 16309, 1579, 43, 143, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[607111, 16354, 218, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[607332, 16360, 1956, 50, 210, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[609325, 16415, 339, 11, 28, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[609667, 16428, 155, 3, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[609825, 16433, 2195, 55, 253, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[612023, 16490, 1576, 44, 208, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[613602, 16536, 101, 1, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[613706, 16539, 465, 14, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[614174, 16555, 129, 1, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[614306, 16558, 1798, 45, 209, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[616107, 16605, 1013, 33, 91, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[617123, 16640, 400, 12, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[617526, 16654, 371, 11, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[617900, 16667, 420, 12, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[618357, 16684, 384, 14, 28, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[618744, 16700, 176, 4, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[618923, 16706, 239, 5, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[619165, 16713, 655, 19, 55, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[619823, 16734, 981, 27, 77, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[620807, 16763, 613, 18, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[621423, 16783, 3173, 83, 212, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[624599, 16868, 151, 3, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[624753, 16873, 2111, 52, 253, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[626867, 16927, 102, 1, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}],
Cell[626972, 16930, 428, 12, 32, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10003.}]
}, Closed]],
Cell[CellGroupData[{
Cell[627437, 16947, 201, 4, 27, "Item",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[627641, 16953, 242, 5, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[627886, 16960, 10477, 248, 891, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[638424, 17215, 107, 7, 44, "Subsection"],
Cell[CellGroupData[{
Cell[638556, 17226, 163, 10, 35, "Subsubsection"],
Cell[638722, 17238, 292, 9, 56, "Text"],
Cell[639017, 17249, 126, 3, 32, "Input"],
Cell[639146, 17254, 317, 6, 77, "Input"],
Cell[639466, 17262, 3153, 87, 233, "Input"],
Cell[642622, 17351, 734, 26, 79, "Text"],
Cell[643359, 17379, 401, 12, 32, "Input"],
Cell[643763, 17393, 660, 20, 32, "Input"],
Cell[644426, 17415, 153, 4, 34, "Text"],
Cell[644582, 17421, 1445, 38, 143, "Input"],
Cell[646030, 17461, 173, 5, 34, "Text"],
Cell[646206, 17468, 845, 25, 55, "Input"],
Cell[647054, 17495, 867, 25, 55, "Input"],
Cell[647924, 17522, 349, 11, 56, "Text"],
Cell[648276, 17535, 2987, 77, 253, "Input"],
Cell[651266, 17614, 160, 5, 34, "Text"],
Cell[651429, 17621, 1282, 41, 165, "Input"],
Cell[652714, 17664, 8709, 259, 634, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[661472, 17929, 166, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[661663, 17940, 155, 10, 35, "Subsubsection"],
Cell[661821, 17952, 60, 0, 33, "Text"],
Cell[661884, 17954, 2882, 77, 231, "Input"],
Cell[664769, 18033, 230, 6, 34, "Text"],
Cell[665002, 18041, 2882, 77, 189, "Input",
 Evaluatable->False],
Cell[667887, 18120, 3053, 81, 189, "Input",
 Evaluatable->False],
Cell[670943, 18203, 53, 0, 33, "Text"],
Cell[670999, 18205, 3276, 88, 253, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[674312, 18298, 158, 10, 29, "Subsubsection"],
Cell[674473, 18310, 375, 6, 77, "Text"],
Cell[674851, 18318, 1613, 45, 123, "Input"],
Cell[676467, 18365, 284, 5, 55, "Text"],
Cell[676754, 18372, 158, 4, 32, "Input",
 Evaluatable->False],
Cell[676915, 18378, 42, 0, 33, "Text"],
Cell[676960, 18380, 176, 5, 32, "Input"],
Cell[677139, 18387, 428, 9, 56, "Text"],
Cell[677570, 18398, 3622, 114, 187, "Input"],
Cell[681195, 18514, 506, 16, 55, "Text"],
Cell[681704, 18532, 4399, 112, 407, "Input"],
Cell[686106, 18646, 69, 0, 33, "Text"],
Cell[686178, 18648, 465, 14, 32, "Input"],
Cell[686646, 18664, 2418, 70, 143, "Input"],
Cell[689067, 18736, 1858, 51, 165, "Input"],
Cell[690928, 18789, 1920, 53, 165, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[692885, 18847, 151, 10, 29, "Subsubsection"],
Cell[693039, 18859, 474, 10, 78, "Text"],
Cell[693516, 18871, 2565, 73, 121, "Input"],
Cell[696084, 18946, 1309, 39, 77, "Input"],
Cell[697396, 18987, 307, 5, 55, "Text"],
Cell[697706, 18994, 10860, 260, 759, "Input"],
Cell[708569, 19256, 698, 18, 143, "Input"],
Cell[709270, 19276, 397, 8, 78, "Text"],
Cell[709670, 19286, 2782, 75, 209, "Input"],
Cell[712455, 19363, 171, 3, 33, "Text"],
Cell[712629, 19368, 7331, 170, 650, "Input"],
Cell[719963, 19540, 109, 3, 32, "Input"],
Cell[720075, 19545, 96, 2, 33, "Text"],
Cell[720174, 19549, 1054, 33, 55, "Input"],
Cell[721231, 19584, 2720, 67, 209, "Input"],
Cell[723954, 19653, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[724091, 19662, 117, 4, 65, "Section"],
Cell[724211, 19668, 563, 11, 99, "Input"],
Cell[724777, 19681, 326, 7, 99, "Input"],
Cell[725106, 19690, 372, 7, 99, "Input"],
Cell[725481, 19699, 221, 5, 32, "Input"],
Cell[725705, 19706, 1990, 35, 429, "Input"],
Cell[727698, 19743, 417, 8, 99, "Input"],
Cell[728118, 19753, 412, 8, 77, "Input"],
Cell[728533, 19763, 2001, 41, 429, "Input"],
Cell[730537, 19806, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[730640, 19812, 111, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[730776, 19823, 155, 10, 35, "Subsubsection"],
Cell[730934, 19835, 553, 11, 71, "Text"],
Cell[731490, 19848, 1396, 38, 99, "Input"],
Cell[732889, 19888, 440, 8, 71, "Text"],
Cell[733332, 19898, 838, 23, 77, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[734207, 19926, 193, 10, 29, "Subsubsection"],
Cell[734403, 19938, 552, 17, 71, "Text"],
Cell[734958, 19957, 3313, 88, 231, "Input"],
Cell[738274, 20047, 512, 8, 71, "Text"],
Cell[738789, 20057, 2639, 78, 209, "Input"],
Cell[741431, 20137, 505, 11, 71, "Text"],
Cell[741939, 20150, 22220, 506, 2409, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[764208, 20662, 106, 7, 44, "Subsection"],
Cell[CellGroupData[{
Cell[764339, 20673, 155, 10, 35, "Subsubsection"],
Cell[764497, 20685, 187, 4, 31, "Text"],
Cell[764687, 20691, 1529, 33, 319, "Input"],
Cell[766219, 20726, 147, 3, 31, "Text"],
Cell[766369, 20731, 273, 8, 32, "Input"],
Cell[766645, 20741, 68, 0, 31, "Text"],
Cell[766716, 20743, 519, 16, 32, "Input"],
Cell[767238, 20761, 5175, 126, 451, "Input"],
Cell[772416, 20889, 137, 3, 31, "Text"],
Cell[772556, 20894, 288, 7, 32, "Input"],
Cell[772847, 20903, 11964, 277, 825, "Input"],
Cell[784814, 21182, 1046, 31, 77, "Input"],
Cell[785863, 21215, 815, 23, 78, "Input"],
Cell[786681, 21240, 1760, 55, 121, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[788478, 21300, 218, 11, 29, "Subsubsection"],
Cell[788699, 21313, 194, 5, 31, "Text"],
Cell[788896, 21320, 390, 10, 55, "Input"],
Cell[789289, 21332, 8262, 201, 1025, "Input"],
Cell[797554, 21535, 727, 17, 101, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[798318, 21557, 159, 10, 29, "Subsubsection"],
Cell[798480, 21569, 329, 8, 32, "Input"],
Cell[798812, 21579, 191, 4, 31, "Text"],
Cell[799006, 21585, 9293, 231, 1003, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[808336, 21821, 157, 10, 29, "Subsubsection"],
Cell[808496, 21833, 480, 13, 77, "Input"],
Cell[808979, 21848, 4520, 107, 563, "Input"],
Cell[813502, 21957, 752, 17, 101, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[814303, 21980, 107, 7, 45, "Subsection"],
Cell[814413, 21989, 991, 24, 99, "Input"],
Cell[815407, 22015, 180, 5, 32, "Input"],
Cell[815590, 22022, 21790, 511, 2828, "Input"],
Cell[837383, 22535, 76, 2, 32, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[837508, 22543, 114, 4, 51, "Section"],
Cell[837625, 22549, 930, 17, 143, "Input"],
Cell[838558, 22568, 326, 7, 99, "Input"],
Cell[838887, 22577, 193, 5, 32, "Input"],
Cell[839083, 22584, 295, 6, 77, "Input"],
Cell[839381, 22592, 689, 12, 165, "Input"],
Cell[840073, 22606, 300, 6, 77, "Input"],
Cell[840376, 22614, 3626, 72, 759, "Input"],
Cell[844005, 22688, 303, 7, 77, "Input"],
Cell[844311, 22697, 370, 7, 99, "Input"],
Cell[844684, 22706, 393, 7, 99, "Input"],
Cell[845080, 22715, 386, 7, 99, "Input"],
Cell[845469, 22724, 1543, 35, 275, "Input"],
Cell[847015, 22761, 207, 5, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[847225, 22768, 78, 2, 32, "Input"],
Cell[847306, 22772, 296, 5, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[CellGroupData[{
Cell[847627, 22781, 146, 7, 45, "Subsection"],
Cell[847776, 22790, 182, 4, 33, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[847961, 22796, 2539, 59, 253, "Input"],
Cell[850503, 22857, 1279, 30, 99, "Input"],
Cell[851785, 22889, 316, 8, 32, "Input"],
Cell[852104, 22899, 4937, 117, 541, "Input"],
Cell[857044, 23018, 129, 3, 33, "Text"],
Cell[857176, 23023, 8613, 205, 825, "Input"],
Cell[865792, 23230, 92, 1, 33, "Text"],
Cell[865887, 23233, 562, 12, 121, "Input"],
Cell[866452, 23247, 116, 1, 33, "Text"],
Cell[866571, 23250, 261, 5, 55, "Input"],
Cell[866835, 23257, 2049, 40, 407, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[868921, 23302, 149, 7, 45, "Subsection"],
Cell[869073, 23311, 280, 5, 55, "Text"],
Cell[869356, 23318, 891, 26, 77, "Input"],
Cell[870250, 23346, 2847, 79, 143, "Input"],
Cell[873100, 23427, 46028, 1017, 5252, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[919165, 24449, 152, 7, 37, "Subsection"],
Cell[CellGroupData[{
Cell[919342, 24460, 155, 10, 35, "Subsubsection"],
Cell[919500, 24472, 741, 19, 91, "Text"],
Cell[920244, 24493, 180, 5, 32, "Input"],
Cell[920427, 24500, 237, 6, 31, "Text"],
Cell[920667, 24508, 3242, 83, 341, "Input"],
Cell[923912, 24593, 91, 1, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[924006, 24596, 698, 21, 55, "Input"],
Cell[924707, 24619, 159, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[924869, 24625, 1744, 47, 165, "Input"],
Cell[926616, 24674, 248, 5, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[926867, 24681, 4092, 104, 319, "Input"],
Cell[930962, 24787, 391, 9, 51, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[931356, 24798, 6414, 173, 341, "Input"],
Cell[937773, 24973, 797, 14, 190, "Text"],
Cell[938573, 24989, 5010, 141, 256, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[943620, 25135, 150, 10, 29, "Subsubsection"],
Cell[943773, 25147, 64, 0, 31, "Text"],
Cell[943840, 25149, 3297, 84, 253, "Input"],
Cell[947140, 25235, 307, 8, 51, "Text"],
Cell[947450, 25245, 425, 13, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[947912, 25263, 196, 10, 29, "Subsubsection"],
Cell[948111, 25275, 522, 10, 71, "Text"],
Cell[948636, 25287, 4574, 112, 385, "Input"],
Cell[953213, 25401, 543, 17, 51, "Text"],
Cell[953759, 25420, 1791, 46, 143, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[955587, 25471, 198, 10, 29, "Subsubsection"],
Cell[955788, 25483, 678, 10, 91, "Text"],
Cell[956469, 25495, 520, 14, 51, "Text"],
Cell[956992, 25511, 2591, 68, 210, "Input"],
Cell[959586, 25581, 195, 8, 31, "Text"],
Cell[959784, 25591, 29744, 689, 2806, "Input"],
Cell[989531, 26282, 512, 12, 99, "Input",
 Evaluatable->False],
Cell[990046, 26296, 222, 7, 31, "Text"],
Cell[990271, 26305, 859, 25, 77, "Input"],
Cell[991133, 26332, 415, 9, 51, "Text"],
Cell[991551, 26343, 6810, 178, 583, "Input"],
Cell[998364, 26523, 242, 6, 31, "Text"],
Cell[998609, 26531, 4518, 134, 297, "Input"],
Cell[1003130, 26667, 186, 4, 31, "Text"],
Cell[1003319, 26673, 1081, 36, 77, "Input"],
Cell[1004403, 26711, 446, 14, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1004886, 26730, 184, 10, 29, "Subsubsection"],
Cell[1005073, 26742, 511, 8, 71, "Text"],
Cell[1005587, 26752, 425, 14, 77, "Input"],
Cell[1006015, 26768, 133, 3, 31, "Text"],
Cell[1006151, 26773, 1121, 36, 99, "Input"],
Cell[1007275, 26811, 29, 0, 31, "Text"],
Cell[1007307, 26813, 997, 31, 99, "Input"],
Cell[1008307, 26846, 29, 0, 31, "Text"],
Cell[1008339, 26848, 9250, 267, 319, "Input"],
Cell[1017592, 27117, 29, 0, 31, "Text"],
Cell[1017624, 27119, 9432, 271, 319, "Input"],
Cell[1027059, 27392, 29, 0, 31, "Text"],
Cell[1027091, 27394, 14871, 402, 583, "Input"],
Cell[1041965, 27798, 7169, 195, 518, "Input"],
Cell[1049137, 27995, 813, 25, 71, "Text"],
Cell[1049953, 28022, 4118, 109, 319, "Input"],
Cell[1054074, 28133, 97, 2, 31, "Text"],
Cell[1054174, 28137, 5559, 151, 319, "Input"],
Cell[1059736, 28290, 203, 4, 31, "Text"],
Cell[1059942, 28296, 29985, 782, 1355, "Input"],
Cell[1089930, 29080, 292, 8, 51, "Text"],
Cell[1090225, 29090, 4047, 113, 498, "Input"],
Cell[1094275, 29205, 168, 5, 31, "Text"],
Cell[1094446, 29212, 13402, 300, 1113, "Input"],
Cell[1107851, 29514, 1106, 20, 131, "Text"],
Cell[1108960, 29536, 799, 21, 99, "Input"],
Cell[1109762, 29559, 91, 2, 31, "Text"],
Cell[1109856, 29563, 14794, 333, 1419, "Input"],
Cell[1124653, 29898, 100, 2, 31, "Text"],
Cell[1124756, 29902, 986, 26, 99, "Input"],
Cell[1125745, 29930, 48297, 1140, 4020, "Input"],
Cell[1174045, 31072, 396, 7, 77, "Text"],
Cell[1174444, 31081, 2348, 61, 165, "Input"],
Cell[1176795, 31144, 116, 3, 33, "Text"],
Cell[1176914, 31149, 2881, 75, 299, "Input"],
Cell[1179798, 31226, 113, 3, 33, "Text"],
Cell[1179914, 31231, 673, 19, 99, "Input"],
Cell[1180590, 31252, 2439, 64, 210, "Input"],
Cell[1183032, 31318, 632, 11, 143, "Text"],
Cell[1183667, 31331, 329, 9, 55, "Text"],
Cell[1183999, 31342, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1184136, 31351, 183, 5, 101, "Section"],
Cell[1184322, 31358, 248, 6, 99, "Text"],
Cell[1184573, 31366, 788, 14, 99, "Input"],
Cell[1185364, 31382, 326, 7, 99, "Input"],
Cell[1185693, 31391, 426, 8, 99, "Input"],
Cell[1186122, 31401, 144, 4, 32, "Input"],
Cell[1186269, 31407, 1093, 22, 253, "Input"],
Cell[1187365, 31431, 148, 4, 32, "Input"],
Cell[1187516, 31437, 167, 4, 32, "Input"],
Cell[1187686, 31443, 162, 4, 32, "Input"],
Cell[1187851, 31449, 719, 17, 121, "Input"],
Cell[1188573, 31468, 743, 12, 124, "Input"],
Cell[1189319, 31482, 410, 8, 99, "Input"],
Cell[1189732, 31492, 327, 6, 77, "Input"],
Cell[1190062, 31500, 208, 5, 32, "Input"],
Cell[1190273, 31507, 209, 5, 32, "Input"],
Cell[1190485, 31514, 204, 5, 32, "Input"],
Cell[1190692, 31521, 253, 6, 77, "Input"],
Cell[1190948, 31529, 217, 5, 32, "Input"],
Cell[1191168, 31536, 188, 5, 32, "Input"],
Cell[1191359, 31543, 642, 11, 143, "Input"],
Cell[1192004, 31556, 244, 6, 77, "Input"],
Cell[1192251, 31564, 226, 5, 55, "Input"],
Cell[1192480, 31571, 314, 6, 77, "Input"],
Cell[1192797, 31579, 214, 5, 32, "Input"],
Cell[1193014, 31586, 323, 7, 77, "Input"],
Cell[1193340, 31595, 413, 8, 99, "Input"],
Cell[1193756, 31605, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[1193859, 31611, 226, 8, 71, "Subsection"],
Cell[CellGroupData[{
Cell[1194110, 31623, 155, 10, 35, "Subsubsection"],
Cell[1194268, 31635, 92, 2, 30, "Text"],
Cell[1194363, 31639, 183, 5, 32, "Input"],
Cell[1194549, 31646, 923, 27, 99, "Input"],
Cell[1195475, 31675, 163, 3, 31, "Text"],
Cell[1195641, 31680, 2225, 58, 188, "Input"],
Cell[1197869, 31740, 61, 0, 31, "Text"],
Cell[1197933, 31742, 13251, 308, 1089, "Input"],
Cell[1211187, 32052, 8983, 212, 803, "Input"],
Cell[1220173, 32266, 7391, 177, 715, "Input"],
Cell[1227567, 32445, 6529, 160, 561, "Input"],
Cell[1234099, 32607, 5291, 133, 539, "Input"],
Cell[1239393, 32742, 5140, 129, 539, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1244570, 32876, 201, 10, 29, "Subsubsection"],
Cell[1244774, 32888, 51, 0, 30, "Text"],
Cell[1244828, 32890, 14377, 314, 1486, "Input"],
Cell[1259208, 33206, 1383, 23, 151, "Text"],
Cell[1260594, 33231, 13385, 306, 1489, "Input"],
Cell[1273982, 33539, 204, 5, 47, "Text"],
Cell[1274189, 33546, 346, 6, 51, "Text"],
Cell[1274538, 33554, 6008, 145, 539, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1280583, 33704, 202, 10, 29, "Subsubsection"],
Cell[1280788, 33716, 480, 15, 51, "Text"],
Cell[1281271, 33733, 163, 3, 31, "Text"],
Cell[1281437, 33738, 2360, 68, 166, "Input"],
Cell[1283800, 33808, 64, 0, 31, "Text"],
Cell[1283867, 33810, 530, 16, 55, "Input"],
Cell[1284400, 33828, 212, 4, 50, "Text"],
Cell[1284615, 33834, 2920, 75, 342, "Input"],
Cell[1287538, 33911, 192, 4, 31, "Text"],
Cell[1287733, 33917, 3029, 77, 320, "Input"],
Cell[1290765, 33996, 107, 3, 31, "Text"],
Cell[1290875, 34001, 396, 11, 32, "Input"],
Cell[1291274, 34014, 59, 0, 31, "Text"],
Cell[1291336, 34016, 394, 10, 55, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1291779, 34032, 171, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[1291975, 34043, 155, 10, 35, "Subsubsection"],
Cell[1292133, 34055, 97, 2, 31, "Text"],
Cell[1292233, 34059, 3438, 92, 319, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1295708, 34156, 174, 10, 29, "Subsubsection"],
Cell[1295885, 34168, 210, 4, 51, "Text"],
Cell[1296098, 34174, 4815, 124, 482, "Input"],
Cell[1300916, 34300, 168, 4, 51, "Text"],
Cell[1301087, 34306, 455, 12, 55, "Input"],
Cell[1301545, 34320, 65, 0, 31, "Text"],
Cell[1301613, 34322, 2661, 70, 275, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1304311, 34397, 222, 11, 29, "Subsubsection"],
Cell[1304536, 34410, 426, 7, 71, "Text"],
Cell[1304965, 34419, 1249, 36, 165, "Input"],
Cell[1306217, 34457, 1799, 51, 101, "Text"],
Cell[1308019, 34510, 1839, 52, 165, "Input"],
Cell[1309861, 34564, 247, 5, 51, "Text"],
Cell[1310111, 34571, 426, 11, 52, "Text"],
Cell[1310540, 34584, 7487, 178, 583, "Input"],
Cell[CellGroupData[{
Cell[1318052, 34766, 219, 4, 31, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1318274, 34772, 6023, 146, 473, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[1324312, 34921, 423, 7, 71, "Text"],
Cell[1324738, 34930, 5542, 137, 451, "Input"],
Cell[1330283, 35069, 195, 4, 31, "Text"],
Cell[1330481, 35075, 610, 17, 99, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1331140, 35098, 137, 7, 45, "Subsection"],
Cell[CellGroupData[{
Cell[1331302, 35109, 178, 10, 35, "Subsubsection"],
Cell[1331483, 35121, 44, 0, 30, "Text"],
Cell[1331530, 35123, 1068, 28, 77, "Input"],
Cell[1332601, 35153, 1864, 49, 165, "Input"],
Cell[1334468, 35204, 300, 6, 70, "Text"],
Cell[1334771, 35212, 908, 21, 97, "Text"],
Cell[1335682, 35235, 2329, 57, 253, "Input"],
Cell[1338014, 35294, 2099, 52, 253, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1340150, 35351, 164, 10, 29, "Subsubsection"],
Cell[1340317, 35363, 102, 2, 31, "Text"],
Cell[1340422, 35367, 412, 13, 61, "Text"],
Cell[1340837, 35382, 585, 15, 77, "Input"],
Cell[1341425, 35399, 291, 5, 51, "Text"],
Cell[1341719, 35406, 4510, 111, 495, "Input"],
Cell[1346232, 35519, 111, 3, 31, "Text"],
Cell[1346346, 35524, 2855, 71, 341, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1349238, 35600, 170, 10, 29, "Subsubsection"],
Cell[1349411, 35612, 277, 5, 51, "Text"],
Cell[1349691, 35619, 389, 8, 77, "Input"],
Cell[1350083, 35629, 1140, 34, 99, "Input"],
Cell[1351226, 35665, 16240, 368, 1441, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1367515, 36039, 126, 7, 45, "Subsection"],
Cell[1367644, 36048, 739, 22, 57, "Text"],
Cell[1368386, 36072, 4864, 123, 452, "Input"],
Cell[1373253, 36197, 76, 2, 32, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1373378, 36205, 104, 4, 65, "Section"],
Cell[1373485, 36211, 72, 0, 31, "Text"],
Cell[1373560, 36213, 263, 8, 32, "Input",
 Evaluatable->False],
Cell[1373826, 36223, 347, 8, 99, "Input",
 Evaluatable->False],
Cell[1374176, 36233, 36, 0, 31, "Text"],
Cell[1374215, 36235, 394, 11, 55, "Input",
 Evaluatable->False],
Cell[1374612, 36248, 244, 6, 55, "Input",
 Evaluatable->False],
Cell[1374859, 36256, 99, 3, 32, "Input",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[1374983, 36263, 128, 7, 45, "Subsection"],
Cell[1375114, 36272, 160, 3, 33, "Text"],
Cell[1375277, 36277, 156, 4, 32, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[1375470, 36286, 127, 7, 45, "Subsection"],
Cell[1375600, 36295, 116, 3, 31, "Text"],
Cell[1375719, 36300, 2335, 61, 231, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[1378091, 36366, 126, 7, 37, "Subsection"],
Cell[1378220, 36375, 246, 7, 55, "Input",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[1378491, 36386, 202, 11, 35, "Subsubsection"],
Cell[1378696, 36399, 159, 5, 33, "Text"],
Cell[1378858, 36406, 185, 6, 32, "Input",
 Evaluatable->False],
Cell[1379046, 36414, 173, 5, 32, "Input",
 Evaluatable->False],
Cell[1379222, 36421, 97, 3, 32, "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1379380, 36431, 75, 4, 65, "Section"],
Cell[1379458, 36437, 108, 3, 33, "Text"],
Cell[1379569, 36442, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[1379672, 36448, 111, 2, 32, "Input"],
Cell[1379786, 36452, 45, 1, 32, "Output"]
}, Open  ]],
Cell[1379846, 36456, 523, 15, 55, "Input"],
Cell[1380372, 36473, 100, 3, 32, "Input"],
Cell[1380475, 36478, 76, 2, 32, "Input"],
Cell[1380554, 36482, 102, 2, 32, "Input"],
Cell[1380659, 36486, 119, 3, 33, "Text"],
Cell[1380781, 36491, 82, 2, 32, "Input"],
Cell[1380866, 36495, 78, 2, 32, "Input"],
Cell[1380947, 36499, 80, 2, 32, "Input"],
Cell[1381030, 36503, 95, 3, 32, "Input"],
Cell[CellGroupData[{
Cell[1381150, 36510, 287, 8, 32, "Input"],
Cell[1381440, 36520, 6708, 108, 649, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1388185, 36633, 298, 9, 32, "Input"],
Cell[1388486, 36644, 35147, 545, 2805, "Output"]
}, Open  ]],
Cell[1423648, 37192, 55, 0, 33, "Text"],
Cell[CellGroupData[{
Cell[1423728, 37196, 109, 2, 32, "Input"],
Cell[1423840, 37200, 45, 1, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1423934, 37207, 92, 4, 65, "Section"],
Cell[1424029, 37213, 36, 0, 33, "Text"],
Cell[1424068, 37215, 85, 2, 33, "Text"],
Cell[1424156, 37219, 123, 3, 33, "Text"],
Cell[1424282, 37224, 235, 4, 55, "Text"],
Cell[1424520, 37230, 114, 3, 32, "Input"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
