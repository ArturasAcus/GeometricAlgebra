(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    877992,      23719]
NotebookOptionsPosition[    840049,      22681]
NotebookOutlinePosition[    840557,      22704]
CellTagsIndexPosition[    840481,      22699]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Geometric Algebra & Calculus",
 StyleBox["PART I",
  FontSize->16]
}], "Title",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[StyleBox["initialization, products, orthogonal base, main \
operations (involutions, grade manipulation, magnitude...), matrix \
representations",
 FontSize->16]], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[TextData[StyleBox["Version 0.01 (2016-09-01)",
 FontSize->16]], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Copyright,  License and credit", "Section"],

Cell["\<\
GeometricAlgebra&Calculus:  Software for calculation with Clifford \
multivectors.
Copyright, 2016  A. Acus (arturas.acus@tfai.vu.lt) ,  A. \
Dargys(adolfas.dargys@ftmc.lt)

This file is part of Geometric Algebra&Calculus package.

GeometricAlgebra&Calculus is free software:  you can redistribute it and/or \
modify it under the terms of the GNU Affero General Public License as \
published by the Free Software Foundation, either version 3 of the License, \
or (at your option) any later version.

GeometricAlgebra is distributed in the hope that it will be useful, but \
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or \
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License \
for more details.

You should have received a copy of the GNU Affero General Public License \
along with GeometricAlgebra.  If not, see <http://www.gnu.org/licenses/>.\
\>", "Text"],

Cell["\<\
Ideas of efficient implementation of geometric algebra multiplication of  \
orthogonal base vectors were borrowed form G. Stacey Staples articles and \
programming packages CliffMath11, CliffOC11, CliffSymNil11. ( \
http://www.siue.edu/~sstaple/index_files/research.htm).

A number of important functions were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). We \
also much like it general structure, test and  development solutions. 

Improved product precedence was implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

A lot of other sources was used to implement Clifford algebra and calculus \
algorithms (see references for more details).\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes and References", "Section"],

Cell[CellGroupData[{

Cell["References:", "Subsection"],

Cell[TextData[{
 "\n[DH-STAx.y ]\t   Hastenes, David \"Space-time algebra\", 1966 (third \
printing 1992), D. Reidel Publishing Company, Dordrecht Holland,  \n\
[DH-CA2GCx.y]    Hastenes, David \"Clifford algebra to geometric calculus\", \
1987, D. Reidel Publishing Company, Dordrecht Holland,  \n[CHAL-GA4Px.y]  \
Chris Doran, Anthony Lasenby \"Geometric Algebra for physicists\" Cambridge \
University, 2003\n[AB-I2GA&C]\t   Bromborsky, Alan \"An Introduction to \
Geometric Algebra and Calculus\", version of December 11, 2011 \n\
[KG-HFinP&Sp]   Klaus Gurlebeck, Klaus Habetha, Wolfgang Sprossib, \
\"Holomorphics functions in the plane and n-dimensional space\", Springer, \
2008\n[EH-VDC]\t  Eckhard MS Hitzer, \"Vector differential calculus\" Mem. \
Fac. Eng. Fukui., Vol 50 No1, 2002\n[EH-MDC] \t  Eckhard MS Hitzer, \
\"Multivector differential calculus\", Advances in Applied Clifford Algebras \
12(2) pp. 135-182, 2002\n[ECh-GA]\t  Eric Chisolm \"Geometric Algebra\" , \
arXiv 1205.5935v1\n[SS-OCICAS]\tRene Schott, G Stacey Staples \"Operator \
calculus and invertible Clifford Appel systems: theory and applications to \
n-particle fermion algebra\" and other same authors articles\n[WCS-TAGA]     \
William C. Schulz  \[OpenCurlyDoubleQuote]Theory and application of Grassmann \
Algebra\[CloseCurlyDoubleQuote], 2011, Vienna\n[RA-CoNCGBinG&CA]     Rafal \
Ablamowicz, Computation of non-commutative Grobner bases in Grassmann and \
Clifford algebras, Adv. appl. Clifford alg. 20 (2010),  447\[Dash]476\n\
[TB-GBA4GAinMP ]     Troy Brachey, Grobner Bases Algorithms for Grassmann \
Algebras in Maple package, 2008\n[NDNO-CoMISoMvCA] Nedim Degirmenci, Bulifer \
Ozdemir \[OpenCurlyDoubleQuote]The Construction of Maximum Independent Set of \
Matrices via Clifford Algebras\[CloseCurlyDoubleQuote] Turk J. Math. 31, \
(2007) 193-205\n[NDSK-EIoRCA] Nedim Degirmenci, S. Karapazar \
\[OpenCurlyDoubleQuote] Explicit Isomorphisms of Real Clifford Algebras\
\[CloseCurlyDoubleQuote], Int. Journal of Mathematics and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "l Sciencesm, (2006), 1-13, ID 78613\n[MRdT] Michael Rausch de Traubennerg \
\[OpenCurlyDoubleQuote]Clifford Algebras in Physics\[CloseCurlyDoubleQuote] \
Adv. appl. Clifford alg. 19 (2009), 869-908\n[PL-GPW] Perti Lounesto, G.P. \
Wene \[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173\n[RA-LoCGAaA]     (ed. Rafal Ablamowicz, Garret \
Sobczyk) Lectures on Clifford (Geometric) algebras and applications, \
Springer, 2004\n\n"
}], "Text",
 CellTags->"references"]
}, Closed]],

Cell[CellGroupData[{

Cell["Notes of general character:", "Subsection"],

Cell[TextData[{
 "1. All command names are in singular form (ie. ",
 StyleBox["GetIndex[ ]",
  FontWeight->"Bold"],
 ", not ",
 StyleBox["GetIndices[ ]",
  FontWeight->"Bold"],
 ", even if  it returns list of indices).  \n2. If some particular function \
needs to be used before its actual definition is given we include its name in \
declarations of Forwards section.\n3. Usage and error messages are defined \
along with the definitions.\n4. Context swich commands are used in Sections\n\
5. When possible for options we use symbols already used by ",
 StyleBox["Mathematica, i.e Quiet, Method,Down,...",
  FontSlant->"Italic"]
}], "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1. Installation ", "Section"],

Cell["\<\
In order to install the package follow first three steps below. Note, that \
execution property was removed from all input cells in this installation \
section (copy their content and execute in order to compare with your system).\
\>", "Text"],

Cell[CellGroupData[{

Cell["1. Add interpretation to geometric algebra operation symbols", \
"Subsection"],

Cell[TextData[{
 "It is assumed that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version is 8 or above is in  use. We employ  :il: (inner left) for left \
contraction and :ir: (inner right) for right contraction, because :lc: and \
:rc: are already used in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for different purposes.  You need to have writing permisions to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " install folder in order to append contents of this file (windows users \
should use file UnicodeCharactersAddWin10.tr)"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"appendFile", "=", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", 
     RowBox[{"EvaluationNotebook", "[", "]"}], "]"}], "<>", 
    "\"\<UnicodeCharactersAdd.tr\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", "appendFile", "]"}]}], "Input",
 Evaluatable->False],

Cell["\<\
0x26AC      \[GeometricProduct] ($gp$)      Infix       440 None    5   5
0x22CE      \[OuterProduct]     ($op$)      Infix       450 None    5   5
0x26ab      \[DorstProduct]     ($id$)      Infix       459 None    5   5
0x2219      \[InnerProduct]     ($ip$)      Infix       460 None    5   5
0x23A6      \[LeftContract]     ($il$)      Infix       461 None    5   5
0x23A3      \[RightContract]    ($ir$)      Infix       462 None    5   5\
\>", "Print"]
}, Open  ]],

Cell["to system file pointed by system variable", "Text"],

Cell[CellGroupData[{

Cell[BoxData["System`Dump`unicodeCharactersTR"], "Input",
 Evaluatable->False],

Cell[BoxData["\<\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/FrontEnd/\
TextResources/UnicodeCharacters.tr\"\>"], "Output"]
}, Open  ]],

Cell["\<\
 This is needed in order to ensure correct precedences and  infix notations \
for inner, outer and geometric products. Do not forget to make copy of the \
system file before modification!\
\>", "Text"],

Cell[BoxData[
 RowBox[{"CopyFile", "[", 
  RowBox[{"System`Dump`unicodeCharactersTR", ",", 
   RowBox[{"System`Dump`unicodeCharactersTR", "<>", "\"\<.old\>\""}]}], 
  "]"}]], "Input",
 Evaluatable->False],

Cell["\<\
Note that 0x22CF char was replaced by 0x22CE.There seems to be some \
inconsistency about these two chars, because in text cells it prints \
differently than in input cells (different fonts?). However, if after typing \
\[EscapeKey]op\[EscapeKey] instead wedge symbol you see vee symbol, replace \
0x22CE by 0x22CF. 
 Also \\[EmptySmallCircle ]  (\[EmptySmallCircle], which already has \
definition in UnicodeSymbols.tr file) was replaced by unicode 0x26AC for \
geometric product notation in order to avoid symbols clash. Precedence order \
is tricky, geometric product will not work correctly if 440 is replaced by \
430. Also 540 ... precedences was tested and should be avoided.  \
UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, as was noted above, input \
cells are ok.), GeometricProduct(\[GeometricProduct]), Plus (lowest).\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Adjust compilation target", "Subsection"],

Cell["\<\
The speed of base elements products depends on compilation type.  In order to \
make decision make cells below evaluatabe. First test what C compilers your \
system has installed. By default on OS windows external compilers are absent)\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
If you get nonempty list,  then try to compile trivial function. The output \
should be CompiledFunction[ ].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], "//", 
  "FullForm"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CompiledFunction", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"10", ",", "10.3`", ",", "5468"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"Blank", "[", "Real", "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "0", ",", "0"}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"List", "[", "1", "]"}], "]"}], ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"List", "[", "x", "]"}], ",", "x"}], "]"}], ",", "Evaluate", 
     ",", 
     RowBox[{"LibraryFunction", "[", 
      RowBox[{
      "\"\</home/acus/.Mathematica/ApplicationData/CCompilerDriver/\
BuildFolder/acus-7694/compiledFunction26.so\>\"", ",", 
       "\"\<compiledFunction26\>\"", ",", 
       RowBox[{"List", "[", 
        RowBox[{"List", "[", 
         RowBox[{"Real", ",", "0", ",", "\"\<Constant\>\""}], "]"}], "]"}], 
       ",", "Real"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output"]
}, Open  ]],

Cell["\<\
If compilation was succesfull, then in subsection \[OpenCurlyDoubleQuote]Help \
functions, instalations options below\[CloseCurlyDoubleQuote] the list \
$gaGlobalProperties option  should be \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote]. If \
compilation to C was not possible, then change this option to \
CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\[CloseCurlyDoubleQuote]. After \
adjusting, make these cells unevaluatable again\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CompilePrint", "[", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", "x", ",", 
     RowBox[{"CompilationTarget", "\[Rule]", "\"\<WVM\>\""}]}], "]"}], "]"}], 
  "//", "FullForm"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 TagBox[
  StyleBox[
   "\"\<\\n\\t\\t1 argument\\n\\t\\t1 Real register\\n\\t\\tUnderflow \
checking off\\n\\t\\tOverflow checking off\\n\\t\\tInteger overflow checking \
on\\n\\t\\tRuntimeAttributes -> {}\\n\\n\\t\\tR0 = A1\\n\\t\\tResult = \
R0\\n\\n1\\tReturn\\n\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["3. Private style sheet creation", "Subsection"],

Cell[TextData[{
 "On Windows default font used for input and output has very limited set of \
unicode characters. Below is a command from  ",
 ButtonBox["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/113478/is-there-a-\
global-setting-for-mathematicas-base-fonts"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/113478/is-there-a-global-\
setting-for-mathematicas-base-fonts"],
 ", which install private user style sheet with modified input and output \
fonts. As far as we know this is only needed for Windows user. If in the cell \
below you see list of symbols, which are  {empty small circle, wedge, center \
dot, left contract, right contract, fat dot},, i.e.",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCECxNuBGMTe+n/L
KBpFo4guaMOSI0312zrmfd1MBdP+rVt4uLF+e9eC79QwbRQNEvR3SZUlFwOX
Qtq9DVQw7ffCIhMOBh6V/EcbB95ro4haaDSRjCKCaDSR0Bn927T+z1Cri4dL
Ill1xExKXsG0rmHpL2wKfs4vzdQUFxAwOLByYAN809OGuLMD7AaS0VBKJBuW
7EpwdlKW19O0LC6a9hklP275MnvijhQdMXGPc2sw9a496yYurp9zZMYi3C3q
ze864v1lBYRElCNS+z/QKLNvXrrGUCG5fw09o5hyNGQSyeZVR/ykORgZoICZ
37NgAVqh8b7NRFLC98JaTO3rLvpKSpl0vMdj/uq+JBnl6rbFn+bX58nJl05d
T4vQ/rOo3FlYXM2t9yNNYnPzl8VLvmyivslDJZH8W97sxgtPIiDAKRd3cz2y
mg234uXF1MqeYQmlzc/L1cXQ1aNFX4mNgv9FUAJbc8JO1rllJQ0iceO9NF2H
5No8dZsty7ZQ3fAH2bqCTEyCOtkPqBGVyGioJJK/i8vNOZHTCAObBCRO4WjT
k2IDUV71pGS0ymLL+974WBVeMcPSp3hctX52l4aEW0TJ+oIgWwmDOfM3UjsS
t/5b1ZOlZrdl2fp7Gbo28TO/U9n8zS/r3IwFBY3d615SuzAZKonk/4Z5UzW5
meBJhJFFwbP3I0pi2PyqzlaKU9TJp/U1SihtedPq7ybOJWPX8BpvS+P38t7p
AY7hbuELJq76i9cxv5Y09kZFtBbM/kqCFzbcSta1ipkBTBt/V7QnKVuuWryZ
2lYQRuQZSzCRkGQs8YmEDNf+XFiVq87HysjAyMihap16bjVaib3+WriMqHrl
CywpYcvzCg0x2ZgbuKsbUhCw1lDkZhYIaliOPy0ho+8zUp2U/Y6ugrh507Ny
S32Hqhc4Q4kcK2jk8v+EEwlpxhKdSMgNhM0b386bfXfxOmy6tryu1xWXDLq8
DlNq/eUgKQmDlrdU6bNsmDdBkYNDOhybRbicvWyzvX5Vz+p/cJGNS9e66JRN
XEs1K2jkcjAikEhINJbYREKLQNi88Vm9hZSo0yksXeA1Jx1EpSybqFJZ/5qb
ps/B41i86Ddpztv8j6AIhVbQyOWEEgmpxhKZSGgQCKsOGvAysYkFpEzHNlO5
5cuUBFchFiZeo0NDbSBrANGfJfWx2irGKirGipI8TFRuuDJziOupgAy3tit7
Qqeh1y0/li77sA5vv3Lz+g9Ll/0YakPiA4ggsQkH1E0kVDd2FA0M2rzp25o1
n2Hoy7qNuOrHQWHsKBpFo2gUDRgCAHomup0=
     "], {{0, 20}, {183, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{183, 20},
   PlotRange->{{0, 183}, {0, 20}}]], "Input",
  Evaluatable->False,
  ImageSize->{187, 19},
  ImageMargins->{{0, 0}, {0, 0}},
  ImageRegion->{{0, 1}, {0, 1}}],
 " then there is no need for private style sheet. If you see instead some \
empty squares you need to find font which has the mentioned characters"
}], "Text"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[GeometricProduct]", 
   RowBox[{",", 
    RowBox[{"\[OuterProduct]", 
     RowBox[{",", 
      RowBox[{"\[InnerProduct]", 
       RowBox[{",", 
        RowBox[{"\[LeftContract]", 
         RowBox[{",", 
          RowBox[{"\[RightContract]", 
           RowBox[{",", "\[DorstProduct]"}]}]}]}]}]}]}]}]}]}], "}"}]], "Input",\

 Evaluatable->False],

Cell["\<\
The simplest way to test a font is just select the cell above and change font \
with front end Format/Font. When you will find a font where all chars are \
represented correctly, you can set it as default for Standard form using \
command below.  In particularly  we noticed that \
\[OpenCurlyDoubleQuote]Microsoft Sans Serif\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]OpenSymbols\[CloseCurlyDoubleQuote] are ok for Windows \
10.  In order to generate and install private style sheet do the folowing\
\>", "Text"],

Cell["\<\
Make both cells below Evaluatable and execute. Once style sheet  \
\"GAC_Style.nb\" is installed in you private Mathematica folder use it with \
all notebooks were you load this package. After you do this don\
\[CloseCurlyQuote]t forget to make both cells nonexecutable again removing \
front end command Cell/Cell Properties/Evaluatable mark from them\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"setFont", "[", 
   RowBox[{"fontFamily_", ",", "fontSize_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"styleNB", "=", 
       RowBox[{"Notebook", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cell", "[", 
           RowBox[{"StyleData", "[", 
            RowBox[{"StyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}], 
            "]"}], "]"}], ",", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"StyleData", "[", "\"\<StandardForm\>\"", "]"}], ",", 
            RowBox[{"FontFamily", "\[Rule]", 
             RowBox[{"ToString", "[", "fontFamily", "]"}]}], ",", 
            RowBox[{"FontSize", "\[Rule]", 
             RowBox[{"ToExpression", "[", "fontSize", "]"}]}]}], "]"}]}], 
         "}"}], "]"}]}], ",", 
      RowBox[{"styleSheetName", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
         "$UserBaseDirectory", ",", "\"\<SystemFiles\>\"", ",", 
          "\"\<FrontEnd\>\"", ",", "\"\<StyleSheets\>\"", ",", 
          "\"\<GAC_Style.nb\>\""}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FileExistsQ", "[", "styleSheetName", "]"}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"$FrontEnd", ",", 
         RowBox[{
         "DefaultStyleDefinitions", "\[Rule]", "\"\<Default.nb\>\""}]}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"styleSheetName", ",", "styleNB"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SetOptions", "[", 
      RowBox[{"$FrontEnd", ",", 
       RowBox[{"DefaultStyleDefinitions", "\[Rule]", "styleSheetName"}]}], 
      "]"}]}]}], "]"}]}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{"setFont", "[", 
  RowBox[{"\"\<Microsoft Sans Serif\>\"", " ", ",", "14"}], "]"}]], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell["4. Tested versions and known problems", "Subsection"],

Cell["\<\
Tested with versions: 10.2 for windows 10,  10.3 for linux ubuntu 14.04,\
\>", "Text"],

Cell[TextData[{
 " Known problems: \n1)Version 10.0 complains about shadowed z symbol. It is  \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " bug, avoid this version. \n2) You have to wait until evaluation of this \
notebook is finished and only then evaluate other cells in your notebook. "
}], "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Initialization", "Section"],

Cell[CellGroupData[{

Cell["Package Context", "Subsection"],

Cell["\<\
Context manipulation commands were taken from DesignerUnits` package \
(copyright 2009 to present Mark Evans, http://designerunits.com/overview). \
Context code has several goals, primarily: 1. \[OpenCurlyDoubleQuote]Private \
context sharing across discontinuous sections.\[CloseCurlyDoubleQuote] 2.  \
\[OpenCurlyDoubleQuote]Easy manual reentry of any one section for developing \
work. \[OpenCurlyDoubleQuote]

DeclareIntoContext creates and/or clears symbols in package context.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"GeometricAlgebra`$GAPackageHasLoaded", ",", 
    RowBox[{"CompoundExpression", "[", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<The package already has been loaded.\>\"", "]"}], 
      ",", " ", 
      RowBox[{"FrontEndTokenExecute", "[", "\"\<EvaluatorAbort\>\"", "]"}]}], 
     "]"}], ",", 
    RowBox[{
    "GeometricAlgebra`$GAPackageHasLoaded", " ", "=", " ", "False"}]}], "]"}],
   ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<GeometricAlgebra`\>\"", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$GAUnprotectionList", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageInputAliases", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$GAPackageContext", " ", "=", " ", 
   RowBox[{"Context", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$GAPackageOnlyContextPath", " ", "=", " ", 
    RowBox[{"Join", "[", 
     RowBox[{"System`$ContextPath", ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"$GAPackagePrivateContext", " ", "=", " ", 
   RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<p`\>\""}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "DeclareIntoContext", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"HoldAll", ",", "Listable"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DeclareIntoContext", "]"}], " ", "=", "  ", 
   RowBox[{"{", 
    RowBox[{"Context", " ", "\[Rule]", " ", "$GAPackageContext"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "normal", " ", "package", " ", 
    RowBox[{"load", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x__", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Quiet", "[", " ", 
      RowBox[{
       RowBox[{"Unprotect", "[", "x", "]"}], ";", " ", 
       RowBox[{"Clear", "[", "x", "]"}], ";"}], " ", "]"}], " ", "/;", " ", 
     RowBox[{"SameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], " ", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "flavor", " ", "for", " ", "Global`", " ", "scratchpad", " ", 
    "dev", " ", "work"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "symbolName", " ", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"symbolName", " ", "=", "  ", 
         RowBox[{"SymbolName", "[", 
          RowBox[{"Unevaluated", "[", "x", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{
          RowBox[{"Unprotect", "[", "x", "]"}], " ", ";", " ", 
          RowBox[{"Remove", "[", "x", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"BeginPackage", "[", 
         RowBox[{"OptionValue", "[", "Context", "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Symbol", "[", "symbolName", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"EndPackage", "[", "]"}]}]}], "]"}], " ", "/;", " ", 
     RowBox[{"UnsameQ", "[", 
      RowBox[{
       RowBox[{"Context", "[", "]"}], ",", 
       RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"same", " ", "flavor"}], ",", " ", 
    RowBox[{"multiple", " ", "arguments", " ", "pattern"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeclareIntoContext", "[", 
    RowBox[{"x__", ",", " ", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeclareIntoContext", "[", 
     RowBox[{"{", "x", "}"}], "]"}], " ", "/;", " ", 
    RowBox[{"UnsameQ", "[", 
     RowBox[{
      RowBox[{"Context", "[", "]"}], ",", 
      RowBox[{"OptionValue", "[", "Context", "]"}]}], "]"}]}]}], ";", 
  RowBox[{"End", "[", "]"}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPrivate", "[", "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"$GAPackageOnlyContextPath", ",", 
         RowBox[{"{", "$GAPackagePrivateContext", "}"}]}], "]"}]}], "]"}], 
     ";", " ", 
     RowBox[{"Begin", "[", "$GAPackagePrivateContext", "]"}], ";", " ", 
     RowBox[{"If", "[", 
      RowBox[{"$GAPackageHasLoaded", ",", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Unprotect", "[", 
         RowBox[{"Evaluate", "[", 
          RowBox[{"$GAPackageContext", " ", "<>", " ", "\"\<*\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], ";"}], " ", ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EndPrivate", "[", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"System`$ContextPath", ",", " ", "$GAPackageOnlyContextPath"}], 
      "]"}], ";", " ", 
     RowBox[{"End", "[", "]"}], ";"}], " ", ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Help functions, installation options", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", 
   RowBox[{
   "$gaGlobalProperties", ",", "TheContextSymbolList", ",", 
    "StringListPrintableString", ",", "MissingForwardDeclarations", ",", 
    "ShowStatus"}], "]"}], ";"}]], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "::", "usage"}], "=", 
   "\"\<ShowStatus[_String] displays curent evaluation status on bottom panel \
of the evaluation notebook window.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$gaGlobalProperties", "::", "usage"}], "=", 
   "\"\<Contains global notation, behaviour and performance options, which \
can be se BEFORE executing package notebook.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["Installation options,  restrictions and default settings", \
"Subsubsection"],

Cell[TextData[{
 "Input of geometric, inner and outer products and realization of proper \
precedences requires modern ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " front end. Version 8 seems to be minimal, where  inpu/output formating \
works properly. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"ValueQ", "[", 
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "]"}], 
     "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], "=", 
      "\"\<Input of geometric, inner and outer products and realization of \
proper products precedences requires modern \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\) front end. Version 8 seems to be minimal, where \
input/output works properly.  $VersionNumber says your version is `1`. \
Package load is aborted.\>\""}], ";"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "<=", " ", "7"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"$GAPackagePrivateContext`platform", "::", "oldmma"}], ",", 
       RowBox[{"NumberForm", "[", 
        RowBox[{"System`$VersionNumber", ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Quit", "[", "]"}]}]}], "]"}], ";"}]}], "Input"],

Cell["\<\
Here is the list of options that can be used to modify global package \
function definitions.  Setting CompileTo\[Rule]\[CloseCurlyDoubleQuote]WVM\
\[CloseCurlyDoubleQuote] (or any other string) will replace compilation to \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] to more slow Wolfram virtual \
machine code (bytecode).\
\>", "Text"],

Cell[TextData[{
 "Option ",
 StyleBox["gaAlwaysTestInputIndexOrdering",
  FontWeight->"Bold"],
 " seeks for unordered index sets of indices (in ",
 StyleBox["mvDownUp[down_List, up_List]",
  FontWeight->"Bold"],
 ". Unordered index sets should never appear in calculations. Appearance of \
unordered index list will definitely mean that that user input or program \
code contains error. This option modifies $Pre and $Post behaviour. Can \
disable testing by setting the option to False.  "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$gaGlobalProperties", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CompileTo", "\[Rule]", "\"\<C\>\""}], ",", 
     RowBox[{
     "gaOrthonormalBaseSymbolName", "\[Rule]", "\"\<\[DoubleStruckE]\>\""}], 
     ",", 
     RowBox[{"gaOrthonormalBaseSymbolInputAlias", "\[Rule]", "\"\<e\>\""}], 
     ",", 
     RowBox[{
     "gaGeneralBaseSymbolInputAlias", "\[Rule]", "\"\<\[DoubleStruckF]\>\""}],
      ",", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "\[Rule]", "True"}]}], "}"}]}],
   ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"orthonormalBaseSymbolName", "=", 
    RowBox[{"gaOrthonormalBaseSymbolName", "/.", "$gaGlobalProperties"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orthonormalBaseSymbolInputAlias", "=", 
   RowBox[{
   "gaOrthonormalBaseSymbolInputAlias", "/.", "$gaGlobalProperties"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generalBaseSymbolInputAlias", "=", 
   RowBox[{"gaGeneralBaseSymbolInputAlias", "/.", "$gaGlobalProperties"}]}], 
  ";"}]}], "Input"],

Cell["\<\
------------------------------------------------------------------------------\
-------------------------
No editable data below this line for ordinary user
------------------------------------------------------------------------------\
-------------------------\
\>", "Text",
 FontWeight->"Bold",
 FontColor->RGBColor[1, 0, 0]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Useful functions for developing and control", "Subsubsection"],

Cell[TextData[{
 "Functions ",
 StyleBox["StringListPrintableString,MissingForwardDeclarations",
  FontWeight->"Bold"],
 "  are taken from DesignerUnits` package (copyright 2009 to present Mark \
Evans, http://designerunits.com/overview). "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"ls", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"#1", ",", "\"\<, \>\"", ",", "#2"}], "]"}], "&"}], ",", 
     RowBox[{"First", "[", "ls", "]"}], ",", 
     RowBox[{"Rest", "[", "ls", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringListPrintableString", "[", 
    RowBox[{"{", "}"}], "]"}], " ", "=", " ", "\"\<\>\""}], ";"}]}], "Input"],

Cell["Empty list if everything is ok.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"outerCtx_String", ",", "privateCtx_String"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"synm", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}]}], 
      "}"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{
       RowBox[{"synm", " ", "/@", "  ", 
        RowBox[{"Names", "[", 
         RowBox[{"outerCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}], ",", 
       RowBox[{"synm", " ", "/@", " ", 
        RowBox[{"Names", "[", 
         RowBox[{"privateCtx", " ", "<>", " ", "\"\<*\>\""}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MissingForwardDeclarations", "[", "]"}], " ", ":=", " ", 
   RowBox[{"MissingForwardDeclarations", "[", 
    RowBox[{"$GAPackageContext", ",", "$GAPackagePrivateContext"}], "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["ShowStatus[]",
  FontWeight->"Bold"],
 " is borrowed from Paul\[CloseCurlyQuote]s Abbot \
\[OpenCurlyDoubleQuote]Tricks of the Trade\[CloseCurlyDoubleQuote],The MMa \
Journal 7-3,2000 Author:Theodore Gray (theodore@wolfram.com)"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ShowStatus", "[", "status_String", "]"}], ":=", 
   RowBox[{"LinkWrite", "[", 
    RowBox[{"$ParentLink", ",", 
     RowBox[{"SetNotebookStatusLine", "[", 
      RowBox[{
       RowBox[{"FrontEnd`EvaluationNotebook", "[", "]"}], ",", "status"}], 
      "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Forwards", "Subsection"],

Cell["\<\
This subsection does not have private context!
If some particular function needs to used before its actual definition is \
given we include its name in declarations of THIS Forwards section.  \
\>", "Text"],

Cell[TextData[{
 "General multivectors will have head ",
 StyleBox["MV",
  FontWeight->"Bold"],
 ".  With numerical indices they will denote multivectors in general (non \
orthonormal) base as well. Definitions for general multivectors are moved to  \
separate notebook GAC_MV.nb"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeclareIntoContext", "[", "MV", "]"}], ";"}]], "Input"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Objects: orthonormal base notation and definition", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"gaRunningAlgebra", ",", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}], 
     ",", "Cl", ",", "mvDownUp", ",", "gaDefineInput", ",", 
     "gaDefineNotation", ",", "gaNotation", ",", "gaDefineOrthonormalBase", 
     ",", "gaOrthonormalBase", ",", "gaOrthonormalToReciprocal", ",", 
     "gaNonCommutativeMonomialOrder", ",", "gaCommutativeMonomialOrder", ",", 
     "gaVectorSpaceDimension", ",", "gaGetGrade", ",", "gaGetSignature", ",", 
     "gaGetMV", ",", "gaGetIndex", ",", "gaIndexSort", ",", 
     "gaTestIndexOrdering", ",", "gaOrderedQ", ",", "gaGradesOnly", ",", 
     "gaNegativeSignatureIndexList"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRunningAlgebra", "::", "usage"}], "=", 
   "\"\<gaRunningAlgebra returns an algebra Cl[p,q,r] for which input aliases \
takes place at given moment. The numbers denotes correspondingly the number \
of positive (p), negative (q) and zero (r) norm base vectors. For example \
Cl[3,0,0] is geometric algebra for Euclidian space.\>\""}], " ", 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{
     "Symbol", "[", "GeometricAlgebra`p`orthonormalBaseSymbolName", "]"}], 
     "]"}], "::", "usage"}], "=", 
   "\"\<Notation for predefined global orthonormal base multivectors. \
Orthogonal base symbol name can be changed modifying option \
gaOrthonormalBaseSymbolName of package global options list \
$gaGlobalProperties.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "::", "usage"}], "=", 
   "\"\<Cl[p_Integer?NonNegative,q_Integer?NonNegative,r_Integer?NonNegative] \
denotes Clifford algebra with signature of corresponding positive (p), \
negative (q) and zero (r) squared vectors.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUp", "::", "usage"}], "=", 
   "\"\<mvDownUp[{s_Integer?Positive | s_gaTensorProduct | s_Symbol  | \
s_iterator},{same for upper symbols}] is a container for down (the first \
list) and up (the second list) indices.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "::", "usage"}], "=", 
   "\"\<gaDefineInput[Cl[p_Integer,q_Integer,r_Integer:0],opts___] sets input \
aliases for algebras. Unfinished....\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "::", "usage"}], "=", 
   "\"\<gaDefineNotation[algebra_] sets style of representation of algebra. \
At the moment only FontColor option is realized. Automatically called by \
gaDefineOrthonormalBase[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNotation", "::", "usage"}], "=", 
   "\"\<Style options container.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBase", "::", "usage"}], "=", 
   "\"\<gaDefineOrthonormalBase[Cl[p_Integer,q_Integer,r_Integer:0]] defines \
orthonormal (plain space) base of geometric algebra of signature {p,q,r}, \
where p,q,r is number of base vectors with positive square, negative and zero \
squares respectivelly. Only direct (down indices) base is defined. Dual base \
can be obtained with gaOrthonormalToReciprocal[]. Base vectors are ordered \
can be changed using option gaNonCommutativeMonomialOrder. Base vectors color \
is selected automatically. You can be set it manually calling gaNotation[] or \
using option FontColor->color. This command also set values for \
gaVectorSpaceDimension[algebra], gaOrthonormalBase[algebra], \
mvGrade[baseElements]. gaDefineOrthonormalBase[gaTensorProduct[algebras__]] \
defines orthonormal base for tensor products of algebras. Option \
gaGradesOnly->{{},{},...} can be used to construct only specific grade base \
elements {{0},{1},{2},... (used to speedup calculation of tensor product \
base).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaVectorSpaceDimension", "::", "usage"}], "=", 
   "\"\<gaVectorSpaceDimension[algebra] returns number of vector space \
dimension of the algebra. Defined in gaDefineOrthonormalBase[].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNegativeSignatureIndexList", "::", "usage"}], "=", 
   "\"\<gaNegativeSignatureIndexList[algebra] returns list of negative \
signature indices. Defined in gaDefineOrthonormalBase[].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBase", "::", "usage"}], "=", 
   "\"\<Variable gaOrthonormalBase[algebra_] stores computed base vectors \
with down indices. This variable is computed by \
gaDefineOrthonormalBase[].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalToReciprocal", "::", "usage"}], "=", 
   "\"\<gaOrthonormalToReciprocal[exprWithDownBaseElements_] computes \
reciprocal base vectors (with up indices) of list. \
gaOrthonormalToReciprocal[exprWithDownBaseElements_,algebra_|{algebra__}], \
converts only elements that belongs to given algebras\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNonCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaDefineOrthonormalBase[] and ..., which allows to set \
algebras base elements monomial order. Possible orderings are \\\"Lex\\\", \\\
\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure orderings can be \
proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, totally giving \
4*3 possible orderings. Orders \\\"RevLex\\\", \\\"InvRevLex\\\" and the \
default order \\\"InvDeg[Lex]\\\" are not addmissible and cannot be used as \
Grobner base monomial orders.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeMonomialOrder", "::", "usage"}], "=", 
   "\"\<Option for gaNonCommutativeMonomialOrder, which defines commutative \
coefficient order for same noncommutative base elements. Uses Monomialorders \
implemented by Mathematica, i.e. \\\"Lexicographic\\\", \
\\\"DegreeLexicographic\\\", \\\"DegreeReverseLexicographic\\\", \
\\\"NegativeLexicographic\\\", \\\"NegativeDegreeLexicographic\\\", \
\\\"NegativeDegreeReverseLexicographic\\\" and \n\\\"Reverse[Lexicographic]\\\
\", \\\"Reverse[DegreeLexicographic]\\\", \
\\\"Reverse[DegreeReverseLexicographic]\\\", \
\\\"Reverse[NegativeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeLexicographic]\\\", \
\\\"Reverse[NegativeDegreeReverseLexicographic]\\\".\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetIndex", "::", "usage"}], "=", 
   "\"\<gaGetIndex[multivector] returns list of indices of \
multivector.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "::", "usage"}], "=", 
   "\"\<gaGetGrade[expr] returns grade of multivector.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetSignature", "::", "usage"}], "=", 
   "\"\<gaGetSignature[expr] returns signature of multivector.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "::", "usage"}], "=", 
   "\"\<gaGetMV[expr, {n__Integer?Positive}] returns multivector of grades \
{n}. gaGetMV[expr,_mvDownUp] returns (to do) multivectors with given pattern \
of indices,... other criteria can be implemented\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "usage"}], "=", 
   "\"\<gaOrderedQ[ordering_String][#1,#2] gives True if pair of base \
elements is ordered according to one of defined orderings \n \\\"Lex\\\", \
\\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\", which can be proceeded \
with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "::", "usage"}], "=", 
   "\"\<gaIndexSort[ind:{{__Integer?Positive}..}, order_String] sorts ind \
with respect to gaNonCommutativeMonomialOrder. Sorts monomials acording to \
given order.... other possibilities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "usage"}], "=", 
   "\"\<gaTestIndexOrdering[expr] tests if inices inside \
mvDownUp[{__Integer},{__interger}] are sorted. This test is set to $Pre by \
default an can be removed setting package global option to \
gaAlwaysTestInputIndexOrdering\[Rule]False.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["Notation and help functions", "Subsection"],

Cell[CellGroupData[{

Cell["Help functions", "Subsubsection"],

Cell["\<\
Insert some output after evaluated cell (taken form \
http://mathematica.stackexchange.com/questions/15134/a-debug-utility-to-print-\
or-extract-intermediate-data-from-a-program)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"insertBelowEvaluationCell", "[", "expr_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SelectionMove", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "After", ",", 
       "EvaluationCell"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"BoxData", "@", 
          RowBox[{"ToBoxes", "[", "expr", "]"}]}], ",", "\"\<Print\>\""}], 
        "]"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["One message per session", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alreadyPrintedList", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Alias modification in order to match ",
 StyleBox["gaRunningAlgebra ",
  FontWeight->"Bold"],
 "color. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"updateInputAlias", ",", "HoldRest"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"updateInputAlias", "[", 
    RowBox[{"aliasName_String", ",", "aliasReplacementRul__Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"alposition", ",", 
       RowBox[{"inpOpt", "=", 
        RowBox[{"Options", "[", 
         RowBox[{
          RowBox[{"EvaluationNotebook", "[", "]"}], ",", "InputAliases"}], 
         "]"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"inpOpt", ",", "aliasName"}], "]"}]}], ",", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
         RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{"inpOpt", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"alposition", "=", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"inpOpt", ",", 
                 RowBox[{"aliasName", "->", "_"}]}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Extract", "[", 
               RowBox[{"inpOpt", ",", "alposition"}], "]"}], "/.", 
              RowBox[{"{", "aliasReplacementRul", "}"}]}], ")"}]}]}], "]"}]}],
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Automated color picking is full of heuristic. For first 3 colors maximize \
ColorDistance function explicitly. After that pick colors randomly decreasing \
allowed distance (accept treshold) between colors with increasing number of \
colors. If  there is a need, say blue family, call  ",
 StyleBox["pickNextRandomColor[RGBColor[_,_,1],1/3] ",
  FontWeight->"Bold"],
 " with reduced threshold (i.e . for example 1/3 instead of 1). Threshold \
function ",
 StyleBox["accept=1/(quality*Log[2,N[oldlength+1]])",
  FontWeight->"Bold"],
 " gives up to 23 colors. Then color generation stops, because threshold \
decreases too slowly and is unable to guarantee required minimal distance \
between colors. After that we simply pick colors randomly. [Mathematical \
task: find a decrease function, which will allow optimally (with equal and \
chosen in advance constant probablility) generation of any number of colors). \
Solution. For one dimensional case we can immediatelly write formula: p[n]= \
1-2(n-1)len[n]. So if distance between colors will decrease as \
len[n]=(1-p[n])/(2(n-1)), then probability for picking next color will remain \
constant: p[n]=const., For 3D case an analog would be \
accept=Power[quality/((4Pi/3)(oldlength+1)),1/3.] law. Unfortunatelly, this \
does not work well enought.] "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pickNextColor", "::", "maxColorLimit"}], "=", 
   "\"\<Smart color picking limit `1` was reached. Start picking colors \
randomly.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "pickNextColor", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alreadyUsedColors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "1.", ",", "1."}], "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.", ",", "0.", ",", "0."}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"predefinedColorList", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1.", ",", "0.", ",", "0."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "1.", ",", "0."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "0.", ",", "1."}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.", ",", "1.", ",", "1."}], "]"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pickNextRandomColor", "[", 
     RowBox[{"channel_RGBColor", ",", 
      RowBox[{"quality_", "?", "NumberQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"newColor", ",", 
        RowBox[{"oldlength", "=", 
         RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"accept", "=", 
        RowBox[{"quality", "/", 
         RowBox[{"Log", "[", 
          RowBox[{"2", ",", 
           RowBox[{"N", "[", 
            RowBox[{"oldlength", "+", "1"}], "]"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}], "===", 
          "oldlength"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Min", "[", 
             RowBox[{"ColorDistance", "[", 
              RowBox[{"alreadyUsedColors", ",", 
               RowBox[{"newColor", "=", 
                RowBox[{"RandomColor", "[", "channel", "]"}]}], ",", 
               RowBox[{"DistanceFunction", "\[Rule]", "\"\<CIE94\>\""}]}], 
              "]"}], "]"}], ">", "accept"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", "newColor"}], "]"}]}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "newColor"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"smartColors", "=", "21"}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"System`$VersionNumber", " ", "\[GreaterEqual]", "10.2"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", 
      RowBox[{"opts___", "?", "OptionQ"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"len", "=", 
          RowBox[{"Length", "[", "alreadyUsedColors", "]"}]}], ",", 
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"pickNextColor", ",", "Quiet"}], "]"}]}], ")"}]}], ",", 
         "newColor"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"predefinedColorList", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"predefinedColorList", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{"predefinedColorList", ",", "alreadyUsedColors"}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "predefinedColorList", "]"}], ">", "0"}], 
          ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"alreadyUsedColors", ",", 
             RowBox[{"newColor", "=", 
              RowBox[{"predefinedColorList", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";", "newColor"}], 
          ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"len", "<", "smartColors"}], ",", 
            RowBox[{"pickNextRandomColor", "[", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"_", ",", "_", ",", "_"}], "]"}], ",", "1."}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Not", "[", "quiet", "]"}], ",", 
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"pickNextColor", "::", "maxColorLimit"}], ",", 
                 "smartColors"}], "]"}]}], "]"}], ";", 
             RowBox[{"RandomColor", "[", "]"}]}]}], "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pickNextColor", "[", "___", "]"}], ":=", 
     RowBox[{"RGBColor", "[", 
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}], ",", 
       RowBox[{"RandomReal", "[", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}], ";"}]}], "Input"],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions is less than 10.2 picking of color is random."
}], "Text"],

Cell["\<\
If  global option gaTestIndexOrdering was set to True, then try to detect not \
strictly ordered index sets. Repeated indices inside mvDownUp[ ] are also \
forbiden. The resulting slowdown of this testing was not measured, however \
for modest output/input size should be acceptable. Input of indices with \
larger values that number of base vectors are allowed, thought they are \
meaningless in computations. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], "=", 
   "\"\<Error. Not properly ordered index set `1` in expression input/output \
was detected. Only ordered sets can appear in calculations.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], "=", 
   "\"\<Error. Index set `1` contains repeated indices. All indices in base \
element should be different.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetAttributes", "[", 
    RowBox[{"gaTestIndexOrdering", ",", " ", "HoldAll"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTestIndexOrdering", "[", "expr_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"indexPairs", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Unevaluated", "[", "expr", "]"}], ",", 
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "___Integer", "}"}], ",", 
           RowBox[{"{", "___Integer", "}"}]}], "]"}], ",", "Infinity"}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
             RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"indexCases", "=", 
           RowBox[{"indexPairs", "/.", 
            RowBox[{"mvDownUp", "\[Rule]", "Sequence"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"And", "@@", 
             RowBox[{"(", 
              RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}], " ", "]"}], 
           ",", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaTestIndexOrdering", "::", "UnorderedSet"}], ",", 
              RowBox[{"Pick", "[", 
               RowBox[{"indexCases", ",", 
                RowBox[{"Not", "/@", 
                 RowBox[{"(", 
                  RowBox[{"OrderedQ", "/@", "indexCases"}], ")"}]}]}], 
               "]"}]}], "]"}], ";"}], ",", "expr"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaTestIndexOrdering", "::", "SameIndices"}], ",", 
          RowBox[{"Pick", "[", 
           RowBox[{"indexPairs", ",", 
            RowBox[{"Not", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"Union", "[", "#", "]"}], "]"}], "===", 
                  RowBox[{"Length", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
               RowBox[{"(", 
                RowBox[{"Join", "@@@", "indexPairs"}], ")"}]}], ")"}]}]}], 
           "]"}]}], "]"}], ";"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"gaAlwaysTestInputIndexOrdering", "/.", "$gaGlobalProperties"}], 
     ")"}], ",", 
    RowBox[{
     RowBox[{"$Pre", "=", "gaTestIndexOrdering"}], ";", 
     RowBox[{"$Post", "=", "gaTestIndexOrdering"}]}]}], "]"}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Algebra and Index notations", "Subsubsection"],

Cell["\<\
Algebras always use three signatures, positive (p), negative (q) and zero \
(r). \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_"}], "]"}], "=", 
   RowBox[{"Cl", "[", 
    RowBox[{"p", ",", "q", ",", "0"}], "]"}]}], ";"}]], "Input"],

Cell["Nice output for Clifford algebra identificator", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alsty", "=", 
        RowBox[{"gaNotation", "[", 
         RowBox[{"Cl", "[", 
          RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"r", "===", "0"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", "\"\<0\>\""}], "}"}], ",", 
          "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{
               RowBox[{"StyleBox", "[", 
                RowBox[{"\"\<Cl\>\"", ",", "alsty"}], "]"}], ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{"#1", ",", "\"\<,\>\"", ",", "#2"}], "}"}], "]"}]}], 
              "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}], ",", 
        RowBox[{"TemplateBox", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"p", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"q", ",", "sf"}], "]"}], ",", 
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"r", ",", "sf"}], "]"}]}], "}"}], ",", "\"\<Cl\>\"", ",", 
          RowBox[{"DisplayFunction", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SubscriptBox", "[", 
              RowBox[{"\"\<Cl\>\"", ",", 
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "#1", ",", "\"\<,\>\"", ",", "#2", ",", "\"\<,\>\"", ",", 
                  "#3"}], "}"}], "]"}]}], "]"}], "&"}], ")"}]}], ",", 
          RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaNotation", "[", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "=!=", 
     "gaNotation"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Nice representation of indices. System` context have protected ",
 StyleBox["Up",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Down",
  FontWeight->"Bold"],
 " symbols, therefore we introduce our own ",
 StyleBox[" mvDownUp[{down},{up}]",
  FontWeight->"Bold"],
 " instead of separate down and up indices. Single head will simplify pattern \
matcher. By default for base multivectors we use down indices, i.e. ",
 StyleBox["mvDownUp[{down},{}] ",
  FontWeight->"Bold"],
 " and dual base  is represented by upper indices  i.e. ",
 StyleBox["mvDownUp[{},{up}]",
  FontWeight->"Bold"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
In oder to allow editing we explicitly enumerated slots. Unfortunatelly, this \
imply, that at the moment it is impossible to change number of indices, so \
editing make sense only if number of up and down indices remain the same\
\>", "Text"],

Cell[TextData[{
 StyleBox["mvDownUp[indown_List,inup_List]",
  FontWeight->"Bold"],
 " keeps down indices in the first list and up indices in the second. Both \
index list should be strictly ordered (no two same indices anywhere) for \
numeric indices. Note, however, that in calculations, when both type of \
indices are present we authomatically sort indices of both types into common \
ordered index list. For convenience of  input, however  separate ordered up \
and down index lists are used (otherwise we should indicate type of index for \
each index, which would result into long input sequence)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "indown___Integer", "}"}], ",", 
       RowBox[{"{", "inup___Integer", "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"argsa", "=", 
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Rest", "/@", 
           RowBox[{"Sort", "[", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"indown", ",", "inup"}], "}"}], ",", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", "1"}]}], "]"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "}"}]}], "]"}], 
                 ",", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"AdjustmentBox", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "i", "]"}], ",", 
                    RowBox[{"BoxBaselineShift", "\[Rule]", 
                    RowBox[{"-", "1"}]}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}], "+", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "inup", "}"}], "]"}]}]}], "}"}]}], "]"}]}], 
                "]"}]}], "}"}], "]"}], "]"}]}], "]"}], ",", "\"\<,\>\""}], 
        "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pfd", "=", "\[IndentingNewLine]", 
          RowBox[{"Function", "[", 
           RowBox[{"StyleBox", "[", 
            RowBox[{
             RowBox[{"RowBox", "[", "argsa", "]"}], ",", 
             RowBox[{"FontSize", "\[Rule]", "Small"}], ",", 
             RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}], ",", 
             RowBox[{"AutoSpacing", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"pfi", "=", 
          RowBox[{
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<@@\>\"", ",", 
               RowBox[{"MakeExpression", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}], ",", 
                   RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"{", "##", "}"}], ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "indown", "}"}], "]"}]}], "]"}]}], "}"}], 
                 ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "&"}]}]}], "}"}], 
       ",", 
       RowBox[{"TemplateBox", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "indown", "}"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
             RowBox[{"{", "inup", "}"}]}]}], "}"}], "]"}], ",", 
         "\"\<mvDownUp\>\"", ",", 
         RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
         RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
         RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
         RowBox[{"Tooltip", "\[Rule]", 
          RowBox[{"ToString", "[", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "indown", "}"}], ",", 
             RowBox[{"{", "inup", "}"}]}], "]"}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Notation for orthogonal base symbol (default setting is \
\[DoubleStruckE] )", "Subsubsection"],

Cell[TextData[{
 "Orthogonal  base multivectors  are represented by letter  \[DoubleStruckE] \
with subscripts or superscripts (or mixed). It is assumed that up and down \
indices commute (can be permuted). This is true at least in orthonormal \
frame.  Notation will not work if algebra was not defined with ",
 StyleBox["gaDefineOrthonormalBase[ ]",
  FontWeight->"Bold"],
 " or ",
 StyleBox["gaDefineInput[]",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"baseSymbol", "[", 
        RowBox[{"in_", ",", "ra_"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sty", "=", 
           RowBox[{"(", 
            RowBox[{"FontColor", "->", 
             RowBox[{"(", 
              RowBox[{"FontColor", "/.", 
               RowBox[{"gaNotation", "[", "ra", "]"}]}], ")"}]}], ")"}]}], 
          ",", 
          RowBox[{"inEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
          RowBox[{"raEx", "=", 
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pfd", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"StyleBox", "[", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"StyleBox", "[", 
                    RowBox[{"baseSymbolN", ",", "sty"}], "]"}], ",", "#1"}], 
                  "}"}], "]"}], ",", 
                RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
                RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{"pfi", "=", 
             RowBox[{"Function", "[", 
              RowBox[{"RowBox", "[", 
               RowBox[{"{", 
                RowBox[{
                "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                 ",", "#2", ",", "\"\<]\>\""}], "}"}], "]"}], "]"}]}]}], 
           "}"}], ",", 
          RowBox[{"TemplateBox", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"inEx", ",", "raEx"}], "}"}], ",", "baseSymbolN", ",", 
            RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
            RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
            RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
            RowBox[{"Tooltip", "\[Rule]", 
             RowBox[{"ToString", "[", "ra", "]"}]}]}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"gaNotation", "[", "ra", "]"}], "]"}], "=!=", 
       "gaNotation"}]}]}]}], "]"}], ";"}]], "Input"],

Cell["Special bold notation for quaternion", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"baseSymbolN", "=", "orthonormalBaseSymbolName"}], ",", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"baseSymbol", "[", 
        RowBox[{"in_", ",", "ra_", ",", "mark_String"}], "]"}], ",", 
       RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sty", "=", 
          RowBox[{"(", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ")"}]}], ",", 
         RowBox[{"inEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"in", ",", "sf"}], "]"}]}], ",", 
         RowBox[{"raEx", "=", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"ra", ",", "sf"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"StyleBox", "[", 
              RowBox[{
               RowBox[{"RowBox", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{"baseSymbolN", ",", "sty", ",", 
                    RowBox[{"FontWeight", "\[Rule]", "Bold"}]}], "]"}], ",", 
                  "#1"}], "}"}], "]"}], ",", 
               RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
               RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
             "]"}]}], ",", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "baseSymbolN", ",", "\"\<[\>\"", ",", "#1", ",", "\"\<,\>\"", 
                ",", "#2", ",", "\"\<,\>\"", ",", "#3", ",", "\"\<]\>\""}], 
               "}"}], "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"TemplateBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"inEx", ",", "raEx", ",", "mark"}], "}"}], ",", 
           "baseSymbolN", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "mark"}]}], "]"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "For speed reasons we do not want rules for base vectors of the form  \
\[DoubleStruckE][_[],_]:=xxx; Unfortunatelly it is very usefull to make \
exception for unit element. Setting it to 1 will solve many ordering \
problems, hovewer will rezult in complications when generating tensor \
products. Therefore in these functions we need to ",
 StyleBox["Block[ ] ",
  FontWeight->"Bold"],
 "baseSymbol. For quaternions we always want this replacement to happen"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"baseSymbol", "/:", 
      RowBox[{"HoldPattern", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_", ",", "\"\<Quaternion\>\"", 
         ",", "___"}], "]"}], "]"}], "=", "1"}], ";", 
     RowBox[{"baseSymbol", "/:", 
      RowBox[{"HoldPattern", "[", 
       RowBox[{"baseSymbol", "[", 
        RowBox[{
         RowBox[{"mvDownUp", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "=", "1"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Setting notation for algebra and its elements", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaNotation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"FontColor", "->", "Automatic"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaNotation", "::", "newcolor"}], "=", 
    "\"\<Generating new color for `1`.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineNotation", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", "gaNotation"}],
        ")"}], "||", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], ",", 
        RowBox[{"{", "__Rule", "}"}]}], "]"}]}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"gaNotation", "[", "al", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{"FontColor", "->", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "value", "}"}], ",", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"value", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"FontColor", "/.", 
                  RowBox[{"FilterRules", "[", 
                   RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}]}], 
                 ")"}], "/.", 
                RowBox[{"Options", "[", "gaNotation", "]"}]}], ")"}]}], ",", 
             "_RGBColor", ",", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"alreadyUsedColors", ",", 
                RowBox[{"ColorConvert", "[", 
                 RowBox[{"value", ",", "\"\<RGB\>\""}], "]"}]}], "]"}], ";", 
              "value"}], ",", "Automatic", ",", 
             RowBox[{"pickNextColor", "[", "opts", "]"}], ",", 
             "\[IndentingNewLine]", "_", ",", 
             RowBox[{"ColorConvert", "[", 
              RowBox[{"Black", ",", "\"\<RGB\>\""}], "]"}]}], "]"}]}], 
          "]"}]}], "}"}]}], ")"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " modifies ",
 StyleBox["$PreRead",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[TextData[{
 "Rule \[DoubleStruckE][_]:>\[DoubleStruckE][__] in $PreRead ensures that \
never encountered (because of mandatory \[DoubleStruckE][index,algebra] \
syntax)  pattern with single blank is automatically replaced by blank \
sequence. This function also includes definitions for ",
 StyleBox["MV[ ]",
  FontWeight->"Bold"],
 ", which is defined in GAC_Multivector.nb. ",
 StyleBox["gaDefineInput[ ]",
  FontWeight->"Bold"],
 " is far from finished."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineInput", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Quiet", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineInput", "[", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"p_Integer", ",", "q_Integer", ",", 
       RowBox[{"r_Integer:", "0"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"defCol", ",", "downIndex"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaRunningAlgebra", "=", 
       RowBox[{"Cl", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", 
            RowBox[{"gaNotation", "[", 
             RowBox[{"Cl", "[", 
              RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], "]"}], "===", 
           "gaNotation"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mv\>\"", ",", 
             RowBox[{
              RowBox[{"RGBColor", "[", "__", "]"}], "->", 
              RowBox[{"(", 
               RowBox[{"FontColor", "/.", 
                RowBox[{"gaNotation", "[", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], 
               ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mv\>\"", ",", 
             RowBox[{"\"\<gaRunningAlgebra\>\"", "->", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"Cl", "[", 
                RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}]}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mvb\>\"", ",", 
             RowBox[{
              RowBox[{"RGBColor", "[", "__", "]"}], "->", 
              RowBox[{"(", 
               RowBox[{"FontColor", "/.", 
                RowBox[{"gaNotation", "[", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}], 
               ")"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"updateInputAlias", "[", 
            RowBox[{"\"\<mvb\>\"", ",", 
             RowBox[{"\"\<gaRunningAlgebra\>\"", "->", 
              RowBox[{"MakeBoxes", "[", 
               RowBox[{"Cl", "[", 
                RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}]}]}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "for", " ", "nested", " ", "inputs", " ", "ReplaceAll", " ", "in", " ",
         "future", " ", "can", " ", "be", " ", "replaced", " ", "by", " ", 
        "more", " ", "dangerous", " ", "ReplaceRepeated"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"baseSymbol", "=", "orthonormalBaseSymbolName"}], "}"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$PreRead", "=", 
          RowBox[{
           RowBox[{"ReplaceAll", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"(*", 
              RowBox[{
              "orthogonal", " ", "base", " ", "symbol", " ", "replacements"}],
               "*)"}], "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", "\"\<]\>\""}], 
                  "}"}], "]"}], ":>", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                   "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                   ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                   "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<_\>\"", ",", 
                   "\"\<]\>\""}], "}"}], "]"}], ":>", 
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "baseSymbol", ",", "\"\<[\>\"", ",", "\"\<__\>\"", ",", 
                   "\"\<]\>\""}], "}"}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "baseSymbol", ",", "\"\<[\>\"", ",", "ind_String", ",", 
                   "\"\<]\>\""}], "}"}], "]"}], ":>", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                  "]"}], "/;", 
                 RowBox[{"StringFreeQ", "[", 
                  RowBox[{"ind", ",", 
                   RowBox[{
                   "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", "ind_", "]"}], ",", "\"\<]\>\""}], 
                  "}"}], "]"}], ":>", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"RowBox", "[", "ind", "]"}], ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                  "]"}], "/;", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"ind", ",", 
                   RowBox[{
                   "\"\<{\>\"", "|", "\"\<}\>\"", "|", "\"\<mvDownUp\>\"", 
                    "|", "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                  "]"}], "/;", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"ind", ",", 
                   RowBox[{
                   "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
               
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}]}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra\>\"", ",", "\"\<]\>\""}], "}"}], 
                  "]"}], "/;", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"ind", ",", 
                   RowBox[{
                   "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
               
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                 "]"}], ":>", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "ind", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ",", 
                    "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], "/;", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{"ind", ",", 
                   RowBox[{
                   "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
               
               RowBox[{
                RowBox[{"RowBox", "[", 
                 RowBox[{"{", 
                  RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu_", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                 "]"}], ":>", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"baseSymbol", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<mvDownUp\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indd", ",", "\"\<}\>\""}], 
                    "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "indu", ",", "\"\<}\>\""}], 
                    "}"}], "]"}]}], "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], 
                    "]"}], ",", "\"\<,\>\"", ",", "\"\<gaRunningAlgebra\>\"", 
                    ",", "\"\<]\>\""}], "}"}], "]"}], "/;", 
                 RowBox[{"FreeQ", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"indd", ",", "indu"}], "}"}], ",", 
                   RowBox[{
                   "\"\<mvDownUp\>\"", "|", "\"\<Blank\>\"", "|", 
                    "\"\<BlankSequence\>\"", "|", "\"\<BlankNullSequence\>\"",
                     "|", "\"\<_\>\"", "|", "\"\<__\>\"", "|", 
                    "\"\<___\>\""}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"MV", " ", "symbol", " ", "replacements"}], ",", " ", 
                
                RowBox[{"not", " ", "yet", " ", "in", " ", "use"}]}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<MV\>\"", ",", "\"\<[\>\"", ",", "name_String", ",", 
                    "\"\<]\>\""}], "}"}], "]"}], ":>", 
                 RowBox[{
                 "\"\<MV[\>\"", "<>", "name", "<>", 
                  "\"\<,{},{},{},gaRunningAlgebra]\>\""}]}], ",", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "name_String", ",", "\"\<,\>\"", ",", "grade_String"}], 
                    "}"}], "]"}], ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                 RowBox[{
                  RowBox[{
                  "\"\<MV[\>\"", "<>", "name", "<>", "\"\<,{},{},{\>\"", "<>",
                    "grade", "<>", "\"\<},gaRunningAlgebra]\>\""}], "/;", 
                  RowBox[{"MemberQ", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Integer", ",", "Symbol"}], "}"}], ",", 
                    RowBox[{"Head", "[", 
                    RowBox[{"ToExpression", "[", "grade", "]"}], "]"}]}], 
                   "]"}]}]}], ",", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"name_String", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", "grade_", "]"}]}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                 RowBox[{
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", "name", "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", "grade", "]"}], ",", "\"\<,\>\"", 
                    ",", "\"\<gaRunningAlgebra]\>\""}], "}"}], "]"}], "/;", 
                  RowBox[{
                   RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"RowBox", "[", "grade", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "|", "_Symbol"}], ")"}], "..."}], 
                    "}"}]}], "]"}], "&&", 
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"name", ",", "grade"}], "}"}], ",", 
                    RowBox[{
                    "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"RowBox", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"name_String", ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", "index_", "]"}]}], "}"}], "]"}], 
                    ",", "\"\<]\>\""}], "}"}], "]"}], ":>", 
                 RowBox[{
                  RowBox[{"Module", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"rangas", ",", 
                    RowBox[{"indeksaiPerdirbti", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"RowBox", "[", "index", "]"}], "]"}], "/.", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"j_", ",", "k__"}], "]"}], ":>", 
                    RowBox[{"#", "/@", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "k"}], "}"}]}]}], ")"}], "&"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{"mvUp", ",", "mvDown", ",", "mvAbsent"}], "}"}]}],
                     "]"}]}], ",", "1"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"rangas", "=", 
                    RowBox[{"Length", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"indeksaiPerdirbti", ",", "_mvAbsent"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MV\>\"", ",", "\"\<[\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", "name", "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    
                    RowBox[{"ToBoxes", "[", "indeksaiPerdirbti", "]"}], ",", 
                    "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", "\"\<}\>\""}], "}"}], "]"}], 
                    ",", "\"\<,\>\"", ",", 
                    RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<{\>\"", ",", 
                    RowBox[{"ToString", "[", "rangas", "]"}], ",", 
                    "\"\<}\>\""}], "}"}], "]"}], ",", "\"\<,\>\"", ",", 
                    "\"\<gaRunningAlgebra]\>\""}], "}"}], "]"}]}]}], "]"}], "/;", 
                  RowBox[{
                   RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"RowBox", "[", "index", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_mvDown", "|", "_mvUp", "|", "_mvAbsent"}], 
                    ")"}], "..."}], "}"}]}], "]"}], "&&", 
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"name", ",", "index"}], "}"}], ",", 
                    RowBox[{
                    "\"\<Blank\>\"", "|", "\"\<BlankSequence\>\"", "|", 
                    "\"\<BlankNullSequence\>\"", "|", "\"\<_\>\"", "|", 
                    "\"\<__\>\"", "|", "\"\<___\>\""}]}], "]"}]}]}]}]}], 
               "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", "}"}]}], 
            "]"}], "&"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "clear", " ", "and", " ", "set", " ", "autoreplacements", " ", 
           "for", " ", "orthogonal", " ", "base", " ", "vector", " ", 
           "symbol"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", " ", "\[Rule]", " ", 
            RowBox[{"Fold", "[", 
             RowBox[{"DeleteCases", ",", 
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{"Blank", "[", "]"}], ",", 
                RowBox[{"Blank", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"SetOptions", "[", 
          RowBox[{
           RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
           RowBox[{"InputAutoReplacements", "->", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"CurrentValue", "[", 
               RowBox[{
                RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
                "InputAutoReplacements"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
               "orthonormalBaseSymbolInputAlias", "\[Rule]", "baseSymbol"}], 
               "}"}]}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"Options", "[", "gaDefineInput", "]"}]}], ")"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"BoxData", "[", 
             RowBox[{"RowBox", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Running algebra is: gaRunningAlgebra= \>\"", ",", 
                RowBox[{"TagBox", "[", 
                 RowBox[{
                  RowBox[{"StyleBox", "[", 
                   RowBox[{
                    RowBox[{"ToString", "[", "gaRunningAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "gaRunningAlgebra", "]"}], 
                    "]"}]}], "]"}], ",", "DisplayForm"}], "]"}]}], "}"}], 
              "]"}], "]"}], ",", "\"\<Print\>\"", ",", 
            RowBox[{"CellAutoOverwrite", "\[Rule]", "True"}], ",", 
            RowBox[{"GeneratedCell", "\[Rule]", "True"}]}], "]"}], "}"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Orthogonal base definition", "Subsection"],

Cell[CellGroupData[{

Cell["Index ordering and sorting", "Subsubsection"],

Cell["\<\
Help functions, which convert index set to binary like representations by \
inserting zeroes in proper places. Uncompiled versions are inactive\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvIndexToBinaryLikeRepresentation", "[", 
    RowBox[{"a_List", ",", 
     RowBox[{"al_:", "gaRunningAlgebra"}]}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Rule", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", 
    RowBox[{
     RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"0", ",", 
            RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}], 
        ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", 
    RowBox[{"mvIndexToBinaryLikeRepresentationC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", "dim", "}"}]}], "]"}], ",", "a", ",", "a"}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  Lex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "lex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero \
\[DoubleStruckE]ntry is positive.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}], ",", 
       RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
       RowBox[{"CompilationOptions", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], ",", 
          RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
          RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
         "}"}]}], ",", 
       RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"First", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  InvLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Invlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero \
\[DoubleStruckE]ntry is positive.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvLexC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"max", "=", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"Max", "[", "a1", "]"}], ",", 
               RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
            "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ap1", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
           RowBox[{"ap2", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"diff", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
              ">", "0"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"Last", "[", "diff", "]"}], ">", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "  RevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "Revlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] right-most nonzero \
\[DoubleStruckE]ntry is negative.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeRevLexC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"max", "=", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"Max", "[", "a1", "]"}], ",", 
               RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
            "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ap1", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
           RowBox[{"ap2", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"diff", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
              ">", "0"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeRevLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"Last", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "According to ",
 ButtonBox["[RA-CoNCGBinG&CA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 "   and ",
 ButtonBox["TB-GBA4GAinMP ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " InvRevLex ordering  defined (for binary representation): \[Alpha] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[">", "InvRevlex"], TraditionalForm]]],
 "\[Beta] if in vector difference \[Alpha]-\[Beta] left-most nonzero \
\[DoubleStruckE]ntry is negative.   "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvNonCommutativeInvRevLex", "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"max", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"Max", "@@", "a1"}], ",", 
          RowBox[{"Max", "@@", "a2"}]}], "]"}]}], ",", "ap1", ",", "ap2", ",",
        "diff"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ap1", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
      RowBox[{"ap2", "=", 
       RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
        RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"diff", "=", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">", 
         "0"}], ",", 
        RowBox[{
         RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvNonCommutativeInvRevLexC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"max", "=", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"Max", "[", "a1", "]"}], ",", 
               RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
            "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ap1", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
           RowBox[{"ap2", "=", 
            RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
             RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"diff", "=", 
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], 
              ">", "0"}], ",", 
             RowBox[{
              RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
            "]"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvNonCommutativeInvRevLexC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"max", "=", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"Max", "[", "a1", "]"}], ",", 
              RowBox[{"Max", "[", "a2", "]"}]}], "]"}]}], ",", "ap1", ",", 
           "ap2", ",", "diff"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ap1", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a1", ",", "max"}], "]"}]}], ";", 
          RowBox[{"ap2", "=", 
           RowBox[{"mvIndexToBinaryLikeRepresentationC", "[", 
            RowBox[{"a2", ",", "max"}], "]"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"diff", "=", 
               RowBox[{"DeleteCases", "[", 
                RowBox[{
                 RowBox[{"ap1", "-", "ap2"}], ",", "0"}], "]"}]}], "]"}], ">",
              "0"}], ",", 
            RowBox[{
             RowBox[{"First", "[", "diff", "]"}], "<", "0"}], ",", "True"}], 
           "]"}]}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell["Degree modificated orders. Uncompiled version is inactive.", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"mvNonCommutativeDeg", "[", "order_String", "]"}], "[", 
     RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
    RowBox[{"Switch", "[", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "a1", "]"}], "-", 
        RowBox[{"Length", "[", "a2", "]"}]}], ",", 
       RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
       RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
       RowBox[{
        RowBox[{"Symbol", "[", 
         RowBox[{
         "\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}], 
         "]"}], "[", 
        RowBox[{"a1", ",", "a2"}], "]"}]}]}]}]}], "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell["Compiled versions", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena1", ">", "lena2"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena1", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Inverse Degree modificated orders. Uncompiled version is inactive.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvNonCommutativeInvDeg", "[", "order_String", "]"}], "[", 
    RowBox[{"a1_List", ",", "a2_List"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "a2", "]"}], "-", 
      RowBox[{"Length", "[", "a1", "]"}]}], ",", 
     RowBox[{"_", "?", "Positive"}], ",", "True", ",", 
     RowBox[{"_", "?", "Negative"}], ",", "False", ",", "0", ",", 
     RowBox[{
      RowBox[{"Symbol", "[", 
       RowBox[{"\"\<mvNonCommutative\>\"", "<>", "order", "<>", "\"\<C\>\""}],
        "]"}], "[", 
      RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["Compiled versions", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena2"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a2", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"lena1", "=", 
             RowBox[{"Length", "[", "a1", "]"}]}], ",", 
            RowBox[{"lena2", "=", 
             RowBox[{"Length", "[", "a2", "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lena2", ">", "lena1"}], ",", "True", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"lena2", "<", "lena1"}], ",", "False", ",", 
              RowBox[{"mvNonCommutativeInvRevLexC", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvNonCommutativeInvRevLexC", "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", 
           RowBox[{"True", "|", "False"}]}], "}"}], "}"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Commutative coefficients are ordered using ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s MonomialList orders, which are \[OpenCurlyDoubleQuote]Lexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]DegreeReverseLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeLexicographic\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NegativeDegreeLexicographic\
\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NegativeDegreeReverseLexicographic\
\[CloseCurlyDoubleQuote]. These orders are expanded to include  \
\[OpenCurlyDoubleQuote]Reverse[Lexicographic]\[CloseCurlyDoubleQuote],... \
etc., which reverses monomial list order."
}], "Text"],

Cell["\<\
Below we define functions, which use above orderings to orthonormal base \
elements and index sets. \
\>", "Text"],

Cell["\<\
Ordering is defined only for same set (empty or not) of up indices. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQNoncommutative", "[", 
    RowBox[{"ord_String", ",", "ind1_", ",", "ind2_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"mvNonCommutativeLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvLex\>\"", ",", 
     RowBox[{"mvNonCommutativeInvLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<RevLex\>\"", ",", 
     RowBox[{"mvNonCommutativeRevLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvRevLex\>\"", ",", 
     RowBox[{"mvNonCommutativeInvRevLexC", "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[InvLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[RevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<Deg[InvRevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[Lex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[RevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", 
     "\"\<InvDeg[InvRevLex]\>\"", ",", 
     RowBox[{
      RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
      RowBox[{"ind1", ",", "ind2"}], "]"}], ",", "\[IndentingNewLine]", "_", 
     ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBase", "::", "UndefinedOrdering"}], ",", 
        "ord"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"orderedQCommutative", "[", 
    RowBox[{"comOrd_String", ",", "anyCoef1_", ",", "anyCoef2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"vars", "=", 
        RowBox[{"Variables", "[", 
         RowBox[{"anyCoef1", "+", "anyCoef2"}], "]"}]}], ",", "comOrdMod"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"vars", "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"OrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{"comOrd", ",", "\[IndentingNewLine]", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Lexicographic\>\"", ",", "\"\<DegreeLexicographic\>\"", ",", 
            "\"\<DegreeReverseLexicographic\>\"", ",", 
            "\"\<NegativeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeLexicographic\>\"", ",", 
            "\"\<NegativeDegreeReverseLexicographic\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MonomialList", "[", 
           RowBox[{
            RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
            "comOrd"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Reverse[Lexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[DegreeReverseLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeLexicographic]\>\"", ",", 
             "\"\<Reverse[NegativeDegreeReverseLexicographic]\>\""}], "}"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"comOrdMod", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"comOrd", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<Reverse[\>\"", "\[Rule]", "\"\<\>\""}], ",", 
               RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"MonomialList", "[", 
             RowBox[{
              RowBox[{"anyCoef1", "+", "anyCoef2"}], ",", "vars", ",", 
              "comOrdMod"}], "]"}], "]"}], "===", 
           RowBox[{"{", 
            RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}]}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", 
            "comOrd"}], "]"}], ";", "False"}]}], "\[IndentingNewLine]", 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaOrderedQ", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "gaCommutativeMonomialOrder", "\[Rule]", "\"\<Lexicographic\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], "=", 
   "\"\<Unintended attempt `1` for gaOrderedQ detected. Unexpected sorting \
rezult possible.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], "=", 
    "\"\<Ordering `1` is undefined.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"anyCoef2_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", "ind_"}],
            "]"}], ",", "al_Cl"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], "=!=", 
            RowBox[{"{", "ind2", "}"}]}], ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQNoncommutative", "[", 
           RowBox[{"ord", ",", 
            RowBox[{"{", "ind1", "}"}], ",", 
            RowBox[{"{", "ind2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anyCoef1", ",", "anyCoef2"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind2__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anyCoef1", ",", 
       RowBox[{"anyCoef2", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind2", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ind1__Integer", "?", "Positive"}], "}"}], ",", 
             "ind_"}], "]"}], ",", "al_Cl"}], "]"}]}], ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "ind_"}], "]"}], ",", "al_Cl"}], 
          "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{
       RowBox[{"anyCoef1", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "ind1", "}"}], ",", "ind"}], "]"}], ",", "al"}], 
         "]"}]}], ",", "anyCoef2", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Scalar and base element ordering. For   \[OpenCurlyDoubleQuote]InvDeg[Lex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[RevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvDeg[InvRevLex]\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]RevLex\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]InvRevLex\
\[CloseCurlyDoubleQuote] scalars are lowest elements. Note, that rules are \
complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["baseSymbol[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any_", ",", 
        RowBox[{"anycoef_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"any", ",", "anycoef", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
            "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", ",", 
            "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",", "ord"}],
          "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{"any_", ",", 
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "any", ",", "anycoef"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Scalars and base element ordering. For   \[OpenCurlyDoubleQuote]Deg[Lex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[RevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Deg[InvRevLex]\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]Lex\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]InvLex\[CloseCurlyDoubleQuote]  scalars are highest \
elements.  Note, that rules are complicated to include ordering of ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 ". This might be useful when we Block rule for ",
 StyleBox["baseSymbol[mvDownUp[{},{}],_]=1",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anycoef_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "__"}], "]"}]}], ",", "any_", 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
      RowBox[{"anycoef", ",", "any", ",", "opts"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"ind_mvDownUp", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
            "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
            "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
         "]"}], ",", "True", ",", "False"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"ind", ",", 
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
      RowBox[{
       RowBox[{"anycoef_.", "*", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{"emptyIndex_", ",", "__"}], "]"}]}], ",", "any_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"emptyIndex", ",", 
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<Deg[Lex]\>\"", ",", "\"\<Deg[InvLex]\>\"", ",", 
                "\"\<Deg[RevLex]\>\"", ",", "\"\<Deg[InvRevLex]\>\"", ",", 
                "\"\<Lex\>\"", ",", "\"\<InvLex\>\""}], "}"}], ",", "ord"}], 
             "]"}], ",", "True", ",", "False"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"orderedQCommutative", "[", 
           RowBox[{"comOrd", ",", "anycoef", ",", "any"}], "]"}]}], "]"}]}], 
       "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any", ",", "anycoef"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[TextData[{
 "Scalar ordering uses ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " standard GroebnerBase orderings defined in ",
 "MonomialList[ ]"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"any1_Plus", ",", "_", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], ",", "any1"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
     RowBox[{"_", ",", "any2_Plus", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Message", "[", 
    RowBox[{
     RowBox[{"gaOrderedQ", "::", "UnintendedAttempt"}], ",", "any2"}], 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{"any1_", ",", "any2_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"comOrd", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaOrderedQ", ",", "gaCommutativeMonomialOrder"}], 
             "]"}]}], ")"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"orderedQCommutative", "[", 
         RowBox[{"comOrd", ",", "any1", ",", "any2"}], "]"}]}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"any1", ",", "any2"}], "}"}], ",", 
        RowBox[{"MV", "|", "baseSymbol"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}], ";"}]], "Input"],

Cell["\<\
The same rules for dual base. When base elements have up and down indices the \
sorting is undefined (no rules). \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord_String", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind1_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"anyCoef2_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind_", ",", "ind2_"}], "]"}], ",", "al_Cl"}], "]"}]}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
       RowBox[{
        RowBox[{"anyCoef1", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind1", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        RowBox[{"anyCoef2", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"ind2", ",", "ind"}], "]"}], ",", "al"}], "]"}]}], ",", 
        "opts"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"anyCoef1", ",", "anyCoef2"}], "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
       RowBox[{"Not", "[", 
        RowBox[{"SameQ", "[", 
         RowBox[{"ind", ",", "ind1", ",", "ind2"}], "]"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]IncreasingPermutatons\[CloseCurlyDoubleQuote] \
ordering {{1},{2},{3},{1,2}{1,3},{2,3},....} is the same as InvDeg[Lex] \
ordering. There is possibility to define IncreasingPermutatonsWithSignature \
where {1,3}->-{1,3} (due to Odd permutation of 1,2,3). Not implemented. See \
note in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 58."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Subsets", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], ",", 
     RowBox[{"{", "len", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", "len__Integer", "}"}]}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"mvInvDegLexSortedIndexList", "[", 
          RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "len", "}"}]}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mvInvDegLexSortedIndexList", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"gr_:", "All"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Signature of increasing i.e.  InvDeg[Lex], permutations are easier to \
determine, see formulas in  ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 59."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"triangularNumber", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"n", "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}], "/", "2"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mvSignatureOfIncreasingPermutation", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", "x"}], ")"}], "-", 
       RowBox[{"triangularNumber", "[", 
        RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"OrderedQ", "[", "x", "]"}], "&&", 
     RowBox[{"(", 
      RowBox[{"And", "@@", 
       RowBox[{"Positive", "[", "x", "]"}]}], ")"}]}]}]}], ";"}]}], "Input"],

Cell["Sorting index list with given order", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaIndexSort", "[", 
    RowBox[{
     RowBox[{"ind", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"__Integer", "?", "Positive"}], "}"}], ".."}], "}"}]}], ",", 
     
     RowBox[{"ord_String:", "\"\<InvDeg[Lex]\>\""}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{"ord", ",", "\[IndentingNewLine]", "\"\<Lex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<RevLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeRevLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvRevLex\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"mvNonCommutativeInvRevLexC", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[Lex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[InvLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[RevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<Deg[InvRevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeDegC", "[", "\"\<InvRevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[Lex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<Lex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[InvLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[RevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<RevLex\>\"", "]"}], "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<InvDeg[InvRevLex]\>\"", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"mvNonCommutativeInvDegC", "[", "\"\<InvRevLex\>\"", "]"}], 
         "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "_", ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"gaOrderedQ", "::", "UndefinedOrdering"}], ",", "ord"}], 
       "]"}], ";", "ind"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Geomeric algebra orthonormal base construction", "Subsubsection"],

Cell[TextData[{
 "This slightly modified approach of base construction is due to G. Stacey \
Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaDefineOrthonormalBase", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
      "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], 
      ",", 
      RowBox[{"Quiet", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"gaGradesOnly", "\[Rule]", "All"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaDefineOrthonormalBase", "[", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"p_Integer", ",", "q_Integer", ",", 
         RowBox[{"r", ":", 
          RowBox[{"(", 
           RowBox[{"_", "?", "IntegerQ"}], ")"}], ":", "0"}]}], "]"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "baseSymbol", ",", "ord", ",", "invdeglexIndexList", ",", "indSet", 
         ",", "keysB", ",", "gr", ",", 
         RowBox[{"quiet", "=", "False"}], ",", 
         RowBox[{"al", "=", 
          RowBox[{"Cl", "[", 
           RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], ",", "grOnly", ",", 
         "algBoxes"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"unitElement", "[", "al", "]"}], "=", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"set", " ", "color"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaNotation", "[", "al", "]"}], "]"}], "===", 
             "gaNotation"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
             RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaDefineNotation", "[", 
           RowBox[{"al", ",", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"{", "opts", "}"}], ",", 
              RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}]}], "]"}]}],
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "set", " ", "and", " ", "update", " ", "input", " ", "aliases"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"gaDefineInput", "[", 
         RowBox[{"al", ",", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "opts", "}"}], ",", 
            RowBox[{"Options", "[", "gaDefineInput", "]"}]}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaVectorSpaceDimension", "[", "al", "]"}], "=", 
         RowBox[{"p", "+", "q", "+", "r"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], "=", 
         RowBox[{"Range", "[", 
          RowBox[{
           RowBox[{"p", "+", "1"}], ",", 
           RowBox[{"p", "+", "q"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"main", " ", "stuff"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ord", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{
            "gaDefineOrthonormalBase", ",", "gaNonCommutativeMonomialOrder"}],
             "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"grOnly", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gaGradesOnly", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaDefineOrthonormalBase", ",", "gaGradesOnly"}], "]"}]}],
           ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"invdeglexIndexList", "=", 
         RowBox[{"mvInvDegLexSortedIndexList", "[", 
          RowBox[{"al", ",", "grOnly"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ord", "===", "\"\<InvDeg[Lex]\>\""}], ",", 
          RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
          RowBox[{"indSet", "=", 
           RowBox[{"gaIndexSort", "[", 
            RowBox[{"invdeglexIndexList", ",", "ord"}], "]"}]}]}], "]"}], ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"keysB", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", "}"}]}], "]"}], ",", "al"}], "]"}], "&"}], "/@", 
           "indSet"}], ")"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], ",",
               "ord"}], "]"}], ",", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"al", ",", "grOnly"}], "]"}], "=", 
             RowBox[{"Prepend", "[", 
              RowBox[{"keysB", ",", 
               RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"al", ",", "grOnly"}], "]"}], "=", 
             RowBox[{"Append", "[", 
              RowBox[{"keysB", ",", 
               RowBox[{"unitElement", "[", "al", "]"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "grOnly"}], "]"}], "=", "keysB"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"assign", " ", "grades"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"gr", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
          "indSet"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", 
            RowBox[{"keysB", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
           RowBox[{"gr", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBase", ",", "Quiet"}], "]"}]}], 
           ")"}], ",", "\[IndentingNewLine]", "Automatic", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
              "alreadyPrintedList", ",", "\"\<gaDefineOrthonormalBase\>\""}], 
              "]"}]}], ",", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{
              "alreadyPrintedList", ",", "\"\<gaDefineOrthonormalBase\>\""}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"quiet", "=", "True"}]}], ",", 
            RowBox[{"quiet", "=", "False"}]}], "]"}], ",", 
          "\[IndentingNewLine]", "True", ",", 
          RowBox[{"quiet", "=", "True"}], ",", "False", ",", 
          RowBox[{"quiet", "=", "False"}], ",", "_", ",", 
          RowBox[{"quiet", "=", "False"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"quiet", ",", 
          RowBox[{
           RowBox[{"algBoxes", "=", 
            RowBox[{"ToBoxes", "[", "al", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"Cell", "[", 
                RowBox[{
                 RowBox[{"BoxData", "[", 
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<,\>\"", ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                   "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"CellPrint", "[", 
              RowBox[{"{", 
               RowBox[{"Cell", "[", 
                RowBox[{
                 RowBox[{"BoxData", "[", 
                  RowBox[{"RowBox", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "al", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "al", "]"}], "]"}]}], "]"}], ",",
                     "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], 
                   "]"}], "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], 
              "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"grOnly", "===", "All"}], ")"}], ",", 
          RowBox[{
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "=", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "grOnly"}], "]"}]}], ",", 
          RowBox[{"gaOrthonormalBase", "[", 
           RowBox[{"al", ",", "grOnly"}], "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "]"}], ";"}]}], "Input"],

Cell["\<\
When direct base is calculated, dual base is obtained by interchanging up and \
down indices AND multiplying by signature of base vector. The signature of \
simple algebra is simply a number of base vectors of negative signatures\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_Cl", ",", "___"}], "]"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Power", "[", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"Plus", "@@", 
          RowBox[{"(", 
           RowBox[{"Length", "/@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Intersection", "[", 
                RowBox[{
                 RowBox[{"gaNegativeSignatureIndexList", "[", "al", "]"}], 
                 ",", "#"}], "]"}], "&"}], "/@", 
              RowBox[{"(", 
               RowBox[{"List", "@@", 
                RowBox[{"gaGetIndex", "[", "expr", "]"}]}], ")"}]}], ")"}]}], 
           ")"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetSignature", "[", "c__", "]"}], ":=", 
      RowBox[{"1", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Signature for tensor products defined in section 6. Direct products.\
\>", "Text"],

Cell["\<\
The reciprocial base definition at the moment is  not properly tested.  Just \
takes and base downbase and interchanges up/down indices and add signature. \
The replaceWithReciprocal[baseElement_] is a help function which construct \
explicit replacement rule\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceWithReciprocal", "[", "baseElement_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"theGrade", "=", 
       RowBox[{"gaGetGrade", "[", "baseElement", "]"}]}], ",", 
      RowBox[{"replacement", "=", 
       RowBox[{"(", 
        RowBox[{"baseElement", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
           RowBox[{"mvDownUp", "[", 
            RowBox[{"b", ",", "a"}], "]"}]}], "}"}]}], ")"}]}]}], "}"}], ",", 
    
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"IntegerQ", "@@", "theGrade"}], ",", 
       RowBox[{
        RowBox[{"gaGetGrade", "[", "replacement", "]"}], "=", "theGrade"}]}], 
      "]"}], ";", 
     RowBox[{"Times", "[", 
      RowBox[{
       RowBox[{"gaGetSignature", "[", "baseElement", "]"}], ",", 
       "replacement"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.683342929221025*^9, 3.68334295053986*^9}, {
  3.683343038008635*^9, 3.683343061083718*^9}, {3.683343103928992*^9, 
  3.683343134430406*^9}, {3.683343169839989*^9, 3.68334321843463*^9}, {
  3.683343259407411*^9, 3.683343301010282*^9}, {3.683343341362471*^9, 
  3.683343474630456*^9}}],

Cell["\<\
If algebra is not specified, then all elements convert to reciprocal. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaOrthonormalToReciprocal", "[", 
      RowBox[{"exprWithDownBaseElements_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"orthogonalBaseElements", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"exprWithDownBaseElements", ",", 
             RowBox[{"bs", "[", "allarg__", "]"}], ",", "Infinity"}], "]"}], 
           "]"}]}], ",", "theAlgebras", ",", "replRules"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"theAlgebras", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"orthogonalBaseElements", ",", "_Cl", ",", "Infinity"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBase", "[", "#", "]"}], "]"}], "===", 
             "gaOrthonormalBase"}], ",", 
            RowBox[{"gaDefineOrthonormalBase", "[", 
             RowBox[{"#", ",", "opts"}], "]"}]}], "]"}], "&"}], "/@", 
         "theAlgebras"}], ";", "\[IndentingNewLine]", 
        RowBox[{"replRules", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "->", 
             RowBox[{"replaceWithReciprocal", "[", "#", "]"}]}], ")"}], "&"}],
           "/@", "orthogonalBaseElements"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"exprWithDownBaseElements", "/.", "replRules"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell["\<\
With specified algebras only replace elements of that algebra.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaOrthonormalToReciprocal", "[", 
   RowBox[{"exprWithDownBaseElements_", ",", "algebrasOnly_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"gaOrthonormalToReciprocal", "[", 
   RowBox[{"exprWithDownBaseElements", ",", 
    RowBox[{"{", "algebrasOnly", "}"}], ",", "opts"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.683345500289117*^9, 3.683345524748265*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gaOrthonormalToReciprocal", "[", 
      RowBox[{"exprWithDownBaseElements_", ",", 
       RowBox[{"{", "algebrasOnly__Cl", "}"}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "orthogonalBaseElements", ",", "replRules", ",", "algPattern"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"{", "algebrasOnly", "}"}], "]"}], "===", "1"}], ",", 
          RowBox[{"algPattern", "=", "algebrasOnly"}], ",", 
          RowBox[{"algPattern", "=", 
           RowBox[{"Alternatives", "[", "algebrasOnly", "]"}]}]}], "]"}], ";", 
        RowBox[{"orthogonalBaseElements", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{"exprWithDownBaseElements", ",", 
            RowBox[{"bs", "[", 
             RowBox[{"_", ",", "algPattern", ",", "___"}], "]"}], ",", 
            "Infinity"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaOrthonormalBase", "[", "#", "]"}], "]"}], "===", 
             "gaOrthonormalBase"}], ",", 
            RowBox[{"gaDefineOrthonormalBase", "[", 
             RowBox[{"#", ",", "opts"}], "]"}]}], "]"}], "&"}], "/@", 
         RowBox[{"{", "algebrasOnly", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"replRules", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "->", 
             RowBox[{"replaceWithReciprocal", "[", "#", "]"}]}], ")"}], "&"}],
           "/@", "orthogonalBaseElements"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"exprWithDownBaseElements", "/.", "replRules"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Sometimes it is useful to group base elements by grade, this is simply to \
implement using undocumented ",
 StyleBox["Internal`PartitionRagged[ ]",
  FontWeight->"Bold"],
 " function. Warning, code below will not work if ",
 StyleBox["Module[ ] ",
  FontWeight->"Bold"],
 "is replaced by ",
 StyleBox["With[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaOrthonormalBase", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"GroupBy", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBase", "[", 
    RowBox[{"algebra_", ",", 
     RowBox[{"gr_:", "All"}], ",", 
     RowBox[{"opts__", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grouping", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"GroupBy", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaOrthonormalBase", ",", "GroupBy"}], "]"}]}], ")"}]}], 
       ",", 
       RowBox[{"currentAlg", "=", 
        RowBox[{"gaOrthonormalBase", "[", 
         RowBox[{"algebra", ",", "gr"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "currentAlg", "]"}], "=!=", 
        "gaOrthonormalBase"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "grouping", ",", "\"\<None\>\"", ",", "currentAlg", ",", 
         "\"\<Grade\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"Internal`PartitionRagged", "[", 
          RowBox[{"currentAlg", ",", 
           RowBox[{"Length", "/@", 
            RowBox[{"Split", "[", 
             RowBox[{"currentAlg", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
                 RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
             "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell["\<\
If all base was already calculated an now we need only some part of it, then \
simply take requested grades\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOrthonormalBase", "[", 
    RowBox[{"algebra_", ",", "gr_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"gaOrthonormalBase", "[", 
       RowBox[{"algebra", ",", "All"}], "]"}], ",", 
      RowBox[{"_", "?", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"gaGetGrade", "[", "#", "]"}], ",", "gr"}], "]"}], "]"}],
           ">", "0"}], "&"}], ")"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"gaOrthonormalBase", "[", 
       RowBox[{"algebra", ",", "All"}], "]"}], "]"}], "=!=", 
     "gaOrthonormalBase"}]}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Taking grades, indices and parts of base elements", "Subsubsection"],

Cell["\<\
Grade of empty base element is zero, grade of base element multiplied by \
factor is grade of base element. Warning. Replacement of c in expression \
c_*bs_baseSymbol bu c_. would result in infinite loop. Grades of down  (by \
default) orthonormal base elements are defined during evaluation of \
gaDefineOrthonormalBase[ ] . These grades are explicitly set, for example  \
gaGetGrade[baseSymbol[mvDownUp[{1},{}],algebra]]=1 . This is useful from \
performance point of view. For base elements which contains both, down and up \
indices, however we calculate grade programically an dset it number of \
indices of up and down indices. This should not slowdown code significantly, \
because explicit set values takes place before definitions given below.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", "i1___Integer", "}"}], ",", 
            RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", "_"}], "]"}], 
        "]"}], "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"i1", ",", "j1"}], "}"}], "]"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"c_", "*", "bs_baseSymbol"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"gaGetGrade", "[", "bs", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Extract indices of multivectors", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetIndex", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{"in_mvDownUp", ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"in", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaGetIndex", "[", "c_", "]"}], ":=", 
      RowBox[{
       RowBox[{"{", "}"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
Rules for operations (sumation, multiplications, etc.) will be given after \
definition of  these operations. Here we only define how to extract  \
,,primitive\[CloseCurlyDoubleQuote] monomials.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Products and expansions", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{"(*", 
     RowBox[{"help", " ", "functions"}], "*)"}], 
    RowBox[{
    "gaCommutativeQ", ",", "gaCommutativeAllQ", ",", "gaSetNonCommutative", 
     ",", "gaSetCommutative", ",", "mvZeroGradeQ", ",", 
     RowBox[{"(*", "operations", "*)"}], "GeometricProduct", ",", "GP", ",", 
     "OuterProduct", ",", "OP", ",", "LeftContract", ",", "LC", ",", 
     "RightContract", ",", "RC", ",", "InnerProduct", ",", "IP", ",", 
     RowBox[{"(*", 
      RowBox[{"product", " ", "expansion"}], "*)"}], "gaProductExpand", ",", 
     "gaGeometricProductExpand", ",", "gaPE", ",", "gaOuterProductExpand", 
     ",", "gaGPPower", ",", "gaGPMatrixPower", ",", "gaOPPower", ",", 
     "gaOPMatrixPower", ",", "gaGeometricMatrixProduct", ",", 
     "gaOuterMatrixProduct", ",", "DorstProduct", ",", "DP"}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage messages", "Text"],

Cell[TextData[{
 "Do not use ** (",
 StyleBox["NonCommutativeMultiply[ ]",
  FontWeight->"Bold"],
 ") for geometric product!"
}], "Text"],

Cell[TextData[{
 "There is one more product, called the \[OpenCurlyDoubleQuote]Shuffle \
product\[CloseCurlyDoubleQuote], defined by Perti Lounesto in \
\[OpenCurlyDoubleQuote]Lectures on Clifford algebra\[CloseCurlyDoubleQuote] \
",
 ButtonBox["[RA-LoCGAaA] ",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 26, which has geometrical meening for \[OpenCurlyDoubleQuote]meet\
\[CloseCurlyDoubleQuote], and denoted as \[Wedge].  It is not defined at the \
moment. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeQ[f] returns True if argument f is commutative (default \
for new symbol).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "::", "usage"}], "=", 
   "\"\<gaCommutativeAllQ[expr] returns True if all subparts of expr is \
commutative.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "::", "usage"}], "=", 
   "\"\<gaSetNonCommutative[heads] sets listed heads to be noncommuting \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "::", "usage"}], "=", 
   "\"\<gaSetCommutative[head] sets listed heads to be commuting \
quantities.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "::", "usage"}], "=", 
   "\"\<mvZeroGradeQ[expr] returns True if it can  detect that multivector is \
scalar. Important note. The answer \\\"False\\\" can indicate detection \
failure, therefore the command intended only for positive decision purposes, \
i.e. on return of True. An alternative is to use gaGetGrade[ ].\>\""}], 
  ";"}]], "Input"],

Cell[TextData[{
 " If we set {",
 StyleBox["Flat",
  FontWeight->"Bold"],
 "} Attribute to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 ", we get infinite recursion limit in ",
 StyleBox["MakeBoxes",
  FontWeight->"Bold"],
 ". Therefore we implement that property without the attribute."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricProduct", "::", "usage"}], "=", 
   "\"\<GeometricProduct[a,b,...] denotes associative geometric product of \
multivectors a,b,... . Alias is GP[]. The StandardForm notation is \
\[GeometricProduct](unicode char \\ :0x26AC, in order to avoid clash with \
Mathematica EmptySmallCircle). For input use keyboard alias \[EscapeKey]gp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GP", "::", "usage"}], "=", "\"\<Alias for GeometricProduct\>\""}],
   ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OuterProduct", "::", "usage"}], "=", 
   "\"\<OuterProduct[a,b,...] denotes outer (wedge) product of multivectors \
a,b,... . Alias is OP[]. The StandardForm notation is \[OuterProduct] \
\!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{
RowBox[{\"unicode\", \" \", \"char\"}], \" \", \"\\\\:22ce\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)). For input use keyboard alias \[EscapeKey]op\[EscapeKey]. \
UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OP", "::", "usage"}], "=", "\"\<Alias for OuterProduct\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InnerProduct", "::", "usage"}], "=", 
   "\"\<InnerProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, inner product turns into scalar product. \
Alias is IP[]. The StandardForm notation is \[InnerProduct] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:2219\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]ip\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IP", "::", "usage"}], "=", "\"\<Alias for InnerProduct\>\""}], 
  ";"}]], "Input"],

Cell[TextData[{
 "\nUnortunatelly keyboad aliases  \[EscapeKey]lc\[EscapeKey] and   \
\[EscapeKey]rc\[EscapeKey] are already in use by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LeftContract", "::", "usage"}], "=", 
   "\"\<LeftContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[a]>=mvGrade[b] rezult is multivector of grade mvGrade[a]-mvGrade[b] \
and zero otherwise. Alias is LC[]. The StandardForm notation is \
\[LeftContract] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:23a6\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias \[EscapeKey]il\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LC", "::", "usage"}], "=", "\"\<Alias for LeftContract\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RightContract", "::", "usage"}], "=", 
   "\"\<RightContract[a,b] denotes inner product of multivectors a and b. If \
mvGrade[b]>=mvGrade[a] rezult is multivector of grade mvGrade[b]-mvGrade[a] \
and zero otherwise. Alias is RC[]. The StandardForm notation is \
\[RightContract] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{\"unicode\", \" \", \"char\", \" \", \"\\\\:23a3\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]ir\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RC", "::", "usage"}], "=", "\"\<Alias for RightContract\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DorstProduct", "::", "usage"}], "=", 
   "\"\<DorstProduct[a,b] denotes inner product of multivectors a and b. If \
grades of multivectors coinside, Dorst product turns into scalar product. \
Alias is DP[]. The StandardForm notation is \[DorstProduct] \!\(\*TagBox[
StyleBox[
RowBox[{\"(\", 
RowBox[{
RowBox[{\"unicode\", \" \", \"char\"}], \" \", \"\\\\:26ab\"}]}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)).\[IndentingNewLine]For input use keyboard alias  \[EscapeKey]dp\
\[EscapeKey]. UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstProduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DP", "::", "usage"}], "=", "\"\<Alias for DorstProduct\>\""}], 
  ";"}]], "Input"],

Cell["\<\
Geometric product implementation. Keep these functions in private context, \
because they are only used internally.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMu", "::", "usage"}], "=", 
   "\"\<mvMu[i_Integer?NonNegativeQ,J_List] counts elements of subset J that \
are greater than nonnegative integer i. J is subset of natural numbers. \
\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvMuS", "::", "usage"}], "=", 
   "\"\<mvMuS[I_List,J_List] for each i in I counts elements of subset J that \
are greater of i and then adds all these numbers. Uses function mvMu to count \
elements for each i.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvProductSignatureMap[I_List,J_List] provides correct sign for \
geometric product of two multivectors. Assumes that indices of base vectors \
are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAltProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAltProductSignatureMap[I_List,J_List] provides correct sign for \
alternating product of two multivectors. Assumes that indices of base vectors \
are properly ordered. Currently is not used by any other function.\>\""}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvAntisymmetricProductSignatureMap", "::", "usage"}], "=", 
   "\"\<mvAntisymmetricProductSignatureMap[I_List,J_List] provides correct \
sign for antisymmetric product of two multivectors. Assumes that indices of \
base vectors are properly ordered.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "::", "usage"}], "=", 
   "\"\<For developers. mvSetSymmetricDifference[I_List,J_List] gives \
set-symmetric difference of sets I and J.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell["Geometric product expansion", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaProductExpand", "::", "usage"}], "=", 
   "\"\<Expands geometric algebra products. Option \
Except->{InnerProduct,OuterProduct,LeftContract,RightContract} forbids \
expansion of listed products. To convert into GeometricProduct use \
gaToGeometricProduct[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductExpand", "::", "usage"}], "=", 
   "\"\<Expands only geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaPE", "::", "usage"}], "=", 
   "\"\<Alias for GeometricProductExpand[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterProductExpand", "::", "usage"}], "=", 
   "\"\<Expands outer product. To convert into GeometricProduct use \
gaToGeometricProduct[ ].\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "::", "usage"}], "=", 
   "\"\<gaGPPower[x,n_Integer] computes geometric product of n elements  x \
\[GeometricProduct] x \[GeometricProduct] ... \[GeometricProduct] x.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaGPMatrixPower[X,n_Integer] computes product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "::", "usage"}], "=", 
   "\"\<gaOPPower[x,n_Integer] computes outer product of n elements  x  \
\[OuterProduct] x  \[OuterProduct] ... \[OuterProduct] x.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "::", "usage"}], "=", 
   "\"\<gaOPMatrixPower[X,n_Integer] computes  product of n matrices X, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaGeometricMatrixProduct[A,B,...] computes  product of matrices A and \
B, elements of which are multivectors. Matrix elements are multiplied using \
geometric product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "::", "usage"}], "=", 
   "\"\<gaOuterMatrixProduct[A,B,...] computes  product of matrices A and B, \
elements of which are multivectors. Matrix elements are multiplied using \
outer product.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["\<\
Implementation of noncommutativity and noncommutative element detection\
\>", "Subsection"],

Cell[TextData[{
 "Common settings.  Explicitly declare all symbols i.e., ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ",",
 StyleBox["Power",
  FontWeight->"Bold"],
 ",etc... to be commutative by default. "
}], "Text"],

Cell[TextData[{
 "The gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " only tests commutativity of  the expressions head. The gaCommutativeAllQ",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "investigates entire expression looking at heads and arguments. If any part \
contains noncommutative head, rezult is \[OpenCurlyDoubleQuote]False\
\[CloseCurlyDoubleQuote]. So, gaCommutativeQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " \[Subset] gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". We can define even more powerfull operator ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 ", which will",
 StyleBox[" ",
  FontWeight->"Bold"],
 "look  if expression is a scalar (i.e. look for some specific inner products \
of multivectors).  Note that ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " might return",
 StyleBox[" True",
  FontWeight->"Bold"],
 " for expressions, which has ",
 StyleBox["noncommutative",
  FontWeight->"Bold"],
 " subexpressions! So  ",
 StyleBox["mvZeroGradeQ[ ] ",
  FontWeight->"Bold"],
 "\[NotSubset] ",
 "gaCommutativeAllQ",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeQ", "[", "_", "]"}], ":=", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{"c_", "?", "NumericQ"}], "]"}], ":=", "True"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", "s_Symbol", "]"}], ":=", 
   RowBox[{"gaCommutativeQ", "[", "s", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaCommutativeAllQ", "[", 
     RowBox[{"f_", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"gaCommutativeQ", "[", "f", "]"}], ",", 
      RowBox[{"Apply", "[", 
       RowBox[{"And", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"gaCommutativeAllQ", ",", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], "]"}], ",", "False"}], "]"}]}], 
   ";"}], "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Derivatives", " ", "of", " ", "MV", " ", "are", " ", "handled", " ", 
     "separatelly"}], ",", " ", 
    RowBox[{"because", " ", 
     RowBox[{"gaCommutativeAllQ", "[", " ", "]"}], " ", "do", " ", "not", " ",
      "check", " ", "for", " ", "more", " ", "complex", " ", "structures", 
     " ", "like", " ", 
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "[", "y", "]"}]}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutativeAllQ", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Derivative", "[", "_", "]"}], "[", "x___", "]"}], "[", "y___", 
     "]"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "[", 
       RowBox[{"gaCommutativeAllQ", "/@", 
        RowBox[{"{", "y", "}"}]}], "]"}]}], ",", "False"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["Set commutative and noncommutative operators.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSetNonCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "False"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "False"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSetCommutative", "[", "a__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", "x", "]"}], "=", "True"}], ";", 
        RowBox[{
         RowBox[{"gaCommutativeQ", "[", 
          RowBox[{"x", "[", "___", "]"}], "]"}], "=", "True"}]}]}], "]"}], "/@", 
     RowBox[{"{", "a", "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{
    "NonCommutativeMultiply", ",", "GeometricProduct", ",", "OuterProduct", 
     ",", "InnerProduct", ",", "LeftContract", ",", "RightContract", ",", 
     "GP", ",", "OP", ",", "IP", ",", "LC", ",", "RC"}], "}"}]}], 
  ";"}]}], "Input"],

Cell["Set commutative and non-commutative objects. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "[", 
   RowBox[{
    RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}], ",", "MV"}], 
   "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Generally  ",
 StyleBox["False",
  FontWeight->"Bold"],
 "  of ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " can mean detection failure, even when expression do is scalar (say in the \
case  complicated inner product of multivectors). As a rezult it cannot \
ensure that expression grade is zero, so only positive answers make sense and \
can be used as a test. Use ",
 "gaGetGrade",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 " if you really want to know expression grade."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"additionalTestFunction", "[", 
        RowBox[{"c_.", "*", 
         RowBox[{"baseSymbol", "[", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"additionalTestFunction", "[", "expr_", "]"}], ":=", "False"}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvZeroGradeQ", "[", "expr_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"gaCommutativeAllQ", "[", "expr", "]"}], ",", "True", ",", 
     RowBox[{"additionalTestFunction", "[", "expr", "]"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Grade calculation inside products", "Subsection"],

Cell[CellGroupData[{

Cell[" Rules for Times, Plus and nonelements", "Subsubsection"],

Cell["\<\
Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"_", "?", "NumericQ"}], "]"}], "]"}], ":=", 
    RowBox[{"{", "0", "}"}]}], " ", ";"}], 
  RowBox[{"(*", 
   RowBox[{"first", " ", "for", " ", "speed"}], " ", "*)"}]}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bs", "=", 
     RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", "expr_", "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"{", "0", "}"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "expr", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "only", " ", "multivectors", " ", "are", " ", "graded", " ", 
      "elements"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Times", "[", 
        RowBox[{"c_", ",", "d__"}], "]"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"gaGetGrade", "[", 
       RowBox[{"Times", "[", "d", "]"}], "]"}], "/;", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", 
        RowBox[{"MV", "|", "bs"}], ",", 
        RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetGrade", "[", 
      RowBox[{"Plus", "[", "x__", "]"}], "]"}], "]"}], ":=", 
    RowBox[{"Union", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"gaGetGrade", "/@", 
       RowBox[{"{", "x", "}"}]}], "]"}], "]"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "Plus", " ", "means", " ", "that", " ", "in", " ", "general", " ", "we", 
    " ", "have", " ", "a", " ", "non", " ", "homogeneus", " ", 
    "multivector"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetGrade", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"gaPE", "[", "expr", "]"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
         "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
          "LeftContract", "|", "RightContract"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules for OuterProduct", "Subsubsection"],

Cell[TextData[{
 "Rules for ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ". It is assumed, that multivectors denoted by different letters are \
linearly independent. ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " itself ensures that there are no two identical vectors in ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " . All grades which are higher than vector space dimension are removed. "
}], "Text"],

Cell[TextData[{
 "Restriction: currently only handles numerical rank values. In principle can \
be slightly improved to handle symbolic values. Note: ",
 "gaGetGrade",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " rezult depends on value of ",
 StyleBox["gaRunningAlgebra!",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetGrade", "[", 
     RowBox[{"OuterProduct", "[", "x__", "]"}], "]"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Outer", "[", 
        RowBox[{"Plus", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"(", 
           RowBox[{"gaGetGrade", "/@", 
            RowBox[{"{", "x", "}"}]}], ")"}]}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", ">", 
         RowBox[{"gaVectorSpaceDimension", "[", "gaRunningAlgebra", "]"}]}], 
        "&"}], ")"}]}]}], "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules for LeftContract, RightContract and InnerProduct", "Subsubsection"],

Cell["Not an easy task.", "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Taking parts of multivector with gaGetMV", "Subsection"],

Cell[TextData[{
 StyleBox["E",
  FontWeight->"Bold"],
 "xtract from expression part of specified grade"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[CellGroupData[{

Cell[TextData[{
 " ",
 "gaGetMV",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " extract from expression part of specified grade"
}], "Subsubsection"],

Cell[TextData[{
 " gaGetMV",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " takes multivector of specified grade or index pattern (not the grade or \
index itself !)  (the latest not yet implemented, may need to set Hold Rest \
attribute). \nIf no multivector of requested grade is found return zero. \
Serve positive {} and negative Not[{}] requests."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}], ",", "0"}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetMV", "[", 
        RowBox[{
         RowBox[{"c_.", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in_", ",", "al_"}], "]"}]}], ",", 
         RowBox[{"Not", "[", 
          RowBox[{"{", 
           RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}], 
       "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"{", "n", "}"}], ",", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"in", ",", "al"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", "0", ",", 
         RowBox[{"c", "*", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{"in", ",", "al"}], "]"}]}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "baseSymbol"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Take grades of multivector list", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{
     RowBox[{"expr", ":", 
      RowBox[{"(", 
       RowBox[{"_List", "|", "_Plus"}], ")"}]}], ",", "what_"}], "]"}], ":=", 
   
   RowBox[{
    RowBox[{
     RowBox[{"gaGetMV", "[", 
      RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "if", " ", "one", " ", "of", " ", "arguments", " ", "of", " ", 
     "noncommutative", " ", "products", " ", "is", " ", 
     RowBox[{"Plus", "[", " ", "]"}]}], ",", " ", 
    RowBox[{"expand", " ", "expression"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{"expr_", ",", "what_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"gaGetMV", "[", 
         RowBox[{"#", ",", "what"}], "]"}], "&"}], "/@", 
       RowBox[{"gaPE", "[", "expr", "]"}]}], ")"}], "/;", 
     RowBox[{"!", 
      RowBox[{"FreeQ", "[", 
       RowBox[{"expr", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
           "LeftContract", "|", "RightContract"}], ")"}], "[", 
         RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
   ";"}]}]], "Input"],

Cell["Scalar part projection", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"a_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", "0"}], "]"}]}], ",", "a", ",", "0"}], 
     "]"}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"bad", " ", "implementation", " ", "of", " ", 
     RowBox[{"Not", "[", 
      RowBox[{"{", "}"}], "]"}]}], ",", " ", 
    RowBox[{"needs", " ", "carefull", " ", "check"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n__Integer", "?", "NonNegative"}], "}"}], "]"}]}], "]"}],
         "]"}], ":=", 
       RowBox[{"expr", "/;", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "expr", "}"}], ",", 
            RowBox[{"MV", "|", "baseSymbol"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
          RowBox[{"Not", "[", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", "n", "}"}], ",", "0"}], "]"}], "]"}]}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", 
            RowBox[{"n___", ",", "0", ",", "m___"}], "}"}], "]"}]}], "]"}], 
        "]"}], ":=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"gaGetGrade", "[", "expr", "]"}], ",", "0"}], "]"}]}], 
         ",", 
         RowBox[{"gaGetMV", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"Not", "[", 
            RowBox[{"{", 
             RowBox[{"n", ",", "m"}], "}"}], "]"}]}], "]"}], ",", "0"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"Not", "[", 
           RowBox[{"{", "}"}], "]"}]}], "]"}], "]"}], ":=", "expr"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"HoldPattern", "[", 
        RowBox[{"gaGetMV", "[", 
         RowBox[{"expr_", ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}], ":=", "expr"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}]}]], "Input"],

Cell[CellGroupData[{

Cell["All other rules seems to be excessive. Supressed", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{"expr_List", ",", 
     RowBox[{"{", 
      RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"expr", ",", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "x", "}"}], ",", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", "x", "]"}], "===", 
          RowBox[{"{", "#", "}"}]}]}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", "n", "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{"expr_List", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Select", "[", 
    RowBox[{"expr", ",", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{
        RowBox[{"gaGetGrade", "[", "x", "]"}], "===", 
        RowBox[{"{", "n", "}"}]}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["Be carefull, when rezult is empty. For example Times@@{}=1!", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGetMV", "[", 
    RowBox[{"expr_", ",", "grades_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "rez", "}"}], ",", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"thisHead", "=", 
          RowBox[{"Head", "[", "expr", "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"rez", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"gaGetMV", "[", 
            RowBox[{
             RowBox[{"List", "@@", "expr"}], ",", "grades"}], "]"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"rez", "=!=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"thisHead", "@@", "rez"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}]}], "]"}]}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "NonCommutativeMultiply", ",", "GeometricProduct", ",", 
         "OuterProduct", ",", "InnerProduct", ",", "LeftContract", ",", 
         "RightContract"}], "}"}], ",", 
       RowBox[{"Head", "[", "expr", "]"}]}], "]"}]}]}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["Commuting factors out, last remains", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"a_", ",", "b__"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"gaGetMV", "[", 
      RowBox[{
       RowBox[{"Times", "[", "b", "]"}], ",", 
       RowBox[{"{", "n", "}"}]}], "]"}]}], "/;", 
    RowBox[{"mvZeroGradeQ", "[", "a", "]"}]}]}], ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["If expression is Plus[ ], take each term projections", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"expr_Plus", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetMV", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", "n", "}"}]}], "]"}], "&"}], "/@", "expr"}], ")"}]}], 
  ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell["\<\
If  one of arguments of noncommutative products is Plus[ ], expand expression\
\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaGetMV", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"{", 
       RowBox[{"n__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"gaGetMV", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", "n", "}"}]}], "]"}], "&"}], "/@", 
      RowBox[{"gaPE", "[", "expr", "]"}]}], ")"}], "/;", 
    RowBox[{"!", 
     RowBox[{"FreeQ", "[", 
      RowBox[{"expr", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Alternatives", "@@", "gaDefinedProducts"}], ")"}], "[", 
        RowBox[{"___", ",", "_Plus", ",", "___"}], "]"}]}], "]"}]}]}]}], 
  ";"}]], "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Products notations and precedence implementation (based on modification of \
UnicodeSymbols.tr file)\
\>", "Subsection"],

Cell["\<\
Based on product precedence implemented by  Mr.Wizard (also known as \
Spartacus), see \
http://mathematica.stackexchange.com/questions/89762/how-to-define-a-number-\
of-infix-operators-with-predefined-relative-precedences.

UnicodeSymbols.tr defines the following operation precedences: \
NonCommutativeMultiply (**, highest), Times (*, Space), RightContract (\
\[RightContract]), LeftContract (\[LeftContract]), InnerProduct (\
\[InnerProduct]), DorstPruduct (\[DorstProduct]), OuterProduct (\
\[OuterProduct], bad representation in text cells, input cells are ok.), \
GeometricProduct(\[GeometricProduct]), Plus (lowest).\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GP", "=", "GeometricProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OP", "=", "OuterProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LC", "=", "LeftContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RC", "=", "RightContract"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IP", "=", "InnerProduct"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DP", "=", "DorstProduct"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell["Make expressions", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[DorstProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<DorstProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[InnerProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<InnerProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[LeftContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<LeftContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[RightContract]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<RightContract\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"x", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", 
         RowBox[{
          RowBox[{"PatternSequence", "[", 
           RowBox[{"\"\<\[OuterProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"MakeExpression", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<OuterProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
          "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], 
       "]"}]}], ",", "sf"}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"x", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"PatternSequence", "[", 
          RowBox[{"\"\<\[GeometricProduct]\>\"", ",", "_"}], "]"}], ".."}]}], 
       "}"}]}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<GeometricProduct\>\"", ",", "\"\<[\>\"", ",", "##", ",", 
         "\"\<]\>\""}], "}"}], "]"}], "&"}], "@@", 
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{";;", ";;", "2"}], "]"}], "]"}], ",", "\"\<,\>\""}], "]"}]}],
     ",", "sf"}], "]"}]}]}], "Input"],

Cell[TextData[{
 StyleBox["Known issue.",
  FontColor->RGBColor[0.6, 0.4, 0.2]],
 " If output is converted to ",
 StyleBox["InputForm[ ] ",
  FontWeight->"Bold"],
 "and then edited the rezult obtained, for example as, ",
 StyleBox["Cell[\[OpenCurlyDoubleQuote]3*Sin[x]*\[DoubleStruckE][mvDownUp[{1, \
2, 3}, {}], Cl[3, 1, 0]]\[GeometricProduct]a\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Input\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 ", will not be correctly converted to expression. At the moment it is \
unclear how cells which contains no Box structures  (i.e., when cell content \
is single string) are interpreted. "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Make boxes", "Subsubsection"],

Cell[TextData[{
 "Make output boxes: use explicit brackets for multiple arguments acording to \
precedence rules (use brackets for any lower precedence operations). \
Precedeces are:  NonCommutativeMultiply (**, highest), Times (*, Space), \
RightContract (\[RightContract]), LeftContract (\[LeftContract]), \
InnerProduct (\[InnerProduct]), OuterProduct (\[OuterProduct], bad \
representation in text cells, input cells are ok.), GeometricProduct(\
\[GeometricProduct]), Plus (lowest).\n\nNote that ",
 StyleBox["Times",
  FontWeight->"Bold"],
 " have higher precedence than any of geometric products. This is somehow \
unusual assumption, however convenient one. These precedences  (except that \
of ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ") are used in many of books on GA (look for partial  list above), thought \
in some books precedences of ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " are reversed (for example, see Geometric Algebra by Eric Chisolm arXiv \
1205.5935v1). We prefer inner product to have highest priority, because from \
programming point of view we are happy to recognize scalars as soon as \
possible."
}], "Text"],

Cell["Formating expresions with single argument.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"LeftContract", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"InnerProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"DorstProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", "y_", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "y", "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{"y", ",", "sf"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "=!=", 
    "Plus"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", "y_", "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<(\>\"", ",", 
      RowBox[{"MakeBoxes", "[", 
       RowBox[{"y", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "y", "]"}], "===", "Plus"}]}]}]}], "Input"],

Cell["Formating expresions with two arguments.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[RightContract]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<(\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\"", ",", 
        "\"\<\[RightContract]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
        "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"RightContract", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], 
          ",", "\"\<\[RightContract]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
         "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"RightContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"RightContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[RightContract]\>\"", ",", "\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
    "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "LeftContract", ",", "InnerProduct", ",", "DorstProduct", ",", 
       "OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[LeftContract]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\"", ",", 
       "\"\<\[LeftContract]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[LeftContract]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
        "GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"LeftContract", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"LeftContract", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[LeftContract]\>\"", ",", "\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
    "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "InnerProduct", ",", "DorstProduct", ",", "OuterProduct", ",", 
       "GeometricProduct", ",", "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[InnerProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\"", ",", 
       "\"\<\[InnerProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[InnerProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
        "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"InnerProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"InnerProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[InnerProduct]\>\"", ",", "\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
    "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DorstProduct", ",", "OuterProduct", ",", "GeometricProduct", ",", 
       "Plus"}], "}"}], ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[DorstProduct]\>\"", 
         ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\"", ",", 
       "\"\<\[DorstProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], "}"}],
      "]"}], "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
         "\"\<\[DorstProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{"!", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
      ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"DorstProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"DorstProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
       "\"\<\[DorstProduct]\>\"", ",", "\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
    "]"}], "/;", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"OuterProduct", ",", "GeometricProduct", ",", "Plus"}], "}"}], 
     ",", 
     RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[OuterProduct]\>\"", 
          ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
         "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"x_", ",", "y__"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<(\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\"", ",", 
        "\"\<\[OuterProduct]\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
       "}"}], "]"}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"RowBox", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{
            RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
          "\"\<\[OuterProduct]\>\"", ",", 
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
     "]"}], "/;", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
       RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"OuterProduct", "[", 
      RowBox[{"y__", ",", "x_"}], "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"RowBox", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MakeBoxes", "[", 
         RowBox[{
          RowBox[{"OuterProduct", "[", "y", "]"}], ",", "sf"}], "]"}], ",", 
        "\"\<\[OuterProduct]\>\"", ",", "\"\<(\>\"", ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
     "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"GeometricProduct", ",", "Plus"}], "}"}], ",", 
      RowBox[{"Head", "[", "x", "]"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<\[GeometricProduct]\>\"",
          ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
        "}"}], "]"}], "]"}], "}"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"x_", ",", "y__"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\"", ",", 
       "\"\<\[GeometricProduct]\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}]}], 
      "}"}], "]"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"{", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{
           RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
         ",", "\"\<\[GeometricProduct]\>\"", ",", 
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"x", ",", "sf"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "=!=", "Plus"}]}]}], "\n", 
 RowBox[{
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"y__", ",", "x_"}], "]"}], ",", 
    RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RowBox", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MakeBoxes", "[", 
        RowBox[{
         RowBox[{"GeometricProduct", "[", "y", "]"}], ",", "sf"}], "]"}], 
       ",", "\"\<\[GeometricProduct]\>\"", ",", "\"\<(\>\"", ",", 
       RowBox[{"MakeBoxes", "[", 
        RowBox[{"x", ",", "sf"}], "]"}], ",", "\"\<)\>\""}], "}"}], "]"}], 
    "]"}], "/;", 
   RowBox[{
    RowBox[{"Head", "[", "x", "]"}], "===", "Plus"}]}]}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["GeometricProduct,",
  FontWeight->"Bold"],
 " OuterProduct,  LeftContract and RightContract book keeping (general \
multivectors, no ordering rules)"
}], "Subsection"],

Cell[TextData[{
 " ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " book keeping . Unfortunatelly rules for differentiation operator ",
 StyleBox["mvD[ ]",
  FontWeight->"Bold"],
 " have to be given in a more complicated way."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "asociativity", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"GeometricProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], ";"}],
    " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "singlet", " ", "rule", " ", "applies", " ", "after", " ", "moving", " ", 
     "scalar", " ", "from", " ", "GeometricProduct"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"GeometricProduct", "[", "]"}], ":=", "1"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"when", " ", "e_", "1", "*", "e_", "1"}], " ", "->", 
     RowBox[{"1", " ", "we", " ", "are", " ", "left", " ", "empty"}]}], " ", 
    "*)"}]}]}]], "Input"],

Cell[TextData[{
 "Even if argument is a scalar (i.e. satisfy ",
 "gaGetGrade",
 StyleBox["[b]={0})",
  FontWeight->"Bold"],
 ", we do not move it out of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " (it is oposite to the case with ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 "). GeometricProduct properties with respect to base of  ",
 StyleBox["gaRunningAlgebra",
  FontWeight->"Bold"],
 " are defined in Base expansion section."
}], "Text"],

Cell[TextData[{
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 " book keeping . Order of rules is important. In particularly \
HoldPattern[OuterProduct[a_]]:=a ; should be checked before commuting out \
properties, otherwise we can end with empty outerproduct."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "asociativity", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"OuterProduct", "[", "b__", "]"}], ",", "c___"}], "]"}], 
      "]"}], ":=", 
     RowBox[{"OuterProduct", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"[", 
       RowBox[{"DH", "-", 
        RowBox[{"CA2GC1", ".22", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
     RowBox[{"singlet", " ", "rule"}], ",", " ", 
     RowBox[{
     "outer", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
      "scalar", " ", "behaves", " ", "like", " ", "geometric", " ", 
      "product"}]}], "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", "a_", "]"}], "]"}], ":=", "a"}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"commuting", " ", "quantities", " ", "out"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", 
        RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"OuterProduct", "[", 
       RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "/;", 
      RowBox[{
       RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "||", 
       RowBox[{"mvZeroGradeQ", "[", "b", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OuterProduct", "[", "]"}], ":=", "$Failed"}], ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "outer", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input"],

Cell[TextData[{
 StyleBox["Note.",
  FontColor->RGBColor[1, 0.5, 0]],
 " Rule OuterProduct[A,A]->0 is only valid if A is pure product. If A is a \
sum of different grades, then the product is NOT zero!"
}], "Text"],

Cell[TextData[{
 StyleBox["LeftContract",
  FontWeight->"Bold"],
 "  (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[LeftContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]]],
 ")and ",
 StyleBox["RightContract ",
  FontWeight->"Bold"],
 " (",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["\[RightContract]",
     FontFamily->"Arial Unicode MS"], " "}]}]]],
 ")book keeping .  Both products are not associative (a\[CenterDot]b\
\[CenterDot]c syntax is undefined, i.e. forbidden). Nevertheless the rules \
below are shorter when written for multiple arguments (programming trick)"
}], "Text"],

Cell[TextData[{
 "List of equal blades are scalars.  These scalars are detected by ",
 StyleBox["mvZeroGradeQ[ ]",
  FontWeight->"Bold"],
 " condition."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"RightContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "d", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "RightContract", " ", "with", " ", "right", " ", "scalar", " ", "is", " ", 
    "simple", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "a", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "b_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "a_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"RightContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], " ",
    ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a___", ",", 
       RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"b", "*", 
      RowBox[{"LeftContract", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "d"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  
  RowBox[{"(*", 
   RowBox[{"commuting", " ", "quantities", " ", "out"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"c_", ",", "d_"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"c", "*", "d"}], "/;", 
     RowBox[{"gaCommutativeAllQ", "[", "c", "]"}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "LeftContract", " ", "with", " ", "left", " ", "scalar", " ", "is", " ", 
    "simply", " ", "Times"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
    RowBox[{"0", "/;", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Greater", "[", 
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], ",", "#"}], "]"}], 
         "&"}], "/@", 
        RowBox[{"gaGetGrade", "[", "b", "]"}]}], ")"}]}]}]}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "all", " ", "grades", " ", "of", " ", "a_", " ", "greater", 
     " ", "than", " ", "any", " ", "of", " ", "b_"}], ",", " ", 
    RowBox[{"then", " ", "zero"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"LeftContract", "[", "a_", "]"}], "]"}], ":=", "$Failed"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "singlet", " ", "should", " ", "never", " ", "appear", " ", "in", " ", 
    "contraction"}], " ", "*)"}]}]}], "Input"],

Cell[TextData[{
 "The ",
 StyleBox[" InnerProduct[ ] ",
  FontWeight->"Bold"],
 "treates scalars differently! If singlet appears in ",
 StyleBox["InnerProduct[ ]",
  FontWeight->"Bold"],
 ", this means we had multiplication with scalar. Then rezult should be set \
to zero."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", 
     RowBox[{"a___", ",", 
      RowBox[{"b_", " ", "c_"}], ",", "d___"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"b", ",", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a", ",", "c", ",", "d"}], "]"}]}], "]"}], "/;", 
    RowBox[{"gaCommutativeAllQ", "[", "b", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{"InnerProduct", "[", 
      RowBox[{"a___", ",", "b_", ",", "c___"}], "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Times", "[", 
      RowBox[{"b", ",", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{"a", ",", "c"}], "]"}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"gaCommutativeAllQ", "[", "b", "]"}], "&&", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"a", ",", "c"}], "}"}], "]"}], ">", "0"}]}]}]}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"CA2GC1", ".21", "b"}]}], "]"}], " ", "formula"}], ",", " ", 
    RowBox[{"singlet", " ", "rule"}], ",", " ", 
    RowBox[{
    "inner", " ", "product", " ", "of", " ", "multivector", " ", "and", " ", 
     "scalar", " ", "gives", " ", "0"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"InnerProduct", "[", "a_", "]"}], "]"}], ":=", "0"}], 
  ";"}]}], "Input"],

Cell["Ordering is needed only for general multivectors.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"[", 
      RowBox[{"DH", "-", 
       RowBox[{"STA3", ".13"}]}], "]"}], " ", "Canonical", " ", 
     RowBox[{"ordering", ":", " ", 
      RowBox[{
      "order", " ", "blades", " ", "by", " ", "increasing", " ", 
       "grade"}]}]}], ",", " ", 
    RowBox[{"when", " ", "equal"}], ",", " ", "lexicographically"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"GeometricProduct", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"Times", "@@", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"gaGetGrade", "[", "b", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"gaGetGrade", "[", "a", "]"}], "+", "1"}], ")"}]}], 
            "]"}]}], ")"}]}], ",", 
        RowBox[{"InnerProduct", "[", 
         RowBox[{"b", ",", "a"}], "]"}]}], "]"}], "/;", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{"Less", "@@", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"gaGetGrade", "[", "b", "]"}], ",", 
           RowBox[{"gaGetGrade", "[", "a", "]"}]}], "]"}]}], ")"}]}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"InnerProduct", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"InnerProduct", "[", 
       RowBox[{"b", ",", "a"}], "]"}], "/;", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "a", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"gaGetGrade", "[", "b", "]"}], "]"}], "===", "1"}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaGetGrade", "[", "b", "]"}], "===", 
         RowBox[{"gaGetGrade", "[", "a", "]"}]}], ")"}], "&&", 
       RowBox[{"(", 
        RowBox[{"Not", "[", 
         RowBox[{"OrderedQ", "[", 
          RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}], "]"}], "]"}], ")"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"InnerProduct", "[", "]"}], ":=", "$Failed"}], " ", ";"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "empty", " ", "inner", " ", "product", " ", "should", " ", "never", " ", 
     "appear"}], " ", "*)"}]}]}]], "Input",
 Evaluatable->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["GeometricMatrixProduct,",
  FontWeight->"Bold"],
 " OuterMatrixProduct "
}], "Subsection"],

Cell[TextData[{
 "Procedure to multiply matrices of multivectors. Implementation is taken \
from Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", 
    RowBox[{"gaGeometricMatrixProduct", ",", "gaOuterMatrixProduct"}], 
    "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"GeometricProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaGeometricMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricMatrixProduct", "[", "A_", "]"}], ":=", "A"}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"OuterProduct", ",", "A", ",", "B", ",", "Plus"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaOuterMatrixProduct", "[", 
    RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"gaOuterMatrixProduct", ",", "A", ",", 
      RowBox[{"{", "B", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "B", "}"}], "]"}], ">", "1"}]}]}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Implementation and book keeping for geometric, outer products in orthonormal \
base.\
\>", "Subsection"],

Cell[CellGroupData[{

Cell["\<\
Tools to analyse compilation to C problems (unevaluatable by default, useful \
in the case of compilation problems)\
\>", "Subsubsection"],

Cell["\<\
For example after upgrade to ubuntu 14.04 I had to make symbolic link of \
/lib/libgcc_s.so link to /lib/i386-linux-gnu.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"<<", "CCompilerDriver`"}], "\n", 
 RowBox[{"CCompilers", "[", "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"GCCCompiler", "::", "shdw"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\(\\\"GCCCompiler\\\"\\)\[NoBreak] appears \
in multiple contexts \[NoBreak]\\!\\({\\\"CCompilerDriver`GCCCompiler`\\\", \
\\\"Global`\\\"}\\)\[NoBreak]; definitions in context \
\[NoBreak]\\!\\(\\\"CCompilerDriver`GCCCompiler`\\\"\\)\[NoBreak] may shadow \
or be shadowed by other definitions. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/shdw\\\", \
ButtonNote -> \
\\\"CCompilerDriver`GCCCompiler`GCCCompiler::shdw\\\"]\\)\"\>"}]], "Message", \
"MSG"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "\<\"/usr/bin\"\>"}], 
     ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"GCC\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GCCCompiler`GCCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", 
      "\[Rule]", "\<\"/usr/bin/X11\"\>"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellCommandFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{"Compile", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", "x", "}"}], "}"}], ",", 
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}]}], "Input",
 Evaluatable->False],

Cell[BoxData["\<\"/usr/bin/gcc -shared -o \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.so\\\" -m32 -fPIC -O2 \
-D\\\"MINT_32\\\" \
-I\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/IncludeFiles/C\\\" -I\\\
\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/DeveloperKit/\
Linux/CompilerAdditions\\\" \
\\\"/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/Working-acus4-3080-2977229760-1/compiledFunction0.c\\\"  \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Links/MathLink/\
DeveloperKit/Linux/CompilerAdditions\\\" \
-L\\\"/usr/local/Wolfram/Mathematica/10.2/SystemFiles/Libraries/Linux\\\"    \
2>&1\"\>"], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               PaneBox[
                RowBox[{"{", "_Real", "}"}],
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
             "]]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
         GridBox[{
           {
            RowBox[{
             TagBox["\<\"Argument count: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Argument types: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               RowBox[{"{", "_Real", "}"}],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Variables: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", "x", "}"}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Expression: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox[
               SuperscriptBox["x", "2"],
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{10, 10.2, 5468}, {
    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
   0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {1}}, 
   Function[{$CellContext`x}, $CellContext`x^2], Evaluate, 
   LibraryFunction[
   "/home/acus/.Mathematica/ApplicationData/CCompilerDriver/BuildFolder/acus4-\
3080/compiledFunction0.so", "compiledFunction0", {{Real, 0, "Constant"}}, 
    Real]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Compiler`$CCompilerOptions", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ShellOutputFunction\>\"", "\[Rule]", "Print"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", "x", "}"}], "}"}], ",", 
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}]}], "]"}], 
  ";"}]}], "Input",
 Evaluatable->False]
}, Closed]],

Cell[CellGroupData[{

Cell["Subset counting functions", "Subsubsection"],

Cell["\<\
Counts  elements of subset j that are greater than nonnegative integer i. j \
is subset of natural numbers. Replace  to byte compiled function (WVM) if \
user uses older Mma version, for which compilation to C is not possible. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMu", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"sum", "=", "0"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"j", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
               RowBox[{"sum", "++"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", 
               RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
           "sum"}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvMu", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "_Integer"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sum", "=", "0"}], "}"}], ",", 
         RowBox[{
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"j", "[", 
                RowBox[{"[", "k", "]"}], "]"}], ">", "i"}], ",", 
              RowBox[{"sum", "++"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", 
              RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
          "sum"}]}], "]"}]}], "]"}]}]}], "]"}], ";"}]], "Input"],

Cell["\<\
Counts total number of  elements of subset j that are greater of  each of \
integers, listed in the list i.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvMuS", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"sum", "=", "0"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"sum", "=", 
              RowBox[{"sum", "+", 
               RowBox[{"mvMu", "[", 
                RowBox[{
                 RowBox[{"j", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
             
             RowBox[{"{", 
              RowBox[{"k", ",", 
               RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
           "sum"}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "False"}], 
           ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvMuS", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sum", "=", "0"}], "}"}], ",", 
         RowBox[{
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"sum", "=", 
             RowBox[{"sum", "+", 
              RowBox[{"mvMu", "[", 
               RowBox[{
                RowBox[{"j", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], ",", "i"}], "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", 
              RowBox[{"Length", "[", "j", "]"}]}], "}"}]}], "]"}], ";", 
          "sum"}]}], "]"}]}], "]"}]}]}], "]"}], ";"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 " Various products signature maps, see ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " package implementation"
}], "Subsubsection"],

Cell[CellGroupData[{

Cell["\<\
Geometric product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separately for speed. \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
When both  down and up indices present we need take into account index number \
difference between initial and contracted upper index sets (we calculate \
everything using down indices). Note that term \
(-1)^(mvMu[gap,Join[{j1},{j2}]] + mvMu[gap,Join[{j1},{j2}]]) was dropped, \
because it comes twise (once, because we indices down, and second when count \
repeated indices which are both up, i.e. in that case remove from \
intersecting up and down indices that with negative signature)  \
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"gap_", ",", "gaq_", ",", 
        RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"gap_", ",", "gaq_", ",", 
        RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}], ",", "gap", ",", "gaq"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "both"}], ",", " ", 
    RowBox[{"down", " ", "and", " ", "up", " ", "indices", " ", "present"}], 
    ",", " ", 
    RowBox[{
    "signature", " ", "is", " ", "calculated", " ", "from", " ", "Union", " ",
      "of", " ", 
     RowBox[{"indices", "!"}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"gap_", ",", "gaq_", ",", 
        RowBox[{"gar_:", "0"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"mvProductSignatureMapC", "[", 
       RowBox[{
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i1", "}"}], ",", 
          RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"{", "i2", "}"}], ",", 
          RowBox[{"{", "j2", "}"}]}], "]"}], ",", "gap", ",", "gaq"}], "]"}], 
      "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "^", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i2", "}"}], ",", 
             RowBox[{"{", "j1", "}"}]}], "]"}]}], "]"}], "+", 
         RowBox[{"mvMu", "[", 
          RowBox[{"gap", ",", 
           RowBox[{"Intersection", "[", 
            RowBox[{
             RowBox[{"{", "i1", "}"}], ",", 
             RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ")"}]}]}], ")"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"intesectionIJ", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"mvMu", "[", 
              RowBox[{
               RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
              "0"}], ",", "0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"mvMuS", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
               RowBox[{"mvMu", "[", 
                RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
           "]"}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"pp", ",", "_Integer"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"qp", ",", "_Integer"}], "}"}]}], "}"}], ",", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"intesectionIJ", "=", 
           RowBox[{"Intersection", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"mvMu", "[", 
             RowBox[{
              RowBox[{"pp", "+", "qp"}], ",", "intesectionIJ"}], "]"}], "=!=",
             "0"}], ",", "0", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"mvMuS", "[", 
               RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
              RowBox[{"mvMu", "[", 
               RowBox[{"pp", ",", "intesectionIJ"}], "]"}]}], ")"}]}]}], 
          "]"}]}], "]"}]}], "]"}]}]}], "]"}], ";"}]}], "Input"],

Cell["\<\
Alternating product signature map. Assumes natural index ordering. Down only \
and Up only cases are matched separatelly for speed. Alternating Product \
Signature map at the moment is not used. The signature map was not adopted \
for mixed up and down indices.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAltProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAltProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "i1", "}"}], ",", 
       RowBox[{"{", "i2", "}"}]}], "]"}], "*", 
     RowBox[{"mvAltProductSignatureMapC", "[", 
      RowBox[{
       RowBox[{"{", "j1", "}"}], ",", 
       RowBox[{"{", "j2", "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAltProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"sum", "=", "0"}], ",", 
               RowBox[{"intesectionIJ", "=", 
                RowBox[{"Intersection", "[", 
                 RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"OddQ", "[", 
                   RowBox[{"intesectionIJ", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                  RowBox[{"sum", "=", 
                   RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", 
                  RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
               "]"}], ";", "sum"}]}], "]"}]}], ")"}]}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAltProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"mvMuS", "[", 
           RowBox[{"iI", ",", "jJ"}], "]"}], "+", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"sum", "=", "0"}], ",", 
              RowBox[{"intesectionIJ", "=", 
               RowBox[{"Intersection", "[", 
                RowBox[{"iI", ",", "jJ"}], "]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Do", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"OddQ", "[", 
                  RowBox[{"intesectionIJ", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
                 RowBox[{"sum", "=", 
                  RowBox[{"sum", "+", "1"}]}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", 
                 RowBox[{"Length", "[", "intesectionIJ", "]"}]}], "}"}]}], 
              "]"}], ";", "sum"}]}], "]"}]}], ")"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["\<\
Antisymmetric product signature map. Assumes natural index ordering. Down \
only and Up only cases are matched separatelly for speed.  \
AntisymmetricProductSignatureMap  in the presence of both up and down indices \
is calculated of the union of indices. Contrary to mvProductSignatureMap no \
additional sign correction here.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "i1", "}"}], ",", 
      RowBox[{"{", "i2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"{", "j1", "}"}], ",", 
      RowBox[{"{", "j2", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
     RowBox[{
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i1___Integer", "}"}], ",", 
        RowBox[{"{", "j1___Integer", "}"}]}], "]"}], ",", 
      RowBox[{"mvDownUp", "[", 
       RowBox[{
        RowBox[{"{", "i2___Integer", "}"}], ",", 
        RowBox[{"{", "j2___Integer", "}"}]}], "]"}]}], "]"}], ":=", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i1", "}"}], ",", 
        RowBox[{"{", "j1", "}"}]}], "]"}], ",", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"{", "i2", "}"}], ",", 
        RowBox[{"{", "j2", "}"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"CompileTo", "/.", "$gaGlobalProperties"}], ")"}], "===", 
     "\"\<C\>\""}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mvMu", "[", 
            RowBox[{"0", ",", 
             RowBox[{"Intersection", "[", 
              RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", 
          "0", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"-", "1"}], ")"}], "^", 
           RowBox[{"(", 
            RowBox[{"mvMuS", "[", 
             RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}], ",", 
        RowBox[{"CompilationTarget", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"CompilationOptions", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
           RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], 
           ",", 
           RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}],
           "}"}]}], ",", 
        RowBox[{"\"\<RuntimeOptions\>\"", "\[Rule]", "\"\<Speed\>\""}]}], 
       "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mvAntisymmetricProductSignatureMapC", "=", 
     RowBox[{"Compile", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iI", ",", "_Integer", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"jJ", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"mvMu", "[", 
           RowBox[{"0", ",", 
            RowBox[{"Intersection", "[", 
             RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}], "!=", "0"}], ",", "0",
          ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"mvMuS", "[", 
            RowBox[{"iI", ",", "jJ"}], "]"}], ")"}]}]}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Set symmetric difference function", "Subsubsection"],

Cell[TextData[{
 "Set symmetric difference function coinsides with  Stamples ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 " implementation. Compilation of this function is not worthy (speedup is \
negligable)."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifference", "[", 
    RowBox[{"iI_List", ",", "jJ_List"}], "]"}], ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{"iI", ",", "jJ"}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Cannot apply the symmetric difference, ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Intersection[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["mvDownUp[ ]",
  FontWeight->"Bold"],
 " directly, because indices are inside ",
 StyleBox["mvDownUp[ ] ",
  FontWeight->"Bold"],
 "container. Therefore we need intermediate layer. When only down or up \
indices present, we simply pass corresponding functions to lists of integers"
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", 
       RowBox[{"{", "}"}]}], "]"}]}], "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"mvSetSymmetricDifference", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "j2_List"}], "]"}]}], "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"mvSetSymmetricDifference", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "When both type of indices present, then we have to find set symmetric \
difference of common index set. In addition we have to remember which indices \
are down and what are up. Note that ",
 StyleBox["Union[ ]",
  FontWeight->"Bold"],
 " authomatically sorts integers."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ssd", "=", 
       RowBox[{"mvSetSymmetricDifference", "[", 
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{"i1", ",", "j1"}], "]"}], ",", 
         RowBox[{"Union", "[", 
          RowBox[{"i2", ",", "j2"}], "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{
       RowBox[{"Intersection", "[", 
        RowBox[{"ssd", ",", 
         RowBox[{"Join", "[", 
          RowBox[{"i1", ",", "i2"}], "]"}]}], "]"}], ",", 
       RowBox[{"Intersection", "[", 
        RowBox[{"ssd", ",", 
         RowBox[{"Join", "[", 
          RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDownUpUnion", "[", 
    RowBox[{
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i1_List", ",", "j1_List"}], "]"}], ",", 
     RowBox[{"mvDownUp", "[", 
      RowBox[{"i2_List", ",", "j2_List"}], "]"}]}], "]"}], ":=", 
   RowBox[{"mvDownUp", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"i1", ",", "i2"}], "]"}], ",", 
     RowBox[{"Union", "[", 
      RowBox[{"j1", ",", "j2"}], "]"}]}], "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Geometric product for base multivectors", "Subsubsection"],

Cell[CellGroupData[{

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell["\<\
Fourth argument ignoreMe is needed when calculating gaTensorProduct of same \
Clifford algebras. It adds unique identificator which prevents mixing of \
different algebras base elements. Note, that in the rezult we keep the mark \
ignoreMe. This has an application in realization of multiplication of \
quaternions, which we want to be different from Cl[0,2] algebra base elements.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"other1___", ",", 
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_Cl", ",", "ignoreMe___"}], 
         "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
     RowBox[{"gaGeometricProductExpand", "[", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"other1", ",", 
        RowBox[{"mvProductSignatureMap", "[", 
         RowBox[{"du1", ",", "du2", ",", "al"}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvSetSymmetricDifferenceForIndex", "[", 
             RowBox[{"du1", ",", "du2"}], "]"}], ",", "al", ",", "ignoreMe"}],
            "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"HoldPattern", "[", 
             RowBox[{"bs", "[", 
              RowBox[{
               RowBox[{"mvDownUp", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "->", 
            "1"}], "}"}]}], ")"}], ",", "other2"}], "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Outer product for base multivectors", "Subsubsection"],

Cell[TextData[{
 "This approach of base vector multiplication is due to G. Stacey Staples,",
 ButtonBox[" [SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ".  "
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"other1___", ",", 
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_Cl"}], "]"}], ",", 
         "other2___"}], "]"}], "]"}], ":=", 
      RowBox[{"gaOuterProductExpand", "[", 
       RowBox[{"OuterProduct", "[", 
        RowBox[{"other1", ",", 
         RowBox[{"mvAntisymmetricProductSignatureMap", "[", 
          RowBox[{"du1", ",", "du2"}], "]"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUpUnion", "[", 
              RowBox[{"du1", ",", "du2"}], "]"}], ",", "al"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", "_"}], "]"}], "]"}], "->",
              "1"}], "}"}]}], ")"}], ",", "other2"}], "]"}], "]"}]}], ";"}]}],
    "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
 Left and Right contract and InnerProduct for base multivectors\
\>", "Subsubsection"],

Cell["LeftContract for two base elements", "Text"],

Cell["\<\
The definition assumes that we are dealing with Hestenes \
\[OpenCurlyDoubleQuote]mother algebra\[CloseCurlyDoubleQuote] .\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"LeftContract", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Union", "@@", "du1"}], ",", 
            RowBox[{"Union", "@@", "du2"}]}], "]"}], "]"}], "===", 
         RowBox[{"Length", "[", 
          RowBox[{"Union", "@@", "du1"}], "]"}]}], ",", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}], 
     " ", ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["RightContract for two base elements", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"RightContract", "[", 
       RowBox[{
        RowBox[{"bs", "[", 
         RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
        RowBox[{"bs", "[", 
         RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"Union", "@@", "du1"}], ",", 
           RowBox[{"Union", "@@", "du2"}]}], "]"}], "]"}], "===", 
        RowBox[{"Length", "[", 
         RowBox[{"Union", "@@", "du2"}], "]"}]}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1", ",", "al"}], "]"}], ",", 
         RowBox[{"bs", "[", 
          RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", "0"}], "]"}]}]}], 
   " ", "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Hestenes inner product for base elements", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"InnerProduct", "[", 
        RowBox[{
         RowBox[{"bs", "[", 
          RowBox[{"du1_mvDownUp", ",", " ", "al_"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{"du2_mvDownUp", ",", " ", "al_"}], "]"}]}], "]"}], "]"}], ":=",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du1", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<=", 
         RowBox[{
          RowBox[{"gaGetGrade", "[", 
           RowBox[{"bs", "[", 
            RowBox[{"du2", ",", "al"}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"LeftContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}], ",", 
        RowBox[{"RightContract", "[", 
         RowBox[{
          RowBox[{"bs", "[", 
           RowBox[{"du1", ",", "al"}], "]"}], ",", 
          RowBox[{"bs", "[", 
           RowBox[{"du2", ",", "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Expansions and conversions between different products",
 FontWeight->"Bold"]], "Subsection"],

Cell[CellGroupData[{

Cell["Simple expansions ", "Subsubsection"],

Cell["\<\
Define special command for expansion. It is more flexible, because can expand \
only specific products. This can be achieved by setting option \
Except->{RightContract, LeftContract, InnerProduct, OuterProduct}. \
Unfortunatelly I was unable to associate expansion of GeometricProduct with \
Expand command (use GeometricProduct UpValue). The reason, that function \
which has properties of GeometricProduct disappears inside Expand[]. Needs \
carefull examination if it is possible at all keep required \
GeometricProperties and at the same moment to have UpValues.\
\>", "Text"],

Cell[TextData[{
 "Extra",
 StyleBox[" gaGeometricProductExpand[ ]",
  FontWeight->"Bold"],
 " (for speed)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGeometricProductExpand", "[", "expr_", "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{"Expand", "[", 
         RowBox[{"FixedPoint", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", "#", ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}], "}"}]}], "&"}], ",", "expr"}], "]"}], "]"}],
         ",", "_bs"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaProductExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaProductExpand", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"Expand", "[", 
     RowBox[{"FixedPoint", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", "#", ")"}], "/.", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "Plus", " ", "Rules", " ", "for", " ", "GeometricProduct"}], 
              "*)"}], 
             RowBox[{
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}], ",", 
              RowBox[{"(*", 
               RowBox[{
               "Plus", " ", "Rules", " ", "for", " ", "OuterProduct"}], 
               "*)"}], 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"OuterProduct", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"OuterProduct", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
               "Plus", " ", "Rules", " ", "for", " ", "LeftContract"}], 
               "*)"}], 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"LeftContract", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"LeftContract", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}], ",", 
              RowBox[{"(*", 
               RowBox[{
               "Plus", " ", "Rules", " ", "for", " ", "RightContract"}], 
               "*)"}], 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"RightContract", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"RightContract", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}], ",", 
              RowBox[{"(*", 
               RowBox[{
               "Plus", " ", "Rules", " ", "for", " ", "InnerProduct"}], 
               "*)"}], 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"InnerProduct", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"InnerProduct", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}]}], "}"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{
                  RowBox[{"{", "#", "}"}], ",", 
                  RowBox[{"Alternatives", "@@", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                    RowBox[{"Options", "[", 
                    RowBox[{"gaProductExpand", ",", "Except"}], "]"}]}], 
                    ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
           "]"}]}], ")"}], "&"}], ",", "expr"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gaPE", "=", "gaProductExpand"}], ";"}]}], "Input"],

Cell[TextData[{
 "Separate OuterProduct expand (for speed). ",
 StyleBox["To do.",
  FontColor->RGBColor[0, 0, 1]],
 " It is posible to calculate expansion of outer products using determinants, \
i.e. without expanding sum of orthogonal vectors. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaOuterProductExpand", "[", "expr_", "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{"Expand", "[", 
         RowBox[{"FixedPoint", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"(", "#", ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"HoldPattern", "[", 
                RowBox[{"OuterProduct", "[", 
                 RowBox[{"aa___", ",", "ba_Plus", ",", "ca___"}], "]"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"OuterProduct", "[", 
                   RowBox[{"aa", ",", "#", ",", "ca"}], "]"}], "&"}], "/@", 
                 "ba"}], ")"}]}], "}"}]}], "&"}], ",", "expr"}], "]"}], "]"}],
         ",", "_bs"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simple powers", "Subsubsection"],

Cell[TextData[{
 "Powers of geometric product. Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaGPPower", "[", 
        RowBox[{
         RowBox[{"gaGeometricProductExpand", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", "expr", ",", 
       RowBox[{"gaGeometricProductExpand", "[", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaGPPower", "[", 
           RowBox[{
            RowBox[{"gaGeometricProductExpand", "[", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaGPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaGeometricProductExpand", "[", 
           RowBox[{"gaGeometricMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaGeometricProductExpand", "[", 
         RowBox[{"gaGeometricMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaGPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaGeometricProductExpand", "[", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Powers of outer product, Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". It is posible to calculate expansion of outer products of vectors (ONLY) \
using determinants, i.e. without expanding sum of orthogonal vectors. So, \
this is applied to powers as well. See ",
 ButtonBox["[WCS-TAGA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 62-66."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
     ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "0"}], ",", "1", ",", 
       RowBox[{"gaOPPower", "[", 
        RowBox[{
         RowBox[{"gaProductExpand", "[", 
          RowBox[{"OuterProduct", "[", 
           RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
         RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "False", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", "===", "1"}], ",", 
       RowBox[{"gaProductExpand", "[", "expr", "]"}], ",", 
       RowBox[{"gaProductExpand", "[", 
        RowBox[{"OuterProduct", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"gaOPPower", "[", 
           RowBox[{
            RowBox[{"gaProductExpand", "[", 
             RowBox[{"OuterProduct", "[", 
              RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
        "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaOPMatrixPower", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "0"}], ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "expr", "]"}], "]"}], ",", 
        RowBox[{"gaOPMatrixPower", "[", 
         RowBox[{
          RowBox[{"gaProductExpand", "[", 
           RowBox[{"gaOuterMatrixProduct", "[", 
            RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
          RowBox[{"n", "/", "2"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "False", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "===", "1"}], ",", "expr", ",", 
        RowBox[{"gaProductExpand", "[", 
         RowBox[{"gaOuterMatrixProduct", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"gaOPMatrixPower", "[", 
            RowBox[{
             RowBox[{"gaProductExpand", "[", 
              RowBox[{"gaOuterMatrixProduct", "[", 
               RowBox[{"expr", ",", "expr"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1"}], ")"}], "/", "2"}]}], "]"}]}], "]"}], 
         "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MatrixQ", "[", "expr", "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
5. Involutions, idempotents, norms and mathematical functions of multivectors\
\
\>", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaLinearQ", ",", "gaSetLinear", ",", "gaHomogeneusGradeQ", ",", "gaNorm",
      ",", "gaMagnitude", ",", "gaMagnitudeSquared", ",", "gaNormalize", ",", 
     "gaReverse", ",", "gaInverse", ",", "gaGradeInverse", ",", 
     "gaCliffordConjugate", ",", "gaRadonHurwitzNumber", ",", 
     "gaPrimitiveIdempotent", ",", "StartingElement", ",", 
     "gaGeometricProductSeries", ",", "gaGeometricExp", ",", "gaExp", ",", 
     "gaGeometricSin", ",", "gaSin", ",", "gaGeometricSinh", ",", "gaSinh", 
     ",", "gaGeometricCos", ",", "gaCos", ",", "gaGeometricCosh", ",", 
     "gaCosh", ",", "gaGeometricTan", ",", "gaTan", ",", "gaGeometricTanh", 
     ",", "gaTanh", ",", "gaCommutator", ",", "gaAntiCommutator", ",", 
     "gaCommutatorExpand", ",", "gaCE", ",", "gaZassenhausCoefficient", ",", 
     " ", "gaZassenhausSeries", ",", "gaZassenhausSeriesData", ",", 
     "gaSeries", ",", "gaSeriesData", ",", "gaParameterSeries", ",", 
     "gaBakerCampbellHausdorffSeries", ",", "gaBCHSeries", ",", 
     "gaBakerCampbellHausdorffTermLogarithm", ",", 
     "gaBakerCampbellHausdorffSeriesData"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["\<\
Unary operations on multivectors are gaReverse, gaMagnitude, gaInverse, \
gaGradeInverse, gaCliffordConjugate\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaLinearQ", "::", "usage"}], "=", 
   "\"\<gaLinearQ[a] returns True if function is linear in multivector \
space\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSetLinear", "::", "usage"}], "=", 
   "\"\<gaSetLinear[a,b,...] sets functions a,b,...  to be linear functions \
of multivectors.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "::", "usage"}], "=", 
   "\"\<gaHomogeneusGradeQ[expr] returns True if multivector has homogeneus \
grade.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNorm", "::", "usage"}], "=", 
   "\"\<gaNorm[mv] or  gaNorm[mv,n_Integer] computes multivector norm. It is \
not the same as gaMagnitudeSquared[]!\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitudeSquared", "::", "usage"}], "=", 
   "\"\<gaMagnitudeSquared[mv] computes multivector magnitude as absolute \
value of scalar part of multivector multiplied by reversed multivector. \
Magnitude is NOT the same as gaNorm.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "usage"}], "=", 
   "\"\<gaNormalize[mv] or  gaNormalize[mv,n_Integer] returns normalized \
(unit) multivector of mv.\>\""}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "::", "usage"}], "=", 
   "\"\<gaReverse[A_r], where A_r is single multivector (or geometric product \
of multivectors) realize reverse operation A_r -> (-1)^(r (r-1))/2 A_r (for \
homogeneus multivector of rank r) of geometric algebra (main \
antiauthomorphism, see [KG-HFinP&Sp], p.56). Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "usage"}], "=", 
   "\"\<gaMagnitude[f_multivector] gives magnitude of multivector. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaInverse", "::", "usage"}], "=", 
   "\"\<gaInverse[m] calculates the inverse of a multivector m.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "::", "usage"}], "=", 
   "\"\<gaGradeInverse[m] calculates the conjugate of a multivector \
m_r->(-1)^r m_r, see [DH-STA, formula 4.12]. Option Evaluate->True/False, \
which prevents explicit calculation of reverse of individual multivectors in \
the geometric product can be used.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "::", "usage"}], "=", 
   "\"\<gaCliffordConjugate[m] is defined as a combination of gaReverse and \
gaGradeInverse operations, see [DH-STA, formula 6.10]. Option \
Evaluate->True/False, which prevents explicit calculation of reverse of \
individual multivectors in the geometric product can be used.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "::", "usage"}], "=", 
   "\"\<gaRadonHurwitzNumber[s_Integer] gives Radon-Hurwitz number, which is \
sequence A034584 in the On-Line Encyclopedia of Integer Sequences (OEIS). The \
number of primitive idempotents of algebra Cl[p,q,0] is equal to \
q-gaRadonHurwitzNumber[q-p].\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "::", "usage"}], "=", 
   "\"\<gaPrimitiveIdempotent[algebra_Cl, opts___] returs a list of factors \
of the algebra of primitive idempotent. Representative factors of primitive \
idempotent are selected using options StartingElement->Integer (or list of \
integers) and gaNonCommutativeMonomialOrder\[Rule] (monomial ordering). \
Possible monomial orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \
\\\"InvRevLex\\\". These pure orderings can be proceeded with \\\"Deg[]\\\", \
and \\\"InvDeg[]\\\" wrappers, totally giving 4*3 possible orderings. Use \
option OutputForm\[Rule]\\\"Blades\\\" to return set of blades instead of \
factors of primitive idempotent.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StartingElement", "::", "usage"}], "=", 
   "\"\<StartingElement-> Integer or StartingElement-> {Integers}. \
StartingElement is an option for gaPrimitiveIdempotent[], which determines a \
number of blade in a list. The blade is selected as a next candidate for \
primitive idempotent factor.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricProductSeries", "::", "usage"}], "=", 
    "\"\<gaGeometricProductSeries[f_functionHead,{m_multivector,{p_,n_Integer?\
Positive:10}}] calculates the series of the function f, of a multivector m at \
point p up to a power n. Option Expand->True can be used to expand series in \
time of generation. This is much faster than later expanding held \
series.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricProductSeries[ ]. Option Expand->True can be \
used to expand series in time of generation. This is much faster than later \
expanding held series.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricExp", "::", "usage"}], "=", 
   "\"\<gaGeometricExp[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaExp[m,n] calculates the series of the function Exp, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaExp", "::", "usage"}], "=", 
   "\"\<Alias for gaGeometricExp[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSin", "::", "usage"}], "=", 
   "\"\<gaGeometricSin[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaSin[m,n] calculates the series of the function\nSin, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSin", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSin[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricSinh", "::", "usage"}], "=", 
   "\"\<gaGeometricSinh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaSinh[m,n] calculates the series of the function\nSinh, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaSinh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricSinh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCos", "::", "usage"}], "=", 
   "\"\<gaGeometricCos[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaCos[m,n] calculates the series of the function\nCos, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCos", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCos[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricCosh", "::", "usage"}], "=", 
   "\"\<gaGeometricCosh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaCosh[m,n] calculates the series of the function\nCosh, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCosh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricCosh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTan", "::", "usage"}], "=", 
   "\"\<gaGeometricTan[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaTan[m,n] calculates the series of the function\ngaTan, of a multivector m \
at point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTan", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTan[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricTanh", "::", "usage"}], "=", 
   "\"\<gaGeometricTanh[m_multivector,p_:0,n_Integer?Positive:10] or shorter \
gaTanh[m,n] calculates the series of the function\nTan, of a multivector m at \
point p up to a power n.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaTanh", "::", "usage"}], "=", 
   "\"\<Short alias for gaGeometricTanh[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutator", "::", "usage"}], "=", 
   "\"\<gaCommutator[a,b] defines notation fo quantity ab-ba\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAntiCommutator", "::", "usage"}], "=", 
   "\"\<gaAnticommutator[a,b] defines notation for quantity ab+ba\>\""}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaCommutatorExpand", "::", "usage"}], "=", 
   "\"\<gaCommutatorExpand[a,b] (alias gaCE[ ]) expands to quantity ab-ba, \
Option Except->{gaAntiCommutator} prevents expansion of \
gaAntiCommutator.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "::", "usage"}], "=", "\"\<Short alias for gaCE[ ].\>\""}],
   ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "::", "usage"}], "=", 
   "\"\<gaZassenhausCoefficient[a_,b_][p_Integer] or \
gaZassenhausCoefficient[p_Integer] gives coefficients of Zassenhaus series.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeries", "::", "usage"}], "=", 
   "\"\<gaZassenhausSeries[Exp[aa_+bb_],n_Integer?(#\[GreaterEqual]2&),opts___\
] gives expansion of Zassenhaus series to n-th order. The result is presented \
as gaBakerCampbellHausdorffSeriesData, where each term represents homogenic \
polynomial. Option Format values \\\"Right\\\" or \\\"Left\\\" gives \
left-oriented, i.e.  exp[x+y]=...exp[c3[x,y]]exp[c2[x,y]]exp[y]exp[x] or \
right-oriented, i.e. exp[x+y]=exp[x]exp[y]exp[c2[x,y]]exp[c3[x,y]]... series \
form. Commutator in output of gaZassenhausSeriesData is defined as AB-BA, \
i.e. without overal factor.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaZassenhausSeries[ ] rezult. \
gaSeriesData[gaZassenhausSeriesData[ ]] converts the rezult to gaSeriesData[ \
]. Commutator in output is defined as AB-BA, i.e. without overal \
factor.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "::", "usage"}], "=", 
   "\"\<Represents transformation data of same infinitezimal size.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "::", "usage"}], "=", 
   "\"\<gaParameterSeries[a_gaSeriesData, var] Converts gaSeriesData like \
Normal, but adds infinitizimality parameter var.\>\""}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffTermLogarithm[{exprs__String},n_Integer], \
gives n-th homogenic term of BCH series. Is used by \
gaBakerCampbellHausdorffSeries[ ] command.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "usage"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries[GeometricProduct[expr__Exp],n_Integer?(\
#\[GreaterEqual]2&),opts___ ] gives expansion of BCH series to n-th order. \
The result is presented as gaBakerCampbellHausdorffSeriesData, where each \
term represents homogenic polynomial. Option Format values \
\\\"Commutators\\\" (not implemented yet), \\\"Expand\\\" or \\\"None\\\" \
rewrites the polynomials in required form.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBCHSeries", "::", "usage"}], "=", 
   "\"\<Alias for gaBakerCampbellHausdorffSeries.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeriesData", "::", "usage"}], "=", 
   "\"\<Container of gaBakerCampbellHausdorffSeries[ ] rezult. \
gaSeriesData[gaBakerCampbellHausdorffSeriesData[ ]] converts the rezult to \
gaSeriesData[ ].\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["Unary operators", "Subsection"],

Cell[CellGroupData[{

Cell["Help functions", "Subsubsection"],

Cell[TextData[{
 StyleBox["gaSetLinear[ ]",
  FontWeight->"Bold"],
 " implements linearity property for multivectors"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaLinearQ", "[", "___", "]"}], "=", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"0", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"y_", "+", "w_"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"y", ",", "op"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "d__"}], "]"}], ",", 
              RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{
                RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
             
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"expr_", ",", 
              RowBox[{"___", "?", "OptionQ"}]}], "]"}], ":=", 
            RowBox[{"expr", "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "expr", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}], 
         "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaHomogeneusGradeQ[ ] ",
  FontWeight->"Bold"],
 "checks if expression has homogeneus grade. The ",
 StyleBox["c_.*bs[__]",
  FontWeight->"Bold"],
 " pattern only makes sense for functions, which are not mvLinear. This is ",
 StyleBox["gaHomogeneusGradeQ[ ],  gaNorm[ ],  gaMagnitude[ ],  gaInverse[ ]",
  
  FontWeight->"Bold"],
 ",... For gaLinear functions this pattern is optional."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaHomogeneusGradeQ", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"bs", "[", "__", "]"}]}], "]"}], "=", 
      RowBox[{"True", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "s_Symbol", "]"}], "=", "True"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaHomogeneusGradeQ", "[", 
     RowBox[{"c_", "?", "NumericQ"}], "]"}], "=", "True"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "when", " ", "fast", " ", "decision", " ", "is", " ", "impossible", " ", 
    "call", " ", 
    RowBox[{"gaGetGrade", "[", " ", "]"}]}], "  ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaHomogeneusGradeQ", "[", "f_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{
     RowBox[{"gaGetGrade", "[", "f", "]"}], ",", 
     RowBox[{"{", "_Integer", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multivector norm and magnitude", "Subsubsection"],

Cell[TextData[{
 "Implementation closelly follows Stample, ",
 ButtonBox["[SS-OCICAS]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ". This functions calculate norm only if all multivectors are expanded in \
orthogonal base. ",
 StyleBox["Warning",
  FontColor->RGBColor[1, 0.5, 0.5]],
 " have we blocked Abs function when calculating ",
 StyleBox["Norm[ ]",
  FontWeight->"Bold"],
 ". If algebra is not real, then this do yield wrong rezult!!!."
}], "Text"],

Cell["\<\
The norm and magnitude are not the same characteristic for general Clifford \
algebras. In particularly, magnitude squared can be negative.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNorm", "[", 
       RowBox[{"u_", ",", 
        RowBox[{"n", ":", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_Integer", "?", "Positive"}], "|", "Infinity"}], 
          ")"}]}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"Coefficient", "[", 
              RowBox[{"uexp", ",", 
               RowBox[{"Cases", "[", 
                RowBox[{"uexp", ",", "_bs", ",", "Infinity"}], "]"}]}], "]"}],
              ",", 
             RowBox[{"uexp", "/.", 
              RowBox[{"_bs", "->", "0"}]}]}], "]"}], ",", "n"}], "]"}]}], 
        "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", "\n", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaNorm", "[", "u_", "]"}], ":=", 
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uexp", "=", 
            RowBox[{"gaPE", "[", "u", "]"}]}], ",", 
           RowBox[{"Abs", "=", "Identity"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Norm", "[", 
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"Coefficient", "[", 
             RowBox[{"uexp", ",", 
              RowBox[{"Cases", "[", 
               RowBox[{"uexp", ",", "_bs", ",", "Infinity"}], "]"}]}], "]"}], 
            ",", 
            RowBox[{"uexp", "/.", 
             RowBox[{"_bs", "->", "0"}]}]}], "]"}], "]"}]}], "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "u", "}"}], ",", "MV", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["The always working, thought nonoptimal solution.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaMagnitudeSquared", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitudeSquared", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr", ",", "opts"}], "]"}], ",", "expr"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["\<\
Magnitude by definition is positive square root of  absolute value (i.e. \
positive quantity for real Clifford algebras) of scalar part of multivector \
multiplied by reversed multivector.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "unexpected"}], "=", 
   "\"\<Unexpected case when evaluating `1`. Real positive, negative or zero \
expected.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMagnitude", "::", "nonscalar"}], "=", 
   "\"\<Warning. Nonscalar value was obtained when calculating geometric \
product of multivector and reversed multivector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaMagnitude", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaMagnitude", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaMagnitudeSquared", "[", 
            RowBox[{"expr", ",", "opts"}], "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"Sqrt", "[", "nsq", "]"}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"-", "nsq"}], "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", "0", ",",
             "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaMagnitude", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaMagnitude", "::", "nonscalar"}], "]"}]}], "]"}], ";",
            "\[IndentingNewLine]", " ", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"Abs", "[", 
             RowBox[{"gaGetMV", "[", 
              RowBox[{"nsq", ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["\<\
gaNormalize normalizes multivector if magnitude  squared is numeric and not \
equal 0. For 0 warn and normalize using gaNorm. This, for example apply to \
null vectors.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaNormalize", "::", "zeroMagnitude"}], "=", 
   "\"\<Warning. Multivector `1` has zero magnidude. gaNorm[ ] will be used \
for normalization.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaNormalize", "]"}], "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaNormalize", "[", 
       RowBox[{"expr_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"nsq", "=", 
          RowBox[{"gaPE", "[", 
           RowBox[{"gaMagnitudeSquared", "[", 
            RowBox[{"expr", ",", "opts"}], "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumericQ", "[", "nsq", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{"nsq", ",", 
            RowBox[{"_", "?", "Positive"}], ",", 
            RowBox[{"expr", "/", 
             RowBox[{"Sqrt", "[", "nsq", "]"}]}], ",", 
            RowBox[{"_", "?", "Negative"}], ",", 
            RowBox[{"expr", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"-", "nsq"}], "]"}]}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{"#", ",", "0"}], "]"}], "&"}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"gaNormalize", "::", "zeroMagnitude"}], ",", "expr"}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"expr", "/", 
              RowBox[{"gaNorm", "[", "expr", "]"}]}]}], ",", "_", ",", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"gaMagnitude", "::", "unexpected"}], ",", "nsq"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"bs", "|", "MV"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}], ",", 
             RowBox[{"Message", "[", 
              RowBox[{"gaMagnitude", "::", "nonscalar"}], "]"}]}], "]"}], ";", 
           RowBox[{"expr", "/", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"Abs", "[", 
              RowBox[{"gaGetMV", "[", 
               RowBox[{"nsq", ",", 
                RowBox[{"{", "0", "}"}]}], "]"}], "]"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Involutions and their notation", "Subsubsection"],

Cell["\<\
 Syntax and notations.  Make expressions from boxes and vice versa.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"name_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"TemplateBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"TagBox", "[", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "name", "]"}], ",", 
         RowBox[{"#", "&"}], ",", 
         RowBox[{"Editable", "->", "True"}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"{", "opts", "}"}], "]"}], ">", "0"}], ",", 
         RowBox[{"MakeBoxes", "[", "opts", "]"}], ",", "\"\<Sequence[]\>\""}],
         "]"}]}], "}"}], ",", "\"\<gaReverse\>\"", ",", 
     RowBox[{"DisplayFunction", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SuperscriptBox", "[", 
         RowBox[{
          RowBox[{"RowBox", "[", 
           RowBox[{"{", "#1", "}"}], "]"}], ",", "\"\<\[Dagger]\>\""}], "]"}],
         "&"}], ")"}]}], ",", 
     RowBox[{"SyntaxForm", "\[Rule]", "SubscriptBox"}], ",", 
     RowBox[{"Tooltip", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Definitions. Reverse of multivector is a multivector itself with additional \
phase. According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56 it is named as involution R. (antiauthomorphism, i.e. changes order \
of multipliers)"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaReverse", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetLinear", "[", "gaReverse", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"bv_bs", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"grade", "=", 
          RowBox[{"First", "[", 
           RowBox[{"gaGetGrade", "[", "bv", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"grade", "*", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grade", "-", "1"}], ")"}], "/", "2"}]}], ")"}]}], "*", 
         "bv"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell["\<\
All involutions commute. If any one of them holds evaluating individual \
multivectors and other is not, then interchange evaluation order.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGradeInverse", "[", 
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaCliffordConjugate", "[", 
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], 
       ")"}]}]}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "Reverse of ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " rewrites expression from different side and then reverses  each term. \
Currently no rules for  ",
 StyleBox["InnerProduct",
  FontWeight->"Bold"],
 " and ",
 StyleBox["OuterProduct",
  FontWeight->"Bold"],
 ".\nNote on implementation. We should be carefull when operating on ",
 StyleBox["expr_GeometricProduct",
  FontWeight->"Bold"],
 ". For example, if in ",
 StyleBox["Reverse",
  FontWeight->"Bold"],
 " function we would first reverse expr, and then map gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ", we would enter into infinite loop when applied to bivector. The reason is \
that after reversion we get ",
 StyleBox["Times[-1, GeometricProduct[expr]] ",
  FontWeight->"Bold"],
 "and the mapping would again map ",
 "gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["GeometricProduct",
  FontWeight->"Bold"],
 " itself. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaReverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaReverse", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\

gaInverse is defined as gaReverse divided by gaMagnitude squared.
\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaInverse", "::", "zero"}], "=", 
    "\"\<Zero magnitude detected.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaInverse", "[", 
    RowBox[{"v_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v1", "=", 
       RowBox[{"gaMagnitudeSquared", "[", 
        RowBox[{"v", ",", "opts"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Not", "[", 
        RowBox[{
         RowBox[{"gaPE", "[", "v1", "]"}], "===", "0"}], "]"}], ",", 
       RowBox[{
        RowBox[{"gaReverse", "[", 
         RowBox[{"v", ",", "opts"}], "]"}], "/", "v1"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaInverse", "::", "zero"}], ",", "v1"}], "]"}], ";", 
        "Infinity"}]}], "]"}]}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "\nRepresentation of ",
 "gaGradeInverse",
 " closely follows notation of gaReverse. Thought ",
 StyleBox["\\ [Star]",
  FontWeight->"Bold"],
 " (unlike ",
 StyleBox["Dagger",
  FontWeight->"Bold"],
 ") is not properly handled inside ",
 StyleBox["MakeExpression[ ]",
  FontWeight->"Bold"],
 ", it works fine using ",
 StyleBox["TemplateBox[ ]",
  FontWeight->"Bold"],
 " . In principle ",
 StyleBox["\\ [Star]",
  FontWeight->"Bold"],
 " can be replaced by \:2217 , the unicode \\ :2217 char. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"name_", ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"TemplateBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"TagBox", "[", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "name", "]"}], ",", 
         RowBox[{"#", "&"}], ",", 
         RowBox[{"Editable", "->", "True"}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"{", "opts", "}"}], "]"}], ">", "0"}], ",", 
         RowBox[{"MakeBoxes", "[", "opts", "]"}], ",", "\"\<Sequence[]\>\""}],
         "]"}]}], "}"}], ",", "\"\<gaGradeInverse\>\"", ",", 
     RowBox[{"DisplayFunction", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"SuperscriptBox", "[", 
         RowBox[{
          RowBox[{"RowBox", "[", 
           RowBox[{"{", "#1", "}"}], "]"}], ",", 
          "\"\<\[NegativeThickSpace]\[NegativeThickSpace]\[NegativeThickSpace]\
\[Star]\>\""}], "]"}], "&"}], ")"}]}], ",", 
     RowBox[{"SyntaxForm", "\[Rule]", "SubscriptBox"}], ",", 
     RowBox[{"Tooltip", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Definition of  gaGradeInverse",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 ". According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaGradeInverse",
 StyleBox["[ ] ",
  FontWeight->"Bold"],
 "is involution M (main involution).  See also ",
 ButtonBox["[DH-STA4 .12 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 17. This operation change sign of all odd grade multivectors. It does \
not change order of terms (proper automorphism, i.e. order of multipliers \
remain the same)."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGradeInverse", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetLinear", "[", "gaGradeInverse", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"bv_bs", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"grade", "=", 
          RowBox[{"First", "[", 
           RowBox[{"gaGetGrade", "[", "bv", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", "grade", ")"}]}], "*", "bv"}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}]], "Input"],

Cell["\<\
All involutions commute. If any one of them holds  evaluation of individual \
multivectors and other is not, then interchange evaluation order.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaReverse", "[", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGradeInverse", "[", 
    RowBox[{
     RowBox[{"gaCliffordConjugate", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaCliffordConjugate", "[", 
     RowBox[{
      RowBox[{"gaGradeInverse", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], 
       ")"}]}]}]}]}], ";"}]], "Input"],

Cell[TextData[{
 "\nDefinitions of gaCliffordConjugate (see  ",
 ButtonBox["[DH-STA6 .10 ]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 21).  According to ",
 ButtonBox["[KG-HFinP&Sp]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", p. 56  gaCliffordConjugate",
 StyleBox[" [ ]",
  FontWeight->"Bold"],
 " is involution (antiauthomorphism, i.e. changes order of multipliers) C \
(Clifford conjugation ). Thought gaCliffordConjugate can be expressed using \
gaCliffordConjugate and ",
 StyleBox["gaReverse",
  FontWeight->"Bold"],
 " as ",
 "gaCliffordConjugate",
 StyleBox["[v_,opts___?OptionQ]:=",
  FontWeight->"Bold"],
 "gaGradeInverse",
 StyleBox["[gaReverse[v,opts],opts]",
  FontWeight->"Bold"],
 ", we preffer direct calculation"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCliffordConjugate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Evaluate", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSetLinear", "[", "gaCliffordConjugate", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"bv_bs", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"grade", "=", 
          RowBox[{"First", "[", 
           RowBox[{"gaGetGrade", "[", "bv", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", 
          RowBox[{"(", 
           RowBox[{"grade", "*", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"grade", "+", "1"}], ")"}], "/", "2"}]}], ")"}]}], "*", 
         "bv"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "See implemetation note for ",
 "gaReverse",
 StyleBox["[ ]",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{"expr_GeometricProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", "expr"}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
All involutions commute. If any one of them  holds evaluation of individual \
multivectors and other is not, then interchange evaluation order.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{
     RowBox[{"gaReverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaReverse", "[", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaReverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaCliffordConjugate", "[", 
    RowBox[{
     RowBox[{"gaGradeInverse", "[", 
      RowBox[{"expr_", ",", 
       RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaGradeInverse", "[", 
     RowBox[{
      RowBox[{"gaCliffordConjugate", "[", 
       RowBox[{"expr", ",", "opts"}], "]"}], ",", "op"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Evaluate", "/.", 
        RowBox[{"{", "opts", "}"}]}], "/.", 
       RowBox[{"Options", "[", 
        RowBox[{"gaCliffordConjugate", ",", "Evaluate"}], "]"}]}], ")"}], "&&", 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Evaluate", "/.", 
         RowBox[{"{", "op", "}"}]}], "/.", 
        RowBox[{"Options", "[", 
         RowBox[{"gaGradeInverse", ",", "Evaluate"}], "]"}]}], ")"}]}]}]}]}], 
  ";"}]], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Idempotents and ideals", "Subsection"],

Cell[CellGroupData[{

Cell["Help functions", "Subsubsection"],

Cell[TextData[{
 "Sequence A034584  in OEIS:  Radon-Hurwitz numbers: log_2 of dimension of an \
irreducible R-module for Clifford algebra Cl_n.  Generating function: x*(1+ x \
+ x^3 + x^7)/((1 - x)*(1 - x^8)), i.\[DoubleStruckE]. \
CoefficientList[Normal[Series[x*(1+x+x^3+x^7)/((1-x)*(1-x^8)),{x,0,100}]],x]\n\
This matches sequence [PL-GPW] Perti Lounesto, G.P. Wene \
\[OpenCurlyDoubleQuote]Indepotent structure of Clifford algebras\
\[CloseCurlyDoubleQuote] Acta Applicandae ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "e,  9, (1987), 165-173"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"gaRadonHurwitzNumber", "[", 
      RowBox[{"s", "-", "8"}], "]"}], "+", "4"}], "/;", 
    RowBox[{"s", "\[GreaterEqual]", "8"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", "s_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"s", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", 
      ",", "2", ",", "3", ",", "2", ",", "4", ",", "3", ",", "5", ",", "3", 
      ",", "6", ",", "3", ",", "7", ",", "3"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"-", "1"}], "\[LessEqual]", "s", "\[LessEqual]", "7"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaRadonHurwitzNumber", "[", 
    RowBox[{"s_Integer", "?", "Negative"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"s", "+", "8"}], "]"}], "-", "4"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberOfPrimitiveIdempotents", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"p_", ",", "q_", ",", "0"}], "]"}], "]"}], ":=", 
   RowBox[{"q", "-", 
    RowBox[{"gaRadonHurwitzNumber", "[", 
     RowBox[{"q", "-", "p"}], "]"}]}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Primitive idempotents", "Subsubsection"],

Cell[TextData[{
 "By [PL-GPW] primitive idempotent of Cl(p,q) is a product of type \
(1+blade)..., where blade squares to 1 and all blades forms commuting set. \
The  ",
 StyleBox["commutingWithElement[] ",
  FontWeight->"Bold"],
 " test if blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 " of the blade list ",
 StyleBox[" testList",
  FontWeight->"Bold"],
 " commutes with this blade. The function then deletes all blades, which do \
not commute with blade at position ",
 StyleBox["startEl",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"commutingWithElement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"testList_List", ",", "startEl_List"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"in", "=", 
         RowBox[{"RotateLeft", "[", 
          RowBox[{"testList", ",", 
           RowBox[{
            RowBox[{"startEl", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}]}], ",", 
        RowBox[{"quiet", "=", 
         RowBox[{"(", 
          RowBox[{"Quiet", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", 
        RowBox[{"ord", "=", 
         RowBox[{"(", 
          RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}]}], ",", "fe", ",", "rez"}], 
       "}"}], ",", 
      RowBox[{
       RowBox[{"Sow", "[", 
        RowBox[{"fe", "=", 
         RowBox[{"First", "[", "in", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rez", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Rest", "[", "in", "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"fe", ",", "#"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"#", ",", "fe"}], "]"}]}], "===", "0"}], ")"}], 
             "&"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"!", "quiet"}], "&&", 
          RowBox[{
           RowBox[{"Length", "[", "rez", "]"}], ">", "0"}]}], ",", 
         RowBox[{"CellPrint", "[", 
          RowBox[{"{", 
           RowBox[{"TextCell", "[", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"TextCell", "[", "\"\<Blade \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "fe", "]"}], ",", 
                  RowBox[{
                  "TextCell", "[", "\"\<commute with blades \>\"", "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", "rez", "]"}]}], "}"}], "]"}],
                ",", 
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "TextCell", "[", "\"\<Next selected blade number is \>\"", 
                   "]"}], ",", 
                  RowBox[{"ExpressionCell", "[", 
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", "startEl", "]"}], "]"}], 
                   "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}], "}"}], 
          "]"}]}], "]"}], ";", 
       RowBox[{"{", 
        RowBox[{"rez", ",", 
         RowBox[{"RotateLeft", "[", "startEl", "]"}]}], "}"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "testList", "]"}], ">", "0"}]}]}], ";"}]], "Input"],

Cell["\<\
After system of commuting blades which square to 1 is formed, we need to \
remove of them all blades, which are products of blades which are in the \
beginning of the list. Recursive implementation of removing product blades, \
i.\[DoubleStruckE]. blades which are products of blades in the begining of \
given list. The initial blade ordering by default is \
\[OpenCurlyDoubleQuote]InvDeg[Lex]\[CloseCurlyDoubleQuote], which can be \
changed to any other by option gaNonCommutativeMonomialOrder->order.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other___"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", "nextAccept", "}"}], ",", 
       RowBox[{"{", "other", "}"}]}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nextAccept_", ",", "other__"}], "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", 
     RowBox[{"removeProductsOfElements", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"accepted", ",", "nextAccept"}], "}"}], ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"removeElems", "=", 
           RowBox[{"ReplaceAll", "[", 
            RowBox[{
             RowBox[{"GeometricProduct", "@@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", 
                   RowBox[{"#", ",", "nextAccept"}], "}"}], "]"}], "&"}], "/@", 
                RowBox[{"Rest", "[", 
                 RowBox[{"Subsets", "[", 
                  RowBox[{"{", "accepted", "}"}], "]"}], "]"}]}], ")"}]}], 
             ",", 
             RowBox[{
              RowBox[{"-", "any_"}], "\[RuleDelayed]", "any"}]}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"{", "other", "}"}], ",", 
           RowBox[{"Alternatives", "@@", "removeElems"}]}], "]"}]}], "]"}]}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "nextAccept_", "}"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sow", "[", "nextAccept", "]"}], ";", "Nothing"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "accepted__", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "Nothing"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeProductsOfElements", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Function ",
 StyleBox["gaPrimitiveIdempotent[al_Cl] ",
  FontWeight->"Bold"],
 " returns list of primitive idempotens of algebra. Geometric multiplication \
of list element will give representative of primitive idempotent. Different \
representatives can be obtained either by using different sorting of \
monomials or by manually selecting prefered blades, or combining both. The \
rezult then is checked if proper number of required product blades is \
obtained.  "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], 
    "=", "\"\<Radon-Hurwitz number of expected commuting idempotents for \
algebra `1` is `2`. It does not match length of rezult. Something goes wrong.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaPrimitiveIdempotent", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"StartingElement", "\[Rule]", "1"}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{
     "gaNonCommutativeMonomialOrder", "\[Rule]", "\"\<InvDeg[Lex]\>\""}], ",", 
     RowBox[{"OutputForm", "\[Rule]", "\"\<IdempotentFactors\>\""}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaPrimitiveIdempotent", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "base", ",", "ord", ",", "startElement", ",", "positiveBlades", ",", 
       "commutingPositiveBlades", ",", "commutingPositiveBladesProductFree", 
       ",", "idempotentList", ",", 
       RowBox[{"of", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"OutputForm", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaPrimitiveIdempotent", ",", "OutputForm"}], "]"}]}], 
         ")"}]}], ",", 
       RowBox[{"expectedNumberOfPrimitiveIdempotents", "=", 
        RowBox[{"numberOfPrimitiveIdempotents", "[", "al", "]"}]}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ord", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{
          "gaPrimitiveIdempotent", ",", "gaNonCommutativeMonomialOrder"}], 
          "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
          "gaOrthonormalBase"}], ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"base", "=", 
         RowBox[{"gaDefineOrthonormalBase", "[", 
          RowBox[{"al", ",", 
           RowBox[{"Quiet", "\[Rule]", "True"}], ",", 
           RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"base", "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
              RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
         RowBox[{"gaRunningAlgebra", "=", "al"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"startElements", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"StartingElement", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaPrimitiveIdempotent", ",", "StartingElement"}], 
            "]"}]}], ")"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Quiet", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaPrimitiveIdempotent", ",", "Quiet"}], "]"}]}], ")"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"positiveBlades", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"DeleteCases", "[", 
            RowBox[{"base", ",", "1"}], "]"}], ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"#", ",", "#"}], "]"}], "===", "1"}], "&"}], ")"}]}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
           RowBox[{"#1", ",", "#2"}], "]"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", "\"\<Blades, which square to 1 are \>\"", 
                 "]"}], ",", 
                RowBox[{"ExpressionCell", "[", "positiveBlades", "]"}]}], 
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"commutingPositiveBlades", "=", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"Reap", "[", 
          RowBox[{"NestWhile", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"commutingWithElement", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Quiet", "\[Rule]", "quiet"}], ",", 
               RowBox[{"gaNonCommutativeMonomialOrder", "\[Rule]", "ord"}]}], 
              "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"positiveBlades", ",", "startElements"}], "}"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], ">", "0"}], "&"}]}], 
           "]"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "quiet"}], ",", 
        RowBox[{"CellPrint", "[", 
         RowBox[{"{", 
          RowBox[{"TextCell", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "TextCell", "[", 
                 "\"\<Full system of commuting blades are\>\"", "]"}], ",", 
                RowBox[{
                "ExpressionCell", "[", "commutingPositiveBlades", "]"}]}], 
               "}"}], "]"}], "}"}], "]"}], "]"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"commutingPositiveBladesProductFree", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Reap", "[", 
         RowBox[{"removeProductsOfElements", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", "commutingPositiveBlades"}], "]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"idempotentList", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "/", "2"}], ")"}], 
          RowBox[{"(", 
           RowBox[{"1", "+", "#"}], ")"}]}], "&"}], "/@", 
        "commutingPositiveBladesProductFree"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"expectedNumberOfPrimitiveIdempotents", "=!=", 
         RowBox[{"Length", "[", "commutingPositiveBladesProductFree", "]"}]}],
         ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{
          "gaPrimitiveIdempotent", "::", "numberOfPrimitivesMismatch"}], ",", 
          "al", ",", "expectedNumberOfPrimitiveIdempotents"}], "]"}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"of", "=!=", "\"\<Blades\>\""}], ",", "idempotentList", ",", 
        "commutingPositiveBladesProductFree"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Series ", "Subsection"],

Cell[CellGroupData[{

Cell["GeometricProductSeries", "Subsubsection"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaGeometricProductSeries[ ] ",
  FontWeight->"Bold"],
 "is taken  from package ",
 StyleBox["clifford.m",
  FontWeight->"Bold"],
 "  (version 1.3 (Oct,2007): authors G. Aragon-Camarasa, J.L. Aragon, G. \
Aragon and M.A. Rodriguez )."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "gaSeriesData", "}"}]}], " ", ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "::", "function"}], "=", 
   "\"\<The expanded function `1` contains noncommutative operations \
(GeometricProduct or other). Current implementation is not ready to handle \
such cases. Use only with single argument!!!\>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaGeometricProductSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaGeometricProductSeries", "[", 
    RowBox[{
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Function", "|", "_Symbol"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"point_", "?", "NumberQ"}], ",", 
         RowBox[{"n_Integer", "?", "Positive"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"Series", "[", 
         RowBox[{
          RowBox[{"sym", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "point", ",", "n"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"res", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"a", "=", "1"}], ",", 
       RowBox[{"expansion", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Expand", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaGeometricProductSeries", ",", "Expand"}], "]"}]}], 
          ")"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"sym", ",", 
           RowBox[{
           "GeometricProduct", "|", "OuterProduct", "|", "InnerProduct", "|", 
            "LeftContract", "|", "RightContract"}]}], "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaGeometricProductSeries", "::", "function"}], ",", 
          "sym"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[NotEqual]", "0"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{"expansion", ",", 
             RowBox[{"a", "=", 
              RowBox[{"gaGeometricProductExpand", "[", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", "m"}], "]"}], "]"}]}], ",", 
             RowBox[{"a", "=", 
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"a", ",", "m"}], "]"}]}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"res", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Coefficient", "[", 
                RowBox[{"s", ",", "x", ",", "i"}], "]"}], "*", "a"}], "}"}], 
             ",", "i"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"gaSeriesData", "@@", 
       RowBox[{"{", 
        RowBox[{"point", ",", "res"}], "}"}]}]}]}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 " returns ",
 StyleBox["gaSeriesData[ ] ",
  FontWeight->"Bold"],
 "series data (mimick ",
 StyleBox["Series[ ]",
  FontWeight->"Bold"],
 " behaviour). It can be converted either to ordinary geometric product (with \
",
 StyleBox["Normal[ ]",
  FontWeight->"Bold"],
 ") or user can explicitly include infinitesimal parameter with ",
 StyleBox["gaParameterSeries[ ]",
  FontWeight->"Bold"],
 ". ",
 StyleBox["gaSeriesData[]",
  FontWeight->"Bold"],
 " rules for ",
 StyleBox["Zassenhaus",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Baker-Campbell-Hausdorff",
  FontSlant->"Italic"],
 " series are added in these series definition sections."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Normal", "[", "a_gaSeriesData", "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Plus", "@@", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaParameterSeries", "[", 
    RowBox[{"a_gaSeriesData", ",", "var_Symbol"}], "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"var", "^", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{"Plus", "@@", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ")"}], ")"}], "&"}], "/@", 
      RowBox[{"Last", "[", "a", "]"}]}], ")"}]}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " are automatically summed order by order and geometrically multiplied."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Plus", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any3___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxOrder", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", "dat1", "]"}], ",", 
         RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", " ", 
     RowBox[{"Plus", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"gaSeriesData", "[", 
        RowBox[{"point", ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat1", ",", "maxOrder"}], "]"}]}], ")"}], "+", 
             RowBox[{"(", 
              RowBox[{"First", "/@", 
               RowBox[{"Take", "[", 
                RowBox[{"dat2", ",", "maxOrder"}], "]"}]}], ")"}]}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
        "]"}], ",", "any2", ",", "any3"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication by multivector is multiplication of every term of series by \
that factor."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"Times", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", "any2___"}], "]"}], ":=", 
   
   RowBox[{"(", 
    RowBox[{"gaSeriesData", "@@", 
     RowBox[{"{", 
      RowBox[{"point", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "sd", "}"}], ",", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1", ",", "#", ",", "any2"}], "]"}], "&"}], ",", 
             "sd", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", "dat1"}],
         "]"}]}], "}"}]}], ")"}]}], ";"}]], "Input"],

Cell[TextData[{
 StyleBox["gaSeriesData[ ]",
  FontWeight->"Bold"],
 " multiplication is realized first constructing pairs of infinitesimal of \
same power ",
 StyleBox["relevantPairs",
  FontWeight->"Bold"],
 ", then simply taking these terms with ",
 StyleBox["Extract[ ]",
  FontWeight->"Bold"],
 ", multiplying and at least summing."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat1_"}], "]"}], ",", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"point_", ",", "dat2_"}], "]"}], ",", " ", "any2___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"maxOrder", "=", 
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"Length", "[", "dat1", "]"}], ",", 
          RowBox[{"Length", "[", "dat2", "]"}]}], "]"}]}], ",", 
       "relevantPairs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"relevantPairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "+", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "k"}], "}"}], ",", "k"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "maxOrder"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "[", 
       RowBox[{"any1", ",", 
        RowBox[{"gaSeriesData", "[", 
         RowBox[{"point", ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"List", "/@", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"Extract", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "dat2"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], "}"}]}], 
                    "]"}]}], "}"}], "]"}]}], ")"}], "&"}], "/@", 
                  RowBox[{"relevantPairs", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "maxOrder"}], "}"}]}], "]"}]}]}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", 
               RowBox[{"maxOrder", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
         "]"}], ",", "any2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Below follows shortcuts and simplified predefined usage of ",
 StyleBox["gaGeometricProductSeries[ ]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricExp", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSin", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricSinh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCos", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricCosh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTan", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaGeometricTanh", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Expand", "\[Rule]", "False"}], "}"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricExp", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricExp", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Exp", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Exp", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaExp", "=", "gaGeometricExp"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSin", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSin", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sin", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sin", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSin", "=", "gaGeometricSin"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricSinh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricSinh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Sinh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Sinh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaSinh", "=", "gaGeometricSinh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCos", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCos", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cos", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cos", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCos", "=", "gaGeometricCos"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricCosh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricCosh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Cosh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Cosh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaCosh", "=", "gaGeometricCosh"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTan", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTan", ",", "Expand"}], "]"}]}], ")"}]}], "}"}],
       ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tan", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tan", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTan", "=", "gaGeometricTan"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaGeometricTanh", "[", 
     RowBox[{"m_", ",", 
      RowBox[{"p", ":", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "NumberQ"}], "|", "0"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"_", "?", "IntegerQ"}], "|", "6"}], ")"}]}], "}"}], ":", 
       RowBox[{"{", 
        RowBox[{"0", ",", "6"}], "}"}]}], ",", "opts___"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expansion", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Expand", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaGeometricTanh", ",", "Expand"}], "]"}]}], ")"}]}], 
       "}"}], ",", 
      RowBox[{"gaGeometricProductSeries", "[", 
       RowBox[{"Tanh", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "p"}], "}"}], ",", 
        RowBox[{"Expand", "->", "expansion"}]}], "]"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"Geometric", " ", "Tanh", " ", "function"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaTanh", "=", "gaGeometricTanh"}], ";"}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Commutator, Zassenhaus and BakerCampbellHausdorff (BCH) expansions\
\>", "Subsection"],

Cell[CellGroupData[{

Cell["Help functions", "Subsubsection"],

Cell["Nice output of commutator and anticommutator", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"gaCommutator", "[", 
       RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
    RowBox[{"StyleBox", "[", 
     RowBox[{
      RowBox[{"RowBox", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<\[LeftDoubleBracket]\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<,\>\"", ",", 
         RowBox[{"AdjustmentBox", "[", 
          RowBox[{
           RowBox[{"MakeBoxes", "[", 
            RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
           RowBox[{"BoxMargins", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0.", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\"\<\[RightDoubleBracket]\>\""}], "}"}], "]"}], ",", 
      RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
      RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaAntiCommutator", "[", 
      RowBox[{"a_", ",", "b_"}], "]"}], ",", "StandardForm"}], "]"}], ":=", 
   RowBox[{"StyleBox", "[", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<{\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"a", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<,\>\"", ",", 
        RowBox[{"AdjustmentBox", "[", 
         RowBox[{
          RowBox[{"MakeBoxes", "[", 
           RowBox[{"b", ",", "StandardForm"}], "]"}], ",", 
          RowBox[{"BoxMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.5", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\"\<}\>\""}], "}"}], "]"}], ",", 
     RowBox[{"SpanSymmetric", "\[Rule]", "True"}], ",", 
     RowBox[{"SpanMaxSize", "\[Rule]", "Infinity"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[TextData[{
 "Realization of ",
 StyleBox["gaSetMultiLinear[ ] ",
  FontWeight->"Bold"],
 "is taken  from  Daniel Lichtblau<danl@wolfram.com>Re:[mg25540] MultiLinear \
and Linear function (old mathgroup mail list)"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", 
                RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{"{", "c", "}"}], ",", 
               RowBox[{"MV", "|", "bs"}], ",", 
               RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", "c_", ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"c", "*", 
              RowBox[{"x", "[", 
               RowBox[{"a", ",", "1", ",", "b"}], "]"}]}], "/;", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "=!=", "1"}], ")"}], "&&", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "c", "}"}], ",", 
                RowBox[{"MV", "|", "bs"}], ",", 
                RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";", 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaMultiLinearQ", "[", "___", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaSetMultiLinear", "[", "heads__", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"___", ",", "0", ",", "___"}], "]"}], ":=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"y_", "+", "z_"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "y", ",", "b"}], "]"}], "+", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "z", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"c_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&"}], ")"}]}], 
                ",", "y__"}], "]"}], ",", "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", 
               RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"a___", ",", 
              RowBox[{"c_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"MV", "|", "bs"}], ",", 
                    RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
                   RowBox[{"c", "=!=", "1"}]}], ")"}], "&"}], ")"}]}], ",", 
              "b___"}], "]"}], ":=", 
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{"a", ",", "1", ",", "b"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaMultiLinearQ", "[", "x", "]"}], "=", "True"}], ";"}]}],
          "]"}], "/@", 
        RowBox[{"{", "heads", "}"}]}], ")"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "these", " ", "definitions", " ", "cause", " ", "$IterationLimit", " ", 
    "for", " ", "gaZassenhausSeries", " ", "values", " ", "8", " ", "or", " ",
     "higher"}], " ", "*)"}]}]}], "Input",
 Evaluatable->False],

Cell["Expand commutator and anticommutator.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaCommutatorExpand", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Except", "\[Rule]", 
     RowBox[{"{", "gaAntiCommutator", "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"gaCommutatorExpand", "[", 
      RowBox[{"n", ":", 
       RowBox[{"(", 
        RowBox[{"_", "?", "NumberQ"}], ")"}], ":", "1"}], "]"}], "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"repRules", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Plus", " ", "Rules", " ", "for", " ", "gaCommutator"}], 
            "*)"}], 
           RowBox[{
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "-", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "Plus", " ", "Rules", " ", "for", " ", "gaAntiCommutator"}], 
             "*)"}], 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"gaAntiCommutator", "[", 
               RowBox[{"a_", ",", "b_"}], "]"}], "]"}], "\[RuleDelayed]", 
             RowBox[{"n", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a", ",", "b"}], "]"}], "+", 
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"b", ",", "a"}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
          RowBox[{"_", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"FreeQ", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"Alternatives", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Except", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{"gaCommutatorExpand", ",", "Except"}], "]"}]}], 
                  ")"}]}], ",", "Infinity"}], "]"}]}], "&"}], ")"}]}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Expand", "[", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", "#", ")"}], "/.", "repRules"}], ")"}], "&"}], ",", 
         "expr"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaCE", "[", "n_", "]"}], "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{
      RowBox[{"gaCommutatorExpand", "[", "n", "]"}], "[", "x", "]"}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Zassenhaus series", "Subsubsection"],

Cell["\<\
Optimize commutator linearity for Clifford algebras instead of using general \
gaSetMultiLinear[ ] . With this optimization $IterationLimit for \
gaZassenhausSeries for value 8 causes no problems. gaCommutator is nonzero \
only if it contains heads orthonormalBaseSymbolName or MV. If you need other \
noncommutative quantities, just use MV[yourhead].\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", "y_Plus", ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", "#", ",", "b"}], "]"}], "&"}], "/@", "y"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"___", ",", "a_", ",", "___"}], "]"}], "]"}], ":=", 
      RowBox[{"0", "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaCommutator", "[", 
        RowBox[{"a___", ",", 
         RowBox[{"Times", "[", 
          RowBox[{"c_", ",", "y__"}], "]"}], ",", "b___"}], "]"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"c", "*", 
        RowBox[{"gaCommutator", "[", 
         RowBox[{"a", ",", 
          RowBox[{"Times", "[", "y", "]"}], ",", "b"}], "]"}]}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["\<\
If one uses definition below,  one gets $IterationLimit for \
gaZassenhausSeries values 8 or higher. This can be avoided with 
Block[{$RecursionLimit=2048},gaZassenhausSeries[Exp[t1+t2],8]], however the \
better way is to optimize iteration procedure as above.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSetMultiLinear", "[", 
   RowBox[{"gaCommutator", ",", "gaAntiCommutator"}], "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell["Add antisymmetry property ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldPattern", "[", 
    RowBox[{"gaCommutator", "[", 
     RowBox[{"a_", ",", "a_"}], "]"}], "]"}], ":=", "0"}], ";"}]], "Input"],

Cell[TextData[{
 "Efficient computation of general Zassenhaus coefficients is literally taken \
form the article Fernando Casas, Ander Murua, Mladen Nadinic, \
\[OpenCurlyDoubleQuote]Efficient computation of the Zassenhaus formula\
\[CloseCurlyDoubleQuote],Computer Physics Communications, 183 (2012) \
2386-2391, where algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjoint", "[", 
    RowBox[{"a_", ",", "0", ",", "b_"}], "]"}], ":=", "b"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAdjoint", "[", 
    RowBox[{"a_", ",", "j_Integer", ",", "b_"}], "]"}], ":=", 
   RowBox[{"gaCommutator", "[", 
    RowBox[{"a", ",", 
     RowBox[{"gaAdjoint", "[", 
      RowBox[{"a", ",", 
       RowBox[{"j", "-", "1"}], ",", "b"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"1", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ff", "[", 
     RowBox[{"1", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "k"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"j", "!"}], " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "-", "j"}], ")"}], "!"}]}], ")"}]}], ")"}], " ", 
       RowBox[{"gaAdjoint", "[", 
        RowBox[{
         RowBox[{"MV", "[", "bTemp", "]"}], ",", 
         RowBox[{"k", "-", "j"}], ",", 
         RowBox[{"gaAdjoint", "[", 
          RowBox[{
           RowBox[{"MV", "[", "aTemp", "]"}], ",", "j", ",", 
           RowBox[{"MV", "[", "bTemp", "]"}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "k"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "2", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "2"}], ")"}], " ", 
    RowBox[{"gaff", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaff", "[", 
    RowBox[{"p_", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"gaff", "[", 
     RowBox[{"p", ",", "k"}], "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"-", "1"}], ")"}], "^", "j"}], "/", 
         RowBox[{"j", "!"}]}], ")"}], " ", 
       RowBox[{"gaAdjoint", "[", 
        RowBox[{
         RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], ",", "j", ",", 
         RowBox[{"gaff", "[", 
          RowBox[{
           RowBox[{"p", "-", "1"}], ",", 
           RowBox[{"k", "-", 
            RowBox[{"p", " ", "j"}]}]}], "]"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"k", "/", "p"}], "]"}], "-", "1"}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaZassenhausCoefficient", "[", "p_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "=", 
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "p"}], ")"}], " ", 
      RowBox[{"gaff", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"p", "-", "1"}], ")"}], "/", "2"}], "]"}], ",", 
        RowBox[{"p", "-", "1"}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausCoefficient", "[", 
     RowBox[{"a_", ",", "b_"}], "]"}], "[", "p_Integer", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"gaZassenhausCoefficient", "[", "p", "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
       RowBox[{
        RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], "}"}]}], 
    ")"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Right Zassenhaus series of Exp[A+B] is given as \
{Exp[A],Exp[B],Exp[C_2],Exp[C_3],...}. Whereas Left Zassenhaus series of \
Exp[A+B] is presented as {...,Exp[C\[CloseCurlyQuote]_3],Exp[C\
\[CloseCurlyQuote]_2],Exp[B],Exp[A]}. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"C", "'"}], "_n"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"n", "+", "1"}]], "C_n"}]}], TraditionalForm]]],
 "."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaZassenhausSeries", "}"}], ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaZassenhausSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<Right\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaZassenhausSeries", "::", "format"}], "=", 
    "\"\<gaZasenhausSeries option Format-> `1` is unknown. Possible values \
are \\\"Right\\\" or \\\"Left\\\".\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaZassenhausSeries", "[", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"aa_", "+", "bb_"}], "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a", "=", 
           RowBox[{"Unevaluated", "[", "aa", "]"}]}], ",", 
          RowBox[{"b", "=", 
           RowBox[{"Unevaluated", "[", "bb", "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaZassenhausSeries", ",", "Format"}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "seriesType", ",", "\"\<Right\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"gaZassenhausCoefficient", "/@", 
                RowBox[{"Range", "[", 
                 RowBox[{"2", ",", "n"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "aTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "bTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\"\<Left\>\"", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"gaZassenhausSeriesData", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"Reverse", "[", 
                RowBox[{
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2", ",", "n"}], "}"}]}], "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"gaZassenhausCoefficient", "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"MV", "[", "bTemp", "]"}], ",", 
                 RowBox[{"MV", "[", "aTemp", "]"}]}], "}"}]}], "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MV", "[", "aTemp", "]"}], "\[Rule]", "a"}], ",", 
               RowBox[{
                RowBox[{"MV", "[", "bTemp", "]"}], "\[Rule]", "b"}]}], 
              "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"gaZassenhausSeries", "::", "format"}], ",", 
            "seriesType"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell["Conversion of Zassehaus series data to gaSeriesData. ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"u1_", ",", 
     RowBox[{"{", 
      RowBox[{"u2a_", ",", "u2b_"}], "}"}], ",", "u3_", ",", "len_"}], "]"}], 
   ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2a", ",", "u3", ",", "len"}], "]"}], ",", 
     RowBox[{"expandZasExp", "[", 
      RowBox[{"u1", ",", "u2b", ",", "u3", ",", "len"}], "]"}]}], "}"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expandZasExp", "[", 
    RowBox[{"expansionOrder_", ",", "uMVec_", ",", "rang_", ",", "len_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"Series", "[", 
          RowBox[{
           RowBox[{"Exp", "[", "t", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"res", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"a", "=", "1"}], ",", 
        RowBox[{"initialSeq", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "0", "}"}], ",", "j"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "0", ",", "len"}], "}"}]}], "]"}]}]}], "}"}], 
      ",", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"i", "\[NotEqual]", "0"}], ",", 
            RowBox[{"a", "=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"a", ",", "uMVec"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"res", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Coefficient", "[", 
                 RowBox[{"s", ",", "t", ",", "i"}], "]"}], "*", "a"}], "}"}], 
              ",", 
              RowBox[{"rang", "*", "i"}]}], "}"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "expansionOrder"}], "}"}]}], "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"initialSeq", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", 
             RowBox[{"rang", "*", "k"}]}], "]"}], "]"}], "=", 
          RowBox[{"res", "[", 
           RowBox[{"[", 
            RowBox[{"1", "+", "k"}], "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", 
           RowBox[{
            RowBox[{"Length", "[", "res", "]"}], "-", "1"}]}], "}"}]}], "]"}],
        ";", "initialSeq"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Head", "[", "uMVec", "]"}], "=!=", "List"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaZassenhausSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", 
       "expansionOrder", ",", "rez"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"expansionOrder", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"IntegerPart", "[", 
          RowBox[{"len", "/", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rez", "=", 
       RowBox[{"MapAt", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"expandZasExp", "[", 
             RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"expansionOrder", ",", 
             RowBox[{"{", 
              RowBox[{"inf0", ",", "infn"}], "}"}], ",", 
             RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"GeometricProduct", "@@", 
       RowBox[{"gaSeriesData", "@@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", "rez"}],
          ")"}]}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaSeriesData", "[", 
   RowBox[{"gaZassenhausSeriesData", "[", 
    RowBox[{"infn___", ",", "inf0_List"}], "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"{", 
         RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "expansionOrder",
       ",", "rez"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expansionOrder", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"IntegerPart", "[", 
         RowBox[{"len", "/", "i"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "len"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rez", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Apply", "[", 
          RowBox[{"Sequence", ",", "#"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"expandZasExp", "[", 
            RowBox[{"#1", ",", "#2", ",", "#3", ",", "len"}], "]"}], "&"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"expansionOrder", ",", 
            RowBox[{"Reverse", "[", 
             RowBox[{"{", 
              RowBox[{"infn", ",", 
               RowBox[{"Reverse", "[", "inf0", "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GeometricProduct", "@@", 
      RowBox[{"gaSeriesData", "@@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"{", "#", "}"}], ",", "0"}], "]"}], "&"}], "/@", 
         RowBox[{"Reverse", "[", "rez", "]"}]}], ")"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["BCH series", "Subsubsection"],

Cell[TextData[{
 "Efficient computation of general BCH coefficients is literally taken form \
the Mattias W. Reinsch, \[OpenCurlyDoubleQuote]A simple expresion for the \
terms in the Baker-Campbell-Hausdorff \
series\[CloseCurlyDoubleQuote],(arXiv:math-ph/9905012v2 13 Jan,2000), where \
algorithm realization in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " was also given. We only add speedup using SparseArray matrices (15% \
speedup for n=12 term)."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myStrings__String", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Band", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], "]"}], "\[Rule]", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "+", "1"}], ",", 
            RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}]}], ",", "FFGGm1"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dot", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"SparseArray", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                 RowBox[{"Product", "[", 
                  RowBox[{
                   RowBox[{"sb", "[", 
                    RowBox[{"k", ",", "#"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", 
                  RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "]"}], "&"}], "/@", 
            RowBox[{"{", "myStrings", "\[IndentingNewLine]", "}"}]}], ")"}]}],
          "-", "qthpower"}], ")"}]}], ";", 
      RowBox[{"Expand", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"qthpower", "=", 
             RowBox[{"qthpower", ".", "FFGGm1"}]}], ";", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
             "qthpower"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", 
           RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
    RowBox[{
     RowBox[{"{", "exprs__String", "}"}], ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"temp", "=", 
        RowBox[{"logTempMatrix", "[", 
         RowBox[{
          RowBox[{"{", "exprs", "}"}], ",", "n"}], "]"}]}], ",", "term"}], 
      "}"}], ",", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"term", "=", 
         RowBox[{"Apply", "[", 
          RowBox[{"List", ",", 
           RowBox[{"temp", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{"term", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "*", 
         RowBox[{"Apply", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"term", ",", 
              RowBox[{"-", "n"}]}], "]"}], "/.", 
            RowBox[{
             RowBox[{"sb", "[", 
              RowBox[{"_", ",", "k_"}], "]"}], "\[Rule]", 
             RowBox[{"MV", "[", "k", "]"}]}]}]}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "temp", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
Nested commutator on the right or left hand side. This differs from \
traditional form presended in the literature, because some terms are equal \
and can be added. For example in 5-th order term two terms with coefficients \
add  1/360+1/180 to form 1/120 coefficient of their sum. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"generateCommutatorForm", "[", 
    RowBox[{"expr_", ",", "vars_List", ",", "type_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rules", ",", "gaCom", ",", "any1", ",", "any2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaSetNonCommutative", "[", 
       RowBox[{"gaCom", ",", "any1", ",", "any2"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "type", ",", "\[IndentingNewLine]", "\"\<DeepestRight\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}]}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "a", "]"}], ">", 
                RowBox[{"Depth", "[", "b", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "b", ",", "a", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "a"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}], ",", 
                 RowBox[{"c", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "\"\<DeepestLeft\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", "#2", ",", "#1", ",", "any2___"}], 
               "]"}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "#1", ",", "#2", ",", "any2"}], "]"}], 
               "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"#1", ",", "#2"}], "]"}], ",", "any2"}], "]"}]}]}], 
             "&"}], "@@@", 
            RowBox[{"Subsets", "[", 
             RowBox[{"vars", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}]}], "]"}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", "b"}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "b", "]"}], ">", 
                RowBox[{"Depth", "[", "a", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{"-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{"GeometricProduct", "[", 
               RowBox[{"any1___", ",", 
                RowBox[{"b", ":", 
                 RowBox[{"Except", "[", "_gaCom", "]"}]}], ",", 
                RowBox[{"a", ":", "_gaCom"}], ",", "any2___"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", "a", ",", "b", ",", "any2"}], "]"}], "-", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"any1", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"a", ",", "b"}], "]"}], ",", "any2"}], "]"}]}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaCom", "[", 
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"a__", ",", "b_"}], "]"}], ",", "c_"}], "]"}], 
              "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "+", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{
                   RowBox[{"GeometricProduct", "[", "a", "]"}], ",", "c"}], 
                  "]"}], ",", "b"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"a", ":", "_gaCom"}], ",", 
                 RowBox[{"b", ":", "_gaCom"}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Signature", "[", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}], "]"}], "\[Equal]", 
                RowBox[{"-", "1"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"b", ",", "a"}], "]"}], "-", 
               RowBox[{"gaCom", "[", 
                RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"c", ":", "_gaCom"}], ",", 
                 RowBox[{"x", ":", 
                  RowBox[{"gaCom", "[", 
                   RowBox[{"a_", ",", "b_"}], "]"}]}]}], "]"}], "/;", 
               RowBox[{
                RowBox[{"Depth", "[", "x", "]"}], "\[LessEqual]", 
                RowBox[{"Depth", "[", "c", "]"}]}]}], "\[RuleDelayed]", 
              RowBox[{
               RowBox[{"gaCom", "[", 
                RowBox[{
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "a"}], "]"}], ",", "b"}], "]"}], "+", 
               RowBox[{"gaCom", "[", 
                RowBox[{"a", ",", 
                 RowBox[{"gaCom", "[", 
                  RowBox[{"c", ",", "b"}], "]"}]}], "]"}]}]}]}], "}"}]}], 
          "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"rules", "=", 
         RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Expand", "[", 
           RowBox[{"#", "/.", "rules"}], "]"}], "&"}], ",", "expr"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"gaCom", "\[Rule]", "gaCommutator"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{
    RowBox[{"{", "gaBakerCampbellHausdorffSeries", "}"}], ",", "HoldFirst"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaBakerCampbellHausdorffSeries", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Format", "\[Rule]", "\"\<None\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaBakerCampbellHausdorffSeries", "::", "format"}], "=", 
   "\"\<gaBakerCampbellHausdorffSeries option Format-> `1` is unknown. \
Possible values are \\\"Commutators\\\",\\\"Expand\\\" or \
\\\"None\\\".\>\""}], ";"}]}], "Input"],

Cell[TextData[{
 "Note: ",
 StyleBox["directLogTempMatrix[ ]",
  FontWeight->"Bold"],
 " is much faster when expanding multivectors. For example for two 3D vectors \
9-th order BCH series (expanded) is 600sec compared to 5000 sec using \
commutative algorithm. All this due to slow expansion of large noncommutative \
expression. Therefore we switch to directLogTempMatrix[ ] for n>5."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"directLogTempMatrix", "[", 
    RowBox[{
     RowBox[{"{", "myexressions__", "}"}], ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"qthpower", "=", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], ",", "FFGGm1"}], "}"}], ",", 
     RowBox[{
      RowBox[{"FFGGm1", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"gaPE", ",", 
           RowBox[{"gaGeometricMatrixProduct", "@@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"1", "/", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"j", "-", "i"}], ")"}], "!"}]}], " ", 
                  RowBox[{"gaPE", "[", 
                   RowBox[{"GeometricProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", 
                   RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "&"}], "/@", 
              RowBox[{"{", "myexressions", "\[IndentingNewLine]", "}"}]}], 
             ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", 
             RowBox[{"n", "+", "1"}]}], "}"}]}], "]"}], "-", "qthpower"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"gaPE", "/@", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"qthpower", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"MapAt", "[", 
                 RowBox[{"gaPE", ",", "qthpower", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], ",", "FFGGm1"}], "]"}]}], 
             ";", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "1"}], ")"}], "^", "q"}], "/", "q"}], " ", 
              "qthpower"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"q", ",", "n"}], "}"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", 
            RowBox[{"n", "+", "1"}]}], "]"}], "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell["\<\
Note: rewrite using commutators to left or to right side. It is not rewrite \
into Hall or Lyndon base (don\[CloseCurlyQuote]t know how to do this)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaBakerCampbellHausdorffSeries", "[", 
       RowBox[{
        RowBox[{"GeometricProduct", "[", "expr__Exp", "]"}], ",", 
        RowBox[{"n_Integer", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], ",", 
        "opts___"}], "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"expArgs", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"List", "@@@", 
             RowBox[{"Unevaluated", "[", 
              RowBox[{"{", "expr", "}"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"seriesType", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Format", "/.", 
              RowBox[{"{", "opts", "}"}]}], "/.", 
             RowBox[{"Options", "[", 
              RowBox[{"gaBakerCampbellHausdorffSeries", ",", "Format"}], 
              "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"stringNames", "=", 
           RowBox[{"(", 
            RowBox[{"ToString", "/@", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Unique", "[", "\"\<vn\>\"", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "expr", "}"}], "]"}], "}"}]}], "]"}]}], 
            ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"repRules", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{
          "seriesType", ",", "\[IndentingNewLine]", "\"\<None\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "gaBakerCampbellHausdorffSeriesData", "@@", "\[IndentingNewLine]", 
            
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "&"}], "/@", 
                 RowBox[{"Range", "[", 
                  RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", "expArgs"}], 
              "]"}], ")"}]}], ",", "\"\<Expand\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "5"}], ",", "\[IndentingNewLine]", 
             RowBox[{
             "gaBakerCampbellHausdorffSeriesData", "@@", 
              "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "/.", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                    "]"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], ",", 
                 RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"directLogTempMatrix", "[", 
                  RowBox[{"expArgs", ",", "k"}], "]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"\"\<Commutators\>\"", ",", 
             RowBox[{"Method", "\[Rule]", "\"\<DeepestRight\>\""}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestRight\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Commutators\>\"", "|", 
            RowBox[{"{", 
             RowBox[{"\"\<Commutators\>\"", ",", 
              RowBox[{"Method", "\[Rule]", "\"\<DeepestLeft\>\""}]}], "}"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"gaBakerCampbellHausdorffSeriesData", "@@", 
            RowBox[{"(", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"generateCommutatorForm", "[", 
                    RowBox[{
                    RowBox[{"gaPE", "[", 
                    RowBox[{"gaBakerCampbellHausdorffTermLogarithm", "[", 
                    RowBox[{"stringNames", ",", "#"}], "]"}], "]"}], ",", 
                    RowBox[{"MV", "/@", "stringNames"}], ",", 
                    "\"\<DeepestLeft\>\""}], "]"}], "&"}], "/@", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", ",", "n"}], "]"}]}], ")"}], "/.", 
                 RowBox[{"Thread", "[", 
                  RowBox[{"Rule", "[", 
                   RowBox[{
                    RowBox[{"MV", "/@", "stringNames"}], ",", "expArgs"}], 
                   "]"}], "]"}]}], ")"}], ",", 
               RowBox[{"gaPE", "/@", "expArgs"}]}], "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaBCHSeries", "=", "gaBakerCampbellHausdorffSeries"}], 
  ";"}]], "Input"],

Cell["\<\
Conversion of BakerCampbellHausdorffSeries series data to gaSeriesData. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeProductTerm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pair", ":", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ".."}]}], "}"}], 
     ",", 
     RowBox[{"expansionOrder_Integer", "?", "Positive"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{"#", ",", 
       RowBox[{"(", 
        RowBox[{"1", "/", 
         RowBox[{"Factorial", "[", 
          RowBox[{"Length", "[", "#", "]"}], "]"}]}], ")"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Permutations", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
       RowBox[{"{", "pair", "}"}]}], "]"}], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaSeriesData", "[", 
    RowBox[{"gaBakerCampbellHausdorffSeriesData", "[", 
     RowBox[{"inf0_List", ",", "infn___"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", 
          RowBox[{"inf0", ",", "infn"}], "}"}], "]"}]}], ",", "termsToTake", 
       ",", "nontrivialEntries"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"gaSeriesData", "[", 
      RowBox[{"0", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"termsToTake", "=", 
                RowBox[{"FrobeniusSolve", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", "len", "]"}], ",", "order"}], "]"}]}],
                ";", "\[IndentingNewLine]", 
               RowBox[{"nontrivialEntries", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Plus", "@@", "inf0"}], ",", "infn"}], "}"}], ",",
                     "#"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "0"}], "}"}]}], "]"}], ")"}], "&"}], "/@",
                  "termsToTake"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"gaPE", "[", 
                RowBox[{"Plus", "@@", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{"GeometricProduct", ",", "#"}], "]"}], "&"}], ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"makeProductTerm", "[", 
                    RowBox[{"#", ",", "order"}], "]"}], "&"}], "/@", 
                    "nontrivialEntries"}], ")"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "]"}]}], "}"}],
              ",", "order"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"order", ",", "len"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "1", "}"}], ",", "0"}], "}"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6. Tensor products and matrix representation of algebra", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gaTensorProduct", ",", "gaAlgebraMultiplicationTable", ",", 
     "gaToTensorProduct", ",", "gaFromTensorProduct", ",", 
     "gaAlgebraToMatrixRepresentation", ",", "gaMatrixRepresentation", ",", 
     "gaToMatrixRepresentation", ",", 
     "gaListDefinedElementaryRepresentations", ",", "BaseVectorMultipliers", 
     ",", "BaseVectorAlgebra", ",", "TargetMatrices", ",", 
     "QuaternionIsomorphismRules", ",", "gaDet"}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "::", "usage"}], "=", 
   "\"\<gaTensorProduct[any1,any2] is a notation for any1 \[CircleTimes] \
any2.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "::", "usage"}], "=", 
   "\"\<gaAlgebraMultiplicationTable[algebra] prints algebras multiplication \
table. Option gaGradesOnly->{{},{},...} selects only elements of grades \
{{0},{1},{2},...\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "usage"}], "=", 
   "\"\<gaToTensorProduct[(algebra|gaTensorProduct),opts_\
ReductionAlgebrasOrder] decomposes given algebra into product of algebras \
with p+q=0, i.e. algebras Cl[0,2,0],Cl[1,1,0],Cl[2,0,0]. These reduction \
algebras can be specified with an option in the form of list \
Order->{__algebras} or list of lists \
Order->{{__algebraList1},{__algebraList2},...}. In the first case reduction \
process takes  algebra one by one until list is exhausted. The second form \
aplies reduction cyclically, first using all algebras in the list \
algebraList1, then in algebraList2, ...\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "::", "usage"}], "=", 
   "\"\<gaFromTensorProduct[algebra_gaTensorProduct] returs Clifford algebra, \
which is isomorphics to tensors products of given algebras, i.e. is oposite \
to gaToTensorProduct[ ]. \>\""}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaAlgebraToMatrixRepresentation[al_Cl,\\\"R\\\"|\\\"C\\\"] or \
gaAlgebraToMatrixRepresentation[al_Cl,baseVectorRepresentation_List] \
constructs matrix representation of algebra. The syntax \
gaAlgebraToMatrixRepresentation[al_gaTensorProduct,\\\"R\\\"|\\\"C\\\"], \
first calculates direct product representation of product al_gaTensorProduct \
into elementary algebras of p+q<=2. Then uses direct product of matrix \
representation of these algebras. When seeking for complex representation \
\\\"C\\\", additional step to reduce dimension of representation is included \
once Cl[1,0,0] algebra is detected. When user provides matrix representations \
of base vectors as a list baseVectorRepresentation, all other elements are \
simply obtained multiplying the matrices of these vectors.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaMatrixRepresentation[al_Cl] is a container, which holds calculated \
matrix representations of \
gaAlgebraToMatrixRepresentation[al_Cl,baseVectorRepresentation_List] command.\
\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "::", "usage"}], "=", 
   "\"\<gaToMatrixRepresentation[expr, alegbra] converts expression into \
matrix representation. Orthogonal base and algebras matrix representations \
should be calculated in advance (while authomatic representation settings \
will be implemented).\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "::", "usage"}], "=", 
   "\"\<gaListDefinedElementaryRepresentations[algebra] or \
gaListDefinedElementaryRepresentations[algebra, representation name] return \
names (or representation itself), which can be used in \
gaAlgebraToMatrixRepresentation[algebra_gaTensorProduct].\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorMultipliers", "::", "usage"}], "=", 
   "\"\<Option, multiplies base matrices by given scalars\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseVectorAlgebra", "::", "usage"}], "=", 
   "\"\<Option, uses given Clifford algebra base vector representation to \
produce required algebra representation. Number of base vectors for requested \
and option provided algebras need be the same\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TargetMatrices", "::", "usage"}], "=", 
   "\"\<Option, points which type, reals or complexes matrices to \
prefer.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"QuaternionIsomorphismRules", "::", "usage"}], "=", 
   "\"\<subOption for gaAlgebraToMatrixRepresentation Method, possible values \
are {\\\"Pauli[1,2]\\\", \\\"HH2R4\\\"} or True. Determines weather \
quaternions in matrices to be replaced by matrix representations or \
not.\>\""}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDet", "::", "usage"}], "=", 
   "\"\<Returns determinant of Clifford algebra representation matrices. The \
only nontrivial part is the calculation of determinant of matrices with \
quaternionic matrix elements. In this cace n\[Cross]n quaterminic matrix is \
replaced by 2n\[Cross]2n complex matrix, the determinant of which is \
returned.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
    "One", " ", "needs", " ", "still", " ", "to", " ", "take", " ", "square", 
     " ", "root", " ", "of", " ", "it", " ", "according", " ", "to", " ", 
     "Ian", " ", "Porteous", " ", "in", " ", 
     ButtonBox[
      RowBox[{"[", 
       RowBox[{"RA", "-", "LoCGAaA"}], "]"}],
      BaseStyle->"Hyperlink",
      ButtonData->"references"]}], ",", " ", 
    RowBox[{"page", " ", "42."}], ",", " ", 
    RowBox[{
    "however", " ", "other", " ", "authors", " ", "do", " ", "not", " ", 
     "mantion", " ", "that"}]}], ")"}]}]], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["Direct products", "Subsection"],

Cell[CellGroupData[{

Cell["Help functions", "Subsubsection"],

Cell[TextData[{
 "The help function ",
 StyleBox["tensorProductIsomorphicToAlgebra[ ] ",
  FontWeight->"Bold"],
 " is used in ",
 StyleBox["gaDefineOrthonormalBase[gaTensorProduct[ ]]",
  FontWeight->"Bold"],
 ", where it generates indices of isomorphics algebra. These indices then are \
substituted by corresponding tensor product indices.  The rule below helps to \
replace single algbra by fake tensor product (containing only one term), \
which then enables to use single definition (thougtht a bit more complicated) \
instead of two separate: one for ",
 StyleBox["gaTensorProduct[Cl, Cl]",
  FontWeight->"Bold"],
 ", the other for ",
 StyleBox["gaTensorProduct[ gaTensorProduct[Cl], Cl]",
  FontWeight->"Bold"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tensorProductIsomorphicToAlgebra", "[", 
    RowBox[{"gaTensorProduct", "[", "al_Cl", "]"}], "]"}], ":=", "al"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The function ",
 StyleBox["gaAlgebraMultiplicationTable[ ]",
  FontWeight->"Bold"],
 ", constructs product table of all elements and prints it in a clear way. \
Entire base  should be generated before call."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], "=", 
    "\"\<Option `1` is not a list of grades {{1},{3},...}. All multiplication \
table will be generated.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaAlgebraMultiplicationTable", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"gaGradesOnly", "\[Rule]", "All"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraMultiplicationTable", "[", 
    RowBox[{"al_", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grades", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaAlgebraMultiplicationTable", ",", "gaGradesOnly"}], 
           "]"}]}], ")"}]}], ",", "selectedBE"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"grades", ",", "All", ",", "\[IndentingNewLine]", 
       RowBox[{"TableForm", "[", 
        RowBox[{
         RowBox[{"Outer", "[", 
          RowBox[{"GeometricProduct", ",", 
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
           RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "]"}], ",", 
         RowBox[{"TableHeadings", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "}"}]}]}], "]"}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_Integer", "?", "NonNegative"}], "}"}], ".."}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"selectedBE", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "x", "}"}], ",", 
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
                RowBox[{"_", "?", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"gaGetGrade", "[", "#", "]"}], "===", "x"}], 
                   "&"}], ")"}]}]}], "]"}]}], "]"}], ",", "grades"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", "selectedBE", ",", "selectedBE"}],
            "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"selectedBE", ",", "selectedBE"}], "}"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "_", ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraMultiplicationTable", "::", "badOptionValue"}], 
          ",", "grades"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", 
         RowBox[{
          RowBox[{"Outer", "[", 
           RowBox[{"GeometricProduct", ",", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "]"}], ",", 
          RowBox[{"TableHeadings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}], ",", 
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}]}], "}"}]}]}], 
         "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell["Set unit element to 1.", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
    RowBox[{"bs", "/:", 
     RowBox[{"HoldPattern", "[", 
      RowBox[{"bs", "[", 
       RowBox[{
        RowBox[{"mvDownUp", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "_"}], 
       "]"}], "]"}], "=", "1"}]}], "]"}], ";"}]], "Input"],

Cell["\<\
The signature of tensor product is a sum of signatures for each product \
algebras\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaGetSignature", "[", 
       RowBox[{"c_.", "*", 
        RowBox[{"expr", ":", 
         RowBox[{"bs", "[", 
          RowBox[{"_", ",", "al_gaTensorProduct", ",", "___"}], "]"}]}]}], 
       "]"}], ":=", 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"Plus", "@@", 
         RowBox[{"(", 
          RowBox[{"Length", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{
                RowBox[{"gaNegativeSignatureIndexList", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Thread", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Thread", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"List", "@@", 
                    RowBox[{"(", 
                    RowBox[{"First", "/@", 
                    RowBox[{"gaGetIndex", "[", "expr", "]"}]}], ")"}]}], ",", 
                    "al"}], "}"}], "]"}], "/.", 
                  RowBox[{"gaTensorProduct", "\[Rule]", "List"}]}], ")"}]}], 
               ",", "1"}], "]"}]}], ")"}]}], ")"}]}]}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell["Decide, when base recalculation is unavoidable", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getBase", "[", 
    RowBox[{"al_", ",", "grRequested_List", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"variants", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"DownValues", "[", "gaOrthonormalBase", "]"}], ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"gaOrthonormalBase", "[", 
                   RowBox[{"al", ",", "_"}], "]"}]}], "]"}]}], "&"}], 
              ")"}]}]}], "]"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"RuleDelayed", "[", 
             RowBox[{"def_", ",", "_"}], "]"}], ":>", "def"}], "}"}]}], 
         ")"}]}], ",", "definedGrades"}], "}"}], ",", 
     RowBox[{
      RowBox[{"definedGrades", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Hold", "@@", "variants"}], ")"}], "/.", 
             RowBox[{"HoldPattern", "\[Rule]", "Sequence"}]}], ")"}], "/.", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"_", ",", "gr_"}], "]"}], "\[RuleDelayed]", "gr"}]}], 
          ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"definedGrades", ",", "All"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBase", "[", 
          RowBox[{"al", ",", "grRequested"}], "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "All"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Intersection", "[", 
          RowBox[{"grRequested", ",", 
           RowBox[{"(", 
            RowBox[{"Union", "@@", 
             RowBox[{"(", "definedGrades", ")"}]}], ")"}]}], "]"}], "===", 
         "grRequested"}], ",", 
        RowBox[{
         RowBox[{"gaOrthonormalBase", "[", 
          RowBox[{"al", ",", "grRequested"}], "]"}], "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Join", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"gaOrthonormalBase", "[", 
                 RowBox[{"al", ",", "#"}], "]"}], "&"}], "/@", 
               "definedGrades"}], ")"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Intersection", "[", 
               RowBox[{"grRequested", ",", 
                RowBox[{"gaGetGrade", "[", "#", "]"}]}], "]"}], "]"}], ">", 
             "0"}], "&"}]}], "]"}]}], ",", "\[IndentingNewLine]", "True", ",",
         "\[IndentingNewLine]", 
        RowBox[{"gaDefineOrthonormalBase", "[", 
         RowBox[{"al", ",", 
          RowBox[{"gaGradesOnly", "->", "grRequested"}], ",", "opts"}], 
         "]"}]}], "]"}]}]}], "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Lets provide user with \[OpenCurlyDoubleQuote]default\
\[CloseCurlyDoubleQuote] algebra representations. It may be  convenient  if \
user wants other representations that differ from universal representations \
set by  ",
 StyleBox["generalDefaultMatrixRepresentationSetting[ ]",
  FontWeight->"Bold"],
 " ."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaDefaultMatrixRepresentationData", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"0", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "3"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "4"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "5"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            "\"\<Pauli[1,2]\>\""}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "6"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "7"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
           
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], 
           ",", 
           RowBox[{
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
            RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
         RowBox[{"Method", " ", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProduct\>\"", ",", 
            RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
           "}"}]}]}], "}"}], ","}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Diagonal\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Antisymmetric\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"1", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
          "\"\<Antisymmetric\>\""}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"2", ",", "0"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<IPauli[3,1]\>\"", "}"}]}], "}"}], ",", 
       RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Below we construct matrix representations for real clifford algebras, which \
is known to be of dimensions:\n\[DoubleStruckCapitalR](2^(n/2)),    if \
q-p=0,6 (mod 8); \n\[DoubleStruckCapitalC](2^((n-1)/2)),    if q-p=1,5(mod \
8); \n\[DoubleStruckCapitalH](2^((n-2)/2)),    if q-p=2,4(mod 8); \n\
\[DoubleStruckCapitalH](2^((n-3)/2))\[CirclePlus]\[DoubleStruckCapitalH](2^((\
n-3)/2)),   if q-p=3(mod 8); \n\[DoubleStruckCapitalR](2^((n-1)/2))\
\[CirclePlus]\[DoubleStruckCapitalR](2^((n-1)/2)),   if q-p=7(mod 8); \n\nIn \
order to get these matrices we generate automatic calculation instructions \
below. \nThese settings are applied only if particular settings were not \
found in ",
 StyleBox["gaDefaultMatrixRepresentationData[ ]",
  FontWeight->"Bold"],
 ". "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generalDefaultMatrixRepresentationSetting", "[", 
   RowBox[{"Cl", "[", 
    RowBox[{"p_", ",", "q_", ",", "_"}], "]"}], "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"q", "-", "p"}], ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"0", "|", "6"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1", "|", "5"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", "\"\<Pauli[1,2]\>\""}]}],
        "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"2", "|", "4"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "3", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "->", "\"\<Complex\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "\[Rule]", "\"\<Diagonal\>\""}], 
        ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<Symmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", "\"\<TensorProduct\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", "7", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "0"}], "]"}], "->", "\"\<Diagonal\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         "\"\<Antisymmetric\>\""}], ",", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"2", ",", "0"}], "]"}], "->", "\"\<IPauli[3,1]\>\""}], ",", 
        
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2"}], "]"}], "\[Rule]", 
         RowBox[{"{", "\"\<Q[1,2]\>\"", "}"}]}]}], "}"}], ",", 
      RowBox[{"Method", " ", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<TensorProduct\>\"", ",", 
         RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "True"}]}], 
        "}"}]}]}], "}"}]}], "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notations", "Subsubsection"],

Cell["Tensor product notation for products of algebras", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "al__Cl", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaNotation", "[", "#", "]"}], "]"}], "===", 
          "gaNotation"}], ",", 
         RowBox[{"gaDefineNotation", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"{", "al", "}"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"gaNotation", "[", 
          RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}], "]"}], "===", 
        "gaNotation"}], ",", 
       RowBox[{"gaDefineNotation", "[", 
        RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"alB", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"MakeBoxes", "[", 
             RowBox[{"#", ",", "sf"}], "]"}], "&"}], "/@", 
           RowBox[{"{", "al", "}"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfdProto", "=", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"Slot", "/@", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", 
               RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", 
            RowBox[{"StyleBox", "[", 
             RowBox[{"\"\<\[CircleTimes]\>\"", ",", 
              RowBox[{"FontSize", "\[Rule]", "Medium"}], ",", 
              RowBox[{"gaNotation", "[", 
               RowBox[{"gaTensorProduct", "[", "al", "]"}], "]"}]}], "]"}]}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"pfiProto", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<gaTensorProduct\>\"", ",", "\"\<[\>\""}], "}"}], 
            ",", 
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Slot", "/@", 
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "al", "}"}], "]"}], "]"}]}], ",", "\"\<,\>\""}],
              "]"}], ",", 
            RowBox[{"{", "\"\<]\>\"", "}"}]}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pfd", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfdProto", "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"pfi", "=", 
            RowBox[{"Function", "[", 
             RowBox[{"RowBox", "[", "pfiProto", "]"}], "]"}]}]}], "}"}], ",", 
         
         RowBox[{"TemplateBox", "[", 
          RowBox[{"alB", ",", "\"\<gaTensorProduct\>\"", ",", 
           RowBox[{"DisplayFunction", ":>", "pfd"}], ",", 
           RowBox[{"InterpretationFunction", ":>", "pfi"}], ",", 
           RowBox[{"SyntaxForm", "\[Rule]", "\"\<fish\>\""}], ",", 
           RowBox[{"Tooltip", "\[Rule]", "None"}]}], "]"}]}], "]"}]}], 
      "]"}]}], "\[IndentingNewLine]", ")"}]}], ";"}]], "Input"],

Cell[TextData[{
 "For other quantities, i.e. indices, simply use ",
 StyleBox["CircleTimes[ ] ",
  FontWeight->"Bold"],
 "trick, thus avoiding problems with bracketing. For speed reasons, dont\
\[CloseCurlyQuote] associate MakeBoxes with  ",
 StyleBox["gaTensorProduct/: ",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", "args__", "]"}], ",", 
     RowBox[{"sf", ":", "StandardForm"}]}], "]"}], ":=", 
   RowBox[{"TagBox", "[", 
    RowBox[{
     RowBox[{"ToBoxes", "[", 
      RowBox[{"CircleTimes", "[", "args", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"gaTensorProduct", "@@", "#"}], "&"}]}], "]"}]}], 
  ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multiplication of elements, which are tensor products. ", \
"Subsubsection"],

Cell[TextData[{
 "Tensor product indices are treated in a different way than indices of \
simple clifford algebras. Identifier ignoreMe deals with tensor products of \
identical algebras, which is unavoidable if we want to construct tensor \
product from simple algebras. After base elements are constructed we ignore \
them.  ignoreMe is used only in ",
 StyleBox["gaDefineOrthonormalBase[gaTensorProduct[]]",
  FontWeight->"Bold"],
 ". It is not needed when dealing with already defined base elements."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{"other1___", ",", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du1_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", " ", 
         RowBox[{"bs", "[", 
          RowBox[{
          "du2_mvDownUp", ",", " ", "al_gaTensorProduct", ",", 
           "ignoreMe___"}], "]"}], ",", "other2___"}], "]"}], "]"}], ":=", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"setSymDiff4TP", ",", "signProdSigMap4TP"}], "}"}], ",", 
        RowBox[{
         RowBox[{"setSymDiff4TP", "=", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "@@", 
              RowBox[{"(", 
               RowBox[{"List", "/@", 
                RowBox[{"gaTensorProduct", "@@@", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Apply", "[", 
                   RowBox[{"mvSetSymmetricDifference", ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ")"}]}], ",",
              "al"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HoldPattern", "[", 
              RowBox[{"bs", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", 
                "_"}], "]"}], "]"}], "->", "1"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "=", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Times", "@@@", 
             RowBox[{"Apply", "[", 
              RowBox[{"mvProductSignatureMapC", ",", 
               RowBox[{"MapThread", "[", 
                RowBox[{"List", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "x", "}"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@@", 
                    RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}]}], "}"}]}],
                     "]"}]}], "]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"du1", ",", "du2"}], "}"}], "/.", 
                    RowBox[{"mvDownUp", "\[Rule]", "List"}]}], ",", "3"}], 
                    "]"}]}], ")"}]}], "]"}]}], "]"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"signProdSigMap4TP", "*", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"other1", ",", "setSymDiff4TP", ",", "other2"}], 
           "]"}]}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "Geometric product of ",
 StyleBox["gaTensorProduct[_,_]",
  FontWeight->"Bold"],
 ". Note, that ",
 StyleBox["gaTensorProduct[x_]:=x",
  FontWeight->"Bold"],
 " rule would spoil rearangement ",
 StyleBox["gaTensorProduct[gaTensorProduct[a],b]",
  FontWeight->"Bold"],
 ", therefore is not allowed. Associate these recursive definitions with ",
 StyleBox["gaTensorProduct",
  FontWeight->"Bold"],
 " itself  for speed reasons (they are more rare than ",
 StyleBox["GeometricProduct[ ]",
  FontWeight->"Bold"],
 ")"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaTensorProduct", "/:", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1___", ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"x1_", ",", "x2__"}], "]"}], ",", 
      RowBox[{"gaTensorProduct", "[", 
       RowBox[{"y1_", ",", "y2__"}], "]"}], ",", "any2___"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"GeometricProduct", "[", 
      RowBox[{"any1", ",", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
           "x"}], "}"}]}], ")"}], ",", 
       RowBox[{"GeometricProduct", "[", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "x2", "]"}], ",", 
         RowBox[{"gaTensorProduct", "[", "y2", "]"}]}], "]"}], ",", "any2"}], 
      "]"}], ")"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gaTensorProduct", "/:", 
   RowBox[{"GeometricProduct", "[", 
    RowBox[{"any1___", ",", 
     RowBox[{"gaTensorProduct", "[", "x1_", "]"}], ",", 
     RowBox[{"gaTensorProduct", "[", "y1_", "]"}], ",", "any2___"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"GeometricProduct", "[", 
     RowBox[{"any1", ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"GeometricProduct", "[", 
          RowBox[{"x1", ",", "y1"}], "]"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "x_", "]"}], "\[RuleDelayed]", 
          "x"}], "}"}]}], ")"}], ",", "any2"}], "]"}], ")"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Orthonormal base construction for tensor product algebras", \
"Subsubsection"],

Cell["\<\
General note. The case with (Cl[2,0,0]|Cl[1,1,0]|Cl[0,2,0]) algebras is \
special, because we know what are base vectors. Then it follows that we can \
easily order and grade all elements. For tensor products of arbitrary \
algebras the nontrivial point is to find what tensor products play the role \
of vectors. The generation of orthonormal base of product of tensor algebras \
should not be confused with calculation of  geometric product between \
\[DoubleStruckE]lements of tensor algebra products. The later can be \
calculated directly (see \[OpenCurlyDoubleQuote]Multiplication of elements, \
which are tensor products\[CloseCurlyDoubleQuote] subsubsection).  \
\>", "Text"],

Cell[TextData[{
 "The  ",
 StyleBox["gaTensorProduct[Cl,Cl,...]",
  FontWeight->"Bold"],
 ", puts tensor products into ,,matroska\[CloseCurlyQuote]\[CloseCurlyQuote] \
form ",
 StyleBox["gaTensorProduct[ gaTensorProduct[gaTensorProduct[Cl],Cl] ,..]",
  FontWeight->"Bold"],
 " below. Then calls ",
 StyleBox["gaDefineOrthonormalBaseMain[ ] ",
  FontWeight->"Bold"],
 " to do all calculations step by step starting from the deepest product. \
Only necessary grades are calculated in intermediate steps."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaDefineOrthonormalBase", "[", 
    RowBox[{
     RowBox[{"gaTensorProduct", "[", 
      RowBox[{
       RowBox[{"Cl", "[", 
        RowBox[{"p_", ",", "q_", ",", 
         RowBox[{"r_:", "0"}]}], "]"}], ",", 
       RowBox[{"specAlgebra", ":", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}], ".."}]}]}], 
      "]"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gro", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"gaGradesOnly", "/.", 
           RowBox[{"{", "opts", "}"}]}], "/.", 
          RowBox[{"Options", "[", 
           RowBox[{"gaDefineOrthonormalBase", ",", "gaGradesOnly"}], "]"}]}], 
         ")"}]}], ",", 
       RowBox[{"restOpts", "=", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", "opts", "}"}], ",", 
          RowBox[{"gaGradesOnly", "->", "_"}]}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"gaDefineOrthonormalBaseMain", "[", 
      RowBox[{
       RowBox[{"gaTensorProduct", "[", 
        RowBox[{
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaDefineOrthonormalBaseMain", "[", 
               RowBox[{
                RowBox[{"gaTensorProduct", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], ",", 
                RowBox[{"gaGradesOnly", "->", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], ",", 
                RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}], ";", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}]}], ")"}], "&"}], ",", 
           RowBox[{"gaTensorProduct", "[", 
            RowBox[{"Cl", "[", 
             RowBox[{"p", ",", "q", ",", "r"}], "]"}], "]"}], ",", 
           RowBox[{"Most", "[", 
            RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{"Last", "[", 
          RowBox[{"{", "specAlgebra", "}"}], "]"}]}], "]"}], ",", 
       RowBox[{"gaGradesOnly", "\[Rule]", "gro"}], ",", 
       RowBox[{"Sequence", "@@", "restOpts"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "Note ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"],
 " is private context symbol (not ",
 StyleBox["Module[ ]",
  FontWeight->"Bold"],
 " local symbol)"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"gaDefineOrthonormalBaseMain", "[", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{
          RowBox[{"gaTensorProduct", "[", "algebraSeq__", "]"}], ",", 
          RowBox[{"specAlgebra", ":", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], "|", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}], "|", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], ")"}]}]}], "]"}], 
        ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "baseSymbol", ",", "ord", ",", "invdeglexIndexList", ",", "indSet", 
          ",", "keysB", ",", "gr", ",", "ifPrint", ",", 
          "vectorsOfArbitraryAlgebra", ",", "bivectorsOfSpecialAlgebra", ",", 
          "alreadyCalculatedProductsAdoptedToSingle", ",", 
          RowBox[{"uniqueMaskForArbitraryAlgebra", "=", 
           RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
          RowBox[{"uniqueMaskForSpecAlgebra", "=", 
           RowBox[{"Unique", "[", "cl", "]"}]}], ",", 
          RowBox[{"productAlgebra", "=", 
           RowBox[{
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"algebraSeq", ",", "specAlgebra"}], "]"}], "//.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a___", ",", 
                RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
               "]"}], ":>", 
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}]}], ",", 
          RowBox[{"alreadyCalculatedProducts", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", "algebraSeq", "]"}], "//.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", 
                RowBox[{"a___", ",", 
                 RowBox[{"gaTensorProduct", "[", "b__", "]"}], ",", "c___"}], 
                "]"}], ":>", 
               RowBox[{"gaTensorProduct", "[", 
                RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], ")"}]}], 
          ",", "quiet", ",", "algBoxes"}], "}"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"quiet", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Quiet", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBase", ",", "Quiet"}], "]"}]}], 
           ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "grOnly", " ", "only", " ", "makes", " ", "sense", " ", "to", " ", 
           "specify", " ", "in", " ", "the", " ", "last", " ", "step", " ", 
           "of", " ", "gaTensorProduct"}], " ", "*)"}], " ", 
         "\[IndentingNewLine]", 
         RowBox[{"grOnly", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaGradesOnly", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaDefineOrthonormalBase", ",", "gaGradesOnly"}], 
             "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "Other", " ", "commands", " ", "do", " ", "not", " ", "understand",
             " ", 
            RowBox[{"gaTensorProduct", "[", "cl", "]"}]}], ",", " ", 
           RowBox[{"therefore", " ", "define", " ", "usual", " ", "Cl"}]}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"alreadyCalculatedProductsAdoptedToSingle", "=", 
          RowBox[{"alreadyCalculatedProducts", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gaTensorProduct", "[", "a_Cl", "]"}], "\[RuleDelayed]", 
             "a"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "In", " ", "order", " ", "to", " ", "define", " ", "orthonormal", 
           " ", "base", " ", "of", " ", "tensor", " ", "product", " ", "we", 
           " ", "need", " ", "to", " ", "know", " ", "orthonormal", " ", 
           "bases", " ", "of", " ", "all", " ", "intermediate", " ", 
           "algebras"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"getBase", "[", 
          RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"getBase", "[", 
          RowBox[{"specAlgebra", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"Quiet", "\[Rule]", "quiet"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"specific", " ", "algebra", " ", "cases"}], ",", " ", 
           RowBox[{
           "for", " ", "which", " ", "we", " ", "know", " ", "what", " ", 
            "are", " ", "grade", " ", "1", " ", "elements"}], ",", " ", 
           RowBox[{"i", ".", "e", ".", " ", "vectors"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"specAlgebra", ",", "\[IndentingNewLine]", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"definitions", " ", "for", " ", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "=", 
            RowBox[{"Cl", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", 
                  RowBox[{
                  "tensorProductIsomorphicToAlgebra", "[", 
                   "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"definitions", " ", "for", " ", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "=", 
            RowBox[{"Cl", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", 
                  RowBox[{
                  "tensorProductIsomorphicToAlgebra", "[", 
                   "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], ")"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"definitions", " ", "for", " ", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "=", 
            RowBox[{"Cl", "@@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", 
                  RowBox[{
                  "tensorProductIsomorphicToAlgebra", "[", 
                   "alreadyCalculatedProducts", "]"}]}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], ")"}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Head", "[", 
               RowBox[{"gaNotation", "[", "productAlgebra", "]"}], "]"}], "===",
               "gaNotation"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"FilterRules", "[", 
               RowBox[{
                RowBox[{"{", "opts", "}"}], ",", 
                RowBox[{"Options", "[", "StyleBox", "]"}]}], "]"}], "=!=", 
              RowBox[{"{", "}"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"gaDefineNotation", "[", 
            RowBox[{"productAlgebra", ",", 
             RowBox[{"FilterRules", "[", 
              RowBox[{
               RowBox[{"{", "opts", "}"}], ",", 
               RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "color", " ", "of", " ", "tensor", " ", "product", " ", "and", " ", 
           "isomorphics", " ", "algebra", " ", "are", " ", "set", " ", "to", 
           " ", "be", " ", "the", " ", "same", " ", "by", " ", "default"}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"gaNotation", "[", 
               RowBox[{
               "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
                "]"}], "]"}], "]"}], "===", "gaNotation"}], ")"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaDefineNotation", "[", 
            RowBox[{
             RowBox[{
             "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}],
              ",", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"(", 
               RowBox[{"gaNotation", "[", 
                RowBox[{"productAlgebra", ",", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"(", 
                   RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{"{", "opts", "}"}], ",", 
                    RowBox[{"Options", "[", "gaNotation", "]"}]}], "]"}], 
                   ")"}]}]}], "]"}], ")"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"space", " ", "dimensions"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], "=", 
          RowBox[{
           RowBox[{"gaVectorSpaceDimension", "[", 
            RowBox[{
            "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", "]"}], 
            "]"}], "=", 
           RowBox[{
            RowBox[{
            "gaVectorSpaceDimension", "[", 
             "alreadyCalculatedProductsAdoptedToSingle", "]"}], "+", 
            "2"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"the", " ", "standard", " ", "ordering", " ", "stuff"}], 
           ",", " ", 
           RowBox[{
           "same", " ", "as", " ", "for", " ", "simple", " ", "algebra", " ", 
            "case"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"ord", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"gaNonCommutativeMonomialOrder", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{
             "gaDefineOrthonormalBase", ",", 
              "gaNonCommutativeMonomialOrder"}], "]"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grOnly", "===", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"invdeglexIndexList", "=", 
            RowBox[{"mvInvDegLexSortedIndexList", "[", 
             RowBox[{
              RowBox[{
              "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
               "]"}], ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"invdeglexIndexList", "=", 
            RowBox[{"mvInvDegLexSortedIndexList", "[", 
             RowBox[{
              RowBox[{
              "tensorProductIsomorphicToAlgebra", "[", "productAlgebra", 
               "]"}], ",", "grOnly"}], "]"}]}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ord", "===", "\"\<InvDeg[Lex]\>\""}], ",", 
           RowBox[{"indSet", "=", "invdeglexIndexList"}], ",", 
           RowBox[{"indSet", "=", 
            RowBox[{"gaIndexSort", "[", 
             RowBox[{"invdeglexIndexList", ",", "ord"}], "]"}]}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "for", " ", "special", " ", "algebras", " ", "vectors", " ", "of", 
           " ", "tensor", " ", "product", " ", "are", " ", "vectors", " ", 
           "of", " ", "arbitrary", " ", "algebra", " ", "multiplied", " ", 
           "by", " ", "bivectors", " ", "of", " ", "special", " ", 
           "algebra"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "and", " ", "vectors", " ", "of", " ", "special", " ", "algebra", 
           " ", "multiplied", " ", "by", " ", "unit", " ", "element", " ", 
           "of", " ", "arbitrary", " ", "algebra"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Note", ":", " ", 
           RowBox[{
           "we", " ", "need", " ", "to", " ", "make", " ", "generated", " ", 
            "vectors", " ", "unique"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"vectorsOfArbitraryAlgebra", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"alreadyCalculatedProductsAdoptedToSingle", ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
              RowBox[{"_", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                  RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{
              "inc", ",", "alc", ",", "uniqueMaskForArbitraryAlgebra"}], 
              "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"vectorsOfSpecialAlgebra", "=", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"specAlgebra", ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                 RowBox[{"{", "1", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
              "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"bivectorsOfSpecialAlgebra", "=", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"specAlgebra", ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
                 RowBox[{"{", "2", "}"}]}], "&"}], ")"}]}]}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc_", ",", "alc_"}], "]"}], ":>", 
             RowBox[{"baseSymbol", "[", 
              RowBox[{"inc", ",", "alc", ",", "uniqueMaskForSpecAlgebra"}], 
              "]"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"unitElement", "[", "productAlgebra", "]"}], "=", 
          RowBox[{"baseSymbol", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"mvDownUp", "[", 
               RowBox[{
                RowBox[{"{", "#", "}"}], ",", 
                RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
             RowBox[{"gaTensorProduct", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"{", "}"}], " ", ",", 
                RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}], 
             "]"}], ",", "productAlgebra"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "construct", " ", "unsorted", " ", "list", " ", "of", " ", 
            "tensor", " ", "product", " ", "algebra", " ", "vectors"}], ",", 
           " ", 
           RowBox[{"very", " ", "inefficient"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vectorsOfTensorProductAlgebra", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"baseSymbol", "[", 
             RowBox[{"#", ",", "productAlgebra"}], "]"}], "&"}], "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Flatten", "[", 
                 RowBox[{"Outer", "[", 
                  RowBox[{
                  "GeometricProduct", ",", "vectorsOfArbitraryAlgebra", ",", 
                   "bivectorsOfSpecialAlgebra"}], "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"baseSymbol", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "&"}], "[", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{
                    "Length", "[", "alreadyCalculatedProducts", "]"}]}], 
                    "]"}]}], "]"}], ",", "alreadyCalculatedProducts", ",", 
                    "uniqueMaskForArbitraryAlgebra"}], "]"}], ",", "#"}], 
                   "]"}], "&"}], "/@", "vectorsOfSpecialAlgebra"}]}], "]"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{
                 RowBox[{"baseSymbol", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "al1_", ",", 
                   "___"}], "]"}], ",", 
                 RowBox[{"baseSymbol", "[", 
                  RowBox[{
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{"du2_", ",", "up2_"}], "]"}], ",", "al2_", ",", 
                   "___"}], "]"}]}], "]"}], "\[RuleDelayed]", 
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"du1", ",", "du2"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"up1", ",", "up2"}], "]"}], "}"}]}], "]"}], "}"}],
                   "//.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a___", ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", "b__", "]"}], "}"}], ",", 
                    "c___"}], "]"}], ":>", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "}"}]}], 
                 ")"}], ")"}]}], "}"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "sort", " ", "acording", " ", "to", " ", "vector", " ", "square"}],
            ",", " ", 
           RowBox[{"i", ".", "e", ".", " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "...", ",", 
              RowBox[{"-", "1"}], ",", 
              RowBox[{"-", "1"}], ",", 
              RowBox[{"-", "1"}]}], "}"}]}], ",", " ", 
           RowBox[{"in", " ", "analogy", " ", "with", " ", 
            RowBox[{"{", 
             RowBox[{"p", ",", "q"}], "}"}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "=", 
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"(", "vectorsOfTensorProductAlgebra", ")"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
               RowBox[{"GeometricProduct", "[", 
                RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"indSetReplRul", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"Range", "[", 
              RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
              "]"}], ",", 
             RowBox[{"vectorsOfTensorProductAlgebraMetricSorted", "/.", 
              RowBox[{
               RowBox[{"baseSymbol", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{"du1_", ",", "up1_"}], "]"}], ",", "__"}], "]"}], 
               "\[RuleDelayed]", "du1"}]}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"GeometricProduct", "@@@", 
           RowBox[{"Apply", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"baseSymbol", "[", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{
                  RowBox[{"{", "#", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], " ", ",", 
                    RowBox[{"Length", "[", "productAlgebra", "]"}]}], "]"}]}],
                    "}"}]}], "]"}], ",", "productAlgebra"}], "]"}], "&"}], 
             ",", 
             RowBox[{"(", 
              RowBox[{"indSet", "/.", "indSetReplRul"}], ")"}], ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"grOnly", "===", "All"}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"grOnly", ",", "0"}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "\"\<InvDeg[Lex]\>\"", ",", "\"\<InvDeg[InvLex]\>\"", ",", 
                 "\"\<InvDeg[RevLex]\>\"", ",", "\"\<InvDeg[InvRevLex]\>\"", 
                 ",", "\"\<RevLex\>\"", ",", "\"\<InvRevLex\>\""}], "}"}], 
               ",", "ord"}], "]"}], ",", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"productAlgebra", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], 
               "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"gaOrthonormalBase", "[", 
               RowBox[{"productAlgebra", ",", "grOnly"}], "]"}], "=", 
              RowBox[{"Append", "[", 
               RowBox[{"keysB", ",", 
                RowBox[{"unitElement", "[", "productAlgebra", "]"}]}], 
               "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"productAlgebra", ",", "grOnly"}], "]"}], "=", 
            "keysB"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "assign", " ", "grades", " ", "after", " ", "removing", " ", 
           "possible", " ", "minus", " ", "signs"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"keysB", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"keysB", ",", "_baseSymbol", ",", "Infinity"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"gr", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Length", "[", "#", "]"}], "}"}], "&"}], "/@", 
           "indSet"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"gaGetGrade", "[", 
             RowBox[{"keysB", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "=", 
            RowBox[{"gr", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "gr", "]"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"set", " ", "value", " ", "for", " ", "gaRunningAlgebra"}],
            ",", " ", 
           RowBox[{"because", " ", "many", " ", 
            RowBox[{"gaGetGrade", "[", " ", "]"}], " ", "and", " ", "others", 
            " ", "depend", " ", "on", " ", "it"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"gaRunningAlgebra", "=", "productAlgebra"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"information", " ", "for", " ", "user"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"quiet", ",", "True", ",", 
           RowBox[{"ifPrint", "=", "False"}], ",", "Automatic", ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"gaVectorSpaceDimension", "[", "productAlgebra", "]"}], 
              "<", "8"}], ",", 
             RowBox[{"ifPrint", "=", "True"}], ",", 
             RowBox[{"ifPrint", "=", "False"}]}], "]"}], ",", "False", ",", 
           RowBox[{"ifPrint", "=", "True"}], ",", "_", ",", 
           RowBox[{"ifPrint", "=", "True"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"ifPrint", ",", 
           RowBox[{
            RowBox[{"algBoxes", "=", 
             RowBox[{"ToBoxes", "[", "productAlgebra", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"grOnly", "=!=", "All"}], ")"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "productAlgebra", "]"}], ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<,\>\"", 
                    ",", 
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "grOnly", "]"}], ",", 
                    "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], "}"}], "]"}],
                    "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"CellPrint", "[", 
               RowBox[{"{", 
                RowBox[{"Cell", "[", 
                 RowBox[{
                  RowBox[{"BoxData", "[", 
                   RowBox[{"RowBox", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Base vectors of \>\"", ",", "algBoxes", ",", 
                    "\"\<are stored in variable gaOrthonormalBase[\>\"", ",", 
                    
                    RowBox[{"TagBox", "[", 
                    RowBox[{
                    RowBox[{"StyleBox", "[", 
                    RowBox[{"algBoxes", ",", 
                    RowBox[{"gaNotation", "[", 
                    RowBox[{"Evaluate", "[", "productAlgebra", "]"}], "]"}]}],
                     "]"}], ",", "DisplayForm"}], "]"}], ",", "\"\<].\>\""}], 
                    "}"}], "]"}], "]"}], ",", "\"\<Print\>\""}], "]"}], "}"}],
                "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grOnly", "===", "All"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", "productAlgebra", "]"}], "=", 
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"productAlgebra", ",", "grOnly"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"productAlgebra", ",", "grOnly"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Set universal unit element grade, this will not influence",
 StyleBox[" private Context",
  FontColor->RGBColor[1, 0, 1]],
 " element ",
 StyleBox["unitElement[algebra]",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"baseSymbol", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"HoldPattern", "[", 
       RowBox[{"gaGetGrade", "[", 
        RowBox[{"baseSymbol", "[", 
         RowBox[{
          RowBox[{"mvDownUp", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"gaTensorProduct", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], ",", "__"}],
          "]"}], "]"}], "]"}], ":=", 
      RowBox[{"{", "0", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input"],

Cell[TextData[{
 "The ",
 StyleBox["gaToTensorProduct[ ]",
  FontWeight->"Bold"],
 " tries to decompose given algebra (or their tensor product, without term \
reordering) into elementary algebras, for which matrix representations are \
well known. Decomposition into algebras Cl[2,0],Cl[1,1],Cl[0,2] enables to \
find orthonormal base (possibly nonoptimal) using direct product of \
elementary algebras"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"elementaryTPAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reductionAlgebras", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cl", "[", 
      RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
     RowBox[{"Cl", "[", 
      RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], "=", 
   "\"\<Reduction set `1` is not allowed\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "gaToTensorProduct", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{"Order", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Cl", "[", 
          RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cl", "[", 
           RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"Cl", "[", 
           RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_Cl", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reductionInstruction", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Order", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaToTensorProduct", ",", "Order"}], "]"}]}], ")"}]}], 
         ",", "reductionInstructionNo00"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", "reductionInstruction", "]"}], ",", 
             "reductionAlgebras"}], "]"}], "=!=", "reductionAlgebras"}], ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"reductionInstructionNo00", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"reductionInstruction", ",", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "0"}], "]"}], ",", "Infinity"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"reductionInstruction", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "__Cl", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{"step", ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              "reductionInstructionNo00"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], ".."}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"gaTensorProduct", "@@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"Fold", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                RowBox[{"First", "[", 
                 RowBox[{"NestWhile", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "y", "}"}], ",", 
                    RowBox[{"step", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "y", "]"}], ",", 
                    RowBox[{"First", "[", 
                    RowBox[{"Last", "[", "y", "]"}], "]"}]}], "]"}]}], "]"}], 
                    "[", "#", "]"}], ",", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], 
                   ",", 
                   RowBox[{"{", 
                    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
                   RowBox[{"SameTest", "\[Rule]", "UnsameQ"}], ",", 
                   RowBox[{"Plus", "@@", "al"}], ",", "Infinity", ",", "2"}], 
                  "]"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"al", ",", 
                RowBox[{"{", "}"}]}], "}"}], ",", 
              RowBox[{"(", 
               RowBox[{"RotateRight", "/@", "reductionInstructionNo00"}], 
               ")"}]}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", "_", ",", 
          
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaToTensorProduct", "::", "reductionInstructions"}], 
             ",", "reductionInstruction"}], "]"}], ";", "al"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToTensorProduct", "[", 
     RowBox[{"al_", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"al", "/;", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToTensorProduct", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"gaTensorProduct", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"gaToTensorProduct", "[", 
        RowBox[{"#", ",", "opts"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"List", "@@", "al"}], ")"}]}], "]"}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help steps of how each specific algebra acts on p\[CloseCurlyQuote]s and q\
\[CloseCurlyQuote]s. See ",
 ButtonBox["[NDNO-CoMISoMvCA], [NDSK-EIoRCA],[MRdT].",
  BaseStyle->"Hyperlink",
  ButtonData->"references"]
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}], "-", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"step", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", 
      RowBox[{"Cl", "[", 
       RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "difference", "}"}], ",", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"diff", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "-", 
           RowBox[{"{", 
            RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"__", "?", "NonNegative"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cl", "@@", "diff"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{"col", ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "]"}]}], "}"}], ",",
          "_", ",", 
         RowBox[{"{", 
          RowBox[{"al", ",", "col"}], "}"}]}], "]"}]}], "]"}], "/;", 
     RowBox[{"!", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"step", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"al_Cl", ",", "col_List"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"al", ",", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"col", ",", 
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], "]"}]}], "}"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
The reverse step, i.e. reconstruction of algebra from tensor products is much \
simple, because we don\[CloseCurlyQuote]t need to realize different \
posibilities\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{"ar", "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2", ",", "0"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepRev", "[", 
    RowBox[{"ar_List", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"ar", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0"}], "}"}]}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_gaTensorProduct", "]"}], ":=", 
   RowBox[{"Cl", "@@", 
    RowBox[{"Fold", "[", 
     RowBox[{"stepRev", ",", 
      RowBox[{"List", "@@@", 
       RowBox[{"(", 
        RowBox[{"List", "@@", "al"}], ")"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaFromTensorProduct", "[", "al_Cl", "]"}], ":=", "al"}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Matrix representations of Clifford algebras", "Subsubsection"],

Cell["\<\
Matrix representations of elementary algebras. For general representations we \
limit ouselfs only with simple one parameter representations. In general (see \
Cl2Allrepresentations.nb)  repesentations, which have up to 3 free parameters \
can be constructed. These representations, however, become singular for some \
parameter values, so not included here). Representations are listed in order \
of preference, i.e. Option Automatic will simply take first representation of \
the list.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input"],

Cell["\<\
For Cl[1,0,0]: note outer multiply with {{{0,1},{1,0}} choice will not give \
block diagonal representation! \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Diagonal\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[0,1,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", "\"\<Complex\>\""}], 
       "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "I", "}"}], "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[2,0,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[1,2]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[2,3]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "I"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<IPauli[3,1]\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", "\"\<Symmetric\>\""}],
        "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"this", " ", "is"}], " ", "-", 
       RowBox[{"I", "*", 
        RowBox[{"Pauli", "[", 
         RowBox[{"3", ",", "1"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", " ", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], " ", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", " ", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input"],

Cell["For Cl[1,1,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Antisymmetric\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<SymmetricComplex\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary1\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Imaginary2\>\""}], "]"}], "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "I"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "I"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"-", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "I"}], "*", 
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}]}],
          "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"I", "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"I", "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "I"}], ")"}], "*", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
           "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vRep", "[", 
       RowBox[{
        RowBox[{"Cl", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}], ",", 
        "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], 
      ":>", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
              RowBox[{"-", 
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
              RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}]}], 
         "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input"],

Cell["For Cl[0,2,0]", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"elementaryVRep", "[", 
    RowBox[{"Cl", "[", 
     RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[1,2]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[2,3]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Pauli[3,1]\>\""}], "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<Trigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<TrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"-", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sin", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cos", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometric\>\"", ",", "arg_"}], "]"}], ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\"", ",", "arg_"}], "]"}],
        ":>", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CurlyPhi]", "=", "arg"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}], ",", 
               RowBox[{"-", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"I", "*", 
                RowBox[{"Sinh", "[", "\[CurlyPhi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"-", "I"}], ")"}], "*", 
                RowBox[{"Cosh", "[", "\[CurlyPhi]", "]"}]}]}], "}"}]}], 
            "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"vRep", "[", 
        RowBox[{
         RowBox[{"Cl", "[", 
          RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", "\"\<Real\>\""}], 
        "]"}], "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        "}"}]}], ",", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{"quaternionic", " ", "representations"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"bs", "=", 
          RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[1,2]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[2,3]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "2", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vRep", "[", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Q[3,1]\>\""}], "]"}], "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"bs", "[", 
                RowBox[{
                 RowBox[{"mvDownUp", "[", 
                  RowBox[{
                   RowBox[{"{", "1", "}"}], ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"Cl", "[", 
                  RowBox[{"0", ",", "2"}], "]"}], ",", "\"\<Quaternion\>\""}],
                 "]"}], "}"}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]", 
         "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", "al_Cl", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}], ",", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
        RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaListDefinedElementaryRepresentations", "[", 
     RowBox[{"al_Cl", ",", "rep_String", ",", 
      RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"BaseVectorMultipliers", "/.", 
              RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"BaseVectorMultipliers", "\[Rule]", 
              RowBox[{"Table", "[", 
               RowBox[{"1", ",", 
                RowBox[{"{", 
                 RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
           ")"}]}], ",", 
         RowBox[{"repMatrix", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"vRep", "[", 
             RowBox[{"al", ",", "rep"}], "]"}], "/.", 
            RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
           RowBox[{"{", 
            RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaAlgebraToMatrixRepresentation", "::", 
              "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
           RowBox[{"mult", "=", 
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", 
              RowBox[{"{", 
               RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{"repMatrix", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "/;", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
           ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
           "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
         "rep"}], "]"}]}], "&&", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
        ",", "rep"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaListDefinedElementaryRepresentations", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BaseVectorMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BaseVectorMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}], ",", "repMatrix"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaAlgebraToMatrixRepresentation", "::", 
             "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"arg", "=", 
            RowBox[{"Unique", "[", "\[CurlyPhi]", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{"repMatrix", "=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vRep", "[", 
               RowBox[{"al", ",", "rep", ",", "arg"}], "]"}], "/.", 
              RowBox[{"elementaryVRep", "[", "al", "]"}]}], ")"}]}], ";", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mult", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "*", 
              RowBox[{"repMatrix", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}]}], 
         "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"x_Symbol", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"Symbol", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"SymbolName", "[", "x", "]"}], ",", 
              RowBox[{"\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
             "]"}], "]"}], "/;", 
           RowBox[{
            RowBox[{"Context", "[", "x", "]"}], "===", 
            "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Trigonometric\>\"", ",", "\"\<TrigonometricAntisymmetric\>\"", 
         ",", "\"\<HyperbolicTrigonometric\>\"", ",", 
         "\"\<HyperbolicTrigonometricAntisymmetric\>\""}], "}"}], ",", 
       "rep"}], "]"}], "&&", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
       ",", "rep"}], "]"}]}]}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help function ",
 StyleBox["gaElementaryAlgebraToMatrixRepresentationRules[ ] ",
  FontWeight->"Bold"],
 "construct replacement rules index->matrix for each of vectors (and identity \
element). Note. When dealing with function ",
 StyleBox["gaOrthonormalBase[ ]",
  FontWeight->"Bold"],
 ", which does not hold its arguments, then",
 StyleBox[" ValueQ[gaOrthonormalBase[ ]]",
  FontWeight->"Bold"],
 " returns True if argument was evaluated. So, in this way we cannot decide \
if  base was defined. Then instead of  ",
 StyleBox["ValueQ[ ]",
  FontWeight->"Bold"],
 " for base definition we use check ",
 StyleBox["Head[gaOrthonormalBase[al,{1}]]===gaOrthonormalBase",
  FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
     "representation"}], "=", 
    "\"\<Algeba `1` matrix representation `2` is undefined or invalid.\>\""}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", "rep_String", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "replRules", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaListDefinedElementaryRepresentations", "[", 
            RowBox[{"al", ",", "rep"}], "]"}], "]"}], "===", 
          "gaListDefinedElementaryRepresentations"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", "rep"}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"replRules", "=", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Thread", "[", 
            RowBox[{"Rule", "[", 
             RowBox[{"index2Repl", ",", 
              RowBox[{"gaListDefinedElementaryRepresentations", "[", 
               RowBox[{"al", ",", "rep", ",", "opts"}], "]"}]}], "]"}], "]"}],
            ")"}], ",", 
          RowBox[{
           RowBox[{"{", "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"IdentityMatrix", "[", 
             RowBox[{"di", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
The explicit specification of elementary algebras matrix representations.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaElementaryAlgebraToMatrixRepresentationRules", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"{", 
      RowBox[{"rep__", "?", "MatrixQ"}], "}"}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "alvectors", ",", "index2Repl", ",", "newRep", ",", "thisBase", ",", 
        RowBox[{"di", "=", 
         RowBox[{"Dimensions", "[", 
          RowBox[{
           RowBox[{"{", "rep", "}"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BaseVectorMultipliers", "/.", 
             RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"BaseVectorMultipliers", "\[Rule]", 
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}], "}"}]}], 
          ")"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{"Length", "[", 
             RowBox[{"{", "rep", "}"}], "]"}]}], ")"}], "||", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Plus", "@@", "al"}], "=!=", 
            RowBox[{
             RowBox[{"Dimensions", "[", 
              RowBox[{
               RowBox[{"{", "rep", "}"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], " ", ")"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
             "representation"}], ",", "al", ",", 
            RowBox[{"{", "rep", "}"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "mult", "]"}], "=!=", 
          RowBox[{"{", 
           RowBox[{"Plus", "@@", "al"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaAlgebraToMatrixRepresentation", "::", 
             "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
          RowBox[{"mult", "=", 
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"Plus", "@@", "al"}], "}"}]}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Plus", "@@", "al"}], "===", "1"}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"thisBase", "=", 
          RowBox[{"getBase", "[", 
           RowBox[{"al", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"thisBase", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "a_", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "\[RuleDelayed]", "a"}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newRep", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mult", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"{", "rep", "}"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "mult", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"index2Repl", ",", "newRep"}], "]"}], "]"}], ")"}], ",", 
         RowBox[{
          RowBox[{"{", "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"IdentityMatrix", "[", 
            RowBox[{"di", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input"],

Cell["\<\
Quaternion tensor product H\[CircleTimes]H ->R(4) isomorphism rules, taken \
from [NDSK-EIoRCA]. And simple C\[CircleTimes]H->C(2) rules, using Pauli 1,2 \
matrix representation  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<HH2R4\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", "1"}], "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"1", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"1", ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"i", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"j", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", "1"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "i"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "j"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", 
          RowBox[{"k", ",", "k"}], "}"}], "*)"}], 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}], ",", 
           RowBox[{"bs", "[", 
            RowBox[{
             RowBox[{"mvDownUp", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
             "\"\<Quaternion\>\""}], "]"}]}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}], "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", "1", "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"bs", "[", 
           RowBox[{
            RowBox[{"mvDownUp", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"Cl", "[", 
             RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
            "\"\<Quaternion\>\""}], "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "I"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "without", " ", "isomorphismPreRules", " ", "BaseVectorMultiplies", " ", 
       RowBox[{"don", "'"}], "t", " ", "properly", " ", "work", " ", "with", 
       " ", "above", " ", "isomorphism", " ", "rules"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"isomorphismPreRules", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", "c_", ",", "a3___"}], "]"}], "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "1", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", "c", "}"}], ",", 
             RowBox[{"MV", "|", "bs"}], ",", 
             RowBox[{"Heads", "->", "True"}]}], "]"}], "&&", 
           RowBox[{"c", "=!=", "1"}]}]}]}], ",", 
        RowBox[{
         RowBox[{"gaTensorProduct", "[", 
          RowBox[{"a1___", ",", 
           RowBox[{"c_", "*", "a2_"}], ",", "a3___"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{
          RowBox[{"GeometricProduct", "[", 
           RowBox[{"c", ",", 
            RowBox[{"gaTensorProduct", "[", 
             RowBox[{"a1", ",", "a2", ",", "a3"}], "]"}]}], "]"}], "/;", 
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", "c", "}"}], ",", 
            RowBox[{"MV", "|", "bs"}], ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}]}], "}"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input"],

Cell[TextData[{
 "Help function",
 StyleBox[" applyQuaternionIsomorphismRules[ ]",
  FontWeight->"Bold"],
 ", which apply isomorphism rules under request. The  ",
 StyleBox["nestedApplyQuaternionIsomorphismRules[ ] ",
  FontWeight->"Bold"],
 "apply list of these rules repeatedly"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "a2_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", 
               RowBox[{"a1", ",", "a2"}], "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"applyQuaternionIsomorphismRule", "[", 
     RowBox[{
      RowBox[{"expr_", "?", "MatrixQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", ":", 
          RowBox[{"(", 
           RowBox[{"___Rule", "|", "___RuleDelayed"}], ")"}]}], "}"}], ",", 
        "\"\<Pauli[1,2]\>\""}], "}"}]}], "]"}], ":=", 
    RowBox[{"ArrayFlatten", "[", 
     RowBox[{"expr", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gaTensorProduct", "[", 
         RowBox[{"a1_", ",", "any___"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"GeometricProduct", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"gaTensorProduct", "[", "a1", "]"}], "/.", 
              "isomorphismPreRules"}], ")"}], "/.", 
            RowBox[{"{", "rule", "}"}]}], ")"}], ",", 
          RowBox[{"gaTensorProduct", "[", "any", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nestedQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{"rule_List", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], "]"}], ":=", 
   
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nestNumber", "=", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"Length", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
           "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"applyQuaternionIsomorphismRule", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"rule", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], "]"}], "&"}],
        ",", "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nestedQuaternionIsomorphismRule", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{"rule_List", ",", "\"\<HH2R4\>\""}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nestNumber", "=", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"Length", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{"expr", ",", "_gaTensorProduct", ",", "Infinity"}], 
           "]"}]}], "]"}], "+", "1"}]}], "}"}], ",", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"applyQuaternionIsomorphismRule", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"rule", ",", "\"\<HH2R4\>\""}], "}"}]}], "]"}], "&"}], ",",
        "expr", ",", "nestNumber"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
    RowBox[{
     RowBox[{"expr_", "?", "MatrixQ"}], ",", "ruleListList_", ",", 
     "type_List"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "ruleListList", "]"}], "===", 
      RowBox[{"Length", "[", "type", "]"}]}], ",", 
     RowBox[{"Fold", "[", 
      RowBox[{"nestedQuaternionIsomorphismRule", ",", "expr", ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"ruleListList", ",", "type"}], "}"}], "]"}]}], "]"}], ",", 
     "expr"}], "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "Help function",
 StyleBox[" singleElementOuterMultiply[ ]",
  FontWeight->"Bold"],
 " construct outer product for single algebra element."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"singleElementOuterMultiply", "[", 
       RowBox[{
        RowBox[{"c_.", "*", 
         RowBox[{"bs", "[", 
          RowBox[{"ind_mvDownUp", ",", "algTP_gaTensorProduct"}], "]"}]}], 
        ",", "algRepRules_", ",", 
        RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "productMatrices", ",", "opElement", ",", "opMatrix", ",", "marks", 
           ",", "vars", ",", "varsWithMarks", ",", 
           RowBox[{"replaceTensorProducts", "=", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"theQuaternionReplacementRules", "=", 
            RowBox[{"{", "}"}]}], ",", "quaternionReplacement", ",", 
           "rezultWithoutQuaternionRepl"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"quaternionReplacement", "=", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"QuaternionIsomorphismRules", "/.", 
               RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"QuaternionIsomorphismRules", "\[Rule]", 
               RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"algRepRules", ",", "\"\<Quaternion\>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opElement", "=", "Times"}], ";", 
             RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"varsWithMarks", "=", 
              RowBox[{"Thread", "[", 
               RowBox[{"List", "[", 
                RowBox[{
                 RowBox[{"marks", "=", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", "\"\<Quaternion\>\""}], "]"}], "&"}], "/@",
                     "algRepRules"}], ")"}]}], ",", 
                 RowBox[{"vars", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"Unique", "[", "sEOM", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "algRepRules", "]"}], "}"}]}], 
                   "]"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Count", "[", 
                   RowBox[{"marks", ",", "False"}], "]"}], "===", "1"}], 
                 ")"}], "&&", 
                RowBox[{"quaternionReplacement", "===", 
                 RowBox[{"{", "}"}]}]}], ",", 
               RowBox[{"(*", " ", 
                RowBox[{
                "for", " ", "single", " ", "quaternion", " ", "can", " ", 
                 "use", " ", "GeometricProduct", " ", "immediatelly", " ", 
                 "if", " ", "option", " ", "isomorphismRules", " ", "not", 
                 " ", "set"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"replaceTensorProducts", "=", 
                  RowBox[{"{", 
                   RowBox[{"RuleDelayed", "@@", 
                    RowBox[{
                    StyleBox["{",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{
                    StyleBox["(",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"Pattern", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Blank", "[", "]"}]}], "]"}], "&"}],
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], 
                    StyleBox["/@",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], "vars"}], ")"}]}], ",", 
                    RowBox[{"Times", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"True", "\[Rule]", "Nothing"}]}], "]"}]}], ")"}], 
                    ",", 
                    RowBox[{"(", 
                    RowBox[{"gaTensorProduct", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"varsWithMarks", ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "_"}], "}"}]}], "]"}], "/.", 
                    RowBox[{"False", "\[Rule]", "Nothing"}]}], "]"}]}], 
                    ")"}]}], "]"}]}], "}"}]}], "}"}]}], ")"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"theQuaternionReplacementRules", "=", 
                 RowBox[{
                 "isomorphismRules", "/@", "quaternionReplacement"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"opElement", "=", "gaTensorProduct"}], ";", 
                RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"productMatrices", "=", 
           RowBox[{"(", 
            RowBox[{"opMatrix", "@@@", 
             RowBox[{"MapThread", "[", 
              RowBox[{"ReplaceAll", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"List", "@@", 
                  RowBox[{"(", 
                   RowBox[{"ind", "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "a_", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"gaTensorProduct", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "]"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", "a"}], "}"}]}], ")"}]}], ",", 
                 "\[IndentingNewLine]", "algRepRules"}], "}"}]}], "]"}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"rezultWithoutQuaternionRepl", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "*", 
                 RowBox[{"Nest", "[", 
                  RowBox[{"ArrayFlatten", ",", 
                   RowBox[{"Outer", "[", 
                    RowBox[{"opElement", ",", 
                    RowBox[{"Sequence", "@@", "productMatrices"}]}], "]"}], 
                   ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "productMatrices", "]"}], "-", 
                    "1"}]}], "]"}]}], ")"}], "/.", "replaceTensorProducts"}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"gaTensorProduct", "[", "]"}], "\[RuleDelayed]", "1"}],
               "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"quaternionReplacement", "===", 
             RowBox[{"{", "}"}]}], ",", "rezultWithoutQuaternionRepl", ",", 
            RowBox[{"multipleApplyQuaternionIsomorphismRules", "[", 
             RowBox[{
             "rezultWithoutQuaternionRepl", ",", 
              "theQuaternionReplacementRules", ",", "quaternionReplacement"}],
              "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", 
         RowBox[{"MV", "|", "bs"}], ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input"],

Cell[TextData[{
 "Function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaAlgebraToMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " construct entire algebra matrix representation from known elementary \
algebras representation. For complex (\[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote]) represenattions, when in the decomposion appears \
algebra Cl[1,0] we use the following trick. First restore Cl[p,q] algebra \
from direct from direct product decomposition. Then instead of Cl[p,q] take \
Cl[q,p], for which decomposition into direct product yields Cl[0,1] (instead \
of Cl[1,0]). Calculate orthonormal base and matrix representation for this \
algebra. Take matrices, which corresponds vectors of calculated matrices. \
Multiply these vectors by imaginary unit I. This efectivelly will turn \
algebra Cl[q,p] vectors into Cl[p,q] vectors which we are seeking. Construct \
entire base of algebra using these matrices. The little problem is how to \
ensure strict correspondence between matrices obtained in this way and \
Cl[p,q] elements (if this is possible in general). "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"groupByGrade", "[", 
    RowBox[{"x_List", ",", "algebra_"}], "]"}], ":=", 
   RowBox[{"Internal`PartitionRagged", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Length", "/@", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"gaDefineOrthonormalBase", "[", 
         RowBox[{"algebra", ",", 
          RowBox[{"Quiet", "\[Rule]", "True"}]}], "]"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"gaGetGrade", "[", "#1", "]"}], "===", 
           RowBox[{"gaGetGrade", "[", "#2", "]"}]}], "&"}], ")"}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input"],

Cell["\<\
Simple usage when user don\[CloseCurlyQuote]t provide elementary \
representations. (First[Cases[ ] ] later can be replaced by FirstCase[ ] )\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "NoDefaultData"}], "=", 
   "\"\<No explicit default representations of elementary algebras for `1` \
was given. Will use `2` .\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "whi", "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"whi", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"gaDefaultMatrixRepresentationData", ",", 
            RowBox[{"{", 
             RowBox[{"al", ",", "__"}], "}"}]}], "]"}]}], ")"}], "=!=", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"gaAlgebraToMatrixRepresentation", "@@", 
        RowBox[{"(", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"First", "[", "whi", "]"}], ",", 
             RowBox[{"{", "opts", "}"}]}], "}"}], ",", "1"}], "]"}], ")"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"gaAlgebraToMatrixRepresentation", "::", "NoDefaultData"}], 
          ",", "al", ",", 
          RowBox[{
          "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}], 
         "]"}], ";", 
        RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
         RowBox[{"al", ",", 
          RowBox[{"(", 
           RowBox[{"Sequence", "@@", 
            RowBox[{
            "generalDefaultMatrixRepresentationSetting", "[", "al", "]"}]}], 
           ")"}], ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"repRules", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"definedReps", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"gaListDefinedElementaryRepresentations", "[", "al", "]"}], 
          "]"}]}], ",", 
        RowBox[{"thisRep", "=", 
         RowBox[{"(", 
          RowBox[{"al", "/.", "repRules"}], ")"}]}], ",", 
        "quaternionReplacement", ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"thisRep", ",", 
          RowBox[{"{", 
           RowBox[{"__", "?", "MatrixQ"}], "}"}]}], "]"}], ",", "thisRep", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"thisRep", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", "thisRep", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "special", " ", "case", " ", "for", " ", "compatability", " ", "to",
            " ", "decide", " ", "if", " ", "we", " ", "need", " ", "to", " ", 
           "replace", " ", "quaternion", " ", "by", " ", "matrices"}], "*)"}],
          "\[IndentingNewLine]", 
         RowBox[{"quaternionReplacement", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"QuaternionIsomorphismRules", "/.", 
              RowBox[{"Rest", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"{", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Method", "/.", 
                    RowBox[{"{", "opts", "}"}]}], "/.", 
                   RowBox[{"Options", "[", 
                    RowBox[{
                    "gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                    "]"}]}], ")"}], "}"}], "]"}], "]"}]}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}], 
             "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"quaternionReplacement", "===", "True"}], ")"}], "||", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", "quaternionReplacement", "}"}], "]"}], ",", 
              "\"\<Pauli[1,2]\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"bs", "=", 
                RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"theQuaternionReplacementRules", "=", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "I"}]}], "}"}]}], "}"}]}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", "2", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"bs", "[", 
                    RowBox[{
                    RowBox[{"mvDownUp", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"Cl", "[", 
                    RowBox[{"0", ",", "2", ",", "0"}], "]"}], ",", 
                    "\"\<Quaternion\>\""}], "]"}], "}"}], "}"}], "->", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "I"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}]}], 
                "\[IndentingNewLine]", "}"}]}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Union", "[", 
             RowBox[{"definedReps", ",", "thisRep"}], "]"}], "===", 
            "definedReps"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"gaListDefinedElementaryRepresentations", "[", 
             RowBox[{"al", ",", 
              RowBox[{"First", "[", "thisRep", "]"}], ",", "opts"}], "]"}], "/.",
             "theQuaternionReplacementRules"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{
              "gaElementaryAlgebraToMatrixRepresentationRules", "::", 
               "representation"}], ",", "al", ",", "thisRep"}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}],
        "]"}]}], "]"}], "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_Cl", ",", 
     RowBox[{"repRules", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"method", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Method", "/.", 
             RowBox[{"{", "opts", "}"}]}], "/.", 
            RowBox[{"Options", "[", 
             RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
             "]"}]}], ")"}], "}"}], "]"}]}], ",", "orderAttempt"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"orderAttempt", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Order", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"Rest", "[", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], "]"}], 
          "]"}]}], ")"}]}], ";", 
      RowBox[{
       RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
        RowBox[{
         RowBox[{"gaToTensorProduct", "[", 
          RowBox[{"al", ",", 
           RowBox[{"Order", "->", "orderAttempt"}]}], "]"}], ",", "repRules", 
         ",", "opts"}], "]"}], "/;", 
       RowBox[{"!", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"elementaryTPAlgebras", ",", "al"}], "]"}]}]}]}]}], "]"}]}], 
  ";"}]], "Input"],

Cell["\<\
Possible values are: True,  QuaternionIsomorphismRules -> {\
\[OpenCurlyDoubleQuote]Pauli[1,2]\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]HH2R4\[CloseCurlyDoubleQuote]}. myfun[arg, opts : \
OptionsPattern[{myGrid, Grid}]\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "gaAlgebraToMatrixRepresentation", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<TensorProduct\>\"", ",", 
        RowBox[{"BaseVectorAlgebra", "\[Rule]", "\"\<Automatic\>\""}], ",", 
        RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], ",", 
        RowBox[{"Order", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Cl", "[", 
             RowBox[{"1", ",", "1", ",", "0"}], "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Cl", "[", 
              RowBox[{"2", ",", "0", ",", "0"}], "]"}], ",", 
             RowBox[{"Cl", "[", 
              RowBox[{"0", ",", "2", ",", "0"}], "]"}]}], "}"}]}], "}"}]}]}], 
       "}"}]}], ",", 
     RowBox[{"Quiet", "\[Rule]", "False"}], ",", 
     RowBox[{"BaseVectorMultipliers", "\[Rule]", "1"}], ",", 
     RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "replist"}], "=", 
   "\"\<Not all algebras of `1` was given elementary matrix representations \
`2`. Your cab find defined representations for algebra Alg with \
gaListDefinedElementaryRepresentations[Alg].\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "smaller"}], "=", 
   "\"\<Tensor product decomposition `1` contains Cl[1,0] algebra. Smaller \
(complex) representation matrices can be obtained using Method \
->{\\\"TensorProduct\\\",BaseVectorAlgebra\[Rule]`2`,TargetMatrices\[Rule]\
Reals}.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "option"}], "=", 
   "\"\<Given reduction to algebra tensor product order `1` is not valid, \
will use `2`\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "BaseVectorMultipliers"}],
    "=", "\"\<Option BaseVectorMultipliers `1` has wrong number of elements, \
will set all to unity.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraToMatrixRepresentation", "::", "BaseVectorAlgebra"}], 
    "=", "\"\<BaseVectorAlgebra `1` has different number of vectors than \
algebra `2`. Will proceed with original algebra\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{"al_gaTensorProduct", ",", 
     RowBox[{"repRules", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_Cl", "->", "_"}], ")"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "quiet", ",", "method", ",", "submethodBVA", ",", "algRep", ",", 
       "newAl", ",", "algIso", ",", "orderAttempt", ",", "reductionOrder", 
       ",", "counter", ",", "repNames", ",", "mult", ",", 
       "signatureSplittedVectors", ",", "signatureSplittedSortedVectors", ",",
        "target", ",", "algTrueMinusAlgHelp", ",", "removeVectorList", ",", 
       "addVectorList", ",", "remPos", ",", "quaternionReplacement", ",", 
       "theQuaternionReplacementRules"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{
           RowBox[{"List", "@@", "al"}], ",", "elementaryTPAlgebras"}], "]"}],
          "=!=", "elementaryTPAlgebras"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaAlgebraToMatrixRepresentation", "::", "unable"}], ",", 
           "al"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"option", " ", "check", " ", "and", " ", "set"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"method", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Method", "/.", 
            RowBox[{"{", "opts", "}"}]}], "/.", 
           RowBox[{"Options", "[", 
            RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
            "]"}]}], ")"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"quiet", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Quiet", "/.", 
          RowBox[{"{", "opts", "}"}]}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Quiet"}], "]"}]}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mult", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"BaseVectorMultipliers", "/.", 
           RowBox[{"{", "opts", "}"}]}], ")"}], "/.", 
         RowBox[{"Options", "[", 
          RowBox[{
          "gaAlgebraToMatrixRepresentation", ",", "BaseVectorMultipliers"}], 
          "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mult", "===", "1"}], ",", 
        RowBox[{"mult", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Plus", "@@@", 
            RowBox[{"(", 
             RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "/@", "mult"}], "=!=", 
         RowBox[{"(", 
          RowBox[{"Plus", "@@@", 
           RowBox[{"(", 
            RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaAlgebraToMatrixRepresentation", "::", "BaseVectorMultipliers"}],
            ",", "mult"}], "]"}], ";", 
         RowBox[{"mult", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"(", 
              RowBox[{"List", "@@", "al"}], ")"}]}]}], ")"}]}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"target", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"TargetMatrices", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"TargetMatrices", "\[Rule]", "Reals"}], "}"}]}], ")"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"orderAttempt", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Order", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"Rest", "[", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], "]"}], 
          "]"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"orderAttempt", ",", 
           RowBox[{
            RowBox[{"{", "__Cl", "}"}], "|", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "__Cl", "}"}], ".."}], "}"}]}]}], "]"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Plus", "@@@", 
             RowBox[{"Union", "[", 
              RowBox[{"Flatten", "[", "orderAttempt", "]"}], "]"}]}], "]"}], "===", 
           RowBox[{"{", "2", "}"}]}], ")"}]}], ",", 
        RowBox[{"reductionOrder", "=", "orderAttempt"}], ",", 
        RowBox[{
         RowBox[{"reductionOrder", "=", 
          RowBox[{"(", 
           RowBox[{"Order", "/.", 
            RowBox[{"Rest", "[", 
             RowBox[{"OptionValue", "[", 
              RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
              "]"}], "]"}]}], ")"}]}], ";", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"gaAlgebraToMatrixRepresentation", "::", "option"}], ",", 
           "orderAttempt", ",", "reductionOrder"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"submethodBVA", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"BaseVectorAlgebra", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"BaseVectorAlgebra", "\[Rule]", "\"\<Automatic\>\""}], 
          "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"submethodBVA", "=!=", "\"\<Automatic\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Plus", "@@", 
             RowBox[{"(", 
              RowBox[{"Plus", "@@@", 
               RowBox[{"(", 
                RowBox[{"List", "@@", "al"}], ")"}]}], ")"}]}], ")"}], "=!=", 
           
           RowBox[{"(", 
            RowBox[{"Plus", "@@", "submethodBVA"}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{
             "gaAlgebraToMatrixRepresentation", "::", "BaseVectorAlgebra"}], 
             ",", "submethodBVA", ",", "al"}], "]"}], ";", 
           RowBox[{"submethodBVA", "=", "\"\<Automatic\>\""}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"quaternionReplacement", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"QuaternionIsomorphismRules", "/.", 
             RowBox[{"Rest", "[", "method", "]"}]}], ")"}], "/.", 
           RowBox[{"Rest", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"OptionValue", "[", 
                 RowBox[{"gaAlgebraToMatrixRepresentation", ",", "Method"}], 
                 "]"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"method", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", 
                 RowBox[{"___", "?", "OptionQ"}]}], "}"}]}], "]"}], "]"}], 
            "]"}]}], ")"}], "/.", 
         RowBox[{"{", 
          RowBox[{"QuaternionIsomorphismRules", "\[Rule]", "False"}], "}"}]}],
         ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"quaternionReplacement", ",", 
        RowBox[{"True", "|", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}], "|", 
         RowBox[{"{", 
          RowBox[{"\"\<Pauli[1,2]\>\"", ",", "\"\<HH2R4\>\""}], "}"}]}], ",", 
        
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<HH2R4\>\"", ",", "\"\<Pauli[1,2]\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\"\<HH2R4\>\"", "}"}], "|", "\"\<HH2R4\>\""}], ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "\"\<HH2R4\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\"\<Pauli[1,2]\>\"", "}"}], "|", 
         "\"\<Pauli[1,2]\>\""}], ",", 
        RowBox[{"theQuaternionReplacementRules", "=", 
         RowBox[{"{", "\"\<Pauli[1,2]\>\"", "}"}]}], ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"theQuaternionReplacementRules", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"method", " ", "\"\<TensorProduct\>\""}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"method", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "===", "\"\<TensorProduct\>\""}], 
        ",", 
        RowBox[{"(*", " ", 
         RowBox[{
         "TensorProduct", " ", "method", " ", "uses", " ", "rezults", " ", 
          "of", " ", "tensor", " ", "product", " ", "base", " ", 
          "calculation"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         
         RowBox[{
          RowBox[{"counter", "[", 
           RowBox[{"Cl", "[", 
            RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Switch", "[", 
          RowBox[{"submethodBVA", ",", 
           RowBox[{"\"\<Automatic\>\"", "|", "al"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"(", 
                    RowBox[{"List", "@@", "al"}], ")"}]}], ")"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaAlgebraToMatrixRepresentation", "::", "replist"}],
                  ",", "al", ",", "repRules"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"repNames", "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "al"}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"alP_Cl", "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"alP", ",", 
                    RowBox[{"++", 
                    RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], 
                 "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], 
                "\[RuleDelayed]", 
                RowBox[{"MapAt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                    "}"}]}], ")"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"algRep", "=", 
             RowBox[{
             "gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
              RowBox[{"(", 
               RowBox[{"Append", "@@@", 
                RowBox[{"Transpose", "[", 
                 RowBox[{"{", 
                  RowBox[{"repNames", ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"BaseVectorMultipliers", ",", "mult"}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ",
                "already", " ", "defined"}], ",", " ", 
              RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"al", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "=", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"getBase", "[", 
                RowBox[{"al", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"Quiet", "->", "quiet"}]}], "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "suggest", " ", "method", " ", "for", " ", "smaller", " ", 
              "complex", " ", "matrix", " ", "representations", " ", "when", 
              " ", 
              RowBox[{"C", "[", 
               RowBox[{"1", ",", "0"}], "]"}], " ", "appears", " ", "in", " ",
               "decomposition", " ", "with", " ", "complex", " ", 
              "matrices"}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"algRep", ",", "\"\<Quaternion\>\""}], "]"}], "&&", 
               RowBox[{"Not", "[", 
                RowBox[{"FreeQ", "[", 
                 RowBox[{
                  RowBox[{"List", "@@", "al"}], ",", 
                  RowBox[{"Cl", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], "]"}], "]"}]}],
               ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaAlgebraToMatrixRepresentation", "::", "smaller"}], 
                ",", "al", ",", 
                RowBox[{"Cl", "@@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"gaFromTensorProduct", "[", "al", "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], "]"}], 
                  ")"}]}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "calculate", " ", "matrix", " ", "representations", " ", "for", 
              " ", "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"singleElementOuterMultiply", "[", 
                    RowBox[{"#", ",", "algRep", ",", 
                    RowBox[{
                    "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}]}], "]"}], "&"}], "/@", 
                  RowBox[{"gaOrthonormalBase", "[", 
                   RowBox[{"al", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"x_Symbol", "\[RuleDelayed]", 
                  RowBox[{
                   RowBox[{"Symbol", "[", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                    "]"}], "]"}], "/;", 
                   RowBox[{
                    RowBox[{"Context", "[", "x", "]"}], "===", 
                    "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
                 "\[RuleDelayed]", "singlet"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
               "}"}]}], ")"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Cl", "[", "__", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"0", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"0", ",", "2", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"1", ",", "1", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", 
            RowBox[{
             RowBox[{"counter", "[", 
              RowBox[{"Cl", "[", 
               RowBox[{"2", ",", "0", ",", "0"}], "]"}], "]"}], "=", "0"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"newAl", "=", 
             RowBox[{"gaToTensorProduct", "[", 
              RowBox[{
               RowBox[{"algIso", "=", "submethodBVA"}], ",", 
               RowBox[{"Order", "->", "reductionOrder"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"mult", "===", "1"}], ",", 
              RowBox[{"mult", "=", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Table", "[", 
                   RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                 RowBox[{"Plus", "@@@", 
                  RowBox[{"(", 
                   RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "/@", "mult"}], "=!=", 
               RowBox[{"(", 
                RowBox[{"Plus", "@@@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}]}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{
                 "gaAlgebraToMatrixRepresentation", "::", 
                  "BaseVectorMultipliers"}], ",", "mult"}], "]"}], ";", 
               RowBox[{"mult", "=", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Table", "[", 
                    RowBox[{"1", ",", "#"}], "]"}], "&"}], "/@", 
                  RowBox[{"Plus", "@@@", 
                   RowBox[{"(", 
                    RowBox[{"List", "@@", "newAl"}], ")"}]}]}], ")"}]}]}]}], 
             "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"FreeQ", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"#", ",", "_"}], "]"}]}], "]"}], "&"}], "/@", 
                   RowBox[{"(", 
                    RowBox[{"List", "@@", "newAl"}], ")"}]}], ")"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Message", "[", 
                RowBox[{
                 RowBox[{"gaAlgebraToMatrixRepresentation", "::", "replist"}],
                  ",", "newAl", ",", "repRules"}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "test", " ", "if", " ", "algebra", " ", "base", " ", "was", " ",
                "already", " ", "defined"}], ",", " ", 
              RowBox[{"if", " ", "not"}], ",", " ", "define"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"gaOrthonormalBase", "[", 
              RowBox[{"newAl", ",", 
               RowBox[{"{", "1", "}"}]}], "]"}], "=", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{"getBase", "[", 
                RowBox[{"newAl", ",", 
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"Quiet", "->", "quiet"}]}], "]"}], ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
                  RowBox[{"GeometricProduct", "[", 
                   RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"repNames", "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"List", "@@", "newAl"}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"alP_Cl", "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"alP", ",", 
                    RowBox[{"++", 
                    RowBox[{"counter", "[", "alP", "]"}]}]}], "}"}]}], 
                 "}"}]}], ")"}], "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"alP_Cl", ",", "num_Integer"}], "}"}], 
                "\[RuleDelayed]", 
                RowBox[{"MapAt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"First", "[", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"#", ",", "num"}], "]"}], "]"}], "&"}], ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"repRules", ",", 
                    RowBox[{"_", "[", 
                    RowBox[{"alP", ",", "_"}], "]"}]}], "]"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", "arep_String"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", "arep", "}"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringQ", "[", "#", "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixQ", ",", "#"}], "]"}]}], ")"}]}], "&"}], 
                    ")"}]}], "}"}], ")"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", "arep"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep__", "?", "MatrixQ"}], "}"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "arep", "}"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"acl_", ",", 
                    RowBox[{"{", 
                    RowBox[{"arep", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__", "?", "MatrixQ"}], "}"}], ".."}], ")"}]}], 
                    "}"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"{", "arep", "}"}]}], "}"}]}]}], "}"}]}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"acl_Cl", ",", "any_List"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"acl", ",", 
                    RowBox[{"RotateRight", "[", "any", "]"}]}], "}"}]}], 
                    "}"}]}], ")"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"algRep", "=", 
             RowBox[{
             "gaElementaryAlgebraToMatrixRepresentationRules", "@@@", 
              RowBox[{"(", 
               RowBox[{"Append", "@@@", 
                RowBox[{"Transpose", "[", 
                 RowBox[{"{", 
                  RowBox[{"repNames", ",", 
                   RowBox[{"Thread", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"BaseVectorMultipliers", ",", "mult"}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], ")"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"signatureSplittedVectors", "=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"singleElementOuterMultiply", "[", 
                   RowBox[{"#", ",", "algRep", ",", 
                    RowBox[{
                    "QuaternionIsomorphismRules", "->", 
                    "theQuaternionReplacementRules"}]}], "]"}], "&"}], ",", 
                 RowBox[{"Split", "[", 
                  RowBox[{
                   RowBox[{"gaOrthonormalBase", "[", 
                    RowBox[{"newAl", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#1", ",", "#1"}], "]"}], "===", 
                    RowBox[{"GeometricProduct", "[", 
                    RowBox[{"#2", ",", "#2"}], "]"}]}], ")"}], "&"}]}], "]"}],
                  ",", 
                 RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaTensorProduct", "[", "singlet_", "]"}], 
                  "\[RuleDelayed]", "singlet"}], ",", 
                 RowBox[{
                  RowBox[{"gaTensorProduct", "[", "]"}], "\[Rule]", "1"}]}], 
                "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
            "signatureSplittedSortedVectors", "=", "\[IndentingNewLine]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "x", "}"}], ",", 
                 RowBox[{"Sort", "[", 
                  RowBox[{"x", ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                  "]"}]}], "]"}], ",", "signatureSplittedVectors"}], "]"}]}], 
            ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{"algIso", ",", 
                RowBox[{"Cl", "[", 
                 RowBox[{"0", ",", 
                  RowBox[{"_", "?", "Positive"}], ",", "0"}], "]"}]}], "]"}], 
              ",", 
              RowBox[{"PrependTo", "[", 
               RowBox[{"signatureSplittedSortedVectors", ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{"algIso", ",", 
                RowBox[{"Cl", "[", 
                 RowBox[{
                  RowBox[{"_", "?", "Positive"}], ",", "0", ",", "0"}], 
                 "]"}]}], "]"}], ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"signatureSplittedSortedVectors", ",", 
                RowBox[{"{", "}"}]}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"target", "=!=", "Reals"}], ",", 
              RowBox[{"signatureSplittedSortedVectors", "=", 
               RowBox[{
               "Reverse", "/@", "signatureSplittedSortedVectors"}]}]}], "]"}],
             ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"algTrueMinusAlgHelp", "=", 
             RowBox[{"(", 
              RowBox[{"Subtract", "@@", 
               RowBox[{"(", 
                RowBox[{"Most", "/@", 
                 RowBox[{"(", 
                  RowBox[{"List", "@@@", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"gaFromTensorProduct", "[", "al", "]"}], ",", 
                    "algIso"}], "}"}]}], ")"}]}], ")"}]}], ")"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"Switch", "[", 
             RowBox[{"algTrueMinusAlgHelp", ",", 
              RowBox[{"(*", " ", 
               RowBox[{"0", ",", 
                RowBox[{
                "0", " ", "means", " ", "we", " ", "calculate", " ", "in", 
                 " ", "naitive", " ", "algebra"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}], ",", 
              RowBox[{"Flatten", "[", 
               RowBox[{"signatureSplittedSortedVectors", ",", "1"}], "]"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"_Integer", "?", "Negative"}], ",", 
                RowBox[{"_Integer", "?", "Positive"}]}], "}"}], ",", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
                "has", " ", "more", " ", "positive", " ", "signature", " ", 
                "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"removeVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", 
               RowBox[{"addVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Drop", "[", 
                   RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
                  RowBox[{"Sort", "[", 
                   RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                   "]"}]}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"x_Symbol", "\[RuleDelayed]", 
                  RowBox[{
                   RowBox[{"Symbol", "[", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                    "]"}], "]"}], "/;", 
                   RowBox[{
                    RowBox[{"Context", "[", "x", "]"}], "===", 
                    "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"_Integer", "?", "Positive"}], ",", 
                RowBox[{"_Integer", "?", "Negative"}]}], "}"}], ",", 
              RowBox[{"(*", " ", 
               RowBox[{
               "calculate", " ", "from", " ", "algebra", " ", "which", " ", 
                "has", " ", "more", " ", "negative", " ", "signature", " ", 
                "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"removeVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ";", 
               RowBox[{"addVectorList", "=", 
                RowBox[{"signatureSplittedSortedVectors", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], ";", 
               RowBox[{
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"Sort", "[", 
                   RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"addVectorList", ",", 
                    RowBox[{"(", 
                    RowBox[{"I", "*", 
                    RowBox[{"Take", "[", 
                    RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}]}], "]"}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "_Complex"}], "]"}], "&&", 
                    RowBox[{"Not", "[", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#2", ",", "_Complex"}], "]"}], "]"}]}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"removeVectorList", ",", 
                    RowBox[{"algTrueMinusAlgHelp", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"x_Symbol", "\[RuleDelayed]", 
                  RowBox[{
                   RowBox[{"Symbol", "[", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"SymbolName", "[", "x", "]"}], ",", 
                    RowBox[{
                    "\"\<GeometricAlgebra`p`\>\"", "->", "\"\<\>\""}]}], 
                    "]"}], "]"}], "/;", 
                   RowBox[{
                    RowBox[{"Context", "[", "x", "]"}], "===", 
                    "\"\<GeometricAlgebra`p`\>\""}]}]}], "}"}]}]}]}], 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "_", ",", 
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"gaAlgebraToMatrixRepresentation", "::", "method"}], ",",
              "method"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[TextData[{
 "A different syntax of same function",
 StyleBox[" ",
  FontWeight->"Bold"],
 "gaAlgebraToMatrixRepresentation",
 StyleBox["[ ]",
  FontWeight->"Bold"],
 " constructs entire algebra matrix representation if user provides vector \
representations. "
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "::", "lenghtmismatch"}], "=", 
   "\"\<Number of provided base vector matrices do not match the algebra `1` \
vector number `2`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaAlgebraToMatrixRepresentation", "::", "propertymismatch"}], 
    "=", "\"\<Signatures of provided base vectors do not match the algebra \
`1` signature.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaAlgebraToMatrixRepresentation", "[", 
    RowBox[{
     RowBox[{"alin", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}], ",", 
     "baseVectorRepresentation_List", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"alvectors", ",", 
        RowBox[{"dim", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"First", "[", "baseVectorRepresentation", "]"}], "]"}]}], 
        ",", "sortedBaseVectors", ",", "index2Repl", ",", "replRules", ",", 
        "al"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"al", "=", 
        RowBox[{"gaFromTensorProduct", "[", "alin", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"gaOrthonormalBase", "[", 
            RowBox[{"al", ",", "All"}], "]"}], "]"}], "===", 
          "gaOrthonormalBase"}], ",", 
         RowBox[{"gaDefineOrthonormalBase", "[", 
          RowBox[{"al", ",", "opts"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"alvectors", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"gaOrthonormalBase", "[", 
             RowBox[{"al", ",", "All"}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"gaGetGrade", "[", "#", "]"}], "===", 
              RowBox[{"{", "1", "}"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#1", ",", "#1"}], "]"}], ">=", 
             RowBox[{"GeometricProduct", "[", 
              RowBox[{"#2", ",", "#2"}], "]"}]}], "&"}], ")"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "alvectors", "]"}], "=!=", 
          RowBox[{"Length", "[", "baseVectorRepresentation", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{
            "gaAlgebraToMatrixRepresentation", "::", "lenghtmismatch"}], ",", 
            "al", ",", 
            RowBox[{"Length", "[", "alvectors", "]"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"baseVectorRepresentation", ",", "\"\<Quaternion\>\""}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"opElement", "=", "Times"}], ";", 
          RowBox[{"opMatrix", "=", "Dot"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"opElement", "=", "GeometricProduct"}], ";", 
          RowBox[{"opMatrix", "=", "gaGeometricMatrixProduct"}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"IdentityMatrix", "[", "dim", "]"}], "*", "#"}], 
               ")"}], "&"}], "/@", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"GeometricProduct", "[", 
                 RowBox[{"#", ",", "#"}], "]"}], "&"}], "/@", "alvectors"}], 
              "]"}]}], "=!=", " ", 
            RowBox[{"opMatrix", "[", 
             RowBox[{"#", ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"sortedBaseVectors", "=", 
            RowBox[{"Sort", "[", 
             RowBox[{"baseVectorRepresentation", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Dot", "[", 
                   RowBox[{"#1", ",", "#1"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}], ">=", 
                 RowBox[{
                  RowBox[{"opMatrix", "[", 
                   RowBox[{"#2", ",", "#2"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "&"}], ")"}]}], 
             "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{
           "gaAlgebraToMatrixRepresentation", "::", "propertymismatch"}], ",",
            "al"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"index2Repl", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gaGetIndex", "/@", "alvectors"}], ")"}], "/.", 
          RowBox[{
           RowBox[{"mvDownUp", "[", 
            RowBox[{
             RowBox[{"{", "a_", "}"}], ",", 
             RowBox[{"{", "___", "}"}]}], "]"}], "\[RuleDelayed]", "a"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"replRules", "=", 
        RowBox[{"Thread", "[", 
         RowBox[{"Rule", "[", 
          RowBox[{"index2Repl", ",", "sortedBaseVectors"}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "=", 
         RowBox[{
          RowBox[{"opMatrix", "@@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"gaGetIndex", "/@", 
                 RowBox[{"gaOrthonormalBase", "[", 
                  RowBox[{"al", ",", "All"}], "]"}]}], ")"}], "/.", 
               RowBox[{
                RowBox[{"mvDownUp", "[", 
                 RowBox[{"a_", ",", 
                  RowBox[{"{", "___", "}"}]}], "]"}], "\[RuleDelayed]", 
                "a"}]}], ")"}], "/.", "replRules"}], ")"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"opMatrix", "[", "]"}], "->", 
            RowBox[{"IdentityMatrix", "[", "dim", "]"}]}], "}"}]}]}], 
        ")"}]}]}], "\[IndentingNewLine]", "]"}], "/;", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{"MatrixQ", "/@", "baseVectorRepresentation"}], ")"}]}]}]}], 
  ";"}]}], "Input"],

Cell["\<\
Explicit check if matrix representation matches symbolic GA orthogonal base \
multiplication. Useless for end user, keep in private context. It also \
contains remains of some specific test see Cl[5,0], needs revision.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gaMatrixRepresentationAndOrthogonalBaseTableMatchQ", "[", 
    RowBox[{"algebraBase_List", ",", " ", "matrixRepresentation_List"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"replRules", "=", 
        RowBox[{"Rule", "@@@", 
         RowBox[{"(", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Rest", "/@", 
            RowBox[{"{", 
             RowBox[{"algebraBase", ",", "matrixRepresentation"}], "}"}]}], 
           "]"}], ")"}]}]}], ",", "baseProd", ",", "matrProd", ",", 
       "allTable"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allTable", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"baseProd", "=", 
                RowBox[{
                 RowBox[{
                  RowBox[{"gaOrthonormalBase", "[", 
                   RowBox[{"Cl", "[", 
                    RowBox[{"5", ",", "0"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "\[GeometricProduct]", 
                 RowBox[{
                  RowBox[{"gaOrthonormalBase", "[", 
                   RowBox[{"Cl", "[", 
                    RowBox[{"5", ",", "0"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "j", "]"}], "]"}]}]}], ")"}], "/.", 
              "replRules"}], " ", ",", 
             RowBox[{"matrProd", "=", 
              RowBox[{"gaGeometricMatrixProduct", "[", 
               RowBox[{
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"matrixRepresentation", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
           "True", ",", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"baseProd", "*", 
              RowBox[{"matrixRepresentation", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "===", "matrProd"}], ")"}]}],
           "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{
            RowBox[{"Length", "[", "algebraBase", "]"}], "-", "1"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "i"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"And", "@@", 
       RowBox[{"Flatten", "[", "allTable", "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
At last define function, which authomatically converts expression to matrix \
representation\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], "=", 
    "\"\<Algebra `1` matrix representation or orthonormal base elements \
either are not yet defined or do not match each other. First define with \
gaAlgebraToMatrixRepresentation[ ] and gaDefineOrthonormalBase[ ].\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gaToMatrixRepresentation", "[", 
    RowBox[{"expr_", ",", 
     RowBox[{"al", ":", 
      RowBox[{"(", 
       RowBox[{"_Cl", "|", "_gaTensorProduct"}], ")"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rulesForNonScalars", ",", "allScalars", ",", "allNonScalars"}],
       "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"And", "@@", 
           RowBox[{"(", 
            RowBox[{"MatrixQ", "/@", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}]}], ")"}]}], 
          ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], "===", 
           RowBox[{"Length", "[", 
            RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
          ")"}]}], ")"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"rulesForNonScalars", "=", 
         RowBox[{"Thread", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"Rest", "[", 
             RowBox[{"gaOrthonormalBase", "[", "al", "]"}], "]"}], ",", 
            RowBox[{"Rest", "[", 
             RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "]"}]}], 
           "]"}], "]"}]}], ";", 
        RowBox[{"allScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"{", "0", "}"}]}], "]"}], "*", 
          RowBox[{
           RowBox[{"gaMatrixRepresentation", "[", "al", "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allNonScalars", "=", 
         RowBox[{
          RowBox[{"gaGetMV", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"!", 
             RowBox[{"{", "0", "}"}]}]}], "]"}], "/.", 
          "rulesForNonScalars"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allScalars", "+", "allNonScalars"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"gaToMatrixRepresentation", "::", "NoRepresentation"}], ",", 
         "al"}], "]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input"],

Cell["\<\
Possible ways to improve matrix representation code:
1. Use SparseArrays[ ] to represent large dimension matrices. This becomes \
important, when matrices becomes 32x32 or large.
2. For large algebras representation it would be usefull introduce direct \
multiplication by R(16) matrices. This represents Cl[0,8] and Cl[8,0] \
periodicity of Clifford algebras. Current implementation follows {0,2},{1,1} \
or {2,0} steps only.
3. One could get even more representations if user could specify row/column \
interchange transformation (this is always possible to do after matrix \
representation is calculated).\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Determinants of repsesentations of Clifford algebras", "Subsubsection"],

Cell[TextData[{
 "Definitions of  determinants of matrices with quaternions can be found in  \
Joao Pedro Morais, Svetlin Georgiev, Wolfgang Spro\[Beta]ig, \
\[OpenCurlyDoubleQuote]Real quaternionic calculus handbook\
\[CloseCurlyDoubleQuote], Birkhauser, 2014. These definitons, however are \
useless, because no interpretation is given for the determinant being the \
quaternion. Ian Porteous in  ",
 ButtonBox["[RA-LoCGAaA]",
  BaseStyle->"Hyperlink",
  ButtonData->"references"],
 ", page 42 says that \[OpenCurlyDoubleQuote]determinant of n\[Cross]n \
quaternionic matrix is defined to be square root of determinant of the matrix \
regarded as 2n\[Cross]2n complex matrix, the later necesarry having \
determinant of nonnegative real number\[CloseCurlyDoubleQuote]. The \
realization below calculates determinat exactly this way, except it do not \
take square root (user can easily take it itself). The other source about \
quaternionic determinants is in Andrzej Trautmann, \
\[OpenCurlyDoubleQuote]Clifford algebras and their representations\
\[CloseCurlyDoubleQuote], Encyclopedia of Mathematical physics, eds. J.-P. \
Francoise, G.L. Naber and Tsou S.T., Oxford, Elsevier, 2006, vol 1., pages \
518-530. In the Algebras section he describes exactly the same approach, \
except no square root is mentioned. He also gives two explicit formulas for \
determinans."
}], "Text"],

Cell[TextData[{
 "In order to calculate determinants the stackexchange link ",
 ButtonBox["http://mathematica.stackexchange.com/questions/21061/how-to-get-\
the-determinant-and-inverse-of-a-large-sparse-symmetric-matrix/21065#21065",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/21061/how-to-get-the-\
determinant-and-inverse-of-a-large-sparse-symmetric-matrix/21065#21065"], 
    None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/21061/how-to-get-the-\
determinant-and-inverse-of-a-large-sparse-symmetric-matrix/21065#21065"],
 " might be usefull. Unfortunatelly some test revealed that the built in ",
 StyleBox["Det[ ]",
  FontWeight->"Bold"],
 " works better."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"smarterDet", "[", "mat_", "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "mat", "]"}], "\[LessEqual]", "10"}]}], ":=", 
   RowBox[{"Det", "[", "mat", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"smarterDet", "[", "mat_", "]"}], ":=", 
   RowBox[{
    RowBox[{"smarterDet", "[", "mat", "]"}], "=", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "j"}], "]"}], "]"}], "*", 
       RowBox[{"smarterDet", "[", 
        RowBox[{"Drop", "[", 
         RowBox[{"mat", ",", 
          RowBox[{"{", "1", "}"}], ",", 
          RowBox[{"{", "j", "}"}]}], "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}]}]}], 
  ";"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gaDet", "::", "fail"}], "=", 
    "\"\<Failed to replace quaternion entries by complex 2x2 matrices in `1`.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bs", "=", 
      RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"y_", "+", "w_"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"y", ",", "op"}], "]"}], "+", 
            RowBox[{"x", "[", 
             RowBox[{"w", ",", "op"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{
             RowBox[{"Times", "[", 
              RowBox[{"c_", ",", "d__"}], "]"}], ",", 
             RowBox[{"op___", "?", "OptionQ"}]}], "]"}], ":=", 
           RowBox[{
            RowBox[{"c", "*", 
             RowBox[{"x", "[", 
              RowBox[{
               RowBox[{"Times", "[", "d", "]"}], ",", "op"}], "]"}]}], "/;", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"{", "c", "}"}], ",", 
              RowBox[{"MV", "|", "bs"}], ",", 
              RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "/@", 
       RowBox[{"{", "gaPureLinearity", "}"}]}], ")"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaDet", "[", 
       RowBox[{"mat_", "?", "MatrixQ"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"mat", ",", 
           RowBox[{"MV", "|", "bs"}]}], "]"}], ",", 
         RowBox[{"Det", "[", "mat", "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"quaternionFreeMatrix", ",", 
             RowBox[{"repRuls", "=", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"Rest", "[", 
                 RowBox[{"isomorphismRules", "[", "\"\<Pauli[1,2]\>\"", "]"}],
                  "]"}], ",", 
                RowBox[{
                 RowBox[{"gaTensorProduct", "[", "c_", "]"}], 
                 "\[RuleDelayed]", 
                 RowBox[{"c", "*", 
                  RowBox[{"IdentityMatrix", "[", "2", "]"}]}]}]}], "]"}]}]}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"quaternionFreeMatrix", "=", 
             RowBox[{"ArrayFlatten", "[", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"gaPureLinearity", ",", "mat", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/.", 
                  RowBox[{"gaPureLinearity", "\[Rule]", "gaTensorProduct"}]}],
                  ")"}], "/.", "repRuls"}], ")"}], "\[IndentingNewLine]", 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"FreeQ", "[", 
                RowBox[{"quaternionFreeMatrix", ",", 
                 RowBox[{"MV", "|", "bs"}]}], "]"}], "&&", 
               RowBox[{"MatrixQ", "[", "quaternionFreeMatrix", "]"}]}], ",", 
              RowBox[{"Det", "[", "quaternionFreeMatrix", "]"}], ",", 
              RowBox[{"Message", "[", 
               RowBox[{
                RowBox[{"gaDet", "::", "fail"}], ",", 
                "quaternionFreeMatrix"}], "]"}]}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "/;", 
       
       RowBox[{"(", 
        RowBox[{
         RowBox[{"SameQ", "@@", 
          RowBox[{"Dimensions", "[", "mat", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Dimensions", "[", "mat", "]"}], "]"}], "===", "2"}]}], 
        ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "Input"],

Cell[TextData[{
 "Note.  In  ",
 StyleBox["repRuls",
  FontWeight->"Bold"],
 " rule ",
 StyleBox["gaTensorProduct[c_]\[RuleDelayed]c*IdentityMatrix[2]]",
  FontWeight->"Bold"],
 " should be given last. Otherwise expression  a +\[DoubleStruckE][x] would \
first become  {{a +\[DoubleStruckE][x],0},{0,a +\[DoubleStruckE][x]}} and \
matrix structure will be broken."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["7. Groebner Base", "Section"],

Cell[" Just beginning", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "gbLeadingTerm", ",", "gbLeadingMonomial", ",", "gbLeadingCoefficient"}], 
    "}"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input"],

Cell["Usage", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "::", "usage"}], "=", 
   "\"\<gbLeadingTerm[expr_,ordering_String] returns leading term of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "::", "usage"}], "=", 
   "\"\<gbLeadingMonomial[expr_,ordering_String] returns leading monomial of \
multivector polynomial written in orthonormal base. Defined orderings are \
\\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". These pure \
orderings can be proceeded with \\\"Deg[]\\\", and \\\"InvDeg[]\\\" wrappers, \
i.e. \\\"Deg[InvLex]\\\", etc..., totally giving 4*3 possible \
orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "::", "usage"}], "=", 
   "\"\<gbLeadingCoefficient[expr_,ordering_String] returns leading \
coefficient of multivector polynomial written in orthonormal base. Defined \
orderings are \\\"Lex\\\", \\\"InvLex\\\", \\\"RevLex\\\", \\\"InvRevLex\\\". \
These pure orderings can be proceeded with \\\"Deg[]\\\", and \
\\\"InvDeg[]\\\" wrappers, i.e. \\\"Deg[InvLex]\\\", etc..., totally giving \
4*3 possible orderings.\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell["Help functions and variables", "Subsection"],

Cell["No", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Leading term, leading monomial and leading coefficient", "Subsection"],

Cell[TextData[{
 " Ordering functions (i.e. ",
 StyleBox["gaOrderedQ",
  FontWeight->"Bold"],
 "[ ], etc... )  are realised in section ",
 StyleBox["3. Objects: orthonormal base notation and definition.",
  FontSlant->"Italic"],
 " Defined noncommutative orderings are \\\[CloseCurlyDoubleQuote] Lex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote]. These pure orderings can be proceeded with \\\
\[CloseCurlyDoubleQuote] Deg[]\\\[CloseCurlyDoubleQuote], and \\\
\[CloseCurlyDoubleQuote] InvDeg[]\\\[CloseCurlyDoubleQuote] wrappers, totally \
giving 4*3 possible orderings. Orders \\\[CloseCurlyDoubleQuote] RevLex \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] InvRevLex \\\
\[CloseCurlyDoubleQuote] and the default order \\\[CloseCurlyDoubleQuote] \
InvDeg[Lex]\\\[CloseCurlyDoubleQuote] are not addmissible and cannot be used \
as Groebner base monomial orders.  Commutative coefficients use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s orderings i.e. \\\[CloseCurlyDoubleQuote]Lexicographic \
\\\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] DegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
DegreeReverseLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeLexicographic \\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] NegativeDegreeLexicographic \\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
NegativeDegreeReverseLexicographic \\\[CloseCurlyDoubleQuote] and \\\
\[CloseCurlyDoubleQuote] Reverse[Lexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[DegreeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[DegreeReverseLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeLexicographic]\\\
\[CloseCurlyDoubleQuote], \\\[CloseCurlyDoubleQuote] \
Reverse[NegativeDegreeLexicographic]\\\[CloseCurlyDoubleQuote], \\\
\[CloseCurlyDoubleQuote] Reverse[NegativeDegreeReverseLexicographic]\\\
\[CloseCurlyDoubleQuote]."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingTerm", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exprList", "=", 
       RowBox[{"(", 
        RowBox[{"List", "@@", 
         RowBox[{"Plus", "[", 
          RowBox[{"expr", ",", "Nothing"}], "]"}]}], ")"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "exprList", "]"}], "===", "1"}], ",", "expr", 
       ",", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"gaOrderedQ", "[", "ord", "]"}], "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], ",", "#1", ",", "#2"}], "]"}], 
          "&"}], ",", "exprList"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"0", ",", "_"}], "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gbLeadingMonomial", "[", 
       RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "bs"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingMonomial", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"mvZeroGradeQ", "[", "gblt", "]"}], ",", "1", " ", ",", 
       RowBox[{"gbLeadingMonomial", "[", "gblt", "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseSymbol", "=", 
       RowBox[{"Symbol", "[", "orthonormalBaseSymbolName", "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", 
        RowBox[{"c_.", "*", "bs_baseSymbol"}], "]"}], ":=", "c"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gbLeadingCoefficient", "[", "c_", "]"}], ":=", 
       RowBox[{"c", "/;", 
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"{", "c", "}"}], ",", 
          RowBox[{"MV", "|", "baseSymbol"}], ",", 
          RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"gbLeadingCoefficient", "[", 
    RowBox[{"expr_", ",", "ord_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gblt", "=", 
       RowBox[{"gbLeadingTerm", "[", 
        RowBox[{"expr", ",", "ord"}], "]"}]}], "}"}], ",", 
     RowBox[{"gbLeadingCoefficient", "[", "gblt", "]"}]}], "]"}]}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["xxx", "Subsection"],

Cell[CellGroupData[{

Cell["yyy", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multivector derivatives", "Section"],

Cell["IntricitDerivative, covariantderivative.... Just started", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TheContextSymbolList", "=", 
   RowBox[{"{", 
    RowBox[{
    "mvD", ",", "mvDArg", ",", "\[DoubleStruckE]\[EmptyDownTriangle]", ",", 
     "mvDerivativesToBase", ",", "mvExpandDerivatives"}], "}"}]}], 
  ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeclareIntoContext", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"Unprotect", "@@", "TheContextSymbolList"}], ";", 
  RowBox[{"ClearAll", "@@", "TheContextSymbolList"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "TheContextSymbolList", "]"}], ";"}]}], "Input",
 Evaluatable->False],

Cell["Function description", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mvD", "::", "usage"}], "=", 
   "\"\<The nabla operator of geometric algebra.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[DoubleStruckE]\[EmptyDownTriangle]", "::", "usage"}], "=", 
   "\"\<Notation and shortcut of the nabla operator of geometric algebra in \
orthogonal \[DoubleStruckE][n] base.\>\""}], ";"}]}], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDerivativesToBase", "::", "usage"}], "=", 
   "\"\<DerivativesToToBase[expr_] expands expr with derivatives into \
standard base of gaRunningAlgebra.\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False],

Cell[CellGroupData[{

Cell["Help functions and variables", "Subsection"],

Cell["\<\
Explicitly state what operators are differentiation operators. This \
information is necessary when converting into base representation.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"differentiationSymbolList", "=", 
   RowBox[{"{", "\[DoubleStruckE]\[EmptyDownTriangle]", "}"}]}], 
  ";"}]], "Input",
 Evaluatable->False]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notations and input aliases", "Subsection"],

Cell["\<\
 mvArg[ ] uses brackets to denote expression on which differentiation \
operator is acting. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"mvDArg", "[", 
      RowBox[{"expr_", ",", "id_mvDTarget"}], "]"}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bras", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<(\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<(\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           RowBox[{"Reverse", "[", "id", "]"}]}], ")"}]}]}], ",", 
       RowBox[{"kets", "=", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"TagBox", "[", 
             RowBox[{
              RowBox[{"StyleBox", "[", 
               RowBox[{"\"\<)\>\"", ",", 
                RowBox[{"nablaColor", "[", 
                 RowBox[{
                  RowBox[{"gaNotation", "[", "gaRunningAlgebra", "]"}], ",", 
                  "#"}], "]"}], ",", "Bold"}], "]"}], ",", "\"\<)\>\"", ",", 
              RowBox[{"Tooltip", "->", 
               RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}], "&"}], "/@", 
           "id"}], ")"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TemplateBox", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"MakeBoxes", "[", "expr", "]"}], ",", "id"}], "}"}], ",", 
       "\"\<mvDArg\>\"", ",", 
       RowBox[{"DisplayFunction", "\[Rule]", 
        RowBox[{"Evaluate", "[", 
         RowBox[{
          RowBox[{"StyleBox", "[", 
           RowBox[{
            RowBox[{"RowBox", "[", 
             RowBox[{"{", 
              RowBox[{"bras", ",", "#1", ",", "kets"}], "}"}], "]"}], ",", 
            RowBox[{"AutoSpacing", "\[Rule]", "False"}], ",", 
            RowBox[{"FontTracking", "->", "\"\<Condensed\>\""}]}], "]"}], 
          "&"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False]
}, Open  ]],

Cell[CellGroupData[{

Cell["Linearity, main properties", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gaSetCommutative", "/@", 
   RowBox[{"{", "mvD", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gaSetNonCommutative", "/@", 
   RowBox[{"{", "\[DoubleStruckE]\[EmptyDownTriangle]", "}"}]}], 
  ";"}]}], "Input",
 Evaluatable->False],

Cell[CellGroupData[{

Cell[TextData[{
 "Multivector argument differentiation function ",
 StyleBox["mvDArg[ ] ",
  FontWeight->"Bold"]
}], "Subsubsection"],

Cell[TextData[{
 " ",
 StyleBox["mvArg[expr, id ] ",
  FontWeight->"Bold"],
 " wraps expression which is differentiated by operator with target id"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mvDArg", "[", 
    RowBox[{"ex_", ",", 
     RowBox[{"mvDTarget", "[", "]"}]}], "]"}], ":=", "ex"}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeometricAlgebra`check", "::", "Derivative"}], "=", 
   "\"\<Something wrong `1`\>\""}], ";"}]], "Input",
 Evaluatable->False],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Close Package", "Section"],

Cell["\<\
Execute this section in order to test if all functions are defined in proper \
order\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPrivate", "[", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heads", " ", "=", " ", 
  RowBox[{"MissingForwardDeclarations", "[", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"heads", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{"a", " ", "nice", " ", "development", " ", "aid"}], " ", "*)"}], 
    "  ", 
    RowBox[{"Print", "[", 
     RowBox[{
     "\"\<ERROR, need forwards, or make calls only from private context:\\n\>\
\"", " ", "<>", "  ", 
      RowBox[{"StringListPrintableString", "[", "heads", "]"}]}], "]"}]}], 
   "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "heads", "]"}], ";"}], " "}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPrivate", "[", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$GAPackageHasLoaded", " ", "=", " ", "True"}], ";"}]], "Input"],

Cell["\<\
No need for EndPackage[], because End[] was used in DeclareIntoContext[]??? \
Seems we need it.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"EndPackage", "[", "]"}], ";"}], " "}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackageContext", "<>", " ", "\"\<*\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BaseVectorAlgebra\"\>", ",", "\<\"BaseVectorMultipliers\"\>", 
   ",", "\<\"BeginPrivate\"\>", ",", "\<\"Cl\"\>", 
   ",", "\<\"DeclareIntoContext\"\>", ",", "\<\"DorstProduct\"\>", 
   ",", "\<\"DP\"\>", ",", "\<\"EndPrivate\"\>", 
   ",", "\<\"gaAlgebraMultiplicationTable\"\>", 
   ",", "\<\"gaAlgebraToMatrixRepresentation\"\>", 
   ",", "\<\"gaAntiCommutator\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeries\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffSeriesData\"\>", 
   ",", "\<\"gaBakerCampbellHausdorffTermLogarithm\"\>", 
   ",", "\<\"gaBCHSeries\"\>", ",", "\<\"gaCE\"\>", 
   ",", "\<\"gaCliffordConjugate\"\>", ",", "\<\"gaCommutativeAllQ\"\>", 
   ",", "\<\"gaCommutativeMonomialOrder\"\>", ",", "\<\"gaCommutativeQ\"\>", 
   ",", "\<\"gaCommutator\"\>", ",", "\<\"gaCommutatorExpand\"\>", 
   ",", "\<\"gaCos\"\>", ",", "\<\"gaCosh\"\>", ",", "\<\"gaDefineInput\"\>", 
   ",", "\<\"gaDefineNotation\"\>", ",", "\<\"gaDefineOrthonormalBase\"\>", 
   ",", "\<\"gaDet\"\>", ",", "\<\"gaExp\"\>", 
   ",", "\<\"gaFromTensorProduct\"\>", ",", "\<\"gaGeometricCos\"\>", 
   ",", "\<\"gaGeometricCosh\"\>", ",", "\<\"gaGeometricExp\"\>", 
   ",", "\<\"gaGeometricMatrixProduct\"\>", 
   ",", "\<\"gaGeometricProductExpand\"\>", 
   ",", "\<\"gaGeometricProductSeries\"\>", ",", "\<\"gaGeometricSin\"\>", 
   ",", "\<\"gaGeometricSinh\"\>", ",", "\<\"gaGeometricTan\"\>", 
   ",", "\<\"gaGeometricTanh\"\>", ",", "\<\"gaGetGrade\"\>", 
   ",", "\<\"gaGetIndex\"\>", ",", "\<\"gaGetMV\"\>", 
   ",", "\<\"gaGetSignature\"\>", ",", "\<\"gaGPMatrixPower\"\>", 
   ",", "\<\"gaGPPower\"\>", ",", "\<\"gaGradeInverse\"\>", 
   ",", "\<\"gaGradesOnly\"\>", ",", "\<\"gaHomogeneusGradeQ\"\>", 
   ",", "\<\"gaIndexSort\"\>", ",", "\<\"gaInverse\"\>", 
   ",", "\<\"gaLinearQ\"\>", 
   ",", "\<\"gaListDefinedElementaryRepresentations\"\>", 
   ",", "\<\"gaMagnitude\"\>", ",", "\<\"gaMagnitudeSquared\"\>", 
   ",", "\<\"gaMatrixRepresentation\"\>", 
   ",", "\<\"gaNegativeSignatureIndexList\"\>", 
   ",", "\<\"gaNonCommutativeMonomialOrder\"\>", ",", "\<\"gaNorm\"\>", 
   ",", "\<\"gaNormalize\"\>", ",", "\<\"gaNotation\"\>", 
   ",", "\<\"gaOPMatrixPower\"\>", ",", "\<\"gaOPPower\"\>", 
   ",", "\<\"gaOrderedQ\"\>", ",", "\<\"gaOrthonormalBase\"\>", 
   ",", "\<\"gaOrthonormalDualBase\"\>", ",", "\<\"gaOuterMatrixProduct\"\>", 
   ",", "\<\"gaOuterProductExpand\"\>", ",", "\<\"gaParameterSeries\"\>", 
   ",", "\<\"gaPE\"\>", ",", "\<\"gaPrimitiveIdempotent\"\>", 
   ",", "\<\"gaProductExpand\"\>", ",", "\<\"gaRadonHurwitzNumber\"\>", 
   ",", "\<\"gaReverse\"\>", ",", "\<\"gaRunningAlgebra\"\>", 
   ",", "\<\"gaSeries\"\>", ",", "\<\"gaSeriesData\"\>", 
   ",", "\<\"gaSetCommutative\"\>", ",", "\<\"gaSetLinear\"\>", 
   ",", "\<\"gaSetNonCommutative\"\>", ",", "\<\"gaSin\"\>", 
   ",", "\<\"gaSinh\"\>", ",", "\<\"gaTan\"\>", ",", "\<\"gaTanh\"\>", 
   ",", "\<\"gaTensorProduct\"\>", ",", "\<\"gaToMatrixRepresentation\"\>", 
   ",", "\<\"gaToTensorProduct\"\>", ",", "\<\"gaVectorSpaceDimension\"\>", 
   ",", "\<\"gaZassenhausCoefficient\"\>", ",", "\<\"gaZassenhausSeries\"\>", 
   ",", "\<\"gaZassenhausSeriesData\"\>", ",", "\<\"gbLeadingCoefficient\"\>",
    ",", "\<\"gbLeadingMonomial\"\>", ",", "\<\"gbLeadingTerm\"\>", 
   ",", "\<\"GeometricProduct\"\>", ",", "\<\"GP\"\>", 
   ",", "\<\"InnerProduct\"\>", ",", "\<\"IP\"\>", ",", "\<\"LC\"\>", 
   ",", "\<\"LeftContract\"\>", ",", "\<\"MissingForwardDeclarations\"\>", 
   ",", "\<\"MV\"\>", ",", "\<\"mvDownUp\"\>", ",", "\<\"mvZeroGradeQ\"\>", 
   ",", "\<\"OP\"\>", ",", "\<\"OuterProduct\"\>", 
   ",", "\<\"QuaternionIsomorphismRules\"\>", ",", "\<\"RC\"\>", 
   ",", "\<\"RightContract\"\>", ",", "\<\"ShowStatus\"\>", 
   ",", "\<\"StartingElement\"\>", ",", "\<\"StringListPrintableString\"\>", 
   ",", "\<\"TargetMatrices\"\>", ",", "\<\"TheContextSymbolList\"\>", 
   ",", "\<\"\[DoubleStruckE]\"\>", ",", "\<\"$gaGlobalProperties\"\>", 
   ",", "\<\"$GAPackageContext\"\>", ",", "\<\"$GAPackageHasLoaded\"\>", 
   ",", "\<\"$GAPackageInputAliases\"\>", 
   ",", "\<\"$GAPackageOnlyContextPath\"\>", 
   ",", "\<\"$GAPackagePrivateContext\"\>", 
   ",", "\<\"$GAUnprotectionList\"\>"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<`\>\""}], "]"}], "]"}], "&"}], ")"}], "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"$GAPackagePrivateContext", "<>", " ", "\"\<*\>\""}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"A\"\>", ",", "\<\"a1\"\>", 
   ",", "\<\"a1$\"\>", ",", "\<\"a2\"\>", ",", "\<\"a2$\"\>", 
   ",", "\<\"aa\"\>", ",", "\<\"aa$\"\>", ",", "\<\"accept\"\>", 
   ",", "\<\"accepted\"\>", ",", "\<\"acl\"\>", ",", "\<\"acl$\"\>", 
   ",", "\<\"additionalTestFunction\"\>", ",", "\<\"addVectorList\"\>", 
   ",", "\<\"addVectorList$\"\>", ",", "\<\"al\"\>", ",", "\<\"al1\"\>", 
   ",", "\<\"al1$\"\>", ",", "\<\"al2\"\>", ",", "\<\"al2$\"\>", 
   ",", "\<\"alB\"\>", ",", "\<\"alB$\"\>", ",", "\<\"alc\"\>", 
   ",", "\<\"alc$\"\>", ",", "\<\"algBoxes\"\>", ",", "\<\"algebra\"\>", 
   ",", "\<\"algebraSeq\"\>", ",", "\<\"algebraSeq$\"\>", 
   ",", "\<\"algIso\"\>", ",", "\<\"algIso$\"\>", ",", "\<\"algRep\"\>", 
   ",", "\<\"algRepRules\"\>", ",", "\<\"algRepRules$\"\>", 
   ",", "\<\"algRep$\"\>", ",", "\<\"algTP\"\>", ",", "\<\"algTP$\"\>", 
   ",", "\<\"algTrueMinusAlgHelp\"\>", ",", "\<\"algTrueMinusAlgHelp$\"\>", 
   ",", "\<\"aliasName\"\>", ",", "\<\"aliasReplacementRul\"\>", 
   ",", "\<\"alin\"\>", ",", "\<\"allNonScalars\"\>", 
   ",", "\<\"allNonScalars$\"\>", ",", "\<\"allScalars\"\>", 
   ",", "\<\"allScalars$\"\>", ",", "\<\"alP\"\>", ",", "\<\"alposition\"\>", 
   ",", "\<\"alposition$\"\>", ",", "\<\"alP$\"\>", 
   ",", "\<\"alreadyCalculatedProducts\"\>", 
   ",", "\<\"alreadyCalculatedProductsAdoptedToSingle\"\>", 
   ",", "\<\"alreadyPrintedList\"\>", ",", "\<\"alreadyUsedColors\"\>", 
   ",", "\<\"alsty\"\>", ",", "\<\"alsty$\"\>", ",", "\<\"alvectors\"\>", 
   ",", "\<\"alvectors$\"\>", ",", "\<\"al$\"\>", ",", "\<\"any\"\>", 
   ",", "\<\"any1\"\>", ",", "\<\"any1$\"\>", ",", "\<\"any2\"\>", 
   ",", "\<\"any2$\"\>", ",", "\<\"any3\"\>", ",", "\<\"anycoef\"\>", 
   ",", "\<\"anyCoef1\"\>", ",", "\<\"anyCoef1$\"\>", ",", "\<\"anyCoef2\"\>",
    ",", "\<\"anyCoef2$\"\>", ",", "\<\"anycoef$\"\>", ",", "\<\"any$\"\>", 
   ",", "\<\"ap1\"\>", ",", "\<\"ap1$\"\>", ",", "\<\"ap2\"\>", 
   ",", "\<\"ap2$\"\>", ",", "\<\"applyQuaternionIsomorphismRule\"\>", 
   ",", "\<\"ar\"\>", ",", "\<\"arep\"\>", ",", "\<\"arep$\"\>", 
   ",", "\<\"arg\"\>", ",", "\<\"args\"\>", ",", "\<\"argsd\"\>", 
   ",", "\<\"argsd$\"\>", ",", "\<\"argsu\"\>", ",", "\<\"argsu$\"\>", 
   ",", "\<\"arg$\"\>", ",", "\<\"aTemp\"\>", ",", "\<\"a$\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"B\"\>", ",", "\<\"ba\"\>", ",", "\<\"base\"\>",
    ",", "\<\"baseSymbol\"\>", ",", "\<\"baseSymbolN\"\>", 
   ",", "\<\"baseSymbol$\"\>", ",", "\<\"baseVectorRepresentation\"\>", 
   ",", "\<\"base$\"\>", ",", "\<\"ba$\"\>", ",", "\<\"bb\"\>", 
   ",", "\<\"bb$\"\>", ",", "\<\"bivectorsOfSpecialAlgebra\"\>", 
   ",", "\<\"bs\"\>", ",", "\<\"bs$\"\>", ",", "\<\"bTemp\"\>", 
   ",", "\<\"bv\"\>", ",", "\<\"bv$\"\>", ",", "\<\"b$\"\>", ",", "\<\"c\"\>",
    ",", "\<\"ca\"\>", ",", "\<\"ca$\"\>", ",", "\<\"channel\"\>", 
   ",", "\<\"cl\"\>", ",", "\<\"col\"\>", 
   ",", "\<\"commutingPositiveBlades\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree\"\>", 
   ",", "\<\"commutingPositiveBladesProductFree$\"\>", 
   ",", "\<\"commutingPositiveBlades$\"\>", 
   ",", "\<\"commutingWithElement\"\>", ",", "\<\"comOrd\"\>", 
   ",", "\<\"comOrdMod\"\>", ",", "\<\"comOrdMod$\"\>", 
   ",", "\<\"comOrd$\"\>", ",", "\<\"CompileTo\"\>", ",", "\<\"counter\"\>", 
   ",", "\<\"counter$\"\>", ",", "\<\"currentAlg\"\>", 
   ",", "\<\"currentAlg$\"\>", ",", "\<\"c$\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"dat1\"\>", ",", "\<\"dat2\"\>", ",", "\<\"def\"\>", 
   ",", "\<\"defCol\"\>", ",", "\<\"defCol$\"\>", 
   ",", "\<\"definedGrades\"\>", ",", "\<\"definedGrades$\"\>", 
   ",", "\<\"definedReps\"\>", ",", "\<\"definedReps$\"\>", 
   ",", "\<\"def$\"\>", ",", "\<\"di\"\>", ",", "\<\"diff\"\>", 
   ",", "\<\"difference\"\>", ",", "\<\"difference$\"\>", 
   ",", "\<\"diff$\"\>", ",", "\<\"dim\"\>", ",", "\<\"dim$\"\>", 
   ",", "\<\"dinB1\"\>", ",", "\<\"dinB1$\"\>", ",", "\<\"dinB2\"\>", 
   ",", "\<\"dinB2$\"\>", ",", "\<\"directLogTempMatrix\"\>", 
   ",", "\<\"di$\"\>", ",", "\<\"downIndex\"\>", ",", "\<\"downIndex$\"\>", 
   ",", "\<\"du1\"\>", ",", "\<\"du1$\"\>", ",", "\<\"du2\"\>", 
   ",", "\<\"du2$\"\>", ",", "\<\"d$\"\>", 
   ",", "\<\"elementaryTPAlgebras\"\>", ",", "\<\"elementaryVRep\"\>", 
   ",", "\<\"expandZasExp\"\>", ",", "\<\"expansion\"\>", 
   ",", "\<\"expansionOrder\"\>", ",", "\<\"expansionOrder$\"\>", 
   ",", "\<\"expansion$\"\>", ",", "\<\"expArgs\"\>", ",", "\<\"expArgs$\"\>",
    ",", "\<\"expectedNumberOfPrimitiveIdempotents\"\>", 
   ",", "\<\"expectedNumberOfPrimitiveIdempotents$\"\>", ",", "\<\"expr\"\>", 
   ",", "\<\"exprList\"\>", ",", "\<\"exprList$\"\>", ",", "\<\"exprs\"\>", 
   ",", "\<\"expr$\"\>", ",", "\<\"f\"\>", ",", "\<\"fe\"\>", 
   ",", "\<\"fe$\"\>", ",", "\<\"ff\"\>", ",", "\<\"FFGGm1\"\>", 
   ",", "\<\"FFGGm1$\"\>", ",", "\<\"gaAdjoint\"\>", ",", "\<\"gaCom\"\>", 
   ",", "\<\"gaDefaultMatrixRepresentationData\"\>", 
   ",", "\<\"gaDefineOrthonormalBaseMain\"\>", 
   ",", "\<\"gaElementaryAlgebraToMatrixRepresentationRules\"\>", 
   ",", "\<\"gaff\"\>", ",", "\<\"gaGeneralBaseSymbolInputAlias\"\>", 
   ",", "\<\"gaOrthonormalBaseSymbolInputAlias\"\>", 
   ",", "\<\"gaOrthonormalBaseSymbolName\"\>", ",", "\<\"gap\"\>", 
   ",", "\<\"gaPureLinearity\"\>", ",", "\<\"gaq\"\>", ",", "\<\"gar\"\>", 
   ",", "\<\"gblt\"\>", ",", "\<\"gblt$\"\>", 
   ",", "\<\"generalBaseSymbolInputAlias\"\>", 
   ",", "\<\"generateCommutatorForm\"\>", ",", "\<\"getBase\"\>", 
   ",", "\<\"gr\"\>", ",", "\<\"grade\"\>", ",", "\<\"grades\"\>", 
   ",", "\<\"grades$\"\>", ",", "\<\"grade$\"\>", ",", "\<\"gro\"\>", 
   ",", "\<\"grOnly\"\>", ",", "\<\"groupByGrade\"\>", 
   ",", "\<\"grouping\"\>", ",", "\<\"grouping$\"\>", ",", "\<\"gro$\"\>", 
   ",", "\<\"grRequested\"\>", ",", "\<\"gr$\"\>", ",", "\<\"half1\"\>", 
   ",", "\<\"half1$\"\>", ",", "\<\"half2\"\>", ",", "\<\"half2$\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"i1\"\>", ",", "\<\"i2\"\>", 
   ",", "\<\"idempotentList\"\>", ",", "\<\"idempotentList$\"\>", 
   ",", "\<\"ifPrint\"\>", ",", "\<\"ignoreMe\"\>", ",", "\<\"ignoreMe$\"\>", 
   ",", "\<\"iI\"\>", ",", "\<\"iI$\"\>", ",", "\<\"in\"\>", 
   ",", "\<\"inc\"\>", ",", "\<\"inc$\"\>", ",", "\<\"ind\"\>", 
   ",", "\<\"ind1\"\>", ",", "\<\"ind1$\"\>", ",", "\<\"ind2\"\>", 
   ",", "\<\"ind2$\"\>", ",", "\<\"index2Repl\"\>", 
   ",", "\<\"index2Repl$\"\>", ",", "\<\"indown\"\>", ",", "\<\"indSet\"\>", 
   ",", "\<\"indSetReplRul\"\>", ",", "\<\"ind$\"\>", ",", "\<\"inEx\"\>", 
   ",", "\<\"inEx$\"\>", ",", "\<\"inf0\"\>", ",", "\<\"infn\"\>", 
   ",", "\<\"initialSeq\"\>", ",", "\<\"initialSeq$\"\>", 
   ",", "\<\"inpOpt\"\>", ",", "\<\"inpOpt$\"\>", 
   ",", "\<\"intesectionIJ\"\>", ",", "\<\"intesectionIJ$\"\>", 
   ",", "\<\"inup\"\>", ",", "\<\"invdeglexIndexList\"\>", ",", "\<\"in$\"\>",
    ",", "\<\"isomorphismRules\"\>", ",", "\<\"i$\"\>", ",", "\<\"j\"\>", 
   ",", "\<\"j1\"\>", ",", "\<\"j2\"\>", ",", "\<\"jJ\"\>", 
   ",", "\<\"jJ$\"\>", ",", "\<\"j$\"\>", ",", "\<\"k\"\>", 
   ",", "\<\"keysB\"\>", ",", "\<\"keysDB\"\>", ",", "\<\"k$\"\>", 
   ",", "\<\"len\"\>", ",", "\<\"lena1\"\>", ",", "\<\"lena1$\"\>", 
   ",", "\<\"lena2\"\>", ",", "\<\"lena2$\"\>", ",", "\<\"len$\"\>", 
   ",", "\<\"logTempMatrix\"\>", ",", "\<\"ls\"\>", ",", "\<\"m\"\>", 
   ",", "\<\"makeProductTerm\"\>", ",", "\<\"mark\"\>", ",", "\<\"marks\"\>", 
   ",", "\<\"marks$\"\>", ",", "\<\"mark$\"\>", ",", "\<\"mat\"\>", 
   ",", "\<\"mat$\"\>", ",", "\<\"max\"\>", ",", "\<\"maxOrder\"\>", 
   ",", "\<\"maxOrder$\"\>", ",", "\<\"max$\"\>", ",", "\<\"method\"\>", 
   ",", "\<\"method$\"\>", ",", "\<\"mult\"\>", 
   ",", "\<\"multipleApplyQuaternionIsomorphismRules\"\>", 
   ",", "\<\"mult$\"\>", ",", "\<\"mvAltProductSignatureMap\"\>", 
   ",", "\<\"mvAltProductSignatureMapC\"\>", 
   ",", "\<\"mvAntisymmetricProductSignatureMap\"\>", 
   ",", "\<\"mvAntisymmetricProductSignatureMapC\"\>", 
   ",", "\<\"mvDownUpIntersection\"\>", ",", "\<\"mvDownUpUnion\"\>", 
   ",", "\<\"mvIndexToBinaryLikeRepresentationC\"\>", 
   ",", "\<\"mvInvDegLexSortedIndexList\"\>", ",", "\<\"mvMu\"\>", 
   ",", "\<\"mvMuS\"\>", ",", "\<\"mvNonCommutativeDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvDegC\"\>", 
   ",", "\<\"mvNonCommutativeInvLexC\"\>", 
   ",", "\<\"mvNonCommutativeInvRevLexC\"\>", 
   ",", "\<\"mvNonCommutativeLexC\"\>", 
   ",", "\<\"mvNonCommutativeRevLexC\"\>", 
   ",", "\<\"mvProductSignatureMap\"\>", 
   ",", "\<\"mvProductSignatureMapC\"\>", 
   ",", "\<\"mvSetSymmetricDifference\"\>", 
   ",", "\<\"mvSetSymmetricDifferenceForIndex\"\>", 
   ",", "\<\"mvSignatureOfIncreasingPermutation\"\>", 
   ",", "\<\"myexressions\"\>", ",", "\<\"myStrings\"\>", ",", "\<\"m$\"\>", 
   ",", "\<\"n\"\>", ",", "\<\"name\"\>", 
   ",", "\<\"nestedQuaternionIsomorphismRule\"\>", ",", "\<\"nestNumber\"\>", 
   ",", "\<\"nestNumber$\"\>", ",", "\<\"newAl\"\>", ",", "\<\"newAl$\"\>", 
   ",", "\<\"newColor\"\>", ",", "\<\"newColor$\"\>", ",", "\<\"newRep\"\>", 
   ",", "\<\"newRep$\"\>", ",", "\<\"nextAccept\"\>", 
   ",", "\<\"nontrivialEntries\"\>", ",", "\<\"nontrivialEntries$\"\>", 
   ",", "\<\"nsq\"\>", ",", "\<\"nsq$\"\>", ",", "\<\"num\"\>", 
   ",", "\<\"numberOfPrimitiveIdempotents\"\>", ",", "\<\"num$\"\>", 
   ",", "\<\"n$\"\>", ",", "\<\"of\"\>", ",", "\<\"of$\"\>", 
   ",", "\<\"oldlength\"\>", ",", "\<\"oldlength$\"\>", ",", "\<\"op\"\>", 
   ",", "\<\"opElement\"\>", ",", "\<\"opElement$\"\>", 
   ",", "\<\"opMatrix\"\>", ",", "\<\"opMatrix$\"\>", ",", "\<\"opts\"\>", 
   ",", "\<\"opts$\"\>", ",", "\<\"op$\"\>", ",", "\<\"ord\"\>", 
   ",", "\<\"order\"\>", ",", "\<\"orderAttempt\"\>", 
   ",", "\<\"orderAttempt$\"\>", ",", "\<\"orderedQCommutative\"\>", 
   ",", "\<\"orderedQNoncommutative\"\>", ",", "\<\"ord$\"\>", 
   ",", "\<\"orthonormalBaseSymbolInputAlias\"\>", 
   ",", "\<\"orthonormalBaseSymbolName\"\>", ",", "\<\"other\"\>", 
   ",", "\<\"other1\"\>", ",", "\<\"other1$\"\>", ",", "\<\"other2\"\>", 
   ",", "\<\"other2$\"\>", ",", "\<\"outerCtx\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"pair\"\>", ",", "\<\"pfd\"\>", ",", "\<\"pfdProto\"\>", 
   ",", "\<\"pfdProto$\"\>", ",", "\<\"pfd$\"\>", ",", "\<\"pfi\"\>", 
   ",", "\<\"pfiProto\"\>", ",", "\<\"pfiProto$\"\>", ",", "\<\"pfi$\"\>", 
   ",", "\<\"pickNextColor\"\>", ",", "\<\"pickNextRandomColor\"\>", 
   ",", "\<\"point\"\>", ",", "\<\"positiveBlades\"\>", 
   ",", "\<\"positiveBlades$\"\>", ",", "\<\"pp\"\>", ",", "\<\"pp$\"\>", 
   ",", "\<\"predefinedColorList\"\>", ",", "\<\"privateCtx\"\>", 
   ",", "\<\"productAlgebra\"\>", ",", "\<\"productMatrices\"\>", 
   ",", "\<\"productMatrices$\"\>", ",", "\<\"p$\"\>", ",", "\<\"q\"\>", 
   ",", "\<\"qp\"\>", ",", "\<\"qp$\"\>", ",", "\<\"qthpower\"\>", 
   ",", "\<\"qthpower$\"\>", ",", "\<\"quality\"\>", 
   ",", "\<\"quaternionFreeMatrix\"\>", ",", "\<\"quaternionFreeMatrix$\"\>", 
   ",", "\<\"quaternionReplacement\"\>", 
   ",", "\<\"quaternionReplacement$\"\>", ",", "\<\"quiet\"\>", 
   ",", "\<\"quiet$\"\>", ",", "\<\"q$\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"ra\"\>", ",", "\<\"raEx\"\>", ",", "\<\"raEx$\"\>", 
   ",", "\<\"rang\"\>", ",", "\<\"ra$\"\>", ",", "\<\"reductionAlgebras\"\>", 
   ",", "\<\"reductionInstruction\"\>", 
   ",", "\<\"reductionInstructionNo00\"\>", 
   ",", "\<\"reductionInstructionNo00$\"\>", 
   ",", "\<\"reductionInstruction$\"\>", ",", "\<\"reductionOrder\"\>", 
   ",", "\<\"reductionOrder$\"\>", ",", "\<\"relevantPairs\"\>", 
   ",", "\<\"relevantPairs$\"\>", ",", "\<\"removeElems\"\>", 
   ",", "\<\"removeElems$\"\>", ",", "\<\"removeProductsOfElements\"\>", 
   ",", "\<\"removeVectorList\"\>", ",", "\<\"removeVectorList$\"\>", 
   ",", "\<\"remPos\"\>", ",", "\<\"remPos$\"\>", ",", "\<\"rep\"\>", 
   ",", "\<\"replaceTensorProducts\"\>", 
   ",", "\<\"replaceTensorProducts$\"\>", ",", "\<\"replRules\"\>", 
   ",", "\<\"replRules$\"\>", ",", "\<\"repMatrix\"\>", 
   ",", "\<\"repMatrix$\"\>", ",", "\<\"repNames\"\>", 
   ",", "\<\"repNames$\"\>", ",", "\<\"repRules\"\>", 
   ",", "\<\"repRules$\"\>", ",", "\<\"repRuls\"\>", ",", "\<\"repRuls$\"\>", 
   ",", "\<\"res\"\>", ",", "\<\"restOpts\"\>", ",", "\<\"restOpts$\"\>", 
   ",", "\<\"res$\"\>", ",", "\<\"rez\"\>", 
   ",", "\<\"rezultWithoutQuaternionRepl\"\>", 
   ",", "\<\"rezultWithoutQuaternionRepl$\"\>", ",", "\<\"rez$\"\>", 
   ",", "\<\"rule\"\>", ",", "\<\"ruleListList\"\>", ",", "\<\"rules\"\>", 
   ",", "\<\"rulesForNonScalars\"\>", ",", "\<\"rulesForNonScalars$\"\>", 
   ",", "\<\"r$\"\>", ",", "\<\"s\"\>", ",", "\<\"sb\"\>", ",", "\<\"sd\"\>", 
   ",", "\<\"sd$\"\>", ",", "\<\"selectedBE\"\>", ",", "\<\"selectedBE$\"\>", 
   ",", "\<\"sEOM\"\>", ",", "\<\"seriesType\"\>", ",", "\<\"seriesType$\"\>",
    ",", "\<\"setSymDiff4TP\"\>", ",", "\<\"setSymDiff4TP$\"\>", 
   ",", "\<\"sf\"\>", ",", "\<\"sf$\"\>", 
   ",", "\<\"signatureSplittedSortedVectors\"\>", 
   ",", "\<\"signatureSplittedSortedVectors$\"\>", 
   ",", "\<\"signatureSplittedVectors\"\>", 
   ",", "\<\"signatureSplittedVectors$\"\>", ",", "\<\"signProdSigMap4TP\"\>",
    ",", "\<\"signProdSigMap4TP$\"\>", 
   ",", "\<\"singleElementOuterMultiply\"\>", ",", "\<\"singlet\"\>", 
   ",", "\<\"singlet$\"\>", ",", "\<\"smartColors\"\>", 
   ",", "\<\"sortedBaseVectors\"\>", ",", "\<\"sortedBaseVectors$\"\>", 
   ",", "\<\"specAlgebra\"\>", ",", "\<\"specAlgebra$\"\>", 
   ",", "\<\"startEl\"\>", ",", "\<\"startElement\"\>", 
   ",", "\<\"startElements\"\>", ",", "\<\"startElement$\"\>", 
   ",", "\<\"status\"\>", ",", "\<\"step\"\>", ",", "\<\"stepRev\"\>", 
   ",", "\<\"stringNames\"\>", ",", "\<\"stringNames$\"\>", 
   ",", "\<\"sty\"\>", ",", "\<\"sty$\"\>", ",", "\<\"submethodBVA\"\>", 
   ",", "\<\"submethodBVA$\"\>", ",", "\<\"sum\"\>", ",", "\<\"sum$\"\>", 
   ",", "\<\"sym\"\>", ",", "\<\"symbolName\"\>", ",", "\<\"symbolName$\"\>", 
   ",", "\<\"synm\"\>", ",", "\<\"synm$\"\>", ",", "\<\"s$\"\>", 
   ",", "\<\"t\"\>", ",", "\<\"target\"\>", ",", "\<\"target$\"\>", 
   ",", "\<\"temp\"\>", ",", "\<\"temp$\"\>", 
   ",", "\<\"tensorProductIsomorphicToAlgebra\"\>", ",", "\<\"term\"\>", 
   ",", "\<\"termsToTake\"\>", ",", "\<\"termsToTake$\"\>", 
   ",", "\<\"term$\"\>", ",", "\<\"testList\"\>", 
   ",", "\<\"theQuaternionReplacementRules\"\>", 
   ",", "\<\"theQuaternionReplacementRules$\"\>", ",", "\<\"thisBase\"\>", 
   ",", "\<\"thisBase$\"\>", ",", "\<\"thisRep\"\>", ",", "\<\"thisRep$\"\>", 
   ",", "\<\"triangularNumber\"\>", ",", "\<\"type\"\>", ",", "\<\"u\"\>", 
   ",", "\<\"u1\"\>", ",", "\<\"u2a\"\>", ",", "\<\"u2b\"\>", 
   ",", "\<\"u3\"\>", ",", "\<\"uexp\"\>", ",", "\<\"uinB1\"\>", 
   ",", "\<\"uinB1$\"\>", ",", "\<\"uinB2\"\>", ",", "\<\"uinB2$\"\>", 
   ",", "\<\"uMVec\"\>", ",", "\<\"uniqueMaskForArbitraryAlgebra\"\>", 
   ",", "\<\"uniqueMaskForSpecAlgebra\"\>", ",", "\<\"unitElement\"\>", 
   ",", "\<\"up1\"\>", ",", "\<\"up1$\"\>", ",", "\<\"up2\"\>", 
   ",", "\<\"up2$\"\>", ",", "\<\"updateInputAlias\"\>", ",", "\<\"u$\"\>", 
   ",", "\<\"v\"\>", ",", "\<\"v1\"\>", ",", "\<\"v1$\"\>", 
   ",", "\<\"value\"\>", ",", "\<\"value$\"\>", ",", "\<\"var\"\>", 
   ",", "\<\"variants\"\>", ",", "\<\"variants$\"\>", ",", "\<\"vars\"\>", 
   ",", "\<\"varsWithMarks\"\>", ",", "\<\"varsWithMarks$\"\>", 
   ",", "\<\"vars$\"\>", ",", "\<\"vectorsOfArbitraryAlgebra\"\>", 
   ",", "\<\"vectorsOfSpecialAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebra\"\>", 
   ",", "\<\"vectorsOfTensorProductAlgebraMetricSorted\"\>", 
   ",", "\<\"vRep\"\>", ",", "\<\"w\"\>", ",", "\<\"what\"\>", 
   ",", "\<\"whi\"\>", ",", "\<\"whi$\"\>", ",", "\<\"w$\"\>", 
   ",", "\<\"x\"\>", ",", "\<\"x1\"\>", ",", "\<\"x1$\"\>", ",", "\<\"x2\"\>",
    ",", "\<\"x2$\"\>", ",", "\<\"x$\"\>", ",", "\<\"y\"\>", 
   ",", "\<\"y1\"\>", ",", "\<\"y2\"\>", ",", "\<\"y$\"\>", 
   ",", "\<\"\[CurlyPhi]\"\>"}], "}"}]], "Output"]
}, Open  ]],

Cell["Check if global context remains clear .", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", 
  RowBox[{"\"\<Global`\>\"", "<>", " ", "\"\<*\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes, drawbacks, future plans", "Section"],

Cell["End notes, drawbacks", "Text"],

Cell["\<\
Implement calculation of derivatives (orthonormal base first)\
\>", "Text"],

Cell["\<\
Implement groebner base for outer product, then for whole clifford algebra \
(in orthonormal base).\
\>", "Text"],

Cell["\<\
Introduce? CommutablePairQ[a,b] which returs True if we know rule how to \
interchange a and b and False otherwise. Like wise then we may need function \
which calculates sign after exchange of its arguments.   \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowStatus", "[", "\"\<Package has been loaded\>\"", "]"}], 
  ";"}]], "Input"]
}, Open  ]]
},
WindowSize->{1249, 1480},
WindowMargins->{{5, Automatic}, {Automatic, -4}},
ShowSelection->True,
TrackCellChangeTimes->False,
FrontEndVersion->"10.3 for Linux x86 (32-bit) (December 10, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "references"->{
  Cell[3129, 94, 2676, 41, 70, "Text",
   CellTags->"references"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"references", 840390, 22693}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 150, 5, 96, "Title",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[733, 29, 238, 4, 32, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[974, 35, 129, 2, 32, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[1140, 42, 49, 0, 67, "Section"],
Cell[1192, 44, 924, 20, 246, "Text"],
Cell[2119, 66, 873, 17, 208, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3029, 88, 39, 0, 67, "Section"],
Cell[CellGroupData[{
Cell[3093, 92, 33, 0, 47, "Subsection"],
Cell[3129, 94, 2676, 41, 70, "Text",
 CellTags->"references"]
}, Closed]],
Cell[CellGroupData[{
Cell[5842, 140, 49, 0, 39, "Subsection"],
Cell[5894, 142, 641, 14, 110, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6584, 162, 35, 0, 67, "Section"],
Cell[6622, 164, 254, 4, 51, "Text"],
Cell[CellGroupData[{
Cell[6901, 172, 84, 1, 47, "Subsection"],
Cell[6988, 175, 573, 14, 71, "Text"],
Cell[CellGroupData[{
Cell[7586, 193, 320, 8, 55, "Input",
 Evaluatable->False],
Cell[7909, 203, 468, 7, 107, "Print"]
}, Open  ]],
Cell[8392, 213, 57, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[8474, 217, 78, 1, 32, "Input",
 Evaluatable->False],
Cell[8555, 220, 128, 1, 32, "Output"]
}, Open  ]],
Cell[8698, 224, 211, 4, 50, "Text"],
Cell[8912, 230, 204, 5, 32, "Input",
 Evaluatable->False],
Cell[9119, 237, 1129, 17, 137, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10285, 259, 50, 0, 47, "Subsection"],
Cell[10338, 261, 261, 5, 39, "Text"],
Cell[CellGroupData[{
Cell[10624, 270, 125, 3, 55, "Input",
 Evaluatable->False],
Cell[10752, 275, 787, 19, 127, "Output"]
}, Open  ]],
Cell[11554, 297, 132, 3, 23, "Text"],
Cell[CellGroupData[{
Cell[11711, 304, 286, 9, 35, "Input",
 Evaluatable->False],
Cell[12000, 315, 1336, 36, 155, "Output"]
}, Open  ]],
Cell[13351, 354, 477, 8, 39, "Text"],
Cell[CellGroupData[{
Cell[13853, 366, 333, 10, 35, "Input",
 Evaluatable->False],
Cell[14189, 378, 397, 10, 99, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[14635, 394, 53, 0, 39, "Subsection"],
Cell[14691, 396, 2877, 56, 70, "Text"],
Cell[17571, 454, 386, 13, 70, "Input",
 Evaluatable->False],
Cell[17960, 469, 533, 8, 70, "Text"],
Cell[18496, 479, 376, 6, 70, "Text"],
Cell[18875, 487, 1815, 47, 70, "Input",
 Evaluatable->False],
Cell[20693, 536, 137, 3, 70, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[20867, 544, 59, 0, 39, "Subsection"],
Cell[20929, 546, 96, 2, 31, "Text"],
Cell[21028, 550, 312, 7, 71, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21389, 563, 36, 0, 67, "Section"],
Cell[CellGroupData[{
Cell[21450, 567, 37, 0, 47, "Subsection"],
Cell[21490, 569, 508, 9, 90, "Text"],
Cell[22001, 580, 473, 13, 55, "Input"],
Cell[22477, 595, 110, 3, 32, "Input"],
Cell[22590, 600, 728, 20, 121, "Input"],
Cell[23321, 622, 3393, 92, 385, "Input"],
Cell[26717, 716, 1105, 30, 99, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27859, 751, 58, 0, 47, "Subsection"],
Cell[27920, 753, 252, 6, 55, "Input"],
Cell[28175, 761, 30, 0, 31, "Text"],
Cell[28208, 763, 222, 5, 55, "Input"],
Cell[28433, 770, 238, 5, 55, "Input"],
Cell[28674, 777, 78, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[28777, 783, 83, 1, 37, "Subsubsection"],
Cell[28863, 786, 276, 7, 51, "Text"],
Cell[29142, 795, 1225, 31, 187, "Input"],
Cell[30370, 828, 353, 6, 51, "Text"],
Cell[30726, 836, 502, 11, 71, "Text"],
Cell[31231, 849, 545, 15, 55, "Input"],
Cell[31779, 866, 552, 14, 99, "Input"],
Cell[32334, 882, 338, 8, 69, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32709, 895, 68, 0, 37, "Subsubsection"],
Cell[32780, 897, 252, 6, 51, "Text"],
Cell[33035, 905, 624, 18, 55, "Input"],
Cell[33662, 925, 47, 0, 31, "Text"],
Cell[33712, 927, 1099, 30, 99, "Input"],
Cell[34814, 959, 267, 6, 31, "Text"],
Cell[35084, 967, 334, 9, 32, "Input"],
Cell[35421, 978, 76, 2, 32, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35546, 986, 30, 0, 47, "Subsection"],
Cell[35579, 988, 216, 4, 51, "Text"],
Cell[35798, 994, 292, 7, 51, "Text"],
Cell[36093, 1003, 90, 2, 32, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36232, 1011, 71, 0, 67, "Section"],
Cell[36306, 1013, 775, 14, 99, "Input"],
Cell[37084, 1029, 326, 7, 99, "Input"],
Cell[37413, 1038, 30, 0, 31, "Text"],
Cell[37446, 1040, 407, 8, 99, "Input"],
Cell[37856, 1050, 442, 11, 77, "Input"],
Cell[38301, 1063, 300, 6, 77, "Input"],
Cell[38604, 1071, 293, 6, 77, "Input"],
Cell[38900, 1079, 227, 5, 55, "Input"],
Cell[39130, 1086, 294, 6, 77, "Input"],
Cell[39427, 1094, 140, 4, 32, "Input"],
Cell[39570, 1100, 1105, 17, 253, "Input"],
Cell[40678, 1119, 259, 6, 77, "Input"],
Cell[40940, 1127, 258, 6, 77, "Input"],
Cell[41201, 1135, 267, 6, 77, "Input"],
Cell[41471, 1143, 378, 7, 99, "Input"],
Cell[41852, 1152, 621, 10, 143, "Input"],
Cell[42476, 1164, 788, 14, 164, "Input"],
Cell[43267, 1180, 181, 5, 49, "Input"],
Cell[43451, 1187, 162, 4, 49, "Input"],
Cell[43616, 1193, 177, 5, 49, "Input"],
Cell[43796, 1200, 309, 6, 88, "Input"],
Cell[44108, 1208, 382, 7, 88, "Input"],
Cell[44493, 1217, 298, 6, 88, "Input"],
Cell[44794, 1225, 357, 7, 88, "Input"],
Cell[45154, 1234, 78, 2, 49, "Input"],
Cell[CellGroupData[{
Cell[45257, 1240, 49, 0, 45, "Subsection"],
Cell[CellGroupData[{
Cell[45331, 1244, 39, 0, 35, "Subsubsection"],
Cell[45373, 1246, 255, 5, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[45631, 1253, 650, 18, 55, "Input",
 Evaluatable->False],
Cell[46284, 1273, 39, 0, 23, "Text"],
Cell[46326, 1275, 103, 3, 49, "Input"],
Cell[46432, 1280, 134, 5, 24, "Text"],
Cell[46569, 1287, 1518, 40, 145, "Input"],
Cell[48090, 1329, 1332, 22, 121, "Text"],
Cell[49425, 1353, 5558, 146, 525, "Input"],
Cell[54986, 1501, 143, 5, 23, "Text"],
Cell[55132, 1508, 435, 7, 55, "Text"],
Cell[55570, 1517, 497, 11, 88, "Input"],
Cell[56070, 1530, 2887, 78, 202, "Input"],
Cell[58960, 1610, 322, 9, 49, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59319, 1624, 53, 0, 35, "Subsubsection"],
Cell[59375, 1626, 158, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[59536, 1632, 189, 6, 49, "Input"],
Cell[59728, 1640, 115, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[59846, 1643, 2626, 69, 164, "Input"],
Cell[62475, 1714, 671, 19, 58, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[63149, 1735, 253, 4, 39, "Text"],
Cell[63405, 1741, 617, 10, 56, "Text"],
Cell[64025, 1753, 4779, 118, 297, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68841, 1876, 102, 1, 35, "Subsubsection"],
Cell[68946, 1879, 505, 12, 40, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[69454, 1893, 2838, 73, 183, "Input"],
Cell[72295, 1968, 105, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[72403, 1971, 2719, 67, 183, "Input"],
Cell[75125, 2040, 542, 10, 56, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[75670, 2052, 928, 26, 107, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76635, 2083, 71, 0, 35, "Subsubsection"],
Cell[76709, 2085, 2465, 67, 240, "Input"],
Cell[79177, 2154, 146, 7, 24, "Text"],
Cell[79326, 2163, 474, 11, 40, "Text"],
Cell[79803, 2176, 28513, 603, 1513, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108365, 2785, 48, 0, 45, "Subsection"],
Cell[CellGroupData[{
Cell[108438, 2789, 51, 0, 35, "Subsubsection"],
Cell[108492, 2791, 220, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[108715, 2797, 534, 16, 35, "Input",
 Evaluatable->False],
Cell[109252, 2815, 1550, 43, 126, "Input"],
Cell[110805, 2860, 480, 15, 23, "Text"],
Cell[111288, 2877, 1160, 34, 93, "Input",
 Evaluatable->False],
Cell[112451, 2913, 3723, 94, 259, "Input"],
Cell[116177, 3009, 487, 15, 39, "Text"],
Cell[116667, 3026, 1162, 34, 93, "Input",
 Evaluatable->False],
Cell[117832, 3062, 3819, 97, 259, "Input"],
Cell[121654, 3161, 487, 15, 39, "Text"],
Cell[122144, 3178, 1162, 34, 93, "Input",
 Evaluatable->False],
Cell[123309, 3214, 3819, 97, 259, "Input"],
Cell[127131, 3313, 491, 15, 39, "Text"],
Cell[127625, 3330, 1189, 34, 93, "Input",
 Evaluatable->False],
Cell[128817, 3366, 3827, 97, 259, "Input"],
Cell[132647, 3465, 127, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[132777, 3468, 749, 21, 55, "Input",
 Evaluatable->False],
Cell[133529, 3491, 86, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[133618, 3494, 13109, 333, 620, "Input"],
Cell[146730, 3829, 143, 3, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[146876, 3834, 681, 18, 55, "Input",
 Evaluatable->False],
Cell[147560, 3854, 86, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[147649, 3857, 13128, 333, 620, "Input"],
Cell[160780, 4192, 784, 14, 55, "Text"],
Cell[161567, 4208, 124, 3, 23, "Text"],
Cell[161694, 4213, 92, 2, 23, "Text"],
Cell[161789, 4217, 2668, 57, 335, "Input"],
Cell[164460, 4276, 3060, 73, 278, "Input"],
Cell[167523, 4351, 2944, 78, 278, "Input"],
Cell[170470, 4431, 1397, 39, 126, "Input"],
Cell[171870, 4472, 1398, 39, 126, "Input"],
Cell[173271, 4513, 774, 16, 40, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[174048, 4531, 877, 24, 107, "Input"],
Cell[174928, 4557, 1541, 42, 126, "Input"],
Cell[176472, 4601, 2263, 59, 150, "Input",
 Evaluatable->False],
Cell[178738, 4662, 753, 15, 40, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[179494, 4679, 886, 25, 107, "Input"],
Cell[180383, 4706, 1523, 42, 126, "Input"],
Cell[181909, 4750, 2244, 59, 150, "Input",
 Evaluatable->False],
Cell[184156, 4811, 223, 7, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[184382, 4820, 707, 20, 69, "Input"],
Cell[185092, 4842, 1293, 34, 126, "Input"],
Cell[186388, 4878, 137, 3, 23, "Text"],
Cell[186528, 4883, 1843, 51, 145, "Input"],
Cell[188374, 4936, 489, 11, 39, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[188866, 4949, 1233, 35, 88, "Input"],
Cell[190102, 4986, 279, 8, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[190384, 4996, 817, 25, 69, "Input"],
Cell[191204, 5023, 104, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[191311, 5026, 3882, 99, 316, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195230, 5130, 71, 0, 35, "Subsubsection"],
Cell[195304, 5132, 257, 8, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[195564, 5142, 12560, 297, 1228, "Input"],
Cell[208127, 5441, 306, 5, 39, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[208436, 5448, 1636, 47, 145, "Input"],
Cell[210075, 5497, 92, 2, 23, "Text"],
Cell[210170, 5501, 283, 5, 39, "Text"],
Cell[210456, 5508, 1317, 34, 126, "Input"],
Cell[211776, 5544, 94, 2, 23, "Text"],
Cell[211873, 5548, 1945, 49, 202, "Input"],
Cell[213821, 5599, 86, 2, 23, "Text"],
Cell[213910, 5603, 423, 8, 69, "Input"],
Cell[214336, 5613, 2245, 55, 221, "Input"],
Cell[216584, 5670, 424, 13, 41, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[217011, 5685, 1860, 51, 221, "Input"],
Cell[218874, 5738, 184, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[219061, 5744, 778, 23, 69, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219876, 5772, 75, 0, 35, "Subsubsection"],
Cell[219954, 5774, 829, 12, 87, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[220786, 5788, 1555, 44, 126, "Input"],
Cell[222344, 5834, 100, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[222447, 5837, 1078, 31, 107, "Input"],
Cell[223528, 5870, 271, 5, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[223802, 5877, 76, 2, 49, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[223939, 5886, 45, 0, 62, "Section"],
Cell[223987, 5888, 915, 18, 107, "Input"],
Cell[224905, 5908, 326, 7, 69, "Input"],
Cell[225234, 5917, 30, 0, 23, "Text"],
Cell[225267, 5919, 137, 5, 24, "Text"],
Cell[225407, 5926, 491, 11, 39, "Text"],
Cell[225901, 5939, 207, 5, 49, "Input"],
Cell[226111, 5946, 201, 5, 49, "Input"],
Cell[226315, 5953, 202, 5, 49, "Input"],
Cell[226520, 5960, 192, 5, 49, "Input"],
Cell[226715, 5967, 409, 8, 107, "Input"],
Cell[227127, 5977, 311, 11, 24, "Text"],
Cell[227441, 5990, 825, 13, 147, "Input"],
Cell[228269, 6005, 133, 4, 49, "Input"],
Cell[228405, 6011, 925, 20, 150, "Input"],
Cell[229333, 6033, 129, 4, 49, "Input"],
Cell[229465, 6039, 997, 19, 147, "Input"],
Cell[230465, 6060, 129, 4, 49, "Input"],
Cell[230597, 6066, 203, 6, 39, "Text"],
Cell[230803, 6074, 1020, 20, 149, "Input"],
Cell[231826, 6096, 129, 4, 49, "Input"],
Cell[231958, 6102, 1024, 20, 149, "Input"],
Cell[232985, 6124, 130, 4, 49, "Input"],
Cell[233118, 6130, 1008, 20, 147, "Input"],
Cell[234129, 6152, 129, 4, 49, "Input"],
Cell[234261, 6158, 139, 3, 23, "Text"],
Cell[234403, 6163, 276, 7, 74, "Input",
 Evaluatable->False],
Cell[234682, 6172, 304, 7, 74, "Input",
 Evaluatable->False],
Cell[234989, 6181, 312, 7, 74, "Input",
 Evaluatable->False],
Cell[235304, 6190, 368, 8, 74, "Input",
 Evaluatable->False],
Cell[235675, 6200, 342, 7, 74, "Input",
 Evaluatable->False],
Cell[236020, 6209, 256, 6, 35, "Input",
 Evaluatable->False],
Cell[236279, 6217, 43, 0, 23, "Text"],
Cell[236325, 6219, 332, 7, 88, "Input"],
Cell[236660, 6228, 161, 4, 49, "Input"],
Cell[236824, 6234, 146, 4, 49, "Input"],
Cell[236973, 6240, 212, 5, 49, "Input"],
Cell[237188, 6247, 255, 6, 49, "Input"],
Cell[237446, 6255, 279, 6, 88, "Input"],
Cell[237728, 6263, 241, 6, 49, "Input"],
Cell[237972, 6271, 276, 6, 88, "Input"],
Cell[238251, 6279, 298, 6, 88, "Input"],
Cell[238552, 6287, 286, 6, 88, "Input"],
Cell[238841, 6295, 78, 2, 49, "Input"],
Cell[CellGroupData[{
Cell[238944, 6301, 101, 2, 45, "Subsection"],
Cell[239048, 6305, 219, 8, 24, "Text"],
Cell[239270, 6315, 1147, 39, 75, "Text"],
Cell[240420, 6356, 1961, 57, 183, "Input"],
Cell[242384, 6415, 61, 0, 23, "Text"],
Cell[242448, 6417, 1285, 36, 107, "Input"],
Cell[243736, 6455, 61, 0, 23, "Text"],
Cell[243800, 6457, 178, 5, 49, "Input"],
Cell[243981, 6464, 515, 15, 41, "Text"],
Cell[244499, 6481, 989, 29, 107, "Input"],
Cell[245491, 6512, 288, 8, 49, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245816, 6525, 55, 0, 45, "Subsection"],
Cell[CellGroupData[{
Cell[245896, 6529, 63, 0, 35, "Subsubsection"],
Cell[245962, 6531, 202, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[246167, 6537, 2928, 83, 221, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249132, 6625, 47, 0, 35, "Subsubsection"],
Cell[249182, 6627, 426, 12, 41, "Text"],
Cell[249611, 6641, 305, 9, 41, "Text"],
Cell[249919, 6652, 725, 21, 69, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250681, 6678, 79, 0, 35, "Subsubsection"],
Cell[250763, 6680, 33, 0, 23, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[250845, 6686, 62, 0, 45, "Subsection"],
Cell[250910, 6688, 168, 5, 24, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[CellGroupData[{
Cell[251103, 6697, 146, 6, 35, "Subsubsection"],
Cell[251252, 6705, 360, 8, 40, "Text"],
Cell[251615, 6715, 2464, 68, 164, "Input"],
Cell[254082, 6785, 47, 0, 23, "Text"],
Cell[254132, 6787, 346, 13, 49, "Input"],
Cell[254481, 6802, 1065, 31, 107, "Input"],
Cell[255549, 6835, 38, 0, 23, "Text"],
Cell[255590, 6837, 501, 16, 49, "Input"],
Cell[256094, 6855, 2536, 71, 221, "Input"],
Cell[CellGroupData[{
Cell[258655, 6930, 117, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[258775, 6933, 1048, 32, 55, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[259826, 6967, 128, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[259957, 6970, 1296, 37, 74, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[261256, 7009, 104, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[261363, 7012, 604, 18, 35, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[261970, 7032, 121, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[262094, 7035, 497, 16, 35, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[262594, 7053, 156, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[262753, 7059, 811, 25, 55, "Input",
 Evaluatable->False,
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[263625, 7091, 130, 3, 45, "Subsection"],
Cell[263758, 7096, 648, 12, 89, "Text"],
Cell[264409, 7110, 486, 12, 145, "Input"],
Cell[CellGroupData[{
Cell[264920, 7126, 41, 0, 35, "Subsubsection"],
Cell[264964, 7128, 5442, 170, 70, "Input"],
Cell[270409, 7300, 652, 14, 70, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[271098, 7319, 35, 0, 27, "Subsubsection"],
Cell[271136, 7321, 1215, 26, 125, "Text"],
Cell[272354, 7349, 58, 0, 23, "Text"],
Cell[272415, 7351, 6742, 198, 468, "Input"],
Cell[279160, 7551, 56, 0, 23, "Text"],
Cell[279219, 7553, 3830, 109, 267, "Input"],
Cell[283052, 7664, 3601, 106, 267, "Input"],
Cell[286656, 7772, 3517, 106, 259, "Input"],
Cell[290176, 7880, 3395, 102, 259, "Input"],
Cell[293574, 7984, 3452, 102, 183, "Input"],
Cell[297029, 8088, 2874, 84, 183, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[299952, 8178, 194, 5, 45, "Subsection"],
Cell[300149, 8185, 248, 8, 24, "Text"],
Cell[300400, 8195, 1997, 54, 183, "Input"],
Cell[302400, 8251, 464, 15, 41, "Text"],
Cell[302867, 8268, 276, 6, 40, "Text"],
Cell[303146, 8276, 2355, 65, 202, "Input"],
Cell[305504, 8343, 214, 5, 23, "Text"],
Cell[305721, 8350, 623, 21, 43, "Text"],
Cell[306347, 8373, 164, 5, 24, "Text"],
Cell[306514, 8380, 2230, 67, 164, "Input"],
Cell[308747, 8449, 2223, 67, 164, "Input"],
Cell[310973, 8518, 286, 9, 24, "Text"],
Cell[311262, 8529, 1539, 46, 107, "Input"],
Cell[312804, 8577, 65, 0, 23, "Text"],
Cell[312872, 8579, 2993, 87, 150, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[315902, 8671, 117, 4, 44, "Subsection"],
Cell[316022, 8677, 200, 6, 23, "Text"],
Cell[316225, 8685, 182, 5, 49, "Input"],
Cell[316410, 8692, 757, 23, 74, "Input"],
Cell[317170, 8717, 613, 18, 55, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[317820, 8740, 114, 3, 31, "Subsection"],
Cell[CellGroupData[{
Cell[317959, 8747, 148, 3, 35, "Subsubsection"],
Cell[318110, 8752, 144, 3, 23, "Text"],
Cell[CellGroupData[{
Cell[318279, 8759, 125, 3, 55, "Input",
 Evaluatable->False],
Cell[318407, 8764, 680, 13, 41, "Message"],
Cell[319090, 8779, 787, 19, 127, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319914, 8803, 408, 12, 55, "Input",
 Evaluatable->False],
Cell[320325, 8817, 769, 12, 152, "Print"],
Cell[321097, 8831, 12412, 276, 72, "Output"]
}, Open  ]],
Cell[333524, 9110, 433, 14, 55, "Input",
 Evaluatable->False]
}, Closed]],
Cell[CellGroupData[{
Cell[333994, 9129, 50, 0, 27, "Subsubsection"],
Cell[334047, 9131, 251, 4, 39, "Text"],
Cell[334301, 9137, 2216, 63, 126, "Input"],
Cell[336520, 9202, 133, 3, 23, "Text"],
Cell[336656, 9207, 2710, 74, 164, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[339403, 9286, 187, 6, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[339615, 9296, 206, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[339824, 9302, 568, 9, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[340407, 9314, 6924, 191, 411, "Input"],
Cell[347334, 9507, 338, 6, 39, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[347675, 9515, 5749, 157, 392, "Input"],
Cell[353427, 9674, 404, 7, 39, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[353834, 9683, 4582, 128, 354, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358453, 9816, 59, 0, 35, "Subsubsection"],
Cell[358515, 9818, 315, 8, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[358833, 9828, 355, 10, 49, "Input"],
Cell[359191, 9840, 532, 16, 40, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[359726, 9858, 506, 15, 49, "Input"],
Cell[360235, 9875, 506, 15, 49, "Input"],
Cell[360744, 9892, 353, 8, 40, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[361100, 9902, 1033, 29, 107, "Input"],
Cell[362136, 9933, 477, 14, 49, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362650, 9952, 65, 0, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[362740, 9956, 246, 7, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[362989, 9965, 458, 7, 55, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[363462, 9975, 1555, 40, 126, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[365054, 10020, 61, 0, 35, "Subsubsection"],
Cell[365118, 10022, 246, 7, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[365367, 10031, 1496, 39, 126, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366900, 10075, 96, 2, 35, "Subsubsection"],
Cell[366999, 10079, 50, 0, 23, "Text"],
Cell[367052, 10081, 146, 3, 23, "Text"],
Cell[367201, 10086, 1213, 33, 107, "Input"],
Cell[368417, 10121, 51, 0, 23, "Text"],
Cell[368471, 10123, 1168, 32, 107, "Input"],
Cell[369642, 10157, 56, 0, 23, "Text"],
Cell[369701, 10159, 1567, 43, 126, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[371317, 10208, 116, 1, 45, "Subsection"],
Cell[CellGroupData[{
Cell[371458, 10213, 43, 0, 35, "Subsubsection"],
Cell[371504, 10215, 590, 9, 71, "Text"],
Cell[372097, 10226, 119, 5, 24, "Text"],
Cell[372219, 10233, 1197, 33, 126, "Input"],
Cell[373419, 10268, 4675, 118, 240, "Input"],
Cell[378097, 10388, 359, 10, 39, "Text"],
Cell[378459, 10400, 1185, 33, 107, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379681, 10438, 38, 0, 35, "Subsubsection"],
Cell[379722, 10440, 182, 5, 23, "Text"],
Cell[379907, 10447, 1319, 34, 145, "Input"],
Cell[381229, 10483, 1544, 38, 145, "Input"],
Cell[382776, 10523, 471, 12, 39, "Text"],
Cell[383250, 10537, 1327, 35, 126, "Input"],
Cell[384580, 10574, 1505, 38, 145, "Input"],
Cell[386088, 10614, 76, 2, 49, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[386225, 10623, 106, 3, 62, "Section"],
Cell[386334, 10628, 1218, 20, 145, "Input"],
Cell[387555, 10650, 326, 7, 69, "Input"],
Cell[387884, 10659, 133, 3, 23, "Text"],
Cell[388020, 10664, 185, 5, 49, "Input"],
Cell[388208, 10671, 203, 5, 49, "Input"],
Cell[388414, 10678, 200, 5, 49, "Input"],
Cell[388617, 10685, 220, 5, 49, "Input"],
Cell[388840, 10692, 302, 6, 88, "Input"],
Cell[389145, 10700, 214, 5, 49, "Input"],
Cell[389362, 10707, 517, 9, 126, "Input"],
Cell[389882, 10718, 323, 7, 88, "Input"],
Cell[390208, 10727, 173, 5, 49, "Input"],
Cell[390384, 10734, 371, 7, 107, "Input"],
Cell[390758, 10743, 397, 8, 107, "Input"],
Cell[391158, 10753, 372, 7, 88, "Input"],
Cell[391533, 10762, 1135, 19, 221, "Input"],
Cell[392671, 10783, 759, 15, 183, "Input"],
Cell[393433, 10800, 434, 10, 107, "Input"],
Cell[393870, 10812, 441, 10, 107, "Input"],
Cell[394314, 10824, 447, 10, 107, "Input"],
Cell[394764, 10836, 441, 10, 107, "Input"],
Cell[395208, 10848, 447, 10, 107, "Input"],
Cell[395658, 10860, 443, 10, 107, "Input"],
Cell[396104, 10872, 446, 10, 107, "Input"],
Cell[396553, 10884, 358, 10, 69, "Input"],
Cell[396914, 10896, 404, 10, 107, "Input"],
Cell[397321, 10908, 1265, 24, 240, "Input"],
Cell[398589, 10934, 421, 10, 88, "Input"],
Cell[399013, 10946, 1309, 28, 259, "Input"],
Cell[400325, 10976, 78, 2, 49, "Input"],
Cell[CellGroupData[{
Cell[400428, 10982, 37, 0, 45, "Subsection"],
Cell[CellGroupData[{
Cell[400490, 10986, 39, 0, 35, "Subsubsection"],
Cell[400532, 10988, 129, 4, 24, "Text"],
Cell[400664, 10994, 2504, 69, 202, "Input"],
Cell[403171, 11065, 425, 11, 41, "Text"],
Cell[403599, 11078, 1363, 42, 164, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[404999, 11125, 55, 0, 35, "Subsubsection"],
Cell[405057, 11127, 470, 13, 40, "Text"],
Cell[405530, 11142, 163, 3, 23, "Text"],
Cell[405696, 11147, 2360, 68, 164, "Input"],
Cell[408059, 11217, 64, 0, 23, "Text"],
Cell[408126, 11219, 518, 16, 69, "Input"],
Cell[408647, 11237, 212, 4, 23, "Text"],
Cell[408862, 11243, 2914, 75, 297, "Input"],
Cell[411779, 11320, 192, 4, 23, "Text"],
Cell[411974, 11326, 3023, 77, 278, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[415034, 11408, 55, 0, 35, "Subsubsection"],
Cell[415092, 11410, 91, 2, 23, "Text"],
Cell[415186, 11414, 1229, 34, 88, "Input"],
Cell[416418, 11450, 310, 8, 39, "Text"],
Cell[416731, 11460, 271, 8, 69, "Input"],
Cell[417005, 11470, 942, 29, 88, "Input"],
Cell[417950, 11501, 163, 3, 23, "Text"],
Cell[418116, 11506, 919, 28, 88, "Input"],
Cell[419038, 11536, 939, 28, 88, "Input"],
Cell[419980, 11566, 960, 32, 75, "Text"],
Cell[420943, 11600, 347, 11, 49, "Input"],
Cell[421293, 11613, 91, 4, 55, "Text"],
Cell[421387, 11619, 983, 30, 126, "Input"],
Cell[422373, 11651, 524, 19, 57, "Text"],
Cell[422900, 11672, 1304, 35, 88, "Input"],
Cell[424207, 11709, 581, 18, 40, "Text"],
Cell[424791, 11729, 281, 8, 69, "Input"],
Cell[425075, 11739, 800, 24, 88, "Input"],
Cell[425878, 11765, 318, 10, 49, "Input"],
Cell[426199, 11777, 167, 3, 23, "Text"],
Cell[426369, 11782, 919, 28, 88, "Input"],
Cell[427291, 11812, 954, 28, 88, "Input"],
Cell[428248, 11842, 779, 25, 74, "Text"],
Cell[429030, 11869, 291, 8, 69, "Input"],
Cell[429324, 11879, 952, 29, 88, "Input"],
Cell[430279, 11910, 112, 5, 24, "Text"],
Cell[430394, 11917, 367, 11, 49, "Input"],
Cell[430764, 11930, 167, 3, 23, "Text"],
Cell[430934, 11935, 934, 28, 88, "Input"],
Cell[431871, 11965, 949, 28, 88, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[432869, 11999, 44, 0, 45, "Subsection"],
Cell[CellGroupData[{
Cell[432938, 12003, 39, 0, 35, "Subsubsection"],
Cell[432980, 12005, 568, 11, 55, "Text"],
Cell[433551, 12018, 1396, 38, 107, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[434984, 12061, 46, 0, 35, "Subsubsection"],
Cell[435033, 12063, 552, 17, 41, "Text"],
Cell[435588, 12082, 3313, 88, 202, "Input"],
Cell[438904, 12172, 527, 8, 55, "Text"],
Cell[439434, 12182, 2639, 78, 202, "Input"],
Cell[442076, 12262, 497, 10, 56, "Text"],
Cell[442576, 12274, 7822, 199, 601, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[450447, 12479, 29, 0, 44, "Subsection"],
Cell[CellGroupData[{
Cell[450501, 12483, 47, 0, 35, "Subsubsection"],
Cell[450551, 12485, 292, 9, 24, "Text"],
Cell[450846, 12496, 126, 3, 49, "Input"],
Cell[450975, 12501, 317, 6, 88, "Input"],
Cell[451295, 12509, 3162, 87, 221, "Input"],
Cell[454460, 12598, 734, 26, 42, "Text"],
Cell[455197, 12626, 401, 12, 49, "Input"],
Cell[455601, 12640, 660, 20, 49, "Input"],
Cell[456264, 12662, 153, 4, 24, "Text"],
Cell[456420, 12668, 1450, 38, 126, "Input"],
Cell[457873, 12708, 173, 5, 24, "Text"],
Cell[458049, 12715, 845, 25, 69, "Input"],
Cell[458897, 12742, 867, 25, 69, "Input"],
Cell[459767, 12769, 349, 11, 40, "Text"],
Cell[460119, 12782, 3010, 77, 221, "Input"],
Cell[463132, 12861, 160, 5, 24, "Text"],
Cell[463295, 12868, 1282, 41, 164, "Input"],
Cell[464580, 12911, 8709, 259, 563, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[473338, 13176, 96, 2, 45, "Subsection"],
Cell[CellGroupData[{
Cell[473459, 13182, 39, 0, 35, "Subsubsection"],
Cell[473501, 13184, 60, 0, 23, "Text"],
Cell[473564, 13186, 2882, 77, 183, "Input"],
Cell[476449, 13265, 230, 6, 24, "Text"],
Cell[476682, 13273, 2882, 77, 169, "Input",
 Evaluatable->False],
Cell[479567, 13352, 3053, 81, 169, "Input",
 Evaluatable->False],
Cell[482623, 13435, 53, 0, 23, "Text"],
Cell[482679, 13437, 3276, 88, 221, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[485992, 13530, 42, 0, 35, "Subsubsection"],
Cell[486037, 13532, 375, 6, 39, "Text"],
Cell[486415, 13540, 1613, 45, 126, "Input"],
Cell[488031, 13587, 284, 5, 39, "Text"],
Cell[488318, 13594, 158, 4, 35, "Input",
 Evaluatable->False],
Cell[488479, 13600, 42, 0, 23, "Text"],
Cell[488524, 13602, 176, 5, 49, "Input"],
Cell[488703, 13609, 428, 9, 39, "Text"],
Cell[489134, 13620, 3622, 114, 164, "Input"],
Cell[492759, 13736, 506, 16, 41, "Text"],
Cell[493268, 13754, 4399, 112, 354, "Input"],
Cell[497670, 13868, 69, 0, 23, "Text"],
Cell[497742, 13870, 465, 14, 49, "Input"],
Cell[498210, 13886, 2418, 70, 145, "Input"],
Cell[500631, 13958, 1858, 51, 164, "Input"],
Cell[502492, 14011, 1920, 53, 164, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504449, 14069, 35, 0, 35, "Subsubsection"],
Cell[504487, 14071, 474, 10, 39, "Text"],
Cell[504964, 14083, 2565, 73, 126, "Input"],
Cell[507532, 14158, 1309, 39, 88, "Input"],
Cell[508844, 14199, 307, 5, 39, "Text"],
Cell[509154, 14206, 10860, 260, 563, "Input"],
Cell[520017, 14468, 698, 18, 126, "Input"],
Cell[520718, 14488, 397, 8, 40, "Text"],
Cell[521118, 14498, 2782, 75, 202, "Input"],
Cell[523903, 14575, 171, 3, 23, "Text"],
Cell[524077, 14580, 7331, 170, 525, "Input"],
Cell[531411, 14752, 109, 3, 49, "Input"],
Cell[531523, 14757, 96, 2, 23, "Text"],
Cell[531622, 14761, 1054, 33, 69, "Input"],
Cell[532679, 14796, 2720, 67, 164, "Input"],
Cell[535402, 14865, 76, 2, 49, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[535539, 14874, 74, 0, 62, "Section"],
Cell[535616, 14876, 550, 11, 88, "Input"],
Cell[536169, 14889, 326, 7, 69, "Input"],
Cell[536498, 14898, 193, 5, 49, "Input"],
Cell[536694, 14905, 295, 6, 88, "Input"],
Cell[536992, 14913, 689, 12, 145, "Input"],
Cell[537684, 14927, 300, 6, 88, "Input"],
Cell[537987, 14935, 1239, 22, 240, "Input"],
Cell[539229, 14959, 371, 7, 88, "Input"],
Cell[539603, 14968, 392, 8, 88, "Input"],
Cell[539998, 14978, 1038, 24, 183, "Input"],
Cell[541039, 15004, 414, 8, 107, "Input"],
Cell[541456, 15014, 610, 16, 35, "Text"],
Cell[542069, 15032, 78, 2, 49, "Input"],
Cell[CellGroupData[{
Cell[542172, 15038, 37, 0, 45, "Subsection"],
Cell[CellGroupData[{
Cell[542234, 15042, 39, 0, 35, "Subsubsection"],
Cell[542276, 15044, 735, 18, 57, "Text"],
Cell[543014, 15064, 180, 5, 49, "Input"],
Cell[543197, 15071, 237, 6, 24, "Text"],
Cell[543437, 15079, 3792, 95, 354, "Input"],
Cell[547232, 15176, 91, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[547326, 15179, 710, 21, 49, "Input"],
Cell[548039, 15202, 159, 4, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[548201, 15208, 1744, 47, 164, "Input"],
Cell[549948, 15257, 115, 1, 23, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[550066, 15260, 3618, 95, 221, "Input"],
Cell[553687, 15357, 391, 9, 41, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[554081, 15368, 6339, 171, 297, "Input"],
Cell[560423, 15541, 797, 14, 152, "Text"],
Cell[561223, 15557, 5010, 141, 240, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[566270, 15703, 34, 0, 35, "Subsubsection"],
Cell[566307, 15705, 64, 0, 23, "Text"],
Cell[566374, 15707, 3297, 84, 240, "Input"],
Cell[569674, 15793, 307, 8, 24, "Text"],
Cell[569984, 15803, 425, 13, 49, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[570446, 15821, 82, 1, 35, "Subsubsection"],
Cell[570531, 15824, 516, 9, 57, "Text"],
Cell[571050, 15835, 4574, 112, 335, "Input"],
Cell[575627, 15949, 543, 17, 41, "Text"],
Cell[576173, 15968, 1791, 46, 145, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[578001, 16019, 84, 1, 35, "Subsubsection"],
Cell[578088, 16022, 693, 10, 71, "Text"],
Cell[578784, 16034, 514, 13, 41, "Text"],
Cell[579301, 16049, 2587, 68, 164, "Input"],
Cell[581891, 16119, 195, 8, 24, "Text"],
Cell[582089, 16129, 32633, 738, 2539, "Input"],
Cell[614725, 16869, 222, 7, 24, "Text"],
Cell[614950, 16878, 859, 25, 88, "Input"],
Cell[615812, 16905, 415, 9, 40, "Text"],
Cell[616230, 16916, 6810, 178, 506, "Input"],
Cell[623043, 17096, 242, 6, 23, "Text"],
Cell[623288, 17104, 4518, 134, 278, "Input"],
Cell[627809, 17240, 186, 4, 23, "Text"],
Cell[627998, 17246, 1081, 36, 88, "Input"],
Cell[629082, 17284, 446, 14, 69, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[629565, 17303, 68, 0, 35, "Subsubsection"],
Cell[629636, 17305, 511, 8, 55, "Text"],
Cell[630150, 17315, 425, 14, 88, "Input"],
Cell[630578, 17331, 133, 3, 23, "Text"],
Cell[630714, 17336, 1121, 36, 107, "Input"],
Cell[631838, 17374, 29, 0, 23, "Text"],
Cell[631870, 17376, 997, 31, 107, "Input"],
Cell[632870, 17409, 29, 0, 23, "Text"],
Cell[632902, 17411, 9250, 267, 297, "Input"],
Cell[642155, 17680, 29, 0, 23, "Text"],
Cell[642187, 17682, 9432, 271, 297, "Input"],
Cell[651622, 17955, 29, 0, 23, "Text"],
Cell[651654, 17957, 14871, 402, 468, "Input"],
Cell[666528, 18361, 6758, 184, 411, "Input"],
Cell[673289, 18547, 720, 18, 58, "Text"],
Cell[674012, 18567, 3985, 105, 240, "Input"],
Cell[678000, 18674, 97, 2, 23, "Text"],
Cell[678100, 18678, 5446, 148, 278, "Input"],
Cell[683549, 18828, 203, 4, 23, "Text"],
Cell[683755, 18834, 24527, 640, 810, "Input"],
Cell[708285, 19476, 129, 2, 126, "Input"],
Cell[708417, 19480, 292, 8, 40, "Text"],
Cell[708712, 19490, 4677, 132, 411, "Input"],
Cell[713392, 19624, 168, 5, 24, "Text"],
Cell[713563, 19631, 8997, 205, 563, "Input"],
Cell[722563, 19838, 1109, 20, 88, "Text"],
Cell[723675, 19860, 643, 18, 69, "Input"],
Cell[724321, 19880, 165, 3, 23, "Text"],
Cell[724489, 19885, 1867, 48, 202, "Input"],
Cell[726359, 19935, 6826, 162, 449, "Input"],
Cell[733188, 20099, 2292, 63, 145, "Input"],
Cell[735483, 20164, 251, 5, 23, "Text"],
Cell[735737, 20171, 45849, 1073, 2995, "Input"],
Cell[781589, 21246, 277, 9, 24, "Text"],
Cell[781869, 21257, 6867, 175, 468, "Input"],
Cell[788739, 21434, 242, 4, 39, "Text"],
Cell[788984, 21440, 2529, 66, 150, "Input",
 Evaluatable->False],
Cell[791516, 21508, 116, 3, 23, "Text"],
Cell[791635, 21513, 2643, 67, 240, "Input"],
Cell[794281, 21582, 632, 11, 87, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[794950, 21598, 77, 0, 35, "Subsubsection"],
Cell[795030, 21600, 1383, 23, 103, "Text"],
Cell[796416, 21625, 752, 16, 40, "Text"],
Cell[797171, 21643, 885, 28, 55, "Input",
 Evaluatable->False],
Cell[798059, 21673, 4348, 110, 392, "Input"],
Cell[802410, 21785, 376, 10, 40, "Text"],
Cell[802789, 21797, 76, 2, 49, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[802926, 21806, 35, 0, 62, "Section"],
Cell[802964, 21808, 31, 0, 23, "Text"],
Cell[802998, 21810, 202, 6, 49, "Input"],
Cell[803203, 21818, 326, 7, 69, "Input"],
Cell[803532, 21827, 21, 0, 23, "Text"],
Cell[803556, 21829, 489, 9, 107, "Input"],
Cell[804048, 21840, 501, 9, 107, "Input"],
Cell[804552, 21851, 510, 9, 107, "Input"],
Cell[805065, 21862, 78, 2, 49, "Input"],
Cell[CellGroupData[{
Cell[805168, 21868, 50, 0, 45, "Subsection"],
Cell[805221, 21870, 18, 0, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[805276, 21875, 76, 0, 45, "Subsection"],
Cell[805355, 21877, 2215, 38, 104, "Text"],
Cell[807573, 21917, 1021, 31, 107, "Input"],
Cell[808597, 21950, 1082, 32, 145, "Input"],
Cell[809682, 21984, 1191, 34, 145, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[810910, 22023, 25, 0, 44, "Subsection"],
Cell[CellGroupData[{
Cell[810960, 22027, 28, 0, 35, "Subsubsection"],
Cell[810991, 22029, 76, 2, 49, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[811128, 22038, 42, 0, 62, "Section"],
Cell[811173, 22040, 72, 0, 23, "Text"],
Cell[811248, 22042, 278, 8, 35, "Input",
 Evaluatable->False],
Cell[811529, 22052, 347, 8, 55, "Input",
 Evaluatable->False],
Cell[811879, 22062, 36, 0, 23, "Text"],
Cell[811918, 22064, 424, 11, 55, "Input",
 Evaluatable->False],
Cell[812345, 22077, 244, 6, 35, "Input",
 Evaluatable->False],
Cell[812592, 22085, 99, 3, 35, "Input",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[812716, 22092, 50, 0, 45, "Subsection"],
Cell[812769, 22094, 160, 3, 23, "Text"],
Cell[812932, 22099, 174, 5, 35, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[813143, 22109, 49, 0, 45, "Subsection"],
Cell[813195, 22111, 116, 3, 23, "Text"],
Cell[813314, 22116, 2335, 61, 131, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[815686, 22182, 48, 0, 45, "Subsection"],
Cell[815737, 22184, 264, 8, 55, "Input",
 Evaluatable->False],
Cell[CellGroupData[{
Cell[816026, 22196, 133, 4, 35, "Subsubsection"],
Cell[816162, 22202, 159, 5, 24, "Text"],
Cell[816324, 22209, 185, 6, 35, "Input",
 Evaluatable->False],
Cell[816512, 22217, 173, 5, 35, "Input",
 Evaluatable->False],
Cell[816688, 22224, 97, 3, 35, "Input",
 Evaluatable->False]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[816846, 22234, 32, 0, 62, "Section"],
Cell[816881, 22236, 108, 3, 23, "Text"],
Cell[816992, 22241, 78, 2, 49, "Input"],
Cell[CellGroupData[{
Cell[817095, 22247, 111, 2, 49, "Input"],
Cell[817209, 22251, 45, 1, 42, "Output"]
}, Open  ]],
Cell[817269, 22255, 523, 15, 69, "Input"],
Cell[817795, 22272, 100, 3, 49, "Input"],
Cell[817898, 22277, 76, 2, 49, "Input"],
Cell[817977, 22281, 98, 2, 49, "Input"],
Cell[818078, 22285, 119, 3, 23, "Text"],
Cell[818200, 22290, 95, 3, 49, "Input"],
Cell[CellGroupData[{
Cell[818320, 22297, 287, 8, 49, "Input"],
Cell[818610, 22307, 4245, 68, 715, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[822892, 22380, 298, 9, 49, "Input"],
Cell[823193, 22391, 15882, 247, 2059, "Output"]
}, Open  ]],
Cell[839090, 22641, 55, 0, 23, "Text"],
Cell[CellGroupData[{
Cell[839170, 22645, 109, 2, 49, "Input"],
Cell[839282, 22649, 45, 1, 42, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[839376, 22656, 49, 0, 62, "Section"],
Cell[839428, 22658, 36, 0, 23, "Text"],
Cell[839467, 22660, 85, 2, 23, "Text"],
Cell[839555, 22664, 123, 3, 23, "Text"],
Cell[839681, 22669, 235, 4, 39, "Text"],
Cell[839919, 22675, 114, 3, 49, "Input"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
